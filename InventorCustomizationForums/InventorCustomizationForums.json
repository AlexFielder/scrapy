[
{"created at": ["\u200e02-27-2019 01:18 AM"], "solution Title": "\n                        Re: Check Constrain error and suppress it\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "AssemblyDocument", " = oinv.ActiveDocument \n", "Dim", " ", "oconstrain", " ", "As", " ", "AssemblyConstraint", " \n\n", "For", " ", "Each", " ", "oconstrain", " ", "In", " ", "oDoc", ".", "ComponentDefinition", ".", "Constraints", "\n    ", "If", " ", "Not", " ", "oconstrain", ".", "HealthStatus", " = ", "HealthStatusEnum", ".", "kUpToDateHealth", "   ", "Then", "\n        ", "MsgBox", "(", "\"Error\"", ")\n        ", "oconstrain", ".", "Suppressed", " = ", "True", "\n    ", "End", " ", "If", "\n", "Next"], "author": "JaneFan"},
{"created at": ["\u200e02-27-2019 02:56 AM"], "solution Title": "\n                        Re: Programming Help Access/App\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: adaptive workpoint  assembly -> redefine with geometry from another part\n                    ", "solution": ["Sub", " ", "Main", "()\n", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", "\n", "oAsmCompDef", " = ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", "\n", "Dim", " ", "oPart", " ", "As", " ", "ComponentOccurrence", "\n\n", "'Pick part occurrence", "\n", "oPart", " = ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "SelectionFilterEnum", ".", "kAssemblyLeafOccurrenceFilter", ", ", "\"Seleccione Pieza\"", ")\n\t", "If", " ", "oPart", " ", "Is", " ", "Nothing", " ", "Then", "\n\t\t", "Exit", " ", "Sub", "\n\t", "Else", "\n\t\t", "oPart", ".", "Adaptive", " = ", "True", "\n\t\t", "oPart", ".", "Edit", "\n\t\t", "Dim", " ", "oDef", " ", "As", " ", "PartComponentDefinition", "\n\t        ", "oDef", " = ", "oPart", ".", "Definition", "\n\n\t\t", "Dim", " ", "oMed1", " ", "As", " ", "WorkPoint", "\n\t\t", "oMed1", " = ", "oDef", ".", "WorkPoints", ".", "Item", "(", "\"Med1\"", ")\n\n\t\t", "Dim", " ", "oCommand", " ", "As", " ", "CommandManager", "\n\t\t", "oCommand", " = ", "ThisApplication", ".", "CommandManager", "\n\n\t\t", "oCommand", ".", "DoSelect", "(", "oMed1", ")", "'Select workpoint", "\n\n\t\t", "Dim", " ", "oControlDef", " ", "As", " ", "ControlDefinition", " ", "' Get control definition for the line command. ", "\n\t\t", "oControlDef", " = ", "oCommand", ".", "ControlDefinitions", ".", "Item", "(", "\"RedefineFeatureWrapperCmd\"", ")  \n\n\t\t", "oControlDef", ".", "Execute2", "(", "True", ")  ", "' Execute the command. ", "\n\t\t\n\t\t", "oPart", ".", "ExitEdit", "(63746) ", "'kExitToParent ", "\n\t\t\t\t\n\t", "End", " ", "If", "\n", "End", " ", "Sub"], "author": "yuvilo_"},
{"created at": [], "solution Title": "\n                        Re: Error message: Object variable or With block variable not set\n                    ", "solution": ["Sub main()\noCust_Prop_Sub()\nEnd Sub\n\nSub oCust_Prop_Sub()\n'Define the open document\nDim openDoc As Document\nopenDoc = ThisDoc.Document\n\n'Look at the model file referenced in the open document\nDim docFile As Document\nIf ThisDoc.ModelDocument IsNot Nothing Then\ndocFile = ThisDoc.ModelDocument\nElse\nMessageBox.Show(\"NOT OK, This drawing has no model reference\", \"iLogic\")\nReturn\nEnd If\n\n'oModelDoc = IO.Path.GetFileName(ThisDrawing.ModelDocument.FullFileName)\n'format model file name                   \nDim FNamePos As Long\nFNamePos = InStrRev(docFile.FullFileName, \"\\\", -1)                        \nDim docFName As String \ndocFName = Right(docFile.FullFileName, Len(docFile.FullFileName) - FNamePos) \n\n'define the property set\ncustomPropertySet = docFile.PropertySets.Item(\"Inventor User Defined Properties\")\n\noName_Prop1 = \"TOTAL QTY\"\noName_Prop2 = \"ROLLING_ALLOWANCE\"\n\nDim oCustiProperties_Array As New ArrayList\t\noCustiProperties_Array.Add(oName_Prop1)\t\noCustiProperties_Array.Add(oName_Prop2)\n\nFor i = 0 To oCustiProperties_Array.Count-1\n\t'look for the custom propety and add it if not found \n\tTry\n\t\tprop = customPropertySet.Item(oCustiProperties_Array.Item(i))\n\t\tMessageBox.Show(prop.Name & \": EXISTS\" _\n\t\t& vbLf & prop.Name & \" (VALUE): \" & prop.Value, \"CUST PROP\")\n\t\toPrompt = \"EDIT/ASSIGN DATA\"\n\tCatch\n\t\tcustomPropertySet.Add(\"TEST\", oCustiProperties_Array.Item(i))", "\t\tprop = customPropertySet.Item(oCustiProperties_Array.Item(i))", "\n\t\tMessageBox.Show(prop.Name & \": ADDED\" _\n\t\t& vbLf & prop.Name & \" (VALUE): \" & prop.Value, \"CUST PROP\")\n\t\toPrompt = \"ASSIGN DATA\"\n\tEnd Try\n\tprop.Value = InputBox(oPrompt, prop.Name, prop.Value)\nNext i\niLogicVb.UpdateWhenDone = True\nInventorVb.DocumentUpdate()\nEnd Sub\n"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Object reference not set to an instance - oCurrentNumber = oDoc.ActiveSheet\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Autodesk Inventor add-in blocked\n                    ", "solution": [], "author": "Reza.Deabae"},
{"created at": [], "solution Title": "\n                        Re: Changing the size of a drawing sheet\n                    ", "solution": ["odrawdoc", ".", "Sheets", "(", "\"Sheet:2\"", ") instead of", "odrawdoc", ".", "Sheet", "(", "\"Sheet:2\"", ")", "Dim", " ", "odrawdoc", " ", "As", " ", "DrawingDocument", "\n", "odrawdoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "osheet", " ", "As", " ", "Sheet", "\n", "osheet", " = ", "odrawdoc", ".", "Sheets", "(", "\"Sheet:2\"", ")\n\n", "With", " ", "osheet", "\n\t.", "Size", " = ", "kCustomDrawingSheetSize", "\n\t.", "Width", " = 100\n\t.", "Height", " = 100\n", "End", " ", "With"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: PartsList.Add - VBA run time error\n                    ", "solution": ["Option Explicit\n\nPublic Sub AddPartList()\n\n    'On Error Resume Next\n\n    ' Set a reference to the drawing document.\n    ' This assumes a drawing document is active.\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n\n    'Set a reference to the active sheet.\n    Dim oSheet As Sheet\n    Set oSheet = oDrawDoc.ActiveSheet\n\n    ' Set a reference to the first drawing view on\n    ' the sheet. This assumes the first drawing\n    ' view on the sheet is not a draft view.\n    Dim oDrawingView As DrawingView\n    Set oDrawingView = oSheet.DrawingViews(1)\n\n    ' Set a reference to th sheet's border\n    Dim Oborder As border\n    Set Oborder = oSheet.border\n \n    Dim RightCorner As Point2d\n    Dim oPlacementPoint As Point2d\n\n   ' If Not oBorder Is Nothing Then\n        ' A border exists. The placement point\n        ' is the top-right corner of the border.\n        Set RightCorner = Oborder.rangeBox.MaxPoint\n        Debug.Print RightCorner.x\n        Debug.Print RightCorner.y\n    'Else\n        ' There is no border. The placement point\n        ' is the top-right corner of the sheet.\n        Set oPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(RightCorner.x - 0.5, RightCorner.y - 0.5)\n   ' End If\n\n    ' Create the parts list.\n    On Error Resume Next\n    Dim oPartsList As PartsList\n    Set oPartsList = oSheet.PartsLists.Add(oDrawingView, oPlacementPoint, kStructuredAllLevels)\n    'Check if error occur to bom structure is error number 5\n    If Err.Number = 5 Then\n        Debug.Print Err.Number\n        Err.Clear\n        MsgBox \"Check Assembly BOM: Is not Structured All Levels \"\n    End If\n    'Set oPartsList = oSheet.RevisionTables.Add(oPlacementPoint) '(oDrawingView, oPlacementPoint)\n    'Set oPartsList = oSheet.PartsLists.Add(oDrawingView, oPlacementPoint, kStructuredAllLevels)\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Options or custimazation to BOM export via ilogic to excel\n                    ", "solution": ["oPartsOnlyBOMView", ".", "Export", " (", "oPATH", " + ", "ThisDoc", ".", "FileName", "(", "False", ") + ", "\" GA\"", " + ", "\".xls\"", ", ", "kMicrosoftExcelFormat", ", ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Designer\"", "))", "oDef", " = ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", "\n", "oAxes", " = ", "oDef", ".", "WorkAxes", "\n\n", "Quantity", " = 2", "'Input Quantity for first line of pattern.", "\n\n", "'Quantity = 2'Optional Input Quantity for second line of pattern to make a grid.", "\n\n", "colBOM", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateObjectCollection", "\n", "'Create Object Collection for use in Add Rectangular Pattern Method.", "\n\n", "For", " ", "Each", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", " ", "In", " ", "oDef", ".", "Occurrences", "\n\t", "If", " ", "oOcc", ".", "IsPatternElement", " = ", "False", " ", "Then", " ", "colBOM", ".", "Add", "(", "oOcc", ")\n", "Next", "\n", "For", " ", "Each", " ", "oPat", " ", "As", " ", "OccurrencePattern", " ", "In", " ", "oDef", ".", "OccurrencePatterns", "\n\t", "colBOM", ".", "Add", "(", "oPat", ")\n", "Next", "\n", "'For Each Component Occurrence in this Assemblies list of Occurrences, add to the colBOM collection object.", "\n\n", "oPattern", " = ", "oDef", ".", "OccurrencePatterns", ".", "AddRectangularPattern", "(", "colBOM", ", _", "'Collection used for input.", "\n", "oAxes", ".", "Item", "(", "\"X Axis\"", "), _", "'Axis used to determine the first line of the pattern.", "\n", "True", ", _", "'Boolean to determine the direction of the first line.", "\n0, _", "'Distance between pattern elements on the first line in centimeters.", "\n", "Quantity", ")", "', _'Quantity of pattern elements in first line.", "\n", "'oAxes.Item(\"Y Axis\"), _'Optional Axis used to determine the second line of the pattern to make a grid.", "\n", "'True, _'Optional Boolean to determine the direction of the second line to make a grid.", "\n", "'0, _'Optional Distance between pattern elements on the second line in centimeters.", "\n", "'Quantity2, _'Quantity of pattern elements in second line.)"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Timer needed to run excel macro from inventor with ilogic\n                    ", "solution": ["oDoc", " = ", "ThisDoc", ".", "ModelDocument", "\n", "oPath", " = ", "ThisDoc", ".", "Path", "\n", "If", " ", "oDoc", ".", "DocumentType", " = ", "kPartDocumentObject", " ", "Then", "\n\t", "MessageBox", ".", "Show", "(", "\"Assemblage requis\"", ", ", "\"\"", ")\n\t", "Return", "\n", "End", " ", "If", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oBOM", " ", "As", " ", "BOM", "\n", "oBOM", " = ", "oDoc", ".", "ComponentDefinition", ".", "BOM", "\n\n", "'ActivationVue BOM Pieces Uniquement", "\n", "oBOM", ".", "PartsOnlyViewEnabled", " = ", "True", "\n", "Dim", " ", "oPartsOnlyBOMView", " ", "As", " ", "BOMView", "\n", "Dim", " ", "XlName", " ", "As", " ", "String", "\n", "XlName", " = ", "ThisDoc", ".", "PathAndFileName", "(", "False", ") + ", "\" - (BOM du \"", " & ", "DateTime", ".", "Now", ".", "ToString", "(", "\"dd-MM-yy\"", ") & ", "\").xlsx\"", "\n", "oPartsOnlyBOMView", " = ", "oBOM", ".", "BOMViews", ".", "Item", "(", "\"pi\u00e8ces uniquement\"", ")\n\n", "' ExportDans Excel", "\n", "oPartsOnlyBOMView", ".", "Export", "(", "XlName", ", ", "kMicrosoftExcelFormat", ")\n\n", "'Lancement de la macro excel", "\n", "GoExcel", ".", "Open", "(", "XlName", ", ", "\"Feuil1\"", ")\n", "excelApp", " = ", "GoExcel", ".", "Application", "\n", "excelApp", ".", "Run", "(", "\"'\"", " & ", "\"D:\\RessourcesInventor\\Macros\\MacroInventor.xlsm\"", " & ", "\"'!TCD_BOM\"", ")\n", "excelApp", "= ", "Nothing", "\n", "GoExcel", ".", "Save", "\n", "GoExcel", ".", "Close", "\n\n", "'OuvertureFichier Excel", "\n", "ThisDoc", ".", "Launch", "(", "XlName", ")\n\n"], "author": "frip01"},
{"created at": [], "solution Title": "\n                        Re: Empty part number if BOM is phantom\n                    ", "solution": ["'Define the open document\nDim oDoc As Document\noDoc = ThisApplication.ActiveDocument\n\n\nTry\n\t'Check if the Category is either Without Item or Weldment Part\n\tIf iProperties.Value(\"CUSTOM\", \"ItemCategory\") = \"Without Item\" Or iProperties.Value(\"CUSTOM\", \"ItemCategory\") = \"Weldment Part\"\n\t\t'Set the Part Number to blank\n\t\tiProperties.Value(\"Project\", \"Part Number\") = \"\"\n\tEnd If\nCatch\nEnd Try\n\nIf oDoc.DocumentType = kAssemblyDocumentObject\n'Define all the documents in an assembly\nDim compDef As ComponentDefinition \ncompDef = oDoc.ComponentDefinition\nDim compOcc As ComponentOccurrence\nFor Each compOcc In compDef.Occurrences\n\tTry\n\t\t'Check if the Category is either Without Item or Weldment Part for each document in assembly\n\t\tIf iProperties.Value(compOcc.Name,\"CUSTOM\", \"ItemCategory\") = \"Without Item\" Or iProperties.Value(compOcc.Name,\"CUSTOM\", \"ItemCategory\") = \"Weldment Part\"\n\t\t\t'Set the Part Number to blank\n\t\t\tiProperties.Value(compOcc.Name,\"Project\", \"Part Number\") = \"\"\n\t\tEnd If\n\tCatch\n\tEnd Try\nNext\nEnd If\n\n'Update file\niLogicVb.UpdateWhenDone = True"], "author": "mrawesomelemons"},
{"created at": [], "solution Title": "\n                        Re: Convert macro to iLogic\n                    ", "solution": ["oDoc = ThisApplication.ActiveDocument\n\nDim oCamera As Camera\nDim oView As View\noView = ThisApplication.ActiveView\noView.WindowState = WindowsSizeEnum.kMaximize\n\nDim Top As Long, Left As Long, height As Long, width As Long\nCall oView.GetWindowExtents(Top, Left, height, width)\n\n'[ Set current view size \n\toView.WindowState = WindowsSizeEnum.kNormalWindow\n\tDim Top2 As Long, Left2 As Long, height2 As Long, width2 As Long\n\tCall oView.GetWindowExtents(Top2, Left2, height2, width2)\n\t\n\toHeader = (Top2 - Top)/2\n\t\n\toView.WindowState = WindowsSizeEnum.kNormalWindow\n\toView.Height = (oView.Height/2) -(oHeader*.8)\n\toView.Width = oView.Width /2\n\t\n\toView.Activate\n\toCamera = oView.Camera\n\toCamera.ViewOrientationType = ViewOrientationTypeEnum.kTopViewOrientation\n\toCamera.ApplyWithoutTransition\n']\n\n'[ Add Front View\n\tDim oFView As View\n\toFView = oDoc.Views.Add()\n\toFView.Caption = oFView.Caption & \"FRONT\"\n\t\n\toFView.WindowState = WindowsSizeEnum.kNormalWindow\n\toFView.Height =  oView.Height\n\toFView.Top = Top2 + oView.Height +  (oHeader*2.25)\n\toFView.Left = oView.Left\n\toFView.Width = oView.Width \n\t\n\toFView.Activate\n\toCamera = oFView.Camera\n\toCamera.ViewOrientationType = ViewOrientationTypeEnum.kFrontViewOrientation\n\toCamera.ApplyWithoutTransition\n']\n\n'[ Add Right View\n\tDim oRView As View\n\toRView = oDoc.Views.Add()\n\toRView.Caption = oRView.Caption & \"RIGHT\"\n\t\n\toRView.WindowState = WindowsSizeEnum.kNormalWindow\n\toRView.Height =  oView.Height\n\toRView.Top = Top2 + oView.Height +  (oHeader*2.25)\n\toRView.Left = Left2 + oView.Width +(oHeader*.8)\n\toRView.Width = oView.Width \t\n\t\n\toRView.Activate\n\toCamera = oRView.Camera\n\toCamera.ViewOrientationType = ViewOrientationTypeEnum.kRightViewOrientation\n\toCamera.ApplyWithoutTransition\n']\n\n'[ Add Iso View\n\tDim oIView As View\n\toIView = oDoc.Views.Add()\n\toIView.Caption = oIView.Caption & \"ISO\"\n\t\n\toIView.WindowState = WindowsSizeEnum.kNormalWindow\n\toIView.Height =  oView.Height\n\toIView.Top = Top2 \n\toIView.Left = Left2 + oView.Width +(oHeader*.8)\n\toIView.Width = oView.Width \t\t\t\n\t\n\toIView.Activate\n\toCamera = oIView.Camera\n\toCamera.ViewOrientationType = ViewOrientationTypeEnum.kIsoTopRightViewOrientation\n\toCamera.ApplyWithoutTransition\n']\n\t\n'set original view active\noView.Activate\n\n\nEnd Sub"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: [iLogic] copy external file from A to B and delete original file\n                    ", "solution": ["Dim source As String = \"C:\\TEMP\\OUTPUT\\TargetDocument.txt\" 'change as needed\nDim destination As String = ThisDoc.Path & \"\\MyNewName.txt\" 'change as needed\nDim fso = ThisApplication.FileManager.FileSystemObject\nfso.copyFile(source, destination, True) 'True to overwrite", "fso", ".", "DeleteFile", "(", "source", ")"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Turning on/off visibility of work planes/axis for Content Center parts\n                    ", "solution": ["app.[_LibraryDocumentModifiable] = True                               \u2018 Allow Library document modification\noPart.PropertySets.Item(1).Item(1).Value = \"test123\"              \u2018 Modify a property in a read-only document\napp.[_LibraryDocumentModifiable] = False                              \u2018 Revert to default behavior"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Can not compare part number and the name of parameter\n                    ", "solution": [], "author": "son.lengoc"},
{"created at": [], "solution Title": "\n                        Re: [iLogic] Wait for a shell command to finish\n                    ", "solution": ["Dim Sh, ReturnCode\nSh = CreateObject(\"WScript.Shell\")\nReturnCode = Sh.Run(\"c:\\teste\\command.exe\", 7, True)"], "author": "Marco_Cruz"},
{"created at": [], "solution Title": "\n                        Re: urgent: how to register a DLL in windows 10\n                    ", "solution": [], "author": "liminma8458"},
{"created at": [], "solution Title": "\n                        Re: Import .obj into assembly and set its units.\n                    ", "solution": ["            For i = 1 To invApp.ApplicationAddIns.Count()\n                Debug.Print(invApp.ApplicationAddIns.Item(i).DisplayName)\n                Debug.Print(invApp.ApplicationAddIns.Item(i).ClassIdString)\n            Next"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: iLogic partslist expand children\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nDim doc As DrawingDocument = app.ActiveDocument\nDim oSheet As Sheet = doc.ActiveSheet\nDim partslist As PartsList = oSheet.PartsLists(1)\nDim oRow As PartsListRow\nDim FirstRowCount As Integer = partslist.PartsListRows.Count\nDim LastRowCount As Integer = 0\nDo Until FirstRowCount = LastRowCount\n\tFirstRowCount = partslist.PartsListRows.Count\n\tFor Each oRow In partslist.PartsListRows\n\t\tTry\n\t\t\toRow.Expanded = True\n\t\tCatch ex As Exception\n\t\t\t\n\t\tEnd Try\n\tNext\n\tLastRowCount = partslist.PartsListRows.Count\nLoop"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Filtering a part list using filtering the main assembly and View representat\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Changing Line Colors for Individual Parts in Drawing Views With VBA\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule - Get point coordinates referring to custom origin\n                    ", "solution": [], "author": "mirco.bertetto"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule - Get point coordinates referring to custom origin\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nDim doc As Document = app.ActiveDocument\nDim compDef As PartComponentDefinition = doc.ComponentDefinition\n\n\nDim wp1 As WorkPoint = compDef.WorkPoints(\"Work Point1\")\nDim ucs As UserCoordinateSystem = compDef.UserCoordinateSystems(1)\n'copy workpoint so it can be manipulated\nDim testPoint As Point = wp1.Point.Copy\n'get the transform matrix for ucs\nDim invertMatrix As Matrix = ucs.Transformation\n'invert matrix to find origin\ninvertMatrix.Invert\n'transform point by inverted matrix to get desired point\ntestPoint.TransformBy(invertMatrix)\n\n'you won't need to convert from metric to imperial but i'm leaving that in for me =P\nMessageBox.Show(\"X: \" & testPoint.X / 2.54 & \" Y: \" & testPoint.Y / 2.54 & \" Z: \" & testPoint.Z / 2.54 , \"Title\")"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Open material library with VBA\n                    ", "solution": ["Dim MatLib As ProjectAssetLibraries\nSet MatLib = ThisApplication.DesignProjectManager.ActiveDesignProject.MaterialLibraries\nDim myLib As ProjectAssetLibrary\nSet myLib = MatLib.Add(\"", "C:\\tmp\\HTBLA-Kaindorf-Materialbibliothek.adsklib", "\")\nmyLib.Activate"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic While Loop Constraints\n                    ", "solution": [], "author": "jacob.dillingha"},
{"created at": [], "solution Title": "\n                        Re: How to use ilogic or macros to copy Item from Assembly BOM to custom propert\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nDim doc As AssemblyDocument = app.ActiveDocument\nDim compDef As AssemblyComponentDefinition = doc.ComponentDefinition\nDim oRow As BOMRow\nFor Each oRow In compDef.BOM.BOMViews(2).BOMRows '2 runs on the structured BOM ... may try 1 or 3 if you don't get the desired results\n\tiProperties.Value(oRow.ComponentDefinitions(1).Document.DisplayName,\"Custom\", \"Item#\") = oRow.ItemNumber\nNext"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Issue regarding paths to Global Forms xml in inventor 2019\n                    ", "solution": [], "author": "mortenrisumhans"},
{"created at": [], "solution Title": "\n                        Re: iLogic problem\n                    ", "solution": ["If", " ", "SCHEDULE", " = ", "\"PIPE (SCH 40)\"", " ", "Then", "\n\t\t", "iProperties", ".", "Material", " = ", "\"PIPE (SCH 40)\"", "\n\t", "Else", " ", "If", " ", "SCHEDULE", " = ", "\"PIPE (SCH 80)\"", " ", "Then", "\n\t\t", "iProperties", ".", "Material", " = ", "\"PIPE (SCH 80)\"", "\n", "End", " ", "If", "\n\n", "If", " ", "iProperties", ".", "Material", " = ", "\"PIPE (SCH 40)\"", " ", "Then", "\n\t", "If", " ", "PIPE_SIZE", " = 0 - 1 / 8 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 0.405 in\n\t", "INSIDE_DIAMETER", " = 0.269 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 0 - 1 / 4 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 0.540 in\n\t", "INSIDE_DIAMETER", " = 0.364 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 0 - 3 / 8 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 0.675 in\n\t", "INSIDE_DIAMETER", " = 0.493 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 0 - 1 / 2 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 0.840 in\n\t", "INSIDE_DIAMETER", " = 0.622 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 0-3/4 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 1.050 in\n\t", "INSIDE_DIAMETER", " = 0.824 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 1 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 1.315 in\n\t", "INSIDE_DIAMETER", " = 1.049 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 1-1/4 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 1.660 in\n\t", "INSIDE_DIAMETER", " = 1.380 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 1-1/2 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 1.900 in\n\t", "INSIDE_DIAMETER", " = 1.610 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 2 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 2.375 in\n\t", "INSIDE_DIAMETER", " = 2.067 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 2-1/2 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 2.875 in\n\t", "INSIDE_DIAMETER", " = 2.469 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 3 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 3.500 in\n\t", "INSIDE_DIAMETER", " = 3.068 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 3-1/2 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 4.000 in\n\t", "INSIDE_DIAMETER", " = 3.548 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 4 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 4.500 in\n\t", "INSIDE_DIAMETER", " = 4.026 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 5 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 5.563 in\n\t", "INSIDE_DIAMETER", " = 5.047 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 6 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 6.625 in\n\t", "INSIDE_DIAMETER", " = 6.065 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 8 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 8.625 in\n\t", "INSIDE_DIAMETER", " = 7.981 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 10 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 10.75 in\n\t", "INSIDE_DIAMETER", " = 10.020 in\n\t", "End", " ", "If", "\n", "End", " ", "If", "\n", "If", " ", "iProperties", ".", "Material", " = ", "\"PIPE (SCH 80)\"", " ", "Then", "\n\t", "If", " ", "PIPE_SIZE", " = 0 - 1 / 8 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 0.405 in\n\t", "INSIDE_DIAMETER", " = 0.215 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 0 - 1 / 4 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 0.540 in\n\t", "INSIDE_DIAMETER", " = 0.302 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 0 - 3 / 8 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 0.675 in\n\t", "INSIDE_DIAMETER", " = 0.423 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 0 - 1 / 2 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 0.840 in\n\t", "INSIDE_DIAMETER", " = 0.546 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 0-3/4 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 1.050 in\n\t", "INSIDE_DIAMETER", " = 0.742 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 1 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 1.315 in\n\t", "INSIDE_DIAMETER", " = 0.957 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 1-1/4 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 1.660 in\n\t", "INSIDE_DIAMETER", " = 1.278 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 1-1/2 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 1.900 in\n\t", "INSIDE_DIAMETER", " = 1.500 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 2 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 2.375 in\n\t", "INSIDE_DIAMETER", " = 1.939 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 2-1/2 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 2.875 in\n\t", "INSIDE_DIAMETER", " = 2.323 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 3 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 3.500 in\n\t", "INSIDE_DIAMETER", " = 2.9 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 3-1/2 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 4.000 in\n\t", "INSIDE_DIAMETER", " = 3.364 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 4 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 4.500 in\n\t", "INSIDE_DIAMETER", " = 3.826 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 5 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 5.563 in\n\t", "INSIDE_DIAMETER", " = 4.813 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 6 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 6.625 in\n\t", "INSIDE_DIAMETER", " = 5.761 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 8 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 8.625 in\n\t", "INSIDE_DIAMETER", " = 7.625 in\n\t", "Else", " ", "If", " ", "PIPE_SIZE", " = 10 in ", "Then", "\n\t", "OUTSIDE_DIAMETER", " = 10.75 in\n\t", "INSIDE_DIAMETER", " = 9.562 in\n\t", "End", " ", "If", "\n", "End", " ", "If", "\n"], "author": "curtwatson1"},
{"created at": [], "solution Title": "\n                        Re: How to make an assembly's iProperties change when switching Levels of Detail\n                    ", "solution": ["oActiveLOD", " = ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", ".", "RepresentationsManager", ".", "ActiveLevelOfDetailRepresentation", ".", "Name", "\n", "If", " ", "oActiveLOD", " = ", "\"Standard\"", " ", "Then", " ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", ") = ", "\"65-1000\"", "\n", "If", " ", "oActiveLOD", " = ", "\"Wide Throat\"", " ", "Then", " ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", ") = ", "\"65-2000\""], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Sheet.name isn't updating - what am I doing wrong?\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: ilogic: How to search the project folder for a specific part\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Robot path generation from 3D CAD\n                    ", "solution": [], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: PartsList API performance issues.\n                    ", "solution": [], "author": "omartin"},
{"created at": [], "solution Title": "\n                        Re: Balloons suppression\n                    ", "solution": [], "author": "KKizildemir"},
{"created at": [], "solution Title": "\n                        Re: In an assembly, create work plane parallel to camera / viewing plane?\n                    ", "solution": ["Sub CreateWPUsingCameraInAssy()\n Dim oView As View\n Set oView = ThisApplication.ActiveView\n \n Dim oCamera As camera\n Set oCamera = oView.camera\n \n Dim oDoc As AssemblyDocument\n Set oDoc = ThisApplication.ActiveDocument\n \n Dim oYaxis As UnitVector\n Set oYaxis = oCamera.UpVector\n \n Dim oZaxis As UnitVector\n Set oZaxis = oCamera.Target.VectorTo(oCamera.Eye).AsUnitVector\n \n Dim oXaxis As UnitVector\n Set oXaxis = oYaxis.CrossProduct(oZaxis)\n \n Dim oOrigin As Point\n Set oOrigin = oDoc.ComponentDefinition.WorkPoints(1).Point\n\nDim oWP As WorkPlane\nSet oWP = oDoc.ComponentDefinition.WorkPlanes.AddFixed(oOrigin, oXaxis, oYaxis)\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Ilogic decimal place rule not working\n                    ", "solution": ["LS_1 = Format(Round(d78,3), \".000\") & \" in\"\nLS_2 = Format(Round(E1, 3) , \".000\") & \" in\"\nIf Feature.IsActive(\"Flange2_R\") = False And Feature.IsActive(\"Flange2_L\") = False Then\n\tLS_1 = Format(0.000, \".000\")\n\tMsgBox(\"1\")\n\tElseIf Feature.IsActive(\"Flange1\") = False Then\n\tLS_2 = Format(0.000, \".000\")\n\tMsgBox(\"2\")\nEnd If \n'Width x Length\nWidthXLength = Format(Round(SheetMetal.FlatExtentsLength,3),\".000\") &\" \"& \"x\" &\" \"& Format(Round(SheetMetal.FlatExtentsWidth,3),\".000\")\n'Width is being called out as length due to programs automatic output...please leave to get correct info on form\n\nInventorVb.DocumentUpdate()"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: API get quantity of holes in threadnote\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nDim doc As DrawingDocument = app.ActiveDocument\nDim sh As Sheet = doc.Sheets.Item(1)\nDim oNote = sh.DrawingNotes.HoleThreadNotes.Item(1)\noNote.FormattedHoleThreadNote = \"<QuantityNote/>\"\nMessageBox.Show(oNote.Text.Text, \"Title\")\nundoDef = app.CommandManager.ControlDefinitions.Item(\"AppUndoCmd\")\nundoDef.Execute"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iLogic to organize balloons and weld symbols on a drawing\n                    ", "solution": [], "author": "cwfosterFCFVK"},
{"created at": [], "solution Title": "\n                        Re: Turn On user parameter exposed property from within drawing.\n                    ", "solution": ["Public Sub Main()\n If Not ThisApplication.ActiveDocument.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then\n     MessageBox.Show(\"Current document is not drawing document\", \"Inventor\")\n Exit Sub\n End If\n\n oModelDoc = ThisDrawing.ModelDocument\n\n Dim userParams As UserParameters \n userParams = oModelDoc.ComponentDefinition.Parameters.UserParameters\n \n Dim param As Parameter \n \n     'set/create parameter\n Try \n   param = userParams.Item(\"Length\") \n   param.Expression = \"5 in\"\n   param.IsKey = True \n Catch  \n   'The parameter doesn't exist so add it. \n   param = userParams.AddByExpression(\"Length\", \"6\", UnitsTypeEnum.kInchLengthUnits) \n   param.IsKey = True \n End Try   \nEnd Sub", "Public Sub Main()\n If Not ThisApplication.ActiveDocument.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then\n     MessageBox.Show(\"Current document is not drawing document\", \"Inventor\")\n Exit Sub\n End If\n\n oModelDoc = ThisDrawing.ModelDocument\n\n Dim userParams As UserParameters \n userParams = oModelDoc.ComponentDefinition.Parameters.UserParameters\n \n Dim param As Parameter \n \n     'set/create parameter\n Try \n   param = userParams.Item(\"Length\") \n   param.Expression = \"5 in\"\n   param.IsKey = True \n   param.ExposedAsProperty = True\n Catch  \n   'The parameter doesn't exist so add it. \n   param = userParams.AddByExpression(\"Length\", \"6\", UnitsTypeEnum.kInchLengthUnits) \n   param.IsKey = True \n   param.ExposedAsProperty = True\n End Try   \nEnd Sub", "Sub Main()\t\t\t'Public Sub Main()\n\tIf Not ThisApplication.ActiveDocument.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then\n\tMessageBox.Show(\"Current document is not drawing document\", \"Inventor\")\n\tExit Sub\n\tEnd If\n\t\t\n\toModelDoc = ThisDrawing.ModelDocument\n\tDim userParams As UserParameters \n\tuserParams = oModelDoc.ComponentDefinition.Parameters.UserParameters\n\n\tDim nameParameter As Parameter \n\tDim oDims_Array As New ArrayList\t\n\toLength = \"Length\"\n\toWidth = \"Width\"\n\toThickness = \"Thickness\"\n\toHeight = \"Height\"\n\toOther = \"Other\"\n'\toCancel = \"Cancel\"\n\toExit = \"EXIT\"\n\t\n\toDims_Array.add(oLength)\n\toDims_Array.add(oWidth)\n\toDims_Array.add(oThickness)\n\toDims_Array.add(oHeight)\n\toDims_Array.add(oOther)\n'\toDims_Array.add(oCancel)\n\toDims_Array.add(oExit)\n\t\n\tL_oDim_Selected:\n\t\toDim_Selected = InputListBox(\"SELECT FROM ABOVE!\", oDims_Array, oDims_Array.Item(0), \"MODEL PARAMETER EDIT\", \"USER PARAMETERS\")\n\t\tIf oDim_Selected = oExit Then Goto L_Rebuild:\n\t\tIf oDim_Selected = oCancel Then Goto L_Rebuild:\t\t\n\t\tIf oDim_Selected = oOther Then oDim_Selected = InputBox(\"User parameter name: \", \"Title\", \"TYPE IN\")\n\t\n\t\n\tobj = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingDimensionFilter, \"SELECT DIMENSION TO EDIT \" & UCase(oDim_Selected))\n\tIf TypeOf obj Is GeneralDimension Then\n\t\t'reference to the selected dimension\n\t\tDim oDim As GeneralDimension = obj\n\t\t\n\t\tDim oDimensionModel As Double\n\t\toDimensionModel = oDim.ModelValue\n\t\toDimensionModel = oDimensionModel/2.54\n\t\t'refrence to the DimensionText object\n\t\tDim oDimText As DimensionText \n\t\toDimText = oDim.Text\n\t\toTxt_Dimension = oDimText.Text\n\t\t\n\t\toYN = MessageBox.Show(\"PARAMETER (BEING EDITED): \" & UCase(oDim_Selected) _\n\t\t& vbLf & \"CURRENT VALUE: \" & oTxt_Dimension _\n\t\t& vbLf & \"\" _\n\t\t& vbLf & \"DO YOU WANT TO EDIT?\", \"MODEL PARAMETER EDIT\", MessageBoxButtons.YesNo)\n\t\tIf oYN = vbYes Then \n\t\toTxt_param = InputBox(\"Edit if necessary: \", oDim_Selected, oDimensionModel)\n\t\tEnd If\n\t\tIf oYN = vbNo Then Exit Sub\n\tEnd If\n\t\n\tDim tryDimSelected As Parameter\n\t\tTry \n\t\ttryDimSelected = userParams.Item(oDim_Selected) \n\t\ttryDimSelected.Expression = oTxt_param\n\t\tCatch  \n\t\t'The parameter doesn't exist so add it. \n\t\ttryDimSelected = userParams.AddByExpression(oDim_Selected, oTxt_param, UnitsTypeEnum.kInchLengthUnits) \n\t\tEnd Try\n\toREDO = MessageBox.Show(\"REDO for \" & oDim_Selected & \"?\", \"Title\", MessageBoxButtons.YesNo)\n\tIf oREDO = vbYes Then Goto L_oDim_Selected:\n\t\n\tisKey_YN = MessageBox.Show(\"Parameter Key, Turn ON?\", \"Title\", MessageBoxButtons.YesNo)\n\tIf isKey_YN = vbYes Then tryDimSelected.IsKey = True\n\tIf isKey_YN = vbNo Then tryDimSelected.IsKey = False\n\tparameterExport_YN = MessageBox.Show(\"Parameter Export, Turn ON?\", \"Title\", MessageBoxButtons.YesNo)\n\tIf parameterExport_YN = vbYes Then tryDimSelected.ExposedAsProperty = True\n\tIf parameterExport_YN = vbNo Then tryDimSelected.ExposedAsProperty = False\t\n\n\tyesNo_selectMore = MessageBox.Show(\"SELECT MORE?\", \"Title\", MessageBoxButtons.YesNo)\n\toDims_Array.Remove(oDim_Selected)\n\tIf yesNo_selectMore = vbYes Then Goto L_oDim_Selected:\n\t\nL_Rebuild:\noModelDoc.Rebuild()\t\t'To updtate drawing model\nactivateSheets()\t\t'To update drawing\nEnd Sub\n\nSub activateSheets()\nMessageBox.Show(\"@ SUB: \" & \"activateSheets\", \"Title\")\nDim oCurrentSheet As Sheet\noCurrentSheet = ThisDoc.Document.ActiveSheet\n\t' Iterate through the sheets\n\tDim oSheet As Sheet\n\tFor Each oSheet In ThisDoc.Document.Sheets\n\t\toSheet.Activate\n\t\toSheet.Update\t\n\tNext\n'return to original sheet\t\noCurrentSheet.Activate\nEnd Sub\n\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Add Area of Flat to Bill of Material\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: iLogic PDF when save - rev question\n                    ", "solution": ["Sub", " ", "Main", " ", "()", "\n", "FileName", " ", "=", " ", "ThisDoc", ".", "FileName", "(", "True", ")", " ", "'", "with extension", "\n\n", "FileExtension", " ", "=", " ", "Right", "(", "FileName", ", ", "3", ")", "\n\n", "If", " ", "FileExtension", " ", "=", " ", "\"", "idw", "\"", " ", "Then", "\n    ", "Save_As_PDF", "\n", "Else", " ", "If", " ", "FileExtension", " ", "=", " ", "\"", "dwg", "\"", " ", "Then", "\n    ", "Save_As_PDF", "\n", "Else", "\n    ", "ErrorMessage", "\n", "End", " ", "If", "\n", "End Sub", "\n\n\n", "Sub", " ", "Save_As_PDF", "\n", "oPath", " ", "=", " ", "ThisDoc", ".", "Path", "\n", "oFileName", " ", "=", " ", "ThisDoc", ".", "FileName", "(", "False", ")", " ", "'", "without extension", "\n", "oPDFAddIn", " ", "=", " ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", " ", "(", "\"", "{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}", "\"", ")", "\n", "oDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " ", "=", " ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n\n", "'", "Gets the Workspace Path", "\n", "WorkspacePath", "=", " ", "ThisDoc", ".", "WorkspacePath", "()", "\n\n", "'", "Gets the Length of the WorkspacePath String", "\n", "WorkspacePathLength", " ", "=", " ", "Len", "(", "WorkspacePath", ")", "\n\n", "'", "Gets just the Path of the file", "\n", "PathOnly", " ", "=", " ", "ThisDoc", ".", "Path", "\n\n", "'", "Removes the Workspace Path from FullPath", "\n", "DirectoryPath", " ", "=", " ", "Strings", ".", "Right", "(", "PathOnly", ", ", "PathOnly", ".", "Length", "-", "WorkspacePathLength", ")", "\n\n", "'Find Referenced Document\nDim oRefDocFile As Document\nIf ThisDoc.ModelDocument IsNot Nothing Then\noRefDocFile = ThisDoc.ModelDocument\nElse\nMessageBox.Show(\"No Referenced Document\",\"Error\")\nReturn\nEnd If\n\n'format model file name                   \nDim FNamePos As Long\nFNamePos = InStrRev(oRefDocFile.FullFileName, \"\\\", -1)                \nDim oRefDocName As String \noRefDocName = Right(oRefDocFile.FullFileName, Len(oRefDocFile.FullFileName) - FNamePos)\n\n'Obtain referenced document revision\noRevision = iProperties.Value(oRefDocName, \"Project\", \"Revision Number\")", "\n\n", "'", "Sets the Dirctory that the PDF should be saved in", "\n", "PDFPath", " ", "=", " ", "\"", "C:\\$WorkingFolder\\Engineering Data", "\"", "\n\n", "PDFName", " ", "=", " ", "PDFPath", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "ThisDoc", ".", "FileName", "(", "False", ")", " ", "&", " ", "\"", " Rev", "\"", " ", "&", " ", "oRevision", " ", "&", " ", "\"", ".pdf", "\"", "\n\n ", "'", "Set the PDF target file name", "\n", "oDataMedium", ".", "FileName", " ", "=", " ", "PDFName", "\n\n", "oOptions", ".", "Value", "(", "\"", "Sheet_Range", "\"", ")", " ", "=", " ", "Inventor", ".", "PrintRangeEnum", ".", "kPrintAllSheets", "\n\n", "'", "Checks to see if that directory exists, if not, it is created", "\n", "If", "(", "Not", " ", "System", ".", "IO", ".", "Directory", ".", "Exists", "(", "PDFPath", "))", " ", "Then", "\n    ", "System", ".", "IO", ".", "Directory", ".", "CreateDirectory", "(", "PDFPath", ")", "\n", "End", " ", "If", "\n\n", "'", "Saves the PDF in the desired location", "\n", "oPDFAddIn", ".", "SaveCopyAs", "(", "oDocument", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n", "End Sub", "\n\n", "Sub", " ", "ErrorMessage", "\n", "i", " ", "=", " ", "MessageBox", ".", "Show", "(", "\"", "This is not a drawing file.  No PDF will be created.", "\"", ", ", "\"", "Create PDF", "\"", ", ", "MessageBoxButtons", ".", "OK", ", ", "MessageBoxIcon", ".", "Hand", ", ", "MessageBoxDefaultButton", ".", "Button1", ")", "\n", "End Sub", " "], "author": "Lewis.Young"},
{"created at": [], "solution Title": "\n                        Re: Bug with the option recovery \"All Model Dimensions\" when create a\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: BOM - Count Instances of Items\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: file save as .Step but After saving is shows .step.stepz & not open in a\n                    ", "solution": ["Public Sub ExportToSTEP()\n    ", "' Get the STEP translator Add-In.", "\n    Dim oSTEPTranslator As TranslatorAddIn\n    Set oSTEPTranslator = ThisApplication.ApplicationAddIns.ItemById(\"{90AF7F40-0C01-11D5-8E83-0010B541CD80}\")\n\n    If oSTEPTranslator Is Nothing Then\n        MsgBox \"Could not access STEP translator.\"\n        Exit Sub\n    End If\n\n    Dim oContext As TranslationContext\n    Set oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    Dim oOptions As NameValueMap\n    Set oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n    If oSTEPTranslator.HasSaveCopyAsOptions(ThisApplication.ActiveDocument, oContext, oOptions) Then\n        ", "' Set application protocol.", "\n        ", "' 2 = AP 203 - Configuration Controlled Design", "\n        ", "' 3 = AP 214 - Automotive Design", "\n        oOptions.Value(\"ApplicationProtocolType\") = 3\n\n        ", "' Other options...", "\n        ", "'oOptions.Value(\"Author\") = \"\"", "\n        ", "'oOptions.Value(\"Authorization\") = \"\"", "\n        ", "'oOptions.Value(\"Description\") = \"\"", "\n        ", "'oOptions.Value(\"Organization\") = \"\"", "\n\n        oContext.Type = kFileBrowseIOMechanism\n\n        Dim oData As DataMedium\n        Set oData = ThisApplication.TransientObjects.CreateDataMedium\n        oData.FileName = \"C:\\temptest.stp\"\n\n        Call oSTEPTranslator.SaveCopyAs(ThisApplication.ActiveDocument, oContext, oOptions, oData)\n    End If\nEnd Sub"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: \u6211\u5e0c\u671b\u901a\u8fc7\u504f\u79fb\u9762\u7684\u65b9\u5f0f\u6765\u6c42\u89e3\u6a21\u578b\u7684\u6700\u5927\u5c3a\u5bf8\n                    ", "solution": [], "author": "Cody.Redding"},
{"created at": [], "solution Title": "\n                        Re: Adding Model Annotations (ModelLeaderNotes) works in Part, but fails in Asse\n                    ", "solution": ["Private Sub TEST()\nDim Doc As Document\nDim oDef As AssemblyComponentDefinition\nDim oTG As TransientGeometry\nDim dViewRepMgr As RepresentationsManager\nDim dWeldView As DesignViewRepresentations\n\nSet InvApp = ThisApplication 'Marshal.GetActiveObject(\"Inventor.Application\")\nSet Doc = InvApp.ActiveDocument\nSet oDef = Doc.ComponentDefinition\n\nSet oTG = InvApp.TransientGeometry\n\nSet dViewRepMgr = oDef.RepresentationsManager\nSet dWeldView = dViewRepMgr.DesignViewRepresentations\n\nDim oFace As Face\nSet oFace = InvApp.CommandManager.Pick(SelectionFilterEnum.kPartFaceFilter, \"Select a face to attach leader\")\n\nDim oAnnoPlaneDef As AnnotationPlaneDefinition\nSet oAnnoPlaneDef = oDef.ModelAnnotations.CreateAnnotationPlaneDefinitionUsingPlane(oFace.Geometry) 'this line was crashing Inventor\n\n'Set oAnnoPlaneDef = oDef.ModelAnnotations.Item(1).Definition.AnnotationPlaneDefinition 'used the planeDef from an existing annotation for test\n\nDim oLeaderPoints As ObjectCollection\nSet oLeaderPoints = InvApp.TransientObjects.CreateObjectCollection\n\nCall oLeaderPoints.Add(oTG.CreatePoint(5, 10, 0))\n\nDim oLeaderIntent As GeometryIntent\nSet oLeaderIntent = oDef.CreateGeometryIntent(oFace)\n\nCall oLeaderPoints.Add(oLeaderIntent)\n\nDim oLeaderDef As ModelLeaderNoteDefinition\nSet oLeaderDef = oDef.ModelAnnotations.ModelLeaderNotes.CreateDefinition(oLeaderPoints, \"Finally it works\", oAnnoPlaneDef)\n\nDim oLeader As ModelLeaderNote\nSet oLeader = oDef.ModelAnnotations.ModelLeaderNotes.Add(oLeaderDef)\n\nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: SolidBody visibility\n                    ", "solution": ["'", "catch and skip errors", "\n", "On", " ", "Error", " ", "Resume", " ", "Next", "\n", "'", "define the active assembly", "\n", "Dim", " ", "oAssyDoc", " ", "As", " ", "AssemblyDocument", "\n", "oAssyDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oDoc", " ", "As", " ", "Inventor", ".", "Document", "\n", "'", "define Sb as solidbodies", "\n", "Dim", " ", "SB", " ", "As", " ", "SurfaceBody", "\n", "'", "define ShellB as a surfacebodies", "\n", "Dim", " ", "ShellB", " ", "As", " ", "WorkSurface", "\n", "'", "define Vis and Vis2 as boolean type", "\n", "Dim", " ", "Vis", " ", "As", " ", "Boolean", "\n", "Dim", " ", "Vis2", " ", "As", " ", "Boolean", "\n", "'", "define parts name", "\n", "Dim", " ", "gniazdo1", " ", "As", " ", "String", "\n", "gniazdo1", " ", "=", " ", "\"", "gniazdo1.ipt", "\"", "\n", "Dim", " ", "gniazdo1_MIR", " ", "As", " ", "String", "\n", "gniazdo1_MIR", " ", "=", " ", "\"", "gniazdo1_MIR.ipt", "\"", "\n", "Dim", " ", "gniazdo", " ", "As", " ", "String", "\n", "gniazdo", " ", "=", " ", "\"", "gniazdo.ipt", "\"", "\n", "Dim", " ", "gniazdo_MIR", " ", "As", " ", "String", "\n", "gniazdo_MIR", " ", "=", " ", "\"", "gniazdo_MIR.ipt", "\"", "\n\n", "'", "choose solid or surface bodies", "\n", "If", " ", "solidOrShell", " ", "=", " ", "\"", "Solid", "\"", " ", "Then", "\n    ", "Vis", " ", "=", " ", "True", "\n    ", "Vis2", " ", "=", " ", "False", "\n", "Else", " ", "If", " ", "solidOrShell", " ", "=", " ", "\"", "Shell", "\"", " ", "Then", "\n    ", "Vis", " ", "=", " ", "False", "\n    ", "Vis2", " ", "=", " ", "True", "\n\n", "End", " ", "If", "\n\n\n", "For", " ", "Each", " ", "oDoc", " ", "In", " ", "oAssyDoc", ".", "AllReferencedDocuments", "\n", "'", "   define name of part", "\n    ", "Dim", " ", "FNamePos", " ", "As", " ", "Long", "\n    ", "FNamePos", " ", "=", " ", "InStrRev", "(", "oDoc", ".", "FullFileName", ", ", "\"", "\\", "\"", ", ", "-", "1", ")", "\n    ", "Dim", " ", "docFName", " ", "As", " ", "String", " \n    ", "docFName", " ", "=", " ", "oDoc", ".", "FullFileName", "\n    ", "docFName", " ", "=", " ", "Right", "(", "oDoc", ".", "FullFileName", ", ", "Len", "(", "oDoc", ".", "FullFileName", ")", " ", "-", " ", "FNamePos", ")", "\n\n", "'", "   verify condition", "\n     ", "If", " ", "gniazdo", " ", "=", " ", "docFName", " ", "Or", " ", "gniazdo_MIR", " ", "=", " ", "docFName", " ", "Or", " ", "gniazdo1", " ", "=", " ", "docFName", " ", "Or", " ", "gniazdo1_MIR", " ", "=", " ", "docFName", " ", "Then", "\n           ", "For", " ", "Each", " ", "SB", " ", "In", " ", "oDoc", ".", "ComponentDefinition", ".", "SurfaceBodies", "\n            ", "SB", ".", "Visible", " ", "=", " ", "True", "\n        ", "Next", "\n    ", "Else", "\n        ", "For", " ", "Each", " ", "SB", " ", "In", " ", "oDoc", ".", "ComponentDefinition", ".", "SurfaceBodies", "\n            ", "SB", ".", "Visible", " ", "=", " ", "Vis", "\n        ", "Next", "\n        ", "For", " ", "Each", " ", "ShellB", " ", "In", " ", "oDoc", ".", "ComponentDefinition", ".", "WorkSurfaces", "\n            ", "ShellB", ".", "Visible", " ", "=", " ", "Vis2", "\n        ", "Next", "\n    ", "End", " ", "If", "    \n", "Next", "\n", "ThisApplication", ".", "ActiveDocument", ".", "Update"], "author": "konrad.styrylsk"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Is not equal to\n                    ", "solution": ["Attach", " ", "=", " ", "GoExcel", ".", "CellValue", "(", "\"", "3rd Party:Embedding 1", "\"", ", ", "\"", "Sheet1", "\"", ", ", "\"", "D3", "\"", ")", "\n", "If", " ", "Not", " ", "Attach", " ", "=", " ", "(", "\"", "NONE", "\"", ")", " \n    ", "Constraint", ".", "IsActive", "(", "\"", "Mate:Attach", "\"", ")", " ", "=", " ", "True", "\n", "End", " ", "If"], "author": "Lewis.Young"},
{"created at": [], "solution Title": "\n                        Re: Inventor Set Surface Color As Parameter To Be Changed From Excel\n                    ", "solution": [], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: TURN OFF VISIBILITY OFF ALL PARTS IN AN AREA\n                    ", "solution": ["Sub VisByLoc()\nDim app As Application\nDim Doc As AssemblyDocument\nDim CompDef As ComponentDefinition\nDim tg As TransientGeometry\n\nSet app = ThisApplication\nSet Doc = app.ActiveDocument\nSet CompDef = Doc.ComponentDefinition\nSet tg = app.TransientGeometry\nDim CenterPoint As Point\nDim TargetAreaMax As Point\nDim TargetAreaMin As Point\nSet TargetAreaMax = tg.CreatePoint(100, 150, 100) 'find way to set this yourself\nSet TargetAreaMin = tg.CreatePoint(-100, -100, -100) 'find way to set this yourself\n\n\nFor Each occ In CompDef.Occurrences\n    Set CenterPoint = FindCenterPoint(occ.RangeBox.MaxPoint, occ.RangeBox.MinPoint)\n    If OutsideArea(CenterPoint, TargetAreaMax, TargetAreaMin) = True Then\n        Debug.Print (occ.Name & \" = Show\")\n        occ.Visible = True\n        'occ.Excluded = False 'play with this too it may work nice with your BOM and your drawing\n    Else\n        Debug.Print (occ.Name & \" = Hide\")\n        occ.Visible = False\n        'occ.Excluded = True 'play with this too\n    End If\n    'Debug.Print (occ.Name & \" - Length: \" & occ.Transformation.Translation.Length & \" - X: \" & occ.Transformation.Translation.x & \" - Y: \" & occ.Transformation.Translation.y & \" - Z: \" & occ.Transformation.Translation.Z)\nNext\n\n\nEnd Sub\nFunction OutsideArea(CenterPoint As Point, MaxPoint As Point, MinPoint As Point) As Boolean\n    Dim OutsideX As Boolean\n    Dim OutsideY As Boolean\n    Dim OutsideZ As Boolean\n    If CenterPoint.x > MaxPoint.x Or CenterPoint.x < MinPoint.x Then\n        OutsideX = True\n    End If\n    If CenterPoint.y > MaxPoint.y Or CenterPoint.y < MinPoint.y Then\n        OutsideY = True\n    End If\n    If CenterPoint.Z > MaxPoint.Z Or CenterPoint.Z < MinPoint.Z Then\n        OutsideZ = True\n    End If\n    If OutsideX + OutsideY + OutsideZ = 0 Then OutsideArea = True Else OutsideArea = False\nEnd Function\nFunction FindCenterPoint(MaxPoint As Point, MinPoint As Point) As Point\n    Dim CenterX As Double\n    Dim CenterY As Double\n    Dim CenterZ As Double\n    CenterX = ((MaxPoint.x - MinPoint.x) / 2) + MinPoint.x\n    CenterY = ((MaxPoint.y - MinPoint.y) / 2) + MinPoint.y\n    CenterZ = ((MaxPoint.Z - MinPoint.Z) / 2) + MinPoint.Z\n    Set tg = ThisApplication.TransientGeometry\n    Set FindCenterPoint = tg.CreatePoint(CenterX, CenterY, CenterZ)\nEnd Function"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Attach leader to Note/Chamfer using API\n                    ", "solution": ["        Dim oSketchedSymbol As SketchedSymbol\n        Dim oGI As GeometryIntent\n        Dim oCol As ObjectCollection\n        oCol = _invApp.TransientObjects.CreateObjectCollection\n        oSketchedSymbol = oSheet.SketchedSymbols.Add(oSketchedSymbolDef, oPoint, 0, 1, sPromptStrings)\n        If Not Note Is Nothing Then\n            Call oCol.Add(oPoint)\n            oGI = oSheet.CreateGeometryIntent(Note, _invApp.TransientGeometry.CreatePoint2d(Note.Position.X, Note.Position.Y))\n            Call oCol.Add(oGI)\n        Else\n            oGI = oSheet.CreateGeometryIntent(oDim, oPoint)\n            oCol.Add(oGI)\n            oCol.Add(oPoint)\n        End If\n        Call oSketchedSymbol.Leader.AddLeader(oCol)\n        oSketchedSymbol.LeaderVisible = False"], "author": "TA.Fehr"},
{"created at": [], "solution Title": "\n                        Re: What math functions can be used in the fx input box?\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: FileDialog: To Specify Save Location different from default\n                    ", "solution": ["Sub Main()\noExit = MessageBox.Show(\"EXIT?\", \"Title\", MessageBoxButtons.YesNo)\nIf oExit = vbYes Then Exit Sub\n\nsaveFolderStp = \"C:\\Roy XX\\1551\\STP\\\"\nsaveFolderIges = \"C:\\Roy XX\\1551\\IGES\\\"\n\noModelDoc = IO.Path.GetFileName(ThisDrawing.ModelDocument.FullFileName)\nDim FFN_wExt As String \nFFN_wExt = ThisDrawing.ModelDocument.FullFileName\n\n'specify word splitting characters \"space\" and \"dash\"\nDim Separators() As Char = {\"\\\"c, \".\"c}\nSentence = FFN_wExt\nWords = Sentence.Split(Separators)\nDim oWords As New ArrayList\ni = 0\nFor Each wrd In Words\noWords.Add(wrd)\ni += 1\nNext\noCount = oWords.Count\n\nLFN_woExt = oWords(oCount-2)\nLFN_revNumber = iProperties.Value(\"Project\", \"Revision Number\")\nrevNumber_Edit = InputBox(\"REV. NUMBER (EDIT)\", \"EDIT\", LFN_revNumber)\nLFN_revNumber = revNumber_Edit\nLFN_wRev = LFN_woExt & \"-\" & LFN_revNumber\n\nDim optionsSave As New ArrayList\noStp = \".stp\"\noIges = \".iges\"\noExit = \"EXIT\"\noptionsSave.Add(oStp)\noptionsSave.Add(oIges)\noptionsSave.Add(oExit)\nselectionSave = InputListBox(\"Prompt\", optionsSave, optionsSave(0), Title := \"FILE EXPORT\", ListName := \"List\")\nIf selectionSave = oExit Then Exit Sub\nIf selectionSave = oSTP Then strFolder = saveFolderStp\nIf selectionSave = oIgs Then strFolder = saveFolderIges\n\nsaveCopyAs(FFN_wExt, strFolder, LFN_wRev, selectionSave)\nEnd Sub\n\n\nSub saveCopyAs(FFN_wExt, strFolder, strFile, selectionSave)\n'oFile =  ThisApplication.Documents.Open(FFN_wExt, True) 'False/True: open the file is invisibe/visible\n'MessageBox.Show(\"strFolder: \" & strFolder, \"Title\")\n'MessageBox.Show(\"strFile: \" & strFile, \"Title\")\n\n    oDoc = ThisDoc.Document\n    xx = selectionSave\n\tDim oFileDlg As inventor.FileDialog = Nothing\n\tCall ThisApplication.CreateFileDialog(oFileDlg)\n\toFileDlg.InitialDirectory = strFolder    'ThisDoc.WorkspacePath()\n    If xx = \".stp\" Then\n    oFileDlg.Filter = \"STEP Files (*.stp; *.ste; *.step)|*.stp\"\n'    Else If xx = \".ipt\" Then'    oFileDlg.Filter = \"Autodesk Inventor Part Files (*.ipt)|*.ipt\"'    Else If xx = \".iam\" Then'    oFileDlg.Filter = \"Autodesk Inventor Assembly Files (*.iam)|*.iam\"'    Else If xx = \".idw\" Then'    oFileDlg.Filter = \"Autodesk Inventor Drawing Files (*.idw)|*.idw\"\n    Else If xx = \".iges\" Then\n    oFileDlg.Filter = \"IGES Files (*.igs; *.ige; *.iges)|*.iges\"\n    End If\n\t\n    oFileDlg.DialogTitle = \"Save Native\"\n'    Call oFileDlg.ShowOpen\n\t\n    oFileDlg.FileName = strFolder & strFile\t\t'\"C:\\Temp\\DefaultFileName\"\t'strFile        'iProperties.Value(\"Project\", \"Part Number\")\n    oFileDlg.CancelError = True\n    On Error Resume Next\n    oFileDlg.ShowSave()\n    If Err.Number <> 0 Then\n    MessageBox.Show(\"No File Saved.\", \"iLogic: Dialog Canceled\")\n    ElseIf oFileDlg.FileName <> \"\" Then\n    MyFile = strFolder.FileName        'oFileDlg.FileName\n    oDoc.SaveAs(MyFile, True) 'True = Save As Copy & False = Save As\n    End If\n'oFile.Close \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: CommandManager.ControlDefinition.Item(\"EditHoleCtxCmd\") Gone from\n                    ", "solution": ["Sub Main()", "    Call CommandManager.ControlDefinition.Item(\"PartNGxHoleEditCtxCmd\").Execute", "End Sub", "Public Sub test_PartNGxHoleEditCtxCmd()\n\nDim pDoc As PartDocument\nSet pDoc = ThisApplication.ActiveDocument\n\nDim hFeat As HoleFeature\nSet hFeat = pDoc.ComponentDefinition.Features.HoleFeatures.Item(1)\n\npDoc.SelectSet.Select hFeat\n\nDim oCntrlDefs As ControlDefinitions\nSet oCntrlDefs = ThisApplication.CommandManager.ControlDefinitions\n\nDim oControlDef As ControlDefinition\nSet oControlDef = oCntrlDefs.Item(\"PartNGxHoleEditCtxCmd\")\n\nCall oControlDef.Execute\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How to get all prompt text in Prompts Tab\n                    ", "solution": ["A grounded component is selected to move. Would you like to continue?\" Response=\"6\" ThisOperation=\"0\"/>\nAdding this dimension will over-constrain the sketch. &#xD;&#xA;&#xD;&#xA;To solve conflicts, highlighted constraints will be removed, &#xD;&#xA;and highlighted dimensions will be changed to Driven dimension. &#xD;&#xA;&#xD;&#xA;Would you like to continue?\" Response=\"6\" ThisOperation=\"0\"/>\nAn existing part file with the same name but belonging to another family has been found in the Content Center files location. This happens when more than one family uses the same file name(s) for family members. You need to change the file name setting for the current family. &#xD;&#xA;&#xA;The existing part file will be used to complete the Content Center command.\" Response=\"2\" ThisOperation=\"0\"/>\nAn existing part file with the same name but belonging to another family has been found in the Content Center files location. This happens when the file name setting was changed so now a family member uses a file name previously assigned to another member.&#xD;&#xA;&#xA;You need to change the file name setting for the current family. The existing part file will be used to complete the Content Center command.\" Response=\"1\" ThisOperation=\"0\"/>\nAny features dependent on this derived feature may be deleted.  Do you wish to continue?\" Response=\"1\" ThisOperation=\"0\"/>\nChanges have been made to some assembly components since this assembly was last saved\" Response=\"6\" ThisOperation=\"0\"/>\nChanges have been made to some assembly components since this assembly was last saved which may affect component size and position.&#xD;&#xA;&#xD;&#xA;Would you like to update the assembly now?\" Response=\"7\" ThisOperation=\"0\"/>\nDelete component dependent sketches?\" Response=\"6\" ThisOperation=\"0\"/>\nDo you want to calculate the Mass Properties for the Master Level of Detail?  If you select 'No' Inventor will calculate the Mass Properties for the currently active Level of Detail.  Unresolved components will not be included in the calculation.\" Response=\"6\" ThisOperation=\"0\"/>\nDo you want to save the file on close?\" Response=\"7\" ThisOperation=\"1\"/>\nExisting dimensions placed on the geometry may restrict the intended operation. Should these dimensions be relaxed if necessary?\" Response=\"6\" ThisOperation=\"0\"/>\nMarking a Part as a Substitute disables all links to external references. These links can be manually updated but Inventor will not update them automatically. When the Part is no longer marked as a Substitute, all links will be returned to their original state. Continue?\" Response=\"6\" ThisOperation=\"0\"/>\nOne or more drawing views are being computed and are currently in raster state. The document(s) may be closed and pending updates will resume when the document is reopened.&#xD;&#xA;&#xD;&#xA;Do you wish to continue closing?\" Response=\"7\" ThisOperation=\"1\"/>\nReplace via Resolution\" Response=\"6\" ThisOperation=\"1\"/>\nSave Reminder\" Response=\"1\" ThisOperation=\"0\"/>\nSave changes to the rule?\" Response=\"6\" ThisOperation=\"0\"/>\nSave session edits to component prior to delete?\" Response=\"6\" ThisOperation=\"0\"/>\nSketch constraint already exists.\" Response=\"2\" ThisOperation=\"0\"/>\nSome of the styles selected for update were edited locally in the document. Updating them will discard the edits and replace the style with the definition from the style library. Do you wish to continue?\" Response=\"6\" ThisOperation=\"1\"/>\nStyle Conflict\" Response=\"1\" ThisOperation=\"0\"/>\nThe column or parameter type does not match the category parameter type. Content Center Search will view the values assigned to this column or parameter as data of the category parameter type. If the values are not relevant to the category parameter type, Search may not correcly locate the member.\" Response=\"1\" ThisOperation=\"0\"/>\nThe current Level of Detail representation has unsaved changes, which could be lost due to the activation. Continue anyway?\" Response=\"6\" ThisOperation=\"0\"/>\nThe current operation requires data from document, but it cannot be found.  The document may have been moved, renamed, or deleted.  The operation must either be aborted or the file located.\" Response=\"2\" ThisOperation=\"0\"/>\nThe file can be saved from another window. Save it now?\" Response=\"6\" ThisOperation=\"0\"/>\nThe geometry being edited is constrainted to other geometry. Would you like those constraints removed?\" Response=\"6\" ThisOperation=\"0\"/>\nThe location of the selected file is not in the search path of the active project file.&#xD;&#xA;&#xD;&#xA;To avoid this message, create or activate a project file that contains this folder in the search path before opening.  You can also move the file to a folder contained in the current project search path.&#xD;&#xA;&#xD;&#xA;Would you like to continue opening the file from the current location?\" Response=\"6\" ThisOperation=\"0\"/>\nThe projects could not be found on disk. You may experience performance issues when searching them. Click OK, inventor will not search these projects next time.\" Response=\"1\" ThisOperation=\"0\"/>\nThe restructure operation may result in lost features due to missing references. Do you want to proceed?\" Response=\"6\" ThisOperation=\"0\"/>\nThe selected component geometry has been used. No associativity will be maintained.\" Response=\"1\" ThisOperation=\"0\"/>\nThe selected location is not in the active project.  Do you wish to continue the save?\" Response=\"6\" ThisOperation=\"0\"/>\nThe substitute part needs to be updated in order to edit the derived component. Would you like to update now?\" Response=\"6\" ThisOperation=\"0\"/>\nThis Part is currently marked as a Substitute. All links to external references are automatically disabled to avoid cyclical dependencies.\" Response=\"1\" ThisOperation=\"0\"/>\nThis assembly requires an update which when performed may result in either an inability to compute the assembly feature or unexpected compute results.\" Response=\"1\" ThisOperation=\"0\"/>\nThis operation changes the view style to hidden lines and dependent view styles will become independent.&#xD;&#xA;&#xD;&#xA;&#x9;Do you want to continue?\" Response=\"6\" ThisOperation=\"0\"/>\nYou cannot close this window or save the file while in this environment.  Would you like to exit the environment and continue?\" Response=\"1\" ThisOperation=\"0\"/>"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Create DXF by Selecting Face while Rule Running\n                    ", "solution": ["Imports System.Windows.Forms\nCall ThisApplication.ActiveDocument.SelectSet.clear()\nDim oFace As Face\nfoderDxfSave = \"C:\\$WF_DHAMAG\\Projects\\DHAMAG_SDAI\\EWE\\\"\nClipboard.SetText(foderDxfSave)\n\nDim formatExport As New ArrayList\noDxf = \".dxf\"\noPdf = \".pdf\"\noSat = \".sat\"\noExit = \"EXIT\"\nformatExport.add(oDxf)\nformatExport.add(oPdf)\nformatExport.add(oSat)\nformatExport.add(oExit)\noExt = InputListBox(\"SELECT\", formatExport, formatExport(0), Title := \"Title\", ListName := \"List\")\nIf oExt = oExit Then Exit Sub\nIf oExt = oDxf Then \n\t\n\ti = 0\n\tWhile i = 0 \n\t'Keep Selecting Faces, Hit Esc to finish\n\tL_oFace:\n\toFace = ThisApplication.CommandManager.Pick(Inventor.SelectionFilterEnum.kPartFaceFilter, \"Select face\")\n'\toFace = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPlanarEntities, \"Pick a plane\")\n\t\tIf IsNothing (oFace) Then Goto L_oFace \n\t\ti += 1\n\tEnd While\nEnd If\nCall ThisApplication.ActiveDocument.SelectSet.select(oface)\nDim oCmdMgr As CommandManager\noCmdMgr = ThisApplication.CommandManager\n\n\nlfnSoueceDocWithoutExt = ThisDoc.FileName(False) 'without extension\nffnSourceDocWithExt = ThisDoc.PathAndFileName(False)\n\nlfnSaveAsWithExt = lfnSoueceDocWithoutExt & oExt\nffnSaveAsWithExt = foderDxfSave & lfnSaveAsWithExt\nCall oCmdMgr.ClearPrivateEvents()\nCall oCmdMgr.PostPrivateEvent(PrivateEventTypeEnum.kFileNameEvent, ffnSaveAsWithExt)\nCall oCmdMgr.ControlDefinitions.Item(\"GeomToDXFCommand\").Execute\nCall ThisApplication.ActiveDocument.SelectSet.clear()"], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Edit iProperties with iLogic\n                    ", "solution": ["Sub Main()\n\nDim oFolder As String\noFolder = ThisDoc.Path\n\nDim oFiles() As String\noFiles = System.IO.Directory.GetFiles(oFolder)\n\nDim docFName As String\nDim docFName_wo_ext As String\nDim FNamePos As Long\nDim doc As Document\nDim partNum As Inventor.Property\n\nFor Each oFile In oFiles\n\tFNamePos = InStrRev(oFile, \"\\\", -1)\n\tdocFName = Right(oFile, Len(oFile) - FNamePos)\n\tdocFName_wo_ext = Left(docFName, Len(docFName) - 4)\n\t\tTry\n             doc = ThisApplication.Documents.Open(oFile, False)\n        Catch\n             Goto NextFor\n        End Try\n\t\t\n\t\tpartNum = doc.PropertySets(\"Design Tracking Properties\").Item(\"Part Number\")\n\t\t\n\t\tTry \n\t\t\tpartNum.Expression = docFName_wo_ext\n\t\tCatch\n\t\t\tMessageBox.Show(\"Can't edit iproperties of \" + docFName)\n\t\tEnd Try\n\t\t\n        If Not oFile = ThisDoc.PathAndFileName(True) Then\n\t\t\tdoc.Close\n\t\tEnd If\nNextFor:\nNext\n\n\nInventorVb.DocumentUpdate()\nMessageBox.Show(\"Finish!\")\n\nEnd Sub"], "author": "tdant"},
{"created at": [], "solution Title": "\n                        Re: iLogic Error Produced by Return Statement in VB Function...\n                    ", "solution": [], "author": "bstewart"},
{"created at": [], "solution Title": "\n                        Re: How to disable mouse interaction during VBA macro running\uff1f\n                    ", "solution": ["ThisApplication.UserInterfaceManager.UserInteractionDisabled = True"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Component Measure\n                    ", "solution": [], "author": "atomicZ"},
{"created at": [], "solution Title": "\n                        Re: Open iLogic Browser using iLogic\n                    ", "solution": ["For", " ", "Each", " ", "oDockableWindow", " ", "As", " ", "DockableWindow", " ", "In", " ", "ThisApplication", ".", "UserInterfaceManager", ".", "DockableWindows", "\n\t", "MessageBox", ".", "Show", "(", "oDockableWindow", ".", "Title", ")\n", "Next", "'iLogic Browser \"dockable window\" information:", "oInternalName = \"ilogic.treeeditor\"\noClientID = \"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\"\noTitle = \"iLogic\"\n\nFor Each oDockableWindow As Inventor.DockableWindow In ThisApplication.UserInterfaceManager.DockableWindows\n\tIf oDockableWindow.InternalName = oInternalName Then\n\t\tIf Not oDockableWindow.Visible = True Then\n\t\t\toDockableWindow.Visible = True\n\t\tEnd If\n\tEnd If\nNext"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: ilogic code to save a pdf copy of a dwg - but with revision extension\n                    ", "solution": ["oSheet = oDocument.ActiveSheet"], "author": "tdant"},
{"created at": [], "solution Title": "\n                        Re: Shortcut for Save All and Close All\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nsaveCmd = app.CommandManager.ControlDefinitions(\"AppSaveAllCmd\")\ncloseCmd = app.CommandManager.ControlDefinitions(\"AppCloseAllCmd\")\nsaveCmd.Execute\ncloseCmd.Execute"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iLogic to change Mate offset\n                    ", "solution": [], "author": "blandb"},
{"created at": [], "solution Title": "\n                        Re: What is the Floor math function code in VBA\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Get Ilogic code to wait before running the rest of the code?\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nDim doc As DrawingDocument = app.ActiveDocument\nDim newDoc As DrawingDocument\nDim model As PartDocument = doc.ReferencedDocuments.Item(1)\nDim factory As PartDocument = model.ReferencedDocuments.Item(1)\nDim member As iPartTableRow\nDim transMgr As TransactionManager = app.TransactionManager\nFor Each member In factory.ComponentDefinition.iPartFactory.TableRows\n\tDim trans As Transaction = transMgr.StartTransaction(ThisDoc.Document, \"UpdateTemplate\")\n\tNewFileName = member.Item(1).Value\n\tActiveSheet.View(\"VIEW1\").View.ActiveMemberName = NewFileName\n\t'other code to fix balloons and what not.\n\tdoc.SaveAs(ThisDoc.Path & \"\\\" & NewFileName & \".idw\", True)\n\ttrans.End\n\tapp.CommandManager.ControlDefinitions(\"appUndoCmd\").Execute\nNext\n\n"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Word file into PDF\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: 2018 BOLTED CONNECTION COMPONENT GENERATOR - TEMPLATE LIBRARY LOCATION???\n                    ", "solution": ["<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<FDesign RecentlyUsed=\"C7F4D760-C82F-4ECC-8DCD-21859BD1B86D\"><", "Node", "C7F4D760-C82F-4ECC-8DCD-21859BD1B86D/><", "Node", "CF06171C-BC49-417C-BD7D-6F7E7632E607/><", "Node", "7CEF0F17-3BFB-4FB3-B563-677F5F4A57CB/></FDesign>"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Capturing keystroke to cancel during commandmanager.pick operation\n                    ", "solution": ["Public", " ", "Class", " ", "CancelButton", "\n\t", "Dim", " ", "Cancel", " ", "As", " ", "Boolean", " = ", "False", "\n\t", "Sub", " ", "Main", "\n\t\t", "SharedVariable", "(", "\"Cancel\"", ") = ", "True", "\n\t", "End", " ", "Sub", "\n", "End", " ", "Class", "iLogicVb", ".", "RunExternalRule", "(", "\"Cancel\"", ")\n", "If", " ", "SharedVariable", "(", "\"Cancel\"", ") = ", "True", " ", "Then", " ", "SharedVariable", "(", "\"Cancel\"", ") = ", "False", "iLogicForm", ".", "ShowGlobal", "(", "\"Cancel\"", ", ", "FormMode", ".", "NonModal", ")"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Problem Placing an iLogic Component without using the \"Place iLogic Com\n                    ", "solution": ["OldFileName = ThisDoc.FileName(True) 'with extension\nStockNumber = iProperties.Value(\"Project\", \"Stock Number\") 'Get \"Stock Number\" from iProperties\nPartName = iProperties.Value(\"Summary\", \"Title\") 'Get \"Title\" from iProperties\nFilePath = ThisDoc.Path & \"\\\" 'Get the path of document\nFileFullname = FilePath & OldFileName\nIf StockNumber = \"\" And PartName = \"\" Then 'Check \"PartNumber\" and \"Title\" for content\n    Return\nElse\n    NewFileName = StockNumber & \"_\" & \".ipt\" 'Generate new file name\n\n    If NewFileName <> OldFileName Then 'Check file name for changes\n\t\t\n\t\t'Must be false or else part is not placed into assembly\n        ThisDoc.Document.SaveAs(FilePath & NewFileName, False)  \n\t\tFileFullname = FilePath & NewFileName\n    End If \nEnd If\n\nDim oDoc As Document\noDoc = ThisApplication.ActiveDocument \n\nIf oDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n\t\n\tDim oDef As AssemblyComponentDefinition\n\toDef = oDoc.ComponentDefinition\n\t\n\tDim occ As ComponentOccurrence\n\tocc = oDef.Occurrences.Item(oDef.Occurrences.Count) \n\t\n\tocc.Replace(FileFullname, False)\n\t\nEnd If\n\n'Code found on Autdesk forums and modified to meet needs\n'https://forums.autodesk.com/t5/inventor-customization/thisdoc-document-saveas-not-working-as-expected/td-p/7446131\n'Aug 20, 2018 (RS)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: In what circumstances will a BomRow have multiple ComponentDefinitions?\n                    ", "solution": [], "author": "oransen"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to suppress all document rules\n                    ", "solution": ["Sub", " ", "Main", "()\n    ", "Dim", " ", "iLogic", " ", "As", " ", "Object", "\n    ", "iLogic", " = ", "GetiLogicAddin", "(", "ThisApplication", ")\n    ", "If", " (", "iLogic", " ", "Is", " ", "Nothing", ") ", "Then", " ", "Exit", " ", "Sub", "\n    ", "Dim", " ", "doc", " ", "As", " ", "Document", "\n    ", "doc", " = ", "ThisApplication", ".", "ActiveDocument", "\n    ", "iLogicAutomation", " = ", "iLogic", ".", "Automation", "\n\t", "Dim", " ", "ruleCol", " ", "As", " ", "System", ".", "Collections", ".", "IEnumerable", " = ", "iLogicAutomation", ".", "Rules", "(", "doc", ")\n\t", "For", " ", "Each", " ", "iLogRule", " ", "As", " ", "iLogicRule", " ", "In", " ", "ruleCol", "\n\t", "'MessageBox.Show(iLogRule.Name, \"Title\")", "\n\t", "iLogRule", ".", "IsActive", " = ", "False", "\n\t", "Next", "\n", "End", " ", "Sub", "\n\n", "Function", " ", "GetiLogicAddin", "(", "oApplication", " ", "As", " ", "Inventor", ".", "Application", ") ", "As", " ", "Object", "\n    ", "addIns", " = ", "oApplication", ".", "ApplicationAddIns", "\n    ", "Dim", " ", "addIn", " ", "As", " ", "ApplicationAddIn", "\n    ", "addIn", " = ", "oApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\"", ")\n    ", "If", " (", "addIn", " ", "Is", " ", "Nothing", ") ", "Then", " ", "Exit", " ", "Function", "\n    ", "addIn", ".", "Activate", "\n    ", "Return", " ", "addIn", "\n    ", "Exit", " ", "Function", "\n    ", "NotFound", ":\n", "End", " ", "Function"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: Turn iLogic Rule into External Class\n                    ", "solution": [], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Create Ilogic Help\n                    ", "solution": ["For", " ", "Each", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", " ", "In", " ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", ".", "Occurrences", "\n\t", "If", " ", "oOcc", ".", "Name", " = ", "\"ComponentName\"", " ", "Then", "\n\t\t", "iProperties", ".", "Value", "(", "oOcc", ".", "Name", ", ", "\"Custom\"", ", ", "\"Vqty\"", ") = ", "InputBox", "(", "\"ENTER QUANTITY FOR CABLE CLIPS GALVANIZED\"", ", ", "\"Vqty\"", ", )\n\t", "End", " ", "If", "\n", "Next"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: BOM row static quantity programatically...?\n                    ", "solution": ["Public Sub BOMSTATIC()\n\nDim a As Application\nSet a = ThisApplication\n\nDim b As AssemblyDocument\nSet b = a.ActiveDocument\n\nDim c As BOM\nSet c = b.ComponentDefinition.BOM\n\nDim OriginalSet As Boolean\nOriginalSet = c.BOMViews.Item(1).BOMRows.Item(1).TotalQuantityOverridden\n\nMsgBox OriginalSet\n", "c.BOMViews.Item(1).BOMRows.Item(1).TotalQuantity = c.BOMViews.Item(1).BOMRows.Item(1).TotalQuantity", "\nc.BOMViews.Item(1).BOMRows.Item(1).TotalQuantityOverridden = True\nDim NewSetTrue As Boolean\nNewSetTrue = c.BOMViews.Item(1).BOMRows.Item(1).TotalQuantityOverridden\n\nMsgBox OriginalSet & \" VS \" & NewSetTrue\n\nEnd Sub", "            // Do this before you do put_TotalQuantityOverridden\n            CComBSTR bstrNewTotalQuantity = L\"77\" ;\n            ThisBomRow->put_TotalQuantity(bstrNewTotalQuantity);\n            ThisBomRow->put_TotalQuantityOverridden(VARIANT_TRUE);"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic script to calculate number of specific kCustomLineType\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nDim oSketch As Sketch\noSketch = oDoc.ComponentDefinition.Sketches.Item(1)\n\n'Dim linesCount As Integer \nlinesCount = 0 ' ******* must be a parameter *******\nDim oName As String \nDim oDesc As String\nDim i As Double\nFor i = 1 To oSketch.SketchLines.Count\n    If oSketch.SketchLines.Item(i).LineType.ToString = \"kCustomLineType\" ' \"ACAD_ISO02W100\" needed\n\t   \n\t   Call oSketch.SketchLines.Item(i).GetCustomLineType(oName, oDesc)\n\t   \n\t   If oName = \"ACAD_ISO02W100\" Then\n\t   \t\tlinesCount = linesCount + 1\n\t   End If  \t\t   \n    End If\nNext i"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic Script for Changing the Layer for a specific model sketch in a drawin\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nDim doc As DrawingDocument = app.ActiveDocument\nDim oSheet As Sheet = doc.ActiveSheet\nDim dv As DrawingView\nDim dc As DrawingCurve\nDim dcs As DrawingCurveSegment\nDim TargetLayer As Layer = ThisDrawing.Document.StylesManager.Layers(\"Work Axis (ANSI)\") 'set your layer here\nDim objColl As ObjectCollection = app.TransientObjects.CreateObjectCollection\nFor Each dv In oSheet.DrawingViews\n\tFor Each dc In dv.DrawingCurves\n\t\tIf dc.ModelGeometry.Parent.Name = \"Sketch2\" Then 'set your sketch name here\n\t\t\tFor Each dcs In dc.Segments\n\t\t\t\tobjColl.Add(dcs)\n\t\t\tNext\n\t\tEnd If\n\tNext\nNext\noSheet.ChangeLayer(objColl, TargetLayer)"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: reduce number of clicks to check things into vault\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Sheet Numbering\n                    ", "solution": ["Dim oSheets As Sheets = ThisDrawing.Document.Sheets\nDim oSheet As Sheet \nDim oList As ArrayList = New ArrayList()\nFor Each oSheet In oSheets \n\t\n    oSheet.activate\n    Dim oDrawingView As DrawingView = oSheet.DrawingViews(1)\n    oModel = ActiveSheet.View(oDrawingView.Name).ModelDocument\n    EquipName = oModel.PropertySets.Item(\"Inventor Summary Information\").Item(\"Comments\").Value\n    EquipName1 = Left(EquipName, 3) \n\toList.Add(EquipName1)\n\tDim item As String\n\tDim i As Integer =0\n\tFor Each item In oList\n\t    If item = EquipName1 Then\n\t        i = i + 1\n\t    End If\n\tNext \n\t\n\tActiveSheet.Sheet.Name = EquipName1 & \" S\" & i\n     \nNext\n\nFor Each item As String In oList\n \n\tDim itemName As String = item\n\n\tDim itemCount As Integer  = 0\n\tFor Each itemName In oList\n\t\tIf item = itemName Then\n\t\t\titemCount = itemCount + 1\n\t\tEnd If\n\tNext\n\t \n\t\n\tIf itemCount = 1 Then\n\t\toName = item & \" S1\"\n\t\tFor Each oSheet In oSheets\n\t\t\toSheet.activate \n\t\t\tIf ActiveSheet.Sheet.Name.StartsWith(oName) = True Then\n\t\t\t\tActiveSheet.Sheet.Name = item\n\t\t\tEnd If\n\t\tNext\n\tEnd If \n\t \nNext"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: I can't get results after running the analysis\n                    ", "solution": [], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: Save as overided existed part file name\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic code for one click printing, how to set printer properties via iLogic\n                    ", "solution": ["Dim", " ", "oDrawDoc", " ", "As", " ", "Document", "\n", "oDrawDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n \n ", "Dim", " ", "oPrintMgr", " ", "As", " ", "PrintManager", "\n ", "oPrintMgr", " = ", "oDrawDoc", ".", "PrintManager", "\n ", "'specify your printer name", "\n ", "oPrintMgr", ".", "Printer", " = ", "\"\\\\kcidc2012\\EngineeringSharp_Ledger\"", "\n \n", "'oPrintMgr.ColorMode = kPrintAllColorsAsBlack", "\n", "oPrintMgr", ".", "AllColorsAsBlack", " = ", "True", "\n", "oPrintMgr", ".", "Orientation", " = ", "kLandscapeOrientation", "\n", "oPrintMgr", ".", "Scale", " = ", "kPrintBestFitScale", "\n", "oPrintMgr", ".", "PaperSize", " = ", "kPaperSizeB", "\n", "oPrintMgr", ".", "SubmitPrint"], "author": "Jason.Rugg"},
{"created at": [], "solution Title": "\n                        Re: Rename a layer\n                    ", "solution": ["Dim oIDW As DrawingDocument\noIDW = ThisApplication.ActiveDocument\n \nDim oIDWStyles As Inventor.DrawingStylesManager\noIDWStyles = oIDW.StylesManager\n\noIDWStyles.Layers.Item(\"Visible (050)\").Name = \"Visible (035)\""], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Color Faces in Assembly (In Parts is extremly slow, and requires modificatio\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iProperties part number in drawing doesnt work\n                    ", "solution": [], "author": "Crstiano"},
{"created at": [], "solution Title": "\n                        Re: Network License Not Available\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Error in iLogic Code: Unspecified error (Exception from HRESULT: 0x80004005.\n                    ", "solution": [], "author": "Scott.Hallmark"},
{"created at": [], "solution Title": "\n                        Re: Schrodinger's SelectSet\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Access to iproperty of part (ipt) or assembly (iam) from drawing (idw)\n                    ", "solution": ["Sub iPropFromDrawing()\nDim app As Application\nDim doc As DrawingDocument\n\nSet app = ThisApplication\nSet doc = app.ActiveDocument\n\nSet partOcc = doc.SelectSet.Item(1).Parent.ModelGeometry.ContainingOccurrence.ReferencedDocumentDescriptor.ReferencedDocument\nSet ipropTitle = partOcc.PropertySets(1).Item(1)", "Msgbox(ipropTitle.Value)", "Sub PromptedVersion()\nDim app As Application\nDim doc As DrawingDocument\nDim docM As Document\n\nSet app = ThisApplication\nSet doc = app.ActiveDocument\n\nSet myLine = app.CommandManager.Pick(kDrawingCurveSegmentFilter, \"Pick a single line from a part\")\nSet partOcc = myLine.Parent.ModelGeometry.ContainingOccurrence.ReferencedDocumentDescriptor.ReferencedDocument\nSet ipropTitle = partOcc.PropertySets(1).Item(1)\nMsgBox (ipropTitle.Value)"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Get the Value of a Custom iProperty and change it\n                    ", "solution": ["   \u00a0On Error Resume Next", "\u00a0\u00a0\u00a0 Dim invLDFProp1 As Property", "\u00a0\u00a0\u00a0 Set invLDFProp1 = invCustomPropertySet.Item(\"LDFProp1\")", "\u00a0\u00a0\u00a0 If Err.Number <> 0 Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ' Property does not exist -> Add the property.", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Call invCustomPropertySet.Add(yesNoValue, \"LDFProp1\")", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LDFProp1.Value = invLDFProp1.Value", "\u00a0\u00a0\u00a0 Else", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'Property exist -> update the value.", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 invLDFProp1.Value = LDFProp1.Value", "\u00a0\u00a0\u00a0 End If"], "author": "hannes.heller"},
{"created at": [], "solution Title": "\n                        Re: Delete ReferencedOLEFile automatically\n                    ", "solution": ["Dim a As Application\nSet a = ThisApplication\n\nDim b As ReferencedOLEFileDescriptor\nSet b = a.ActiveDocument.ReferencedOLEFileDescriptors.Item(1)\nb.Delete"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: capturing the browser node name in a pattern with iLogic\n                    ", "solution": ["Dim doc = ThisDoc.Document\nDim BrowserPane = doc.BrowserPanes(\"Model\")\nDim TopNode = BrowserPane.TopNode\nDim CompNode As ComponentOccurrence\nEndFound = False\nFor Each node As BrowserNode In TopNode.BrowserNodes\n\tIf node.BrowserNodeDefinition.Label Like \"*Component Pattern*\" Then EndFound = True\n\tIf EndFound = True Then \n\t\tCompName = node.BrowserNodes.Item(1).BrowserNodes.Item(1).BrowserNodeDefinition.Label\n\t\tCompNode = doc.ComponentDefinition.Occurrences.ItemByName(CompName)\n\t\tExit For\n\tEnd If\nNext\nIf Not CompNode Is Nothing Then MessageBox.Show(\"CompNodeName = \" & CompNode.Name, \"Title\")"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Use iLogic To Change the Bom Structure of Suppressed parts.\n                    ", "solution": [], "author": "johnsonshiue"},
{"created at": [], "solution Title": "\n                        Re: \"Inventor Programming In C++\", no longer on Amazon, now free to yo\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: suppressing a part of a pattern with an external ilogi rule\n                    ", "solution": ["Dim oDoc As AssemblyDocument\noDoc = ThisDoc.Document '<------\n\nDim oPattern1 As OccurrencePattern\noPattern1 = oDoc.ComponentDefinition.OccurrencePatterns.Item(\"Pat 01\") \nDim oElement1 As OccurrencePatternElement\noPattern1.OccurrencePatternElements.Item(2).Suppressed = True", "InventorVb.DocumentUpdate()"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Get add-in to show up in CommandManager\n                    ", "solution": ["m_sampleButton = controlDefs.AddButtonDefinition(\"Command Name\", \"Internal Name\", CommandTypesEnum.kShapeEditCmdType, AddInClientID)"], "author": "pineapple.law19"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Move body from point to coordinate\n                    ", "solution": ["Dim myPoint = ThisApplication.CommandManager.Pick(SelectionFilterEnum.", "kAllPointEntities", ", \"Select Point to set as origin:\")"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Compile Warnings - dummy.resources\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: iLogic - VBA code\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Understanding lang-independant nature of iPart/iFeature factory's config.tab\n                    ", "solution": ["\tDim column As iPartTableColumn\n\tFor Each column In oFactory.TableColumns\n\t\tIf column.ReferencedDataType = iComponentColumnTypeEnum.kExclusionColumn Then\n\t\t\tDim refFeature As PartFeature = TryCast(column.ReferencedObject, PartFeature)\n\t\t\tIf refFeature IsNot Nothing Then\n\t\t\t\tLogger.Info(\"feature name in iPart table: {0}\", refFeature.Name)\n\t\t\t\tDim cell As iPartTableCell\n\t\t\t\tFor Each cell In column\n\t\t\t\t\tLogger.Info(\"cell value: {0}\", cell.Value)\n\t\t\t\tNext\n\t\t\tEnd If\n\t\tEnd If\n\tNext\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Return to main model window at end of rule\n                    ", "solution": ["origDoc = ThisApplication.ActiveDocument", "origDoc.Activate"], "author": "tdant"},
{"created at": [], "solution Title": "\n                        Re: VBA Run-time error '5' using Apprentice Server\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: iLogic - setting iProperty value to Parts Only BOM Quantity\n                    ", "solution": ["For Each aDoc In oDoc.AllReferencedDocuments\n\t'Check if referenced document is a Part file. \n\tIf aDoc.DocumentType = kPartDocumentObject Then\n\t\tFNamePos = InStrRev(aDoc.FullFileName, \"\\\", - 1)\n\t\tdocFName = Mid(aDoc.FullFileName, FNamePos + 1, Len(aDoc.FullFileName) - FNamePos)\n\t\tiProperties.Value(docFName, \"Project\", \"Project\") = ORDER_NUMBER\n\t\tiProperties.Value(docFName, \"Summary\", \"Company\") = PROJECT\t\n\t\tquantityValue = oADO.AllReferencedOccurrences(aDoc).Count\n\t\tiProperties.Value(docFName, \"Summary\", \"Comments\") = quantityValue\n\tEnd If\nNext"], "author": "andrew.tom.reyn"},
{"created at": [], "solution Title": "\n                        Re: Drawing File Path and Name Customization\n                    ", "solution": ["iProperties.Value(\"Custom\", \"filepath\") = Replace(ThisDoc.PathAndFileName, \"C:\\VaultWorkingFolder\\\", \"G:\\\")"], "author": "tdant"},
{"created at": [], "solution Title": "\n                        Re: How to draw a line with vba in this environment\n                    ", "solution": ["Sub Test()\nDim app As Application\nDim doc As Document\n\nSet app = ThisApplication\nSet doc = app.ActiveDocument\nDim sk As Sketch\nSet sk = doc.SelectSet.Item(1)\nsk.Edit\nDim tg As TransientGeometry\nSet tg = app.TransientGeometry\nDim myStart As Point2d\nSet myStart = tg.CreatePoint2d(0, 0)\nDim myEnd As Point2d\nSet myEnd = tg.CreatePoint2d(1, 1)\nCall sk.SketchLines.AddByTwoPoints(myStart, myEnd)\nsk.ExitEdit\n\nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Save As Step with DataIo\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Drawing view scale\n                    ", "solution": ["Sub DrawingViewScale()\n    Dim oDwgDoc As Document\n    Set oDwgDoc = ThisApplication.ActiveDocument 'assuming you are running it from the current document, otherwise reference the correct file here.\n    Dim oSheet As Sheet\n    Set oSheet = oDwgDoc.Sheets.Item(1) 'assuming we are working on the first sheet\n    \n    Dim oView As DrawingView\n    Set oView = oSheet.DrawingViews.Item(\"1\") 'assuming the base view is the first view\n    oView.ScaleString = \"1:1\"\n    \n    Dim ViewWide As Double\n    ViewWide = 5 'change this to how wide you want your view to be\n    \n    Dim DrawingScale As String\n    DrawingScale = CStr(ViewWide / oView.Width)\n\n    oView.ScaleString = DrawingScale\nEnd Sub"], "author": "Cody.Redding"},
{"created at": [], "solution Title": "\n                        Re: Sheet Metal Face Normals\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic: Scan for sheet metal parts and flatten\n                    ", "solution": ["Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "Dim", " ", "ErrorList", " ", "As", " ", "New", " ", "ArrayList", "\n", "ErrorCount", " = 0\n", "For", " ", "Each", " ", "oDoc", " ", "As", " ", "Document", " ", "In", " ", "ThisApplication", ".", "ActiveDocument", ".", "AllReferencedDocuments", "\n\t", "If", " ", "oDoc", ".", "SubType", " = ", "\"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\"", " ", "Then", "\n\t\t", "oCompDef", " = ", "oDoc", ".", "ComponentDefinition", "\n\t\t", "If", " ", "oCompDef", ".", "HasFlatPattern", " = ", "True", " ", "Then", " ", "Continue", " ", "For", "\n\t\t", "If", " ", "oCompDef", ".", "HasFlatPattern", " = ", "False", " ", "Then", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oDoc", ".", "FullFileName", ", ", "True", ")\n\t\t", "Try", "\n\t\t\t", "oCompDef", ".", "Unfold", "\n\t\t\t", "oCompDef", ".", "FlatPattern", ".", "ExitEdit", "\n\t\t\t", "oDoc", ".", "Save", "\n\t\t", "Catch", "\n\t\t\t", "ErrorList", ".", "Add", "(", "oDoc", ".", "DisplayName", ")\n\t\t\t", "ErrorCount", " += 1\n\t\t", "Finally", "\n\t\t\t", "oDoc", ".", "Close", "(", "True", ")\n\t\t", "End", " ", "Try", "\n\t", "End", " ", "If", "\n", "Next", "\n", "If", " ", "ErrorCount", " > 0 ", "Then", "\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "CreateText", "(", "ThisDoc", ".", "PathAndFileName", "(", "False", ") + ", "\" Flat Pattern Errors.txt\"", ")\n\t", "oWrite", ".", "WriteLine", "(", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", ") + ", "\" Flat Pattern Errors\"", ")\n\t", "oWrite", ".", "WriteLine", "()\n\t", "For", " ", "Each", " ", "i", " ", "In", " ", "ErrorList", "\n\t\t", "oWrite", ".", "WriteLine", "(", "i", ")\n\t", "Next", "\n\t", "oWrite", ".", "Close", "\n\t", "Process", ".", "Start", "(", "\"notepad.exe\"", ", ", "ThisDoc", ".", "PathAndFileName", "(", "False", ") + ", "\" Flat Pattern Errors.txt\"", ")\n", "End", " ", "If", "\n", "MessageBox", ".", "Show", "(", "\"Flat Pattern Check Completed.\"", ", ", "\"Flat Pattern Extractor\"", ", ", "MessageBoxButtons", ".", "OK", ", ", "MessageBoxIcon", ".", "Information", ", ", "MessageBoxDefaultButton", ".", "Button1", ")"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: To assign color to the whole model assembly in the drawing\n                    ", "solution": ["Dim colorList As New ArrayList\nFor Each style As RenderStyle In ThisAssembly.Document.RenderStyles\n  colorList.Add(Style.Name)\nNext\n'Select color from list\noColor = InputListBox(\"Prompt\", colorList, colorList(0), Title := \"Title\", ListName := \"List\")\nDim num As Long\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef =ThisDoc.ModelDocument.ComponentDefinition\ni = 0\n'Iterate through all of the occurrences\nDim oOccurrence As ComponentOccurrence\nFor Each oOccurrence In oAsmCompDef.Occurrences\ni += 1\n'For Each oOccurrence In oModelDoc.ComponentDefinition.Occurrences\noOccurrName = oOccurrence.Name\nMessageBox.Show(\"oName: \" & oOccurrName, \"Title\")\n\nComponent.Color(oOccurrence.Name ) = oColor\n\nNext oOccurrence\n\niLogicVb.UpdateWhenDone = True\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic - open part and save it\n                    ", "solution": ["Dim oPart As PartDocument\nDim oPartPath As String\n\n' Get drawing path\noPartPath = ThisDoc.PathAndFileName(False) & \".ipt\"\n\n' Set a reference to the target part\noPart = ThisApplication.Documents.ItemByName(oPartPath)\n\n' Open the target part\nThisApplication.Documents.Open(oPartPath)\n\n' Save a copy of oPart as a step file\noPart.SaveAs(Replace(oPartPath, \".ipt\", \".step\"), True)\n\n' Close oPart\noPart.Close"], "author": "tdant"},
{"created at": [], "solution Title": "\n                        Re: Making a rule that replaces a new Style on Old Drawings\n                    ", "solution": ["Sub", " ", "Main", "\n\n", "If", " ", "ThisDoc", ".", "Document", ".", "DocumentType", " <> ", "kDrawingDocumentObject", " ", "Then", "\n\t", "MsgBox", "(", "\"This rule may only be run on drawing documents!\"", ",", "vbOKOnly", ",", "\"Update Everything\"", ")\n\t", "Exit", " ", "Sub", "\n", "End", " ", "If", "\n", "Dim", " ", "oPrompt", " ", "As", " ", "String", "\n", "oPrompt", " = ", "MsgBox", "(", "\"Update Titleblocks and Styles?\"", ", ", "vbYesNo", ", ", "\"Update Everything\"", ")\n\n", "Select", " ", "Case", " ", "oPrompt", "\n\t", "Case", " ", "vbNo", "\n\t\t", "Exit", " ", "Sub", "\n\t", "Case", " ", "vbYes", "\n\t\t", "MessageBox", ".", "Show", "(", "\"START\"", ", ", "\"Title\"", ")\n\n\t\t", "ImportTemplateItems", "() ", "'Copy all stuf over from the Template file. ", "\n\t\t", "'MessageBox.Show(\"Import OK\", \"Title\")", "\n\t\t\n\t\t", "ReplaceTitleBlock", "() ", "'Replace the current Titleblock with the new Titleblock on all sheets.", "\n\t\t", "'MessageBox.Show(\"TitleBlock OK\", \"Title\")", "\n\t\t\n\t\t", "SetActiveStyle", "() ", "'Set the Relco Global Style as active. ", "\n\t\t", "'MessageBox.Show(\"Set Active Style OK\", \"Title\")", "\n\n\t\t", "'MakeMetric() 'Obsolete.", "\n\t\t", "'MessageBox.Show(\"Metric\", \"Title\")", "\n\n\t\t", "PurgeStyles", "()\n\t\t", "'MessageBox.Show(\"PurgeStyle\", \"Title\")", "\n\n\t\t", "DimensionUpdates", "()\n\t\t", "'MessageBox.Show(\"Change Dim OK\", \"Title\")", "\n\n\t\t\n", "End", " ", "Select", "\n\n", "End", " ", "Sub", "\n\n", "Sub", " ", "ImportTemplateItems", "()\n", "Dim", " ", "oTargetDoc", ", ", "oSourceDoc", " ", "As", " ", "DrawingDocument", "\n", "Dim", " ", "oTBdef", " ", "As", " ", "TitleBlockDefinition", "\n", "Dim", " ", "oTBdefs", " ", "As", " ", "TitleBlockDefinitions", "\n", "Dim", " ", "oBorderDef", " ", "As", " ", "BorderDefinition", "\n", "Dim", " ", "oBorderDefs", " ", "As", " ", "BorderDefinitions", "\n", "Dim", " ", "oSymbol", " ", "As", " ", "SketchedSymbolDefinition", "\n", "Dim", " ", "oSymbols", " ", "As", " ", "SketchedSymbolDefinitions", "\n\n\n\n", "oTargetDoc", " = ", "ThisDrawing", ".", "Document", "\n\n", "oSourceDoc", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "\"C:\\Relco\\Vault\\CAD Standards\\Inventor\\RELCO Global Templates\\Standard.dwg\"", ", ", "False", ")\n\n", "'oTargetDoc.StylesManager.ActiveStandardStyle.UpdateFromGlobal 'TURNED OF BECAUSE OF CONFLICT. Why is this broken?", "\n\n\n\n", "oTBdefs", " = ", "oSourceDoc", ".", "TitleBlockDefinitions", "\n", "oBorderDefs", " = ", "oSourceDoc", ".", "BorderDefinitions", "\n", "oSymbols", " = ", "oSourceDoc", ".", "SketchedSymbolDefinitions", "\n\n", "For", " ", "Each", " ", "oTBdef", " ", "In", " ", "oTBdefs", "\n\t", "Try", "\n\t\t", "If", " ", "oTBdef", ".", "Name", " = ", "\"RELCO Global Rev 0\"", " ", "Then", " ", "'Make this string your new TitleBlock name", "\n\t\t\t", "oTBdef", ".", "CopyTo", "(", "oTargetDoc", ", ", "True", ")\n\t\t", "End", " ", "If", "\n\t", "Catch", "\n\t\t", "MsgBox", "(", "\"Unknown error in copy title block for \"", " & ", "Chr", "(34) & ", "oTBdef", ".", "Name", " & ", "Chr", "(34),", "vbOKOnly", ",", "\"Error\"", ")\n\t", "End", " ", "Try", "\n", "Next", "\n", "For", " ", "Each", " ", "oBorderDef", " ", "In", " ", "oBorderDefs", "\n\t", "Try", "\n\t\t", "If", " ", "oBorderDef", ".", "Name", " <> ", "\"Default Border\"", " ", "Then", "\n\t\t\t", "oBorderDef", ".", "CopyTo", "(", "oTargetDoc", ", ", "True", ")\n\t\t", "End", " ", "If", "\n\t", "Catch", "\n\t\t", "MsgBox", "(", "\"Unknown error in copy border definition for \"", " & ", "Chr", "(34) & ", "oBorderDef", ".", "Name", " & ", "Chr", "(34),", "vbOKOnly", ",", "\"Error\"", ")\n\t", "End", " ", "Try", "\n", "Next", "\n", "For", " ", "Each", " ", "oSymbol", " ", "In", " ", "oSymbols", "\n\t", "Try", "\n\t\t", "oSymbol", ".", "CopyTo", "(", "oTargetDoc", ", ", "True", ")\n\t", "Catch", "\n\t\t", "MsgBox", "(", "\"Unknown error in copy sketched symbol for \"", " & ", "Chr", "(34) & ", "oSymbol", ".", "Name", " & ", "Chr", "(34),", "vbOKOnly", ",", "\"Error\"", ")\n\t", "End", " ", "Try", "\n", "Next", "\n\n", "oSourceDoc", ".", "Close", "()\n", "End", " ", "Sub", "\n\n", "Sub", " ", "ReplaceTitleBlock", "()\n\t\n", "Dim", " ", "i", " ", "As", " ", "Integer", "\n\n", "'Replace Titleblock", "\n", "Dim", " ", "oTitle0", " ", "As", " ", "String", "\n", "oTitle0", " = ", "\"Relco Global Rev 0\"", " ", "'This should be the New Titleblock", "\n\n", "' Set a reference to the drawing document.", "\n", "' This assumes a drawing document is active.", "\n", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n", "' Obtain a reference to the desired border defintion.", "\n", "Dim", " ", "oTitleBlockDef", " ", "As", " ", "TitleBlockDefinition", "\n", "oTitleBlockDef", " = ", "oDrawDoc", ".", "TitleBlockDefinitions", ".", "Item", "(", "oTitle0", ")\n\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n\n\n", "'Count the number of total sheets", "\n", "Dim", " ", "SheetCount", " ", "As", " ", "Integer", "\n", "SheetCount", " = ", "oDrawDoc", ".", "Sheets", ".", "Count", "\t\t\n\n", "If", " (", "oDrawDoc", ".", "Sheets", ".", "Count", " > 0) ", "Then", " \t\t\t\t\t\t\t", "'Execute if >1 sheets", "\n\t", "For", " ", "Each", " ", "s", " ", "In", " ", "oDrawDoc", ".", "Sheets", "\n\t\t", "s", ".", "Activate", "\t\t\t", "'Activate sheet", "\n\t\t", "oSheet", " = ", "oDrawDoc", ".", "ActiveSheet", "\n\t\t\n\t\t", "' Check to see if the sheet already has the correct title block and delete it if it doesn't.", "\n\t\t", "If", " ", "Not", " ", "oSheet", ".", "TitleBlock", " ", "Is", " ", "oTitle0", " ", "Then", "\n\t\t\t", "oSheet", ".", "TitleBlock", ".", "Delete", "\n\t\t", "End", " ", "If", "\n\t\t", "Dim", " ", "oTitleBlock", " ", "As", " ", "TitleBlock", "\n\t\t", "oTitleBlock", " = ", "oSheet", ".", "AddTitleBlock", "(", "oTitleBlockDef", ")\n\t", "Next", "\n", "Else", " \n\t", "MessageBox", ".", "Show", "(", "\"There is only 1 Sheet. Make more sheets and come back\"", ", ", "\"Nothing to do\"", ")\n", "End", " ", "If", "\n\t\n", "End", " ", "Sub", "\n\n", "Sub", " ", "MakeMetric", "()\n", "If", " ", "ThisApplication", ".", "ActiveDocumentType", " = ", "kDrawingDocumentObject", " ", "Then", "\n\t\t", "Dim", " ", "oIDW", " ", "As", " ", "DrawingDocument", "\n\t\t", "oIDW", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n\t\t", "Dim", " ", "oIDWStyles", " ", "As", " ", "Inventor", ".", "DrawingStylesManager", "\n\t\t", "oIDWStyles", " = ", "oIDW", ".", "StylesManager", "\n\t\t", "oIDWStyles", ".", "ActiveStandardStyle", ".", "LinearUnits", " = ", "UnitsTypeEnum", ".", "kMillimeterLengthUnits", "\n\t\t", "oIDWStyles", ".", "DimensionStyles", ".", "Item", "(", "\"RELCO - IN (ANSI)\"", ").", "LinearUnits", " = 11269 ", "'= mm", "\n\t\t", "oIDWStyles", ".", "DimensionStyles", ".", "Item", "(", "\"RELCO - IN (ANSI)\"", ").", "LeadingZeroDisplay", " = ", "True", "\n\t\t", "oIDWStyles", ".", "DimensionStyles", ".", "Item", "(", "\"RELCO - IN (ANSI)\"", ").", "TrailingZeroDisplay", " = ", "False", "\n\t\t", "oIDWStyles", ".", "DimensionStyles", ".", "Item", "(", "\"RELCO - IN (ANSI)\"", ").", "AngularTrailingZeroDisplay", " = ", "False", "\n\t\t", "oIDWStyles", ".", "DimensionStyles", ".", "Item", "(", "\"RELCO - IN (ANSI)\"", ").", "LinearPrecision", " = 41731", "' = kZeroDecimalPlaceLinearPrecision", "\n\n\t\t", "Else", "\n\n\n", "End", " ", "If", "\n\t\t\n", "End", " ", "Sub", "\n\n", "Sub", " ", "PurgeStyles", "()\n\t\n", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oStyles", "\n", "oStyles", " = ", "oDrawDoc", ".", "StylesManager", "\n\n", "Dim", " ", "noneleft", " ", "As", " ", "Boolean", "\n", "noneleft", " = ", "True", "\n\n", "Dim", " ", "ostyle", " ", "As", " ", "Style", "\n\n", "Do", " ", "While", " (", "noneleft", ")\n\t", "noneleft", " = ", "False", "\n\t", "For", " ", "Each", " ", "ostyle", " ", "In", " ", "oStyles", ".", "Styles", "\n\t\t", "If", " (", "ostyle", ".", "StyleLocation", " = ", "\"51202\"", ") ", "And", " (", "ostyle", ".", "InUse", " = ", "False", ") ", "Then", "\n\t\t\t", "ostyle", ".", "Delete", "\n\t\t\t", "noneleft", " = ", "True", "\n\t\t", "End", " ", "If", "\n\t", "Next", "\n", "Loop", "\n", "End", " ", "Sub", "\n\n", "Sub", " ", "SetActiveStyle", "()\n \t", "Const", " ", "kStandardName", " = ", "\"RELCO Global\"", " ", "' This is the name of the Style Standard", "\n    ", "Const", " ", "kObjDefaultsName", " = ", "\"Relco Global Defaults\"", "  ", "'This is the name of the Object Standard", "\n    ", "Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", " \n    \n    ", "'On Error Resume Next ", "\n    \n    ", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", " \n    ", "Dim", " ", "oStylesMgr", " ", "As", " ", "DrawingStylesManager", " \n    ", "oStylesMgr", " = ", "oDoc", ".", "StylesManager", " \n    ", "Dim", " ", "oStandard", " ", "As", " ", "DrawingStandardStyle", " \n    ", "oStandard", " = ", "oStylesMgr", ".", "StandardStyles", ".", "Item", "(", "kStandardName", ") \n    \n    ", "If", " ", "oStandard", " ", "Is", " ", "Nothing", " ", "Then", " \n       ", "oStandard", " = ", "oStylesMgr", ".", "StandardStyles", ".", "Item", "(1).", "Copy", "(", "kStandardName", ") \n    ", "End", " ", "If", " \n\t", "oStylesMgr", ".", "ActiveStandardStyle", " = ", "oStandard", "\n\n\t\n", "End", " ", "Sub", "\n\n", "Private", " ", "Sub", " ", "DimensionUpdates", "()\n\t", "Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", "\n \t", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\t", "Dim", " ", "oDim", " ", "As", " ", "GeneralDimension", " \n\t", "Dim", " ", "oDimStyle", " ", "As", " ", "DrawingStandardStyle", "\n\t", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n\t", "oDimStyle", " = ", "oDoc", ".", "StylesManager", ".", "ActiveStandardStyle", "\n\n\t", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDoc", ".", "Sheets", "\n\t\t", "For", " ", "Each", " ", "oDim", " ", "In", " ", "oSheet", ".", "DrawingDimensions", "\n\n\t\t\t", "If", " ", "oDim", ".", "Style", ".", "Name", " <> ", "oDimStyle", ".", "ActiveObjectDefaults", ".", "AngularDimensionStyle", ".", "Name", " ", "Then", "\n\t\t\t\t", "oDim", ".", "Style", " = ", "oDimStyle", ".", "ActiveObjectDefaults", ".", "AngularDimensionStyle", "\n\t\t\t", "End", " ", "If", "\n\t\t\t", "If", " ", "oDimStyle", ".", "Name", " <> ", "oDimStyle", ".", "ActiveObjectDefaults", ".", "LinearDimensionStyle", ".", "Name", " ", "Then", "\n\t\t\t\t", "oDim", ".", "Style", " = ", "oDimStyle", ".", "ActiveObjectDefaults", ".", "LinearDimensionStyle", "\n\t\t\t", "End", " ", "If", "\n\t\t\t\n\t\t", "Next", "\n\t", "Next", "\n", "End", " ", "Sub", "\n"], "author": "machiel.veldkam"},
{"created at": [], "solution Title": "\n                        Re: VBA Question\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: 2019 API ClearanceHoleInfo Error in FastenerStandard\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Ilogic Create Multivalue parameters In IDW\n                    ", "solution": [], "author": "Cody.Redding"},
{"created at": [], "solution Title": "\n                        Re: VB.Net Addin - Get reference to open form\n                    ", "solution": [], "author": "gerrarddhickson"},
{"created at": [], "solution Title": "\n                        Re: VBA: Origin axis in new sketch\n                    ", "solution": ["Sub CreateSketch()\n\n    'Set a reference to the part document\n    Dim oDoc As Inventor.PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    ' Set a reference to the component definition.\n    Dim oCompDef As PartComponentDefinition\n    Set oCompDef = oDoc.ComponentDefinition\n   \n    'Create a new sketch on the X-y work plane.\n    Dim oSketch As PlanarSketch\n    Set oSketch = oCompDef.Sketches.Add(oCompDef.WorkPlanes(3))\n    \n    oSketch.Edit\n    \n    'project origin point\n    Dim oOriginSketchPoint As SketchPoint\n    Set oOriginSketchPoint = oSketch.AddByProjectingEntity(oCompDef.WorkPoints.Item(1))\n    Dim oXAxis As SketchLine '<----- thought it should be a WorkAxis but it's a SketchLine\n    Set oXAxis = oSketch.AddByProjectingEntity(oCompDef.WorkAxes.Item(\"X Axis\"))\n    'oSketch.ExitEdit\n    \n    'Sketch Orientation\n    oDoc.SelectSet.Clear\n    oDoc.SelectSet.Select oSketch\n    ThisApplication.CommandManager.ControlDefinitions.Item(\"AppLookAtCmd\").Execute\n    oDoc.SelectSet.Clear\n    \n\nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Give all the parts in a project unique partnumber\n                    ", "solution": [], "author": "Cadmanto"},
{"created at": [], "solution Title": "\n                        Re: Measure command with disabled ShapeEdit-commands: nothing is selectable\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Why does this rule only work the second time you run it?\n                    ", "solution": ["    ", "' Get a feature selection from the user", "\n    ", "Dim", " ", "oObject", " ", "As", " ", "Object", "\n    ", "oObject", " = ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "selectionfilterenum", ".", "kDrawingDimensionFilter", ", ", "\"Pick a Dimension\"", ")\n\t", "'MessageBox.Show(\"Picked: \" & oObject.DimensionType, \"Title\")", "\n\t", "oObject", ".", "CenterText", "\n", "'update the file", "InventorVb", ".", "DocumentUpdate", "()\n\t", "oObject", ".", "CenterText", "\n", "'update the file", "\n", "InventorVb", ".", "DocumentUpdate", "()"], "author": "rayessle"},
{"created at": [], "solution Title": "\n                        Re: Why do my iLogic rule returns with 14 decimals\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Base visibility of a drawing dimension on a parts parameter\n                    ", "solution": ["ThisDrawing.Document.StylesManager.Layers(\"CustomLayer\").Visible = MyBooleanParameter"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Can not extrude after import dwg to sketch\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Flipping Fold Direction\n                    ", "solution": ["Sub", " ", "Main", "()\n", "'''", "Define Sheet metal Doc", "\n    ", "Dim", " ", "oSheetMetalDoc", " ", "As", " ", "PartDocument", "\n    ", "Set", " ", "oSheetMetalDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "'''", "Define sheet metal component definition    ", "\n    ", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n    ", "Set", " ", "oCompDef", " = ", "oSheetMetalDoc", ".", "ComponentDefinition", "\n", "'''", "Define sheet metal features\t", "\n\t", "Dim", " ", "oSheetMetalFeatures", " ", "As", " ", "SheetMetalFeatures", "\n    ", "Set", " ", "oSheetMetalFeatures", " = ", "oCompDef", ".", "Features", "\n", "'''", "Define fold features\t", "\n\t", "Dim", " ", "oFoldFeature", " ", "As", " ", "FoldFeature", "\n    ", "Set", " ", "oFoldFeature", " = ", "oSheetMetalFeatures", ".", "FoldFeatures", ".", "Item", "(", "\"Fold2\"", ")\n", "'''", "give fold feature directions\t", "\n\t", "oFoldFeature", ".", "Definition", ".", "IsPositiveBendDirection", " = ", "True", "\n", "End", " ", "Sub"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: Level of Details for components\n                    ", "solution": ["Public Sub InheritViewRepresentationAndLods(ThisApplication As Inventor.Application, oAssDoc As AssemblyDocument)\n        Dim fio As System.IO.FileInfo = New System.IO.FileInfo(oAssDoc.FullFileName)\n\n        If fio.IsReadOnly = False Then\n\n\n            Dim oAssCompDef As AssemblyComponentDefinition = oAssDoc.ComponentDefinition\n            Dim StrActDVR As String = oAssCompDef.RepresentationsManager.ActiveDesignViewRepresentation.Name\n            Dim StrActLOD As String = oAssCompDef.RepresentationsManager.ActiveLevelOfDetailRepresentation.Name\n            Dim oCompOccs As ComponentOccurrences = oAssCompDef.Occurrences\n            Dim oCompOcc As ComponentOccurrence\n\nTry\n\n                oAssCompDef.RepresentationsManager.LevelOfDetailRepresentations.Item(\"YOUR LOD NAME\").Activate()\n                For Each oCompOcc In oCompOccs\n                    frm.PrbProgressWait.Value = frm.PrbProgressWait.Value + 1\n                    If oCompOcc.DefinitionDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n                        Try\n                            oCompOcc.SetLevelOfDetailRepresentation(\"YOUR LOD NAME\", True)\n                        Catch ex As Exception\n\n                        End Try\n\n                    End If\n                Next\n                oAssDoc.Save2(False)\n            Catch ex As Exception\n\n            End Try\nend sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iProp Wiz conflict with iLogic code?\n                    ", "solution": ["'this code converts the Part Number to a custom iProperty that can be read by genius.\niProperties.Value(\"Project\", \"Part Number\") = iProperties.Value(\"Custom\", \"Item_Description\")\n\nIf iProperties.Value(\"Project\", \"Part Number\") = \"\" Then\n\n\tiProperties.Value(\"Project\", \"Part Number\") = ThisDoc.FileName(False) 'without extension\n\nEnd If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic AddTitleBlock E_INVALIDARG\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Content Center Library project configuration\n                    ", "solution": ["Sub CCTest()\n    Dim oDP As DesignProject\n    Set oDP = ThisApplication.DesignProjectManager.ActiveDesignProject\n         \n    Dim xNode As IXMLDOMNode\n    Dim XDoc As MSXML2.DOMDocument\n    \n    Dim strXML As String\n    strXML = oDP.ContentCenterConfiguration.ConfigurationXML\n\n    Set XDoc = New MSXML2.DOMDocument\n\n    If Not XDoc.LoadXML(strXML) Then  'strXML is the string with XML'\n        Err.Raise XDoc.parseError.ErrorCode, , XDoc.parseError.reason\n    End If\n    \n    Set xNode = XDoc.lastChild.lastChild\n    \n    Dim oNew As IXMLDOMElement\n    Set oNew = XDoc.createElement(\"Library\")\n    \n    Dim att As IXMLDOMAttribute\n    Set att = XDoc.createAttribute(\"DisplayName\")\n    att.Text = \"My Library\" 'This is library name to be enabled.\n    \n    Dim att1 As IXMLDOMAttribute\n    Set att1 = XDoc.createAttribute(\"InternalName\")\n    ", "att1.Text = \"2f1b22d8-e1e5-4955-81d6-f1cf62eab229\" 'Internal name varies from system to system.", "\n    \n    Dim att2 As IXMLDOMAttribute\n    Set att2 = XDoc.createAttribute(\"IsReadOnly\")\n    att2.Text = \"False\"\n    \n    Dim att3 As IXMLDOMAttribute\n    Set att3 = XDoc.createAttribute(\"LibraryAttachName\")\n    att3.Text = \"My Library\"\n    \n    Dim att4 As IXMLDOMAttribute\n    Set att4 = XDoc.createAttribute(\"ServerName\")\n    att4.Text = \"DesktopContent\"\n    \n    Call oNew.Attributes.setNamedItem(att)\n    Call oNew.Attributes.setNamedItem(att1)\n    Call oNew.Attributes.setNamedItem(att2)\n    Call oNew.Attributes.setNamedItem(att3)\n    Call oNew.Attributes.setNamedItem(att4)\n    \n    Call xNode.appendChild(oNew)\n    \n    Debug.Print XDoc.xml\n    \n    strXML = XDoc.xml\n    \n    oDP.ContentCenterConfiguration.ConfigurationXML = strXML\n     \nEnd Sub", "Sub CCTest()\n    Dim oDP As DesignProject\n    Set oDP = ThisApplication.DesignProjectManager.ActiveDesignProject\n         \n    Dim xNode As IXMLDOMNode\n    Dim XDoc As MSXML2.DOMDocument\n    \n    Debug.Print oDP.ContentCenterConfiguration.ConfigurationXML\nEnd Sub\n    "], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: To retrieve data from \"General\" tab in iPproperties dialog box\n                    ", "solution": ["Dim oFname As String 'File Name\noFname = ThisDoc.FileName(False) 'Gets the file name of the active file without extension\nMessageBox.Show(oFname, \"File Name\")"], "author": "Nsteel"},
{"created at": [], "solution Title": "\n                        Re: Use Ilogic to select iassembly member for the parts list in a drawing\n                    ", "solution": ["Dim drawingDoc As DrawingDocument\ndrawingDoc = ThisDrawing.Document\n\nFor v = 1 To drawingDoc.ActiveSheet.DrawingViews.Count\n    oView = ActiveSheet.View(\"VIEW\" & v)\n    doc = oView.ModelDocument\n\n\tIf doc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n\t  \tmember = doc.ComponentDefinition.iAssemblyMember.ParentFactory.DefaultRow.MemberName\n\t\tmember2 = New String() {member}\n\tElse If doc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n\t\tmember = doc.ComponentDefinition.iPartMember.ParentFactory.DefaultRow.MemberName\n\t\toView.View.ActiveMemberName = member\n\tEnd If\n\t\toView.View.ActiveMemberName = member\nNext\n\nIf drawingDoc.ActiveSheet.PartsLists.Count > 0 Then drawingDoc.ActiveSheet.PartsLists.Item(1).MembersToInclude() = member2", "Dim oView As DrawingView\nDim doc As DrawingDocument = ThisApplication.ActiveDocument\noView = ActiveSheet.View(\"VIEW1\").View\ndocname=ThisDoc.FileName(False) 'without extension\ndocnamearr = New String() {docname}\noView.ActiveMemberName = docname \ndoc.ActiveSheet.PartsLists.Item(1).MembersToInclude() = docnamearr\n'MessageBox.Show(docname, \"Title\")"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Yes or No on a Form to Suppress a feature\n                    ", "solution": ["'Yes on Custom Property = True, No on Custom Property = False", "\n", "If", " ", "ThisDoc", ".", "Document", ".", "PropertySets", ".", "Item", "(", "\"Inventor User Defined Properties\"", ").", "Item", "(", "\"PropertyName\"", ").", "Value", " = ", "True", " ", "Then", "\n\t", "Feature", ".", "IsActive", "(", "\"Move Body\"", ") = ", "True", "\n", "Else", "\n\t", "Feature", ".", "IsActive", "(", "\"Move Body\"", ") = ", "False", "\n", "End", " ", "If"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: About the camera when finishing a sketch\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: ipart break link\n                    ", "solution": ["Public Sub main()\nDim asmDoc As AssemblyDocument\n    asmDoc = ThisApplication.ActiveDocument\nEnd Sub\nc(asmDoc)\nPublic Sub c(asmDoc As AssemblyDocument)\n\n    \n    Dim oDoc As Document = ThisDoc.Document\n    Dim oCompDef As Inventor.ComponentDefinition = oDoc.ComponentDefinition\n       Dim occ As Inventor.ComponentOccurrence\n    \n      Dim partCompDef1 As PartComponentDefinition\n    Dim partCompDef2 As PartComponentDefinition\n    Dim factoryDoc As PartDocument\n    'Dim oPart As PartDocument\n    \n\n    Dim i As Long=1\n    \n    For Each occ In oCompDef.Occurrences\n    occ = asmDoc.ComponentDefinition.Occurrences(i)\n    \n    If occ.IsiPartMember Then\n        partCompDef1 = occ.Definition\n        factoryDoc = partCompDef1.iPartMember.ReferencedDocumentDescriptor.ReferencedDocument\n    \n    \n        Dim oPart As PartDocument\n    \n        For Each oPart In factoryDoc.ReferencedDocuments\n            MessageBox.Show(\"Message\", \"Title\")\n\n            oPart.ComponentDefinition.iPartMember.BreakLinkToFactory\n            \n        Next\n    \n    End If\n    \n    If occ.DefinitionDocumentType = kAssemblyDocumentObject Then\n    Call c(occ.Definition.Document)\n    End If\n    i = i + 1\n      Next\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: [iLogic] How to set sheet names to drawing and model iproperties?\n                    ", "solution": ["Sub Main()\n    If TypeOf ThisDoc.Document Is DrawingDocument Then\n    \n    comp = ThisDoc.Document .PropertySets.Item(2).Item(\"company\")\n        Dim dwgDoc As DrawingDocument = ThisDoc.Document\n        For Each dwgSheet As Sheet In dwgDoc.Sheets\n            If dwgSheet.DrawingViews.Count > 0 Then\n                modelFile = dwgSheet.DrawingViews(1).ReferencedDocumentDescriptor.FullDocumentName\n                modelDoc = dwgSheet.DrawingViews(1).ReferencedDocumentDescriptor.ReferencedDocument\n                prtNumber = modelDoc.PropertySets(\"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\").ItemByPropId(5).Value\n                If Not String.IsNullOrEmpty(prtNumber) Then\n                    dwgSheet.Name = comp.", "value", " & \"-\" & prtNumber\n                End If\n            End If\n        Next\n    End If\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Export/Import Relations from/in Inventor main assembly with iLogic or VBA\n                    ", "solution": [], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: From Solidworks to Inventor: user shortcuts and tips\n                    ", "solution": [], "author": "whiteskulleton"},
{"created at": [], "solution Title": "\n                        Re: As far as Occurrences in an assembly definition are concerned...\n                    ", "solution": [], "author": "oransen"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2019 iLogic To Use Master Drawings With Input Form For Variables\n                    ", "solution": [], "author": "kelly.young"},
{"created at": [], "solution Title": "\n                        Re: Auto Ordinate Dimensions\n                    ", "solution": ["Public Sub Main()\n    ' Set a reference to the drawing document.\n    ' This assumes a drawing document is active.\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n    \n    ' Set a reference to the active sheet.\n    Dim oActiveSheet As Sheet\n    Set oActiveSheet = oDrawDoc.ActiveSheet\n    \n    '   a reference to the drawing curve segment.\n    ' This assumes that a linear drawing curve is selected.\n    Dim oDrawingCurveSegment As DrawingCurveSegment\n    Set oDrawingCurveSegment = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingCurveSegmentFilter, \"Select start line to start ordinate dimension\")\n    \n    '   a reference to the drawing curve.\n    Dim oDrawingCurve As DrawingCurve\n    Set oDrawingCurve = oDrawingCurveSegment.Parent\n    \n    \n    If Not oDrawingCurve.CurveType = CurveTypeEnum.kLineSegmentCurve Then\n        MsgBox (\"A linear curve should be selected for this sample.\")\n    Exit Sub\n    End If\n    \n    ' Create point intents to anchor the dimension to.\n    Dim oDimIntent  As GeometryIntent\n    Set oDimIntent = oActiveSheet.CreateGeometryIntent(oDrawingCurve, kEndPointIntent)\n    \n    '   a reference to the view to which the curve belongs.\n    Dim oDrawingView As DrawingView\n    Set oDrawingView = oDrawingCurve.Parent\n    \n    ' If origin indicator has not been already created, create it first.\n    If Not oDrawingView.HasOriginIndicator Then\n        ' The indicator will be located at the start point of the selected curve.\n        Call oDrawingView.CreateOriginIndicator(oDimIntent)\n    End If\n    \n    '   a reference to the ordinate dimensions collection.\n    Dim oOrdinateDimensions As OrdinateDimensions\n    Set oOrdinateDimensions = oActiveSheet.DrawingDimensions.OrdinateDimensions\n    \n    Dim oTextOrigin  As Point2d\n    Dim DimType As DimensionTypeEnum\n    \n    ' Selected curve is vertical or at an angle.\n    DimType = DimensionTypeEnum.kHorizontalDimensionType\n    \n    '   the text points for the 2 dimensions.\n    Set oTextOrigin = ThisApplication.TransientGeometry.CreatePoint2d(oDrawingView.Left + 2, oDrawingCurve.StartPoint.Y)\n    \n    ' Create the first ordinate dimension.\n    Dim oOrdinateDimension1 As OrdinateDimension\n    Set oOrdinateDimension1 = oOrdinateDimensions.Add(oDimIntent, oTextOrigin, DimType)\n\n    \n    For Each oDrawingCurve In oDrawingView.DrawingCurves\n    If oDrawingCurve.CurveType = kCircleCurve Then\n        Dim oIntent As GeometryIntent\n        Set oIntent = oActiveSheet.CreateGeometryIntent(oDrawingCurve, kCenterPointIntent)\n        \n        Dim origin As Point2d\n        Set origin = ThisApplication.TransientGeometry.CreatePoint2d(oDrawingView.Left + 2, oDrawingCurve.CenterPoint.Y)\n        \n        Call oOrdinateDimensions.Add(oIntent, origin, DimType)\n    End If\n    Next\n    \n    Set oDrawingCurveSegment = ThisApplication.CommandManager.Pick(kDrawingCurveSegmentFilter, \"Select end line to complete ordinate dimension\")\n    \n    Set oDrawingCurve = oDrawingCurveSegment.Parent\n    \n    If Not oDrawingCurve.CurveType = kLineSegmentCurve Then\n        MsgBox (\"A linear curve should be selected for this sample.\")\n        Exit Sub\n    End If\n    \n    Set oDimIntent = oActiveSheet.CreateGeometryIntent(oDrawingCurve, kEndPointIntent)\n    \n    Set oTextOrigin = ThisApplication.TransientGeometry.CreatePoint2d(oDrawingView.Left + 2, oDrawingCurve.StartPoint.Y)\n    \n    Call oOrdinateDimensions.Add(oDimIntent, oTextOrigin, DimType)\n  \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: API:  Searching a sketch for a feature\n                    ", "solution": ["Dim doc As PartDocument = ThisApplication.ActiveDocument 'I'm assuming you will only ever need to run this on a part.\nDim CompDef As ComponentDefinition = doc.ComponentDefinition\nDim LineType = CompDef.sketches.Item(1).Profiles.Item(1).Item(1).Item(1).CurveType 'I'm assuming Item(1) will always be the first thing drawn.\nIf LineType = Curve2dTypeEnum.kCircleCurve2d Then\n\tMessageBox.Show(\"Base sketch is a circle.\", \"Title\")\nElse If LineType = Curve2dTypeEnum.kLineSegmentCurve2d Then\n\tMessageBox.Show(\"Base sketch is probably a rectangle. \", \"Title\")\nElse\n\tMessageBox.Show(\"Base sketch was unexpected type.\", \"Title\")\nEnd If\n\n"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Hold Decimals in String\n                    ", "solution": ["myParameter", " = ", "Double", ".", "Parse", "(", "x1", ").", "ToString", "(", "\"0.00\"", ") "], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: change default Bill of Materials editor views\n                    ", "solution": ["ThisDoc", ".", "Document", ".", "ComponentDefinition", ".", "BOM", ".", "ImportBOMCustomization", "(", "\"C:\\temp\\BOM Settings.xml\"", ")"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: iLogic end of statement error in Try\n                    ", "solution": ["Try", "\n\t", "z1", " = ", "True", "\n", "Catch", "\n\t", "Return", "\n", "End", " ", "Try"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: iLogic syntax for iProperties Status Date\n                    ", "solution": ["iProperties.Value(\"Status\", \"Checked Date\") = #1/1/1601#"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iLogic to Import excel table (same name as drawing number) and resize the ce\n                    ", "solution": ["Sub Main()\n\t\n\toPartNo = iProperties.Value(\"Project\", \"Part Number\")\n\n\texcelPath = \"C:\\Test\" 'Directory name to be serached for excel file\n\t\n\t'excelPath = ThisDoc.Path 'Path of drawing file\n\n\tDim oFound As Boolean = False \n\n\tFor Each fileName In System.IO.Directory.GetFiles(excelPath)\t\t \n\t\tIf fileName = excelPath + \"\\\" + oPartNo + \".xlsx\" Then\n\t\t\toFound = True\n\t\t\tExit For \n\t\tEnd If \n\tNext\n\n\tDim excelFullName As String = \"\"\n\tIf oFound = True Then \n\t\texcelFullName = excelPath + \"\\\" + oPartNo + \".xlsx\"\t\t \n\tElse\n\t\tMessageBox.Show(\"Excel file not found\", \"Excel file\")\n\t\tExit Sub \n\tEnd If  \n\t\n\tDim oDrawDoc As DrawingDocument\n    oDrawDoc = ThisApplication.ActiveDocument\n    \n\tDim oActiveSheet As Sheet\n\toActiveSheet = oDrawDoc.ActiveSheet\n    \n    Dim oPoint As Point2d\n    oPoint = ThisApplication.TransientGeometry.CreatePoint2d(69, 58)\n    \n    Dim oExcelTable As CustomTable\t\n    oExcelTable = oActiveSheet.CustomTables.AddExcelTable _\n\t(excelFullName, oPoint,iProperties.Value(\"Project\", \"Part Number\")) \n\t\nEnd Sub \n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Attach Balloon without right click menu ?\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Restore form to normal\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Using Random function in iLogic what is the Code\n                    ", "solution": ["Sub Main()\n\n    'Initialize the random number generator\n    '=> Randomize : add this before you call the Rnd function to obtain completely random values\n    Randomize\n    \n    'Random whole number between 1 and 50 :\n    random_number = Int(50 * Rnd) + 1\n    \n    MsgBox (random_number)\n    \nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Inventor Add In Template error (\"call \"%VS100COMNTOOLS%vsvars32&qu\n                    ", "solution": ["call \"%VS140COMNTOOLS%vsvars32\" mt.exe", "<PostBuildEvent>call \"%25VS110COMNTOOLS%25vsvars32\"\n\t\t\tmt.exe -manifest \"$(ProjectDir)$projectname$.X.manifest\" -outputresource:\"$(TargetPath)\";#2</PostBuildEvent>"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Excel VBA to export a value from a cell to iProperties?\n                    ", "solution": [], "author": "Cody.Redding"},
{"created at": [], "solution Title": "\n                        Re: change the size and/orcolor of wire points so i can easily see it in the pat\n                    ", "solution": [], "author": "Jon.Dean"},
{"created at": [], "solution Title": "\n                        Re: Help add and get Attribute with iLogic\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "Document", " = ", "ThisDoc", ".", "Document", "\n\n", "Dim", " ", "MyAttribSet", " ", "As", " ", "AttributeSet", " = ", "oDoc", ".", "AttributeSets", ".", "Add", "(", "\"MyAttributeSet\"", ")\n ", "'this will give an error if it already exists!", "\n\n", "Dim", " ", "MyAttribName", " ", "As", " ", "Attribute", " = ", "MyAttribSet", ".", "Add", "(", "\"Name\"", ", ", "ValueTypeEnum", ".", "kStringType", ", ", "\"filename\"", ")\n ", "'this will give an error if it already exists!"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: How to exit a rule?\n                    ", "solution": ["Public", " ", "Class", " ", "CancelButton", "\n\t", "Dim", " ", "Cancel", " ", "As", " ", "Boolean", "\n\t", "Sub", " ", "Main", "\n\t\t", "SharedVariable", "(", "\"Cancel\"", ") = ", "True", "\n\t", "End", " ", "Sub", "\n", "End", " ", "Class", "iLogicVb", ".", "RunExternalRule", "(", "\"Cancel\"", ")\n", "If", " ", "SharedVariable", "(", "\"Cancel\"", ") = ", "True", " ", "Then", " ", "SharedVariable", "(", "\"Cancel\"", ") = ", "False", "\n", "iLogicForm", ".", "ShowGlobal", "(", "\"Cancel\"", ", ", "FormMode", ".", "NonModal", ")", "If", " ", "SharedVariable", "(", "\"Cancel\"", ") = ", "True", " ", "Then", " ", "GoTo", " ", "EndRule"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Determine size and position of the nth element in a hole pattern\n                    ", "solution": ["Sub Main()\n    Dim oDoc As PartDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As PartComponentDefinition\n    oDef = oDoc.ComponentDefinition\n    \n    Dim oPatternFeature As RectangularPatternFeature\n    oPatternFeature = oDef.Features.RectangularPatternFeatures.Item(1)\n    \n    Dim i As Integer\n    \n    \n    Dim oParantFeature As HoleFeature\n    For Each oParantFeature In oPatternFeature.ParentFeatures\n        i = i + 1\n        Dim oSize As Double\n        Dim x1 As Double\n        Dim y1 As Double\n        Dim z1 As Double\n        Dim j As Integer\n        Dim cnt As Integer\n        Dim dist As Double\n        Dim oFeatdim As FeatureDimension\n        For Each oFeatdim In oPatternFeature.FeatureDimensions\n            If oFeatdim.DimensionType = kRectangularCountFeatureDimension Then\n                cnt = oFeatdim.Parameter.ModelValue\n            ElseIf oFeatdim.DimensionType = kLinearFeatureDimension Then\n                dist = oFeatdim.Parameter.ModelValue\n            End If\n        Next\n        \n        MessageBox.Show (\"Size of Hole\" & i & \" : \" & oParantFeature.HoleDiameter.Expression)\n        MessageBox.Show (\"Position of Hole \" & i & \" are :- X1 : \" & oParantFeature.HoleCenterPoints.Item(1).Geometry3d.X & \" Y1 : \" & oParantFeature.HoleCenterPoints.Item(1).Geometry3d.Y & \" Z1 : \" & oParantFeature.HoleCenterPoints.Item(1).Geometry3d.Z)\n        x1 = oParantFeature.HoleCenterPoints.Item(1).Geometry3d.X\n        y1 = oParantFeature.HoleCenterPoints.Item(1).Geometry3d.Y\n        z1 = oParantFeature.HoleCenterPoints.Item(1).Geometry3d.Z\n         \n        For j = 2 To cnt\n            \n            If oPatternFeature.XDirectionEntity.Geometry.Direction.X = -1 Then\n                x1 = x1 - dist\n                MessageBox.Show (\"Position of Hole \" & i & \" are :- X\" & j & \" : \" & x1 & \" Y\" & j & \" : \" & y1 & \" Z\" & j & \" : \" & z1)\n            ElseIf oPatternFeature.XDirectionEntity.Geometry.Direction.X = 1 Then\n                x1 = x1 + dist\n                MessageBox.Show (\"Position of Hole \" & i & \" are :- X\" & j & \" : \" & x1 & \" Y\" & j & \" : \" & y1 & \" Z\" & j & \" : \" & z1)\n            ElseIf oPatternFeature.XDirectionEntity.Geometry.Direction.Y = 1 Then\n                y1 = y1 + dist\n                MessageBox.Show (\"Position of Hole \" & i & \" are :- X\" & j & \" : \" & x1 & \" Y\" & j & \" : \" & y1 & \" Z\" & j & \" : \" & z1)\n            ElseIf oPatternFeature.XDirectionEntity.Geometry.Direction.Y = -1 Then\n                y1 = y1 - dist\n                MessageBox.Show (\"Position of Hole \" & i & \" are :- X\" & j & \" : \" & x1 & \" Y\" & j & \" : \" & y1 & \" Z\" & j & \" : \" & z1)\n            ElseIf oPatternFeature.XDirectionEntity.Geometry.Direction.Y = 1 Then\n                z1 = z1 + dist\n                MessageBox.Show (\"Position of Hole \" & i & \" are :- X\" & j & \" : \" & x1 & \" Y\" & j & \" : \" & y1 & \" Z\" & j & \" : \" & z1)\n            ElseIf oPatternFeature.XDirectionEntity.Geometry.Direction.Y = -1 Then\n                z1 = z1 - dist\n                MessageBox.Show (\"Position of Hole \" & i & \" are :- X\" & j & \" : \" & x1 & \" Y\" & j & \" : \" & y1 & \" Z\" & j & \" : \" & z1)\n            End If\n        Next\n        \n    Next\n    \nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Extract iProperty information directly from an occurence\n                    ", "solution": ["Sub FindiProperties()\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSS As SelectSet\n    Set oSS = oDoc.SelectSet\n\n    Dim occ As ComponentOccurrence\n    On Error GoTo Exception\n    Set occ = oSS.Item(1)\n    \n    Dim oReferDoc As Document\n    Set oReferDoc = occ.ReferencedDocumentDescriptor.ReferencedDocument\n    \n    Dim oPartNo As String\n    Dim oStockNo As String\n    Dim oDesc As String\n    \n    oPartNo = oReferDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Expression\n    oStockNo = oReferDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Stock Number\").Expression\n    oDesc = oReferDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\").Expression\n    \nException:\n    If Err.Number = 13 Then\n        MsgBox (\"Selected object is not occurrence\")\n    End If\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: When using CCV2ChangeSizeButtonCM, how do you prevent your VBA from continui\n                    ", "solution": [], "author": "shastu"},
{"created at": [], "solution Title": "\n                        Re: iLogic to change the Bom Structure of Suppressed parts.\n                    ", "solution": [], "author": "barnold100"},
{"created at": [], "solution Title": "\n                        Re: Format exposed custom property at Assembly level (iLogic)\n                    ", "solution": ["Dim openDoc As Document\nopenDoc = ThisApplication.ActiveDocument\nDim docFile As Document\nIf openDoc.DocumentType = 12291 Then\n    For Each docFile In openDoc.AllReferencedDocuments\n        If docFile.SubType.Equals(\"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\") Then\n\t\t\n\t\toParam = docFile.ComponentDefinition.Parameters(\"Thickness\")\n\t\t       'docFile.ComponentDefinition.Parameters(\"Thickness\").ExposedAsProperty = True \n\t\t\t   oParam.ExposedAsProperty = True\n\t\t\t   \n\t\t\toFormat=oParam.CustomPropertyFormat 'For some reason or other this line is needed to enable the following formatting'\n\t\t\toFormat.ShowUnitsString=True\n\t\t\toFormat.ShowLeadingZeros=True\n\t\t\toFormat.ShowTrailingZeros = False\n\t\t\toFormat.Precision=Inventor.CustomPropertyPrecisionEnum.kOneDecimalPlacePrecision 'Set one decimal place\n\n\t\tEnd If\n\t\tNext\n\tEnd If"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Inventor + Dynamo Studio\n                    ", "solution": [], "author": "Maskedball"},
{"created at": [], "solution Title": "\n                        Re: Get the number of holes on a part (use Hole command \"From sketch\")\n                    ", "solution": ["Public Sub Getthenumberofholesonapart()\n\nDim a As Application\nSet a = ThisApplication\n\nDim b As PartDocument\nSet b = a.ActiveDocument\n\nDim fe As HoleFeature\n\nMsgBox b.ComponentDefinition.Features.HoleFeatures.Count\nEnd Sub", "Public Sub Getthenumberofholesonapart()\n\nDim a As Application\nSet a = ThisApplication\n\nDim b As PartDocument\nSet b = a.ActiveDocument\n\nDim fe As HoleFeature\n\nMsgBox b.ComponentDefinition.Features.HoleFeatures.Item(1).HoleCenterPoints.Count\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Display Line Numbers\n                    ", "solution": [], "author": "c.stulz"},
{"created at": [], "solution Title": "\n                        Re: see if a part is created by DesignSpring\n                    ", "solution": ["Public Sub seeifapartiscreatedbyDesignSpring()\nDim a As Application\nSet a = ThisApplication\n\nDim b As Document\nSet b = a.ActiveDocument\n\nDim prs As PropertySet\n\nFor Each prs In b.PropertySets\nDebug.Print prs.DisplayName\nNext\n\nIf b.PropertySets.Item(\"FDesign\").DisplayName = \"FDesign\" Then\nMsgBox \"this is a spring created with springdesign\"\nEnd If\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: How to do Zoom process for Constraint placed in Assembly for VBA Project.\n                    ", "solution": ["Sub ZoomToMate()\nDim app As Application\nDim doc As Document\nDim docM As Document\n\nSet app = ThisApplication\nSet doc = app.ActiveDocument\nDim mySelection As MateConstraint\n\n'select the target mate\nSet mySelection = app.CommandManager.Pick(kAllEntitiesFilter, \"Select a mate from the model browser\")\n\n'switch to something that can be zoomed to\ndoc.SelectSet.Select (mySelection.EntityOne)\n\n'run the zoom command\nDim zoomCmd As ControlDefinition\nSet zoomCmd = app.CommandManager.ControlDefinitions(\"AppZoomSelectCmd\")\nzoomCmd.Execute\n\nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic or vba print screenshot image\n                    ", "solution": [], "author": "jtonybazy"},
{"created at": [], "solution Title": "\n                        Re: Add additional symbols to edit dimension dialog box\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Create Inventor App using only free tools (for internal use)\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Can't call the function to get the tight bounding box\n                    ", "solution": ["Public Sub TestTightBoundingBox()\n    Dim invApp As Inventor.Application = GetObject(, \"Inventor.Application\")\n    ' Have a body selected.\n    Dim body As SurfaceBody\n    body = invApp.CommandManager.Pick(SelectionFilterEnum.kPartBodyFilter, \"Select the body.\")\n\n    ' Call the function to get the tight bounding box.\n    Dim bndBox As Box = calculateTightBoundingBox(body)\n\n    ' Draw the bounding box using a 3D sketch.\n    Dim partDoc As PartDocument = invApp.ActiveDocument\n    Dim sk As Sketch3D = partDoc.ComponentDefinition.Sketches3D.Add()\n    Dim lines As SketchLines3D = sk.SketchLines3D\n\n    Dim tg As TransientGeometry = invApp.TransientGeometry\n\n    Dim minXYZ As Point = bndBox.MinPoint\n    Dim minXYmaxZ As Point = tg.CreatePoint(bndBox.MinPoint.X, bndBox.MinPoint.Y, bndBox.MaxPoint.Z)\n    Dim minXmaxYZ As Point = tg.CreatePoint(bndBox.MinPoint.X, bndBox.MaxPoint.Y, bndBox.MaxPoint.Z)\n    Dim minXZmaxY As Point = tg.CreatePoint(bndBox.MinPoint.X, bndBox.MaxPoint.Y, bndBox.MinPoint.Z)\n\n    Dim maxXYZ As Point = bndBox.MaxPoint\n    Dim maxXYminZ As Point = tg.CreatePoint(bndBox.MaxPoint.X, bndBox.MaxPoint.Y, bndBox.MinPoint.Z)\n    Dim maxXZminY As Point = tg.CreatePoint(bndBox.MaxPoint.X, bndBox.MinPoint.Y, bndBox.MaxPoint.Z)\n    Dim maxXminYZ As Point = tg.CreatePoint(bndBox.MaxPoint.X, bndBox.MinPoint.Y, bndBox.MinPoint.Z)\n\n    lines.AddByTwoPoints(minXYZ, minXYmaxZ)\n    lines.AddByTwoPoints(minXYZ, minXZmaxY)\n    lines.AddByTwoPoints(minXZmaxY, minXmaxYZ)\n    lines.AddByTwoPoints(minXYmaxZ, minXmaxYZ)\n\n    lines.AddByTwoPoints(maxXYZ, maxXYminZ)\n    lines.AddByTwoPoints(maxXYZ, maxXZminY)\n    lines.AddByTwoPoints(maxXYminZ, maxXminYZ)\n    lines.AddByTwoPoints(maxXZminY, maxXminYZ)\n\n    lines.AddByTwoPoints(minXYZ, maxXminYZ)\n    lines.AddByTwoPoints(minXYmaxZ, maxXZminY)\n    lines.AddByTwoPoints(minXmaxYZ, maxXYZ)\n    lines.AddByTwoPoints(minXZmaxY, maxXYminZ)\nEnd Sub\n\n\n' Calculates a tight bounding box around the input body.  An optional\n' tolerance argument is available.  This specificies the tolerance in\n' centimeters.  If not provided the best existing display mesh is used.\nPublic Function calculateTightBoundingBox(body As SurfaceBody, Optional Tolerance As Double = 0) As Box\n    Try\n        Dim vertCount As Integer\n        Dim facetCount As Integer\n        Dim vertCoords() As Double = {}\n        Dim normVectors() As Double = {}\n        Dim vertInds() As Integer = {}\n\n        ' If the tolerance is zero, use the best display mesh available.\n        If Tolerance <= 0 Then\n            ' Get the best display mesh available.\n            Dim tolCount As Long\n            Dim tols() As Double = {}\n            Call body.GetExistingFacetTolerances(tolCount, tols)\n            Dim bestTol As Double\n            bestTol = tols(0)\n            For i As Integer = 1 To tolCount - 1\n                If tols(i) < bestTol Then\n                    bestTol = tols(i)\n                End If\n            Next\n\n            body.GetExistingFacets(bestTol, vertCount, facetCount, vertCoords, normVectors, vertInds)\n        Else\n            ' Calculate a new mesh based on the input tolerance.\n            body.CalculateFacets(Tolerance, vertCount, facetCount, vertCoords, normVectors, vertInds)\n        End If\n\n        Dim tg As TransientGeometry = body.Application.TransientGeometry\n\n        ' Calculate the range of the mesh.\n        Dim smallPnt As Point = tg.CreatePoint(vertCoords(0), vertCoords(1), vertCoords(2))\n        Dim largePnt As Point = tg.CreatePoint(vertCoords(0), vertCoords(1), vertCoords(2))\n        For i As Integer = 1 To vertCount - 1\n            Dim vertX As Double = vertCoords(i * 3)\n            Dim vertY As Double = vertCoords(i * 3 + 1)\n            Dim vertZ As Double = vertCoords(i * 3 + 2)\n\n            If vertX < smallPnt.X Then\n                smallPnt.X = vertX\n            End If\n\n            If vertY < smallPnt.Y Then\n                smallPnt.Y = vertY\n            End If\n\n            If vertZ < smallPnt.Z Then\n                smallPnt.Z = vertZ\n            End If\n\n            If vertX > largePnt.X Then\n                largePnt.X = vertX\n            End If\n\n            If vertY > largePnt.Y Then\n                largePnt.Y = vertY\n            End If\n\n            If vertZ > largePnt.Z Then\n                largePnt.Z = vertZ\n            End If\n        Next\n\n        ' Create and return a Box as the result.\n        Dim newBox As Box = tg.CreateBox()\n        newBox.MinPoint = smallPnt\n        newBox.MaxPoint = largePnt\n        Return newBox\n    Catch ex As Exception\n        Return Nothing\n    End Try\nEnd Function", "Public Sub DimensionComponentSimple()\ndim ThisApplicationInv As Inventor.Application   ", "Try\n\n        Dim oInventorDoc As Inventor.Document\n        'oInventorDoc = ThisApplicationInv.ActiveDocument\n        oInventorDoc = ThisApplicationInv.ActiveEditDocument\n\n        \n        If oInventorDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Or oInventorDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n\n            Dim b As ComponentDefinition = Nothing\n\n            If oInventorDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n                Dim OinventorDocToBeDim As Inventor.AssemblyDocument\n                OinventorDocToBeDim = oInventorDoc\n                b = OinventorDocToBeDim.ComponentDefinition\n               End If\n\n            If oInventorDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n                Dim OinventorDocToBeDim As Inventor.PartDocument\n                OinventorDocToBeDim = oInventorDoc\n                b = OinventorDocToBeDim.ComponentDefinition\n                'b = CType(oInventorDoc, Inventor.PartDocument).ComponentDefinition", "            End If\n\n\n            Dim c As Box\n            c = b.RangeBox\n\n            Dim dmax As Point\n            dmax = c.MaxPoint\n\n            Dim dmin As Point\n            dmin = c.MinPoint\n\n            Dim dX As Decimal\n            Dim dY As Decimal\n            Dim dZ As Decimal\n\n            Dim strLENGTH As Single\n            Dim strWIDTH As Single\n            Dim strTHICKNESS As Single\n\n            dX = (dmax.X - dmin.X) * 10\n            dY = (dmax.Y - dmin.Y) * 10\n            dZ = (dmax.Z - dmin.Z) * 10\n\n            dX = Math.Round(dX, DocPrec)\n            dY = Math.Round(dY, DocPrec)\n            dZ = Math.Round(dZ, DocPrec)\n\n            Try\n                \n                If dX = dY Then\n                    'MsgBox(\"x\")\n                    strLENGTH = dX '& \" mm\"\n                    strWIDTH = dY\n                    strTHICKNESS = dZ\n\n                End If\n\n                If dX = dZ Then\n                    strLENGTH = dX '& \" mm\"\n                    strWIDTH = dZ '& \" mm\"\n                    strTHICKNESS = dY\n\n                End If\n\n                If dZ = dY Then\n                    'MsgBox(\"x\")\n                    strLENGTH = dZ '& \" mm\"\n                    strWIDTH = dY\n                    strTHICKNESS = dX\n\n                End If\n               \n\n                If dX > dY And dX > dZ Then\n                    'MsgBox \"x\"\n                    strLENGTH = dX\n                    If dY > dZ Then\n                        strWIDTH = dY\n                        strTHICKNESS = dZ\n                    Else\n                        strWIDTH = dZ\n                        strTHICKNESS = dY\n                    End If\n                End If\n            Catch ex As Exception\n\n            End Try\n\n            If dY > dZ And dY > dX Then\n                'MsgBox \"y\"\n                strLENGTH = dY\n\n                If dZ > dX Then\n                    strWIDTH = dZ\n                    strTHICKNESS = dX\n                Else\n                    strWIDTH = dX\n                    strTHICKNESS = dZ\n                End If\n            End If\n\n            If dZ > dX And dZ > dY Then\n                'MsgBox \"z\"\n                strLENGTH = dZ\n                If dX > dY Then\n                    strWIDTH = dX\n                    strTHICKNESS = dY\n                Else\n                    strWIDTH = dY\n                    strTHICKNESS = dX\n                End If\n            End If\n\n            Dim LENGTH As [Property]\n            Dim WIDTH As [Property]\n            Dim THICKNESS As [Property]\n            Dim StockNumber As [Property]\n            Dim RoutineDimensioned As [Property]\n            Dim DimensionDirty As Boolean = False\n\n            Try\n                LENGTH = oInventorDoc.PropertySets.Item(\"User Defined Properties\").Add(\"\", \"LENGTH\")\n                If Not LENGTH.Expression = strLENGTH & \" mm\" Then '(dmax.X - dmin.X) * 10 & \" mm\"\n                    LENGTH.Expression = strLENGTH & \" mm\"\n                    DimensionDirty = True\n                End If\n            Catch ex As Exception\n                LENGTH = oInventorDoc.PropertySets.Item(\"User Defined Properties\").Item(\"LENGTH\")\n                If Not LENGTH.Expression = strLENGTH & \" mm\" Then '(dmax.X - dmin.X) * 10 & \" mm\"\n                    LENGTH.Expression = strLENGTH & \" mm\"\n                    DimensionDirty = True\n                End If\n            End Try\n            Try\n                WIDTH = oInventorDoc.PropertySets.Item(\"User Defined Properties\").Add(\"\", \"WIDTH\")\n                If Not WIDTH.Expression = strWIDTH & \" mm\" Then '(dmax.Y - dmin.Y) * 10 & \" mm\"\n                    WIDTH.Expression = strWIDTH & \" mm\"\n                    DimensionDirty = True\n                End If\n            Catch ex As Exception\n                WIDTH = oInventorDoc.PropertySets.Item(\"User Defined Properties\").Item(\"WIDTH\")\n                If Not WIDTH.Expression = strWIDTH & \" mm\" Then '(dmax.Y - dmin.Y) * 10 & \" mm\"\n                    WIDTH.Expression = strWIDTH & \" mm\"\n                    DimensionDirty = True\n                End If\n            End Try\n\n            Try\n                THICKNESS = oInventorDoc.PropertySets.Item(\"User Defined Properties\").Add(\"\", \"THICKNESS\")\n                If Not THICKNESS.Expression = strTHICKNESS & \" mm\" Then '(dmax.z - dmin.z) * 10 & \" mm\"\n                    THICKNESS.Expression = strTHICKNESS & \" mm\"\n                    DimensionDirty = True\n                End If\n            Catch ex As Exception\n                THICKNESS = oInventorDoc.PropertySets.Item(\"User Defined Properties\").Item(\"THICKNESS\")\n                If Not THICKNESS.Expression = strTHICKNESS & \" mm\" Then '(dmax.z - dmin.z) * 10 & \" mm\"\n                    THICKNESS.Expression = strTHICKNESS & \" mm\"\n                    DimensionDirty = True\n                End If\n            End Try\n\n            Try\n                StockNumber = oInventorDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Stock Number\")\n\n                If Not StockNumber.Expression = \"=<Width> x <Thickness>\" Then\n                    StockNumber.Expression = \"=<Width> x <Thickness>\"\n                End If\n\n            Catch ex As Exception\n                MsgBox(\"Stock Number Error: \" & ex.Message)\n            End Try\n\n            'Only show message if needed on dirty property\n            If oInventorDoc.Dirty = True Then\n\n                If DimensionDirty = True Then\n\n                    msgbox = \"Dimensions of \" & oInventorDoc.DisplayName & \" :\" & LENGTH.Expression & \" x \" & WIDTH.Expression & \" x \" & THICKNESS.Expression\n                End If\n            End If\n\n        End If\n            Catch ex As Exception\n\n        MsgBox(\"Error Dimensioning: \" & ex.Message)\n    End Try\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic Save as rule creating .dwg file in zipped folder\n                    ", "solution": [], "author": "Mark.Lancaster"},
{"created at": [], "solution Title": "\n                        Re: Model tree instance name does not match file name\n                    ", "solution": [], "author": "cadmanagershat"},
{"created at": [], "solution Title": "\n                        Re: Drawing properties to referenced models properties\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nDim doc As DrawingDocument = app.ActiveDocument\nDim docM As Document\n\nFor Each oView In doc.ActiveSheet.DrawingViews 'look at each view\n\tIf oView.ParentView Is Nothing Then 'if it's a base view\n\t\tdocM = oView.ReferencedFile.ReferencedDocument 'grab the base component\n                'set the iProperty\n\t\tdocName = Right(docM.FullDocumentName, Len(docM.FullDocumentName) - InStrRev(docM.FullDocumentName,\"\\\"))\n\t\t'MessageBox.Show(docName, \"Title\")\n\n\t\tiProperties.Value(docName, \"Custom\", \"Drawing\") = iProperties.Value(\"Project\", \"Part Number\")\n\tEnd If\nNext"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Populating default parameter with newly created parameter using iLogic\n                    ", "solution": ["For Each param In ThisApplication.ActiveDocument.ComponentDefinition.Parameters\n\tIf param.Name = \"d1\" Then\n\t\tParameter(\"O_L\") = d1\n\tEnd If\n\tIf param.Name = \"d2\" Then\n\t\tParameter(\"O_W\") = d2\n\tEnd If\nNext\n\n"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Extract Occurrence Orientation Angle to Assembly Origin Plane\n                    ", "solution": ["Dim oDoc = ThisAssembly.Document \n\nDim oDef = oDoc.ComponentDefinition \n\nDim oAssyPlane = oDef.WorkPlanes.Item(\"YZ Plane\")\n\n'Assuming that first occurrence is used for angle measurement\nDim occ = oDef.Occurrences.Item(1) \n\nDim occDef = occ.Definition \n\nDim occPlane = occDef.WorkPLanes.Item(\"YZ Plane\")\n\nDim oPlaneProxy As WorkPlaneProxy \nocc.CreateGeometryProxy(occPlane, oPlaneProxy)\n\nDim oTool As MeasureTools\noTool = ThisApplication.MeasureTools \n\nDim angle As Double\n'Angle in radians\nangle = oTool.GetAngle(oAssyPlane, oPlaneProxy)\n\n'Angle in deg \nangle = (angle * 180) / 3.14\n\nMessageBox.Show(\"Angle : \" & Format(angle, 0#) & \" in deg\")\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Write iPropertie from .idw to part\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: I cannot use the latest ApprenticeServer\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: If Then Rectangler Pattern\n                    ", "solution": ["If Lengte < 800 Then\n\tAantal_Gaten = 4\nElseIf Lengte > 801 and Lengte < 1800 Then\n\tAantal_Gaten = 5\nElseIf Lengte >= 1800 Then\n\tAantal_Gaten = 6\nEnd If\n\niLogicVb.UpdateWhenDone = True", "If Lengte < 800 Then 'lower range\n\tAantal_Gaten = 4\nElseIf Lengte >= 1800 Then 'upper range\n\tAantal_Gaten = 6\nElse 'mid range\n\tAantal_Gaten = 5\nEnd If\n\niLogicVb.UpdateWhenDone = True"], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: iLogic turn off occurrence in a rectangular pattern (in an area that is movi\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nDim doc As AssemblyDocument = app.ActiveDocument\nDim results As InterferenceResults\nDim transObj As TransientObjects = app.TransientObjects\nDim objCol1 As ObjectCollection = transObj.CreateObjectCollection\nDim objCol2 As ObjectCollection = transObj.CreateObjectCollection\nDim compDef As AssemblyComponentDefinition = doc.ComponentDefinition\nConst ClearanceZone As String = \"clearanceZone:1\" 'rename to meet your clearance zone\n\nDim ZoneObj As ComponentOccurrence = compDef.Occurrences.ItemByName(ClearanceZone)\nZoneObj.Visible = True 'can only detect if part is visible\n\n'Add all parts from patterns to Collection - You could make this a sub if you want\nFor Each elem In compDef.OccurrencePatterns.Item(\"Component Pattern 4:1\").OccurrencePatternElements\n For Each compOcc In elem.Occurrences\n  compOcc.Excluded = False 'bring back parts that may have been removed\n  objCol1.Add(compOcc)\n Next\nNext\n'same as above for another pattern\nFor Each elem In compDef.OccurrencePatterns.Item(\"Component Pattern 5:1\").OccurrencePatternElements \n For Each compOcc In elem.Occurrences\n  compOcc.Excluded = False\n  objCol1.Add(compOcc)\n Next\nNext\n\n'add the clearance zone\nobjCol1.Add(ZoneObj)\n\nDim IntResults As InterferenceResults\nDim result As InterferenceResult\nIntResults = compDef.AnalyzeInterference(objCol1)\n'MessageBox.Show(\"Results count = \" & IntResults.Count, \"Title\")\nFor Each result In IntResults\n 'check if the interference is with the cut zone \n If result.OccurrenceOne.Name = ClearanceZone Then\n  objCol2.Add(result.OccurrenceTwo) 'add to collection if found\n  'MessageBox.Show(result.OccurrenceTwo.Name, \"Title\")\n End If\n 'same as above just checking the other direction\n If result.OccurrenceTwo.Name = ClearanceZone Then\n  objCol2.Add(result.OccurrenceOne)\n  'MessageBox.Show(result.OccurrenceOne.Name, \"Title\")\n End If\nNext\n\n'remove found parts\nFor Each Occ In objCol2\n 'MessageBox.Show(Occ.Name & \" will be excluded\", \"Title\")\n Occ.Excluded = True\nNext\n\nZoneObj.Visible = False 'rehide zone \nInventorVb.DocumentUpdate() 'update part"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: ILogic Multi Value List Naming\n                    ", "solution": ["If SAMSUNG_SIZE = 32 Then\n\nd0= UN32N5300_WIDTH\n\nd1= UN32N5300_HEIGHT\n\nd2= UN32N5300_DEPTH\n\nThisDoc.Document.DisplayName = \"UN32N5300_Monitor\"\n\n......"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Switch Hole Feature Types with iLogic via Form\n                    ", "solution": ["Dim oTappedHole2 As TaperedThreadInfo\noTappedHole2 = oCompDef.Features.HoleFeatures.CreateTaperedTapInfo(True, \"NPT\", \"1/4\")", "Dim oPartDoc As PartDocument\n        oPartDoc = ThisDoc.Document\n                \nDim oCompDef As PartComponentDefinition\n\toCompDef = oPartDoc.ComponentDefinition\n\nDim oHoleFeature As HoleFeature\n\toHoleFeature = oPartDoc.ComponentDefinition.Features.HoleFeatures.Item(\"Hole1\")\n\n'Dim oTappedHole1 As HoleTapInfo\n'oTappedHole1 = oCompDef.Features.HoleFeatures.CreateTapInfo(True, \"ANSI Unified Screw Threads\", \"1/4-20 UNC\", \"2B\", True)\n\nDim oTappedHole2 As TaperedThreadInfo\n'oTappedHole2 = oCompDef.Features.HoleFeatures.CreateTaperedTapInfo(True, \"NPT\", \"1/4\")\n\nSelect Case HoleSizeFractional\nCase = \"1/4\"\n\tHoleSizeDecimal = 0.25\nCase = \"3/8\"\n\tHoleSizeDecimal = 0.375\nEnd Select\n\nSelect Case HoleType\nCase \"THRU\"\n\toHoleFeature.Tapped = False\n\toHoleFeature.SetDrilled()\n\toHoleFeature.HoleDiameter.Expression = HoleSizeDecimal\nCase \"TAPER TAPPED\"\n\toTappedHole2 = oCompDef.Features.HoleFeatures.CreateTaperedTapInfo(True, \"NPT\", HoleSizeFractional)\n\toHoleFeature.TapInfo = oTappedHole2\nEnd Select\n\u00a0"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: create a list of part descriptions\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Change Caption from Controls in VBA\n                    ", "solution": ["Dim app As Application", "Set app = ThisApplication", "app.VBE.VBProjects(\"DocumentProject\").VBComponents(\"UserForm1\").Properties(\"Caption\") = \"acb\"\napp.VBE.VBProjects(\"DocumentProject\").VBComponents(\"UserForm1\").Designer.Controls(\"CommandButton1\").Caption = \"XXX\""], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: How to get current position of occurence in assembly\n                    ", "solution": [], "author": "Captain_Price"},
{"created at": [], "solution Title": "\n                        Re: titleblock, prompted entry, sheet number\n                    ", "solution": ["Function", " ", "GetStatus", "(", "oSheet", " ", "As", " ", "Sheet", ") ", "As", " ", "String", "\n", "Dim", " ", "Status", " ", "As", " ", "String", "\n", "If", " ", "oSheet", ".", "RevisionTables", ".", "Count", " > 0 \n    ", "Dim", " ", "oTable", " ", "As", " ", "RevisionTable", " = ", "oSheet", ".", "RevisionTables", ".", "Item", "(1)\n    ", "Dim", " ", "oRows", " ", "As", " ", "RevisionTableRows", " = ", "oTable", ".", "RevisionTableRows", "\n    ", "Dim", " ", "oRow", " ", "As", " ", "RevisionTableRow", " = ", "oRows", ".", "Item", "(", "oRows", ".", "Count", ")\n    ", "oSheetStatus", " = ", "oRow", ".", "Item", "(3).", "Text", "\n", "End", " ", "If", "\n", "Return", " ", "oSheetStatus", "\n", "End", " ", "Function"], "author": "marcin.bargiel"},
{"created at": [], "solution Title": "\n                        Re: ThisApplication In VB.Net COM application\n                    ", "solution": ["Try ' Try to get an active instance of Inventor\n        Try\n            m_inventorApp = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n        Catch ' If not active, create a new\n            ' Inventor session\n            Dim inventorAppType As Type =  System.Type.GetTypeFromProgID(\"Inventor.Application\")", "\n            m_inventorApp = System.Activator.CreateInstance(inventorAppType)\n\n            'Must be set visible explicitly\n            m_inventorApp.Visible = True\n        End Try\n    Catch\n        System.Windows.Forms.MessageBox.Show (\"Error: couldn't create Inventor instance\")\n    End Try\n", "Public ThisApplication As Inventor.Application = m_inventorApp"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: OPTIONS in DWGAddIn.SaveCopyAs\n                    ", "solution": ["Sub TestDWFPrintSheetList()\nCall DWFPrintSheetList(\"1,5,9-12,15-17\")\nEnd Sub\n\nSub DWFPrintSheetList(SheetRange As String)\n    ' Get the DWF translator Add-In.\n    Dim DWFAddIn As TranslatorAddIn\n    Set DWFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD95-2F4D-42CE-8BE0-8AEA580399E4}\")\n\n    'Set a reference to the active document (the document to be published).\n    Dim oDocument As Document\n    Set oDocument = ThisApplication.ActiveDocument\n\n    Dim oContext As TranslationContext\n    Set oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = kFileBrowseIOMechanism\n\n    ' Create a NameValueMap object\n    Dim oOptions As NameValueMap\n    Set oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n    ' Create a DataMedium object\n    Dim oDataMedium As DataMedium\n    Set oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n    \n    Dim Ranges() As String\n    Dim CountRanges As Integer\n    Dim FinalRanges() As String\n    \n    Ranges = Split(SheetRange, \",\") 'break string at any commas\n    For i = 0 To UBound(Ranges) 'loop thru each string \n        If Ranges(i) Like \"*-*\" Then 'check for range of sheets 'break ranges into separate sheets\n            LeftString = Left(Ranges(i), InStr(1, Ranges(i), \"-\") - 1)\n            RightString = Right(Ranges(i), Len(Ranges(i)) - InStr(1, Ranges(i), \"-\"))\n            For j = CInt(LeftString) To CInt(RightString)\n                CountRanges = CountRanges + 1\n                ReDim Preserve FinalRanges(CountRanges)\n                FinalRanges(UBound(FinalRanges)) = j\n            Next\n        Else 'or just copy single sheets\n            CountRanges = CountRanges + 1\n            ReDim Preserve FinalRanges(CountRanges)\n            FinalRanges(UBound(FinalRanges)) = Ranges(i)\n        End If\n    Next\n    \n    ' Check whether the translator has 'SaveCopyAs' options\n    If DWFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\n        oOptions.Value(\"Launch_Viewer\") = 1\n\n        ' Other options...\n        'oOptions.Value(\"Publish_All_Component_Props\") = 1\n        'oOptions.Value(\"Publish_All_Physical_Props\") = 1\n        'oOptions.Value(\"Password\") = 0\n\n        If TypeOf oDocument Is DrawingDocument Then\n\n            ' Drawing options\n            oOptions.Value(\"Publish_Mode\") = kCustomDWFPublish\n            oOptions.Value(\"Publish_All_Sheets\") = 0\n\n            ' The specified sheets will be ignored if\n            ' the option \"Publish_All_Sheets\" is True (1)\n            Dim oSheets As NameValueMap\n            Set oSheets = ThisApplication.TransientObjects.CreateNameValueMap\n\n            \n            For i = 1 To UBound(FinalRanges) 'loop thru all listed sheets\n                Dim oSheetOtherOptions As NameValueMap\n                Set oSheetOtherOptions = ThisApplication.TransientObjects.CreateNameValueMap\n                Call oSheetOtherOptions.Add(\"Name\", \"Sheet:\" & FinalRanges(i))\n                If i = 1 Then\n                    Call oSheetOtherOptions.Add(\"3DModel\", True) 'I always have first model included\n                Else\n                    Call oSheetOtherOptions.Add(\"3DModel\", False)\n                End If\n                oSheets.Value(\"Sheet\" & i) = oSheetOtherOptions\n            Next\n\n            'Set the sheet options object in the oOptions NameValueMap\n            oOptions.Value(\"Sheets\") = oSheets\n        End If\n\n    End If\n\n    'Set the destination file name\n    oDataMedium.FileName = \"c:\\temptest.dwf\"\n\n    'Publish document.\n    Call DWFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nEnd Sub", "DWGAddIn", " = ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"{C24E3AC4-122E-11D5-8E91-0010B541CD80}\"", ")", "Sub", " ", "Main", "()\n\t\n\t", "Dim", " ", "SheetRange", " ", "As", " ", "String", " = ", "InputBox", "(", "\"Please enter the range of sheets you want to export.\"", " & ", "vbLf", " & _\n\t", "\"You can use these input types:\"", " & ", "vbLf", " & ", "\"  ' 1 ' ,  ' 1-99 ' \"", ", ", "\"Sheet range\"", ", ", "\"1-99\"", ")\n\t", "If", " ", "SheetRange", " = ", "vbNullString", " ", "Then", " ", "Exit", " ", "Sub", "\n\t", "Dim", " ", "SPL", " ", "As", " ", "Integer", " = ", "InStr", "(", "SheetRange", ", ", "\"-\"", ")\n\t", "Dim", " ", "L1", " ", "As", " ", "Integer", "\n\t", "Dim", " ", "L2", " ", "As", " ", "Integer", "\n\t", "If", " ", "SPL", " > 0 ", "Then", "\n\t\t", "L1", " = ", "Val", "(", "Left", "(", "SheetRange", ", ", "SPL", "))\n\t\t", "L2", " = ", "Val", "(", "Mid", "(", "SheetRange", ", ", "SPL", " + 1))\n\t", "Else", "\n\t\t", "L1", " = ", "Val", "(", "SheetRange", ")\n\t\t", "L2", " = ", "Val", "(", "SheetRange", ")\n\t", "End", " ", "If", "\n\t\n", "oPath", " = ", "ThisDoc", ".", "Path", "\n", "oFileName", " = ", "ThisDoc", ".", "FileName", "(", "False", ") \n", "DWGAddIn", " = ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"{C24E3AC4-122E-11D5-8E91-0010B541CD80}\"", ")  \n", "oDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "oContext", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " = ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "oDataMedium", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n", "oDrawing", " = ", "ThisDoc", ".", "Document", "\n", "oSheet", " = ", "ThisDrawing", ".", "Document", ".", "ActiveSheet", "\n\n", "'step through each drawing sheet", "\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDrawing", ".", "Sheets", "\n", "'find the seperator in the sheet name:number", "\n", "lPos", " = ", "InStr", "(", "oSheet", ".", "Name", ", ", "\":\"", ")\n", "'find the number of characters in the sheet name", "\n", "sLen", " = ", "Len", "(", "oSheet", ".", "Name", ")\n", "'find the sheet name", "\n", "sSheetName", " = ", "Left", "(", "oSheet", ".", "Name", ", ", "lPos", " -1)\n", "'find the sheet number", "\n", "iSheetNumber", " = ", "Right", "(", "oSheet", ".", "Name", ", ", "sLen", " - ", "lPos", ")\n\n", "'get DWG target folder path", "\n", "oFolder", " = ", "Left", "(", "oPath", ", ", "InStrRev", "(", "oPath", ", ", "\"\\\"", ")) & ", "\"DWG\"", "\n", "'Check for the DWG folder and create it if it does not exist", "\n", "If", " ", "Not", " ", "System", ".", "IO", ".", "Directory", ".", "Exists", "(", "oFolder", ") ", "Then", "\n", "System", ".", "IO", ".", "Directory", ".", "CreateDirectory", "(", "oFolder", ")\n", "End", " ", "If", "\n\n", "'Set file name", "\n", "oDataMedium", ".", "FileName", " = ", "oFolder", " & ", "\"\\\"", " & ", "iProperties", ".", "Value", "(", "\"Summary\"", ", ", "\"Subject\"", ") & ", "\" XXX \"", " & ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", ") & ", "\"-\"", " & ", "iSheetNumber", " & ", "\"-\"", " & ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Stock Number\"", ") & ", "\" \"", " & ", "sSheetName", " & ", "\" REV \"", "  & ", "\" \"", " & ", "iProperties", ".", "Value", "(", "\"Status\"", ", ", "\"Status\"", ") & ", "\".dwg\"", "\n\n\t", "If", " ", "L1", " = ", "L2", " ", "And", " ", "iSheetNumber", " = ", "L1", " ", "Then", " \n\t\t", "ActiveSheet", " = ", "ThisDrawing", ".", "Sheet", "(", "oSheet", ".", "Name", ")\n\t\t", "DWGAddIn", ".", "SaveCopyAs", "(", "oDocument", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")\n\t", "End", " ", "If", "\n\t\n\t", "'if range selected", "\n\t", "If", " ", "L1", "<", "L2", " ", "And", " ", "iSheetNumber", " >= ", "L1", " ", "Then", "\n\t\t", "ActiveSheet", " = ", "ThisDrawing", ".", "Sheet", "(", "oSheet", ".", "Name", ")\n\t\t", "DWGAddIn", ".", "SaveCopyAs", "(", "oDocument", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")\n\t\t", "'finish loop when below conditon occures", "\n\t\t", "If", " ", "iSheetNumber", " = ", "L2", " ", "Then", " ", "Exit", " ", "For", "\n\t", "End", " ", "If", "\n\n", "Next", "\n", "End", " ", "Sub", "\n\n\n\n", "\n"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Update hole table style after style library update\n                    ", "solution": ["Sub Main()\n\t' Is the currently active document a drawing?\n\tTry\n\toDoc = ThisApplication.ActiveDocument\n\tCatch\n\t\tMsgBox(\"This rule can only be run in a drawing document!\", 64, \"Not a Drawing Document\")\n\t\tReturn\n\tEnd Try\n\n\t' Update Style Library\n\tiLogicVb.UpdateWhenDone = True\n\toDoc = ThisDoc.Document\n\toStyles = oDoc.StylesManager.Styles\n\t\tFor Each oStyle As Style In oStyles\n\t\t\tIf Not oStyle.UpToDate Then\n\t\t\t\toStyle.UpdateFromGlobal\n\t\t\tEnd If \n\t\t\tNext\n\t\n\t\t' Define stuff...\n\t\tDim oSheets As Inventor.Sheets = oDoc.Sheets\n\t\tDim oSheet As Sheet = Nothing\n\t\tDim oTable As HoleTable\n\t\tDim HoleTableNo As Integer = 1\n\t\tDim SheetNo As Integer = 1\n\t\t\n\t\t\tDim oSM As DrawingStylesManager\n\t\t\toSM = ThisApplication.ActiveDocument.StylesManager\n\t\t\t\n\t\t\tDim oPHTS As HoleTableStyle\n\t\t\toPHTS = oSM.HoleTableStyles.Item(\"Punch Table (ANSI)\")\n\t\t\t\n\t\t\tDim oSHTS As HoleTableStyle\n\t\t\toSHTS = oSM.HoleTableStyles.Item(\"Hole Table (ANSI)\")\n\t\t\n\t\t\n\t\t' Loop through all sheets\n\t\tFor Each oSheet In oSheets\n\t\t\t\n\t\t\t' Loop through all holetables\n\t\t\tFor Each oTable In oSheet.HoleTables\n\n\t\t\tDim bExists As Boolean\n\t\t\tbExists = PunchExists(oTable.HoleTableColumns)\n    \n\t\t\tIf bExists Then\n\t\t\toTable.Style = oSHTS\n\t\t\toTable.Style = oPHTS\n\t\t\tElse\n\t\t\toTable.Style = oPHTS\n\t\t\toTable.Style = oSHTS\n    End If\n\n\t\t\tHoleTableNo += 1\n\t\tNext\n\tNext\n\n\t' Are there any hole tables on all sheets?\n\tIf HoleTableNo = 1 Then\n\t\tMsgBox(\"There are no hole tables in this drawing. Please place hole tables and run this again.\", 64,  \"No Hole Tables\")\n\t\tExit Sub\n\tEnd If\n\n\tMessageBox.Show(\"Hole Table Update Complete\")\nEnd Sub\n\nFunction PunchExists(Columns As HoleTableColumns) As Boolean\n    PunchExists = False\n    Dim oHTC As HoleTableColumn\n    For Each oHTC In Columns\n        If InStr(1, oHTC.Title, \"PUNCH\") = 1 Then\n            PunchExists = True\n            Exit For\n        End If\n    Next\nEnd Function"], "author": "p.crawford"},
{"created at": [], "solution Title": "\n                        Re: Pipe (sweep) and workpoints\n                    ", "solution": ["Sub ExportArbeitspunkte()\n    Dim app As Application\n    Set app = ThisApplication\n    \n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n   \n    Dim oDef As PartComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n   \n    Dim oWorkpoints As WorkPoints\n    Dim oWP As WorkPoint\n    Dim oP As Point\n       \n    'get all workpoints in this part\n    Set oWorkpoints = oDef.WorkPoints\n    \n    'Create a new Excel instance\n    Dim oExcelApplication As Excel.Application\n    Set oExcelApplication = New Excel.Application\n\n    'create a new excel workbook\n    Dim oBook As Excel.Workbook\n    Set oBook = oExcelApplication.Workbooks.Add()\n    Dim oSheet As Excel.WorkSheet\n    Set oSheet = oBook.ActiveSheet\n   \n    Dim nRow As Integer\n    nRow = 1\n    \n    'Ask for Origin point\n    Dim MyOrg As WorkPoint\n    Set MyOrg = app.CommandManager.Pick(kAllPointEntities, \"Choose sweep origin\")\n    \n    'find difference to center point", "    Dim DeltaX As Double\n    Dim DeltaY As Double\n    Dim DeltaZ As Double\n    DeltaX = oDef.WorkPoints.Item(\"Center Point\").Point.x - MyOrg.Point.x\n    DeltaY = oDef.WorkPoints.Item(\"Center Point\").Point.Y - MyOrg.Point.Y\n    DeltaZ = oDef.WorkPoints.Item(\"Center Point\").Point.Z - MyOrg.Point.Z\n    \n    'write the coordinates into separate columns, one workpoint each row\n    For Each oWP In oWorkpoints\n        If Not oWP.Name = \"Center Point\" Then\n            Set oP = oWP.Point\n            oSheet.Cells(nRow, 1) = (oP.x + DeltaX) * 10\n            oSheet.Cells(nRow, 2) = (oP.Y + DeltaY) * 10\n            oSheet.Cells(nRow, 3) = (oP.Z + DeltaZ) * 10\n            nRow = nRow + 1\n        End If\n    Next\n    \n    Dim OutputFile As String\n    OutputFile = Left(ThisApplication.ActiveDocument.FullFileName, _\n    Len(ThisApplication.ActiveDocument.FullFileName) - 4) + \"_Arbeitspunkte.xls\"\n                \n    On Error Resume Next\n    oBook.SaveAs (OutputFile)\n    oBook.Close\n    \n    Set oBook = Nothing\n    Set oSheet = Nothing\n    Set oExcelApplication = Nothing\n    \n    MsgBox \"Es wurde eine Excel Tabelle im aktuellen Verzeichnis erstellt und eine neue IPT f\u00fcr den Import ge\u00f6ffnet!\"\n            \n    'Make a new part file\n    Dim oPartDoc As PartDocument\n    'Set oPartDoc = ThisApplication.Documents.Add(kPartDocumentObject, ThisApplication.FileManager.GetTemplateFile(kPartDocumentObject))\n    Set oPartDoc = ThisApplication.Documents.Add(kPartDocumentObject, , True)\n    \nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: VBA Shrinkwrap how to use AdditionalExcludedOccurrences\n                    ", "solution": ["Dim ExcludeGroup As ObjectCollection\n\nSet ExcludeGroup = SWD.AdditionalExcludedOccurrences ' you can either use this to get existing object collection or CreateObjectCollection to create an empty object collection\n\n\nExcludeGroup.Remove 1 ' edit the object collection to remove one\n\nExcludeGroup.Add oCompOccu1 ' edit the object collection to add one, say you have an oCompOccu1 already\n\nSWD.AdditionalExcludedOccurrences = ExcludeGroup ' set the edited object collection back to the property.", "Dim oCamera As Camera\n\n\nSet oCamera = oView.Camera '(say you have an oView already)\n\n\noCamera.Perspective  = True ' change the transient camera but it won't change the oView immediately\n\n\noCamera.Apply ' apply the changes back to the oView\n"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Text height bug/issue with Styles & Child views\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: \"Inventor Programming in C++\" updated.\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: copy iProperties from one drawing to another\n                    ", "solution": ["    Public Sub ReadOutPropertySets(invDoc As Inventor.Document)\n        Try\n            Dim strPropertySets As String = \"Inventor Property Sets\" & vbCrLf & \"{Property Set Name}\" & vbCrLf & \"{Property.DisplayName, Property.Name, Property.ID, Property.Type, Property.Expression, Property.Value}\"\n            For Each pset As PropertySet In invDoc.PropertySets\n                strPropertySets += vbCrLf & pset.Name\n                For Each prop As [Property] In pset\n                    Try\n                        strPropertySets += vbCrLf & \"      \" & prop.DisplayName & \", \" & prop.Name & \", \" & prop.PropId & \", \" & prop.Type & \", \" & prop.Expression & \", \" & prop.Value\n                    Catch ex As Exception\n                    End Try\n                Next\n            Next\n            MsgBox(strPropertySets)\n        Catch ex As Exception\n        End Try\n    End Sub"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Rotate UCS twice\n                    ", "solution": ["CurrentAngle - PI/10"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Open and save\n                    ", "solution": ["'Before saving to .dxf or dwg\n\nThisApplication.SilentOperation = True \n\n'After saving to .dxf or dwg\n\nThisApplication.SilentOperation = False "], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: PutArcData throws a NotImplementedException\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Open Drawing and Change View Scale\n                    ", "solution": ["  Dim oSheet As Sheet = oDrawDoc.ActiveSheet\n\n  Dim oView As DrawingView = oSheet.DrawingViews.Item(2)\n  Dim oViews As DrawingViews = oSheet.DrawingViews\n  Dim oScale As Double\n \n  oView.Scale = 0.15"], "author": "Connor.WallaceX"},
{"created at": [], "solution Title": "\n                        Re: Bounding box with the UCS Origin\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Ilogic External Rule Copy new Named Assembly & Parts then Replace\n                    ", "solution": ["Dim NewDoc As AssemblyDocument\nDim newDocName As String = ThisDoc.Path & \"\\MyNewAssemblyName.iam\"\n\nThisDoc.Document.SaveAs(newDocName, True)\nThisDoc.Launch(newDocName)\n", "NewDoc", " = ThisApplication.Documents.ItemByName(newDocName)\n\n'find the component in the newDoc and replace it\nDim partToReplace As ComponentOccurrence = ", "NewDoc", ".ComponentDefinition.Occurrences.ItemByName(\"PartDisplayNameHere:1\") 'use the parts display name\npartToReplace.Replace(ThisDoc.Path & \"\\YourReplacementPartNameHere.ipt\", False) 'use the file name (you'll probably use a variable from your excel function) 'Change to true to \"replace all\"\n\nNewDoc.Save"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Component.Visible (iam)\n                    ", "solution": ["'InventorVb.DocumentUpdate() 'moved to bottom\n\nDim doc As AssemblyDocument = ThisDoc.Document\nDim comp As ComponentOccurrence\n\nIf n_baffles >0 Then \n\tFor Each comp In doc.ComponentDefinition.Occurrences\n\t\tcomp.Excluded = False\n\t\tcomp.Visible = True\n\t\tcomp.BOMStructure = BOMStructureEnum.kDefaultBOMStructure\n\tNext\nElse\n\tFor Each comp In doc.ComponentDefinition.Occurrences\n\t\tIf comp.IsPatternElement Then\n\t\t\tcomp.Visible = False\n\t\t\tcomp.BOMStructure = BOMStructureEnum.kReferenceBOMStructure\n\t\t\tcomp.Excluded = True\n\t\tEnd If\n\tNext\nEnd If\nInventorVb.DocumentUpdate()\n"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Referenced files by the assembly\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: How to check if a named feature exists in a part file??\n                    ", "solution": ["Sub", " ", "Main", "()\n\t\n ", "Dim", " ", "oPartDoc", " ", "As", " ", "Inventor", ".", "PartDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\n \n", "Dim", " ", "oFeatures", " ", "As", " ", "PartFeatures", "\n", "oFeatures", " = ", "oPartDoc", ".", "ComponentDefinition", ".", "Features", "\t\n", "Dim", " ", "oFeature", " ", "As", " ", "PartFeature", "\n\n\n \n\t", "For", " ", "Each", " ", "oFeature", " ", "In", " ", "oFeatures", "\n\t", "If", " ", "oFeature", ".", "Name", " = ", "\"Extrusion1\"  'Feature you are looking for", "\n\t\t", "iLogicVb", ".", "RunRule", "(", "\"RuleName\"", ")  'Name of your Rule\n", "Else", "\n", "End", " ", "If", " \n", "Next", " \n\t\t\n\t\t\n\t", "End", " ", "Sub", " \n\t"], "author": "Kat5215"},
{"created at": [], "solution Title": "\n                        Re: Custom Frame generator parts\n                    ", "solution": [], "author": "tdant"},
{"created at": [], "solution Title": "\n                        Re: Send a CTRL+TAB keystroke to iProperties dialog with iLogic\n                    ", "solution": ["Imports System.Windows.Forms\n\nSub Main()\n    Dim oCommandMgr As CommandManager \n    oCommandMgr = ThisApplication.CommandManager \n    Dim oControlDef As ControlDefinition \n    oControlDef = oCommandMgr.ControlDefinitions.Item(\"DrawingiPropertiesCmd\")\n\n    Call oControlDef.Execute2(False)\n    SendKeys.SendWait(\"{RIGHT}\")\n    ThisApplication.UserInterfaceManager.DoEvents()\nEnd Sub", "Imports System.Windows.Forms\n\nSub Main()\n\n\tdoc = ThisDoc.ModelDocument\n\t'check file type\n\tIf doc.DocumentType = kPartDocumentObject Then\n\t\toCmd = \"PartiPropertiesCmd\"\n\tElse If doc.DocumentType = kAssemblyDocumentObject Then\n\t\toCmd = \"AssemblyiPropertiesCmd\"\n\tElse If doc.DocumentType = kDrawingDocumentObject Then\n\t\toCmd = \"DrawingiPropertiesCmd\"\n\tEnd If\n\n    Dim oCommandMgr As CommandManager \n    oCommandMgr = ThisApplication.CommandManager \n    Dim oControlDef As ControlDefinition \n    oControlDef = oCommandMgr.ControlDefinitions.Item(oCmd)\n\n    Call oControlDef.Execute2(False)\n\t\n\t'opens to Custom tab ( send \"right arrow\" key 4 times)\n    SendKeys.Sendwait(\"{RIGHT 4}\")\n\tThisApplication.UserInterfaceManager.DoEvents()\n\nEnd Sub"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Need to run CenterText twice to Center Dimensions\n                    ", "solution": ["For Each oDrawingDim In oSheet.DrawingDimensions\n                If TypeOf oDrawingDim Is LinearGeneralDimension Or TypeOf oDrawingDim Is AngularGeneralDimension Then\n                    \tCall oDrawingDim.CenterText ' 1x\n\t\t\tCall oDrawingDim.CenterText ' 2x\n                End If\n            Next"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Redefining sketch/features with ilogic\n                    ", "solution": [], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: ilogic Rename solid skips second instance\n                    ", "solution": [], "author": "JCamper"},
{"created at": [], "solution Title": "\n                        Re: For loop for changing the size of content center components\n                    ", "solution": ["Dim", " ", "I", " ", "As", " ", "Integer", " = 1\n\n", "For", " ", "I", " = 1 ", "To", " 4\n\t\n\t", "Dim", " ", "WasherName", " = ", "\"Circular Washer (Inch) \"", " & ", "I", "\n\t", "Dim", " ", "NutName", " = ", "\"Hex Nut - Inch \"", " & ", "I", "\n\n\t", "If", " ", "HardwareSize", " = .25 ", "Then", "\n\t", "Dim", " ", "Circular_Washer_Inch", " = ", "Components", ".", "AddContentCenterPart", "(", "WasherName", ",\n                                                           ", "\"Fasteners:Washers:Plain\"", ",\n                                                           ", "\"Circular Washer (Inch)\"", ",\n                                                           ", "\"1/4\"", ",\n                                                           ", "Circular_Washer_InchPos", ")\n\n    ", "Dim", " ", "Hex_Nut_Inch_1", " = ", "Components", ".", "AddContentCenterPart", "(", "NutName", ",\n                                                         ", "\"Fasteners:Nuts:Hex\"", ",\n                                                         ", "\"Hex Nut - Inch\"", ",\n                                                         ", "\"1/4 - 20\"", ",\n                                                         ", "Hex_Nut_Inch_1Pos", ")\n    \n    ", "ElseIf", " ", "HardwareSize", " = .3125 ", "Then", "\n\t", "Dim", " ", "Circular_Washer_Inch", " = ", "Components", ".", "AddContentCenterPart", "(", "WasherName", ",\n                                                           ", "\"Fasteners:Washers:Plain\"", ",\n                                                             ", "\"Circular Washer (Inch)\"", ",\n                                                             ", "\"5/16\"", ",\n                                                           ", "Circular_Washer_InchPos", ")\n\t\n    ", "Dim", " ", "Hex_Nut_Inch_5_16_18", " = ", "Components", ".", "AddContentCenterPart", "(", "NutName", ",\n                                                               ", "\"Fasteners:Nuts:Hex\"", ",\n                                                               ", "\"Hex Nut - Inch\"", ",\n                                                               ", "\"5/16 - 18\"", ",\n                                                               ", "Hex_Nut_Inch_5_16_18Pos", ")\n    \n    \n\t", "End", " ", "If", "\t\t\t\t\t\t\t\t\t   \n\t\n", "Next"], "author": "THEO"},
{"created at": [], "solution Title": "\n                        Re: loft api\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Weld symbols\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: OnParameterChange Event in iLogic\n                    ", "solution": ["Sub Main()", " Dim oModelEvent As ModelingEvents ", " oModelEvent = ThisApplication.ModelingEvents ", " ", " AddHandler oModelEvent.OnParameterChange, AddressOf oModelEvent_ParameterChange", "End Sub", " Sub oModelEvent_ParameterChange(DocumentObject As _Document, Parameter As Parameter, BeforeOrAfter As EventTimingEnum, Context As NameValueMap, ByRef HandlingCode As HandlingCodeEnum)", " ", " If BeforeOrAfter = kBefore Then", " MessageBox.Show(\"Before changing parameter : \" & Parameter.Value)", " ElseIf BeforeOrAfter = kAfter Then", " MessageBox.Show(\"After changing parameter : \" & Parameter.Value)", " End If ", " ", " End Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: \"Save Copy As\" Multi-Sheet Drawing to AutoCAD DWG using VBA\n                    ", "solution": ["' Get the DWG translator Add-In.", "\n", "Dim", " ", "DWGAddIn", " ", "As", " ", "TranslatorAddIn", "\n", "DWGAddIn", " = ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\"", ")\n\n", "'Set a reference to the active document (the document to be published).", "\n", "Dim", " ", "oDocument", " ", "As", " ", "Document", "\n", "oDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oContext", " ", "As", " ", "TranslationContext", "\n", "oContext", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " = ", "kFileBrowseIOMechanism", "\n\n", "' Create a NameValueMap object", "\n", "Dim", " ", "oOptions", " ", "As", " ", "NameValueMap", "\n", "oOptions", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n\n", "' Create a DataMedium object", "\n", "Dim", " ", "oDataMedium", " ", "As", " ", "DataMedium", "\n", "oDataMedium", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n\n", "' Check whether the translator has 'SaveCopyAs' options", "\n", "If", " ", "DWGAddIn", ".", "HasSaveCopyAsOptions", "(", "oDocument", ", ", "oContext", ", ", "oOptions", ") ", "Then", "\n\n\t", "Dim", " ", "strIniFile", " ", "As", " ", "String", "\n\t", "strIniFile", " = ", "\"C:\\tempDWGOut.ini\"", "\n\t", "' Create the name-value that specifies the ini file to use.", "\n\t", "oOptions", ".", "Value", "(", "\"Export_Acad_IniFile\"", ") = ", "strIniFile", "\n", "End", " ", "If", "\n\n", "'Set the destination file name", "\n", "oDataMedium", ".", "FileName", " = ", "\"c:\\tempdwgout.dwg\"", "\n\n", "'Publish document.", "\n", "Call", " ", "DWGAddIn", ".", "SaveCopyAs", "(", "oDocument", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Automated stamp for laser cutting\n                    ", "solution": ["Dim oPartDoc As PartDocument = ThisApplication.ActiveDocument        \nDim oTransMgr As TransactionManager = ThisApplication.TransactionManager\nDim oTrans As Transaction = oTransMgr.StartTransaction(oPartDoc,\"DXF with partnumber\") 'used to group commands so we can undo later \noPartDef = oPartDoc.ComponentDefinition\n\noItemNo = Right(ThisDoc.FileName(False),5)\n\nDim oFace As Face\nDim oStyle As TextStyle\n\n\noFace = ThisApplication.CommandManager.Pick (SelectionFilterEnum.kAllPlanarEntities,\"Select the face\") \n\n'make sure it is a planar face\nIf oFace.SurfaceType = SurfaceTypeEnum.kPlaneSurface Then\n\n\toPlanarSurface = oFace.Geometry\n\n\t'add a sketch\n\tDim oSketch As Sketch = oPartDef.Sketches.Add(oFace)    \n\toSketch.Edit 'added sub to edit sketch\n\t\n\t'trying to choose an appropriate point\n\t'assume this planar face has one edge loop only\n\toEdgeLoop = oFace.EdgeLoops(1)\n\n\toMinPt = oEdgeLoop.RangeBox.MinPoint \n\toMaxPt = oEdgeLoop.RangeBox.MaxPoint\n\t    \n\tCenterPt = ThisApplication.TransientGeometry.CreatePoint((oMaxPt.X + oMinPt.X) / 2#, (oMaxPt.Y + oMinPt.Y) / 2#, (oMaxPt.Z + oMinPt.Z) / 2#)    \n\n\t'get one point on the face and transform to the point2d on the sketch \n\t\n\toTextPt = oSketch.ModelToSketchSpace(CenterPt)\n\n\t'set textStyle\n\tDim myTextStyle As TextStyle \n\tFor Each stl In oPartDoc.TextStyles 'this loop checks if the style has already been made (because i kept crashing in the middle)\n\t\tIf stl.name = \"MyNewTextStyle\" Then\n\t\t\tmyTextStyle = stl\n\t\t\tMessageBox.Show(\"myTextStyle found\", \"Title\")\n\t\t\tExit For\n\t\tEnd If\n\tNext\n\tIf myTextStyle Is Nothing Then \n\t\tmyTextStyle = oPartDoc.TextStyles.Item(21).Copy(\"MyNewTextStyle\")\n\t\tMessageBox.Show(\"myTextStyle copied\", \"Title\")\n\tEnd If\n\n\tmyTextStyle.FontSize = 1.54\n\tmyTextStyle.Rotation = 0 'this line should take a double but fails if anything but 0 is entered\n\n\tDim oTest As Inventor.TextBox = oSketch.TextBoxes.AddFitted(oTextPt, oItemNo, myTextStyle)\n\t\n\t'oTest.Style.FontSize = 1.54 'font size in cm (1 In)    \n\t\n\toSketch.ExitEdit 'used this to close sketch edit\n\n\n\t\n\t\n\t\n\t' Create a profile.\n\tDim oProfile As Profile\n\tOn Error GoTo NoProfile\n\toProfile = oSketch.Profiles.AddForSolid\n\n\t'set direction\n\toDirection  = PartFeatureExtentDirectionEnum.kSymmetricExtentDirection\n\t'set operation\n\toJoinOrCut  = PartFeatureOperationEnum.kCutOperation\n\n\n\t'Set extrude parameters\n\tDim ExtDepth As String = \"1mm\" 'change depth of extrude here\n\tDim oExtrudeDef As ExtrudeDefinition = oPartDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, oJoinOrCut)\n\toExtrudeDef.SetDistanceExtent(ExtDepth,oDirection)\n\t\n\t' Create an extrusion \n\tDim oExtrude As ExtrudeFeature\n\tOn Error GoTo NoExtrude\n\toExtrude = oPartDef.Features.ExtrudeFeatures.Add(oExtrudeDef)\n\t\n\t\n    '  Convert to Sheet metal    ----------------------------------------------------------------------------------------------\n\tDim oPartDoca As PartDocument\n  \toPartDoca = ThisApplication.ActiveDocument\n\n \t'Change Document.SubType to Sheetmetal\n\t oPartDoca.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\"\n\t\n\t\n\t'  Create DXF file from Sheet metal and save with same filename + .dxf  ------------------------------\n\t\n\t' Get the active document.  This assumes it is a part document.\n'    Dim oDoc As PartDocument - This was done at top as oPartDoc\n'    oDoc = ThisApplication.ActiveDocument - This was done at top as oPartDoc\n\n    ' Get the DataIO object.\n    Dim oDataIO As DataIO\n    oDataIO = oPartDoc.ComponentDefinition.DataIO\n\n    ' Build the string that defines the format of the DXF file.\n    Dim sOut As String\n    sOut = \"FLAT PATTERN DXF?AcadVersion=R12&OuterProfileLayer=Outer\"\n\t\n\n\t\n    ' Create the DXF file.\n    oDataIO.WriteDataToFile (sOut, ThisDoc.PathAndFileName(False) & \".dxf\")  'ThisDoc.FileName(True)\n\n\t'    Back to folded part ---------------------------------------------------------------------------------------------------\n\t\n\toDoc2 = ThisDoc.Document 'I think you could get rid of this stuff too but it works so i left it alone\n\tDim\toSMDef As SheetMetalComponentDefinition \n\toSMDef = oDoc2.ComponentDefinition \n\toSMDef.FlatPattern.ExitEdit \n\toTrans.End 'end the transaction group\n\tDim undoLast As ControlDefinition = ThisApplication.CommandManager.ControlDefinitions(\"AppUndoCmd\") 'set the undo command\n\tundoLast.Execute 'run the undo command\n\t'ThisDoc.Document.Close(True) - DON'T DO THIS - Caused catostrophic crash\n\t\n\t\n\t'---------------------------------------------------------------------\n\t\n\tiLogicVb.UpdateWhenDone = True\n\t\n\t\n\t\n\t\n\t\n\tExit Sub\n\n\tNoProfile:\n\tMessageBox.Show(\"No closed profile found\", \"iLogic\")\n\tReturn\n\n\tNoExtrude:\n\tMessageBox.Show(\"No extrusion created, check your inputs.\", \"iLogic\")\n\tReturn\nElse\n    MsgBox( \"please select a planar face!\")\nEnd If"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Betreff: Weld material change using i logic\n                    ", "solution": [], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: Improve Multi Faces color overwriting\n                    ", "solution": ["oPartDoc.FlatPatternSettings.DeferUpdate = True\n'..... execution\noPartDoc.FlatPatternSettings.DeferUpdate = False"], "author": "fsanchou"},
{"created at": [], "solution Title": "\n                        Re: VB - Open Multiple Part and/or Assembly Files from Directory\n                    ", "solution": ["Dim oTime As String = DateTime.Now()\n\nDim oActDoc As Inventor.Document = ThisApplication.ActiveDocument\nDim oCurrFile = ThisApplication.ActiveDocument.FullFileName\nDim oCurrDir = System.IO.Path.GetDirectoryName(oCurrFile)\nDim NewFilename As String = oActDoc.FullFileName\n\nDim oFiles = System.IO.Directory.GetFiles(oCurrDir, \"*.ipt\", System.IO.SearchOption.TopDirectoryOnly)\nDim oAssys = System.IO.Directory.GetFiles(oCurrDir, \"*.iam\", System.IO.SearchOption.TopDirectoryOnly)\n'MessageBox.Show(oFiles.Count, \"Title\")\nDim MyPartsList As New ArrayList\nDim MyAssysList As New ArrayList\n\n'Get an Array List of all oFiles and oAssys that have a creation date made later than the oTime\nIf oFiles.Count > 0 Then\n\tFor Each oFile In oFiles\n\t\tIf System.IO.File.GetCreationTime(oFile) < oTime And oFile.ToString <> ThisDoc.PathAndFileName(True) Then MyPartsList.Add(oFile.ToString)\n\tNext\n\t'MessageBox.Show(MyPartsList.Count, \"Title\")\nEnd If\nIf oAssys.Count > 0 Then\n\tFor Each oAssy In oAssys\n\t\tIf System.IO.File.GetCreationTime(oAssy) < oTime And oAssy.ToString <> ThisDoc.PathAndFileName(True) Then MyAssysList.Add(oAssy.ToString)\n\tNext\n\t'MessageBox.Show(MyAssysList.Count, \"Title\")\nEnd If\nIf MyPartsList.Count > 0 Then\n\tFor Each oFile In MyPartsList\n\t\tThisDoc.Launch(oFile)\n\t\tDim EditFile As PartDocument = ThisApplication.Documents.ItemByName(oFile)\n\t\toPropSet = EditFile.PropertySets(\"Design Tracking Properties\")\n\t\toProp = oPropSet.Item(\"Stock Number\")\n\t\toProp.Value = \"\"\n\t\toProp = oPropSet.Item(\"Project\")\n\t\toProp.Value = \"\"\n\t\tEditFile.Save\n\t\tEditFile.Close\n\tNext\nEnd If\nIf MyAssysList.Count > 0 Then\n\tFor Each oFile In MyAssysList\n\t\tThisDoc.Launch(oFile)\n\t\tDim EditFile As AssemblyDocument = ThisApplication.Documents.ItemByName(oFile)\n\t\toPropSet = EditFile.PropertySets(\"Design Tracking Properties\")\n\t\toProp = oPropSet.Item(\"Stock Number\")\n\t\toProp.Value = \"\"\n\t\toProp = oPropSet.Item(\"Project\")\n\t\toProp.Value = \"\"\n\t\tEditFile.Save\n\t\tEditFile.Close\n\tNext\nEnd If\n"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: VBA Marco background color\n                    ", "solution": ["    If (ThisApplication.ColorSchemes.BackgroundType = 52737) Then\n        ThisApplication.ColorSchemes.Item(\"Millennium\").Activate\n        ThisApplication.ColorSchemes.BackgroundType = BackgroundTypeEnum.kImageBackgroundType\n    Else\n        ThisApplication.ColorSchemes.Item(\"Presentation\").Activate\n        ThisApplication.ColorSchemes.BackgroundType = 52737\n    End If"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Adding Centerlines from work features\n                    ", "solution": ["Dim oAsmPlane1 As WorkPlaneProxy\n    Call oPartDoc1.CreateGeometryProxy(oOcc1, oAsmPlane1)\n\n    Dim oAsmPlane2 As WorkPlaneProxy\n    Call oPartDoc1.CreateGeometryProxy(oOcc2, oAsmPlane2)", "Line1 = oSheet.Centerlines.AddByWorkFeature(oAsmPlane1, DrawingView)"], "author": "garrettfulghum"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Start a Rule Over\n                    ", "solution": ["Sub", " ", "Main", "()\n\t", "ReStartPos", ":\n\t", "'''", "Your Rule code", "\n\t", "'''", " parameter checks etc...", "\n\t\n\t", "''Check parameter fits conditions:", "\n\t", "If", " ", "myParameter", " = ", "x", " ", "Then", "\n\t\t", "''Proceed", "\n\t", "Else", "\n\t\t", "'''", "Go to this location", "\n\t\t", "GoTo", " ", "ReStartPos", "\n\t", "End", " ", "If", "\n", "End", " ", "Sub", "RestartPosition", ":\n\n", "ReamedHoleLocation", " ", "=", " ", "InputBox", "(", "\"", "Enter Reamed Hole Location (Whole Number)", "\"", ", ", "\"", "Reamed Hole Location", "\"", ", ", "\"", "Reamed Hole Location", "\"", ")", "\n        \n", "If", " ", "ReamedHoleLocation", " ", "<>", " ", "Int", "(", "ReamedHoleLocation", ")", " ", "Then", "\n    ", "Goto", " ", "RestartPosition", "\n", "End", " ", "If", "\n        \n", "If", " ", "ReamedHoleLocation", " ", "<", " ", "1", " ", "Then", "\n    ", "Goto", " ", "RestartPosition", "\n", "End", " ", "If"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: Asset Libraries - Display Name\n                    ", "solution": ["Dim oLib_Array As New ArrayList\nDim oAssetlib As AssetLibrary\nFor Each oAssetlib In ThisApplication.AssetLibraries\n    Dim oAsset As Asset\n    For Each oAsset In oAssetlib.AppearanceAssets\n         oLib_Array.Add(oAsset.DisplayName)\n    Next\nNext\noLib_Array_Selected = InputListBox(\"Choose a library from the list above\", oLib_Array, oLib_Array.Item(0), \"Libraries\", \"List of Libraries\")\n\nMessageBox.Show(oLib_Array_Selected, \"Title\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to change active level of detail\n                    ", "solution": [], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Sometimes have to set appearance twice.\n                    ", "solution": ["Public Sub SetAppearanceToGreenRubber()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As PartComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n\n    'define appearance library by name\n    Dim assetLib As AssetLibrary\n    Set assetLib = ThisApplication.AssetLibraries.Item(\"Inventor Material Library\")\n     \n    'define colors to work with\n    Dim libAsset As Asset\n    Set libAsset = assetLib.AppearanceAssets.Item(\"Rubber - Green\")\n    \n    Dim localAsset As Asset\n    On Error Resume Next\n    Set localAsset = libAsset.CopyTo(oDoc)\n    If Err.Number <> 0 Then\n        Set localAsset = oDoc.Assets.Item(\"Rubber - Green\")\n    End If\n    \n    oDoc.ActiveAppearance = localAsset\n    \n    Call oDoc.Save\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Add custom check in Design checker\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Find rules in documents\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic, Titleblock and Prompted Entry\n                    ", "solution": [" ", "Sub", " ", "main", "\n    ", "' Set a reference to the drawing document.", "\n    ", "' This assumes a drawing document is active.", "\n    ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n     ", "oDrawDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n    ", "' Obtain a reference to the desired border defintion.", "\n    ", "Dim", " ", "oTitleBlockDef", " ", "As", " ", "TitleBlockDefinition", "\n     ", "oTitleBlockDef", " = ", "oDrawDoc", ".", "TitleBlockDefinitions", ".", "Item", "(", "\"Non-conformity TitleBlock\"", ")\n\n    ", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n     ", "oSheet", " = ", "oDrawDoc", ".", "Sheets", "(3) ", "'Sheet 3 !", "\n\n    ", "' Check to see if the sheet already has a title block and delete it if it does.", "\n    ", "If", " ", "Not", " ", "oSheet", ".", "TitleBlock", " ", "Is", " ", "Nothing", " ", "Then", "\n        ", "oSheet", ".", "TitleBlock", ".", "Delete", "\n    ", "End", " ", "If", "\n\n\n    ", "' This title block definition contains one prompted string input.  An array", "\n    ", "' must be input that contains the strings for the prompted strings.", "\n    ", "Dim", " ", "sPromptStrings", "(11) ", "As", " ", "String", "\n\t\n    ", "sPromptStrings", "(0) = ", "\"String 00\"", "\n    ", "sPromptStrings", "(1) = ", "\"String 1\"", "\n    ", "sPromptStrings", "(2) = ", "\"String 2\"", "\n\t", "sPromptStrings", "(3) = ", "\"String 3\"", "\n\t", "sPromptStrings", "(4) = ", "\"String 4\"", "\n\t", "sPromptStrings", "(5) = ", "\"String 5\"", "\n\t", "sPromptStrings", "(6) = ", "\"String 6\"", "\n\t", "sPromptStrings", "(7) = ", "\"String 7\"", "\n\t", "sPromptStrings", "(8) = ", "\"String 8\"", "\n\t", "sPromptStrings", "(9) = ", "\"String 9\"", "\n\t", "sPromptStrings", "(10) = ", "\"String 10\"", "\n\t", "sPromptStrings", "(11) = ", "\"String 011\"", "\n\n\t\n\n    ", "' Add an instance of the title block definition to the sheet.", "\n    ", "Dim", " ", "oTitleBlock", " ", "As", " ", "TitleBlock", "\n    ", "oTitleBlock", " = ", "oSheet", ".", "AddTitleBlock", "(", "oTitleBlockDef", ", , ", "sPromptStrings", ")\n", "End", " ", "Sub"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Suppressing sub-assembly components at the TLA using iLogic\n                    ", "solution": [], "author": "johnsonshiue"},
{"created at": [], "solution Title": "\n                        Re: Inventor iLogic Using \" Character Symbol As Text Instead To Represent Inches\n                    ", "solution": ["oString = \"Some text to say 5\" + iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"Quotes\"", ")", "sMessage = \"2\" & Chr(34)  & \" x \" & \"4\" &  Chr(34)  & \" Gusset, \" & \"3\" & Chr(34)  & \" Thick \"\nMessageBox.Show(sMessage, \"iLogic\")"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Attach leader to Surface Texture Symbol via API\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Can not finish edit part in assembly by code\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Embedding Inventor 2019 View into intranet\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Configurator360 and GoExcel. Supported or not?\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Inventor API Controlling model space.\n                    ", "solution": ["Public Sub MateConstraintOfWorkPlanes()\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n    ", "' Get references to the two occurrences to constrain.", "\n    ", "' This arbitrarily gets the first and second occurrence.", "\n    Dim oOcc1 As ComponentOccurrence\n    Set oOcc1 = oAsmCompDef.Occurrences.Item(1)\n\n    Dim oOcc2 As ComponentOccurrence\n    Set oOcc2 = oAsmCompDef.Occurrences.Item(2)\n\n    ", "' Get the XY plane from each occurrence.  This goes to the", "\n    ", "' component definition of the part to get this information.", "\n    ", "' This is the same as accessing the part document directly.", "\n    ", "' The work plane obtained is in the context of the part,", "\n    ", "' not the assembly.", "\n    Dim oPartPlane1 As WorkPlane\n    Set oPartPlane1 = oOcc1.Definition.WorkPlanes.Item(3)\n\n    Dim oPartPlane2 As WorkPlane\n    Set oPartPlane2 = oOcc2.Definition.WorkPlanes.Item(3)\n\n    ", "' Because we need the work plane in the context of the assembly", "\n    ", "' we need to create proxies for the work planes.  The proxies", "\n    ", "' represent the work planes in the context of the assembly.", "\n    Dim oAsmPlane1 As WorkPlaneProxy\n    Call oOcc1.CreateGeometryProxy(oPartPlane1, oAsmPlane1)\n\n    Dim oAsmPlane2 As WorkPlaneProxy\n    Call oOcc2.CreateGeometryProxy(oPartPlane2, oAsmPlane2)\n\n    ", "' Create the constraint using the work plane proxies.", "\n    Call oAsmCompDef.Constraints.AddMateConstraint(oAsmPlane1, oAsmPlane2, 0)\nEnd Sub"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Can text (idw) be controlled on/off with iLogic?\n                    ", "solution": [], "author": "BRLMCHKD"},
{"created at": ["\u200e03-13-2019 09:00 AM", "\u200e03-13-2019 12:51 PM"], "solution Title": "\n                        Re: Ilogic rule: save as ACAD Dwg but how to overwrite existing file\n                    ", "solution": ["sFile", " = ", "\"C:\\testdrawing.idw\"", "\n", "If", " ", "System", ".", "IO", ".", "File", ".", "Exists", "(", "sFile", ") = ", "True", " ", "Then", " ", "System", ".", "IO", ".", "File", ".", "Delete", "(", "sFile", ")"], "author": "J.Troquay"},
{"created at": [], "solution Title": "\n                        Re: Units of Measure\n                    ", "solution": ["Sub ConvertValueToDocUnits()\n    ' say you have a double value(in centimeters)\n    Dim dRangeBoxVal As Double\n    dRangeBoxVal = 2.54\n    \n    Dim oUOM As UnitsOfMeasure\n    Set oUOM = ThisApplication.ActiveDocument.UnitsOfMeasure\n\n    Dim dResultVal As Double\n    dResultVal = oUOM.ConvertUnits(dRangeBoxVal, kCentimeterLengthUnits, oUOM.LengthUnits)\n    \n    Debug.Print dResultVal & \" \" & oUOM.GetStringFromType(oUOM.LengthUnits)\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Work around to rename skeleton implemented in iLogic rule, by Copy Design\n                    ", "solution": ["modelName", " = ", "IO", ".", "Path", ".", "GetFileName", "(", "ActiveSheet", ".", "View", "(", "\"VIEW1\"", ").", "ModelDocument", ".", "FullFileName", ")", "dwgParam", " = ", "Parameter", "(", "modelName", ", ", "\"InjectNozRootDia\"", ")\u00a0\u00a0"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Write to CSV - Encoding Problem?\n                    ", "solution": ["Dim csv_filename As String = filepath & name & \".csv\"\nDim objStreamwriter As New StreamWriter(csv_filename, False, System.Text.Encoding.Default)"], "author": "w.pepping"},
{"created at": [], "solution Title": "\n                        Re: Decal image on drawing\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Programming technique, to speed up loops?\n                    ", "solution": ["ThisApplication.ScreenUpdating = False\n\nDim oDoc As DrawingDocument\nSet oDoc = ThisApplication.ActiveDocument\n\nDim bDeferUpdate As Boolean\n\nbDeferUpdate = oDoc.DrawingSettings.DeferUpdates\noDoc.DrawingSettings.DeferUpdates = True\n\nDim oTransaction As Transaction\nSet oTransaction = ThisApplication.TransactionManager.StartTransaction(oDoc, \"Edit Partslist\")\n\nFor Each plr In pl.PartsListRows\n    plr(\"col1\").Static = False\n    plr(\"col2\").Static = False\n   \n    If plr(\"col1\") = \"\" Then\n    plr(\"col1\").Value = \"No\"\n    End If\nNext plr\n\noTransaction.End\noDoc.DrawingSettings.DeferUpdates = bDeferUpdate\nThisApplication.ScreenUpdating = True"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Valvw Publishing\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Cann't add the border and titel block from Defind options\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Addin in C++ for Inventor 2019\n                    ", "solution": [], "author": "FRFR1426"},
{"created at": [], "solution Title": "\n                        Re: Open Form Before Document Closes\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic Error Message\n                    ", "solution": ["If Plate_Diameter = 4 ft  Then\nParameter(\"Dia\") = \"4'-0\" & Chr(34)\nParameter(\"THK\") = \"1/2\" & Chr(34)\nCutout_Length = 18 in\nCutout_QTY = 14 ul\n\nElse If Plate_Diameter = 6 ft  Then\nParameter(\"Dia\") = \"6'-0\" & Chr(34)\nParameter(\"THK\") = \"1/2\" & Chr(34)\nCutout_Length = 30 in\nCutout_QTY = 14 ul\n\nElse If Plate_Diameter = 8 ft  Then\nParameter(\"Dia\") = \"8'-0\" & Chr(34)\nParameter(\"THK\") = \"1/2\" & Chr(34)\nCutout_Length = 36 in\nCutout_QTY = 14 ul\n\nEnd If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Select Drawing View\n                    ", "solution": ["Dim", " ", "oDone", " ", "As", " ", "Boolean", " = ", "False", "\n", "Dim", " ", "oSelectView", " ", "As", " ", "DrawingView", "\n\n", "Do", " ", "Until", " ", "oDone", " = ", "True", "\n\t", "oSelectView", " = ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "selectionfilterenum", ".", "kDrawingViewFilter", ", ", "\"Pick View\"", ")\n\t", "MyLabel", " = ", "InputBox", "(", "\"Input label view\"", ", ", "\"Input Label View\"", ", ", "oSelectView", ".", "Label", ".", "Text", ")\n\t", "oSelectView", ".", "ShowLabel", " = ", "True", "\n\t", "oSelectView", ".", "Name", " = ", "uCase", "(", "MyLabel", ")\n\t\n\t", "WantSelectMore", " = ", "MsgBox", "(", "\"Want edit more label view?\"", ", ", "vbYesNo", ", ", "\"Input More Label\"", ")\n\t", "If", " ", "WantSelectMore", " = ", "vbYes", " ", "Then", "\n\t\t", "oDone", " = ", "False", "\n\t", "Else", "\n\t\t", "oDone", " = ", "True", "\t\n\t", "End", " ", "If", "\n", "Loop"], "author": "dgreatice"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule To Insert Connector Symbol Base on Parts List\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\n' Obtain a reference to the desired sketched symbol definition.\nDim oSketchedSymbolDef As SketchedSymbolDefinition\noSketchedSymbolDef = oDrawDoc.SketchedSymbolDefinitions.Item(\"Legend - (MDC) Manual Double Connector\")\n\nDim oSheet As Sheet\noSheet = oDrawDoc.ActiveSheet\n\n' This sketched symbol definition contains one prompted string input. An array\n' must be input that contains the strings for the prompted strings.\nDim sPromptStrings(0) As String\nsPromptStrings(0) = \"3\" 'This string which will be added under \"Qty\". It can be 1, 2, 3 etc.,\n\nDim oTG As TransientGeometry\noTG = ThisApplication.TransientGeometry\n\n' Add an instance of the sketched symbol definition to the sheet.\n' Rotate the instance by 45 degrees and scale by .75 when adding.\n' The symbol will be inserted at (0,0) on the sheet. Since the\n' start point of the line was marked as the insertion point, the\n' start point should end up at (0,0).\nDim oSketchedSymbol As SketchedSymbol\noSketchedSymbol = oSheet.SketchedSymbols.Add(oSketchedSymbolDef, oTG.CreatePoint2d(10, 10), 0, 1, sPromptStrings)\n "], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Use Inventor Vault Add-in through Inventor API, from standalone.exe\n                    ", "solution": [], "author": "junyi.zhu"},
{"created at": [], "solution Title": "\n                        Re: iLogic, Inventor .ipt, .idw\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Reorder DesignViewRepresentations\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic on assembly to run an exemption to regenerate rules embedded in parts\n                    ", "solution": ["Sub Main()\n\tIf ThisDoc.Document.Type = DocumentTypeEnum.kAssemblyDocumentObject Then\n\t\tRule_Assembly()\n\tElse\n\t\tExit Sub \n\tEnd If \nEnd Sub\n\nSub Rule_Assembly()\n\t''''''\n\t''' \n\t\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ilogic selecting visibility of sketch.\n                    ", "solution": ["ThisDoc", ".", "Document", ".", "ComponentDefinition", ".", "Sketches", ".", "Item", "(", "\"Your Sketch Name Here\"", ").", "Visible", " = ", "True", " ", "'Or False", "Dim oDoc As PartDocument\noDoc = ThisDoc.Document\n\nDim oSketches As PlanarSketches \noSketches = oDoc.ComponentDefinition.Sketches\n\noSketches.Item(\"Sketch1\").Visible = False", "Dim oDoc As PartDocument\noDoc = ThisDoc.Document\n\nDim oSketches As PlanarSketches \noSketches = oDoc.ComponentDefinition.Sketches\n\noSketches.Item(\"Sketch2\").Visible = False"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Add Area Property in every Assembly parts\n                    ", "solution": ["Dim openDoc As Document\nopenDoc = ThisApplication.ActiveDocument\nDim docFile As Document\n\nFor Each docFile In openDoc.AllReferencedDocuments\t\t\n    If docFile.SubType.Equals(\"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\") Then\n\t\n\t\t'get custom prop set\n\t\toCustomPropertySet = docFile.PropertySets.Item _\n\t\t(\"Inventor User Defined Properties\")\n\t\t\n\t\t'get mass prop set\n\t\tDim oMassProps As MassProperties\n    \t oMassProps = docFile.ComponentDefinition.MassProperties\n\t\t\n\t\t'[ set length \n\t\tTry\n\t\t\t'see if iprop exists\n\t\t\toTest = oCustomPropertySet.Item(\"SM_Length\").Value\n\t\tCatch\n\t\t\t'create it if not found\n\t\t\toCustomPropertySet.Add(\"\",\"SM_Length\")\n\t\tEnd Try\n\t\t'set iprop value\n\t\toCustomPropertySet.Item(\"SM_Length\").Value = \"=<Sheet Metal Length>\"\n\t\t']\n\t\t\n\t\t'[ set width \n\t\tTry\n\t\t\t'see if iprop exists\n\t\t\toTest = oCustomPropertySet.Item(\"SM_Width\").Value\n\t\tCatch\n\t\t\t'create it if not found\n\t\t\toCustomPropertySet.Add(\"\",\"SM_Width\")\n\t\tEnd Try\n\t\t'set iprop value\n\t\toCustomPropertySet.Item(\"SM_Width\").Value = \"=<Sheet Metal Width>\"\n\t\t']\n\n\t\t\n\t\t'[ set area \n\t\tTry\n\t\t\t'see if iprop exists\n\t\t\toTest = oCustomPropertySet.Item(\"Area\").Value\n\t\tCatch\n\t\t\t'create it if not found\n\t\t\toCustomPropertySet.Add(\"\",\"Area\")\n\t\tEnd Try\n\t\t'set iprop value\n\t\toCustomPropertySet.Item(\"Area\").Value = Round(oMassProps.Area,0) & \" cm^2\"\n\t\t']\n\n\t\t\n\tEnd If\n\nNext\n", "Dim openDoc As Document\nopenDoc = ThisApplication.ActiveDocument\nDim docFile As Document\n\nFor Each docFile In openDoc.AllReferencedDocuments\t\t\n    If docFile.SubType.Equals(\"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\") Then\n\t\n\t\t'get custom prop set\n\t\toCustomPropertySet = docFile.PropertySets.Item _\n\t\t(\"Inventor User Defined Properties\")\n\t\t\n\t\t'get mass prop set\n\t\tDim oMassProps As MassProperties\n    \toMassProps = docFile.ComponentDefinition.MassProperties\n\t\toArea = Round(oMassProps.Area,0) & \" cm^2\"\n\t\t\n\t\t'add each iprop to am array  list\n\t\t'using a \"|\" to seperate the name from the value\n\t\tDim cIprops As New ArrayList\n\t\tcIprops.add(\"SM_Length\" & \"|\" & \"=<Sheet Metal Length>\")\n\t\tcIprops.add(\"SM_Width\" & \"|\" & \"=<Sheet Metal Width>\")\n\t\tcIprops.add(\"Area\" & \"|\" & oArea)\n\t\t\n\t\ti = 0\n\t\tFor Each oItem in cIprops\t\t\n\t\t\n\t\t\t'split array list lines into values using the \"|\" Char\n\t\t\tDim oProps As String() \n\t\t\toProps = cIprops.Item(i).Split(New Char() {\"|\"c})\n\t\t\t\n\t\t\t'[ set the iProperty\n\t\t\tTry\n\t\t\t\t'see if iprop exists\n\t\t\t\toTest = oCustomPropertySet.Item(oProps(0)).Value\n\t\t\tCatch\n\t\t\t\t'create it if not found\n\t\t\t\toCustomPropertySet.Add(\"\",oProps(0))\n\t\t\tEnd Try\n\t\t\t\n\t\t\t'set iprop value\n\t\t\toCustomPropertySet.Item(oProps(0)).Value = oProps(1)\t\n\t\t\t']\n\t\t\t\n\t\t\ti = i+1\n\t\tNext 'arraylist item\n\tEnd If\n\nNext\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How to make sure all drawingviews are done updating before exporting to PDF?\n                    ", "solution": ["\t", "For", " ", "Each", " ", "oDwgView", " ", "In", " ", "oDwgViews", "\n\t\t", "Do", " ", "While", " ", "oDwgView", ".", "IsUpdateComplete", " = ", "False", "\n\t\t", "ThisApplication", ".", "UserInterfaceManager", ".", "DoEvents", "\n\t\t", "ThisApplication", ".", "StatusBarText", " = ", "\"Updating drawing views...\"", "\n\t\t", "Loop", "\n\t", "Next"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: Problem with window of dimension value\n                    ", "solution": [], "author": "ales.pridal"},
{"created at": [], "solution Title": "\n                        Re: How keep highlight object with CommandManager.Pick Loop\n                    ", "solution": [], "author": "fsanchou"},
{"created at": [], "solution Title": "\n                        Re: Simulate User Input with VBA\n                    ", "solution": ["DesignViewRepresentation.SetSectionView(\u00a0SectionViewType\u00a0As\u00a0SectionViewTypeEnum, [FirstSectionPlane] As Variant, [SecondSectionPlane] As Variant ) "], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Save all idw's in same folder to pdf\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Ilogic and grabbing model value into drawing\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Selection of material-libary\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nDim MyLibList As New ArrayList\nFor Each myLib In app.AssetLibraries\n\tIf myLib.MaterialAssets.Count > 0 Then MyLibList.Add(myLib.DisplayName)\nNext\nMultiValue.List(\"Material_Lib\") = MyLibList\n'MessageBox.Show(MyLibList.IndexOf(Material_Lib)+1, \"Title\")\n\nDim LibIndex As Long\nFor Each appLib In app.AssetLibraries\n\tLibIndex = LibIndex + 1\n\tIf appLib.DisplayName = Material_Lib Then Exit For\nNext\napp.ActiveMaterialLibrary = app.AssetLibraries.Item(LibIndex)\nMultiValue.List(\"Material_Desc\") = iProperties.Materials"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: circular drawing curves\n                    ", "solution": [" Dim oIntentminX As GeometryIntent = oSheet.CreateGeometryIntent(CurveMinX, minXPoint)\n            Dim oIntentmaxX As GeometryIntent = oSheet.CreateGeometryIntent(CurveMaxX, maxXPoint)\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic: Pass an argument back to calling rule\n                    ", "solution": ["'---Set up arguments'---\nDim oRuleArguments As Inventor.NameValueMap = ThisApplication.TransientObjects.CreateNameValueMap()\noRuleArguments.Add(\"oPropName\",\"Total QTY\")\n\n'---Call external \"function\" rule---\niLogicVb.RunExternalRule(\"CustomPropCheck\",oRuleArguments)\n\n'---Retrieve resultant value from \"function\" rule---\noPropValue = oRuleArguments.Item(\"Return\")\n\n'---Display retrieved value---\nMessageBox.Show(\"Main Rule - iProp Value: \" & oPropValue)", "'---Get argument values---\nDim oPropName As String = RuleArguments(\"oPropName\")\n\n'---Determine iProperty value---\nDim oPropValue As String\n\nTry\n\toPropValue = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\").Item(oPropName).Value\nCatch\n\toPropValue = \"**DNE**\"\nEnd Try\n\n'---Display iProperty value---\nMessageBox.Show(\"CustomPropCheck - iProp Value: \" & oPropValue)\n\n'---Pass oPropValue value back to main rule---\nRuleArguments.Arguments.Value(\"Return\") = oPropValue\u00a0"], "author": "R.Mabery"},
{"created at": [], "solution Title": "\n                        Re: Run iLogic Rule after Part Geometry Change\n                    ", "solution": ["ThisDoc.Document.Rebuild()\n\nG_L = MaxOfMany(Measure.ExtentsLength, Measure.ExtentsWidth, Measure.ExtentsHeight)\nG_T = MinOfMany(Measure.ExtentsLength,Measure.ExtentsWidth,Measure.ExtentsHeight)\nG_W = Measure.ExtentsLength + Measure.ExtentsWidth + Measure.ExtentsHeight - G_L - G_T\n\nMessageBox.Show(G_T & vbNewLine & G_W & vbNewLine & G_L)"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Include 3D sketch in drawing view\n                    ", "solution": ["    Public Sub CMandCL(ThisApplication As Inventor.Application)\n        Dim oDrawDoc As DrawingDocument\n        oDrawDoc = ThisApplication.ActiveDocument\n        Dim oSheet As Sheet\n        oSheet = oDrawDoc.ActiveSheet\n        If oDrawDoc.SelectSet.Count = 0 Then\n            MsgBox(\"Please select at least one view.\")\n        Else\n            Dim obj As Object\n            For Each obj In oDrawDoc.SelectSet\n                If TypeOf obj Is DrawingView Then\n                    Dim oView As DrawingView = obj\n                    oView.SetAutomatedCenterlineSettings()\n                    Dim i As Integer = 0\n                    Dim model As _Document = oView.ReferencedDocumentDescriptor.ReferencedDocument\n                    If TypeOf model Is AssemblyDocument Then\n                        Dim assymodel As AssemblyDocument = model\n                        For Each occ As ComponentOccurrence In assymodel.ComponentDefinition.Occurrences\n                            If occ.DefinitionDocumentType = DocumentTypeEnum.kPartDocumentObject Then\n                                Dim oDef As PartComponentDefinition = occ.Definition\n                                If oDef.Sketches3D.Count > 0 Then\n                                    For Each sketch As Sketch3D In oDef.Sketches3D\n                                        i += 1\n                                        Dim oProxy As Sketch3DProxy\n                                        Call occ.CreateGeometryProxy(oDef.Sketches3D.Item(i), oProxy)\n                                        Call oView.SetIncludeStatus(oProxy, True)\n                                    Next\n                                    i = 0\n                                End If\n                            End If\n                        Next\n                    End If\n                End If\n            Next\n        End If\n    End Sub"], "author": "inventorguru"},
{"created at": [], "solution Title": "\n                        Re: offset a new planar sketch projected geometry edge\n                    ", "solution": ["Call", " ", "oSketch_1", ".", "OffsetSketchEntitiesUsingDistance", "(", "oSketchObjects", ", 2, ", "False", ",", "False", ")"], "author": "crojasNB2ET"},
{"created at": [], "solution Title": "\n                        Re: Drawing iLogic code to Delete unwanted sheets\n                    ", "solution": ["SyntaxEditor Code Snippet", "Dim", " ", "app", " ", "As", " ", "Inventor", ".", "Application", " = ", "ThisApplication", "\n", "Dim", " ", "doc", " ", "As", " ", "DrawingDocument", " = ", "app", ".", "ActiveDocument", "\n\n", "Dim", " ", "sheetCol", " ", "As", " ", "ObjectCollection", " = ", "app", ".", "TransientObjects", ".", "CreateObjectCollection", "\n\n", "For", " ", "Each", " ", "oSheet", " ", "As", " ", "Sheet", " ", "In", " ", "doc", ".", "Sheets", "\n\t", "sheetCol", ".", "Add", "(", "oSheet", ".", "Name", ")\n\t", "For", " ", "Each", " ", "partListObj", " ", "As", " ", "PartsListRow", " ", "In", " ", "doc", ".", "Sheets", "(1).", "PartsLists", "(1).", "PartsListRows", "\n\t\t", "If", " ", "oSheet", ".", "Name", " ", "Like", " ", "partListObj", ".", "Item", "(3).", "Value", " & ", "\":*\"", " ", "Then", " ", "sheetCol", ".", "Remove", "(", "sheetCol", ".", "Count", ") ", "'change Item(3) to your PartNumber Column #", "\n\t", "Next", "\n", "Next", "\n", "sheetCol", ".", "Remove", "(1)\n", "For", " ", "x", "= ", "sheetCol", ".", "Count", " ", "to", " 1 ", "step", " - 1\n\t", "'MessageBox.Show(sheetCol(x), \"Title\")", "\n\t", "doc", ".", "Sheets", ".", "Item", "(", "sheetCol", "(", "x", ")).", "Delete", "\n", "Next"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Remove time portion of Date property value\n                    ", "solution": ["oToday", " = ", "\"11/2/2018 9:53:25 AM\"", "\n", "myString", " = ", "oToday", "\n", "sDate", " = ", "myString", ".", "Split", "(", "\" \"", ") (0)"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: How Can I Change The Name of Features and Sketches Usin Logic\n                    ", "solution": ["oDoc = ThisApplication.ActiveDocument\noFeatures = oDoc.ComponentDefinition.Features\noSketches = oDoc.ComponentDefinition.Sketches\next = 1\niFeat = 1\n'same pattern for other feature counts here\n\nFor Each oFeature In oFeatures 'look at all the features that make up the body\n\tSelect Case oFeature.Type\n\tCase = ObjectTypeEnum.kExtrudeFeatureObject\n\t\toFeature.Name = oFeature.SurfaceBodies(1).Name & \" - Ext. \" & If (ext < 10, \"0\" + CStr(ext), CStr(ext))\n\t\text = ext + 1\n\tCase = ObjectTypeEnum.kiFeatureObject\n\t\toFeature.Name = oFeature.SurfaceBodies(1).Name & \" - Ext. \" & If (iFeat < 10, \"0\" + CStr(iFeat), CStr(iFeat))\n\t\tiFeat = iFeat + 1\n\t'Case = ObjectTypeEnum.k...\n\t\t'same pattern as above\n\tEnd Select\nNext\n\nFor Each oSketch In OSketches\n\tIf oSketch.Type = ObjectTypeEnum.kPlanarSketchObject Then\n\t\tFor Each Dependent In oSketch.Dependents\n'\t\t\tIf Not Dependent.Definition Is Nothing Then\n'\t\t\t\toSketch.Name = Dependent.Definition.Parent.Name & \" - Sketch\"\n'\t\t\tEnd If\n\t\tNext\n\tEnd If\nNext"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Where is New Feature Face Name in Inventor 2019 API located\n                    ", "solution": ["Dim part1Def As PartComponentDefinition = part1.Definition 'my part1 came from an assembly component occurrence\nDim oFaces As Faces = part1Def.SurfaceBodies(1).Faces\nDim tempFace As Face\n\nFor Each oFace In oFaces\n\tAttSets = oFace.AttributeSets\n\tIf AttSets.NameIsUsed(\"iLogicEntityNameSet\") Then\n\t\tAttSet = AttSets.Item(\"iLogicEntityNameSet\")\n\t\tFor Each Att In AttSet\n\t\t\tIf Att.Value() = \"yourNamedFeature\" Then 'change name here\n\t\t\t\ttempFace = oFace\n\t\t\t\tLogger.Debug(\"tempFaceID Set\" & tempFace.InternalName)\n\t\t\tEnd If\n\t\tNext\n\tEnd If\nNext", "Sub Get_AllNames_from_Faces()\nDim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\n\nDim oCompDef As ComponentDefinition\nSet oCompDef = oDoc.ComponentDefinition\nDim oFaces As Faces\nSet oFaces = oCompDef.SurfaceBodies(1).Faces\nDim AttSets As AttributeSets\nDim AttSet As AttributeSet\n\nFor Each oface In oFaces\n Set AttSets = oface.AttributeSets\n If AttSets.NameIsUsed(\"iLogicEntityNameSet\") Then\n  Set AttSet = AttSets.item(\"iLogicEntityNameSet\")\n  For Each Att In AttSet\n    Debug.Print (\"Face Value: \" & Att.Value)\n  Next\n End If\nNext\nEnd Sub\n\nSub Get_SelectedNames_from_Faces()\nDim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\n\nDim CompDef As ComponentDefinition\nSet CompDef = oDoc.ComponentDefinition\nDim oSelect As SelectSet\nSet oSelect = oDoc.SelectSet\nDim oFaces As Faces\nSet oFaces = CompDef.SurfaceBodies(1).Faces\nDim AttSets As AttributeSets\nDim AttSet As AttributeSet\n\nFor Each item In oSelect\n Set AttSets = item.AttributeSets\n If AttSets.NameIsUsed(\"iLogicEntityNameSet\") Then\n  Set AttSet = AttSets.item(\"iLogicEntityNameSet\")\n  For Each Att In AttSet\n   If Att.Name = \"iLogicEntityName\" Then\n    'Get only the displayed Name of the Face\n    Debug.Print (\"Face Value: \" & Att.Value)\n   End If\n  Next\n End If\nNext\nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Change Face Color of Part With iLogic\n                    ", "solution": ["Dim oAssets as Assets\noAssets = oPartDoc.Assets\n\t\nDim oAsset as Asset\noAsset = oAssets.Item(\"Bamboo\")\n    \nFor Each oFace In oFaces \n     oFace.Appearance = oAsset\nNext"], "author": "R.Mabery"},
{"created at": [], "solution Title": "\n                        Re: Automate .ipt to adsk convertion\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "Document", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "CompDef", " = ", "oDoc", ".", "ComponentDefinition", "\n", "FullFileName", " = ", "\"YourFilePath\\YourFileName.adsk\"", "\n", "CompDef", ".", "BIMComponent", ".", "ExportBuildingComponent", "(", "FullFileName", ")\u00a0\u00a0"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Betreff: ilogic add a user parameter and set it as an iProperty\n                    ", "solution": ["iProperties.Value(\"Custom\", \"Comments\") = \"Test1234\""], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: Find All Constraints For Specified Component - iLogic\n                    ", "solution": ["Dim oDoc As AssemblyDocument = ThisDoc.Document\nDim oAsmDef As AssemblyComponentDefinition = oDoc.ComponentDefinition\nDim oConstrs As AssemblyConstraints = oAsmDef.Constraints\n\nFor Each oConstr As AssemblyConstraint In oConstrs\n    If oConstr.OccurrenceOne.Suppressed = True Or oConstr.OccurrenceOne.Suppressed = True Then\n        oConstr.Suppressed = True\n    Else\n        oConstr.Suppressed = False\n    End If\nNext", "Dim oDoc As AssemblyDocument = ThisDoc.Document\nDim oAsmDef As AssemblyComponentDefinition = oDoc.ComponentDefinition\nDim oConstrs As AssemblyConstraints = oAsmDef.Constraints\n\nFor Each oConstr As AssemblyConstraint In oConstrs\n    If oConstr.OccurrenceOne.Suppressed = True Or oConstr.", "OccurrenceTwo", ".Suppressed = True Then\n        oConstr.Suppressed = True\n    Else\n        oConstr.Suppressed = False\n    End If\nNext"], "author": "insomnix"},
{"created at": [], "solution Title": "\n                        Re: ilogic add custom property and value to selected assembly parts\n                    ", "solution": ["Dim oDoc As Document", "oDoc = ThisApplication.ActiveDocument", "'selected components collection", "Dim oSelected As ObjectCollection", "oSelected = ThisApplication.TransientObjects.CreateObjectCollection", "'Check that at least 1 is selected", "If oDoc.SelectSet.Count = 0 Then", "\u00a0\u00a0 \u00a0'MessageBox.Show(\"Please select a component.\", \"iLogic\")", "\u00a0\u00a0 \u00a0Exit Sub 'bail out", "End If", "'add to Object Collection", "For i = 1 To oDoc.SelectSet.Count", "\u00a0\u00a0 \u00a0If TypeOf oDoc.SelectSet.Item(i) Is ComponentOccurrence Then", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oSelected.Add (oDoc.selectSet.Item(i))", "\u00a0\u00a0 \u00a0End If", "Next", "Dim Occ as ComponentOccurrence", "\u00a0\u00a0 \u00a0If oSelected.Count >= 1 Then", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0For i =1 To oSelected.Count", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Occ=oSelected.item(i)", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0'SPL NOTE iPROPERTY", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Dim propertyName1 As String = \"SPL NOTE\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Dim propertyValue1 As String = \"-\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0customPropertySet = Occ.Definition.Document.PropertySets.Item(\"Inventor User Defined Properties\")", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Try", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0prop = customPropertySet.Item(propertyName1)", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0prop.Value=propertyValue1", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Catch", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0'Assume Error means Not found", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0customPropertySet.Add(\"\", propertyName1)", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0prop = customPropertySet.Item(propertyName1)", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0prop.Value=propertyValue1", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0End Try", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Next", "\u00a0\u00a0 \u00a0End If"], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Structured \"All Levels\" BOM: Expand all levels to be visible\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Find Face with FaceColor Attributes with iLogic\n                    ", "solution": ["Dim oPartDoc As PartDocument \noPartDoc = ThisDoc.Document 'ThisApplication.ActiveDocument"], "author": "insomnix"},
{"created at": [], "solution Title": "\n                        Re: iLogic Form: Text label that doesn't push input fields over\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: How to pick a folder in vba\n                    ", "solution": ["Function", " ", "BrowseForFolder", "(", "Optional", " ", "OpenAt", " ", "As", " ", "Variant", ")", " ", "As", " ", "Variant", "\n     ", "'", "Function purpose:  To Browser for a user selected folder.", "\n     ", "'", "If the \"OpenAt\" path is provided, open the browser at that directory", "\n     ", "'", "NOTE:  If invalid, it will open at the Desktop level", "\n\n    ", "Dim", " ", "ShellApp", " ", "As", " ", "Object", "\n\n     ", "'", "Create a file browser window at the default folder", "\n    ", "Set", " ", "ShellApp", " ", "=", " ", "CreateObject", "(", "\"", "Shell.Application", "\"", ")", ". ", "_", "\n    ", "BrowseForFolder", "(", "0", ", ", "\"", "Please choose a folder", "\"", ", ", "0", ", ", "OpenAt", ")", "\n\n     ", "'", "Set the folder to that selected.  (On error in case cancelled)", "\n    ", "On", " ", "Error", " ", "Resume", " ", "Next", "\n    ", "BrowseForFolder", " ", "=", " ", "ShellApp", ".", "self", ".", "Path", "\n    ", "On", " ", "Error", " ", "Goto", " ", "0", "\n\n     ", "'", "Destroy the Shell Application", "\n    ", "Set", " ", "ShellApp", " ", "=", " ", "Nothing", "\n\n     ", "'", "Check for invalid or non-entries and send to the Invalid error", "\n     ", "'", "handler if found", "\n     ", "'", "Valid selections can begin L: (where L is a letter) or", "\n     ", "'", "\\\\ (as in \\\\servername\\sharename.  All others are invalid", "\n    ", "Select", " ", "Case", " ", "Mid", "(", "BrowseForFolder", ", ", "2", ", ", "1", ")", "\n    ", "Case", " ", "Is", " ", "=", " ", "\"", ":", "\"", "\n        ", "If", " ", "Left", "(", "BrowseForFolder", ", ", "1", ")", " ", "=", " ", "\"", ":", "\"", " ", "Then", " ", "Goto", " ", "Invalid", "\n    ", "Case", " ", "Is", " ", "=", " ", "\"", "\\", "\"", "\n        ", "If", " ", "Not", " ", "Left", "(", "BrowseForFolder", ", ", "1", ")", " ", "=", " ", "\"", "\\", "\"", " ", "Then", " ", "Goto", " ", "Invalid", "\n    ", "Case", " ", "Else", "\n        ", "Goto", " ", "Invalid", "\n    ", "End", " ", "Select", "\n\n    ", "Exit Function", "\n\n", "Invalid", ":\n     ", "'", "If it was determined that the selection was invalid, set to False", "\n    ", "BrowseForFolder", " ", "=", " ", "False", "\n", "End Function", "\n\n"], "author": "Lewis.Young"},
{"created at": [], "solution Title": "\n                        Re: iLogic code to compose a string\n                    ", "solution": ["iProperties.Value(\"Custom\", \"SheetLabel\") = ActiveSheet.Size & \" (\" & ActiveSheet.Width & \" x \" & ActiveSheet.Height & \")\""], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule in Content Center Parts Error\n                    ", "solution": [], "author": "timothy.berg"},
{"created at": [], "solution Title": "\n                        Re: Insert iLogic Assembly Fail\n                    ", "solution": [], "author": "messt14"},
{"created at": [], "solution Title": "\n                        Re: Export Flat Pattern to DXF R12 failes if filename contains special chars\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Activate project for the first time by using VBA\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: External iLogic rule to create a local rule / Object reference not set...\n                    ", "solution": ["If Not IsNothing(RuleList) Then", "\n", "' Loop through all rules in document", "\n", "For", " ", "Each", " ", "R", " ", "As", " ", "Object", " ", "In", " ", "RuleList", "\n\t", "If", " ", "R", ".", "Name", " = ", "RuleName", " ", "Then", "\n\t\t", "' A rule with the same name already exists...", "\n\t\t", "RuleAlreadyExists", " = ", "True", "\n\t\t", "Exit", " ", "For", "\n\t", "End", " ", "If", "\n", "Next", "\n", "End If"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: iLogic Create Copies FROM Library Folder With Unique FILENAME (counter)\n                    ", "solution": ["Imports System.IO\nGetInput:\n\nSix_Digit = InputBox(\"Enter 6 Digit number\", \"iLogic\", 985236 )\n\nIf Six_Digit = \"\" Then\n\tReturn\nElse If Len(Six_Digit) <> \"6\" Then\n\tMessageBox.Show(\"Input must be 6 digits\", \"ilogic\")\n\tGoto GetInput\n\nEnd If\n\n\nDim oDoc As Document\nDim sFilename As String\n\n'hard code path\noLibrary_Folder = \"C:\\TEMP\\Library\\\"\n\n\nDim oFilenames() As String \noFilenames = System.IO.Directory.GetFiles(oLibrary_Folder, _ \n                      \"*.*\", SearchOption.AllDirectories )\n\t\t\t\t\t  \nFor Each oFilename As String In oFilenames \n\tIf oFilename.Contains(Six_Digit) Then\n\t\tDim oOptions As Inventor.NameValueMap\n\t\toOptions = ThisApplication.TransientObjects.CreateNameValueMap\t\t\n\t\toDoc = ThisApplication.Documents.OpenWithOptions(oFilename, oOptions, False)\t\n\t\tsFilename = oFilename\n\t\tExit For\n\tEnd If\nNext \n\nIf sFilename = \"\" Then\n\tMessageBox.Show(\"No matching libary file found.\", \"iLogic\")\n\tReturn\nEnd If\n\niCounter = 0\n\n'path from current file\n'oProjectfolder = ThisDoc.Path & \"\\\"\n\n'path from current project file ( *.ipj)\noProjectfolder = _\nThisApplication.DesignProjectManager.ActiveDesignProject.WorkspacePath & \"\\\"\n\n\nDim oProject_Filenames() As String \noProject_Filenames = System.IO.Directory.GetFiles(oProjectfolder, _ \n                      \"*.*\", SearchOption.AllDirectories )\n\t\t\t\t\t  \n'count existing project files\t\t\t\t\t  \nFor Each oFilename As String In oProject_Filenames \n\tIf oFilename.Contains(Six_Digit) Then\n\t\tiCounter = iCounter + 1\n\tEnd If\nNext \n\n'increment counter\niCounter = iCounter + 1\n\n\n'find the postion of the last backslash in the path\nFNamePos = InStrRev(sFilename, \"\\\", -1)   \n'get the file name with the file extension\noName = Right(sFilename, Len(sFilename) - FNamePos)\n'get the file name (without extension)\nShortName = Left(oName, Len(oName) - 4)\n'get extension\noExt = Right(oName, 4)\n\n\nIf iCounter < 10 Then\n\tiCounter = \"00\" + CStr(iCounter)\nElseIf iCounter < 100 Then\n\tiCounter =\"0\" + CStr(iCounter)\nElse \n\tiCounter = CStr(iCounter)\nEnd If\n\noNewName = ShortName & \"_\" & iCounter\n\noPathandName = oProjectfolder & oNewName & oExt\n\n'save new document\noDoc.SaveAs(oPathandName, True)\noDoc.Close\n\n'[ Place Component\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n' Create Matrix\nDim oMatrix As Matrix\noMatrix = ThisApplication.TransientGeometry.CreateMatrix\nCall oMatrix.SetTranslation(ThisApplication.TransientGeometry.CreateVector(50, 50, 50), True)\n\n\n'insert new occurence\nDim oOcc As ComponentOccurrence\noOcc = oAsmCompDef.Occurrences.Add( _\n    oPathandName, oMatrix)\n\t\noOcc.grounded = False\t\nThisDoc.Document.SelectSet.Select(oOcc)\n\n']\n\n'MessageBox.Show(\"New file created: \" & vbLf & oPathandName, \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: ThisApplication not declared\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Convert VBA code to code that can run in ilogic\n                    ", "solution": ["Class ThisRule\nDeclare Function SetCursorPos Lib \"user32.dll\"(ByVal X As Integer, ByVal Y As Integer) As Integer\nDeclare Sub mouse_event Lib \"user32\" (ByVal dwFlags As Integer, ByVal dx As Integer, ByVal dy As Integer, ByVal cButtons As Integer, ByVal dwExtraInfo As Integer)\nDeclare Function GetCursorPos Lib \"user32\" (ByRef lpPoint As POINTAPI) As Integer\nPublic Structure POINTAPI\nDim X As Integer\nDim Y As Integer\nEnd Structure\n\nConst MOUSEEVENTF_LEFTDOWN = &H2\nConst MOUSEEVENTF_LEFTUP = &H4\n\nPrivate Sub Main()\nDim P As POINTAPI\nGetCursorPos(P)\nSetCursorPos(300, 500)\nmouse_event(MOUSEEVENTF_LEFTDOWN Or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)\nSetCursorPos(P.X, P.Y)\nEnd Sub\nEnd Class"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iLogic Drawing: Sketched Symbol to Pull Excel Cell\n                    ", "solution": [], "author": "Chirpyboy206064"},
{"created at": [], "solution Title": "\n                        Re: Getting DrawingCurve object from dimension\n                    ", "solution": ["Dim App As Application\nSet App = ThisApplication\n\nDim DrwDoc As DrawingDocument\nSet DrwDoc = App.ActiveDocument\n\n \n\nDim Sheet As Sheet\nSet Sheet = DrwDoc.ActiveSheet\n\nDim DrawingDimensions As DrawingDimensions\nSet DrawingDimensions = Sheet.DrawingDimensions\n\nDim DrawingDimension As DrawingDimension\n\n \n\nFor Each DrawingDimension In DrawingDimensions\n\nDim LineOne As DrawingCurve\nSet LineOne = DrawingDimension.IntentOne.Geometry.Segments(1).Parent\nDim LineTwo As DrawingCurve\nSet LineTwo = DrawingDimension.IntentTwo.Geometry.Segments(1).Parent"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to pass the name of all the sheets into Comments Iproperties\n                    ", "solution": ["Sub Sheets()\n\tDim sSheets As String\n\tDim oSheet As Sheet\n    For Each oSheet In ThisDoc.Document.Sheets\n        oSheet.Name = UCase((Mid(ThisDoc.FileName(False), 1, 21)))\t\n\t\tIf oSheet Is ThisDoc.Document.Sheets.Item(1) Then\n\t\t\tsSheets = oSheet.Name\t\n\t\tElse\n\t\t\tsSheets = sSheets  & vbCrLf &  oSheet.Name\t\n\t\tEnd If\n    Next\n\tiProperties.Value(\"Summary\", \"Comments\") = sSheets\n    iLogicVb.UpdateWhenDone=True\n\t\nEnd Sub"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: I can't make a parabola curved surface with rotating a line\n                    ", "solution": [], "author": "kntkimura76"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Save drawing view to image file\n                    ", "solution": [], "author": "DWhiteley"},
{"created at": [], "solution Title": "\n                        Re: Suppress restrictions and return restrictions-including JOINT\n                    ", "solution": ["Dim", " ", "oAssDoc", " ", "As", " ", "AssemblyDocument", "\n", "oAssDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oConstraint", " ", "As", " ", "AssemblyConstraint", "\n", "Dim", " ", "oJoint", " ", "As", " ", "AssemblyJoint", "\n\n", "For", " ", "Each", " ", "oConstraint", " ", "In", " ", "oAssDoc", ".", "ComponentDefinition", ".", "Constraints", "\n", "oConstraint", ".", "Suppressed", " = ", "True", "\n", "Next", "\n\n", "For", " ", "Each", " ", "oJoint", " ", "In", " ", "oAssDoc", ".", "ComponentDefinition", ".", "Joints", "\n", "oJoint", ".", "Suppressed", "=", "True", "\n", "Next"], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: iLogic derived assembly variables\n                    ", "solution": [], "author": "Lewis.Young"},
{"created at": [], "solution Title": "\n                        Re: iLogic derived assembly variables\n                    ", "solution": ["    ' reference to the active assembly document\n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n    Dim oDef As AssemblyComponentDefinition\n    oDef = oDoc.ComponentDefinition\n\n    ' Create a new part document that will be the shrinkwrap substitute\n    Dim oPartDoc As PartDocument\n    oPartDoc = ThisApplication.Documents.Add(kPartDocumentObject, , False)\n\n    Dim oPartDef As PartComponentDefinition\n    oPartDef = oPartDoc.ComponentDefinition\n\n    Dim oDerivedAssemblyDef As DerivedAssemblyDefinition\n    oDerivedAssemblyDef = oPartDef.ReferenceComponents.DerivedAssemblyComponents.CreateDefinition(oDoc.FullDocumentName)\n\n    ' various shrinkwrap related options\n    oDerivedAssemblyDef.DeriveStyle = DerivedComponentStyleEnum.kDeriveAsSingleBodyNoSeams\n    oDerivedAssemblyDef.IncludeAllTopLevelWorkFeatures = DerivedComponentOptionEnum.kDerivedIncludeAll\n    oDerivedAssemblyDef.IncludeAllTopLevelSketches = DerivedComponentOptionEnum.kDerivedIncludeAll\n    oDerivedAssemblyDef.IncludeAllTopLeveliMateDefinitions = DerivedComponentOptionEnum.kDerivedExcludeAll\n    oDerivedAssemblyDef.IncludeAllTopLevelParameters = DerivedComponentOptionEnum.kDerivedExcludeAll\n    oDerivedAssemblyDef.ReducedMemoryMode = True\n\n\t' hole patching options\n    Call oDerivedAssemblyDef.SetHolePatchingOptions(DerivedHolePatchEnum.kDerivedPatchAll)\n    \n\t' remove geo. by visibility\n\tCall oDerivedAssemblyDef.SetRemoveByVisibilityOptions(DerivedGeometryRemovalEnum.kDerivedRemovePartsAndFaces, 25)\n\n    ' Create the shrinkwrap component\n    Dim oDerivedAssembly As DerivedAssemblyComponent\n    oDerivedAssembly = oPartDef.ReferenceComponents.DerivedAssemblyComponents.Add(oDerivedAssemblyDef)\n\n    ' Save the part\n    Dim strSubstituteFileName As String\n    strSubstituteFileName = Left$(oDoc.FullFileName, Len(oDoc.FullFileName) - 4)\n    strSubstituteFileName = strSubstituteFileName & \"_ShrinkwrapSubstitute.ipt\"\n\n    ThisApplication.SilentOperation = True\n    Call oPartDoc.SaveAs(strSubstituteFileName, False)\n    ThisApplication.SilentOperation = False\n\n    ' Create a substitute level of detail using the shrinkwrap part.\n    Dim oSubstituteLOD As LevelOfDetailRepresentation\n    oSubstituteLOD = oDef.RepresentationsManager.LevelOfDetailRepresentations.AddSubstitute(strSubstituteFileName)\n\n    ' Release reference of the invisibly opened part document.\n    oPartDoc.ReleaseReference"], "author": "Maarten.Elings"},
{"created at": [], "solution Title": "\n                        Re: iLogic - obtain solid body name using selected feature\n                    ", "solution": ["oDoc = ThisApplication.ActiveDocument\noBodies = oDoc.ComponentDefinition.SurfaceBodies\n\n'look at the bodies\nFor Each oBody In oBodies\n\ti = 1\n\t'look at all the features that make up the body\n\tFor Each oFeature In oBody.AffectedByFeatures\n\t\t'look at only extrude features\n\t\tIf oFeature.Type = ObjectTypeEnum.kExtrudeFeatureObject Then\n\t\t\t'rename feature using solid name\n\t\t\t'and pad the number with zero if under 10\n\t\t\toFeature.Name = oBody.Name _\n\t\t\t& \" - Ext. \" &  If(i < 10, \"0\" + CStr(i), CStr(i))\n\t\t\ti = i + 1\n\t\tEnd If\n\tNext\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Betreff: parallel axis theorem\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Ilogic: Object reference not set to an instance of an object.\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Ilogic: Object reference not set to an instance of an object.\n                    ", "solution": ["Dim oDoc As DrawingDocument \noDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\nDim oViews As DrawingViews\nDim oView As DrawingView\n\noSheet = ActiveSheet.Sheet\n\noViews = oSheet.DrawingViews\n\nIf oViews.Count > 0 Then\n\toView = oViews.Item(1)\n\toModelName = oView.ReferencedDocumentDescriptor.ReferencedDocument.DisplayName\n\t\n\tDim referDoc As Document\n\treferDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\t\n\toAssemblyState = referDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Design Status\").Value\n\tIf oAssemblyState = 1 Then\n\t\toAssemblyState = \"WorkInProgress\"\n\t\tElse If oAssemblyState = 2 Then\n\t\toAssemblyState = \"Pending\"\n\t\tElse If oAssemblyState = 3 Then\n\t\toAssemblyState = \"Released\"\n\tEnd If\n\t'MessageBox.Show(oAssemblyState, \"Assembly State\")\n\n\tParameter(\"ModelDesignState\") = oAssemblyState\n\nEnd If\n\n", "Dim oDoc As DrawingDocument \noDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\nDim oViews As DrawingViews\nDim oView As DrawingView\n\noSheet = ActiveSheet.Sheet\n\noViews = oSheet.DrawingViews\n\nIf oViews.Count > 0 Then\n\n\toView = oViews.Item(1)\n\toModelName = oView.ReferencedDocumentDescriptor.ReferencedDocument.DisplayName\n\tDim referDoc As Document \n\treferDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\t'MessageBox.Show(oModelName, \"Assembly Name\")\n\toNewState = Parameter.Value(\"ModelDesignState\")\n\t'MessageBox.Show(oNewState, \"Model Design State\")\n\n\toAssemblyState = Parameter.Value(\"ModelDesignState\")\n\n\tIf oAssemblyState = \"WorkInProgress\" Then\n\t\toAssemblyState = 1\n\t\tElse If oAssemblyState = \"Pending\" Then\n\t\toAssemblyState = 2\n\t\tElse If oAssemblyState = \"Released\" Then\n\t\toAssemblyState = 3\n\tEnd If\n\treferDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Design Status\").Value = oAssemblyState\n\n\t'iProperties.Value(oModelName, \"Status\", \"Design State\") = oAssemblyState\n\nEnd If\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Correct iLogic syntax\n                    ", "solution": ["Call oDerivedAssemblyDef.SetHolePatchingOptions(DerivedHolePatchEnum.kDerivedPatchAll)\nCall oDerivedAssemblyDef.SetRemoveByVisibilityOptions(DerivedGeometryRemovalEnum.kDerivedRemovePartsAndFaces, 50, True)"], "author": "Maarten.Elings"},
{"created at": [], "solution Title": "\n                        Re: Automate ipart member drawings updates  after member generation\n                    ", "solution": ["Sub Update_Drawings()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n\n    Dim oDef As PartComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    If oDef.IsiPartFactory = True Then\n        Dim iPartCell As iPartTableCell\n        Dim cnt As Integer\n        cnt = oDef.iPartFactory.FileNameColumn.Count\n        Dim i As Integer\n        For i = 1 To cnt\n            Set iPartCell = oDef.iPartFactory.FileNameColumn.Item(i)\n            Call Update_Memeber_Drawing(oDef.iPartFactory.MemberCacheDir, iPartCell.Value)\n        Next\n        \n    Else\n        MsgBox (\"Part document is not iPart Factory\")\n        Exit Sub\n    End If\n    \nEnd Sub\n\nSub Update_Memeber_Drawing(dir_Name As String, memberName As String)\n    \n    Dim oMemeber_path As String\n    oMemeber_path = dir_Name & \"\\\" & memberName & \".dwg\"\n    \n    ThisApplication.SilentOperation = True\n    \n    Dim oDrawdoc As DrawingDocument\n    Set oDrawdoc = ThisApplication.Documents.Open(oMemeber_path, False)\n    \n    Call oDrawdoc.Update\n    \n    Call oDrawdoc.Save\n    \n    Call oDrawdoc.Close\n    \n    ThisApplication.SilentOperation = False\n    \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Apprentice Error while opening a contentcenter part\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: copying paramater in .idw?\n                    ", "solution": ["Try", "\n    ", "'", "check for parameter ", "\n    ", "oTest", " ", "=", " ", "Parameter", "(", "\"", "ModelDesignState", "\"", ")", " \n", "Catch", "\n    ", "'", "create multi-value text parameter", "\n    ", "ThisDoc", ".", "Document", ".", "Parameters", ".", "UserParameters", ".", "AddByValue", " ", "_", "\n    ", "(", "\"", "ModelDesignState", "\"", ", ", "\"", "WorkInProgress", "\"", ", ", "UnitsTypeEnum", ".", "kTextUnits", ")", "\n", "End", " ", "Try", "\n\n", "'", "set list", "\n", "MultiValue", ".", "SetList", "(", "\"", "ModelDesignState", "\"", ", ", "\"", "WorkInProgress", "\"", ", ", "\"", "Pending", "\"", ", ", "\"", "Released", "\"", ")", "\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Break Link changes lines\n                    ", "solution": ["Sub Main()\n\tDim oDoc As PartDocument \n\toDoc = ThisApplication.ActiveDocument \n\t\n\tDim oDef As PartComponentDefinition \n\toDef = oDoc.ComponentDefinition \n\t\n\tCall oDoc.Rebuild()\n\t\n\tDim oSketch As Sketch \n\toSketch = oDef.Sketches.Item(\"Sketch5\")\n\tBreakAllLinks(oSketch)\nEnd Sub \nPublic Sub BreakAllLinks(sketch As Sketch)\n\t\n\t\tsketch.Edit()\n        For Each en As SketchEntity In sketch.SketchEntities\n            en.Reference = False\n        Next\n\t\tsketch.ExitEdit()\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Having trouble converting a VBA Macro into iLogic\n                    ", "solution": ["Sub Main()\n\tDupeSelectionWithConstraints()\nEnd Sub\nPrivate oNewlyInsertedColl As Collection\nPrivate oOriginalItemColl As Collection\n\nPublic Sub DupeSelectionWithConstraints()\n    If ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then MsgBox (\"Rule not valid for non-assembly files!\"): Exit Sub\n    \n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSS As SelectSet\n    oSS = oDoc.SelectSet\n    \n    If oSS.Count < 1 Then MsgBox (\"Rule Requires a Select Set!\"): Exit Sub\n    \n    Call DuplicateSS(oDoc, oSS)\nEnd Sub\n\n\nPrivate Sub DuplicateSS(oParentDoc As Document, oSS As SelectSet)\n     \n\tDim oDoc As AssemblyDocument\n\toDoc = oParentDoc\n\t \n\tDim oTG As TransientGeometry\n    oTG = ThisApplication.TransientGeometry\n    \n    oPasteMatrix = oTG.CreateMatrix()\n    \n\tDim oDef As AssemblyComponentDefinition \n\toDef = oDoc.ComponentDefinition \n\t\n    oOriginalItemColl = New Collection\n    oNewlyInsertedColl = New Collection\n\t \n    For Each oItem In oSS  \n        oPasteMatrix = oItem.Transformation\n        oNewOcc = oDef.Occurrences.Add(oItem.Definition.Document.FullDocumentName, oPasteMatrix)        \n\t\toOriginalItemColl.Add(oItem)\n        oNewlyInsertedColl.Add(oNewOcc)\t \n    Next\n    \n    Dim oTestoOcc1 As Object\n    Dim oTestoOcc2 As Object\n    \n    Dim oOcc1 As ComponentOccurrence\n    Dim oOcc2 As ComponentOccurrence\n    \n    Dim oEntityOne As Object\n    Dim oEntityTwo As Object\n    \n    For Each oConstraint In oDef.Constraints\n    'Grab entities for new constraint to create\n\t\t\t \n            oTestoOcc1 = GrabObjectFromColl(oOriginalItemColl, oConstraint.OccurrenceOne)\n            oTestoOcc2 = GrabObjectFromColl(oOriginalItemColl, oConstraint.OccurrenceTwo)\n            \n            If oTestoOcc1 Is Nothing And oTestoOcc2 Is Nothing Then GoTo NextConstraint\n            \n            If oTestoOcc1 Is Nothing Then\n                 oEntityOne = oConstraint.EntityOne\n            Else\n                For Each oPossibleOcc In oNewlyInsertedColl\n                    If oPossibleOcc.Definition Is oTestoOcc1.Definition Then\n                         oOcc1 = oPossibleOcc\n                    End If\n                Next\t\t\t\t\n                Call oOcc1.CreateGeometryProxy(GetProxy(oConstraint.EntityOne, oOcc1), oEntityOne)\n            End If\n            \n            If oTestoOcc2 Is Nothing Then\n                oEntityTwo = oConstraint.EntityTwo\n            Else\n                For Each oPossibleOcc In oNewlyInsertedColl\n                    If oPossibleOcc.Definition Is oTestoOcc2.Definition Then\n                        oOcc2 = oPossibleOcc\n                    End If\n                Next\n                Call oOcc2.CreateGeometryProxy(GetProxy(oConstraint.EntityTwo, oOcc2), oEntityTwo)\n            End If\n        'End Grab entities\n        \n        \n        'Check type of constraint\n        Select Case oConstraint.Type\n            Case ObjectTypeEnum.kAngleConstraintObject 'kAngleConstraintObject\n                'oParentDoc.Constraints.AddAngleConstraint(EntityOne As Object,\n                '                                          EntityTwo As Object,\n                '                                          Angle As Variant,\n                '                                          [SolutionType] As AngleConstraintSolutionTypeEnum,\n                '                                          [ReferenceVectorEntity] As Variant,\n                '                                          [BiasPointOne] As Variant,\n                '                                          [BiasPointTwo] As Variant )\n                '                                      As AngleConstraint\n                Call oDef.Constraints.AddAngleConstraint(oEntityOne, oEntityTwo, oConstraint.Angle, oConstraint.SolutionType, oConstraint.ReferenceVectorEntity)\n                \n            Case ObjectTypeEnum.kAssemblySymmetryConstraintObject  'kAssemblySymmetryConstraintObject\n                'oParentDoc.AddSymmetryConstraint( EntityOne As Object,\n                '                                  EntityTwo As Object,\n                '                                  SymmetryPlane As Object,\n                '                                  [EntityOneInferredType] As InferredTypeEnum,\n                '                                  [EntityTwoInferredType] As InferredTypeEnum,\n                '                                  [NormalsOpposed] As Boolean )\n                '                                 As AssemblySymmetryConstraint\n                Call oDef.Constraints.AddSymmetryConstraint(oEntityOne, oEntityTwo, oConstraint.SymmetryPlane, oConstraint.EntityOneInferredType, oConstraint.EntityTwoInferredType, oConstraint.NormalsOpposed)\n                \n            Case ObjectTypeEnum.kFlushConstraintObject 'kFlushConstraintObject\n                'oParentDoc.AddFlushConstraint( EntityOne As Object,\n                '                               EntityTwo As Object,\n                '                               Offset As Variant,\n                '                               [BiasPointOne] As Variant,\n                '                               [BiasPointTwo] As Variant )\n                '                            As FlushConstraint\n                Call oDef.Constraints.AddFlushConstraint(oEntityOne, oEntityTwo, oConstraint.Offset.Expression)\n                \n                \n            Case ObjectTypeEnum.kInsertConstraintObject 'kInsertConstraintObject\n                'oParentDoc.AddInsertConstraint( EntityOne As Object,\n                '                                EntityTwo As Object,\n                '                                AxesOpposed As Boolean,\n                '                                Distance As Variant,\n                '                                [BiasPointOne] As Variant,\n                '                                [BiasPointTwo] As Variant )\n                '                             As InsertConstraint\n                Call oDef.Constraints.AddInsertConstraint(oEntityOne, oEntityTwo, oConstraint.AxesOpposed, oConstraint.Distance.Expression)\n                \n            Case ObjectTypeEnum.kMateConstraintObject 'kMateConstraintObject\n                'oParentDoc.AddMateConstraint( EntityOne As Object,\n                '                               EntityTwo As Object,\n                '                               Offset As Variant,\n                '                               [EntityOneInferredType] As InferredTypeEnum,\n                '                               [EntityTwoInferredType] As InferredTypeEnum,\n                '                               [BiasPointOne] As Variant,\n                '                               [BiasPointTwo] As Variant )\n                '                             As MateConstraint\n                Call oDef.Constraints.AddMateConstraint(oEntityOne, oEntityTwo, oConstraint.Offset.Expression, oConstraint.EntityOneInferredType, oConstraint.EntityTwoInferredType)\n                \n            Case ObjectTYpeEnum.kTangentConstraintObject 'kTangentConstraintObject\n                '.AddTangentConstraint( EntityOne As Object,\n                '                       EntityTwo As Object,\n                '                       InsideTangency As Boolean,\n                '                       Offset As Variant,\n                '                       [BiasPointOne] As Variant,\n                '                       [BiasPointTwo] As Variant )\n                '                     As TangentConstraint\n                Call oDef.Constraints.AddTangentConstraint(oEntityOne, oEntityTwo, oConstraint.InsideTangency, oConstraint.Offset.Expression)\n            \n        End Select\nNextConstraint:\n    Next 'constraint\n    \n    \nEnd Sub\n\nPrivate Function GrabObjectFromColl(ByVal oColl As Collection, ByVal oObj As Object) As Object\n    For Each oItem In oColl\n        If oItem Is oObj Then\n            GrabObjectFromColl = oObj\n            Exit Function\n        End If\n    Next\n    GrabObjectFromColl = Nothing\nEnd Function\n\nPrivate Function GetProxy(ByRef Prxy As Object, ByRef ContOcc As ComponentOccurrence) As Object\n\t\n    Dim TempPrxy As Object\n    Dim Occ As ComponentOccurrence\n    If Prxy.ContainingOccurrence.Type = ObjectTypeEnum.kComponentOccurrenceObject Then         \n\t\tOcc = ContOcc\t\t \n    Else\n        On Error Resume Next\n             Occ = ContOcc.Definition.Occurrences.ItemByName(Prxy.ContainingOccurrence.Name)\n            \n        If Err.Number <> 0 Then\n            On Error GoTo 0\n            TempPrxy = Prxy.ContainingOccurrence\n            Call ContOcc.CreateGeometryProxy(GetProxy(TempPrxy, ContOcc), Occ)\n        End If\n    End If \n    Call Occ.CreateGeometryProxy(Prxy.NativeObject, GetProxy)\nEnd Function ", "If Not oOcc1 Is Nothing  Then 'This is the one that works\n'\t\t\t\toEntityOne = oNewEntity\n\t\t\t\tMessageBox.Show(\"Occurence 1 is the Copied Part\", \"iLogic\")\n\t\t\tElse If Not  oOcc2 Is Nothing  Then 'This is the one that returns an error\n'\t\t\t\toEntityTwo = oNewEntity\n\t\t\t\tMessageBox.Show(\"Occurence 1 is Not the Copied Part\", \"iLogic\")\n\t\t\tEnd If", "Sub Main()\n\tDupeSelectionWithConstraints()\nEnd Sub\nPrivate oNewlyInsertedColl As Collection\nPrivate oOriginalItemColl As Collection\n\nPublic Sub DupeSelectionWithConstraints()\n    If ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then MsgBox (\"Rule not valid for non-assembly files!\"): Exit Sub\n    \n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSS As SelectSet\n    oSS = oDoc.SelectSet\n    \n    If oSS.Count < 1 Then MsgBox (\"Rule Requires a Select Set!\"): Exit Sub\n    \n    Call DuplicateSS(oDoc, oSS)\nEnd Sub\n\n\nPrivate Sub DuplicateSS(oParentDoc As Document, oSS As SelectSet)\n     \n\tDim oDoc As AssemblyDocument\n\toDoc = oParentDoc\n\t \n\tDim oTG As TransientGeometry\n    oTG = ThisApplication.TransientGeometry\n    \n    oPasteMatrix = oTG.CreateMatrix()\n    \n\tDim oDef As AssemblyComponentDefinition \n\toDef = oDoc.ComponentDefinition \n\t\n    oOriginalItemColl = New Collection\n    oNewlyInsertedColl = New Collection\n\t \n    For Each oItem In oSS  \n        oPasteMatrix = oItem.Transformation\n        oNewOcc = oDef.Occurrences.Add(oItem.Definition.Document.FullDocumentName, oPasteMatrix)        \n\t\toOriginalItemColl.Add(oItem)\n        oNewlyInsertedColl.Add(oNewOcc)\t \n    Next\n\t\n'    Dim oNewEntity As Object = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllEntitiesFilter, \"Please select a new constraint entity\")\n\t\n    Dim oTestoOcc1 As Object\n    Dim oTestoOcc2 As Object\n    \n    Dim oOcc1 As ComponentOccurrence\n    Dim oOcc2 As ComponentOccurrence\n    \n    Dim oEntityOne As Object\n    Dim oEntityTwo As Object\n    \n    For Each oConstraint In oDef.Constraints\n    'Grab entities for new constraint to create\n\t\t\t \n            oTestoOcc1 = GrabObjectFromColl(oOriginalItemColl, oConstraint.OccurrenceOne)\n            oTestoOcc2 = GrabObjectFromColl(oOriginalItemColl, oConstraint.OccurrenceTwo)\n\t\t\t\n            \n            If oTestoOcc1 Is Nothing And oTestoOcc2 Is Nothing Then GoTo NextConstraint\n            \n            If oTestoOcc1 Is Nothing Then\n                 oEntityOne = oConstraint.EntityOne\n            Else\n                For Each oPossibleOcc In oNewlyInsertedColl\n                    If oPossibleOcc.Definition Is oTestoOcc1.Definition Then\n                         oOcc1 = oPossibleOcc\n                    End If\n                Next\n'\t\t\t\tIf oOcc1.Name = oNewOcc.Name Then\n'\t\t\t\t\tCall oOcc1.CreateGeometryProxy(GetProxy(oConstraint.EntityOne, oOcc1), oEntityOne)\n'\t\t\t\tElse If Not oOcc1.Name = oNewOcc.Name Then\n'                \tCall oOcc1.CreateGeometryProxy(GetProxy(oConstraint.EntityOne, oOcc1), oNewEntity)\n'\t\t\t\tEnd If\n\t\t\t\tCall oOcc1.CreateGeometryProxy(GetProxy(oConstraint.EntityOne, oOcc1), oEntityOne)\n            End If\n            \n            If oTestoOcc2 Is Nothing Then\n                oEntityTwo = oConstraint.EntityTwo\n            Else\n                For Each oPossibleOcc In oNewlyInsertedColl\n                    If oPossibleOcc.Definition Is oTestoOcc2.Definition Then\n                        oOcc2 = oPossibleOcc\n                    End If\n                Next\n'\t\t\t\tIf oOcc2.Name = oNewOcc.Name Then\n'\t\t\t\t\tCall oOcc2.CreateGeometryProxy(GetProxy(oConstraint.EntityTwo, oOcc2), oEntityTwo)\n'\t\t\t\tElse If Not oOcc2.Name = oNewOcc.Name Then\n'                \tCall oOcc2.CreateGeometryProxy(GetProxy(oConstraint.EntityTwo, oOcc2), oNewEntity)\n'\t\t\t\tEnd If\n                Call oOcc2.CreateGeometryProxy(GetProxy(oConstraint.EntityTwo, oOcc2), oEntityTwo)\n            End If \t\t\n\t\t\t \n\t\t\t\n\t\t\tIf Not oOcc1 Is Nothing  Then 'This is the one that works\n'\t\t\t\toEntityOne = oNewEntity\n\t\t\t\tMessageBox.Show(\"Occurence 1 is the Copied Part\", \"iLogic\")\n\t\t\tElse If Not  oOcc2 Is Nothing  Then 'This is the one that returns an error\n'\t\t\t\toEntityTwo = oNewEntity\n\t\t\t\tMessageBox.Show(\"Occurence 1 is Not the Copied Part\", \"iLogic\")\n\t\t\tEnd If\n\t\t\t\n\t\t\t\n        'End Grab entities\n        \n        \n        'Check type of constraint\n        Select Case oConstraint.Type\n            Case ObjectTypeEnum.kAngleConstraintObject \n                Call oDef.Constraints.AddAngleConstraint(oEntityOne, oEntityTwo, oConstraint.Angle, oConstraint.SolutionType, oConstraint.ReferenceVectorEntity)\n                \n            Case ObjectTypeEnum.kAssemblySymmetryConstraintObject \n                Call oDef.Constraints.AddSymmetryConstraint(oEntityOne, oEntityTwo, oConstraint.SymmetryPlane, oConstraint.EntityOneInferredType, oConstraint.EntityTwoInferredType, oConstraint.NormalsOpposed)\n                \n            Case ObjectTypeEnum.kFlushConstraintObject\n                Call oDef.Constraints.AddFlushConstraint(oEntityOne, oEntityTwo, oConstraint.Offset.Expression)\n                \n                \n            Case ObjectTypeEnum.kInsertConstraintObject \n                Call oDef.Constraints.AddInsertConstraint(oEntityOne, oEntityTwo, oConstraint.AxesOpposed, oConstraint.Distance.Expression)\n                \n            Case ObjectTypeEnum.kMateConstraintObject \n                Call oDef.Constraints.AddMateConstraint(oEntityOne, oEntityTwo, oConstraint.Offset.Expression, oConstraint.EntityOneInferredType, oConstraint.EntityTwoInferredType)\n                \n            Case ObjectTypeEnum.kTangentConstraintObject \n                Call oDef.Constraints.AddTangentConstraint(oEntityOne, oEntityTwo, oConstraint.InsideTangency, oConstraint.Offset.Expression)\n            \n        End Select\nNextConstraint :\n    Next 'constraint\n    \n    \nEnd Sub\n\nPrivate Function GrabObjectFromColl(ByVal oColl As Collection, ByVal oObj As Object) As Object\n    For Each oItem In oColl\n        If oItem Is oObj Then\n            GrabObjectFromColl = oObj\n            Exit Function\n        End If\n    Next\n    GrabObjectFromColl = Nothing\nEnd Function\n\nPrivate Function GetProxy(ByRef Prxy As Object, ByRef ContOcc As ComponentOccurrence) As Object\n\t\n    Dim TempPrxy As Object\n    Dim Occ As ComponentOccurrence\n    If Prxy.ContainingOccurrence.Type = ObjectTypeEnum.kComponentOccurrenceObject Then         \n\t\tOcc = ContOcc\t\t \n    Else\n        On Error Resume Next\n             Occ = ContOcc.Definition.Occurrences.ItemByName(Prxy.ContainingOccurrence.Name)\n            \n        If Err.Number <> 0 Then\n            On Error GoTo 0\n            TempPrxy = Prxy.ContainingOccurrence\n            Call ContOcc.CreateGeometryProxy(GetProxy(TempPrxy, ContOcc), Occ)\n        End If\n    End If \n    Call Occ.CreateGeometryProxy(Prxy.NativeObject, GetProxy)\nEnd Function"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Need a sheet name pushed to a prompted entry in the Titleblock\n                    ", "solution": ["dwgDoc = ThisDoc.Document\noSheetName = dwgDoc.ActiveSheet.Name\n'split the name into a string array using colon\nDim sSplit As String() = oSheetName.Split(New Char() {\":\"c})\n\n'get the first member of array\noSheetName = sSplit(0)\nMessageBox.Show(oSheetName, \"SheetName\")\n\n'get the second member of array\noSheetNumber = sSplit(1)\nMessageBox.Show(oSheetNumber, \"SheetNumber\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Rectangular Pattern of Feature vs Solid Body\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: wordApp = Interaction.CreateObject(\"Word.Application\")\n                    ", "solution": ["oWord = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Word.Application\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Error face not planar on selected part VBA Ifeature\n                    ", "solution": ["Public Sub PlaceTableDriveniFeature()\n\n' Get the part document and component definition of the active document.\nOn Error Resume Next\nDim oPartDoc As PartDocument\nSet oPartDoc = ThisApplication.ActiveDocument\nIf Err Then\n    MsgBox \"A part must be active.\"\n    Exit Sub\nEnd If\n\nDim oPartDef As PartComponentDefinition\nSet oPartDef = oPartDoc.ComponentDefinition\n\n' Get the selected face to use as input for the iFeature.\nDim oFace As Face\nSet oFace = oPartDoc.SelectSet.Item(1)\nIf Err Then\n    MsgBox \"A planar face must be selected.\"\n    Exit Sub\nEnd If\nOn Error GoTo 0\n\nIf ", "Not", " oFace.SurfaceType = kPlaneSurface Then 'When this is added error message occurs <----- ADDED 'NOT'\n\n    MsgBox \"A planar face must be selected.\"\n    Exit Sub\nEnd If\n\nDim oFeatures As PartFeatures\nSet oFeatures = oPartDef.Features\n\n' Create an iFeatureDefinition object.\nDim oiFeatureDef As iFeatureDefinition\nSet oiFeatureDef = oFeatures.iFeatures.CreateiFeatureDefinition(\"C:\\CAD_Work\\MX.ide\")\n\n' Set the input, which in this case is only the sketch plane\n' since the other input comes from the table. The parameter input\n' should not be available at this point since it can't be changed\n' and is controlled by the table.\n'\n' When an existing table driven iFeature is accessed then this should\n' include the parameters so the programmer has access to the corresponding\n' reference parameter that's created.\nDim bFoundPlaneInput As Boolean\nbFoundPlaneInput = False\nDim oInput As iFeatureInput\nFor Each oInput In oiFeatureDef.iFeatureInputs\nDim oParamInput As iFeatureParameterInput\nSelect Case oInput.Name\nCase \"Profile Plane1\"\nDim oPlaneInput As iFeatureSketchPlaneInput\nSet oPlaneInput = oInput\noPlaneInput.PlaneInput = oFace\nbFoundPlaneInput = True\nEnd Select\nNext\n\nIf Not bFoundPlaneInput Then\n    MsgBox \"The ide file does not contain an iFeature input named \"\"Profile Plane1\"\".\"\n    Exit Sub\nEnd If\n\n'** Look through the table to find the row where \"MEMBER\" is \"M8\".\nDim oTable As iFeatureTable\nSet oTable = oiFeatureDef.iFeatureTable\n\n' Find the \"Size\" column.\nDim oColumn As iFeatureTableColumn\nDim bFoundSize As Boolean\nbFoundSize = False\nFor Each oColumn In oTable.iFeatureTableColumns\n    If oColumn.DisplayHeading = \"MEMBER\" Then\n        bFoundSize = True\n        Exit For\n    End If\nNext\n\nIf Not bFoundSize Then\n    MsgBox \"The column MEMBER was not found.\"\n    Exit Sub\nEnd If\n\n' Find the row in the \"MEMBER column with the value of \"M8\"\nDim oCell As iFeatureTableCell\nbFoundSize = False\nFor Each oCell In oColumn\n    If oCell.Value = \"M8\" Then\n        bFoundSize = True\n        Exit For\n    End If\nNext\n\nIf Not bFoundSize Then\n    MsgBox \"The cell with value M8 was not found.\"\n    Exit Sub\nEnd If\n\n' Set this row as the active row.\noiFeatureDef.ActiveTableRow = oCell.Row\n\n' Create the iFeature.\nDim oiFeature As iFeature\n\nSet oiFeature = oFeatures.iFeatures.Add(oiFeatureDef)\n\nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Change Design View Representation of Sub-Assembly in Assembly\n                    ", "solution": ["Dim oDoc As AssemblyDocument = ThisDoc.Document\n    Dim oCompDef As Inventor.ComponentDefinition = oDoc.ComponentDefinition\n    Dim oCompOcc As Inventor.ComponentOccurrence\n\n    For Each oCompOcc In oCompDef.Occurrences\n        If oCompOcc.Name = \"std drwr:1\" Then\n            Try\n                oCompOcc.SetDesignViewRepresentation(\"tan\",,True)\n            Catch\n                MessageBox.Show(\"This viewrep does not exist\", \"Error\")\n            End Try\n        End If\n    Next"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Create a selectable list for DXF Generation\n                    ", "solution": ["Sub Main()", " ", " Dim comps As ObjectCollection", " Dim comp As ComponentOccurrence", " comps = ThisApplication.TransientObjects.CreateObjectCollection", " While True", " comp = ThisApplication.CommandManager.Pick(", " SelectionFilterEnum.kAssemblyOccurrenceFilter, ", " \"Select a component\") ", " ", " ' If nothing gets selected then we're done ", " If IsNothing(comp) Then Exit While", " ", " comps.Add(comp) ", " End While", " ' If there are selected components we can do something", " For Each comp In comps", "      Genereate_DXF(comp.Definition.Document)", " Next", "End Sub", "Sub Genereate_DXF(doc As PartDocument)", " 'If check whether doc is Sheet metal or not ", " 'Code to generate dxf from doc", "End Sub", "Sub Main()\nDim oRuleTitle As String = \"Export to DXF\"\n\nDim oActiveDoc As Inventor.AssemblyDocument\n\nTry\n\toActiveDoc = ThisApplication.ActiveDocument\nCatch\n\tMessageBox.Show(\"Please activate an Assembly document first.\",oRuleTitle,MessageBoxButtons.OK,MessageBoxIcon.Error)\n\tReturn\nEnd Try\n\nDim oSMDocs As New List(Of Inventor.PartDocument) 'This is a list of all sheet metal documents that COULD be exported\nDim oExportDocs As New List(Of Inventor.PartDocument) 'This is the list of sheet metal documents the user WANTS to export\n\nFor Each oRefDoc As Inventor.Document In oActiveDoc.AllReferencedDocuments\n\t'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t'~~~~~Your code that determines if the document is a sheet metal part~~~~~\n\t'~~~~~~~~~~~~(My code currently just adds all Part documents)~~~~~~~~~~~~~\n\tIf oRefDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n\t\tIsSheetMetal = True\n\tElse\n\t\tIsSheetMetal = False\n\tEnd If\n\t'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\n\tIf IsSheetMetal = True Then\n\t\toSMDocs.Add(oRefDoc)\n\tEnd If\nNext 'oRefDoc\n\noExportDocs.AddRange(oSMDocs) 'Begin by assuming user wants to export all sheet metal documents.\n\n'Ask user to specify which documents to export\nDim oInput As String\nDim oIndex As Integer\nDim oPartDoc As Inventor.PartDocument\n\nDo\n\t'Populate list of all documents, with \"checks\" and numbering\n\toDocList = CreateDocList(oSMDocs,oExportDocs)\n\t\n\t'Display prompt with list and valid inputs\n\toInput = InputBox( _\n\t\t\"Below is a list of all Sheet Metal parts. Items with an \"\"x\"\" will be exported to a DXF.\" & vbCrLf & _\n\t\tvbCrLf & _\n\t\t\"Enter the number before an item to toggle its export setting. You can also enter a range like \"\"10-20\"\" (without quotes).\" & vbCrLf & _\n\t\tvbCrLf & _\n\t\t\"Enter \"\"a\"\" to toggle all\" & vbCrLf & _\n\t\tvbCrLf & _\n\t\toDocList & _\n\t\tvbCrLf & _\n\t\t\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" & vbCrLf & _\n\t\t\"To run export, hit Enter or click OK.\" & vbCrLf & _\n\t\tvbCrLf & _\n\t\t\"To cancel, hit Escape or click Cancel.\" _\n\t\t,oRuleTitle, \"r\")\n\t\n\t'Respond appropriately to user's input\n\tIf oInput = \"\" Then\n\t\tExit Do\n\tElse If oInput.ToLower = \"r\" Then\n\t\tExit Do\n\tElse\n\t\tDashPos = InStr(oInput,\"-\")\n\t\t\n\t\tIf IsNumeric(oInput) Or DashPos > 0 Or oInput.ToLower = \"a\" Then\n\t\t\tIf IsNumeric(oInput) Then\n\t\t\t\toStartNum = CDblAny(oInput)\n\t\t\t\toEndNum = oStartNum\n\t\t\tElse If DashPos > 0 Then\n\t\t\t\tBeforeDash = Left(oInput,DashPos-1)\n\t\t\t\tAfterDash = Mid(oInput,DashPos+1)\n\t\t\t\t\n\t\t\t\tTry\n\t\t\t\t\toStartNum = CDblAny(BeforeDash)\n\t\t\t\t\toEndNum = CDblAny(AfterDash)\n\t\t\t\tCatch\n\t\t\t\t\toStartNum = -1\n\t\t\t\t\toEndNum = -1\n\t\t\t\tEnd Try\n\t\t\tElse If oInput.ToLower = \"a\" Then\n\t\t\t\toStartNum = 1\n\t\t\t\toEndNum = oSMDocs.Count\n\t\t\tEnd If\n\t\t\n\t\t\tTry\n\t\t\t\tFor i = oStartNum To oEndNum\n\t\t\t\t\toIndex = i - 1\n\t\t\t\t\t\n\t\t\t\t\toPartDoc = oSMDocs.Item(oIndex)\n\t\t\t\t\t\n\t\t\t\t\tIf oExportDocs.Contains(oPartDoc) Then\n\t\t\t\t\t\toExportDocs.Remove(oPartDoc)\n\t\t\t\t\tElse\n\t\t\t\t\t\toExportDocs.Add(oPartDoc)\n\t\t\t\t\tEnd If\n\t\t\t\tNext\n\t\t\tCatch\n\t\t\t\toAnswer = MessageBox.Show(\"Please enter a valid number or range.\",oRuleTitle,MessageBoxButtons.OKCancel,MessageBoxIcon.Error)\n\t\t\t\t\n\t\t\t\tIf oAnswer = vbCancel Then\n\t\t\t\t\toInput = \"\"\n\t\t\t\t\tExit Do\n\t\t\t\tEnd If\n\t\t\t\toValidRange = False\n\t\t\tEnd Try\n\t\tElse\n\t\t\tMessageBox.Show(\"Please enter a valid input.\",oRuleTitle,MessageBoxButtons.OK,MessageBoxIcon.Error)\n\t\tEnd If 'Input is one that toggles some documents\n\tEnd If 'Input is...\nLoop Until oInput.ToLower = \"r\" Or oInput = \"\"\n\nIf oInput = \"\" Then\n\tMessageBox.Show(oRuleTitle & \" canceled.\",oRuleTitle,MessageBoxButtons.OK,MessageBoxIcon.Information)\n\tReturn\nEnd If\n\n'Begin DXF export\nFor Each oPartDoc In oExportDocs\n\t'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t'~~~~~Your code that exports Sheet Metal part to DXF~~~~~\n\t'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nNext\n\n'~~~~~Display final message~~~~~\nMessageBox.Show(\"Finished exporting (\" & oExportDocs.Count & \") sheet metal parts to DXF!\",oRuleTitle,MessageBoxButtons.OK,MessageBoxIcon.Information)\n\nEnd Sub\n\nFunction CreateDocList(oSMDocs As List(Of Inventor.PartDocument),oExportDocs As List(Of Inventor.PartDocument)) As String\n\tDim oListText As String = \"\"\n\tDim oItem As Integer = 0\n\t\n\tFor Each oPartDoc As Inventor.PartDocument In oSMDocs\n\t\toItem = oItem + 1\n\t\t\n\t\tIf oExportDocs.Contains(oPartDoc) Then\n\t\t\toCheckmark = \"x\"\n\t\tElse\n\t\t\toCheckmark = \"  \"\n\t\tEnd If\n\t\t\n\t\toFilename = System.IO.Path.GetFileNameWithoutExtension(oPartDoc.FullFileName) \n\t\t\n\t\toListText = oListText & \"[\" & oCheckmark & \"] \" & oItem.ToString(\"00.\") & \"    \" & oFilename & vbCrLf\n\tNext\n\t\n\tReturn oListText\nEnd Function"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Change pos rep on drawing view\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Line break: vbNewLine vs. vbCrLf vs. vbCr vs. vbLf\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Driving iLogic Assembly from Drawing Sheet using iLogic and Form\n                    ", "solution": [], "author": "Thomas_Savage"},
{"created at": [], "solution Title": "\n                        Re: iLogic Len() Function in IV2018\n                    ", "solution": ["MessageBox.Show(\"Stock Number: \" & StockNo & vbCrLf & \"String length: \" & StringLength)"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Create Constrain\n                    ", "solution": ["Dim app As Inventor.Application = ThisApplication\nDim assyDoc As AssemblyDocument = app.ActiveDocument\nDim CompDef As AssemblyComponentDefinition = assyDoc.ComponentDefinition\nDim baseOcc As ComponentOccurrence = Component.InventorComponent(app.CommandManager.Pick(SelectionFilterEnum.kAssemblyOccurrenceFilter,\"Pick a base part\").Name)\nDim angleOcc As ComponentOccurrence = Component.InventorComponent(app.CommandManager.Pick(SelectionFilterEnum.kAssemblyOccurrenceFilter, \"Pick a part to aline\").Name)\nDim basePlane As WorkPlaneProxy \nCall baseOcc.CreateGeometryProxy(baseOcc.Definition.workPlanes(\"YZ Plane\"), basePlane)\nDim anglePlane As WorkPlaneProxy\nCall angleOcc.CreateGeometryProxy(angleOcc.Definition.WorkPlanes(\"YZ Plane\"), anglePlane)\nmyAngleConstraint = CompDef.Constraints.AddAngleConstraint(basePlane, anglePlane,\"0 deg\",)"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iLogic Form, Label size\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: 2 language for color in one iLogic\n                    ", "solution": ["oLanguage ", "= ", "ThisApplication", ".", "LanguageName", "\n", "If", " ", "oLanguage", " = ", "\"English\"", " ", "Then", "\n\t", "'English Code Here.", "\n", "ElseIf", " ", "oLanguage", " = ", "\"Czech\"", " ", "Then", "\n\t", "'Czech Code Here.", "\n", "End", " ", "If"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Iterate through BOM using current row order?\n                    ", "solution": ["Sub Main\nDim oAssyDoc As Inventor.Document = ThisDoc.Document\n\nDim oBOMView As Inventor.BOMView = oAssyDoc.ComponentDefinition.BOM.BOMViews(\"Structured\")\n\nDim oSortedBOMRows As New List(Of Inventor.BOMRow)\noSortedBOMRows = GetSortedRows(oBOMView)\nEnd Sub\n\nFunction GetSortedRows(oBOMView As Inventor.BOMView) As List(Of Inventor.BOMRow)\n\t'Begin renumber transaction so we can undo it later\n\tDim oBOMDoc As Inventor.Document = oBOMView.Parent.Parent.Parent\n\tDim oTransaction As Inventor.Transaction = ThisApplication.TransactionManager.StartTransaction(oBOMDoc,\"Renumber \"\"\" & oBOMView.Name & \"\"\" BOM View\")\n\t\t'Renumber BOM\n\t\toBOMView.Renumber\n\t\t\n\t\t'Recursively iterate through BOM and get collection of all BOM rows\n\t\tDim oBOMRows As New List(Of Inventor.BOMRow)\n\t\toBOMRows = GetBOMRows(oBOMView)\n\t\t\n\t\t'Iterate through all BOM rows and make a list of their item numbers\n\t\tDim oItemNums As New List(Of String)\n\t\tFor Each oBOMRow As Inventor.BOMRow In oBOMRows\n\t\t\toItemNums.Add(oBOMRow.ItemNumber)\n\t\tNext\n\t\t\n\t\t'Sort list of item numbers (right now it is in original assembly Placement order)\n\t\toItemNums.Sort\n\t\t\n\t\t'Create list to hold sorted BOM rows\n\t\tDim oBOMRowsSorted As New List(Of Inventor.BOMRow)\n\t\t\n\t\t'Iterate through sorted list of item numbers\n\t\tFor Each oItemNum As String In oItemNums\n\t\t\t'For each row in all BOM rows, if item number matches current item number, add BOM row to Sorted collection\n\t\t\tFor Each oBOMRow As Inventor.BOMRow In oBOMRows\n\t\t\t\tIf oBOMRow.ItemNumber = oItemNum Then oBOMRowsSorted.Add(oBOMRow)\n\t\t\tNext 'BOM row in all BOM rows\n\t\tNext 'Sorted Item number\n\t\n\t'Abort renumber transaction. This will undo renumbering but our oBOMRowsSorted list will remain in iLogic working memory.\n\toTransaction.Abort\n\t\n\tReturn oBOMRowsSorted\nEnd Function\n\nFunction GetBOMRows(oBOMView As Inventor.BOMView) As List(Of Inventor.BOMRow)\n\tDim oBOMRows As Inventor.BOMRowsEnumerator = oBOMView.BOMRows\n\tDim oBOMRowsList As New List(Of Inventor.BOMRow)\n\t\n\tReturn GetBOMRows2(oBOMRows,oBOMRowsList)\nEnd Function\n\nFunction GetBOMRows2(oBOMRows As Inventor.BOMRowsEnumerator,oBOMRowsList As List(Of Inventor.BOMRow)) As List(Of Inventor.BOMRow)\n\tFor Each oBOMRow As Inventor.BOMRow In oBOMRows\n\t\toBOMRowsList.Add(oBOMRow)\n\t\t\n\t\tIf Not oBOMRow.ChildRows Is Nothing Then\n\t\t\toBOMRowsList = GetBOMRows2(oBOMRow.ChildRows,oBOMRowsList)\n\t\tEnd If\n\tNext\n\t\n\tReturn oBOMRowsList\nEnd Function"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Issues with programming functional YesNo message box\n                    ", "solution": ["i = MessageBox.Show(\"Save current drawing as PDF?\", \"Save as\", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)\nIf i=vbYes Then iLogicVb.RunRule(\"auto pdf\") \nIf i = vbNo", "End If"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: What is the VBA Code for Exporting a PNG file off of a drawing sheet\n                    ", "solution": ["Sub", " ", "Main", "()", "\n    ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    ", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n    \n    ", "Dim", " ", "sExt", " ", "As", " ", "String", " ", "=", " ", "\"", ".png", "\"", "\n    ", "Dim", " ", "pImageX", " ", "As", " ", "Integer", " ", "=", " ", "5000", "\n    ", "Dim", " ", "pImageY", " ", "As", " ", "Integer", " ", "=", " ", "5000", "\n    ", "Dim", " ", "FilePath", " ", "As", " ", "String", " ", "=", " ", "ThisDoc", ".", "Path", "\n    ", "Dim", " ", "sDocName", " ", "As", " ", "String", " ", "=", " ", "ThisDoc", ".", "FileName", "(", "False", ")", "\n    ", "Dim", " ", "sImageLocation", " ", "As", " ", "String", " ", "=", " ", "\"", "\\Auto Imager", "\"", " ", "'''", "CHANGE STORAGE FOLDER HERE", "\n    ", "Dim", " ", "sWritePath", " ", "As", " ", "String", " ", "=", " ", "FilePath", " ", "&", " ", "sImageLocation", "\n    ", "Dim", " ", "IncVal", " ", "As", " ", "Integer", " ", "=", " ", "1", "\n    ", "Dim", " ", "SFile", " ", "As", " ", "System", ".", "IO", ".", "File", "\n    ", "Dim", " ", "SDir", " ", "As", " ", "System", ".", "IO", ".", "Directory", "\n    ", "'''", "Check the directory exists", "\n    ", "If", " ", "Not", " ", "SDir", ".", "Exists", "(", "sWritePath", ")", " ", "Then", " ", "SDir", ".", "CreateDirectory", "(", "sWritePath", ")", "\n            \n    ", "'''", "Set the active view", "\n", "ThisApplication", ".", "CommandManager", ".", "ControlDefinitions", ".", "Item", "(", "\"", "AppIsometricViewCmd", "\"", ")", ".", "Execute", "\n    ", "oView", " ", "=", " ", "ThisApplication", ".", "ActiveView", "\n    \n    ", "'''", "Iterate through and capture image", "\n    ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDrawDoc", ".", "Sheets", "\n        ", "oSheet", ".", "Activate", "\n        ", "sSheetName", " ", "=", " ", "oSheet", ".", "Name", "\n        ", "sSheetName", " ", "=", " ", "sSheetName", ".", "Substring", "(", "0", ",", "sSheetName", ".", "Length", "-", "2", ")", "\n        ", "'", "sImageName = sDocName & \"_\" & sSheetName", "\n        ", "sImageName", " ", "=", " ", "sSheetName", " ", "'''", " SAVED AS SHEET NAME ONLY", "\n        ", "sImageNameandPath", " ", "=", " ", "sWritePath", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "sImageName", " ", "&", " ", "sExt", "    \n    ", "'''", "Check if File exsists already. If So, increase incremental value", "\n        ", "If", " ", "Not", " ", "SFile", ".", "Exists", "(", "sImageNameandPath", ")", " ", "Then", "\n            ", "oView", ".", "SaveAsBitmap", "(", "sImageNameandPath", ", ", "pImageX", ", ", "pImageY", ")", "\n        ", "Else", "        \n              ", "Do", "\n                  ", "IncVal", " ", "+=", " ", "1", "\n               ", "sImageNameandPath", " ", "=", " ", "sWritePath", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "sImageName", " ", "&", " ", "\"", "_", "\"", " ", "&", " ", "IncVal", " ", "&", " ", "sExt", "\n            ", "Loop", " ", "While", " ", "SFile", ".", "Exists", "(", "sImageNameandPath", ")", "\n            ", "oView", ".", "SaveAsBitmap", "(", "sImageNameandPath", ", ", "pImageX", ", ", "pImageY", ")", "\n        ", "End", " ", "If", "\n    ", "Next", "\n", "End Sub"], "author": "Lewis.Young"},
{"created at": [], "solution Title": "\n                        Re: Reference drawing sheet name with Ilogic\n                    ", "solution": [], "author": "SofiaGrave4819"},
{"created at": [], "solution Title": "\n                        Re: Apply iLogic rules automatically to all opened files\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: how to determine option \"link sheet metal style\" of derived sheet\n                    ", "solution": [], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Change sheet metal rule on a solid body with iLogic\n                    ", "solution": ["    Dim oDoc As PartDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As SheetMetalComponentDefinition\n    oDef = oDoc.ComponentDefinition\n    \n    Dim oBody As SurfaceBody\n    For Each oBody In oDef.SurfaceBodies\n        If oBody.Name = \"Plate Left\" Then\n            Exit For\n        End If\n    Next\n    \n    Dim oStyle As SheetMetalStyle\n    For Each oStyle In oDef.SheetMetalStyles\n        If oStyle.Name = \"Laserform S235JR 005\" Then\n            Exit For\n        End If\n    Next\n     \n    If Not oStyle Is Nothing And Not oBody Is Nothing Then\n        Call oDef.SetBodySheetMetalStyle(oBody, oStyle)\n    End If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Setting to always ask for exit/quit confirmation?\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: DesignViewRepresentation not updating visibility upon .Activate\n                    ", "solution": [], "author": "josh.nieman"},
{"created at": [], "solution Title": "\n                        Re: Interfacing to iLogic from third party configurator to generate drawing\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Hide document after opening\n                    ", "solution": [], "author": "MistakenEnginee"},
{"created at": [], "solution Title": "\n                        Betreff: Export Hole Table\n                    ", "solution": ["'get the path and name of the drawing file\npath_and_name = ThisDoc.Path\n\n'define oDoc\noDoc = ThisDoc.Document\n\n'specify the drawing sheet\n'oSheet = oDoc.Sheets(\"Sheet:1\") ' sheet by name\noSheet = oDoc.Sheets(1) ' first sheet\n\n\n ' Get the Hole Table on the sheet.\noHoleTable = oSheet.HoleTables(1)\n\n' export the Table to Excel file\noHoleTable.Export(path_and_name & \"\\HoleTable.csv\", FileFormatEnum.kTextFileCommaDelimitedFormat) "], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: VBA: copy properties from iam to ipn while in idw\n                    ", "solution": ["Sub Copy_iProperties_IAM_IPN()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    \n    Dim oPresDoc As PresentationDocument\n    Dim oAssyDoc As AssemblyDocument\n    Dim oView As DrawingView\n    For Each oView In oSheet.DrawingViews\n        Dim oReferDoc As Document\n        Set oReferDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n        \n        If oReferDoc.DocumentType = kPresentationDocumentObject Then\n            Set oPresDoc = oReferDoc\n        ElseIf oReferDoc.DocumentType = kAssemblyDocumentObject Then\n            Set oAssyDoc = oReferDoc\n        End If\n    Next\n    \n    If oPresDoc Is Nothing Then\n        MsgBox (\"Current drawing is not referenced by Presentation document\")\n        Exit Sub\n    ElseIf oAssyDoc Is Nothing Then\n        MsgBox (\"Current drawing is not referenced by Assembly document\")\n        Exit Sub\n    End If\n    \n    oPresDoc.PropertySets(\"Design Tracking Properties\").Item(\"Description\").Value = _\n    oAssyDoc.PropertySets(\"Design Tracking Properties\").Item(\"Description\").Value\n    \n    oPresDoc.PropertySets(\"Inventor Summary Information\").Item(\"Revision Number\").Value = _\n    oAssyDoc.PropertySets(\"Inventor Summary Information\").Item(\"Revision Number\").Value\n    \n    oPresDoc.PropertySets(\"Design Tracking Properties\").Item(\"Designer\").Value = _\n    oAssyDoc.PropertySets(\"Design Tracking Properties\").Item(\"Designer\").Value\n    \nEnd Sub", "Sub Copy_iProperties_IAM_IPN()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    \n    Dim oPresDoc As PresentationDocument\n    Dim oAssyDoc As AssemblyDocument\n    Dim oView As DrawingView\n    For Each oView In oSheet.DrawingViews\n        Dim oReferDoc As Document\n        Set oReferDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n        \n        If oReferDoc.DocumentType = kPresentationDocumentObject Then\n            Set oPresDoc = oReferDoc\n        ElseIf oReferDoc.DocumentType = kAssemblyDocumentObject Then\n            Set oAssyDoc = oReferDoc\n        End If\n    Next\n    \n    If oPresDoc Is Nothing Then\n        MsgBox (\"Current drawing is not referenced by Presentation document\")\n        Exit Sub\n    ElseIf oAssyDoc Is Nothing Then\n        MsgBox (\"Current drawing is not referenced by Assembly document\")\n        Exit Sub\n    End If\n    \n    oPresDoc.PropertySets(\"Design Tracking Properties\").Item(\"Description\").Value = _\n    oAssyDoc.PropertySets(\"Design Tracking Properties\").Item(\"Description\").Value\n    \n    oPresDoc.PropertySets(\"Inventor Summary Information\").Item(\"Revision Number\").Value = _\n    oAssyDoc.PropertySets(\"Inventor Summary Information\").Item(\"Revision Number\").Value\n    \n    oPresDoc.PropertySets(\"Design Tracking Properties\").Item(\"Designer\").Value = _\n    oAssyDoc.PropertySets(\"Design Tracking Properties\").Item(\"Designer\").Value\n    \n    On Error Resume Next\n    oPresDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"Rev Drawn By\").Value = _\n    oAssyDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"Rev Drawn By\").Value\u00a0\n     \n    If Err.Number <> 0 Then\n        On Error GoTo 0\n        \n         Call oPresDoc.PropertySets(\"Inventor User Defined Properties\").Add(\"\", \"Rev Drawn By\")\n         oPresDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"Rev Drawn By\").Value = _\n         oAssyDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"Rev Drawn By\").Value\u00a0\n    End If\n    \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: different iproperties for the same field? Depending on location in assembly\n                    ", "solution": [], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Why does my Inventor Professional 2019 program need to connect to internet?\n                    ", "solution": [], "author": "arron.craig"},
{"created at": [], "solution Title": "\n                        Betreff: Print part of a drawing\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Retrieve dimension does not work\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Change part colour in drawing with ilogic\n                    ", "solution": ["Sub Main()\n    Dim oDoc As DrawingDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    oSheet = oDoc.ActiveSheet\n    \n    Dim layers As LayersEnumerator\n    layers = oDoc.StylesManager.Layers\n    \n    On Error Resume Next\n    Dim oRed As Layer\n    oRed = layers.Item(\"Red\")\n     \n    If Err.Number <> 0 Then\n        On Error GoTo 0\n        \n        Dim redColor As Color\n        redColor = ThisApplication.TransientObjects.CreateColor(255, 0, 0)\n    \n        ' Copy an arbitrary layer giving it the name\n        ' of the render style.\n        oRed = layers.Item(1).Copy(\"Red\")\n    \n        ' the attributes of the layer to use the color,\n        ' have a solid line type, and a specific width.\n        oRed.Color = redColor\n        oRed.LineType = kContinuousLineType\n        oRed.LineWeight = 0.02\n     End If\n     \n     On Error Resume Next\n    Dim oGreen As Layer\n    oGreen = layers.Item(\"Green\")\n     \n    If Err.Number <> 0 Then\n        On Error GoTo 0\n        \n        Dim greenColor As Color\n        greenColor = ThisApplication.TransientObjects.CreateColor(0, 255, 0)\n    \n        ' Copy an arbitrary layer giving it the name\n        ' of the render style.\n        oGreen = layers.Item(1).Copy(\"Green\")\n    \n        ' the attributes of the layer to use the color,\n        ' have a solid line type, and a specific width.\n        oGreen.Color = greenColor\n        oGreen.LineType = kContinuousLineType\n        oGreen.LineWeight = 0.02\n     End If\n     \n     On Error Resume Next\n    Dim oBlue As Layer\n    oBlue = layers.Item(\"Blue\")\n     \n    If Err.Number <> 0 Then\n        On Error GoTo 0\n        \n        Dim blueColor As Color\n        blueColor = ThisApplication.TransientObjects.CreateColor(0, 0, 255)\n    \n        ' Copy an arbitrary layer giving it the name\n        ' of the render style.\n        oBlue = layers.Item(1).Copy(\"Blue\")\n    \n        ' the attributes of the layer to use the color,\n        ' have a solid line type, and a specific width.\n        oBlue.Color = blueColor\n        oBlue.LineType = kContinuousLineType\n        oBlue.LineWeight = 0.02\n     End If \n\t \n    Dim oView As DrawingView\n    For Each oView In oSheet.DrawingViews\n        Dim oReferDoc As AssemblyDocument\n        oReferDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n        \n        Dim oAssyDef As AssemblyComponentDefinition\n        oAssyDef = oReferDoc.ComponentDefinition \n         \n    \tDim occ As ComponentOccurrence\n    \tFor Each occ In oAssyDef.Occurrences         \n\t        Dim oCurves As DrawingCurvesEnumerator\n\t        oCurves = oView.DrawingCurves(occ)\n\t        \n\t        Dim oCurve As DrawingCurve\n\t        For Each oCurve In oCurves\n\t            Dim oColl As ObjectCollection\n\t            oColl = ThisApplication.TransientObjects.CreateObjectCollection\n\t            Dim oSegment As DrawingCurveSegment\n\t            For Each oSegment In oCurve.Segments\n\t                Call oColl.Add(oSegment)\n\t            Next\n\t\t\t\t\n\t\t\t\tDim occName As String \n\t\t\t\toccName = occ.Name \n\t\t\t\tIf occName.StartsWith(\"Element 01\") = True Then\n\t\t\t\t\tCall oSheet.ChangeLayer(oColl, oRed)\n\t\t\t\tElse If occName.StartsWith(\"Element 02\") = True Then\n\t\t\t\t\tCall oSheet.ChangeLayer(oColl, oGreen)\n\t\t\t\tElse If occName.StartsWith(\"Element 04\") = True Then\n\t\t\t\t\tCall oSheet.ChangeLayer(oColl, oBlue)\n\t\t\t\tEnd If \n\t            \n\t            Call oDoc.Update\n\t        Next \n        \n    \tNext         \n    Next\nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic - How to set a parameter?\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iLogic\n                    ", "solution": [], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Getting error message\n                    ", "solution": ["Sub Main\n\tDocType = ThisDoc.Document.DocumentType\nIf DocType <> DocumentTypeEnum.kDrawingDocumentObject Then\n\tMessageBox.Show(\"This rule works only with a drawing file! \", \"iLogic\", MessageBoxButtons.OK, MessageBoxIcon.Error)\n\tExit Sub\n\t\nEnd If\n\n'get the filename of the doc the drawing points to\n'There could be more then one reference, so you get the first one!!\nDim modelName As String\nmodelName = ThisDoc.Document.ReferencedDocuments(1).FullFilename\nMsgBox(modelName)\nEnd Sub"], "author": "martin.winkler"},
{"created at": [], "solution Title": "\n                        Re: Weird number coming from angle parameter of degree constraint\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Test if document is idle\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Add iProperties with a loop and arraylist\n                    ", "solution": ["    ''' <summary>\n    ''' Add Custom iProperty To Inventor Document\n    ''' </summary>\n    ''' <param name=\"propName\">Name of iProperty</param>\n    ''' <param name=\"propValue\">Value of iProperty</param>\n    ''' <param name=\"invDoc\">Document to work on</param>\n    ''' <returns>True if file was changed</returns>\n    ''' <remarks>Will look for property, if found, verify value, if different change value, if not found add property and value. Excludes Readonly files, and unsaved new files</remarks>\n    Public Function WriteCustomProperty(ByVal propName As String, ByVal propValue As String, ByVal invDoc As Inventor.Document, Optional OverWriteProperty As Boolean = True) As Boolean\n        Try\n            Dim fi As New System.IO.FileInfo(invDoc.FullFileName)\n            If fi.IsReadOnly Then Return False 'don't work with read-only files.  This gives the user control over which files to use and which to skip.\n            Dim propSet As PropertySet = invDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n            Dim custProp As Inventor.Property = FindiProperty(propSet.Name, propName, invDoc)\n            eventLog += vbCrLf & invDoc.FullFileName\n            'For Each prop In propSet\n            '    If prop.Name = propName Then\n            '        custProp = prop\n            '        Exit For\n            '    End If\n            'Next\n            If custProp Is Nothing Then\n                custProp = propSet.Add(propValue, propName)\n                filesEffected += 1\n                eventLog += vbCrLf & \"Added custom property: \" & propName & \":  \" & propValue\n                Return True\n            Else\n                If Not String.IsNullOrWhiteSpace(custProp.Value) Then ' has a value first check if expression, then if regular property\n                    If OverWriteProperty = True Then\n                        If custProp.Expression.StartsWith(\"=\") Then 'is expression\n                            If custProp.Expression <> propValue Then\n                                custProp.Value = propValue\n                                filesEffected += 1\n                                eventLog += vbCrLf & \"Modified custom property: \" & propName & \":  \" & propValue\n                                Return True\n                            End If\n                        Else 'is value\n                            If custProp.Value <> propValue Then\n                                custProp.Value = propValue\n                                filesEffected += 1\n                                eventLog += vbCrLf & \"Modified custom property: \" & propName & \":  \" & propValue\n                                Return True\n                            End If\n                        End If\n                    End If\n                Else 'is emtpy - overwrite command does snot apply\n                    custProp.Value = propValue\n                    filesEffected += 1\n                    eventLog += vbCrLf & \"Modified custom property: \" & propName & \":  \" & propValue\n                    Return True\n                End If\n            End If\n            Return False\n        Catch ex As Exception\n            'if property fails to write such as user does not check out or allow file to save, then retun without error.\n            MsgBox(\"Can not write custom property: \" & propName, MsgBoxStyle.SystemModal)\n            Return False\n        End Try\n    End Function"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Workpoints from assembly to part\n                    ", "solution": ["Dim assDoc As AssemblyDocument = InvApp.ActiveDocument\nDim assDocDef As AssemblyComponentDefinition = assDoc.ComponentDefinition\n\nDim oFace As FaceProxy = InvApp.CommandManager.Pick(SelectionFilterEnum.kPartFaceFilter, \"Select part\")\n\nDim oPartOcc As ComponentOccurrence = oFace.ContainingOccurrence\nDim oPartCompDef As PartComponentDefinition = oPartOcc.Definition\nDim subMat As Matrix = oPartOcc.Transformation\nsubMat.Invert()\n\nFor Each wPoint As WorkPoint In assDocDef.WorkPoints\n         Dim partPoint As Inventor.Point = InvApp.TransientGeometry.CreatePoint\n         partPoint.TransformBy(subMat)\n         oPartCompDef.WorkPoints.AddFixed(partPoint)\nNext"], "author": "nikita.kapustin"},
{"created at": [], "solution Title": "\n                        Re: Not current version provblems\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: iLogic Insert parent assembly number into children\n                    ", "solution": ["Dim oDoc = ComponentOccurrence.Definition.Document ", "Dim atts As System.IO.FileAttributes = System.IO.File.GetAttributes(oDoc.FullFileName)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Changing Part File Units by Code\n                    ", "solution": [], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: How to enable or disable HUD with VBA\uff1f\n                    ", "solution": ["Sub HUDOptions()\n    Dim oHUD As HeadsUpDisplayOptions\n    Set oHUD = ThisApplication.SketchOptions.HeadsUpDisplayOptions\n    \n    oHUD.Enabled = True\n    \n    oHUD.PointerInputEnabled = True\n    oHUD.DimensionInputEnabled = True\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Change Appearance in Configurator 360\n                    ", "solution": ["Parameter.UpdateAfterChange = True\nParameter(\"SKT:1\", \"HEIGHT\")=HEIGHT\nParameter(\"SKT:1\", \"WIDTH\") = WIDTH\nComponent.Color(\"PRF_ESQ:1\") = COLOR & \"_po\"\nComponent.Color(\"PRF_DIR:1\") = COLOR & \"_po\"\nComponent.Color(\"PRF_SUP:1\") = COLOR & \"_po\"\nComponent.Color(\"PRF_INF:1\") = COLOR & \"_po\" \n\niLogicVb.UpdateWhenDone = True"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Print all idw's invisible and leave the current idw open\n                    ", "solution": ["'Put near top\nDim OpenDwg As string\nOpenDwg = ThisApplication.ActiveDocument.FullDocumentName\n\n'..... other code\n\n'This replaces the close line\nIf (ThisApplication.ActiveDocument.FullDocumentName <> OpenDwg) Then\n    partDoc.Close (False)\nEnd If"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Available API Commands for Third Party Forms\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ilogic to find feature parameter is consumed by\n                    ", "solution": ["'Tolerance Test\n\nDim oPartDoc As Inventor.PartDocument\noPartDoc = ThisApplication.ActiveEditDocument\n\nFor Each oParam As Parameter In oPartDoc.ComponentDefinition.Parameters.ModelParameters\n\toParam.Comment = \"\"\nNext\n\nFor Each oFeature As PartFeature In oPartDoc.ComponentDefinition.Features\n\tDim oTolParams As String = \"\"\n\t\n\tFor Each oParam As Parameter In oFeature.Parameters\n\t\tIf oParam.Tolerance.ToleranceType <> 31233 Then\n\t\t\toParam.Comment = oParam.Comment & If(Len(oParam.Comment)>0,\", \",\"\") & oFeature.Name\n\t\tEnd If 'Parameter has tolerance\n\tNext 'Parameter used by feature\nNext 'Feature in Part\n\nThisApplication.CommandManager.ControlDefinitions(\"AppParametersCmd\").Execute"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: iLogic To Suppress Link To A Derived Assembly\n                    ", "solution": ["Sub Main()\n\n\tDim oShrinkwrap As PartDocument\n\toShrinkwrap = ThisApplication.ActiveDocument\n\n\tDim oDef As PartComponentDefinition \n\toDef = oShrinkwrap.ComponentDefinition \n\t \n\tDim oShrinkComp As ShrinkwrapComponent\n\tFor Each oShrinkComp In oDef.ReferenceComponents.ShrinkwrapComponents \n\t\t\n\t\toShrinkComp.SuppressLinkTOFile = True \n\t\t\n\t\tiLogicVb.UpdateWhenDone = True\n\n\tNext\n\n \n\n'UPDATE SHRINKWRAP SAVE DATE & TIME STAMP\n'iProperties.Value(\"Custom\", \"SHRINKWRAP SAVE DATE & TIME STAMP\") = iProperties.Value(\"STRUCTURE ASSEMBLY.iam\", \"Custom\", \"STRUCTURE SAVE DATE & TIME STAMP\")\n\n'MessageBox.Show(\"Executing iLogic Code\", \"Executing iLogic Rule Confirmation\")\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Access ComponentDefinition for ANY doc type without \"Member Not Found&a\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Exportparameter for JT in Pyton\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Betreff: Access document setting \"Display precise value\" by VBA\n                    ", "solution": [], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: 2019 ilogic ClearanceInfo error\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Macro to save geometry as .jt doesnt use .cfg file. How do i get inventor to\n                    ", "solution": ["TranslatorAddIn.SaveCopyAs( SourceObject As Object, Context As TranslationContext, Options As NameValueMap, TargetData As DataMedium ) ", "Function func_ConvertFolderContentToJT(ByVal strSourceFolder As String, ByVal strSourceFileType As String, ByVal strDestinationFolder As String, ByVal strDestinationFileType As String, ByVal strConverterConfigFilePath As String) As Boolean\n    func_ConvertFolderContentToJT = True\n    Dim objFS As FileSystemObject\n    Set objFS = CreateObject(\"Scripting.FileSystemObject\")\n\n    If Right(strSourceFolder, 1) <> \"\\\" Then\n        strSourceFolder = strSourceFolder & \"\\\"\n    End If\n    If objFS.FolderExists(strSourceFolder) <> True Then\n        func_ConvertFolderContentToJT = False\n        Exit Function\n    End If\n    If strDestinationFolder <> \"\" Then\n        If objFS.FolderExists(strDestinationFolder) <> True Then\n            strDestinationFolder = False\n        End If\n        If Right(strDestinationFolder, 1) <> \"\\\" Then\n            strDestinationFolder = strDestinationFolder & \"\\\"\n        End If\n    End If\n\n    If strSourceFileType = \"\" Then\n        func_ConvertFolderContentToJT = False\n        Exit Function\n    End If\n    \n    If strDestinationFileType = \"\" Then\n        func_ConvertFolderContentToJT = False\n        Exit Function\n    End If\n    \n    Dim strToLookFor As String\n    strToLookFor = strDestinationFileType\n    \n    If Left(strDestinationFileType, 1) = \".\" Then\n        strToLookFor = Right(strDestinationFileType, Len(strDestinationFileType) - 1)\n    Else\n        strToLookFor = strDestinationFileType\n        strDestinationFileType = \".\" & strDestinationFileType\n    End If\n    \n    If objFS.FileExists(strConverterConfigFilePath) = False Then\n        func_ConvertFolderContentToJT = False\n        Exit Function\n    End If\n    \n    Dim flg_TranslationAddInFound As Boolean\n    flg_TranslationAddInFound = False\n    Dim intAddIn As Long\n    intAddIn = 1\n    Do\n        If InStr(1, UCase(ThisApplication.ApplicationAddIns.Item(intAddIn).Description), UCase(strToLookFor)) > 0 Then\n            flg_TranslationAddInFound = True\n            Exit Do\n        End If\n        intAddIn = intAddIn + 1\n    Loop Until intAddIn = ThisApplication.ApplicationAddIns.Count + 1\n\n    If flg_TranslationAddInFound <> True Then\n        func_ConvertFolderContentToJT = False\n        Exit Function\n    End If\n    \n    Dim JTAddIn As TranslatorAddIn\n    Set JTAddIn = ThisApplication.ApplicationAddIns.ItemById(ThisApplication.ApplicationAddIns.Item(intAddIn).ClientId)\n   \n    Dim oContext As TranslationContext\n    Set oContext = ThisApplication.TransientObjects.CreateTranslationContext\n            \n    Dim oOptions As NameValueMap\n    Set oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n    Dim oDataMedium As DataMedium\n    Set oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n    \n    Dim objFolder As Folder\n    Dim objFile 'As File\n    Set objFolder = objFS.GetFolder(strSourceFolder)\n    Debug.Print \"Convert Content of Folder: \" & strSourceFolder\n    For Each objFile In objFolder.Files\n        Dim strFullFilePath As String\n        strFullFilePath = objFile\n        If Right(objFile, Len(strSourceFileType)) = strSourceFileType Then\n            Dim oPartDoc As PartDocument\n            Set oPartDoc = ThisApplication.Documents.Open(strFullFilePath)\n            If JTAddIn.HasSaveCopyAsOptions(oPartDoc, oContext, oOptions) = True Then\n                oOptions.Value(\"ConfigFilePath\") = strConverterConfigFilePath\n                oOptions.Value(\"ConfigFileEnabled\") = True\n                oContext.Type = kFileBrowseIOMechanism\n                If strDestinationFolder <> \"\" Then\n                    strFullFilePath = Replace(strFullFilePath, strSourceFolder, strDestinationFolder)\n                End If\n                oDataMedium.FileName = strFullFilePath & strDestinationFileType\n                JTAddIn.SaveCopyAs oPartDoc, oContext, oOptions, oDataMedium\n                oPartDoc.Close True\n            Else\n                If strDestinationFolder <> \"\" Then\n                    strFullFilePath = Replace(strFullFilePath, strSourceFolder, strDestinationFolder)\n                End If\n                \n                oPartDoc.SaveAs strFullFilePath & strDestinationFileType, True\n                oPartDoc.Close True\n            End If\n        End If\n    Next objFile\nEnd Function\n"], "author": "tfrohe"},
{"created at": [], "solution Title": "\n                        Re: Select faces and features by color  (iLogic)\n                    ", "solution": ["    ", "Private", " ", "Function", " ", "findFaceColor", "(", "ByVal", " ", "oFace", " ", "As", " ", "Face", ") ", "As", " ", "String", "\n\t\t\n ", "Dim", " ", "oPartDoc", " ", "As", " ", "Inventor", ".", "PartDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\t\n \n\t\t", "Dim", " ", "result", " ", "As", " ", "String", " = ", "\"\"", "\n\t\t\n", "Dim", " ", "oRenderStyle", " ", "As", " ", "RenderStyle", "\n", "oRenderStyle", " = ", "oFace", ".", "GetRenderStyle", "(", "ColorSource", ")\n", "Dim", " ", "oRenderStyles", " ", "As", " ", "RenderStyles", "\n", "oRenderStyles", " = ", "oPartDoc", ".", "RenderStyles", "\n\n \n ", "Dim", " ", "oCompDef", " ", "As", " ", "Inventor", ".", "ComponentDefinition", "\n ", "oCompDef", " = ", "oPartDoc", ".", "ComponentDefinition", "\n\n\n  ", "Dim", " ", "oSBodies", " ", "As", " ", "Inventor", ".", "SurfaceBodies", "\n  ", "oSBodies", " = ", "oCompDef", ".", "SurfaceBodies", "\n    \n    ", "Dim", " ", "oSBody", " ", "As", " ", "Inventor", ".", "SurfaceBody", "\n   \n    \n    ", "For", " ", "Each", " ", "oSBody", " ", "In", " ", "oSBodies", "\n        ", "For", " ", "Each", " ", "oFace", " ", "In", " ", "oSBody", ".", "Faces", "\n\n                   \n                        ", "result", " = ", "oRenderStyle", ".", "Name", "\n                        ", "'oFaceColorFound = True", "\n\n\t\t\t\t\t\t\n                        ", "Exit", " ", "For", "\n\t\t\t\t\t\n                ", "Next", "\n          ", "Next", "\n     \n\n        ", "Return", " ", "result", "\n    ", "End", " ", "Function", "\n\t\n\n\t\n\n"], "author": "Kat5215"},
{"created at": [], "solution Title": "\n                        Re: Selecting drawing template via VBA\n                    ", "solution": ["Sub OpenIDW()", "ThisApplication.SilentOperation = True", "Dim OInv As DrawingDocument", "Set OInv = ThisApplication.Documents.Open(\"FULLPATHOFYOURINVENTORFILE\", True)", "End Sub"], "author": "Xun.Zhang"},
{"created at": [], "solution Title": "\n                        Re: ThisApplication.ActiveDocument alternative\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Dockable Window - More Context Options\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: title block problem\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Select drawing view from label name\n                    ", "solution": ["Dim CurrentScale = oSheet.DrawingViews(\"VIEW1\").Scale", "Dim oCurrentScale As Double\n\nDim oDrawingView As DrawingView\nFor Each oDV As DrawingView In oSheet.DrawingViews\n\tIf oDV.Label.Text = \"VIEW1\" Then\n\t\toDrawingView = oDV\n\t\tExit For\n\tEnd If\nNext\n\nIf Not oDrawingView Is Nothing Then\n\toCurrentScale = oDrawingView.Scale\n\tMessageBox.Show(oCurrentScale)\n\t'Anything else you need to do with the Drawing View.\nElse\n\tMessageBox.Show(\"Could not find a view named \"\"VIEW1\"\"\")\n\tExit Sub\nEnd If"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Does Goexcel.cellvalue have the ability to use units such as psi?\n                    ", "solution": ["oValue = GoExcel.CellValue(\"c11\")\nParameter.Param(\"PdI\").Expression = oValue & \"psi\""], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Extrude Feature Extent Direction fail\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: SDK requirements\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Automatically naming sheets in a * .idw file.\n                    ", "solution": ["Dim", " ", "app", " ", "As", " ", "Application", " = ", "ThisApplication", "\n", "Dim", " ", "doc", " ", "As", " ", "DrawingDocument", " = ", "app", ".", "ActiveDocument", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "Dim", " ", "oView", " ", "As", " ", "DrawingView", " \n", "Dim", " ", "docM", " ", "As", " ", "Document", "\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "doc", ".", "Sheets", "\n\t", "oView", " = ", "oSheet", ".", "DrawingViews", "(1)\n\t", "docM", " = ", "oView", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", "\n\t", "oSheet", ".", "Name", " = ", "\"words to prepend here\"", " & ", "docM", ".", "PropertySets", ".", "Item", "(", "\"Inventor Summary Information\"", ").", "Item", "(", "\"Revision Number\"", ").", "Value", " & ", "\"words to apend here\"", "\n", "Next"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Getting Started - iterate through Dimensions & show style.\n                    ", "solution": ["DrawingDocument.Sheets.Item().DrawingDimensions.GeneralDimensions.Item().Style.Name", "Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisDoc.Document\n\nFor Each oSheet As Sheet In oDrawDoc.Sheets\n\tFor Each oGenDim As GeneralDimension In oSheet.DrawingDimensions.GeneralDimensions\n\t\toStyleName = oGenDim.Style.Name\n\t\tMessageBox.Show(oStyleName)\n\tNext 'oGenDim on sheet\nNext 'oSheet in drawing"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Ilogic message box\n                    ", "solution": ["Dim oOccurrence As ComponentOccurrence\nDim Prop As Integer 'you might consider changing this to String\nDim messageText As String\nTry\n    oOccurrence = ThisDoc.Document.SelectSet.Item(1)\nCatch\n    MessageBox.Show(\"Please select a component(s) before running this rule.\", \"iLogic\")\n    Return\nEnd Try\n\nFor Each oOccurrence In ThisDoc.Document.SelectSet\n    If TypeOf oOccurrence Is ComponentOccurrenceProxy Then \n        Prop = iProperties.Value(oOccurrence.NativeObject.Name, \"Project\", \"Part Number\")\n    Else   \n        Prop = iProperties.Value(oOccurrence.Name, \"Project\", \"Part Number\")\n    End If \n\n    messageText = messageText & \"Part Number = \" & Prop & vbNewLine\nNext\n\nMessageBox.Show(messageText)"], "author": "cwhetten"},
{"created at": [], "solution Title": "\n                        Re: Supression of Rules\n                    ", "solution": [], "author": "ahmed.hagi"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule to add sheet number to PDF file name\n                    ", "solution": [], "author": "jR0sal3s"},
{"created at": [], "solution Title": "\n                        Re: Edit an existing Extrusion with Ilogic / vba\n                    ", "solution": [], "author": "823251756"},
{"created at": [], "solution Title": "\n                        Re: Unable to Author component as structural shape\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Parameters Not exporting from Ilogic Form\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: iLogic SaveAs Autocad DWG only one sheet\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Inventor Memory Problem\n                    ", "solution": [], "author": "kenkelso"},
{"created at": [], "solution Title": "\n                        Re: Ilogic, This works internal but not external, WHY?\n                    ", "solution": ["p", " ", "=", " ", "CStr", "(", "Parameter", "(", "\"", "Thick", "\"", "))"], "author": "mslosar"},
{"created at": [], "solution Title": "\n                        Re: How to use vba to create a mateconstraint for two cylindrical faces?\n                    ", "solution": ["Sub CylinderFacesMateSample()\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oFace1 As Face\n    Set oFace1 = ThisApplication.CommandManager.Pick(kPartFaceCylindricalFilter, \"Select a cylindrical face\")\n    \n    Dim oFace2 As Face\n    Set oFace2 = ThisApplication.CommandManager.Pick(kPartFaceCylindricalFilter, \"Select another cylindrical face\")\n     \n    Dim omate As MateConstraint\n    Set omate = oDoc.ComponentDefinition.Constraints.AddMateConstraint(oFace1, oFace2, 0, kInferredLine, kInferredLine)\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: ilogic rule for placing custom rev table on sheet\n                    ", "solution": ["Dim", " ", "oDrawingDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawingDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " = ", "oDrawingDoc", ".", "ActiveSheet", "\n\n", "Dim", " ", "oWidthRevTable", " ", "As", " ", "Double", "\n", "oWidthRevTable", " = 15.02 ", "'Set you custom width table", "\n\n", "Dim", " ", "oTablePt", " ", "As", " ", "Point2d", "\n", "oTablePt", " = ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "oSheet", ".", "Border", ".", "RangeBox", ".", "MaxPoint", ".", "X", " - ", "oWidthRevTable", ", ", "oSheet", ".", "Border", ".", "RangeBox", ".", "MaxPoint", ".", "Y", ")", "'Add Revision table in Top Left Corner", "\n\n", "If", " ", "oSheet", ".", "RevisionTables", ".", "Count", " = 0 ", "Then", "\n    ", "Dim", " ", "oRevTable", " ", "As", " ", "RevisionTable", "\n\t", "oRevTable", " = ", "oSheet", ".", "RevisionTables", ".", "Add", "(", "oTablePt", ")\n\t\n\t", "Dim", " ", "oRevStyle", " ", "As", " ", "Style", "\n\n\t", "For", " ", "Each", " ", "oRevStyle", " ", "In", " ", "oDrawingDoc", ".", "StylesManager", ".", "RevisionTableStyles", "\n\t    ", "If", " ", "oRevStyle", ".", "Name", " = ", "\"ABC Rev Table\"", " ", "Then", "\n\t        ", "oRevTable", ".", "Style", " = ", "oRevStyle", "\n\t    ", "End", " ", "If", "\n\t", "Next", " \n", "Else", "\n    ", "MessageBox", ".", "Show", "(", "\"Revision Table already exist\"", ", ", "\"Autodesk Inventor\"", ")\n", "End", " ", "If"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Text Color\n                    ", "solution": ["    Public Sub TestRoutine()\n        'use this sub to run test, change as you see fit\n        GetInventorApplication()\n        If invApp.ActiveDocument IsNot Nothing Then\n            Dim tb As Inventor.TextBox = invApp.ActiveDocument.SelectSet(1)\n            tb.Color = invApp.TransientObjects.CreateColor(128, 128, 128)\n\n        End If\n    End Sub", "'***********Set Variables*************", "\n", "'Text Height in inches", "\n", "Dim", " ", "theight", " ", "As", " ", "Single", " = 2\n\n", "'Choose or create a Color", "\n", "'Dim oColor As Color = ThisApplication.TransientObjects.CreateColor(0,0,0) 'Black", "\n", "'Dim oColor As Color = ThisApplication.TransientObjects.CreateColor(255,0,0) 'Red", "\n", "Dim", " ", "oColor", " ", "As", " ", "Color", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateColor", "(0,125,0) ", "'Dark Green", "\n", "'Dim oColor As Color = ThisApplication.TransientObjects.CreateColor(6,0,236) 'Dark Blue", "\n", "'Dim oColor As Color = ThisApplication.TransientObjects.CreateColor(191,23,174) 'Magenta", "\n", "'Dim oColor As Color = ThisApplication.TransientObjects.CreateColor(251,163,0) 'Orange", "\n", "'Dim oColor As Color = ThisApplication.TransientObjects.CreateColor(146,90,56) 'Brown", "\n", "'Dim oColor As Color = ThisApplication.TransientObjects.CreateColor(20,171,171) 'Cyan", "\n", "'Dim oColor As Color = ThisApplication.TransientObjects.CreateColor(92,92,92) 'Dark Gray", "\n\n", "'***********End of Setting variables*************", "\n\n", "Dim", " ", "oSketch", " ", "As", " ", "PlanarSketch", "\n", "Dim", " ", "Message", " ", "As", " ", "String", "\n", "Dim", " ", "tstart", " ", "As", " ", "Integer", "\n", "Dim", " ", "tend", " ", "As", " ", "Integer", "\n", "Dim", " ", "curtext", " ", "As", " ", "String", "\n\n", "oSketch", " = ", "ThisApplication", ".", "ActiveEditObject", "\n", "theight", " = ", "theight", " * 2.54 ", "'Scale the text height from inches to cm", "\n\n", "MessageBox", ".", "Show", "(", "\"Subroutine to update text size and color for all text boxes in an sketch that is open.  Text height and color are embedded in the ilogic rule\"", ",", "\"iLogic\"", ")\n", "If", " ", "TypeOf", " ", "ThisApplication", ".", "ActiveEditObject", " ", "Is", " ", "Sketch", " ", "Then", " ", "'Verify that a sketch is active", "\n\t", "For", " ", "Each", " ", "oTextbox", " ", "In", " ", "oSketch", ".", "TextBoxes", "\n\t\t", "Dim", " ", "tb", " ", "As", " ", "Inventor", ".", "TextBox", " = ", "oTextbox", "\n\t\t", "tb", ".", "Color", " = ", "oColor", "\n\t\t\n\t\t", "'Determine what is in the box", "\n\t\t", "tstart", " = ", "InStr", "(", "oTextbox", ".", "Formattedtext", ", ", "\"'>\"", ") + 1\n\t\t", "If", " ", "tstart", " <> 1 ", "Then", "\n\t\t    ", "tend", " = ", "InStr", "(", "oTextbox", ".", "Formattedtext", ", ", "\"</Style\"", ") - 1\n\t\t    ", "curtext", " = ", "Mid", "(", "oTextbox", ".", "Formattedtext", ", ", "tstart", " + 1, ", "tend", " - ", "tstart", ")\n\t\t", "Else", "\n\t\t    ", "curtext", " = ", "oTextbox", ".", "Formattedtext", "  \n\t\t", "End", " ", "If", "\n\n\t\t", "sFormattedtext", " = ", "\"<StyleOverride FontSize='\"", " & ", "theight", " &", "\"'>\"", "& ", "curtext", " & ", "\"</StyleOverride>\"", "\n\t\t", "'sFormattedText=\"<StyleOverride FontSize='0.8' Bold='True' Italic='True' Underline='True'>red green</StyleOverride>\" ", "\n\t\t", "oTextbox", ".", "Formattedtext", " = ", "sFormattedtext", "\n\t", "Next", "\n\n\t", "Else", "\n\t\t", "MessageBox", ".", "Show", "(", "\"Active Edit Object is not a Sketch, please activate a sketch\"", ", ", "\"iLogic\"", ")\n\t", "End", " ", "If"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Skip iproperty if feild is blank.\n                    ", "solution": ["'- - - - - - - - - - - find or create custom iProperty - - - - - - - - - - ", "\n", "'Define the open document", "\n", "Dim", " ", "openDoc", " ", "As", " ", "Document", "\n", "openDoc", " = ", "ThisDoc", ".", "Document", "\n", "'Look at all of the files referenced in the open document", "\n", "Dim", " ", "docFile", " ", "As", " ", "Document", "\n", "For", " ", "Each", " ", "docFile", " ", "In", " ", "openDoc", ".", "AllReferencedDocuments", "      \n \n", "Dim", " ", "propertyName1", " ", "As", " ", "String", " = ", "\"MyNumber\"", "\n ", "'define custom property collection", "\n", "oCustomPropertySet", " = ", "docFile", ".", "PropertySets", ".", "Item", "(", "\"Inventor User Defined Properties\"", ")\n", "Try", "\n", "'look for property", "\n", "oProp", " = ", "oCustomPropertySet", ".", "Item", "(", "propertyName1", ")\n", "Catch", "\n", "' Assume error means not found so create it", "\n", "oCustomPropertySet", ".", "Add", "(0, ", "propertyName1", ")\n", "End", " ", "Try", "\n", "Next", "\n\n", "'- - - - - - - - - - - sum the custom iProperty - - - - - - - - - - ", "\n", "'clear the custom property in the assembly ", "\n", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MyNumber\"", ") = 0\n\n", "'set a reference to the assembly component definintion.", "\n", "'This assumes an assembly document is open.", "\n", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", "\n", "oAsmCompDef", " = ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", "\n", "'Iterate through all of the occurrences", "\n", "Dim", " ", "oOccurrence", " ", "As", " ", "ComponentOccurrence", "\n", "For", " ", "Each", " ", "oOccurrence", " ", "In", " ", "oAsmCompDef", ".", "Occurrences", "\n", "'check for and skip virtual components", "\n", "'(in case a virtual component trips things up)", "\n", "If", " ", "Not", " ", "TypeOf", " ", "oOccurrence", ".", "Definition", " ", "Is", " ", "VirtualComponentDefinition", " ", "Then", "\n\t", "'custom property in the assembly ", "\n\t", "xNumber", " = ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MyNumber\"", ") \n\t", "'custom property in the parts", "\n\t", "yNumber", " = ", "iProperties", ".", "Value", "(", "oOccurrence", ".", "Name", ",", "\"Custom\"", ", ", "\"MyNumber\"", ")\n\t", "If", " ", "Not", " ", "yNumber", " ", "Is", " ", "Nothing", " ", "Then", "\n\t", "'If Not YNumber = \"\" Then 'or this line instead", "\n\t\t", "sumNumber", " = ", "xNumber", " + ", "yNumber", " / 2\n\t\t", "'set custom property values", "\n\t\t", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MyNumber\"", ") = ", "sumNumber", "\n\t", "End", " ", "If", "\n", "End", " ", "If", "\n", "Next", "\n\n", "MyPN", " = ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MyNumber\"", ")\n", "MessageBox", ".", "Show", "(", "MyPN", ", ", "\"The part number\"", ")"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic for summy up selected Ipropeties parts\n                    ", "solution": ["Sub", " ", "Main", "\n    ", "'", "- - - - - - - - - - - sum the custom iProperty - - - - - - - - - -", "\n    ", "'", "clear the custom property in the assembly", "\n    ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "estimated cost", "\"", ")", " ", "=", " ", "0", "\n    ", "'", "set a reference to the assembly component definintion.", "\n    ", "'", "This assumes an assembly document is open.", "\n    ", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", "\n    ", "oAsmCompDef", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", "\n    \n    ", "'", "Iterate through all of the occurrences", "\n    ", "Dim", " ", "oOccurrence", " ", "As", " ", "ComponentOccurrence", "\n    ", "For", " ", "Each", " ", "oOccurrence", " ", "In", " ", "oAsmCompDef", ".", "Occurrences", "\n        \n        ", "Call", " ", "ProcessAllChildren", "(", "oOccurrence", ")", "\n    \n    ", "Next", "\n    \n    ", "MessageBox", ".", "Show", "(", "\"Setting ", "Estimated cost for top level assembly to: ", "\"", " ", "&", " ", "\"\u00a3", "\"", " ", "&", " ", "sumNumber", ", ", "\"", "Estimated cost", "\"", ")", "\n    ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "estimated cost", "\"", ")", " ", "=", " ", "Round", " ", "(", "sumNumber", ",", "2", ")", "\n\n", "End Sub", "\n\n", "'", "Global ", "\n", "Private", " ", "sumNumber", " ", "As", " ", "Double", " ", "=", " ", "0", "\n\n", "Public", " ", "Sub", " ", "ProcessAllChildren", "(", "ByRef", " ", "oOccurrence", " ", "As", " ", "ComponentOccurrence", ")", " \n\n      ", "If", " ", "Not", " ", "TypeOf", " ", "oOccurrence", ".", "Definition", " ", "Is", " ", "VirtualComponentDefinition", " ", "Then", "\n        ", "'", "property in the parts", "\n        ", "yNumber", " ", "=", " ", "iProperties", ".", "Value", "(", "oOccurrence", ".", "Name", ", ", "\"", "Project", "\"", ", ", "\"", "estimated cost", "\"", ")", "\n        ", "'", "MessageBox.Show(\"yNumber =  \" & yNumber, oOccurrence.Name)", "\n        ", "sumNumber", " ", "=", " ", "sumNumber", " ", "+", " ", "yNumber", "\n        ", "'", "MessageBox.Show(\"sumNumber =  \" & sumNumber,\"Running Total\")", "\n    ", "Else", "\n        ", "'", "MessageBox.Show(\"This is a VirtualComponentDefinition\",  oOccurrence.Name)", "\n    ", "End", " ", "If", "\n\n    ", "Dim", " ", "oCompOcc", " ", "As", " ", "ComponentOccurrence", "\n    ", "Dim", " ", "oComponentSubOccurrences", " ", "As", " ", "ComponentOccurrences", "\n", "'", "    \n    ", "For", " ", "Each", " ", "oCompOcc", " ", "In", " ", "oOccurrence", ".", "SubOccurrences", "\n        \n        ", "If", " ", "oCompOcc", ".", "DefinitionDocumentType", " ", "=", " ", "kAssemblyDocumentObject", " ", "Then", "\n           ", "oComponentSubOccurrences", " ", "=", " ", "oCompOcc", ".", "SubOccurrences", "\n           \n           ", "If", " ", "Not", " ", "oComponentSubOccurrences", " ", "Is", " ", "Nothing", " ", "Then", "\n            ", "If", " ", "oComponentSubOccurrences", ".", "count", " ", ">", " ", "0", " ", "Then", "\n                ", "ProcessAllChildren", "(", "oCompOcc", ")", "\n            ", "End", " ", "If", "\n           ", "End", " ", "If", "\n        ", "Else", "\n            ", "ProcessAllChildren", "(", "oCompOcc", ")", "\n        ", "End", " ", "If", "\n        \n     ", "Next", "\n\n", "End Sub"], "author": "Lewis.Young"},
{"created at": [], "solution Title": "\n                        Re: ilogic add custom property if partnumber is the rigth ones\n                    ", "solution": [], "author": "acanx21"},
{"created at": [], "solution Title": "\n                        Re: BOM EXPORT-VISUAL STUIDO\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: How to create cosmetic bend centerlines with the API\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Modify some properties of an ipt or iam / Modificar algunas propiedades de u\n                    ", "solution": ["Get", "String", " = ", "Split", "(", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", "), ", "\"-\"", ")\n", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Stock Number\"", ") = Get", "string", "(3)\n\n", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", ") = ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", ") & ", "\"-\"", " & ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Revision Number\"", ")", "LL = Len (iProperties.Value (\"Project\", \"Part Number\"))\n\nIf LL = 20 Then\niProperties.Value (\"Project\", \"Part Number\") = Left (iProperties.Value (\"Project\", \"Part Number\"), 17)\n\nElseIf LL = 19 Then\niProperties.Value (\"Project\", \"Part Number\") = Left (iProperties.Value (\"Project\", \"Part Number\"), 16)\n\nEnd If\n\nGetString = Split (iProperties.Value (\"Project\", \"Part Number\"), \"-\")\n\niProperties.Value (\"Project\", \"Stock Number\") = GetString (3)\n\niProperties.Value (\"Project\", \"Part Number\") = iProperties.Value (\"Project\", \"Part Number\") & \"-\" & iProperties.Value (\"Project\", \"Revision Number\")", "LL = Len(iProperties.Value(\"Project\", \"Part Number\"))\n\nIf LL = 20 Then\niProperties.Value(\"Project\", \"Part Number\") = Left(iProperties.Value(\"Project\", \"Part Number\"), 17)\n\nElseIf LL = 19 Then\niProperties.Value(\"Project\", \"Part Number\") = Left(iProperties.Value(\"Project\", \"Part Number\"), 16)\n\nEnd If\n\nGetString = Split(iProperties.Value(\"Project\", \"Part Number\"), \"-\")\n\niProperties.Value(\"Project\", \"Stock Number\") = GetString(3)\n\niProperties.Value(\"Project\", \"Part Number\") = iProperties.Value(\"Project\", \"Part Number\") & \"-\" & iProperties.Value(\"Project\", \"Revision Number\")", "GetString", " = ", "Split", "(", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", "), ", "\"-\"", ")\n", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Stock Number\"", ") = ", "GetString", "(3)\n\n", "Try", "\n\t", "GetString", "(4) = ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Revision Number\"", ")\n\t", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", ") = ", "GetString", "(0) & ", "\"-\"", " & ", "GetString", "(1)& ", "\"-\"", " & ", "GetString", "(2) & ", "\"-\"", " & ", "GetString", "(3) & ", "\"-\"", " & ", "GetString", "(4)\n", "Catch", "\n\t", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", ") = ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", ") & ", "\"-\"", " & ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Revision Number\"", ")\n", "End", " ", "Try"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: ilogic: exclude derived parts in export loop assembly components\n                    ", "solution": ["Sub", " ", "Main", "()\n", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oRefParts", " ", "As", " ", "DocumentsEnumerator", "\n", "oRefParts", " = ", "oAsmDoc", ".", "AllReferencedDocuments", "\n", "Dim", " ", "oRefPart", " ", "As", " ", "Document", "\n", "'Define array lists to hold file name values", "\n", "Dim", " ", "aExcludedFileList", " ", "As", " ", "New", " ", "ArrayList", "\n", "Dim", " ", "aOpenFileList", " ", "As", " ", "New", " ", "ArrayList", "\n\n", "Dim", " ", "oFile", " ", "As", " ", "File", "\n", "Dim", " ", "oFileDescriptor", " ", "As", " ", "FileDescriptor", "\n\n\t", "' Iterate through each part in the assembly", "\n\t", "For", " ", "Each", " ", "oRefPart", " ", "In", " ", "oRefParts", "\n\t\t", "iptPathName", " = ", "Left", "(", "oRefPart", ".", "FullDocumentName", ", ", "Len", "(", "oRefPart", ".", "FullDocumentName", ") -3) & ", "\"ipt\"", "\n\t\t", "aOpenFileList", ".", "Add", "(", "iptPathName", ")\n\t\t", "oFile", " = ", "oRefPart", ".", "File", "\n\t\t", "'Check for further Referenced files ( Derived Parts)", "\n\t\t", "If", " ", "oFile", ".", "ReferencedFileDescriptors", ".", "Count", " = 0 ", "Then", "\n\t\t", "Else", "\n\t\t\t", "'If Reference is found, add file name to the excluded list", "\n\t\t\t", "For", " ", "Each", " ", "oFileDescriptor", " ", "In", " ", "oFile", ".", "ReferencedFileDescriptors", "\t\t\n\t\t\t\t", "sDerivePart", " = ", "oFileDescriptor", ".", "FullFileName", "\n\t\t\t\t", "aExcludedFileList", ".", "Add", "(", "sDerivePart", ")\n\t\t\t", "Next", "\n\t\t", "End", " ", "If", "\n\t", "Next", "\n\t\n\t", "'Remove any duplicates from excluded list", "\n\t", "For", " ", "i", " ", "As", " ", "Integer", " = ", "aExcludedFileList", ".", "Count", " - 1 ", "To", " 0 ", "Step", " -1\n            ", "'Check whether this is the first instance of this item.", "\n            ", "If", " ", "aExcludedFileList", ".", "IndexOf", "(", "aExcludedFileList", "(", "i", ")) <> ", "i", " ", "Then", "\n                ", "'This is not the first instance of this item so remove it.", "\n                ", "aExcludedFileList", ".", "RemoveAt", "(", "i", ")\n            ", "End", " ", "If", "\n        ", "Next", " ", "i", "\n\t\n\t", "'Iterate through valid occurrence files", "\n\t", "For", " ", "Each", " ", "sFile", " ", "In", " ", "aOpenFileList", "\n\t\t", "'Check against excluded files", "\n\t\t", "For", " ", "Each", " ", "sItem", " ", "In", " ", "aExcludedFileList", "\n\t\t\t", "'If files are not on the excluded list, process them", "\n\t\t\t", "If", " ", "Not", " ", "sItem", " = ", "sFile", " ", "Then", "\n\t\t\t\t", "'Open Part", "\n\t\t\t\t", "oPartDoc", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "sFile", ", ", "True", ")\n\t\t\t\t", "'Set paths and properties", "\n\t\t\t\t", "sFolder", " = ", "\"YOUR FILE PATH\"", " ", "'***************************************************************************************************", "\n\t\t\t\t", "sPartName", " = ", "System", ".", "IO", ".", "Path", ".", "GetFileNameWithoutExtension", "(", "oPartDoc", ".", "FullFileName", ")\n\t\t\t\t", "sRevNumPart", " = ", "oPartDoc", ".", "PropertySets", ".", "Item", "(", "\"Inventor Summary Information\"", ").", "Item", "(", "\"Revision Number\"", ").", "Value", "\t\n\t\t\t\t", "'Process IGES", "\n\t\t\t\t", "ProcessIGES", "(", "sFolder", ", ", "sPartName", ", ", "sRevNumPart", ")\n\t\t\t\t", "'Process STEP", "\n\t\t\t\t", "ProcessSTEP", "(", "sFolder", ", ", "sPartName", ", ", "sRevNumPart", ")\n\t\t\t\t", "'Close Document", "\n\t\t\t\t", "oPartDoc", ".", "Close", "(", "True", ")\n\t\t\t", "End", " ", "If", "\n\t\t", "Next", "\n\t", "Next", "\n", "End", " ", "Sub", "\n\n\n\n", "Function", " ", "ProcessIGES", "(", "sFolder", " ", "As", " ", "String", ", ", "sPartName", " ", "As", " ", "String", ", ", "sRevNumPart", " ", "As", " ", "String", ")\n", "' Get the IGES translator Add-In.", "\n", "Dim", " ", "oIGESTranslator", " ", "As", " ", "TranslatorAddIn", "\n", "oIGESTranslator", " = ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"{90AF7F44-0C01-11D5-8E83-0010B541CD80}\"", ")\n", "Dim", " ", "oContext", " ", "As", " ", "TranslationContext", "\n", "oContext", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "Dim", " ", "oOptions", " ", "As", " ", "NameValueMap", "\n", "oOptions", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "If", " ", "oIGESTranslator", ".", "HasSaveCopyAsOptions", "(", "ThisApplication", ".", "ActiveDocument", ", ", "oContext", ", ", "oOptions", ") ", "Then", "\n   ", "' Set geometry type for wireframe.", "\n   ", "' 0 = Surfaces, 1 = Solids, 2 = Wireframe", "\n   ", "oOptions", ".", "Value", "(", "\"GeometryType\"", ") = 1\n   ", "' To set other translator values:", "\n   ", "' oOptions.Value(\"SolidFaceType\") = n", "\n   ", "' 0 = NURBS, 1 = Analytic", "\n   ", "' oOptions.Value(\"SurfaceType\") = n", "\n   ", "' 0 = 143(Bounded), 1 = 144(Trimmed)", "\n", "oContext", ".", "Type", " = ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "Dim", " ", "oData", " ", "As", " ", "DataMedium", "\n", "oData", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n", "oData", ".", "FileName", " = ", "sFolder", " & ", "\"\\\"", " & ", "sPartName", " & ", "\" V\"", " & ", "sRevNumPart", " & ", "\".igs\"", "\n", "oIGESTranslator", ".", "SaveCopyAs", "(", "ThisApplication", ".", "ActiveDocument", ", ", "oContext", ", ", "oOptions", ", ", "oData", ")\n", "End", " ", "If", "\n\n", "End", " ", "Function", "\n\n", "Function", " ", "ProcessSTEP", "(", "sFolder", " ", "As", " ", "String", ", ", "sPartName", " ", "As", " ", "String", ", ", "sRevNumPart", " ", "As", " ", "String", ")\n\t", "' Get the STEP translator Add-In.", "\n", "Dim", " ", "oSTEPTranslator", " ", "As", " ", "TranslatorAddIn", "\n", "oSTEPTranslator", " = ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"{90AF7F40-0C01-11D5-8E83-0010B541CD80}\"", ")\n", "Dim", " ", "oContext", " ", "As", " ", "TranslationContext", "\n", "oContext", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "Dim", " ", "oOptions", " ", "As", " ", "NameValueMap", "\n", "oOptions", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "If", " ", "oSTEPTranslator", ".", "HasSaveCopyAsOptions", "(", "ThisApplication", ".", "ActiveDocument", ", ", "oContext", ", ", "oOptions", ") ", "Then", "\n    ", "' Set application protocol.", "\n    ", "' 2 = AP 203 - Configuration Controlled Design", "\n    ", "' 3 = AP 214 - Automotive Design", "\n    ", "oOptions", ".", "Value", "(", "\"ApplicationProtocolType\"", ") = 3\n    ", "' Other options...", "\n    ", "'oOptions.Value(\"Author\") = \"\"", "\n    ", "'oOptions.Value(\"Authorization\") = \"\"", "\n    ", "'oOptions.Value(\"Description\") = \"\"", "\n    ", "'oOptions.Value(\"Organization\") = \"\"", "\n    ", "oContext", ".", "Type", " = ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n    ", "Dim", " ", "oData", " ", "As", " ", "DataMedium", "\n    ", "oData", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n    ", "oData", ".", "FileName", " = ", "sFolder", " & ", "\"\\\"", " & ", "sPartName", " & ", "\" V\"", " & ", "sRevNumPart", " & ", "\".stp\"", "\n", "oSTEPTranslator", ".", "SaveCopyAs", "(", "ThisApplication", ".", "ActiveDocument", ", ", "oContext", ", ", "oOptions", ", ", "oData", ")\n", "End", " ", "If", "\n", "End", " ", "Function", "\n"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: How to highlight the cylindrical faces in the subassembly?\n                    ", "solution": ["Sub FaceHighlight()\n    'Dim hs As HighlightSet\n    Dim doc As AssemblyDocument\n    Set doc = ThisApplication.ActiveDocument\n    Set hs = doc.CreateHighlightSet\n    Dim tr As TransientObjects\n    Set tr = ThisApplication.TransientObjects\n    Dim oColor As Color\n    Set oColor = tr.CreateColor(150, 0, 0, 0.2)\n    hs.Color = oColor\n    Dim occs As ComponentOccurrences\n    Set occs = doc.ComponentDefinition.Occurrences\n    Dim occ As ComponentOccurrence\n    \n    MsgBox (occs.Count)\n    \n    Dim sbs As SurfaceBodies\n    Dim sb As SurfaceBodyProxy\n    Dim oFaces As Faces\n    Dim oFace As Face\n    \n    For Each occ In occs\n        If occ.SubOccurrences.Count > 0 Then\n            Call DoHighlight(occ)\n            'Set sbs = occ.SurfaceBodies\n        Else\n            Set sbs = occ.SurfaceBodies\n        End If\n        \n        For Each sb In sbs\n            Set oFaces = sb.Faces\n            For Each oFace In oFaces\n                If oFace.SurfaceType = kCylinderSurface Then\n                    hs.AddItem oFace\n                End If\n            Next\n        Next\n    Next\n    MsgBox (\"selected\")\n    'hs.Clear\n    \nEnd Sub\n\nPrivate Sub DoHighlight(ByVal occ As ComponentOccurrence)\n    On Error GoTo ErrorHandler:\n    \n    Dim occs As ComponentOccurrences\n    Set occs = occ.SubOccurrences\n    Dim subOcc As ComponentOccurrence\n    \n    Dim sbs As SurfaceBodies\n    Dim sb As SurfaceBody\n    Dim oFaces As Faces\n    Dim oFace As Face\n    \n    For Each subOcc In occs\n        If occ.SubOccurrences.Count > 0 Then\n            Call DoHighlight(subOcc)\n            Set sbs = subOcc.SurfaceBodies\n        Else\n            Set sbs = subOcc.SurfaceBodies\n        End If\n        \n        For Each sb In sbs\n            Set oFaces = sb.Faces\n            For Each oFace In oFaces\n                If oFace.SurfaceType = kCylinderSurface Then\n                    hs.AddItem oFace\n                End If\n            Next\n        Next\n\n    Next\nErrorHandler:\n\nEnd Sub"], "author": "Cody.Redding"},
{"created at": [], "solution Title": "\n                        Re: How to add T-head bolt on the assembly?\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Inventor is over rotating imported blocks from C# add-in\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Having problem with transform points\n                    ", "solution": ["Dim oAsmDoc As AssemblyDocument = ThisDoc.Document\nDim oAsmCompDef As AssemblyComponentDefinition = oAsmDoc.ComponentDefinition\n\nDim prodAssyOcc As ComponentOccurrence = oAsmCompDef.Occurrences.ItemByName(\"SubMatrix:1\")\nDim prodAssyDef As AssemblyComponentDefinition = prodAssyOcc.Definition\n\n' Iterate through the occurreces in the \"Submatrix\" assembly.\nFor Each occ As ComponentOccurrence In prodAssyDef.Occurrences\n    ' Get the component associated with this occurrence.\n    Dim prodDef As PartComponentDefinition = occ.Definition\n    \n    ' Create the transform for this occurrence.\n    Dim trans As Matrix = occ.Transformation\n    trans.Invert()\n    Dim temp As Matrix = prodAssyOcc.Transformation\n    temp.Invert()\n    trans.TransformBy(temp)\n    \n    ' Iterate through the workpoints in this part.\n    For Each wp As WorkPoint In prodDef.WorkPoints\n        If wp.Name <> \"Center Point\" Then\n            ' Get the position of the work point.\n            Dim pstn As Point = wp.Point\n            \n            ' Transform the point.\n            pstn.TransformBy(trans)\n            \n            ' Create a work point in the top assembly\n            Call oAsmCompDef.WorkPoints.AddFixed(pstn)\n        End If\n    Next\nNext"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: File Naming Defaults API access\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Help - Getting surface area from assembly document\n                    ", "solution": ["            Dim asmDoc As AssemblyDocument = invApp.ActiveDocument\n           ' Dim sb As SurfaceBody = asmDoc.ComponentDefinition.SurfaceBodies.Item(1)\n            Dim sbo As SurfaceBody = asmDoc.ComponentDefinition.Occurrences(1).SurfaceBodies(1)\n            Dim sbd As SurfaceBody = asmDoc.ComponentDefinition.Occurrences(1).Definition.SurfaceBodies(1)\n           ' Debug.Print(sb.Volume(4))\n            Debug.Print(sbo.Volume(4))\n            Debug.Print(sbd.Volume(4))"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: How to trim/edit in assembly to make intersect and join parts\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Macro or iLogic to Select Drawing edges\n                    ", "solution": ["Dim", " ", "oApp", " ", "As", " ", "Application", "\n", "Dim", " ", "oDD", " ", "As", " ", "DrawingDocument", "\n", "Dim", " ", "oSht", " ", "As", " ", "Sheet", "\n", "Dim", " ", "oDV", " ", "As", " ", "DrawingView", "\n", "Dim", " ", "oDC", " ", "As", " ", "DrawingCurve", "\n", "Dim", " ", "oDCS", " ", "As", " ", "DrawingCurveSegment", "\n", "Dim", " ", "oLayer", " ", "As", " ", "String", "\n\n", "oApp", " = ", "ThisApplication", "\n", "oDD", " = ", "oApp", ".", "ActiveDocument", "\n", "oSht", " = ", "oDD", ".", "ActiveSheet", "\n", "oLayer", " = ", "\"Hidden (ISO-2)\" 'Change this", "\n\n", "For", " ", "Each", " ", "oDV", " ", "In", " ", "oSht", ".", "DrawingViews", "\n    ", "For", " ", "Each", " ", "oDC", " ", "In", " ", "oDV", ".", "DrawingCurves", "\n        ", "For", " ", "Each", " ", "oDCS", " ", "In", " ", "oDC", ".", "Segments", "\n            ", "If", " ", "oDCS", ".", "Layer", ".", "Name", " = ", "oLayer", " ", "Then", "\n                ", "oDCS", ".", "Visible", " = ", "False", "\n            ", "End", " ", "If", "\n        ", "Next", "\n    ", "Next", "\n    \n", "Next", "\n\u00a0"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Delete All event triggers\n                    ", "solution": [], "author": "vulic"},
{"created at": [], "solution Title": "\n                        Re: Create a Ribbon Button to run iLogic\n                    ", "solution": [], "author": "Jesper_S"},
{"created at": [], "solution Title": "\n                        Re: kDataDropIOMechanism\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Control the angle of a HoleThreadNote leader?\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Changing Linked Parameter Files with ilogic\n                    ", "solution": ["'present a File Selection dialog\nDim oFileDlg As Inventor.FileDialog = Nothing\nInventorVb.Application.CreateFileDialog(oFileDlg)\noFileDlg.InitialDirectory = oOrigRefName\noFileDlg.CancelError = True\nOn Error Resume Next\noFileDlg.ShowOpen()\nIf Err.Number <> 0 Then\nReturn\nElseIf oFileDlg.FileName <> \"\" Then\nselectedfile = oFileDlg.FileName\nEnd If\n\nOn Error Resume Next\n    oDoc = ThisApplication.Documents.ItemByName(selectedfile)\n    If Err.Number <> 0 Then\n        oDoc = ThisApplication.Documents.Open(selectedfile, False)\n        _DocOpened = True\n        MessageBox.Show(\"Must Select an Assembly File\", \"Error\")\n\n    End If\nOn Error GoTo 0\n\nDim oOcc As AssemblyDocument = ThisDoc.Document\nDim oCompDef As AssemblyComponentDefinition = oDoc.ComponentDefinition\nDim oUserParams As UserParameters = oCompDef.Parameters.UserParameters\n\nFor Each oParam In oUserParams\n\n    'Parameter.Quiet = True\n    \n    ", "Parameter(oOcc,oParam.Name) = oDoc.componentDefinition.Parameters.Item(oParam.Name).Value/2.54", "\n\nNext\n\nIf _DocOpened = True\n    oDoc.Close\nEnd If"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Co-ordinates of a named workpoint (in component) relative to assembly origin\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "AssemblyDocument", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oOccDef", " ", "As", " ", "ComponentDefinition", "\n", "oOccDef", " = ", "oDoc", ".", "ComponentDefinition", ".", "Occurrences", ".", "ItemByName", "(\"", "ComponentName\"", ").", "Definition", "\n\n", "Dim", " ", "oWP", " ", "As", " ", "WorkPoint", "\n", "oWP", " = ", "oOccDef", ".", "WorkPoints", "(", "\"Test Point\"", ")", "oOccDef = Components", "(", "\"ComponentName\"", ").", "Occurrence", ".", "Definition", "Dim", " ", "oDoc", " ", "As", " ", "AssemblyDocument", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n    \n", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", "\n", "oOcc", " = ", "oDoc", ".", "ComponentDefinition", ".", "Occurrences", ".", "ItemByName", "(", "\"Part1:1\"", ")\n    \n", "Dim", " ", "oOccDef", " ", "As", " ", "ComponentDefinition", "\n", "oOccDef", " = ", "oOcc", ".", "Definition", "\n    \n", "Dim", " ", "oWP", " ", "As", " ", "WorkPoint", "\n", "oWP", " = ", "oOccDef", ".", "WorkPoints", "(", "\"Test\"", ")\n", "MsgBox", "(", "\"x: \"", " + ", "oWP", ".", "Point", ".", "X", ".", "ToString", "() + ", "\", y: \"", " + ", "oWP", ".", "Point", ".", "Y", ".", "ToString", "() + ", "\", z: \"", " + ", "oWP", ".", "Point", ".", "Z", ".", "ToString", "() )\n", "Dim", " ", "oWPProxy", " ", "As", " ", "WorkPointProxy", "\n", "Call", " ", "oOcc", ".", "CreateGeometryProxy", "(", "oWP", ", ", "oWPProxy", ")\n", "MsgBox", "(", "\"x: \"", " + ", "oWPProxy", ".", "Point", ".", "X", ".", "ToString", "() + ", "\", y: \"", " + ", "oWPProxy", ".", "Point", ".", "Y", ".", "ToString", "() + ", "\", z: \"", " + ", "oWPProxy", ".", "Point", ".", "Z", ".", "ToString", "() )"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Extrude cut in multibody part\n                    ", "solution": ["  Dim oPartDoc As PartDocument\n         oPartDoc = ThisApplication.ActiveDocument\n\n        Dim oPartDef As PartComponentDefinition\n         oPartDef = oPartDoc.ComponentDefinition\n\n        ' Create a sketch.\n        Dim oSketch As PlanarSketch\n         oSketch = oPartDef.Sketches.Add(oPartDef.WorkPlanes.Item(3))\n\n        Dim oTG As TransientGeometry\n         oTG = ThisApplication.TransientGeometry\n\n        ' *** The kNewBodyOperation type of operation is new in Inventor 2010.\n        ' Draw a rectangle and oExtrude it to create a new body.\n        Call oSketch.SketchLines.AddAsTwoPointRectangle( _\n            oTG.CreatePoint2d(-4, -2), _\n            oTG.CreatePoint2d(-3, 2))\n\n        Dim oProfile As Profile\n         oProfile = oSketch.Profiles.AddForSolid\n\n        Dim oExtrude As ExtrudeFeature\n         oExtrude = oPartDef.Features.ExtrudeFeatures.AddByDistanceExtent( _\n            oProfile, 2, kSymmetricExtentDirection, kNewBodyOperation)\n\n        ' Create a second sketch.\n         oSketch = oPartDef.Sketches.Add(oPartDef.WorkPlanes.Item(3))\n\n        ' *** The kNewBodyOperation type of operation is new in Inventor 2010.\n        ' Draw a rectangle and oExtrude it to create a new body.\n        Call oSketch.SketchLines.AddAsTwoPointRectangle( _\n            oTG.CreatePoint2d(-2, -2), _\n            oTG.CreatePoint2d(-1, 2))\n\n         oProfile = oSketch.Profiles.AddForSolid\n         oExtrude = oPartDef.Features.ExtrudeFeatures.AddByDistanceExtent( _\n            oProfile, 2, kSymmetricExtentDirection, kNewBodyOperation)\n\n        ' Create a third sketch.\n         oSketch = oPartDef.Sketches.Add(oPartDef.WorkPlanes.Item(1))\n\n        ' Draw a circle and oExtrude it to cut through the existing bodies.\n        oSketch.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0),0.5)\n\n         oProfile = oSketch.Profiles.AddForSolid\n         oExtrude = oPartDef.Features.ExtrudeFeatures.AddByThroughAllExtent( _\n            oProfile, kNegativeExtentDirection, kCutOperation)\n\n\t\t'Define which body to be cut. In this case, body number 2\n        cutbody = 2\n\t\t\n        Dim bodies As ObjectCollection\n        bodies = ThisApplication.TransientObjects.CreateObjectCollection\n     \tDim body As SurfaceBody\n\t\ti = 1\n\t\tFor Each body In oPartDef.SurfaceBodies\n\t\t\tIf i = cutbody Then\n\t\t\t\t'If the i integer matches cutbody, add this body to the affected bodies by the extrusion\n\t\t\t\tbodies.Add(body)\n\t\t\tEnd If\n\t\t\ti = i+1\n        Next\n        Call oExtrude.SetAffectedBodies(bodies)\n   "], "author": "fredbnor"},
{"created at": [], "solution Title": "\n                        Re: Help with ilogic to check if all bends in sheet metal are 90 deg?\n                    ", "solution": ["Sub", " ", "Main", "()\n", "'Define the document", "\n", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "oCompDef", " = ", "oDoc", ".", "ComponentDefinition", "\n\n", "'Find angle of each bend", "\n", "Dim", " ", "i", " ", "As", " ", "Integer", " = 0\n", "Dim", " ", "oBend", " ", "As", " ", "FlatBendResult", "\n", "For", " ", "Each", " ", "oBend", " ", "In", " ", "oCompDef", ".", "FlatPattern", ".", "FlatBendResults", "\n\t", "x", " = ", "oBend", ".", "Angle", " \n\t", "AngleCheck", " = ", "Round", "(", "x", " / ", "PI", " * 180, 6)\n\t\t", "'Add check for all angles not 90 degrees", "\n\t\t", "If", " ", "Not", " ", "AngleCheck", " = 90 ", "Then", "\n\t\t\t", "i", " += 1\n\t\t", "End", " ", "If", "\n", "Next", "\n\n", "Dim", " ", "sSheetMetalStyle", " ", "As", " ", "String", "\n", "'''", "Check condition for setting sheet metal style", "\n", "If", " ", "i", " > 0 ", "Then", "\n", "sSheetMetalStyle", " = ", "\"kFactorStyle\"", " ", "'CHANGE THIS TO MATCH YOUR STYLES", "\n", "Else", "\n", "sSheetMetalStyle", " = ", "\"OtherStyle\"", " ", "'CHANGE THIS TO MATCH YOUR STYLES", "\n", "End", " ", "If", "\n\n", "oCompDef", ".", "SheetMetalStyles", ".", "Item", "(", "sSheetMetalStyle", ").", "Activate", "\n", "End", " ", "Sub", "Sub", " ", "Main", "()\n", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "oCompDef", " = ", "oDoc", ".", "ComponentDefinition", "\n\n", "Dim", " ", "sMaterial", " ", "As", " ", "String", " = ", "oDoc", ".", "ActiveMaterial", ".", "DisplayName", "\n", "Dim", " ", "sUnfoldPt1", " ", "As", " ", "String", " = ", "\"Charlies3DT \"", "\n", "Dim", " ", "sUnfoldStr", " ", "As", " ", "String", " = ", "sUnfoldPt1", " & ", "sMaterial", "\n\n", "Dim", " ", "i", " ", "As", " ", "Integer", " = 0\n", "Dim", " ", "j", " ", "As", " ", "Integer", " = 0\n", "Dim", " ", "sUnfoldName", " ", "As", " ", "String", "\n\n", "Dim", " ", "oUnfoldMethod", " ", "As", " ", "UnfoldMethod", "\n\t", "For", " ", "Each", " ", "oUnfoldMethod", " ", "In", " ", "oCompDef", ".", "UnfoldMethods", "\n\t", "sUnfoldName", " = ", "oUnfoldMethod", ".", "Name", "\n\t\t", "If", " ", "sUnfoldName", " = ", "sUnfoldStr", " ", "Then", " \n\t\t\t", "oCompDef", ".", "UnfoldMethod", " = ", "oUnfoldMethod", "\n\t\t\t", "j", "+=1\n\t\t", "End", " ", "If", "\n\t", "i", "+=1\n\t", "Next", "\n\t\n\t", "iCheckIfFound", " = ", "i", " + ", "j", " ", "'If this is zero, then the unfold style has not been found", "\n\t", "If", " ", "i", " - ", "iCheckIfFound", " = 0 ", "Then", " ", "MessageBox", ".", "Show", "(", "\"Cannot find the unfold style with the name \"", " & ", "sUnfoldStr", " _\n\t\t& ", "vbLf", " & ", "vblf", " & ", "\"Please check if it exists, if not please create it first\"", ", ", "\"Title\"", ")\n", "End", " ", "Sub"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: Zoom and change camera instantly (without transition animation)\n                    ", "solution": ["If ThisApplication.ActiveDocument Is ThisDoc.Document Then\n\t'Go to Home view\n\toCamera=ThisApplication.ActiveView.Camera\n\toCamera.ViewOrientationType = 10759\n\toCamera.Fit\n\t\n\toCamera.ApplyWithoutTransition\nEnd If"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Determine if a part is a Custom Content Center part\n                    ", "solution": ["Try", "\n", "is_Custom_CC_Member", " ", "=", " ", "iProperties", ".", "Value", "(", "\"", "ContentCenter", "\"", ", ", "\"", "IsCustomPart", "\"", ")", "\n", "num", " ", "=", " ", "Err", ".", "number", "\n", "Catch", "\n", "End", " ", "Try", "\n", "'", "If num <> 0 --> not CC part", "\n'", "If nu = 0 --> is_Custom_Part = True or false, for Custom or Standard part"], "author": "TONELLAL"},
{"created at": [], "solution Title": "\n                        Re: Export to PDF with date, not working.\n                    ", "solution": [], "author": "Charlies_3D_T"},
{"created at": [], "solution Title": "\n                        Re: Cannot create a WorkPlane Proxy\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Modifying an iLogic rule\n                    ", "solution": ["'define the active document as an assembly file", "\n", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", "\n", "oAsmDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "oAsmName", " = ", "Left", "(", "oAsmDoc", ".", "DisplayName", ", ", "Len", "(", "oAsmDoc", ".", "DisplayName", ") -4)\n", "'check that the active document is an assembly file", "\n", "If", " ", "ThisApplication", ".", "ActiveDocument", ".", "DocumentType", " <> ", "kAssemblyDocumentObject", " ", "Then", "\n", "MessageBox", ".", "Show", "(", "\"Pros\u00edm spus\u0165te pravidlo ze souboru sestavy.\"", ", ", "\"iLogic\"", ")\n", "Exit", " ", "Sub", "\n", "End", " ", "If", "\n", "'get user input", "\n", "RUsure", " = ", "MessageBox", ".", "Show", " ( _\n", "\"Toto pravidlo vyto\u0159\u00ed DXF soubory z vlo\u017een\u00fdch komponent, kter\u00e9 jsou plechov\u00e9 sou\u010d\u00e1sti.\"", " _\n& ", "vbLf", " & ", "\" \"", " _\n& ", "vbLf", " & ", "\"P\u0159edpokl\u00e1d\u00e1 se, \u017ee soubory jsou ULO\u017dENY a \u017ee v syst\u00e9mu je POVOLENO zobrazen\u00ed p\u0159\u00edpon soubor\u016f.\"", " _\n& ", "vbLf", " & ", "\" \"", " _\n& ", "vbLf", " & ", "\"Opravdu chcete vytvo\u0159it soubory DXF pro v\u0161echny komponenty sestavy?\"", " _\n& ", "vbLf", " & ", "\" \"", " _\n& ", "vbLf", " & ", "\"Export rozvin\u016f do DXF m\u016f\u017ee chv\u00edli trvat.\"", ", ", "\"iLogic - hromadn\u00fd export rozvin\u016f do DXF\"", ",", "MessageBoxButtons", ".", "YesNo", ")\n", "If", " ", "RUsure", " = ", "vbNo", " ", "Then", "\n", "Return", "\n", "Else", "\n", "End", " ", "If", "\n", "oPath", " = ", "Left", "(", "ThisDoc", ".", "Path", ", ", "Len", "(", "ThisDoc", ".", "Path", ")-14)\n", "oDataMedium", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n", "oContext", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " = ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "'get DXF target folder path", "\n", "oFolder", " = ", "oPath", " & ", "\"\\\"", " & ", "\"9. V\u00fdpalky\"", "\n", "'Check for the DXF folder and create it if it does not exist", "\n", "If", " ", "Not", " ", "System", ".", "IO", ".", "Directory", ".", "Exists", "(", "oFolder", ") ", "Then", "\n", "System", ".", "IO", ".", "Directory", ".", "CreateDirectory", "(", "oFolder", ")\n", "End", " ", "If", "\n", "'- - - - - - - - - - - - -", "\n", "'- - - - - - - - - - - - -Component - - - - - - - - - - - -", "\n", "'look at the files referenced by the assembly", "\n", "Dim", " ", "oRefDocs", " ", "As", " ", "DocumentsEnumerator", "\n", "oRefDocs", " = ", "oAsmDoc", ".", "AllReferencedDocuments", "\n", "Dim", " ", "oRefDoc", " ", "As", " ", "Document", "\n", "'work the the drawing files for the referenced models", "\n", "'this expects that the model has been saved", "\n", "For", " ", "Each", " ", "oRefDoc", " ", "In", " ", "oRefDocs", "\n", "iptPathName", " = ", "Left", "(", "oRefDoc", ".", "FullDocumentName", ", ", "Len", "(", "oRefDoc", ".", "FullDocumentName", ") -3) & ", "\"ipt\"", "\n", "'check that model is saved", "\n", "If", "(", "System", ".", "IO", ".", "File", ".", "Exists", "(", "iptPathName", ")) ", "Then", "\n", "Dim", " ", "oDrawDoc", " ", "As", " ", "PartDocument", "\n", "oDrawDoc", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "iptPathName", ", ", "True", ")\n\n\n", "'''", "*************************************************NEW SECTION********************************************", "\n", "Dim", " ", "sFullFilePath", " ", "As", " ", "String", " = ", "oRefDoc", ".", "FullFileName", "\n", "Dim", " ", "indexLoc", " ", "As", " ", "Integer", " = ", "sFullFilePath", ".", "LastIndexOf", "(", "\"\\\"", ") \n", "Dim", " ", "sFile", " ", "As", " ", "String", " = ", "sFullFilePath", ".", "Substring", "(", "indexLoc", " + 1, ", "sFullFilePath", ".", "Length", " - ", "indexLoc", " - 1)\n", "Dim", " ", "oFileName", " ", "As", " ", "String", " = ", "Left", "(", "sFile", ", ", "Len", "(", "sFile", ") -4)\n", "'''", "*************************************************NEW SECTION********************************************", "\n", "'''", " \n", "'''", "*****The below line was wrong, it is looking at the Display name, which will include the item count on the end. This is not the same as the file name.", "\n", "'*******oFileName = Left(oRefDoc.DisplayName, Len(oRefDoc.DisplayName) -4)", "\n\n", "oRevName", " = ", "iProperties", ".", "Value", "(", "oFileName", " & ", "\".ipt\"", ", ", "\"Project\"", ", ", "\"Revision Number\"", ")\n", "Try", "\n\n", "'Set the DXF target file name", "\n", "oDataMedium", ".", "FileName", " = ", "oFolder", " & ", "\"\\\"", " & ", "oFileName", " & ", "\" - VYP \"", " & ", "oRevName", " & ", "\".dxf\"", " \n", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "oCompDef", " = ", "oDrawDoc", ".", "ComponentDefinition", "\n", "If", " ", "oCompDef", ".", "HasFlatPattern", " = ", "False", " ", "Then", "\n", "oCompDef", ".", "Unfold", "\n", "Else", "\n", "oCompDef", ".", "FlatPattern", ".", "Edit", "\n", "End", " ", "If", "\n", "Dim", " ", "sOut", " ", "As", " ", "String", "\n    ", "sOut", " = ", "\"FLAT PATTERN DWG?AcadVersion=2000\"", " _\n+ ", "\"&RebaseGeometry=True\"", " _\n+ ", "\"&OuterProfileLayer=VN\u011aJ\u0160\u00cd \u0158EZ\"", " _\n+ ", "\"&InteriorProfilesLayer=VNIT\u0158N\u00cd \u0158EZ\"", " _\n+ ", "\"&BendDownLayer=OHYB DOL\u016e&BendDownLayerLineType=37638\"", " _\n+ ", "\"&BendUpLayer=OHYB NAHORU&BendUpLayerLineType=37638\"", " _\n+ ", "\"&InvisibleLayers=IV_ARC_CENTERS;IV_TANGENT;IV_ROLL;IV_ROLL_TANGENT;IV_ALTREP_BACK;IV_ALTREP_FRONT;IV_FEATURE_PROFILES_DOWN;IV_FEATURE_PROFILES;IV_TOOL_CENTER_DOWN\"", "  \n\n", "oCompDef", ".", "DataIO", ".", "WriteDataToFile", "(", "sOut", ", ", "oDataMedium", ".", "FileName", ")\n", "'just for check its works coretcly", "\n", "'i=MessageBox.Show(oDataMedium.FileName, \"Title\",MessageBoxButtons.OKCancel)", "\n", "'MessageBox.Show(i,\"title\",MessageBoxButtons.OK)", "\n", "'If i=2 Then", "\n", "'Exit Sub", "\n", "'End If", "\n", "oCompDef", ".", "FlatPattern", ".", "ExitEdit", "\n", "Catch", "\n", "End", " ", "Try", "\n", "oDrawDoc", ".", "Close", "\n", "Else", "\n", "End", " ", "If", "\n", "Next", "\n", "question", "=", "MessageBox", ".", "Show", "(", "\"Export rozvin\u016f plechov\u00fd d\u00edl\u016f do DXF dokon\u010den \"", " & ", "Now", "() & ", "vbLf", " & ", "\" \"", " & ", "vbLf", " & ", "\"Soubory vytvo\u0159eny v adres\u00e1\u0159i: \"", " & ", "vbLf", " & ", "oFolder", " & ", "vbLf", " & ", "\" \"", " & ", "vbLf", " & ", "\"Otev\u0159\u00edt adres\u00e1\u0159 se soubory DXF?\"", ", ", "\"Hotovo\"", ",", "MessageBoxButtons", ".", "YesNo", ")\n", "'open the folder where the new ffiles are saved", "\n", "If", " ", "question", " = ", "vbYes", " ", "Then", "\n", "Shell", "(", "\"explorer.exe \"", " & ", "oFolder", ",", "vbNormalFocus", ")\n", "End", " ", "If", "\n"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: VBA code to Read existing Custom iProperty or Create if not present\n                    ", "solution": ["Sub UpdateRangeParameters()\n\n    UpdatePartDescription\n    UpdatePartN\u00ba\n    UpdateManufacturer\n    UpdateVendorPartN\u00ba\n    UpdateVendorPrice\n\nEnd Sub\n\nPrivate Sub UpdatePartDescription()\n' Get the active part document.\nDim Doc As Document\nSet Doc = ThisApplication.ActiveDocument\n\n\n' Get the custom property set.\nDim customPropSet As PropertySet\n'Set customPropSet = invPartDoc.PropertySets.Item(\"User Defined Properties\")\nSet customPropSet = Doc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n\n' Attempt to get an existing custom property named \"Part_Description\".\nOn Error Resume Next\nDim Part_Description As Property\nSet Part_Description = customPropSet.Item(\"Part_Description\")\nIf Err.Number <> 0 Then\n    ' Property does not exist -> Add the property.\n    Dim textValue As String\n    textValue = \"Part Description\"\n    Call customPropSet.Add(textValue, \"Part_Description\")\nEnd If\n\nEnd Sub\n\nPrivate Sub UpdatePartN\u00ba()\n' Get the active part document.\nDim Doc As Document\nSet Doc = ThisApplication.ActiveDocument\n\n\n' Get the custom property set.\nDim customPropSet As PropertySet\n'Set customPropSet = invPartDoc.PropertySets.Item(\"User Defined Properties\")\nSet customPropSet = Doc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n\n' Attempt to get an existing custom property named \"Part_Description\".\nOn Error Resume Next\nDim Part_N\u00ba As Property\nSet Part_N\u00ba = customPropSet.Item(\"Part_N\u00ba\")\nIf Err.Number <> 0 Then\n    ' Property does not exist -> Add the property.\n    Dim textValue As String\n    textValue = \"Part N\u00ba\"\n    Call customPropSet.Add(textValue, \"Part_N\u00ba\")\nEnd If\n\nEnd Sub\n\nPrivate Sub UpdateManufacturer()\n' Get the active part document.\nDim Doc As Document\nSet Doc = ThisApplication.ActiveDocument\n\n\n' Get the custom property set.\nDim customPropSet As PropertySet\n'Set customPropSet = invPartDoc.PropertySets.Item(\"User Defined Properties\")\nSet customPropSet = Doc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n\n' Attempt to get an existing custom property named \"Part_Description\".\nOn Error Resume Next\nDim Manufacturer As Property\nSet Manufacturer = customPropSet.Item(\"Manufacturer\")\nIf Err.Number <> 0 Then\n    ' Property does not exist -> Add the property.\n    Dim textValue As String\n    textValue = \"Manufacturer\"\n    Call customPropSet.Add(textValue, \"Manufacturer\")\nEnd If\n\nEnd Sub\n\nPrivate Sub UpdateVendorPartN\u00ba()\n' Get the active part document.\nDim Doc As Document\nSet Doc = ThisApplication.ActiveDocument\n\n\n' Get the custom property set.\nDim customPropSet As PropertySet\n'Set customPropSet = invPartDoc.PropertySets.Item(\"User Defined Properties\")\nSet customPropSet = Doc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n\n' Attempt to get an existing custom property named \"Part_Description\".\nOn Error Resume Next\nDim Vendor_Part_N\u00ba As Property\nSet Vendor_Part_N\u00ba = customPropSet.Item(\"Vendor_Part_N\u00ba\")\nIf Err.Number <> 0 Then\n    ' Property does not exist -> Add the property.\n    Dim textValue As String\n    textValue = \"Vendor_Part_N\u00ba\"\n    Call customPropSet.Add(textValue, \"Vendor_Part_N\u00ba\")\nEnd If\n\nEnd Sub\n\nPrivate Sub UpdateVendorPrice()\n' Get the active part document.\nDim Doc As Document\nSet Doc = ThisApplication.ActiveDocument\n\n\n' Get the custom property set.\nDim customPropSet As PropertySet\n'Set customPropSet = invPartDoc.PropertySets.Item(\"User Defined Properties\")\nSet customPropSet = Doc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n\n' Attempt to get an existing custom property named \"Part_Description\".\nOn Error Resume Next\nDim Vendor_Price As Property\nSet Vendor_Price = customPropSet.Item(\"Vendor_Price\")\nIf Err.Number <> 0 Then\n    ' Property does not exist -> Add the property.\n    Dim textValue As String\n    textValue = \"Vendor_Price\"\n    Call customPropSet.Add(textValue, \"Vendor_Price\")\nEnd If\n\nEnd Sub", "Sub Main()\n'If you just want to make sure the iProperties exist, use this code:\niPropGet(\"Part_Description\")\niPropGet(\"PartN\u00ba\")\niPropGet(\"Manufacturer\")\niPropGet(\"Vendor_Part_N\u00ba\")\nEnd Sub\n\nFunction iPropGet(PropName As String, Optional MissingSetVal As Object = \"\", Optional Doc As Inventor.Document = Nothing) As Object\n\tIf Doc Is Nothing Then Doc = ThisDoc.Document\n\t\n\tDim CustomPropSet As Inventor.PropertySet = Doc.PropertySets.Item(\"Inventor User Defined Properties\")\n\t\n\tTry\n\t\tDim CurrentValue As Object = CustomPropSet.Item(PropName).Value\n\t\tReturn CurrentValue\n\tCatch\n\t\tDim oTransaction As Inventor.Transaction\n\t\tTry\n\t\t\toTransaction = ThisApplication.TransactionManager.StartTransaction(Doc,\"Create property \"\"\" & PropName & \"\"\"\")\n\t\t\t\tCustomPropSet.Add(MissingSetVal, PropName)\n\t\t\toTransaction.End\n\t\t\tReturn MissingSetVal 'Successfully created/set.\n\t\tCatch\n\t\t\tIf Not oTransaction Is Nothing Then oTransaction.Abort\n\t\t\tReturn -1 'Unable to create.\n\t\tEnd Try\n\t\t\n\t\tReturn MissingSetVal\n\tEnd Try\nEnd Function", "'If you want to specify a value to use if the iProperties don't exist, do so like this:", "Sub Main()\niPropGet(\"Part_Description\",\"ValueIfMissing\")\niPropGet(\"PartN\u00ba\",\"ValueIfMissing\")\niPropGet(\"Manufacturer\",\"ValueIfMissing\")\niPropGet(\"Vendor_Part_N\u00ba\",\"ValueIfMissing\")\nEnd Sub", "Sub Main()\n'If you want to make sure they exist AND use their values, use this code:\nDim PartDescription As String = iPropGet(\"Part_Description\",\"ValueIfMissing\")\nDim PartN\u00ba As String = iPropGet(\"PartN\u00ba\",\"ValueIfMissing\")\nDim Manufacturer As String = iPropGet(\"Manufacturer\",\"ValueIfMissing\")\nDim Vendor_Part_N\u00ba As String = iPropGet(\"Vendor_Part_N\u00ba\",\"ValueIfMissing\")\nEnd Sub", "Function iPropGet(PropName As String, Optional MissingSetVal As Variant = \"\", Optional Doc As Inventor.Document = Nothing) As Variant\n    If Doc Is Nothing Then Set Doc = ThisApplication.ActiveDocument\n    \n    Dim CustomPropSet As Inventor.PropertySet\n    Set CustomPropSet = Doc.PropertySets.Item(\"Inventor User Defined Properties\")\n    \n    On Error GoTo CreateProp\n    \n    iPropGet = CustomPropSet.Item(PropName).Value\n    Exit Function\n        \nCreateProp:\n    Dim oTransaction As Inventor.Transaction\n    On Error GoTo Abort\n        \n    Set oTransaction = ThisApplication.TransactionManager.StartTransaction(Doc, \"Create property \"\"\" & PropName & \"\"\"\")\n        Call CustomPropSet.Add(MissingSetVal, PropName)\n    oTransaction.End\n    \n    iPropGet = MissingSetVal\n    Exit Function\n    \nAbort:\n    If Not oTransaction Is Nothing Then oTransaction.Abort\n    iPropGet = Nothing\n    Exit Function\nEnd Function\n\nPrivate Sub iPropAdd()\nDim PartDescription As String\nPartDescription = iPropGet(\"Part_Description\", \"ValueIfMissing\")\nDim PartN\u00ba As String\nPartN\u00ba = iPropGet(\"PartN\u00ba\", \"ValueIfMissing\")\nDim Manufacturer As String\nManufacturer = iPropGet(\"Manufacturer\", \"ValueIfMissing\")\nDim Vendor_Part_N\u00ba As String\nVendor_Part_N\u00ba = iPropGet(\"Vendor_Part_N\u00ba\", \"ValueIfMissing\")\nEnd Sub\n"], "author": "arkelec"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Title blocks text position do not update\n                    ", "solution": ["If FORMAT = \"A\" Then\n\tActiveSheet.ChangeSize(\"A\")\n ElseIf  FORMAT = \"B\" Then\n\tActiveSheet.ChangeSize(\"B\")\n ElseIf  FORMAT = \"C\" Then\n\tActiveSheet.ChangeSize(\"C\")\n ElseIf  FORMAT = \"D\" Then\n\tActiveSheet.ChangeSize(\"D\")\n\tEnd If\n\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim oTitleBlockDef As TitleBlockDefinition\noTitleBlockDef = oDrawDoc.TitleBlockDefinitions.Item(\"PART in\")\n\nDim oSketch As DrawingSketch\noTitleBlockDef.Edit(oSketch)\n\nDim oDim As DimensionConstraint\n\nFor Each oDim In oSketch.DimensionConstraints\n\tIf oDim.Parameter.Name = \"d52\" Then\n\t\tExit For\n\tEnd If\nNext\n\t\n\tIf ActiveSheet.Height = 8.5 Then\n\toDim.Parameter.Value = (8.5 in  - .76 in) * 2.54\nElseIf ActiveSheet.Height = 11 Then\n\toDim.Parameter.Value = (11 in   - .76 in) * 2.54 \nElseIf ActiveSheet.Height = 17 Then\n\toDim.Parameter.Value = (17 in   - .76 in) * 2.54 \nElseIf ActiveSheet.Height = 22 Then\n\toDim.Parameter.Value = (22 in  - .76 in) * 2.54 \nEnd If", "oSketch.TextBoxes(1).FormattedText = oSketch.TextBoxes(1).", "FormattedText", "oTitleBlockDef.ExitEdit(True) ", "ThisApplication.ActiveView.Fit ", "iLogicVb.UpdateWhenDone = True"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: File not found error with component replace code\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: UI Language of current session\n                    ", "solution": ["Dim lang as String = ThisApplication.LanguageName\nDim langCode As String = ThisApplication.LanguageCode\n"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Style editor: replace Object default style Ilogic\n                    ", "solution": ["    Dim drawingDoc As DrawingDocument = TryCast(ThisDoc.Document, DrawingDocument)\nDim odsMetric = drawingDoc.StylesManager.ObjectDefaultsStyles(\"YourStyleNameForMetric\")\nDim odsImp = drawingDoc.StylesManager.ObjectDefaultsStyles(\"YourStyleNameForImperial\")\nIf drawingDoc.UnitsOfMeasure.LengthUnits = Inventor.UnitsTypeEnum.kCentimeterLengthUnits Then\n\t'some value you stored to allow the document to know what its style needed \n     drawingDoc.StylesManager.ActiveStandardStyle.ActiveObjectDefaults = odsMetric\nElse\n     drawingDoc.StylesManager.ActiveStandardStyle.ActiveObjectDefaults = odsImp\nEnd If"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Remove parameter from User Parameters after adding to Custom Parameter Group\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: ilogic\n                    ", "solution": ["excelFile = \"your_filepath_and_name_here\"\nMultiValue.SetValueOptions(True, DefaultIndex := 0)\nMultiValue.List(\"TUBO\") = GoExcel.CellValues(excelFile, \"Planilha1 (2)\", \"A2\", \"A11\")\ni = GoExcel.FindRow(excelFile, \"Planilha1 (2)\",\"Size\", \"=\", TUBO)\nMultiValue.List(\"SCH\") = GoExcel.CellValues(\"B\" & i, \"C\" & i)\n'MessageBox.Show(Parameter(\"TUBO\") & Parameter(\"SCH\"), \"Title\")\nh = GoExcel.FindRow(excelFile, \"Planilha1 (2)\", \"TUBO&SCH\", \"=\", Parameter(\"TUBO\") & Parameter(\"SCH\"))\nd_ext= GoExcel.CellValue(\"G\" & h)\nesp= GoExcel.CellValue(\"H\" & h)\n\n"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Multiple Excel instances when running iLogic\n                    ", "solution": ["GoExcel", ".", "Close", "\u00a0\u00a0\u00a0"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: How to get 2 surface id of constraint Mate using Inventor 2017 API?\n                    ", "solution": ["// Get active assembly document\nAssemblyDocument oAsmDoc = (AssemblyDocument)inventorApp.ActiveDocument;\n\nAssemblyComponentDefinition oAsmCompDef = oAsmDoc.ComponentDefinition;\n\nAssemblyConstraints oConstraints = oAsmCompDef.Constraints;\n\nFace Axis1_MateConstraint = default(Face);\nFace Face1_MateConstraint = default(Face);\nFace Axis2_MateConstraint = default(Face);\nFace Face2_MateConstraint = default(Face);\n\nforeach (AssemblyConstraint con in oConstraints)\n{\n\tComponentOccurrence compOcc1 = con.OccurrenceOne;\n\tComponentOccurrence compOcc2 = con.OccurrenceTwo;\n\n\tSurfaceBodies surBodys1 = oOccurrenceOne.SurfaceBodies;\n\tSurfaceBodies surBodys2 = oOccurrenceTwo.SurfaceBodies;\n\n\tforeach (SurfaceBody sB1 in surBodys1)\n\t{\n\t\tforeach (FaceShell faceShell in sB1.FaceShells)\n\t    {\n\t\t\tforeach (Face face in faceShell.Faces)\n\t        {\n\t\t\t\t// Get FaceID is \"InternalName\" property\n\t\t\t\t// InternalName\t\"{38CDEB06-475F-85F7-2E12-ED29C9B366CB}\"\t=> // Assume the face Axis1_MateConstraint of Part1\n\t\t\t\t// SurfaceType\t5891\n\t\t\t\tAxis1_MateConstraint = face;\n\n\t\t\t\t// ...\n\t\t\t\t// InternalName\t\"{794ADAF5-AB5D-0FC0-2E6B-40689B1B837C}\"\t=> // Assume the face Face1_MateConstraint of Part1\n\t\t\t\t// SurfaceType\t5890\n\t\t\t\tFace1_MateConstraint = face\n\t\t\t\t// ...\n\t        }\n\t    }\n\t}\n\n\tforeach (SurfaceBody sB2 in surBodys2)\n\t{\n\t\tforeach (FaceShell faceShell in sB2.FaceShells)\n\t    {\n\t        foreach (Face face in faceShell.Faces)\n\t        {\n\t\t\t\t// Get FaceID is \"InternalName\" property\n\t\t\t\t// InternalName\t\"{B2E85B9C-7EAC-AF9E-1A63-CE5916EBA370}\"\t=> // Assume the face Axis2_MateConstraint of Part2\n\t\t\t\t// SurfaceType\t5891\n\t\t\t\t// ...\n\n\t\t\t\t// InternalName\t\"{99E3B593-5DDD-730B-092B-79EED8FFFEE8}\"\t=> // Assume the face Face2_MateConstraint of Part2\n\t\t\t\t// SurfaceType\t5890\n\t\t\t\t// ...\n\t        }\n\t    }\n\t}\n}\n\n// \u2460 Add Face MateConstraint\nMateConstraint oMateCons = oAsmCompDef.Constraints.AddMateConstraint(Face1_MateConstraint,\n                                                                     Face2_MateConstraint,\n                                                                     0,\n                                                                     InferredTypeEnum.kNoInference,\n                                                                     InferredTypeEnum.kNoInference);\n\n// \u2461 Add Axis MateConstraint\nMateConstraint oMateCons = oAsmCompDef.Constraints.AddMateConstraint(Axis1_MateConstraint,\n                                                                     Axis2_MateConstraint,\n                                                                     0,\n                                                                     InferredTypeEnum.kInferredLine,\n                                                                     InferredTypeEnum.kInferredLine);"], "author": "minh.hn"},
{"created at": [], "solution Title": "\n                        Re: Can you save an unsaved document with iLogic?\n                    ", "solution": ["Sub", " ", "Main", "() 'Saves the current open unsaved document as a inventor.dwg file\n\t", "Dim", " ", "oCheck", " ", "'Placeholder for pathname", "\n\t", "Try", " \n\t\t", "oCheck", " = ", "ThisDoc", ".", "Path", " ", "'Returns NULL when not saved yet", "\n\t", "Catch", "\n\t\t", "'Nothing", "\n\t", "End", " ", "Try", "\n\t\n\t", "If", " ", "oCheck", " = ", "\"\"", " ", "'\"empty\" = NULL", "\n\t\t", "oPath", " = ", "IO", ".", "Path", ".", "GetFullPath", "(", "ActiveSheet", ".", "View", "(", "\"VIEW1\"", ").", "Name", ")\n\t\t", "FolderNameLoc", " = ", "Left", "(", "oPath", ", ", "InStrRev", "(", "oPath", ", ", "\"\\\"", ")) \n\t\t", "Filename", " = ", "Left", "(", "IO", ".", "Path", ".", "GetFileName", "(", "ActiveSheet", ".", "View", "(", "\"VIEW1\"", ").", "ModelDocument", ".", "FullFileName", "),", "Len", "(", "IO", ".", "Path", ".", "GetFileName", "(", "ActiveSheet", ".", "View", "(", "\"VIEW1\"", ").", "ModelDocument", ".", "FullFileName", ")) - 4) & ", "\".dwg\" 'change this to \".idw\" in case of idw", "\n\t\t", "ThisDoc", ".", "Document", ".", "SaveAs", "(", "FolderNameLoc", " & ", "Filename", ", ", "False", ") \n\t", "End", " ", "If", "\t\t\n", "End", " ", "Sub", "\n"], "author": "machiel.veldkam"},
{"created at": [], "solution Title": "\n                        Re: VBA - AssemblyOptions.*Place And Ground First Component At Origin* missing\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic rule to change surface body properties line types\n                    ", "solution": ["Dim oDoc As DrawingDocument\noDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\noSheet = oDoc.ActiveSheet\n\nDim oView As DrawingView\nFor Each oView In oSheet.DrawingViews \n\tDim oCurve As DrawingCurve\n\tFor Each oCurve In oView.DrawingCurves\n\t\tIf oCurve.ModelGeometry.Type = ObjectTypeEnum.kEdgeObject Or oCurve.ModelGeometry.Type = ObjectTypeEnum.kEdgeProxyObject Then\n\t\t    oCurve.LineType = LineTypeEnum.kChainLineType \n\t\t    oCurve.LineWeight = 0.018\n\t\tEnd If\n\tNext\nNext "], "author": "mdnYZ8GW"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Help\n                    ", "solution": [], "author": "alanrichardson"},
{"created at": [], "solution Title": "\n                        Re: Inventor Studio VBA: RenderManager.RenderToFile Options\n                    ", "solution": [], "author": "bryndonlee"},
{"created at": [], "solution Title": "\n                        Re: SetByPoint throwing unknown error.\n                    ", "solution": ["Dim point As SketchPoint = sketch.SketchPoints.Item(1)' get the point.", "Dim wp As WorkPoint = active_part.WorkPoints.Item(\"Work Point1\") 'Get the work point", "wp.Adaptive = True ", "wp.SetByPoint(point)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: My VB.NET Inventor AddIn is launched successfully, but not functionning...\n                    ", "solution": ["g_inventorApplication = addInSiteObject.Application", "ThisApplication = addInSiteObject.Application", "Public g_inventorApplication As Inventor.Application", "Public ThisApplication As Inventor.Application", "Public Property ThisApplication As Object"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Macro: Insert constrain on a new inserted sub assembly fails\n                    ", "solution": [], "author": "BennyDS"},
{"created at": [], "solution Title": "\n                        Re: SaveCopyAs API for AutoCAD dwg returns a zip file\n                    ", "solution": ["Public Sub PublishDWG()\n    ' Get the DWG translator Add-In.\n    Dim DWGAddIn As TranslatorAddIn\n    Set DWGAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\")\n\n    'Set a reference to the active document (the document to be published).\n    Dim oDocument As Document\n    Set oDocument = ThisApplication.ActiveDocument\n\n    Dim oContext As TranslationContext\n    Set oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = kFileBrowseIOMechanism\n\n    ' Create a NameValueMap object\n    Dim oOptions As NameValueMap\n    Set oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n    ' Create a DataMedium object\n    Dim oDataMedium As DataMedium\n    Set oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n    ' Check whether the translator has 'SaveCopyAs' options\n    If DWGAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\n        Dim strIniFile As String\n        strIniFile = \"Downloaded path\\exportdwg.ini\"\n        ' Create the name-value that specifies the ini file to use.\n        oOptions.Value(\"Export_Acad_IniFile\") = strIniFile\n    End If\n\n    'Set the destination file name\n    oDataMedium.FileName = \"c:\\tempdwgout.dwg\"\n\n    'Publish document.\n    Call DWGAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nEnd Sub", "Imports", " ", "System", ".", "IO", "\n", "AddReference", " ", "\"", "System.IO.Compression", "\"", "\n", "AddReference", " ", "\"", "System.IO.Compression.FileSystem", "\"", "'", "Set the ZIP target file name", "\n", "unzipfile1", " ", "=", " ", "fname", " ", "&", " ", "oFileName", " ", "&", " ", "_", "\n", "\"", " Rev ", "\"", " ", "&", " ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Revision Number", "\"", ")", " ", "&", " ", "\"", " ", "\"", " ", "&", " ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Description", "\"", ")", " ", "&", " ", "\"", " (UNCONTROLLED COPY)", "\"", " ", "&", " ", "\"", ".zip", "\"", "\n\n", "'", "Check if file exported was a zip", "\n", "If", " ", "System", ".", "IO", ".", "File", ".", "Exists", "(", "unzipfile1", ")", "\n\n", "'", "extract zip file", "\n", "System", ".", "IO", ".", "Compression", ".", "ZipFile", ".", "ExtractToDirectory", "(", "unzipfile1", ", ", "fname", ")", "\n\n\n", "'", "Delete zip file if it exists", "\n", "If", " ", "System", ".", "IO", ".", "File", ".", "Exists", "(", "unzipfile1", ")", "\n   ", "System", ".", "IO", ".", "File", ".", "Delete", "(", "unzipfile1", ")", "\n\n", "End", " ", "If", "\n", "End", " ", "If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: First Check-in does not call method onLoad()\n                    ", "solution": [], "author": "fvidoto"},
{"created at": [], "solution Title": "\n                        Re: Changing colour of multiple multi-body parts\n                    ", "solution": ["Sub", " ", "Main", "()\n", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", "\n", "oAsmCompDef", " = ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", "\n\n", "oDoc", " = ", "oAsmCompDef", ".", "Document", "\n", "Dim", " ", "oAppearanceAssets", " ", "As", " ", "AssetsEnumerator", "\n", "oAppearanceAssets", " = ", "oDoc", ".", "AppearanceAssets", "\n", "Dim", " ", "oAsset", " ", "As", " ", "Asset", "\n\t\n", "Dim", " ", "oAsset_Array", " ", "As", " ", "New", " ", "ArrayList", "\n", "For", " ", "Each", " ", "oAsset_Array_X", " ", "In", " ", "ThisApplication", ".", "ActiveAppearanceLibrary", ".", "AppearanceAssets", "\n\t", "oAsset_Array", ".", "Add", "(", "oAsset_Array_X", ".", "DisplayName", ")\n\t", "oAsset_Array", ".", "Sort", "()\n", "Next", "\n\n1:\n", "sColor1", " = ", "InputListBox", "(", "\"CHOOSE TEXTURE SOLID1\"", ", ", "oAsset_Array", ", ", "oAsset_Array", ".", "Item", "(0), ", "\"TEXTURE SELECTION OF SOLID1\"", ", ", "\"LIST OF TEXTURES\"", ")\n", "If", " ", "sColor1", " = ", "\"\"", " ", "Then", " ", "GoTo", " 1 :\n2:\t\n", "sColor2", " = ", "InputListBox", "(", "\"CHOOSE TEXTURE SOLID2\"", ", ", "oAsset_Array", ", ", "oAsset_Array", ".", "Item", "(0), ", "\"TEXTURE SELECTION OF SOLID2\"", ", ", "\"LIST OF TEXTURES\"", ")\n", "If", " ", "sColor2", " = ", "\"\"", " ", "Then", " ", "GoTo", " 2 :\n\n\n", "Dim", " ", "libAsset1", " ", "As", " ", "Asset", "\n", "libAsset1", " = ", "ThisApplication", ".", "ActiveAppearanceLibrary", ".", "AppearanceAssets", ".", "Item", "(", "sColor1", ")  \n", "Dim", " ", "libAsset2", " ", "As", " ", "Asset", "\n", "libAsset2", " = ", "ThisApplication", ".", "ActiveAppearanceLibrary", ".", "AppearanceAssets", ".", "Item", "(", "sColor2", ") \n\n", "Dim", " ", "doc", " ", "As", " ", "Document", "\n", "For", " ", "Each", " ", "doc", " ", "In", " ", "oDoc", ".", "AllReferencedDocuments", "\n\t", "Try", "\n\t\t", "Try", "\n\t\t\t", "localAsset1", " = ", "libAsset1", ".", "CopyTo", "(", "doc", ")\n\t\t", "Catch", "\n\t\t", "'assume error means it's already local", "\n\t\t\t", "localAsset1", " = ", "doc", ".", "Assets", "(", "sColor1", ")\n\t\t", "End", " ", "Try", "\n\t\t\n\t\t", "Try", "\n\t\t\t", "localAsset2", " = ", "libAsset2", ".", "CopyTo", "(", "doc", ")\n\t\t", "Catch", "\n\t\t", "'assume error means it's already local", "\n\t\t\t", "localAsset2", " = ", "doc", ".", "Assets", "(", "sColor2", ")\n\t\t", "End", " ", "Try", "\n\t\t", "oDef", " = ", "doc", ".", "ComponentDefinition", "\t\t\n\t\t", "' change specific body to specific color ", "\n\t\t", "Dim", " ", "oSB1", " ", "As", " ", "SurfaceBody", "\n\t\t", "oSB1", " = ", "oDef", ".", "SurfaceBodies", "(1)\n\t\t", "oSB1", ".", "Appearance", " = ", "localAsset1", " \n\n\t\t", "Dim", " ", "oSB2", " ", "As", " ", "SurfaceBody", "\n\t\t", "oSB2", " = ", "oDef", ".", "SurfaceBodies", "(2)\n\t\t", "oSB2", ".", "Appearance", " = ", "localAsset2", " \n\t\t", "iLogicVb", ".", "UpdateWhenDone", " = ", "True", "\t\t\n\t\t", "'doc.save", "\n\t", "Catch", "\n\t", "End", " ", "Try", "\n", "Next", "\n", "End", " ", "Sub", "\n\n\n\n"], "author": "yuvilo_"},
{"created at": [], "solution Title": "\n                        Re: Use Ilogic to change parameters equations\n                    ", "solution": ["Dim oDoc As PartDocument\noDoc = ThisApplication.ActiveDocument\n    \nDim oDef As PartComponentDefinition\noDef = oDoc.ComponentDefinition\n    \nDim oParam As ModelParameter\nFor Each oParam In oDef.Parameters.ModelParameters\n    If Math.Round(oParam.ModelValue, 2) = 2.43 Then\n\t\toParam.Expression = \"Pitch_side\"\n\tElseIf Math.Round(oParam.ModelValue , 6) = 2.662926 Then\n\t\toParam.Expression = \"Pitch_parallel\" \t\t\n\tEnd If\nNext"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Choppy Surface Graphics with ClientGraphics\n                    ", "solution": [], "author": "lando7189"},
{"created at": [], "solution Title": "\n                        Re: UnitsOfMeasure.Length Errors\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic Purging Sheet Metal UnfoldMethod issue\n                    ", "solution": ["oSheetMetalCompDef.ActiveSheetMetalStyle"], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Execute <SomeCode> on Configuration Member generation\n                    ", "solution": ["ModelingEvents.OnGenerateMember( FactoryDocumentObject As Document, MemberName As String, BeforeOrAfter As EventTimingEnum, Context As NameValueMap, HandlingCode As HandlingCodeEnum )"], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: How Can I Create New Level of Detail & Suppress Parts with iLogic?\n                    ", "solution": ["    Dim oAss As AssemblyDocument\n     oAss = ThisApplication.ActiveDocument\n    Dim oAsmCompDef As AssemblyComponentDefinition\n     oAsmCompDef = oAss.ComponentDefinition\n    ' Create a new level of detail representation.\n    ' The new representation is automatically activated.\n    Dim oLODRep As LevelOfDetailRepresentation\n     oLODRep = oAsmCompDef.RepresentationsManager.LevelOfDetailRepresentations.Add(\"CNC\")\n    Dim occ As ComponentOccurrence\n    For Each occ In oAsmCompDef.Occurrences\n    If Left(occ.Definition.Document.PropertySets.Item(3).Item(\"Part Number\").Value, 2) = \"01\" Then\n    occ.Suppress\n    End If\n    Next\n    oAss.Save ", "Left(occ.Definition.Document.PropertySets.Item(3).Item(\"Part Number\").Value, 3) = \"01-\" Then\n    occ.Suppress"], "author": "marcin_otr\u0119ba"},
{"created at": ["\u200e02-21-2019 04:21 AM"], "solution Title": "\n                        Re: iLogic won't run when expected.\n                    ", "solution": ["iLogicVb.Automation.RulesOnEventsEnabled = False\t\t\t\t\t\t\t\t\t'Disable all iLogic rules"], "author": "machiel.veldkam"},
{"created at": [], "solution Title": "\n                        Re: Changing parts of an assembly via VBA/iLogic\n                    ", "solution": ["Sub SetComponentColor(compOcc As ComponentOccurrence, appearanceName As String, assemDoc As AssemblyDocument)\n    Dim asset As asset\n    On Error Resume Next\n    Set asset = assemDoc.Assets.Item(appearanceName)\n    If Err Then\n        On Error GoTo 0\n        Dim assetLib As AssetLibrary\n        Set assetLib = ThisApplication.AssetLibraries.Item(\"314DE259-5443-4621-BFBD-1730C6CC9AE9\")  '(\"Autodesk Appearance Library\")\n        Set asset = assetLib.AppearanceAssets.Item(appearanceName)\n        Set asset = asset.CopyTo(assemDoc)\n    End If\n    On Error GoTo 0\n    compOcc.Appearance = asset\nEnd Sub\n", "Dim assemDoc As AssemblyDocument\nSet assemDoc = ThisApplication.ActiveDocument\nDim compOccs As ComponentOccurrences\nSet compOccs = assemDoc.ComponentDefinition.Occurrences\n", "Call SetComponentColor(compOccs(1), \"Green\", assemDoc)"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: create a new drawing without  the displaying prompt entry in the title block\n                    ", "solution": ["ThisApplication.SilentOperation = True\nDim drw As DrawingDocument\ndrw = ThisApplication.Documents.Add(kDrawingDocumentObject, \"your template here\", True)\nThisApplication.SilentOperation = False"], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: To Select Multiple Points (End points or Vertices) and to Write in Notepad\n                    ", "solution": ["Dim oEP As Object\nWhile True\noEP = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPointEntities, \"Select a Point (vertex)\")\nIf oEP Is Nothing Then GoTo CreateTxt\noPoint = oEP\n\n\tmyPoint = oPoint.Point\n\toEP_X = (myPoint.X/2.54 + oEP_X)\n\toEP_Y = (myPoint.Y/2.54 + oEP_Y)\n\toEP_Z = (myPoint.Z/2.54 + oEP_Z)\n\naEP_X.Add(oEP_X)\naEP_Y.Add(oEP_Y)\naEP_Z.Add(oEP_Z)\ni+=1\nEnd While"], "author": "rwickrama"},
{"created at": [], "solution Title": "\n                        Re: custom table from macro prints all black\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Command menu customize\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: VBA change value of an existing constrain. Where is the value hidden?\n                    ", "solution": ["Dim ass As AssemblyDocument\nSet ass = ThisApplication.ActiveDocument\nDim occ As ComponentOccurrence\nSet occ = ass.ComponentDefinition.Occurrences.Item(1)\nocc.SubOccurrences.Item(1).Constraints.Item(1).Offset.Value = 2"], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: transaction manager help\n                    ", "solution": ["Dim trans As Transaction = ThisApplication.TransactionManager.StartTransaction(oPartDocument, \"Hole Alignment\")", "Dim trans As Transaction = ThisApplication.TransactionManager.StartTransaction(oDoc, \"Hole Alignment\")"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Create DXF from assembly and include 'Revision' and parameter 'thickness'\n                    ", "solution": ["Sub", " ", "Main", "\n\t", "Dim", " ", "oDoc", " ", "As", " ", "Document", " = ", "ThisApplication", ".", "ActiveDocument", "\n\t", "If", " ", "oDoc", ".", "DocumentType", " = ", "DocumentTypeEnum", ".", "kPartDocumentObject", " ", "Then", "\n\t\t", "If", " ", "oDoc", ".", "SubType", " = ", "\"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\"", " ", "Then", " ", "Export", "(", "oDoc", ")\n\t\t", "Exit", " ", "Sub", "\n\t", "End", " ", "If", "\n\t", "Cycle", "(", "oDoc", ")\n", "End", " ", "Sub", "\n\n", "Sub", " ", "Cycle", "(", "oDoc", " ", "As", " ", "AssemblyDocument", ")\n\t", "For", " ", "Each", " ", "aDoc", " ", "As", " ", "Document", " ", "In", " ", "oDoc", ".", "ReferencedDocuments", "\n\t\t", "If", " ", "aDoc", ".", "SubType", " = ", "\"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\"", " ", "Then", "\n\t\t\t", "Export", "(", "aDoc", ")\n\t\t", "ElseIf", " ", "aDoc", ".", "DocumentType", " = ", "DocumentTypeEnum", ".", "kAssemblyDocumentObject", " ", "Then", "\n\t\t\t", "Cycle", "(", "aDoc", ")\n\t\t", "End", " ", "If", "\n\t", "Next", "\n", "End", " ", "Sub", "\n\n", "Sub", " ", "Export", "(", "oDoc", " ", "As", " ", "PartDocument", ")\n\t", "Dim", " ", "FName", " ", "As", " ", "String", " = ", "GetFName", "(", "oDoc", ".", "FullFileName", ")\n\t", "Dim", " ", "sPN", " ", "As", " ", "String", " = ", "iProperties", ".", "Value", "(", "FName", ", ", "\"Project\"", ", ", "\"Part Number\"", ")\n\t", "Dim", " ", "Rev", " ", "As", " ", "String", " = ", "iProperties", ".", "Value", "(", "FName", ", ", "\"Project\"", ", ", "\"Revision Number\"", ")\n\t", "Dim", " ", "oCD", " ", "As", " ", "SheetMetalComponentDefinition", " = ", "oDoc", ".", "ComponentDefinition", "\n\t", "If", " ", "Not", " ", "oCD", ".", "HasFlatPattern", " ", "Then", "\n\t\t", "oCD", ".", "Unfold", "()\n\t\t", "oCD", ".", "FlatPattern", ".", "ExitEdit", "()\n\t", "End", " ", "If", "\n\t\n\t", "If", " ", "Rev", " = ", "Nothing", " ", "Then", " ", "Rev", " = ", "\"00\"", "\n\t\t\n\t", "Dim", " ", "dThick", " ", "As", " ", "Double", "\n\t", "Try", "\n\t\t", "dThick", " = ", "Math", ".", "Round", "(", "oCD", ".", "Parameters", "(", "\"Tlou\u0161\u0165ka\"", ").", "Value", " * 10, 1)\n\t", "Catch", "\n\t\t", "Exit", " ", "Sub", "\n\t", "End", " ", "Try", "\n\t", "If", " ", "dThick", " < 0.05 ", "Then", " ", "Exit", " ", "Sub", "\n\t", "Dim", " ", "sOut", " ", "As", " ", "String", " = ", "\"FLAT PATTERN DXF?AcadVersion=2013&InvisibleLayers=IV_TANGENT;IV_BEND;IV_BEND_DOWN;IV_ARC_CENTERS\"", "\n\t", "FName", " = ", "oDoc", ".", "FullFileName", "\n\t", "Dim", " ", "FNP", " ", "As", " ", "Integer", " = ", "InStrRev", "(", "FName", ", ", "\"\\\"", ", -1)\n\t", "Dim", " ", "sPath", " ", "As", " ", "String", " = ", "Left", "(", "FName", ", ", "FNP", ")\n\t", "FNP", " = ", "InStr", "(", "sPath", ", ", "\"\\\"", ")\n\t", "sPath", " = ", "\"C:\\DXF\"", " & ", "Mid", "(", "sPath", ", ", "FNP", ")\n\t", "If", " ", "Not", " ", "System", ".", "IO", ".", "Directory", ".", "Exists", "(", "sPath", ") ", "Then", " ", "System", ".", "IO", ".", "Directory", ".", "CreateDirectory", "(", "sPath", ")\n\t", "Dim", " ", "sNewName", " ", "As", " ", "String", " = ", "sPath", " & ", "sPN", " & ", "\"_\"", " & ", "Rev", " & ", "\"_\"", " & ", "CStr", "(", "dThick", ") & ", "\"mm\"", " & ", "\".dxf\"", "\n\t", "oCD", ".", "DataIO", ".", "WriteDataToFile", "(", "sOut", ", ", "sNewName", ")\n", "End", " ", "Sub", "\n\n", "Function", " ", "GetFName", "(", "FullName", " ", "As", " ", "String", ") ", "As", " ", "String", "\n\t", "Dim", " ", "FNP", " ", "As", " ", "Integer", " = ", "InStrRev", "(", "FullName", ", ", "\"\\\"", ", - 1)\n\t", "Dim", " ", "FName", " ", "As", " ", "String", " = ", "Mid", "(", "FullName", ", ", "FNP", " + 1, ", "Len", "(", "FullName", ") - ", "FNP", ")\n\t", "Return", " ", "FName", "\n", "End", " ", "Function", "\n", "\t\t", "dThick", " = ", "Math", ".", "Round", "(", "oCD", ".", "Parameters", "(", "\"", "Thickness", "\"", ").", "Value", " * 10, 1) ", "sPath", " = ", "\"C:\\DXF\"", " & ", "Mid", "(", "sPath", ", ", "FNP", ")"], "author": "firelinsgs"},
{"created at": [], "solution Title": "\n                        Re: I need help: Hole alignment checker for misaligned holes\n                    ", "solution": ["Sub Main()\n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n\n    Dim oCompdef As AssemblyComponentDefinition\n    oCompdef = oDoc.ComponentDefinition\n\n    Dim oBody1 As SurfaceBody\n    Dim oBody2 As SurfaceBody\n\n    oBody1 = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartBodyFilter, \"Select first body\")\n    oBody2 = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartBodyFilter, \"Select a body to compare\")\n\n    Dim oFace As Face\n    Dim oAxis As WorkAxis\n\n    For Each oFace In oBody1.Faces\n\n        If oFace.SurfaceType = SurfaceTypeEnum.kCylinderSurface Then\n            oAxis = oCompdef.WorkAxes.AddFixed(oFace.Geometry.BasePoint, oFace.Geometry.AxisVector)\n\n            Dim comparedFace As Face\n            comparedFace = CompareFaces(oAxis, oBody2, oCompdef)\n\n            If comparedFace Is Nothing Then\n                oAxis.Name = oAxis.Name & \"_misaligned\"\n            Else\n                Dim oHoleFeature1 As HoleFeature\n                oHoleFeature1 = oFace.CreatedByFeature\n\n                Dim dia1 As Double\n                dia1 = oHoleFeature1.HoleDiameter.Value\n                dia1 = dia1 * 10 'Converting cm to mm\n\n                Dim oHoleFeature2 As HoleFeature\n                oHoleFeature2 = comparedFace.CreatedByFeature\n\n                Dim dia2 As Double\n                dia2 = oHoleFeature2.HoleDiameter.Value\n                dia2 = dia2 * 10 'Converting cm to mm\n\n                If Math.Round(dia1, 4) = Math.Round(dia2, 4) Then\n                    Debug.Print(\"Hole diameter of plate 1 = \" & dia1 & \" compared with Hole diameter of plate 2 = \" & dia2 & \" => OK - Default\")\n                ElseIf Math.Round(dia1, 4) >= Math.Round(dia2, 4) And Math.Round(dia1, 4) <= Math.Round(dia2, 4) + 0.5 Then\n                    Debug.Print(\"Hole diameter of plate 1 = \" & dia1 & \" compared with Hole diameter of plate 2 = \" & dia2 & \" => OK - Special Type\")\n                Else\n                    Debug.Print(\"Hole diameter of plate 1 = \" & dia1 & \" compared with Hole diameter of plate 2 = \" & dia2 & \" => Not OK\")\n                End If\n\n            End If\n\n        End If\n\n    Next\n\n    Dim oPane As BrowserPane\n    oPane = oDoc.BrowserPanes.ActivePane\n\n    Dim alignedNodes As ObjectCollection\n    alignedNodes = ThisApplication.TransientObjects.CreateObjectCollection\n\n    Dim misAlignedNodes As ObjectCollection\n    misAlignedNodes = ThisApplication.TransientObjects.CreateObjectCollection\n\n    For i = 4 To oCompdef.WorkAxes.Count\n        oAxis = oCompdef.WorkAxes.Item(i)\n        Dim misaligned As Boolean = oAxis.Name.EndsWith(\"misaligned\")\n\t\t\n        Dim oNode As BrowserNode\n\n        If misaligned = True Then\n            oNode = oPane.GetBrowserNodeFromObject(oAxis)\n            misAlignedNodes.Add(oNode)\n        Else\n            oNode = oPane.GetBrowserNodeFromObject(oAxis)\n            alignedNodes.Add(oNode)\n        End If\n\n    Next\n\n    Dim alignedAxes As BrowserFolder\n    alignedAxes = oPane.AddBrowserFolder(\"Aligned Axes\", alignedNodes)\n\n    Dim misAlignedAxes As BrowserFolder\n    misAlignedAxes = oPane.AddBrowserFolder(\"MisAligned Axes\", misAlignedNodes)\n\nEnd Sub\n\nPublic Function CompareFaces(ByVal oAxis1 As WorkAxis, ByVal oBody As SurfaceBody, ByVal compDef As AssemblyComponentDefinition) As Face\n    For Each oFace As Face In oBody.Faces\n        If oFace.SurfaceType = SurfaceTypeEnum.kCylinderSurface Then\n            Dim oAxis As WorkAxis\n\n            oAxis = compDef.WorkAxes.AddFixed(oFace.Geometry.BasePoint, oFace.Geometry.AxisVector)\n\n            If oAxis.Line.IsColinearTo(oAxis1.Line) Then\n                oAxis.Delete()\n                Return oFace\n                Exit Function\n            Else\n                oAxis.Delete()\n            End If\n        End If\n    Next\n    Return Nothing\nEnd Function"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: iLogic run much longer in windows 10, and multiple excel instances\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Registering for OnActivateCommand using C++ interface\n                    ", "solution": [], "author": "senthilr2007"},
{"created at": [], "solution Title": "\n                        Re: ILogic Errors\n                    ", "solution": ["If", " ", "ThisApplication", ".", "ActiveDocument", ".", "DocumentType", " = ", "kAssemblyDocumentObject", " ", "Then"], "author": "dean.morrison"},
{"created at": [], "solution Title": "\n                        Re: TransactionManager - documentation\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: populate a parameter\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: If and or function with multi value list doesn't work\n                    ", "solution": ["If", " ", "Keuze", " = ", "\"P1\"", " ", "Or", " ", "Keuze", " = ", "\"P2\"", " ", "Or", " ", "Keuze", " = ", "\"P3\"", " ", "Then", "\n\t", "MessageBox", ".", "Show", "(", "\"test\"", ", ", "\"Title\"", ")\n", "End", " ", "If", "Select", " ", "Case", " ", "Keuze", "\n", "Case", " ", "\"P1\"", ", ", "\"P2\"", ", ", "\"P3\"", "\n\t", "MessageBox", ".", "Show", "(", "\"P1, P2, P3\"", ", ", "\"Title\"", ")\n", "Case", " ", "Else", "\n\t", "MessageBox", ".", "Show", "(", "\"other conditions\"", ", ", "\"Title\"", ")\n", "End", " ", "Select"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Betreff: Issues With C# SketchPoint API.\n                    ", "solution": [], "author": "_aneely"},
{"created at": [], "solution Title": "\n                        Re: Auto-Sort Bill of Material\n                    ", "solution": ["'Dim oDrawDoc As DrawingDocument\nDim oDoc As AssemblyDocument\noDoc = ThisApplication.ActiveDocument\n\n'BOM RENUMBER\n\n' Set a reference to the BOM\nDim oBOM As BOM\noBOM = oDoc.ComponentDefinition.BOM\n\toBOM.StructuredViewFirstLevelOnly = False\n\toBOM.StructuredViewEnabled = True\n\tDim oStructuredBOMView As BOMView\n    oStructuredBOMView = oBOM.BOMViews.Item(\"Structured\")\n\t'Call oStructuredBOMView.Sort(\"BOM Structure\",True ,\"TYPE\",True ,\"Stock Number\",True)\n\tCall oStructuredBOMView.Sort(\"Description\", True)\nCall oStructuredBOMView.Renumber(1, 1)"], "author": "rhasell"},
{"created at": ["\u200e02-20-2019 07:16 AM"], "solution Title": "\n                        Re: Error in aream rule when saving assembly\n                    ", "solution": ["oDoc = ThisApplication.ActiveDocument", "oDoc = ThisDoc.Document"], "author": "DRoam"},
{"created at": ["\u200e02-22-2019 01:42 AM"], "solution Title": "\n                        Re: Correcting Appearance Library locations\n                    ", "solution": [], "author": "JaneFan"},
{"created at": ["\u200e03-04-2019 02:51 AM"], "solution Title": "\n                        Re: How to create component in Assembly with VBA\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": ["\u200e02-22-2019 04:38 AM"], "solution Title": "\n                        Betreff: sorting bom problem\n                    ", "solution": ["Dim oDoc As DrawingDocument \noDoc = ThisApplication.ActiveDocument \n\nDim oSheet As Sheet \noSheet = oDoc.ActiveSheet \n\nDim oPartslist As PartsList\noPartslist = oSheet.PartsLists.Item(1)\n\nDim oRow As PartsListRow \n \nDim myList As New List(Of String)()\nDim i As Integer  \nFor Each oRow In oPartslist.PartsListRows \n\tIf oRow.Item(3).Value.Length = 13 Then\n\t\tmyList.Add(oRow.Item(3).Value)\n\tEnd If \nNext\nDim list() As String = myList.ToArray()\nDim result = list.OrderBy(Function(q) q.Substring(11)).ToArray\n\ni = 1\nFor Each s As String In result\n    For Each oRow In oPartslist.PartsListRows \n\t\tIf s = oRow.Item(3).Value Then\n\t\t\tCall oRow.Reposition(i)\n\t\t\ti = i + 1\n\t\tEnd If\n\tNext \nNext"], "author": "chandra.shekar."},
{"created at": ["\u200e02-22-2019 05:18 AM"], "solution Title": "\n                        Re: Code for creating real thread?\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": ["\u200e02-25-2019 01:10 AM"], "solution Title": "\n                        Re: CHANGE PART COLOR IN SUB ASSEMBLY FROM TOP ASSEMBLY\n                    ", "solution": ["Dim oOcc As ComponentOccurrence = Component.InventorComponent(\"Assembly2:1\")\noOcc.Edit\nComponent.Color(\"Part3:1\") = \"Forest Green\"\n\nDim oDoc As PartDocument  \noDoc = Component.InventorComponent(\"Part3:1\").ReferencedDocumentDescriptor.ReferencedDocument \n \noDoc.ActiveAppearance = ThisApplication.AssetLibraries.Item(3).AppearanceAssets.Item(\"Forest Green\")\n\noOcc.ExitEdit(ExitTypeEnum.kExitToTop)"], "author": "chandra.shekar."},
{"created at": ["\u200e02-25-2019 01:50 AM"], "solution Title": "\n                        Re: Editing component in sub assembly  error with VBA\n                    ", "solution": [], "author": "JaneFan"},
{"created at": ["\u200e02-22-2019 04:27 AM"], "solution Title": "\n                        Re: Parameter to be used in iLogic rule\n                    ", "solution": [], "author": "yuvilo_"},
{"created at": ["\u200e02-22-2019 04:00 AM"], "solution Title": "\n                        Re: Export single layer only from drawing to DXF within iLogic rule\n                    ", "solution": ["Sub Main()\n    Dim oDoc As DrawingDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    oSheet = oDoc.ActiveSheet\n    \n    Dim oView As DrawingView\n    oView = oSheet.DrawingViews.Item(1)\n    \n    Dim oCurve As DrawingCurve\n    For Each oCurve In oView.DrawingCurves\n        Dim oSegment As DrawingCurveSegment\n        For Each oSegment In oCurve.Segments\n            If oSegment.Layer.Name <> \"Visible (ISO)\" Then\n                 oSegment.Visible = False\n            End If\n        Next\n    Next\nEnd Sub"], "author": "chandra.shekar."},
{"created at": ["\u200e02-26-2019 06:23 PM"], "solution Title": "\n                        Re: Controlling Arrowheads on Drawing Dimensions with VBA\n                    ", "solution": ["Sub Main()\n\tDim oDoc As DrawingDocument\n\toDoc = ThisDoc.Document\n\t\n\tDim oSheet As Sheet\n\toSheet = oDoc.ActiveSheet\n\t\n\tOn Error Resume Next\n\tDim oLinearDim As LinearGeneralDimension\n\tDim oDim As GeneralDimension\n\t\n\tFor Each oDim In oSheet.DrawingDimensions.GeneralDimensions\n\t\tIf oDim.Type = ObjectTypeEnum.kLinearGeneralDimensionObject Then\n\t\t\toLinearDim = oDim\n\t\t\t\n\t\t\toLinearDim.FirstArrowheadType = ArrowheadTypeEnum.kFilledArrowheadType\n\t\t\toLinearDim.SecondArrowheadType = ArrowheadTypeEnum.kFilledArrowheadType\n\t\n\t\tEnd If\n\tNext\nEnd Sub"], "author": "YuhanZhang"},
{"created at": ["\u200e02-22-2019 01:35 AM"], "solution Title": "\n                        Re: Searching subfolders and selecting them using Ilogic (TopNode/Enumerator iss\n                    ", "solution": ["Public Sub main()\n\nDim a As Application\nSet a = ThisApplication\n\nDim c As BrowserPane\nSet c = a.ActiveDocument.BrowserPanes.ActivePane\n\nDim d As BrowserNode\nSet d = c.TopNode\n\nDim d1 As BrowserNode\nDim f As BrowserFolder\n\n'MsgBox d.FullPath\n\nFor Each d1 In d.BrowserNodes\nMsgBox d1.FullPath\n\nNext\n\nDim se As SelectSet\nSet se = a.ActiveDocument.SelectSet\n\nFor Each f In d.BrowserFolders\nse.Select f\nMsgBox f.Name\n\nNext\n\nEnd Sub\n\n"], "author": "bradeneurope|Ar"},
{"created at": ["\u200e02-22-2019 08:43 AM"], "solution Title": "\n                        Re: iLogic: turn off ambient shadow if filesize of open file is bigger then XXX\n                    ", "solution": ["Imports", " ", "System", ".", "IO", "Dim", " ", "myFile", " ", "As", " ", "New", " ", "FileInfo", "(", "ThisDoc", ".", "PathAndFileName", "(", "True", "))\n", "Dim", " ", "sizeInBytes", " ", "As", " ", "Long", " = ", "myFile", ".", "Length", "\n", "Dim", " ", "sizeInKB", " ", "As", " ", "Long", " = ", "sizeInBytes", " / 1024\n", "Dim", " ", "sizeInMB", " ", "As", " ", "Long", " = ", "sizeInKB", " / 1024\n\n", "Dim", " ", "oView", " ", "As", " ", "Inventor", ".", "View", " = ", "ThisApplication", ".", "ActiveView", "\n", "If", " ", "sizeInMB", " > 45 ", "Then", "\n\t", "oView", ".", "ShowAmbientShadows", " = ", "False", "\n", "Else", "\n\t", "oView", ".", "ShowAmbientShadows", " = ", "True", "\n", "End", " ", "If", "\u00a0\u00a0"], "author": "lmc.engineering"},
{"created at": ["\u200e02-22-2019 12:27 PM"], "solution Title": "\n                        Re: Apprentice, can't access drawing symbols & part lists\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": ["\u200e02-24-2019 11:19 PM", "\u200e02-25-2019 12:47 AM"], "solution Title": "\n                        Re: Get existing PartFeatureExtentDirectionEnum of HoleFeature in PartDocDef\n                    ", "solution": ["For Each hf_Ftr In oc_Holes\n'------hf_Ftr as HoleFeature object\n'------oc_Holes as ObjectCollection [containing HoleFeature objects]\n\nDim oExtent As DistanceExtent\noExtent = hf_Ftr.Extent\n\nDim HFDepth As String = \"0.375 in\"\n\nhf_Ftr.SetDistanceExtent(HFDepth, oExtent.Direction, True)\n\nNext"], "author": "JaneFan"},
{"created at": ["\u200e02-25-2019 04:24 AM"], "solution Title": "\n                        Re: Publish DXF from Part Setting ACAD Version\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": ["\u200e02-24-2019 02:55 AM"], "solution Title": "\n                        Re: Inventor Add-in Templates for 2017\n                    ", "solution": ["<Addin Type=\"Standard\">\n  <!--Created for Autodesk Inventor 2018 (Version 22.0)-->\n  <ClassId>{de55ae5b-65de-4465-bbb5-d1617c2ccc9f}</ClassId>\n  <ClientId>{de55ae5b-65de-4465-bbb5-d1617c2ccc9f}</ClientId>\n  <DisplayName>iFeatureName</DisplayName>\n  <Description>iFeatureName</Description>\n  <Assembly>iFeatureName.dll</Assembly>\n  <LoadOnStartUp>1</LoadOnStartUp>\n  <UserUnloadable>1</UserUnloadable>\n  <Hidden>0</Hidden>\n  <SupportedSoftwareVersionGreaterThan>", "20", "..</SupportedSoftwareVersionGreaterThan>\n  <DataVersion>1</DataVersion>\n  <UserInterfaceVersion>1</UserInterfaceVersion>\n</Addin>"], "author": "martin.winkler"},
{"created at": ["\u200e02-26-2019 12:17 AM"], "solution Title": "\n                        Re: Error ilogic - Recognize bendings\n                    ", "solution": ["Public", " ", "Sub", " ", "Main", "()\n", "Dim", " ", "a", " ", "As", " ", "Inventor", ".", "Application", "\n", "a", " = ", "ThisApplication", "\n\n", "Dim", " ", "b", " ", "As", " ", "PartDocument", "\n ", "b", " = ", "ThisDoc", ".", "Document", "\n \n", "Dim", " ", "sm", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "sm", " = ", "b", ".", "ComponentDefinition", "\n\n", "MsgBox", " (", "sm", ".", "Bends", ".", "Count", ")\n", "Dim", " ", "customProp", " ", "As", " ", "Inventor", ".", "Property", "\n", "On", " ", "Error", " ", "Resume", " ", "Next", "\n", "customProp", " = ", "b", ".", "PropertySets", ".", "Item", "(4).", "Add", "(", "\"Bend Exist\"", ", ", "\"Bending\"", ")\n\n", "If", " ", "Err", ".", "Description", " ", "Then", "\n\t", "Err", ".", "Clear", "\n", "End", " ", "If", "\n", "customProp", " = ", "b", ".", "PropertySets", ".", "Item", "(4).", "Item", "(", "\"Bending\"", ")\n\n", "If", " ", "sm", ".", "Bends", ".", "Count", " > 0 ", "Then", "\n\n", "customProp", ".", "Value", " = ", "\"Bend Exist\"", "\n\n", "Else", " ", "If", " ", "sm", ".", "Bends", ".", "Count", " = 0 ", "Then", "\t\n\n", "customProp", ".", "Value", " = ", "\"No Bend Exist\"", "\n\n", "End", " ", "If", "\n", "End", " ", "Sub", "\u00a0"], "author": "yuvilo_"},
{"created at": ["\u200e02-24-2019 09:56 PM"], "solution Title": "\n                        Re: Pick occurrence to be added instead of Item 2 selection\n                    ", "solution": [], "author": "dean.morrison"},
{"created at": ["\u200e02-25-2019 02:45 AM"], "solution Title": "\n                        Re: Check-Drawing customization\n                    ", "solution": ["Public Sub CheckDim()\n\nDim a As Application\nSet a = ThisApplication\n\nDim b As DrawingDocument\nSet b = a.ActiveDocument\n\nDim c As DrawingDimension\nDim cs As DrawingDimensions\n\nDim sh As Sheet\nSet sh = b.ActiveSheet\n\nFor Each c In sh.DrawingDimensions\nc.ModelValueOverridden = True\nc.HideValue = True\nc.Text.FormattedText = \"\"\n\nNext\nEnd Sub\n"], "author": "bradeneurope|Ar"},
{"created at": ["\u200e02-25-2019 01:43 AM", "\u200e02-26-2019 09:12 PM"], "solution Title": "\n                        Re: To Retrieve Parent's BOM Structure\n                    ", "solution": ["BOM_Parent = oParentDocFile.BOMStructure", "BOM_Parent = oParentDocFile.ComponentDefinition.BOMStructure", "Public Class RWEI_0001A\n\tShared oTextSave As String = \"C:\\Users\\Public\\Documents\\iLogicBuffer.txt\"\n\t\nSub Main() \n\t'Accessing Assembly Components $ https://modthemachine.typepad.com/my_weblog/2009/03/accessing-assembly-components.html\n\tDim oDashes As String = \"\"\n\tDim iL_NO As String = \"BOM-XX WIP\"\n\tDim iL_Name As String = \"All Occurrences with BOM Structure\"\n\tDim iL_FullName As String = \"Rule \" & iL_NO & \": \" & iL_Name\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n\t\t\t\n\toDelete_ex_Notepad(oTextSave, iL_NO)\n\toHL1 = \"FILE REFERENCE TREE RAN FROM: \" & oDoc.FullFileName\n\toWrite_HeaderLines(oTextSave, oHL1)\n\toHL2 = iL_FullName\n\toWrite_HeaderLines(oTextSave, oHL2)\n\tFor i = 1 To Len(iL_FullName)\n\t\toDashes = oDashes & \"-\"\n\tNext i\n\toWrite_DashLine(oTextSave, oDashes)\n\t\n    ' Get the active assembly. \n    Dim oAsmDoc As AssemblyDocument \n    oAsmDoc = ThisApplication.ActiveDocument \n\n    ' Call the function that does the recursion. \n    Call TraverseAssembly(oAsmDoc.ComponentDefinition.Occurrences, 1) \n\tProcess.Start(\"Notepad.exe\", oTextSave)\nEnd Sub \n\nPrivate Sub TraverseAssembly(Occurrences As ComponentOccurrences, Level As Integer) \n    ' Iterate through all of the occurrence in this collection.  This \n    ' represents the occurrences at the top level of an assembly. \n    Dim oOcc As ComponentOccurrence \n\tDim BOM_Parent As String \n    For Each oOcc In Occurrences \n        ' Print the name of the current occurrence. \n        ' Check to see if this occurrence represents a subassembly \n        ' and recursively call this function to traverse through it. \n        If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then \n            Call TraverseAssembly(oOcc.SubOccurrences, Level + 1) \n        End If \n\t\n\t\toFFN_cw_EXT = oOcc.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\t'cw file extension\t\n\n\n\t\toLFN_cwExt = oDoc_LocalName_WExt(iL_NO, oFFN_cw_EXT)\n\t\tBOM_Structure_Return = Func_BOM_Structure(iL_NO, oOcc)\n\t\t\t'specify word splitting characters \"space\" and \"dash\"\n\t\t\tDim Separators() As Char = {\"*\"c} \n\t\t\tSentence = BOM_Structure_Return\n\t\t\tWords = Sentence.Split(Separators)\n\t\t\ti = 0\n\t\t\tFor Each wrd In Words\n\t\t\t'MessageBox.Show(\"Word Index #\" & i & \" = \" & Words(i))\n\t\t\ti += 1\n\t\t\tNext\n\t\tBOM_Structure = Words(0)\n\t\toOccurrence_FFN = Words(1)\n\t\t\n'\t\toParent = oOcc.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\n\t\tTry\n\t\t\tDim oParentocc As ComponentOccurrence\n\t\t\toParentocc = oOcc.ParentOccurrence\n\t\t\tBOM_Parent = Func_BOM_Structure(\"\",oParentocc)\n\t\t\t\n\t\t\tdocFile = oParentocc.Definition.Document\n\t\t    oParentFFN = System.IO.Path.GetFileNameWithoutExtension(docFile.FullFileName)\n\t\t    oParent = System.IO.Path.GetFileName(docFile.FullFileName)\n\t\tCatch\n\t\t\toParentFFN = System.IO.Path.GetFileNameWithoutExtension(oOcc.Parent.Document.DisplayName)\n\t\t\toParent = System.IO.Path.GetFileName(oOcc.Parent.Document.DisplayName)\n\t\tEnd Try\n\t\t\n\t\t\n'*************************** BOM_Parent BOM STRUCTURE Parent******************\n\n\t\tBOM_Structure_Parent = \"BOM Structure of Parent: \" & BOM_Parent\n\n'***************************BOM Structure Parent**********************\n\n\n\t\toData_X = BOM_Structure_Parent & \" $ \" & oParent & \"$\" & oLFN_cwExt & \"$\" & oOcc.Name & \"$\" & \"Level-\" & Level & \"$\" & BOM_Structure\t\n'\t\toData_X = oParent & \"$\" & oOcc.Name & \"$\" & \"Level-\" & Level & \"$\" & BOM_Structure\n'\t\toData_X = oLFN_cwExt & \"$\" & oFFN_cw_EXT & \"$\" & BOM_Structure & \" \" & oParent & \"$\" & oOcc.Name & \"$\" & \"Level-\" & Level\n\t\toWrite_Data(oTextSave, oData_X)\n\tNext \nEnd Sub\n\n\tFunction oDoc_LocalName_WExt(iL_NO As String, oFFN_cw_EXT As String)\n\toName_Sub = \"oDoc_LocalName_WExt\"\n\toTitle = iL_NO & \" $ SUB: \" & oName_Sub\n\toPos = Len(oFFN_cw_EXT) - InStrRev(oFFN_cw_EXT, \"\\\", -1)\n\toName_Local_cw_Ext = Right(oFFN_cw_EXT, oPos)\n\tReturn oName_Local_cw_Ext 'Local file name complete with extension\n\tEnd Function\n\n\n\tFunction Func_BOM_Structure(iL_NO As String, oCompOcc As ComponentOccurrence)\n\t\toName_Sub = \"BOM_Structure\"\n\t\toTitle = iL_NO & \" $ SUB: \" & oName_Sub\n\t\tDim oOccurrence As ComponentOccurrence\n\t\toFFN_X = oCompOcc.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\n\t\tBOM_X = oCompOcc.BOMStructure 'oCompOcc.Definition.BOMStructure\n\t\tIf BOM_X = BOMStructureEnum.kDefaultBOMStructure Then BOM_Structure = \"Default\"\n\t\tIf BOM_X = BOMStructureEnum.kNormalBOMStructure Then BOM_Structure = \"Normal\"\n\t\tIf BOM_X = BOMStructureEnum.kReferenceBOMStructure Then BOM_Structure = \"Reference\" \n\t\tIf BOM_X = BOMStructureEnum.kPhantomBOMStructure Then BOM_Structure = \"Phantom\"\n\t\tIf BOM_X = BOMStructureEnum.kPurchasedBOMStructure  Then BOM_Structure = \"Purchased\"\n\t\tIf BOM_X = BOMStructureEnum.kInseparableBOMStructure  Then BOM_Structure = \"Inseparable\"\n\t\tIf BOM_X = BOMStructureEnum.kVariesBOMStructure Then BOM_Structure = \"Varies\" \n\n\t\toDoc_LocalName_WExt(iL_NO, oFFN_X)\n\t\t'BOM_Structure = oDoc_LocalName_WExt(iL_NO, oFFN_X) & \" <- \" & BOM_Structure & \"(BOM STATUS: Default)\"\n\t\tDim BOM_Structure_Return As String = BOM_Structure & \"*\" & oFFN_X\n\t\tReturn BOM_Structure_Return\n\tEnd Function\n\t\nFunction GetOccurrenceParent(oOcc As ComponentOccurrence, oOccName As String)\n\n\tReturn oOcc.Parent.Document.DisplayName\nEnd Function\n\n'Process.Start(\"Notepad.exe\", oTextSave)\t\nSub oWrite_Data(oTextSave As String, oData As String)\n\toWrite = System.IO.File.AppendText(oTextSave)\n\toWrite.WriteLine(oData)\t\n\toWrite.Flush()\n\toWrite.Close\nEnd Sub\n\nSub oWrite_HeaderLines(oTextSave As String, oHeaderLine As String)\n\toWrite = System.IO.File.AppendText(oTextSave)\n\toWrite.WriteLine(oHeaderLine)\t\n\toWrite.Flush()\n\toWrite.Close\nEnd Sub\n\t\nSub oWrite_DashLine(oTextSave As String, oDashes As String)\n\toWrite = System.IO.File.AppendText(oTextSave)\n\toWrite.WriteLine(oDashes)\t\n\toWrite.Flush()\n\toWrite.Close\nEnd Sub\n\nSub oDelete_ex_Notepad(oTextSave As String, iL_NO As String)\t\t'To delete oTextSave if existing.\n \tIf System.IO.File.Exists(oTextSave) = True Then\n   \tSystem.IO.File.Delete(oTextSave)\n\tEnd If\nEnd Sub\nEnd Class"], "author": "YuhanZhang"},
{"created at": ["\u200e02-27-2019 01:51 AM"], "solution Title": "\n                        Re: Size of parts in an assembly\n                    ", "solution": [], "author": "ngocson8335"},
{"created at": ["\u200e02-25-2019 05:21 AM", "\u200e02-25-2019 05:34 AM", "\u200e02-25-2019 05:49 AM"], "solution Title": "\n                        Re: How to use iLogic to return a filename of a derived part?\n                    ", "solution": ["Dim", " ", "refdoc", " ", "As", " ", "Document", " = ", "ThisDoc", ".", "Document", ".", "ReferencedDocuments", ".", "Item", "(1)\n\n", "Dim", " ", "onext", " ", "As", " ", "String", " = ", "refdoc", ".", "DisplayName", "\n", "Dim", " ", "offext", " ", "As", " ", "String", " = ", "IO", ".", "Path", ".", "GetFileNameWithoutExtension", "(", "onext", ") \n\n", "MessageBox", ".", "Show", "(", "onext", ", ", "\"with extension\"", ")\n", "MessageBox", ".", "Show", "(", "offext", ", ", "\"without extension\"", ")\n\n\n", "Name1", " = ", "onext", "\n", "Name2", " = ", "offext", "\n\n", "Parameter", ".", "UpdateAfterChange", " = ", "True", "\n", "iLogicVb", ".", "UpdateWhenDone", " = ", "True"], "author": "Thomas_Savage"},
{"created at": ["\u200e02-26-2019 05:00 AM"], "solution Title": "\n                        Re: Suppressing countersunk holes\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": ["\u200e02-28-2019 03:52 AM"], "solution Title": "\n                        Re: To Retrieve Parent, Parent of Parent etc for phantom sub-assemblies\n                    ", "solution": ["If oOcc.ReferencedDocumentDescriptor.ReferencedDocument.IsModifiable = False Then\n\t'It is library document\nEnd If"], "author": "chandra.shekar."},
{"created at": ["\u200e02-26-2019 03:20 AM", "\u200e02-26-2019 04:20 AM", "\u200e02-26-2019 05:08 AM"], "solution Title": "\n                        Re: Suppress countersunk holes\n                    ", "solution": ["Public Sub CounterSunkSupp()\n\nDim a As Application\nSet a = ThisApplication\n\nDim b  As PartDocument\nSet b = a.ActiveDocument\n\nDim c As HoleFeature\nSet c = b.ComponentDefinition.Features.HoleFeatures.Item(1)\nFor Each c In b.ComponentDefinition.Features.HoleFeatures\nIf c.Type = 83912192 Then\nc.Suppressed = True\nEnd If\n\nNext\n\nEnd Sub", "Public Sub CounterSunkSupp()\n\nDim a As Application\nSet a = ThisApplication\n\nDim b  As PartDocument\nSet b = a.ActiveDocument\n\nDim c As HoleFeature\n'Set c = b.ComponentDefinition.Features.HoleFeatures.Item(1)\nFor Each c In b.ComponentDefinition.Features.HoleFeatures\n\nMsgBox c.HoleType = kDrilledHole\nIf c.HoleType = kCounterSinkHole Then\nc.SetDrilled\n'c.HoleType = kDrilledHole\n'c.Suppressed = True\nEnd If\n\nNext\n\nEnd Sub", "Public Sub CounterSunkSupp()\n\nDim a As Application\nSet a = ThisApplication\n\nDim b  As PartDocument\nSet b = a.ActiveDocument\n\nDim c As HoleFeature\n'Set c = b.ComponentDefinition.Features.HoleFeatures.Item(1)\n\nDim trm As TransactionManager\nSet trm = a.TransactionManager\n\nDim tr As Transaction\nSet tr = trm.StartTransaction(b, \"Undo this\")\n\n\n\nFor Each c In b.ComponentDefinition.Features.HoleFeatures\n\n'MsgBox c.HoleType = kDrilledHole\nIf c.HoleType = kCounterSinkHole Then\nc.SetDrilled\n'c.HoleType = kDrilledHole\n'c.Suppressed = True\nEnd If\n\nNext\ntr.End\nMsgBox \"Undo\"\n' AND EXPORT YOUR STEP FILE HERE.................................\ntrm.UndoTransaction\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": ["\u200e02-26-2019 06:08 PM"], "solution Title": "\n                        Re: Error creating top view\n                    ", "solution": [], "author": "JaneFan"},
{"created at": ["\u200e02-27-2019 07:26 AM"], "solution Title": "\n                        Re: Traversing subassemblies within parent assembly\n                    ", "solution": [], "author": "DRoam"},
{"created at": ["\u200e02-27-2019 01:02 AM"], "solution Title": "\n                        Re: TO SETUP DERIVED PART DIALOG BOX SETTINGS\n                    ", "solution": ["Dim", " ", "oPD", " ", "As", " ", "PartComponentDefinition", " \n", "oPD", " = ", "ThisDoc", ".", "Document", ".C", "omponentDefinition", "\n\n", "Dim", " ", "DD", " ", "As", " ", "DerivedPartDefinition", " \n", "DD", " = ", "oPD", ".", "ReferenceComponents", ".", "DerivedPartComponents", ".", "CreateUniformScaleDef", "(", "\"", "Full path of derived part", "\"", ")\n\n", "DD", ".", "ExcludeAll", "()\n", "DD", ".", "UseColorOverridesFromSource", " = ", "fasle", " \n\n", "Dim", " ", "oPDC", " ", "As", " ", "DerivedPartComponent", " \n", "oPDC", " = ", "oPD", ".", "ReferenceComponents", ".", "DerivedPartComponents", ".", "Add", "(", "DD", ")"], "author": "JaneFan"},
{"created at": ["\u200e02-27-2019 01:30 AM"], "solution Title": "\n                        Re: Ilogic rule at assembly to skip frame skeleton (or other) parts\n                    ", "solution": ["Public", " ", "Sub", " ", "Main", "() \n    ", "' Get the active assembly document. ", "\n    ", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", "  \n    ", "oAsmDoc", " = ", "ThisApplication", ".", "ActiveDocument", " \n\n    ", "' Iterate through all of the documents referenced by the assembly. ", "\n    ", "Dim", " ", "oDoc", " ", "As", " ", "Document", " \n    ", "For", " ", "Each", " ", "oDoc", " ", "In", " ", "oAsmDoc", ".", "AllReferencedDocuments", "\n        ", "' Check to see if this is a part. ", "\n        ", "If", " ", "oDoc", ".", "DocumentType", " = ", "kPartDocumentObject", " ", "Then", " \n\t\t\t", "If", " ", "oDoc", ".", "ComponentDefinition", ".", "SurfaceBodies", ".", "Count", " > 0 ", "Then", " \n\t            ", "Dim", " ", "oPartDoc", " ", "As", " ", "PartDocument", "\n\t\t\t\t", "oPartDoc", " = ", "oDoc", "\n\t\t\t\t", "'Dim oRefDocName = oDoc.DisplayName", "\n\t\t       \t", "'Dim oRefDocName = oDoc.DisplayName", "\n\t\t\t\t", "'MessageBox.Show(oRefDocName,\"The component being updated is\")", "\n\t\t\t\t", "CreateFormatG_L", "(", "oPartDoc", ", ", "newParam", ", ", "userParams", ")\n\t\t\t\t", "CreateFormatG_W", "(", "oPartDoc", ", ", "newParam", ", ", "userParams", ")\n\t\t\t\t", "CreateFormatG_H", "(", "oPartDoc", ", ", "newParam", ", ", "userParams", ")\n\t\t\t\t", "CreateFormatG_T", "(", "oPartDoc", ", ", "newParam", ", ", "userParams", ")\n\t\t\t\t", "'iProperties.Value(oModelName, \"Project\", \"Vendor\") = SheetNumber", "\n\t\t\t", "End", " ", "If", " \n\t\t", "End", " ", "If", "\n    ", "Next", "\n\t", "ThisDoc", ".", "Save", "\n\t", "MessageBox", ".", "Show", "(", "\"Finished updating Vendor Nos.\"", ")\n", "End", " ", "Sub"], "author": "JaneFan"},
{"created at": ["\u200e02-27-2019 08:23 AM"], "solution Title": "\n                        Re: Create custom labels for views\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": ["\u200e02-27-2019 07:44 AM"], "solution Title": "\n                        Re: End face of a loft is twisted\n                    ", "solution": [], "author": "DRoam"},
{"created at": ["\u200e02-28-2019 03:34 AM", "\u200e02-28-2019 03:42 AM", "\u200e03-01-2019 01:19 PM"], "solution Title": "\n                        Re: iLogic Get Parameters From Part or Assembly File Without Knowing File Name\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " = ", "oDoc", ".", "ActiveSheet", "\n\n", "Dim", " ", "oView", " ", "As", " ", "DrawingView", " \n", "oView", " = ", "oSheet", ".", "DrawingViews", ".", "Item", "(1)", "'''", "Identify the view in the drawing", "\n\n", "oViewModelDoc", " = ", "oView", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", " ", "' Is Document reference of view", "\n", "Dim", " ", "ofilename", " ", "As", " ", "String", "\n", "ofilename", " = ", "oViewModelDoc", ".", "Displayname", " \n\n", "MessageBox", ".", "Show", "(", "ofilename", ", ", "\"Title\"", ")", "oViewName", "=", "\"VISTA1\"", "    ", "'''", " Enter the name of the view", "\n\n", "Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " = ", "oDoc", ".", "ActiveSheet", "\n", "Dim", " ", "oView", " ", "As", " ", "DrawingView", "\n", "For", " ", "Each", " ", "oView", " ", "In", " ", "oSheet", ".", "DrawingViews", "\n\t", "If", " ", "oView", ".", "Name", " = ", "oViewName", " ", "Then", " \n\t", "oViewModelDoc", " = ", "oView", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", " ", "' Is Document reference of view", "\n\t", "Dim", " ", "ofilename", " ", "As", " ", "String", " = ", "oViewModelDoc", ".", "Displayname", " \n    ", "MessageBox", ".", "Show", "(", "ofilename", ", ", "\"View Name\"", ")\n\t", "End", " ", "If", "\n", "Next", " \nDim width As Double\nDim length As Double\nDim oScale As Double\n\noViewModelName = ThisApplication.ActiveDocument.ActiveSheet.DrawingViews.Item(1).ReferencedDocumentDescriptor.ReferencedFileDescriptor.FullFileName\nfname = System.IO.Path.GetFileName(oViewModelName)\n\nwidth = Parameter(fname, \"width\")\nlength = Parameter(fname, \"length\")\noScale = Min( 4/(length/25.4), 3/(width/25.4) )\noScale = Min( oScale, .5 ) ' if the sale is larger then 50%, limit the size of the scale to .5\noScale = Round( oScale , 2 )\n\nActiveSheet.View(\"ISO VIEW\").Scale = oScale\nActiveSheet.View(\"FRONT VIEW\").Scale = oScale", "modelName = IO.Path.GetFileName(ActiveSheet.View(\"VIEW1\").ModelDocument.FullFileName)"], "author": "yuvilo_"},
{"created at": ["\u200e03-01-2019 03:03 AM"], "solution Title": "\n                        Re: Detect Point Collision\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "PartDocument", " = ", "ThisApplication", ".", "ActiveEditDocument", "\n", "Dim", " ", "oDef", " ", "As", " ", "PartComponentDefinition", " = ", "oDoc", ".", "ComponentDefinition", "\n", "Dim", " ", "oSurfaceBods", " ", "As", " ", "SurfaceBodies", " = ", "oDef", ".", "SurfaceBodies", "\n", "Dim", " ", "oTestPoint", " ", "As", " ", "Inventor", ".", "Point", " = ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint", "(111,222,333)\n\n", "' Debug - create a workpoint", "\n", "Dim", " ", "oWP", " ", "As", " ", "WorkPoint", " = ", "oDef", ".", "WorkPoints", ".", "AddFixed", "(", "oTestPoint", ", ", "False", ")\n\n", "For", " ", "Each", " ", "oSurf", " ", "As", " ", "SurfaceBody", " ", "In", " ", "oSurfaceBods", "\n", "Select", " ", "Case", " ", "oSurf", ".", "IsPointInside", "(", "New", " ", "Double", "(2) {", "oTestPoint", ".", "X", ", ", "oTestPoint", ".", "Y", ", ", "oTestPoint", ".", "Z", " }) \n", "Case", " ", "ContainmentEnum", ".", "kInsideContainment", " \n\t", "MsgBox", "(", "\"Point is inside surface body: \"", " & ", "oSurf", ".", "Name", ")\n", "Case", " ", "ContainmentEnum", ".", "kOnContainment", "\n\t", "MsgBox", "(", "\"Point is ON surface body: \"", " & ", "oSurf", ".", "Name", ")\n", "Case", " ", "ContainmentEnum", ".", "kOutsideContainment", "\n\t", "MsgBox", "(", "\"Point is outside surface body: \"", " & ", "oSurf", ".", "Name", ")\n", "End", " ", "Select", "\n", "Next"], "author": "LukeDavenport"},
{"created at": ["\u200e02-28-2019 05:43 AM"], "solution Title": "\n                        Re: Intelligent AutoCAD Blocks\n                    ", "solution": ["'Some logic to fill out MTextCode lines with variables", "\n\n", "Dim", " ", "sDXFFile", " ", "As", " ", "String", " = ", "ControlChars", ".", "Quote", " & ", "sFilePath", " & ", "\"\\DXF\\\"", " & ", "sFileName", " & ", "\".dxf\"", " & ", "ControlChars", ".", "Quote", "\n\n", "'Set file open commands", "\n", "Dim", " ", "DXFOpen", " ", "As", " ", "String", " = ", "\"open\"", "\n", "Dim", " ", "DXFFileCode", " ", "As", " ", "String", " = ", "sDXFFile", "\n\n", "'set mtext commands", "\n", "Dim", " ", "MTextCode1", " ", "As", " ", "String", " = ", "\"mtext\"", "\n", "Dim", " ", "MTextCode2", " ", "As", " ", "String", " = ", "\"0,0\"", "\n", "Dim", " ", "MTextCode3", " ", "As", " ", "String", " = ", "\"height\"", "\n", "Dim", " ", "MTextCode4", " ", "As", " ", "String", " = ", "\"6\"", "\n", "Dim", " ", "MTextCode5", " ", "As", " ", "String", " = ", "\"width\"", "\n", "Dim", " ", "MTextCode6", " ", "As", " ", "String", " = ", "\"100,100\"", "\n", "'fill mtext with variables", "\n", "Dim", " ", "MTextCode7", " ", "As", " ", "String", " = ", "\"my variable 1\"", "\n", "Dim", " ", "MTextCode8", " ", "As", " ", "String", " = ", "\"my variable 2\"", "\n", "Dim", " ", "MTextCode9", " ", "As", " ", "String", " = ", "\"my variable 3\"", "\n\n", "'set files save and close commands", "\n", "Dim", " ", "DXFSave", " ", "As", " ", "String", " = ", "\"save\"", "\n", "Dim", " ", "DXFClose", " ", "As", " ", "String", " = ", "\"close\"", "\n", "Dim", " ", "LineSpace", " ", "As", " ", "String", " = ", "\"\"", "\n\n", "'Write to .scr file", "\n", "Dim", " ", "sScriptFile", " ", "As", " ", "String", " = ", "sScriptFilePath", " & ", "\"\\\"", " & ", "\"DXF Script.scr\"", "\n", "Dim", " ", "oAppend", " ", "As", " ", "System", ".", "IO", ".", "StreamWriter", "\n", "oAppend", " = ", "IO", ".", "File", ".", "AppendText", "(", "sScriptFile", ")\n\n", "'''", "DXF File open code", "\n", "oAppend", ".", "WriteLine", "(", "DXFOpen", ")\n", "oAppend", ".", "WriteLine", "(", "DXFFileCode", ")\n", "'''", "Add mtext strings", "\n", "oAppend", ".", "WriteLine", "(", "MTextCode1", ")\n", "oAppend", ".", "WriteLine", "(", "MTextCode2", ")\n", "oAppend", ".", "WriteLine", "(", "MTextCode3", ")\n", "oAppend", ".", "WriteLine", "(", "MTextCode4", ")\n", "oAppend", ".", "WriteLine", "(", "MTextCode5", ")\n", "oAppend", ".", "WriteLine", "(", "MTextCode6", ")\n", "oAppend", ".", "WriteLine", "(", "MTextCode7", ")\n", "oAppend", ".", "WriteLine", "(", "MTextCode8", ")\n", "oAppend", ".", "WriteLine", "(", "MTextCode9", ")\n", "'Add save line", "\n", "oAppend", ".", "WriteLine", "(", "DXFSave", ")\n", "'''", "Add close line", "\n", "oAppend", ".", "WriteLine", "(", "DXFClose", ")\n", "'''", "Add line space", "\n", "oAppend", ".", "WriteLine", "(", "LineSpace", ")\n", "oAppend", ".", "Flush", "\n", "oAppend", ".", "Close", "()\n"], "author": "lmc.engineering"},
{"created at": ["\u200e03-03-2019 06:55 PM"], "solution Title": "\n                        Re: Check whether the Sketch is Auxiliary. PART 2\n                    ", "solution": ["Sub GetDriveSketchForFG()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSk As PlanarSketch\n    Dim oAttSet As AttributeSet\n    \n    On Error Resume Next\n    For Each oSk In oDoc.ComponentDefinition.Sketches\n        If oSk.AttributeSets.NameIsUsed(\"com.autodesk.FG\") Then\n            Set oAttSet = oSk.AttributeSets(\"com.autodesk.FG\")\n            \n            If oAttSet.NameIsUsed(\"Type\") Then\n                MsgBox \"The sketch: \" & oSk.Name & \" is a drive dimension sketch.\"\n            End If\n        End If\n    Next\nEnd Sub"], "author": "YuhanZhang"},
{"created at": ["\u200e02-28-2019 07:58 AM"], "solution Title": "\n                        Re: Ilogic code to Export Part List in Tab delimited text format\n                    ", "solution": ["Public Sub Main()\n\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n'MsgBox (\"\")\nDim FileName As String\nFileName = iProperties.Value(\"Project\", \"PART NUMBER\") & \"\" & iProperties.Value(\"Project\", \"REVISION NUMBER\")\n'MsgBox (FileName)\n\nDim oPartsList1 As PartsList\noPartsList1 = oDrawDoc.ActiveSheet.PartsLists.Item(1)\n'MsgBox (\"\")\nDim oOptions As NameValueMap\noOptions = ThisApplication.TransientObjects.CreateNameValueMap '.TransientObjects.CreateNameValueMap\n'MsgBox (\"\")\noOptions.Value(\"ExportedColumns\") = \"ITEM;PART NUMBER;DESCRIPTION;SKU;QTY\"\n\noPartsList1.Sort( \"OES_BOM_Rank\", 1, \"PART NUMBER\", 1)\noPartsList1.Renumber\noPartsList1.SaveItemOverridesToBOM\n\noPartsList1.Export(\"C:\\Temp\\\" & FileName & \".txt\", PartsListFileFormatEnum.kTextFileCommaDelimited,oOptions)\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": ["\u200e03-02-2019 01:06 PM"], "solution Title": "\n                        Re: Delete last 3 Latest constraints which i made\n                    ", "solution": [], "author": "yuvilo_"},
{"created at": ["\u200e03-03-2019 10:52 PM"], "solution Title": "\n                        Re: For Each oOcc In Occurrences  .... oOcc and Parent of Parent (oParent_Parent\n                    ", "solution": [], "author": "rwickrama"},
{"created at": ["\u200e03-02-2019 09:45 AM"], "solution Title": "\n                        Re: Disabling Adaptive Feature\n                    ", "solution": [], "author": "yuvilo_"},
{"created at": ["\u200e03-07-2019 12:43 AM"], "solution Title": "\n                        Re: Ilogic to add ilogic to event triggers\n                    ", "solution": ["Sub", " ", "main", "()\n\t\n\t\n\t\n", "MessageBox", ".", "Show", "(", "\"Example\"", ", ", "\"Title\"", ")\n\n\n\n\n\n\n", "Events", "\n", "End", " ", "Sub", "\n\n", "Sub", " ", "Events", "\n", "On", " ", "Error", " ", "Resume", " ", "Next", "\n\t", "Dim", " ", "EventPropSet", " ", "As", " ", "Inventor", ".", "PropertySet", "\n\t", "EventPropSet", " = ", "GetiLogicEventPropSet", "(", "ThisApplication", ".", "ActiveDocument", ")\n\t", "EventPropSet", ".", "Add", "(", "\"Inicio\"", ", ", "\"PartBodyChanged \"", ", 1200)\n\n", "'After Open Document\t\t\t\t\t: AfterDocOpen                 \t\t: 400", "\n", "'Close(Document)\t\t\t\t\t\t: DocClose                     \t\t: 500", "\n", "'Before Save Document                   : BeforeDocSave           \t\t\t: 700", "\n", "'After Save Document               \t\t: AfterDocSave               \t\t: 800", "\n", "'Any Model Parameter Change        \t\t: AfterAnyParamChange   \t\t\t: 1000", "\n", "'Part Geometry Change**            \t\t: PartBodyChanged         \t\t\t: 1200", "\n", "'Material Change**                  \t: AfterMaterialChange     \t\t\t: 1400", "\n", "'Drawing View Change***               \t: AfterDrawingViewsUpdate  \t\t\t: 1500", "\n", "'iProperty(Change)                  \t: AfterAnyiPropertyChange           : 1600", "\n", "'Feature Suppression Change**          \t: AfterFeatureSuppressionChange   \t: 2000", "\n", "'Component Suppression Change*   \t\t: AfterComponentSuppressionChange \t: 2200", "\n", "'iPart / iAssembly Change Component* \t: AfterComponentReplace   \t\t\t: 2400", "\n", "'New Document                         \t: AfterDocNew                  \t\t: 2600", "\n\n", "InventorVb", ".", "DocumentUpdate", "()\n\t\n\n", "End", " ", "Sub", "\n\n\n", "Function", " ", "GetiLogicEventPropSet", "(", "cDocument", " ", "As", " ", "Document", ") ", "As", " ", "Inventor", ".", "PropertySet", "\n\t", "On", " ", "Error", " ", "Resume", " ", "Next", "\n\t\t", "iLogicEventPropSet", " = ", "cDocument", ".", "PropertySets", ".", "Item", "(", "\"iLogicEventsRules\"", ")\n\t\t\n\t\t", "If", " ", "iLogicEventPropSet", " ", "Is", " ", "Nothing", " ", "Then", "\n\t\t\t", "iLogicEventPropSet", " = ", "cDocument", ".", "PropertySets", ".", "Item", "(", "\"_iLogicEventsRules\"", ")\n\t\t", "End", " ", "If", "\n\t\t\n\t\t", "If", " ", "iLogicEventPropSet", ".", "InternalName", " <> ", "\"{2C540830-0723-455E-A8E2-891722EB4C3E}\"", " ", "Then", "\n\t\t\t", "Call", " ", "iLogicEventPropSet", ".", "Delete", "\n\t\t\t", "iLogicEventPropSet", " = ", "cDocument", ".", "PropertySets", ".", "Add", "(", "\"iLogicEventsRules\"", ", ", "\"{2C540830-0723-455E-A8E2-891722EB4C3E}\"", ")\n\t\t", "End", " ", "If", "\n\t\t\n\t\t", "If", " ", "iLogicEventPropSet", " ", "Is", " ", "Nothing", " ", "Then", "\n\t\t\t", "iLogicEventPropSet", " = ", "cDocument", ".", "PropertySets", ".", "Add", "(", "\"iLogicEventsRules\"", ", ", "\"{2C540830-0723-455E-A8E2-891722EB4C3E}\"", ")\n\t\t", "End", " ", "If", "\n\t\t\n\t\t", "If", " ", "iLogicEventPropSet", " ", "Is", " ", "Nothing", " ", "Then", "\n\t\t\t", "MsgBox", " (", "\"Unable to create the Event Triggers property for this file!\"", ", , ", "\"Event Triggers Not Set\"", ")\n\t\t\t", "Err", ".", "Raise", "(1)\n\t\t\t", "Exit", " ", "Function", "\n\t\t", "End", " ", "If", "\n\t", "On", " ", "Error", " ", "GoTo", " 0\n\t\n\t", "Return", " ", "iLogicEventPropSet", "\n", "End", " ", "Function", "\n"], "author": "yuvilo_"},
{"created at": ["\u200e03-03-2019 01:44 PM"], "solution Title": "\n                        Re: iLogic code to project Axis + Run \"Auto dimension\" in a Part Sketc\n                    ", "solution": ["Dim", " ", "oCompDef", " ", "As", " ", "PartComponentDefinition", "\n", "oCompDef", " = ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", "\n", "oTG", " = ", "ThisApplication", ".", "TransientGeometry", "\n\n", "Dim", " ", "oSketch", " ", "As", " ", "PlanarSketch", " = ", "oCompDef", ".", "Sketches", ".", "Item", "(", "\"sketch1\"", ")", "'specify the name of the sketch  ", "\n\n", "opoint", "=", "oTG", ".", "CreatePoint2d", "(-2, -1)", "'specify the center of the circle", "\n\n", "Dim", " ", "oCP2", " ", "As", " ", "SketchEntity", " = ", "oSketch", ".", "AddByProjectingEntity", "(", "oCompDef", ".", "WorkAxes", ".", "Item", "(1))\n", "Dim", " ", "oCP3", " ", "As", " ", "SketchEntity", " = ", "oSketch", ".", "AddByProjectingEntity", "(", "oCompDef", ".", "WorkAxes", ".", "Item", "(2))\n\n", "Dim", " ", "oCircle", " ", "As", " ", "SketchCircle", " = ", "oSketch", ".", "SketchCircles", ".", "AddByCenterRadius", "(", "opoint", ", 2.5)\n\n", "Dim", " ", "oDimension1", " ", "As", " ", "DimensionConstraint", " = ", "oSketch", ".", "DimensionConstraints", ".", "AddDiameter", "(", "oSketch", ".", "SketchCircles", ".", "Item", "(1), ", "oTG", ".", "CreatePoint2d", "(0, -1))\n\n", "Dim", " ", "oDimension2", " ", "As", " ", "DimensionConstraint", " = ", "oSketch", ".", "DimensionConstraints", ".", "AddOffset", "(", "oSketch", ".", "SketchLines", "(1),", "oSketch", ".", "SketchPoints", "(1), ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(2, 2), ", "False", ")\n\n", "Dim", " ", "oDimension3", " ", "As", " ", "DimensionConstraint", " = ", "oSketch", ".", "DimensionConstraints", ".", "AddOffset", "(", "oSketch", ".", "SketchLines", "(2),", "oSketch", ".", "SketchPoints", "(1), ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(5, 5), ", "False", ")\n"], "author": "yuvilo_"},
{"created at": ["\u200e03-04-2019 03:12 AM"], "solution Title": "\n                        Re: Add to/ Delete parameters from iLogic Form via Rule\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": ["\u200e03-04-2019 04:36 AM", "\u200e03-04-2019 05:15 AM"], "solution Title": "\n                        Re: iLogic to change iParts help needed\n                    ", "solution": ["'Change iPart", "\n\n", "If", " ", "iPart_Size_Change", " = 1000 ", "Then", "\n\t", "iPart", ".", "ChangeRow", "(", "\"UNLP-5132-17 (iLogic)\"", ", ", "\"UNLP-5132-17\"", ")\n\t", "ElseIf", " ", "iPart_Size_Change", " = 1500\n\t", "iPart", ".", "ChangeRow", "(", "\"UNLP-5132-17 (iLogic)\"", ", ", "\"UNLP-5131-17\"", ")\t\n\t", "ElseIf", " ", "iPart_Size_Change", " = 2000\n\t", "iPart", ".", "ChangeRow", "(", "\"UNLP-5132-17 (iLogic)\"", ", ", "\"UNLP-5130-17\"", ")\n", "End", " ", "If", "\n\n\n", "If", " ", "iPart_Size_Change", " = 1000 ", "Then", "\n\t", "iPart", ".", "ChangeRow", "(", "\"UNLP-5132-17 (iLogic 2)\"", ", ", "\"UNLP-5132-17\"", ")\n\t", "ElseIf", " ", "iPart_Size_Change", " = 1500\n\t", "iPart", ".", "ChangeRow", "(", "\"UNLP-5132-17 (iLogic 2)\"", ", ", "\"UNLP-5131-17\"", ")\t\n\t", "ElseIf", " ", "iPart_Size_Change", " = 2000\n\t", "iPart", ".", "ChangeRow", "(", "\"UNLP-5132-17 (iLogic 2)\"", ", ", "\"UNLP-5130-17\"", ")\n", "End", " ", "If", "\u00a0", "Sub main()\n\tComponent.Replace(Parameter(\"CurrentRelevantOccurrences\"), ReplacingComponent(iPartToReplace & \".ipt\"), False)\n\tiLogicVb.RunRule(\"get current relevant iParts\")\n\nEnd Sub\n\nFunction ReplacingComponent(ReplacementComp As String) As String\n\tLogger.Debug(\"replacing: \" & Parameter(\"CurrentRelevantOccurrences\") & \" With: \" & Parameter(\"iPartToReplace\") & \".ipt\")\n\tReturn iPartToReplace & \".ipt\"\nEnd Function", "Sub main()\n\tGetCurrentRelevantOccurences()\nEnd Sub\n\nSub GetCurrentRelevantOccurences()\n\tIf TypeOf ThisApplication.ActiveDocument Is AssemblyDocument Then\n\t\tDim AssyDoc As AssemblyDocument = ThisApplication.ActiveDocument\n\t\tDim assyDef As AssemblyComponentDefinition = AssyDoc.ComponentDefinition\n\t\t\n\t\tDim occurrenceList As List(Of String) = New List(Of String)\n\t\tDim allowedList As List(Of String) = ListOfAllowedOccurrences\n\t\tFor Each allowedOcc As String In allowedList\n\t\t\tDim DocTocheck As Document = ThisApplication.Documents.ItemByName(IO.Path.GetDirectoryName(AssyDoc.FullDocumentName) & \"\\\" & allowedOcc)\n\t\t\tIf Not DocTocheck Is Nothing Then\n\t\t\t\tFor Each compOcc As ComponentOccurrence In assyDef.Occurrences.AllReferencedOccurrences(DocTocheck)\n\t\t\t\t\tDim tmpDoc As PartDocument = compOcc.Definition.Document\n\t\t\t\t\tIf Not tmpDoc Is Nothing Then\n\t\t\t\t\t\toccurrenceList.Add(compOcc.Name)\n\t\t\t\t\tEnd If\n\t\t\t\tNext\n\t\t\tEnd If\n\t\tNext\n\t\toccurrenceList.Sort()\n\t\tMultiValue.List(\"CurrentRelevantOccurrences\").Clear\n\t\tMultiValue.List(\"CurrentRelevantOccurrences\") = occurrenceList\n\tEnd If\nEnd Sub\n\nFunction ListOfAllowedOccurrences() As List(Of String)\n\tDim tmpList As List(Of String) = New List(Of String)\n\ttmpList.Add(\"1000.ipt\")\n\ttmpList.Add(\"1500.ipt\")\n\ttmpList.Add(\"2000.ipt\")\n\tReturn tmpList\nEnd Function"], "author": "Thomas_Savage"},
{"created at": ["\u200e03-11-2019 09:28 AM"], "solution Title": "\n                        Re: How To Mirror a Sketch Using VBA Macro ?\n                    ", "solution": ["    ", "Private", " ", "Sub", " ", "Main", "\n\n        ", "Dim", " ", "oPartDoc", " ", "As", " ", "PartDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\n        ", "Dim", " ", "oPartComDef", " ", "As", " ", "PartComponentDefinition", " = ", "oPartDoc", ".", "ComponentDefinition", "\n        ", "'Dim oFeatures As Features = oPartComDef.Features", "\n\n        ", "Dim", " ", "oCollection", " ", "As", " ", "ObjectCollection", "\n        ", "oCollection", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateObjectCollection", "\n\n\t\t", "'this is the XZ-plane ", "\n        ", "Dim", " ", "oPartPlane1", " ", "As", " ", "WorkPlane", "\n        ", "oPartPlane1", " = ", "oPartComDef", ".", "WorkPlanes", ".", "Item", "(2)\n\t\t\n\t\t", "'put a feature (or more) in the object collection", "\n        ", "oCollection", ".", "Add", "(", "oPartComDef", ".", "Features", "(", "\"Extrusion3\"", "))\n\n\t\t", "'create a mirror definition", "\n        ", "Dim", " ", "mirrorDefinition", " ", "As", " ", "MirrorFeatureDefinition", "\n        ", "mirrorDefinition", " = ", "oPartComDef", ".", "Features", ".", "MirrorFeatures", ".", "CreateDefinition", "(", "oCollection", ", ", "oPartPlane1", ", ", "PatternComputeTypeEnum", ".", "kIdenticalCompute", ")\n\n        ", "'create the feature", "\n        ", "Dim", " ", "mirfeature", " ", "As", " ", "Inventor", ".", "MirrorFeature", "\n        ", "mirfeature", " = ", "oPartComDef", ".", "Features", ".", "MirrorFeatures", ".", "AddByDefinition", "(", "mirrorDefinition", ")\n\n    ", "End", " ", "Sub"], "author": "HermJan.Otterma"},
{"created at": ["\u200e03-05-2019 08:32 AM"], "solution Title": "\n                        Re: Problem With the background color\n                    ", "solution": [], "author": "DRoam"},
{"created at": ["\u200e03-06-2019 02:30 AM"], "solution Title": "\n                        Re: transparency in drawing view\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": ["\u200e03-05-2019 09:38 PM"], "solution Title": "\n                        Re: Setting iProperties to Parts - how to exclude Content Center or Purchased it\n                    ", "solution": ["For Each aDoc In oDoc.AllReferencedDocuments\n\tIf aDoc.DocumentType = kPartDocumentObject Then\n\t\tDim oPart As PartDocument\n\t\toPart = aDoc \n\t\t\n\t\tDim oDef As PartComponentDefinition \n\t\toDef = oPart.ComponentDefinition \n\t\t\n\t\tIf oDef.BOMStructure <> BOMStructureEnum.kPurchasedBOMStructure And oDef.IsContentMember = False Then\n\t\t\tFNamePos = InStrRev(aDoc.FullFileName, \"\\\", - 1)\n\t\t\tdocFName = Mid(aDoc.FullFileName, FNamePos + 1, Len(aDoc.FullFileName) -FNamePos)\n\t\t\tiProperties.Value(docFName, \"Summary\", \"Comments\") = 0\n\t\t\tiProperties.Value(docFName, \"Project\", \"Cost Center\") = JOB_CARD_NUMBER\n\t\t\tiProperties.Value(docFName, \"Project\", \"Project\") = PROJECT_NAME\n\t\t\tiProperties.Value(docFName, \"Summary\", \"Company\") = CUSTOMER_NAME\t\n\t\t\tiProperties.Value(docFName, \"Summary\", \"Keywords\") = REFERENCE_NUMBER\n\t\tEnd If \t\t\n\tEnd If\nNext"], "author": "chandra.shekar."},
{"created at": ["\u200e03-15-2019 02:25 AM"], "solution Title": "\n                        Re: Create custom Widget in a graphical window\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": ["\u200e03-13-2019 10:27 PM"], "solution Title": "\n                        Re: iPart or iAssembly member save as other automation\n                    ", "solution": ["' Set reference to active document.\noDoc = ThisApplication.ActiveDocument\n\n' Check the Document type is an assembly or part\nIf (oDoc.DocumentType <> kAssemblyDocumentObject And _\n   oDoc.DocumentType <> kPartDocumentObject) Then\n   MsgBox(\"Error:Document type is not assembly/part\")\n   Exit Sub\nEnd If\n\nDim oDef As AssemblyComponentDefinition = oDoc.ComponentDefinition \nDim initRowIndex As Integer\nDim oFactory As iAssemblyFactory = oDef.iAssemblyFactory\n\nDim oRow As iAssemblyTableRow\nDim oMember As iAssemblyMember \nFor Each oRow In oFactory.TableRows\n\t\n\t' Generate the member and file, (overwrites member file or creates new file)\n\tCall oFactory.CreateMember(oRow)\n\n\tDim oPath As String \n\toPath = oFactory.MemberCacheDir\n\n\tDim oReferDoc As AssemblyDocument \n    oReferDoc = ThisApplication.Documents.Open(oPath & \"\\\" & oRow.MemberName & \".iam\", True)\n    \n    Dim oName As String\n    oName = oReferDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Value\n     \n    ThisApplication.SilentOperation = True \n\t\n    Call oReferDoc.SaveAs(oPath & \"\\\" & oName & \".iam\", True) \n    \n    Call oReferDoc.Close\n\t\n\tThisApplication.SilentOperation = False \n\t  \nNext"], "author": "chandra.shekar."},
{"created at": ["\u200e03-05-2019 09:29 PM"], "solution Title": "\n                        Re: How to show and hide a \"please wait\" messagebox while the model up\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": ["\u200e03-07-2019 03:31 AM"], "solution Title": "\n                        Re: Need help to Get the Rule Running\n                    ", "solution": ["'Option Explicit On\nPublic Class RWEI_190305\n\tShared oTextSave As String = \"C:\\Users\\Public\\Documents\\iLogicBuffer.txt\"\n\nSub Main() \n'Dim oTextSave As String\nDim iL_NO As String = \"345\"\n\toDelete_ex_Notepad(oTextSave)\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n    ' Get the active assembly. \n    Dim oAsmDoc As AssemblyDocument \n    oAsmDoc = ThisApplication.ActiveDocument \n\toAsmDoc.Save\n\n    ' Call the function that does the recursion. \n\tDim oParent_ofParent_atL3 As String = \"\"\n\tDim oParent_ofParent_atL4 As String = \"\"\n\tDim oParent_ofParent_atL5 As String = \"\"\n\tDim oLevel_Request As Integer = 1\n\t'oLevel_Request = InputBox(\"Level for Data Record: \", \"USER INPUT REQUEST\", oLevel_Request)\n\tCall TraverseAssembly(oAsmDoc.ComponentDefinition.Occurrences, 1, 1, oParent_ofParent_atL3, oParent_ofParent_atL4, oParent_ofParent_atL5, oLevel_Request) \n\tProcess.Start(\"Notepad.exe\", oTextSave)\nEnd Sub \n\nSub TraverseAssembly(Occurrences As ComponentOccurrences, Level As Integer, j As Integer, oParent_ofParent_atL3 As String, oParent_ofParent_atL4 As String, oParent_ofParent_atL5 As String, oLevel_Request As Integer) \n \tDim oParent_ofParent As String\n'\tDim oParent_ofParent_atL4 As String\n'\tDim oParent_ofParent_atL5 As String\n\t' Iterate through all of the occurrence in this collection.  This \n    ' represents the occurrences at the top level of an assembly. \n\tDim oParent_BOM_Structure As String \n    For Each oOcc As ComponentOccurrence In Occurrences\n\t\t", "If oOcc.ReferencedDocumentDescriptor Is Nothing Then Continue For\n\t\tIf oOcc.ReferencedDocumentDescriptor.ReferenceMissing Then Continue For", "\n\t\tIf oOcc.ReferencedDocumentDescriptor.ReferencedDocument.IsModifiable = True Then\n\t\tIf Level = 1 Then\n\t\t\toParent_ofParent = \"Not Applicable\"\n\t\t\toParent_ofParent_atL3 = \"This Document\"\n\t        If oOcc.DefinitionDocumentType = kPartDocumentObject Then \n\t        Else If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n\t\t\t\toParent_ofParent_atL3 = oOcc.Name\n\t\t\tCall TraverseAssembly(oOcc.SubOccurrences, Level+1, j+1, oParent_ofParent_atL3, oParent_ofParent_atL4, oParent_ofParent_atL5, oLevel_Request) \n\t\t\tEnd If \n\t\tEnd If\n\t\tIf Level = 2 Then 'oParent_ofParent_atL3 Processing\n\t\t\toParent_ofParent = \"This Document\"\t\t'for Level 2 only\n\t        If oOcc.DefinitionDocumentType = kPartDocumentObject Then \n\t\t  \tElse If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n\t\t\t\toParent_ofParent_atL4 =  oOcc.Name\n\t\t\tCall TraverseAssembly(oOcc.SubOccurrences, Level+1, j+1, oParent_ofParent_atL3, oParent_ofParent_atL4, oParent_ofParent_atL5, oLevel_Request) \n\t\t\tEnd If \n\t\tEnd If \n\t\tIf Level = 3 Then\n\t\t\toParent_ofParent = oParent_ofParent_atL3\t\t'for Level 2 only\n\t        If oOcc.DefinitionDocumentType = kPartDocumentObject Then \n\t        Else If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n\t\t\t\toParent_ofParent_atL5 =  oOcc.Name\n\t\t\t\tCall TraverseAssembly(oOcc.SubOccurrences, Level+1, j+1, oParent_ofParent_atL3, oParent_ofParent_atL4, oParent_ofParent_atL5, oLevel_Request) \n\t\t\tEnd If \n\t\tEnd If \n\t\tIf Level = 4 Then\n\t\t\toParent_ofParent = oParent_ofParent_atL4\n\t        If oOcc.DefinitionDocumentType = kPartDocumentObject Then \n\t        Else If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n\t\t\t\toParent_ofParent_atL6 =  oOcc.Name\n\t\t\t\tCall TraverseAssembly(oOcc.SubOccurrences, Level+1, j+1, oParent_ofParent_atL3, oParent_ofParent_atL4, oParent_ofParent_atL5, oLevel_Request) \n\t\t\tEnd If \n\t\tEnd If \n\t\tIf Level = 5 Then\n\t\t\toParent_ofParent = oParent_ofParent_atL5\n\t        If oOcc.DefinitionDocumentType = kPartDocumentObject Then \n\t        Else If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n\t\t\t\toParent_ofParent_atL7 =  oOcc.Name\n\t\t\tCall TraverseAssembly(oOcc.SubOccurrences, Level+1, j+1, oParent_ofParent_atL3, oParent_ofParent_atL4, oParent_ofParent_atL5, oLevel_Request) \n\t\t\tEnd If \n\t\tEnd If \n\t\t\n\toOccFFN_cw_EXT = oOcc.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\t'cw file extension\t\n\toOccLFN_cwExt = oFnOccc_LocalName_WExt(iL_NO, oOccFFN_cw_EXT)\n\toOcc_BOM_Structure = oFn_BOM_Structure_Occ(iL_NO, oOcc)\n'\toParent = oOcc.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\n\tTry\n\t\tDim oParentocc As ComponentOccurrence\n\t\toParentocc = oOcc.ParentOccurrence\n\t\toParent_BOM_Structure = oFn_BOM_Structure_Occ(\"\",oParentocc)\n\t\t\n\t\tdocFile = oParentocc.Definition.Document\n\t    oParentFFN = System.IO.Path.GetFileNameWithoutExtension(docFile.FullFileName)\n\t    oParent = System.IO.Path.GetFileName(docFile.FullFileName)\n\tCatch\n\t\toParentFFN = System.IO.Path.GetFileNameWithoutExtension(oOcc.Parent.Document.DisplayName)\n\t\toParent = System.IO.Path.GetFileName(oOcc.Parent.Document.DisplayName)\n\tEnd Try\n\n\tIf Level = 1 Then oParent_BOM_Structure = oFn_OccLevel1_BomStructure()\n'\tIf Level = oLevel_Request Then\t\t\n\t\toData_X = oParent_ofParent & \" $ \" & oAssy_to_Next & \"$\" & oParent_BOM_Structure & \" $ \" & oParent & \" $ \" & oOcc.Name & \" $ \" & \"Level-\" & Level & \" $ \" & oOcc_BOM_Structure\t\n'\t\toData_X = oParent & \"$\" & oOcc.Name & \"$\" & \"Level-\" & Level & \"$\" & oOcc_BOM_Structure\n'\t\toData_X = oOccLFN_cwExt & \"$\" & oOccFFN_cw_EXT & \"$\" & oOcc_BOM_Structure & \" \" & oParent & \"$\" & oOcc.Name & \"$\" & \"Level-\" & Level\n\t\toWrite_Data(oTextSave, oData_X)\n\tEnd If\n'\tEnd If\n\tNext oOcc\n\nEnd Sub\n\nFunction oFnOccc_LocalName_WExt(iL_NO As String, oOccFFN_cw_EXT As String)\n\toName_Sub = \"oFnOccc_LocalName_WExt\"\n\toTitle = iL_NO & \" $ SUB: \" & oName_Sub\n\toPos = Len(oOccFFN_cw_EXT) - InStrRev(oOccFFN_cw_EXT, \"\\\", -1)\n\toName_Local_cw_Ext = Right(oOccFFN_cw_EXT, oPos)\n\tReturn oName_Local_cw_Ext 'Local file name complete with extension\n\tEnd Function\n\nFunction oFn_BOM_Structure_Occ(iL_NO As String, oCompOcc As ComponentOccurrence)\n\toName_Sub = \"oOcc_BOM_Structure\"\n\toTitle = iL_NO & \" $ SUB: \" & oName_Sub\n'\tDim oOccurrence As ComponentOccurrence\n\tBOM_X = oCompOcc.BOMStructure 'oCompOcc.Definition.BOMStructure\n\tIf BOM_X = BOMStructureEnum.kDefaultBOMStructure Then oOcc_BOM_Structure = \"Default\"\n\tIf BOM_X = BOMStructureEnum.kNormalBOMStructure Then oOcc_BOM_Structure = \"Normal\"\n\tIf BOM_X = BOMStructureEnum.kReferenceBOMStructure Then oOcc_BOM_Structure = \"Reference\" \n\tIf BOM_X = BOMStructureEnum.kPhantomBOMStructure Then oOcc_BOM_Structure = \"Phantom\"\n\tIf BOM_X = BOMStructureEnum.kPurchasedBOMStructure  Then oOcc_BOM_Structure = \"Purchased\"\n\tIf BOM_X = BOMStructureEnum.kInseparableBOMStructure  Then oOcc_BOM_Structure = \"Inseparable\"\n\tIf BOM_X = BOMStructureEnum.kVariesBOMStructure Then oOcc_BOM_Structure = \"Varies\" \n\t'oOcc_BOM_Structure = oFnOccc_LocalName_WExt(iL_NO, oFFN_X) & \" <- \" & oOcc_BOM_Structure & \"(BOM STATUS: Default)\"\n\tDim BOM_Structure_Return As String = oOcc_BOM_Structure\n\tReturn BOM_Structure_Return\nEnd Function\n\t\n'Process.Start(\"Notepad.exe\", oTextSave)\t\nSub oWrite_Data(oTextSave As String, oData As String)\n\toWrite = System.IO.File.AppendText(oTextSave)\n\toWrite.WriteLine(oData)\t\n\toWrite.Flush()\n\toWrite.Close\nEnd Sub\n\n\nFunction oFn_OccLevel1_BomStructure()\n\tDim doc = ThisDoc.Document\n\toBOM = doc.ComponentDefinition.BOMStructure\n\tIf oBOM = BOMStructureEnum.kDefaultBOMStructure Then oOcc_BOM_Structure = \"Default\"\n\tIf oBOM = BOMStructureEnum.kNormalBOMStructure Then oOcc_BOM_Structure = \"Normal\"\n\tIf oBOM = BOMStructureEnum.kReferenceBOMStructure Then oOcc_BOM_Structure = \"Reference\" \n\tIf oBOM = BOMStructureEnum.kPhantomBOMStructure Then oOcc_BOM_Structure = \"Phantom\"\n\tIf oBOM = BOMStructureEnum.kPurchasedBOMStructure  Then oOcc_BOM_Structure = \"Purchased\"\n\tIf oBOM = BOMStructureEnum.kInseparableBOMStructure  Then oOcc_BOM_Structure = \"Inseparable\"\n\tIf oBOM = BOMStructureEnum.kVariesBOMStructure Then oOcc_BOM_Structure = \"Varies\" \n\tDim BOM_Structure_Return As String = oOcc_BOM_Structure\n\tReturn BOM_Structure_Return\nEnd Function\n\nSub oDelete_ex_Notepad(oTextSave As String)\t\t'To delete oTextSave if existing.\n \tIf System.IO.File.Exists(oTextSave) = True Then\n   \tSystem.IO.File.Delete(oTextSave)\n\tEnd If\nEnd Sub\n\nEnd Class"], "author": "AlexFielder"},
{"created at": ["\u200e02-27-2019 02:25 AM"], "solution Title": "\n                        Re: Using iLogic to Create New Sheet and place views\n                    ", "solution": ["Sub", " ", "main", "()\n\t ", "add_Sheet", "\n\t", "add_view", "\n\t", "End", " ", "Sub", "\n\t\n", "Sub", " ", "add_Sheet", "\n", "Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " = ", "oDoc", ".", "Sheets", "(1)\n", "oSheet", ".", "Activate", "\n\n", "Dim", " ", "oCommandMgr", " ", "As", " ", "CommandManager", " \n", "oCommandMgr", " = ", "ThisApplication", ".", "CommandManager", " \n\n", "' Get control definition for the line command. ", "\n", "Dim", " ", "oControlDef", " ", "As", " ", "ControlDefinition", " \n ", "oControlDef", " = ", "oCommandMgr", ".", "ControlDefinitions", ".", "Item", "(", "\"DrawingNewSheetCtxCmd\"", ")  \n", "' Execute the command. ", "\n", "Try", "\n", "oControlDef", ".", "Execute", "\n", "Dim", " ", "oSheet2", " ", "As", " ", "Sheet", " \n", "oSheet2", " = ", "ThisDoc", ".", "Document", ".", "ActiveSheet", "\n", "oSheet2", ".", "Name", " =", "\"Sheet\"", "\n", "oSheet2", ".", "ExcludeFromPrinting", " = ", "False", "\n", "oSheet2", ".", "ExcludeFromCount", " = ", "False", "\n", "oSheet2", ".", "Activate", "\n", "Catch", "\n", "End", " ", "Try", "\n", "End", " ", "Sub", "\n\n", "Sub", " ", "add_view", "\n", "Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " = ", "oDoc", ".", "ActiveSheet", "\n", "Dim", " ", "oView", " ", "As", " ", "DrawingView", "\n\n", "Dim", " ", "oCommandMgr", " ", "As", " ", "CommandManager", " \n", "oCommandMgr", " = ", "ThisApplication", ".", "CommandManager", " \n\n", "' Get control definition for the line command. ", "\n", "Dim", " ", "oControlDef", " ", "As", " ", "ControlDefinition", " \n ", "oControlDef", " = ", "oCommandMgr", ".", "ControlDefinitions", ".", "Item", "(", "\"DrawingBaseViewCmd\"", ")  \n ", "oControlDef", ".", "Execute2", "(", "True", ")\n \n ", "'Retrieve Dimensions", "\n", "For", " ", "Each", " ", "oView", " ", "In", " ", "oDoc", ".", "ActiveSheet", ".", "DrawingViews", "\n\t", "Dim", " ", "oGeneralDimensionsEnum", " ", "As", " ", "GeneralDimensionsEnumerator", "\n\t", "oGeneralDimensionsEnum", " = ", "oSheet", ".", "DrawingDimensions", ".", "GeneralDimensions", ".", "Retrieve", "(", "oView", ")\n ", "Next", "\n \n ", "'Center Dimensions", "\n", "Dim", " ", "oDrawingDim", " ", "As", " ", "DrawingDimension", "\n", "' Iterate over all dimensions in the drawing and", "\n", "' center them if they are linear or angular.", "\n", "For", " ", "Each", " ", "oDrawingDim", " ", "In", " ", "oSheet", ".", "DrawingDimensions", "\n    ", "If", " ", "TypeOf", " ", "oDrawingDim", " ", "Is", " ", "LinearGeneralDimension", " ", "Or", " _\n       ", "TypeOf", " ", "oDrawingDim", " ", "Is", " ", "AngularGeneralDimension", " ", "Then", "\n        ", "Call", " ", "oDrawingDim", ".", "CenterText", "\n    ", "End", " ", "If", "\n", "Next", "\n ", "End", " ", "Sub"], "author": "yuvilo_"},
{"created at": ["\u200e03-06-2019 02:26 PM"], "solution Title": "\n                        Re: Move trigger rule :HELP:\n                    ", "solution": ["Dim", " ", "oFileDlg", " ", "As", " ", "Inventor", ".", "FileDialog", " = ", "Nothing", "\n", "InventorVb", ".", "Application", ".", "CreateFileDialog", "(", "oFileDlg", ")\n", "oFileDlg", ".", "Filter", " = ", "\"Inventor Files (*.idw)|*.idw\"", "\n", "oFileDlg", ".", "DialogTitle", " = ", "\"Delete Ilogic Rule in drawing\"", "\n", "oFileDlg", ".", "InitialDirectory", " = ", "ThisDoc", ".", "Path", "\n", "oFileDlg", ".", "MultiSelectEnabled", " =", "True", " \n", "oFileDlg", ".", "FilterIndex", " = 1\n", "oFileDlg", ".", "CancelError", " = ", "True", "\n", "On", " ", "Error", " ", "Resume", " ", "Next", "\n", "oFileDlg", ".", "ShowOpen", "()\n", "If", " ", "Err", ".", "Number", " <> 0 ", "Then", "\n\t", "MessageBox", ".", "Show", "(", "\"File not chosen.\"", ", ", "\"Dialog Cancellation\"", ")\n", "ElseIf", " ", "oFileDlg", ".", "FileName", " <> ", "\"\"", " ", "Then", "\n\t\t\n\t", "Dim", " ", "Separators", "() ", "As", " ", "Char", " = {", "\"|\"", "} \n\t", "Sentence", " = ", "oFileDlg", ".", "FileName", "\n\t", "Words", " = ", "Sentence", ".", "Split", "(", "Separators", ")\n\t", "Dim", " ", "i", " ", "As", " ", "Integer", " = 0\n\t", "For", " ", "Each", " ", "wrd", " ", "In", " ", "Words", "\n\t", "Dim", " ", "odoc", " ", "As", " ", "Document", "\n\t", "odoc", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "wrd", ", ", "False", ")\n\t\n\t", "Auto", " = ", "iLogicVb", ".", "Automation", "\n\t", "Dim", " ", "iLogicAuto", " ", "As", " ", "Object", "\n\t", "iLogicAuto", " = ", "Auto", "\n\t", "Dim", " ", "RuleColl", " ", "As", " ", "ObjectCollection", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateObjectCollection", "\n\t", "Dim", " ", "ruleName", " ", "As", " ", "String", "\n\t", "Dim", " ", "rules", " ", "As", " ", "Object", " = ", "iLogicAuto", ".", "rules", "(", "odoc", ")\n\t", "If", " ", "Not", " (", "rules", " ", "Is", " ", "Nothing", ") ", "Then", "\n\t    ", "For", " ", "Each", " ", "rule", " ", "In", " ", "rules", "\n\t        ", "RuleColl", ".", "Add", "(", "rule", ")\n\t    ", "Next", "\n\t", "End", " ", "If", "\n\n\t", "For", " ", "i", " = ", "RuleColl", ".", "Count", " ", "To", " 1 ", "Step", " -1\n\t    ", "Name", " = ", "RuleColl", ".", "Item", "(", "i", ").", "Name", "\n\t\t", "iLogicAuto", ".", "DeleteRule", "(", "odoc", ", ", "Name", ")\n\t", "Next", "\n\t\n\t", "odoc", ".", "Save", "\n\t", "odoc", ".", "Close", "\n\t", "i", " += 1\n\t", "Next", "\n\t\n", "End", " ", "If", "Dim", " ", "DeleteRuleName", " ", "As", " ", "String", " = ", "\"Rule0\"", " ", "'Name of ilogic rule to delete", "\n\n", "Dim", " ", "oFileDlg", " ", "As", " ", "Inventor", ".", "FileDialog", " = ", "Nothing", "\n", "InventorVb", ".", "Application", ".", "CreateFileDialog", "(", "oFileDlg", ")\n", "oFileDlg", ".", "Filter", " = ", "\"Inventor Files (*.idw)|*.idw\"", "\n", "oFileDlg", ".", "DialogTitle", " = ", "\"Delete Ilogic Rule in drawing\"", "\n", "oFileDlg", ".", "InitialDirectory", " = ", "ThisDoc", ".", "Path", "\n", "oFileDlg", ".", "MultiSelectEnabled", " =", "True", " \n", "oFileDlg", ".", "FilterIndex", " = 1\n", "oFileDlg", ".", "CancelError", " = ", "True", "\n", "On", " ", "Error", " ", "Resume", " ", "Next", "\n", "oFileDlg", ".", "ShowOpen", "()\n", "If", " ", "Err", ".", "Number", " <> 0 ", "Then", "\n\t", "MessageBox", ".", "Show", "(", "\"File not chosen.\"", ", ", "\"Dialog Cancellation\"", ")\n", "ElseIf", " ", "oFileDlg", ".", "FileName", " <> ", "\"\"", " ", "Then", "\n\t\t\n\t", "Dim", " ", "Separators", "() ", "As", " ", "Char", " = {", "\"|\"", "} \n\t", "Sentence", " = ", "oFileDlg", ".", "FileName", "\n\t", "Words", " = ", "Sentence", ".", "Split", "(", "Separators", ")\n\t", "Dim", " ", "i", " ", "As", " ", "Integer", " = 0\n\t", "For", " ", "Each", " ", "wrd", " ", "In", " ", "Words", "\n\t", "Dim", " ", "odoc", " ", "As", " ", "Document", "\n\t", "odoc", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "wrd", ", ", "False", ")\n\n\t", "Auto", " = ", "iLogicVb", ".", "Automation", "\n\t", "Dim", " ", "iLogicAuto", " ", "As", " ", "Object", "\n\t", "iLogicAuto", " = ", "Auto", "\n\t", "iLogicAuto", ".", "DeleteRule", "(", "odoc", ",", "DeleteRuleName", ")\n\n\t", "odoc", ".", "Save", "\n\t", "odoc", ".", "Close", "\n\t", "i", " += 1\n\t", "Next", "\n\t\n", "End", " ", "If"], "author": "yuvilo_"},
{"created at": ["\u200e03-13-2019 02:12 AM"], "solution Title": "\n                        Re: Hoe to display the tumbnail of template with \"Create In-Place Component\n                    ", "solution": [], "author": "Olsndot"},
{"created at": ["\u200e03-07-2019 10:40 AM"], "solution Title": "\n                        Re: Inventor 2018, Visual Studio 2015 vc++ 140, plugin loads and unloads\n                    ", "solution": [], "author": "Geoffrey.Bixby"},
{"created at": ["\u200e03-08-2019 12:21 AM"], "solution Title": "\n                        Re: Creating iLogic for empty fields in prompted entry\n                    ", "solution": [], "author": "yuvilo_"},
{"created at": [], "solution Title": "\n                        Re: Problem with addin.Automation\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": ["\u200e03-07-2019 11:01 PM"], "solution Title": "\n                        Re: Problem with iLogic trigger\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": ["\u200e03-07-2019 02:10 AM"], "solution Title": "\n                        Re: Combine VB.Net Add-in with VBA code/macro's\n                    ", "solution": ["Imports System.Runtime.InteropServices\nImports System\nImports System.Diagnostics\nImports Inventor\n\nPublic Class Form1\n    Public Myinv As Inventor.Application\n    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n        Myinv = GetObject(, \"Inventor.application\")\n\n    End Sub\n\n    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n        OpenFileDialog1.Filter = \"Inventor Part Files (*.ipt)|*.ipt\"\n\n        OpenFileDialog1.ShowDialog()\n        MsgBox(OpenFileDialog1.FileName)\n\n        Dim filename As String\n        filename = OpenFileDialog1.FileName\n\n        Dim oDoc As PartDocument = Myinv.Documents.Open(filename, True)\n        MsgBox(oDoc.FullFileName)\n        Dim invVBA As InventorVBAMember\n\n        Try\n            invVBA = Myinv.VBAProjects.Item(1).InventorVBAComponents.Item(\"Module02\").InventorVBAMembers(\"OnSave\")\n\n            invVBA.Execute()\n        Catch ex As Exception\n\n        End Try\n\n    End Sub\nEnd Class"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Checking if a part exists in a folder.\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Inventor Add-in Only Working While Debugging In VS\n                    ", "solution": [], "author": "erifre"},
{"created at": [], "solution Title": "\n                        Re: Sheet size not displaying\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Call iLogic from .NET c# (Inventor 2018)\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Adding tabs to clearance.xls\n                    ", "solution": [], "author": "rhenstenburg"},
{"created at": [], "solution Title": "\n                        Re: Export PDF with file name equal to custom properties from 3D\n                    ", "solution": ["'Getting 3D model document\ndoc = ThisDrawing.ModelDocument\n\nDim item As String  \nDim rev As String \n\nDim oPropsets As PropertySets\noProptSets = doc.PropertySets.Item(\"User Defined Properties\") \n\nDim oProp As Inventor.Property  \n\nFor Each oProp In oProptSets\t \n\tIf oProp.Name = \"Item_no\" Then\n\t\titem = oProp.Value \n\tElseIf oProp.Name = \"Revision\" Then\n\t\trev = oProp.Value \n\tEnd If  \nNext\n \nDim pdf_name As String \npdf_name =  ThisDoc.Path + \"\\\" + item + \"-\" + rev + \".pdf\"\nMessageBox.Show(pdf_name, \"Title\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Betreff: VBA (Inventor 2018) - Coloring a feature or the resulting surfaces\n                    ", "solution": [], "author": "fullevent"},
{"created at": [], "solution Title": "\n                        Re: Custom display name (with spaces) for VBA macro button in ribbon\n                    ", "solution": [], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: iLogic for Part & Assembly Cost Calculations\n                    ", "solution": ["Dim Unit_Trade As String = iProperties.Value(\"Custom\", \"Unit_Trade\")\n'MessageBox.Show(\"Unit_Trade = \" & Unit_Trade, \"Title\")\nDim Unit_Trade_Num As Double = Val(Replace(Unit_Trade,\"$\",\"\")) 'Val returned '0' if preceded by '$' \n'MessageBox.Show(\"Unit_Trade_Num = \" & Unit_Trade_Num, \"Title\")\nDim Discount As String = iProperties.Value(\"Custom\", \"Discount\") 'discount is enter as '20%' \nDim Discount_Num As Double = Val(Discount) / 100 'val returns '20' not '.20' as we need for a percent\nDim Unit_Buy As Double = Unit_Trade_Num * Discount_Num\niProperties.Value(\"Custom\", \"Unit_Buy\") = Unit_Buy\n'MessageBox.Show(\"Unit_Buy = \" & iProperties.Value(\"Custom\", \"Unit_Buy\"), \"Title\")\n"], "author": "clutsa"},
{"created at": ["\u200e03-18-2019 12:28 PM"], "solution Title": "\n                        Re: iterate through the parts in an assembly and create a CUSTOM property in eac\n                    ", "solution": ["Dim", " ", "doc", " = ", "ThisDoc", ".", "Document", "\n\n", "Dim", " ", "oAssyDef", " ", "As", "   ", "AssemblyComponentDefinition", "  \n", "oAssyDef", " = ", "doc", ".", "componentdefinition", "\n\n", "Dim", " ", "oBOM", " ", "As", " ", "BOM", " = ", "oAssyDef", ".", "BOM", "\n", "Dim", " ", "CustomProp", " ", "As", " ", "String", " = ", "\"ItemNo\"", "\n", "Dim", " ", "invCustProp", " ", "As", " ", "Inventor", ".", "Property", "\n", "Dim", " ", "oBOMView", " ", "As", " ", "BOMView", " = ", "oBOM", ".", "BOMViews", ".", "Item", "(", "\"Structured\"", ")\n", "Dim", " ", "oBOMRow", " ", "As", " ", "BOMRow", "\n", "'Comment out this line since it is for get custom property of assembly document\n", "'customPropertySet = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\")", "\n", "Dim", " ", "customPropertySet", "  ", "As", "  ", "PropertySet", "\n", "oBOM", ".", "PartsOnlyViewEnabled", " = ", "True", "\n\n", "'Traverse the parts list ", "\n", "For", " ", "Each", " ", "oBOMRow", " ", "In", " ", "oBOMView", ".", "BOMRows", "\n    ", "'Set a reference to the primary ComponentDefinition of the row", "\n    ", "Dim", " ", "oCompDef", " ", "As", " ", "ComponentDefinition", "\n    ", "oCompDef", " = ", "oBOMRow", ".", "ComponentDefinitions", ".", "Item", "(1)\n    \n\t", "'Get customPropertySet of the occurrence", "\n\t", "customPropertySet", " = ", "oCompDef", ".", "Document", ".", "PropertySets", ".", "Item", "(", "\"Inventor User Defined Properties\"", ")", "\n\t\n    ", "Dim", " ", "CompFullDocumentName", " ", "As", " ", "String", " = ", "oCompDef", ".", "Document", ".", "FullDocumentName", "\n    ", "Dim", " ", "CompFileNameOnly", " ", "As", " ", "String", "\n    ", "Dim", " ", "index", " ", "As", " ", "Integer", " = ", "CompFullDocumentName", ".", "LastIndexOf", "(", "\"\\\"", ")\n    \n    ", "CompFileNameOnly", " = ", "CompFullDocumentName", ".", "Substring", "(", "index", "+1)\n\t", "MessageBox", ".", "Show", "(", "\"The part you want is \"", " & ", "CompFileNameOnly", ", ", "\"YES!!!\"", ")\n\t\t\n    ", "Dim", " ", "Itm", " ", "As", " ", "String", "\n    ", "Itm", " = ", "oBOMRow", ".", "ItemNumber", "()\n\t\n \t", "'This is the part that is causing me all of my problems", "\n    ", "Try", "\n    \t", "invCustProp", " =  ", "customPropertySet", ".", "Item", "(", "CustomProp", ")", "\n\t\t", "MessageBox", ".", "Show", "(", "\"ItemNo exists\"", ", ", "\"NOT ADDED!!!\"", ") ", "'More Feedback", "\n    ", "Catch", "\n\t\t", "customPropertySet", ".", "Add", "(", "CompFileNameOnly", ", ", "CustomProp", ")", "\n\t\t", "invCustProp", " = ", "customPropertySet", ".", "Item", "(", "CustomProp", ")\n\t\t", "MessageBox", ".", "Show", "(", "\"ItemNo Added\"", ", ", "\"YES!!!\"", ") ", "'More Feedback", "\n    ", "End", " ", "Try", "\n\t\n    ", "'The routine stops here saying 'ItemNo' not found", "\n    ", "If", " ", "iProperties", ".", "Value", "(", "CompFileNameOnly", ", ", "\"Custom\"", ", ", "\"ItemNo\"", ") <> ", "Itm", " ", "Then", "  ", "'Writes the item number to ItemNo custom property", "\n\t", "iProperties", ".", "Value", "(", "CompFileNameOnly", ", ", "\"Custom\"", ", ", "\"ItemNo\"", ") = ", "Itm", "\n    ", "End", " ", "If", "\n", "Next", "'This rule analyses the parts list of a fabrication and pushes the part number back to the part file\n\ndoc = ThisDoc.Document\nDim oAssyDef As AssemblyComponentDefinition = doc.ComponentDefinition\nDim oBOM As BOM = oAssyDef.BOM\nDim CustomProp As String = \"ItemNo\"\nDim invCustProp As Inventor.Property\nDim oBOMView As BOMView = oBOM.BOMViews.Item(\"Structured\")\nDim oBOMRow As BOMRow\n\ncustomPropertySet = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\")\noBOM.PartsOnlyViewEnabled = True\n\n'Traverse the parts list \nFor Each oBOMRow In oBOMView.BOMRows\n    'Set a reference to the primary ComponentDefinition of the row\n    Dim oDoc As Document \n    oDoc = oBOMRow.ComponentDefinitions.Item(1).Document \n     \n    Dim CompFullDocumentName As String = oCompDef.Document.FullDocumentName\n    Dim CompFileNameOnly As String\n    Dim index As Integer = CompFullDocumentName.lastindexof(\"\\\")\n    \n    CompFileNameOnly = CompFullDocumentName.substring(index+1)\n\tMessageBox.Show(\"The part you want is \" & CompFileNameOnly, \"YES!!!\")\n\t\t\n    Dim Itm As String\n    Itm = oBOMRow.ItemNumber()\n\t\n    'This is the part that is causing me all of my problems\n    Try\n\t\tinvCustProp = oDoc.PropertySets.Item(\"User Defined Properties\").Item(CustomProp) \n\t\tMessageBox.Show(\"ItemNo exists\", \"NOT ADDED!!!\") 'More Feedback\n    Catch \n\t\tinvCustProp = oDoc.PropertySets.Item(\"User Defined Properties\").Add(\"\", CustomProp) \n\t\tMessageBox.Show(\"ItemNo Added\", \"YES!!!\") 'More Feedback\n    End Try\t \n\t\n    'The routine stops here saying 'ItemNo' not found\n    If invCustProp.Value <> Itm Then  'Writes the item number to ItemNo custom property\n\t\tinvCustProp.Value = Itm\n    End If\nNext", "Sub Main GetPartOccurrences()\n\n' Get the active assembly.\nDim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument\n\n' Get the assembly component definition.\nDim oAsmDef As AssemblyComponentDefinition\noAsmDef = oAsmDoc.ComponentDefinition\n\n' Get all of the leaf occurrences of the assembly.\nDim oLeafOccs As ComponentOccurrencesEnumerator\noLeafOccs = oAsmDef.Occurrences.AllLeafOccurrences\n\n' Iterate through the occurrences and print the name.\nDim oOcc As ComponentOccurrence\n\n", "' Get the selected item document occurrence name\n'I moved this outside of the For Next Loop so you're not declaring it for every item ", "Dim oBrowserNode As String", "\n", "'Declare variable for mass of copper item\nDim ItemMass As Double\n\n'Declare variable for total mass of copper items\nDim TotalMass As Double", "\n\nFor Each oOcc In oLeafOccs\n\t\n\toBrowserNode = oOcc.Name\n\n\tTry\n\t\t'push the required iProperties down to the occurrences.\n\t\tIf iProperties.MaterialOfComponent(oBrowserNode) = \"Copper\" Then\n\n\t\t\t'MessageBox.Show(\"Copper\", \"Copper\")\n\n\t\t\t", "'This is a more robust way of using oOcc.MassProperties.Mass", "\n\t\t\t", "ItemMass = oOcc.MassProperties.Mass ", "\n\t\t\t\n\t\t\tiProperties.Value(oBrowserNode, \"Custom\", \"CopperMass\") = ", "ItemMass", "\n\t\t\t'", "This is the line which adds the masses together until the end of the items", "\n\t\t\t", "TotalMass += ItemMass", "\n\t\t\t\n\t\t\t'Else iProperties.Value(oBrowserNode, \"Custom\", \"CopperMass\") = \"This isn't Copper\"\n\n\t\tEnd If\n\n\tCatch 'Do Nothing\n\n\tEnd Try\n\nNext\n\n", "'The message box I mentioned earlier to display TotalMass\nMessageBox.Show(\"Total Mass = \" & TotalMass, \"Mass\")", "\n\nEnd Sub"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Modify part iProperty using Document instead of Occurrence\n                    ", "solution": ["Class iProperties2\n\tPublic Shared Property Value(Doc As Inventor.Document,setName As String,propertyName As String) As Object\n\t\tGet\n\t\t\tReturn Prop(Doc,setName,propertyName,Nothing).Value\n\t\tEnd Get\n\t\tSet(Value As Object)\n\t\t\tDim oProp As Inventor.Property = Prop(Doc,setName,propertyName,Value)\n\t\t\tIf oProp IsNot Nothing Then oProp.Value = Value\n\t\tEnd Set\n\tEnd Property\n\t\n\tPrivate Shared Function Prop(Doc As Inventor.Document,setName As String,propertyName As String,MissingSetVal As Object) As Inventor.Property\n\t\tIf setName = \"Custom\" Then\n\t\t\tTry\n\t\t\t\tReturn Doc.PropertySets(\"Inventor User Defined Properties\")(propertyName)\n\t\t\tCatch\n\t\t\t\tIf MissingSetVal Is Nothing Then\n\t\t\t\t\tReturn Doc.PropertySets(\"Inventor User Defined Properties\").Add(\"\",propertyName)\n\t\t\t\tElse\n\t\t\t\t\tDoc.PropertySets(\"Inventor User Defined Properties\").Add(MissingSetVal,propertyName)\n\t\t\t\t\tReturn Nothing\n\t\t\t\tEnd If\n\t\t\tEnd Try\n\t\tElse\n\t\t\tTry\n\t\t\t\tReturn Doc.PropertySets(\"Design Tracking Properties\")(propertyName)\n\t\t\tCatch\n\t\t\t\tTry\n\t\t\t\t\tReturn Doc.PropertySets(\"Inventor Summary Information\")(propertyName)\n\t\t\t\tCatch\n\t\t\t\t\tReturn Doc.PropertySets(\"Inventor Document Summary Information\")(propertyName)\n\t\t\t\tEnd Try\n\t\t\tEnd Try\n\t\tEnd If\n\tEnd Function\nEnd Class", "iProperties2.Value(oDoc,\"Project\",\"Part Number\") = \"xxx\"\n\nMsgBox(iProperties2.Value(oDoc,\"Custom\",\"MyProp\"))"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Activate \"Home\" tab, or switch to \"ZeroDoc\" state, via A\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: How to get Axis info, Axis ID by Inventor API?\n                    ", "solution": ["// Add Mate constraint in ", "Assembly", "\noAsmCompDef.Constraints.AddMateConstraint(face1, face2, 0, InferredTypeEnum.kInferredLine, InferredTypeEnum.kInferredLine);\n\n// Add iMate constraint in ", "Part", "\noPrtCompDef.iMateDefinitions.AddMateiMateDefinition(face, 0, InferredTypeEnum.kInferredLine);"], "author": "minh.hn"},
{"created at": [], "solution Title": "\n                        Re: Change Design View Representation To Sub-Sub component\n                    ", "solution": ["Class ThisRule\n\tSub Main()\n\tDim oDoc As AssemblyDocument = ThisDoc.Document\n\tDim oCompDef As AssemblyComponentDefinition = oDoc.ComponentDefinition\n\t\n\tDim oViewReps As DesignViewRepresentations = oCompDef.RepresentationsManager.DesignViewRepresentations\n\t\n\tDim viewExists As Boolean = False\n\tFor Each oRep As DesignViewRepresentation In oViewReps\n\t\tIf oRep.Name = \"NoGD\" Then\n\t\t\tviewExists = True\n\t\t\tExit For\n\t\tEnd If\n\tNext\n\t\n\tIf viewExists = False Then\n\t\tDim NoGDRep As DesignViewRepresentation = oViewReps.Add(\"NoGD\")\n\t\tNoGDRep.Activate\n\t\tDim oOcc As ComponentOccurrence\n\n\t\tFor i = 1 To QtyRuns\n\t\t\tFor j = 1 To Parameter(\"Run_\" & i, \"StepQty\")\n\t\t\tTry\n\t\t\toOcc = Component.InventorComponentInThisContext(GetArrayList(\"Run_\" & i & \".StairStep_\" & j & \".StepPlate\"))\n\t\t\toOcc.SetDesignViewRepresentation(\"NoGD\")\n\t\t\tCatch\n\t\t\tEnd Try\n\t\tNext\n\t\tNext\n\t\tNoGDRep.Locked = True\n\t\toViewReps.Item(\"Default\").Activate\n\t\tiLogicVb.UpdateWhenDone = True\n\tEnd If\n\t\n\n\tEnd Sub\nPublic Function GetArrayList(occPath As String) As ArrayList\n\t\tDim oArrayList As New ArrayList \n\t\tDim oItems() As String = occPath.Split(\".\")\n\t\tFor Each item In oItems\n\t\t\toArrayList.Add(item)\n\t\tNext\n\t\tReturn oArrayList\nEnd Function\nEnd Class"], "author": "jhoel.forshav"},
{"created at": [], "solution Title": "\n                        Re: How to insert dwg autocadblock on Inventor drawing using c#.net addins\n                    ", "solution": ["            For Each bd As AutoCADBlockDefinition In from.AutoCADBlockDefinitions\n                If bd.Name = tbName Then\n                    'now get the block\n                End If\n            Next", "{\n    AutoCADBlockDefinition tb;\n    string[] strArrayOfTags = new[] { \"ASBUILTDATREANDTIME\" };\n    string[] strArrayOfValues = new[] { \"25-Jan-419\" }; // btw what's with the 419?\n    tb.SetPromptTextValues(strArrayOfTags, strArrayOfValues);", "//or this, the all in one line method)\n    tb.SetPromptTextValues(new string[] { \"ASBUILTDATREANDTIME\" }, new string[] { \"25-Jan-419\" });\n}\n"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Inventor Studio VBA: Set render iterations or time from code.\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Checking to see if there is an active Pop up window/Error window?\n                    ", "solution": ["Try\n            For Each p In Process.GetProcesses\n\n                If p.ProcessName = \"YOUR PROCESS NAME\" Then\n\n                        p.Kill()\n                   \n                End If\n            Next\n        Catch ex As Exception\n\n        End Try\n"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Injection mold design in Inventor\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Create a list in Excel with the properties of all the sheets whit ilogic\n                    ", "solution": ["On\u00a0Error\u00a0Resume\u00a0Next\n\u00a0\nDim\u00a0oDoc\u00a0As\u00a0DrawingDocument\n\u00a0\noDoc\u00a0=\u00a0ThisApplication.ActiveDocument\n\u00a0\nDim\u00a0oSheetS\u00a0As\u00a0Sheets\n\u00a0\nDim\u00a0oPromptEntry As String \n\u00a0\n\u00a0\nDim\u00a0oALLSheet\n\u00a0\noCurrentSheet\u00a0=\u00a0oDoc.ActiveSheet.Name\n\u00a0\ni\u00a0= 1\n\u00a0\nFor\u00a0Each\u00a0oSheet\u00a0In\u00a0oDoc.Sheets\n\u00a0\n\u00a0\u00a0i\u00a0=\u00a0i+1\n\u00a0\n\u00a0\u00a0ThisApplication.ActiveDocument.Sheets.Item(i).Activate\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0oTitleBlock=oSheet.TitleBlock\n\u00a0\n\u00a0\u00a0\u00a0\u00a0oTextBoxes=oTitleBlock.Definition.Sketch.TextBoxes\n\u00a0\n\u00a0\u00a0\u00a0\u00a0For\u00a0Each\u00a0oTextBox\u00a0In\u00a0oTitleBlock.Definition.Sketch.TextBoxes\n\u00a0\n\u00a0\u00a0\u00a0\u00a0Select\u00a0oTextBox.Text\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Case\u00a0\"CONTIENE\"\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0oPromptEntry\u00a0 =\u00a0\u00a0oPromptEntry & oTextBox.GetResultText(oTextBox)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0End\u00a0Select\n\u00a0\n\u00a0\u00a0\u00a0\u00a0Next\n\u00a0\nNext\n\u00a0\n\u00a0\nxlsxPath\u00a0=\u00a0\"C:\\Users\\castellanos.andres\\Desktop\\Mass Properties.xlsx\"\nGoExcel.CellValue(xlsxPath,\u00a0\"Hoja1\",\u00a0\"A2:A25\")=oPromptEntry\nGoExcel.Save\nGoExcel.Close"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: remove a \"for each\" loop\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", " = ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "oSheets", " ", "As", " ", "Sheets", " = ", "oDoc", ".", "Sheets", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "Dim", " ", "indexLoc", " ", "As", " ", "Integer", "\n", "Dim", " ", "sFile", " ", "As", " ", "String", "\n\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oSheets", "\n", "'Get the file reference of the first drawing view", "\n", "sViewFileName", " = ", "oSheet", ".", "DrawingViews", "(1).", "ReferencedDocumentDescriptor", ".", "FullDocumentName", "\n\n", "'Get the file name from the file reference", "\n", "indexLoc", " = ", "sViewFileName", ".", "LastIndexOf", "(", "\"\\\"", ") \n", "sFile", " = ", "sViewFileName", ".", "Substring", "(", "indexLoc", " + 1, ", "sViewFileName", ".", "Length", " - ", "indexLoc", " - 1)\n", "'Return the iProperties of the referenced file", "\n\t", "Try", "\n\t\t", "iProp", " = ", "iProperties", ".", "Value", "(", "sFile", ", ", "\"Custom\"", ", ", "\"My_iProp\"", ")\n\t", "Catch", "\n\t\t", "MessageBox", ".", "Show", "(", "\"No iProperty Found\"", ", ", "\"Title\"", ")\n\t\t", "Exit", " ", "For", "\n\t", "End", " ", "Try", "\n", "Next"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: Modify hole note format 37x53 times\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: convert parts in assembly to dxf using ilogic\n                    ", "solution": ["Dim", " ", "oADoc", " ", "As", " ", "AssemblyDocument", "\n", "oADoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "comp", " ", "As", " ", "Object", "\n\n", "While", " ", "True", "\n\t", "'prompt user to select an occurrence", "\n\t", "comp", " = ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(\n\t\t", "SelectionFilterEnum", ".", "kAssemblyLeafOccurrenceFilter", ", \n\t\t", "\"Select a component\"", ") \n\t", "If", " ", "comp", " ", "Is", " ", "Nothing", " ", "Then", "\n\t\t", "MessageBox", ".", "Show", " (", "\"Selection was cancelled\"", ",", "\"ilogic\"", ")\n\t\t", "Beep", "\n\t\t", "Exit", " ", "While", "\n\t", "End", " ", "If", "\n\t\n\t", "oPartDoc", " = ", "comp", ".", "Definition", ".", "Document", "\n\t", "Try", "\n\t\t", "oPartDoc", ".", "SubType", " = ", "\"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\"", "\n\t", "Catch", "\n\t\t", "MessageBox", ".", "Show", "(", "\"Some error occurred, make sure it's not read-only or library item\"", ",", "\"error\"", ")\n\t", "End", " ", "Try", "\n\t", "'******************************************************************************************", "\n\t", "'Find the part File", "\n\t", "oPartFile", " = ", "oPartDoc", ".", "FullFileName", "\n\t", "'Define the document to edit", "\n\t", "Dim", " ", "oDoc", " ", "As", " ", "Document", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oPartFile", ")\n\t", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n\t", "oCompDef", " = ", "oDoc", ".", "ComponentDefinition", "\n\t", "'Select the face to use as the sheet metal Base", "\n\t\t", "CompFace", " = ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(\n\t\t", "SelectionFilterEnum", ".", "kPartFaceFilter", ", \n\t\t", "\"Select a face\"", ")\n\t\t", "oCompDef", ".", "Unfold2", "(", "CompFace", ") \n\t\t", "oCompDef", ".", "FlatPattern", ".", "ExitEdit", "\n\t\t", "'Save and close the document", "\n\t\t", "oDoc", ".", "Close", "(", "False", ")\n\t", "'******************************************************************************************", "\n", "End", " ", "While", "\n"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: External rule - Variable hides in an enclosing block - runs internally ok\n                    ", "solution": ["BE_PC = \"BE\"' deleted parameter\n\n\nDim oDrawDoc As DrawingDocument = ThisApplication.ActiveDocument\nDim oDrawParams As UserParameters = oDrawDoc.Parameters.UserParameters\n\n'oMyParameter = ThisApplication.ActiveDocument.ComponentDefinition.Parameters.UserParameters\n\nTry\n'Change value of param\nParameter(\"BE_PC\") = Parameter(\"BE_PC\")\nCatch\n'Create Param as it doesn't exist\nDim BE_PC_1 As UserParameter = oDrawParams.AddByValue(\"BE_PC\" , \"BE\", UnitsTypeEnum.kTextUnits)\nEnd Try \n\nMultiValue.SetList(\"BE_PC\", \"BE\", \"PC\")\nBE_PC =  \"BE\""], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ilogic Sketch Driven pattern\n                    ", "solution": ["Dim", " ", "oPD", " ", "As", " ", "PartDocument", "\n", "oPD", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oPCD", " ", "As", " ", "PartComponentDefinition", "\n", "oPCD", " = ", "oPD", ".", "ComponentDefinition", "\n\n", "Dim", " ", "oFeatures", " ", "As", " ", "PartFeatures", "   = ", "oPCD", ".", "Features", "\n", "'get the SketchDrivenPatternFeatures collection", "\n", "Dim", " ", "sdpfs", " ", "As", " ", "SketchDrivenPatternFeatures", " = ", "oFeatures", ".", "SketchDrivenPatternFeatures", "\n\n", "Dim", " ", "objCol", " ", "As", " ", "ObjectCollection", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateObjectCollection", "()\n", "objCol", ".", "Add", " (", "oFeatures", ".", "HoleFeatures", ".", "Item", "(", "\"Hole1\"", "))\n\n", "' create the definition that adds your sketch", "\n", "Dim", " ", "sdpd", " ", "As", " ", "SketchDrivenPatternDefinition", " = ", "sdpfs", ".", "CreateDefinition", "(", "objCol", ", ", "oPCD", ".", "Sketches", "(", "\"Sketch3\"", "))\n\n", "'finally add a new pattern with this new definition", "\n", "Dim", " ", "sdpf", " ", "As", " ", "SketchDrivenPatternFeature", " = ", "sdpfs", ".", "Add", "(", "sdpd", ")"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic update list of derived sketch blocks\n                    ", "solution": ["Sub", " ", "Main", "()\n\t", "Dim", " ", "oDerPart", " ", "As", " ", "PartDocument", "\n\t", "oDerPart", " = ", "ThisDoc", ".", "Document", "\n\t", "Dim", " ", "oDerPartComp", " ", "As", " ", "DerivedPartComponent", "\n\t", "oDerPartComp", " =", "oDerPart", ".", "ComponentDefinition", ".", "ReferenceComponents", ".", "DerivedPartComponents", "(1)\n\t", "Dim", " ", "oDerivedPartDef", " ", "As", " ", "DerivedPartUniformScaleDef", "\n\t", "oDerivedPartDef", " = ", "oDerPartComp", ".", "Definition", "\n\t", "Dim", " ", "oDerEntity", " ", "As", " ", "DerivedPartEntity", "\n\n\t", "For", " ", "Each", " ", "oDerEntity", " ", "In", " ", "oDerivedPartDef", ".", "SketchBlockDefinitions", "\n\t\t", "oDerEntity", ".", "IncludeEntity", " = ", "True", "\n\t", "Next", "\n\t", "'Set Definition back, so DerivedPart Document is updated", "\n\t", "oDerPartComp", ".", "Definition", " = ", "oDerivedPartDef", "\n", "End", " ", "Sub"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: Content Center \"OR\" Text\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Insert revision table using bottom left corner with iLogic?\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic to save file populated from iProperties\n                    ", "solution": [], "author": "GKPByDesign"},
{"created at": [], "solution Title": "\n                        Re: EAN 13 generator ilogic?\n                    ", "solution": ["Sub Main\n\tDim strBarcode As String = String.Empty\n\tDim invApp As Inventor.Application = ThisApplication\n\tDim invDoc As Inventor.Document = invApp.ActiveDocument\n\tDim txtBox As Inventor.TextBox = Nothing\n\tIf invDoc IsNot Nothing Then\n\t\tIf invDoc.SelectSet.Count > 0 Then\n\t\t\tFor Each ent As Object In invDoc.SelectSet\n\t\t\t\tIf TypeOf ent Is TextBox Then\n\t\t\t\t\ttxtBox = ent\n\t\t\t\t\tstrBarcode = txtBox.text\n\t\t\t\t\tDim strEAN13 As String = ean13(strBarcode)\n\t\t\t\t\tIf strEAN13 <> String.Empty Then\n\t\t\t\t\t\ttxtBox.FormattedText =  \"<StyleOverride Font='Code EAN13' FontSize='1' Bold='False' Underline='False'>\" & strEAN13 & \"</StyleOverride>\"\n\t\t\t\t\tEnd If\n\t\t\t\tEnd If\n\t\t\tNext\n\t\tEnd If\n\tEnd If\nEnd Sub\n\nPublic Function ean13(chain As String)\n\t'This function is governed by the GNU Lesser General Public License (GNU LGPL)\n\t'V 1.1.1\n\t'Parameters : a 12 digits length string\n\t'Return : * a string which give the bar code when it is dispayed with EAN13.TTF font\n\t'         * an empty string if the supplied parameter is no good\n\tDim tableA As Boolean\n\tDim checksum As Integer\n\tDim first As Integer\n\tDim BarCode As String = String.Empty\n\tDim i As Integer \n\t'Check for 12 characters\n\tIf Len(chain) = 12 Then\n\t\t'And they are really digits\n\t\tFor i = 1 To 12\n\t\t\tIf Asc(Mid(chain, i, 1)) < 48 Or Asc(Mid(chain, i, 1)) > 57 Then\n\t\t\t\ti = 0\n\t\t\t\tExit For\n\t\t\tEnd If\n\t\tNext\n\t\tIf i = 13 Then\n\t\t\t'Calculation of the checksum\n\t\t\tFor i = 12 To 1 Step -2\n\t\t\t\tchecksum = checksum + Val(Mid(chain, i, 1))\n\t\t\tNext\n\t\t\tchecksum = checksum * 3\n\t\t\tFor i = 11 To 1 Step -2\n\t\t\t\tchecksum = checksum + Val(Mid(chain, i, 1))\n\t\t\tNext\n\t\t\tchain = chain & (10 - checksum Mod 10) Mod 10\n\t\t\t'The first digit is taken just as it is, the second one come from table A\n\t\t\tBarCode = Left(chain, 1) & Chr(65 + Val(Mid(chain, 2, 1)))\n\t\t\tfirst = Val(Left(chain, 1))\n\t\t\tFor i = 3 To 7\n\t\t\t\ttableA = False\n\t\t\t\tSelect Case i\n\t\t\t\t\tCase 3\n\t\t\t\t\t\tSelect Case first\n\t\t\t\t\t\t\tCase 0 To 3\n\t\t\t\t\t\t\ttableA = True\n\t\t\t\t\t\tEnd Select\n\t\t\t\t\tCase 4\n\t\t\t\t\t\tSelect Case first\n\t\t\t\t\t\t\tCase 0, 4, 7, 8\n\t\t\t\t\t\t\t\ttableA = True\n\t\t\t\t\t\tEnd Select\n\t\t\t\t\tCase 5\n\t\t\t\t\t\tSelect Case first\n\t\t\t\t\t\t\tCase 0, 1, 4, 5, 9\n\t\t\t\t\t\t\t\ttableA = True\n\t\t\t\t\t\tEnd Select\n\t\t\t\t\tCase 6\n\t\t\t\t\t\tSelect Case first\n\t\t\t\t\t\t\tCase 0, 2, 5, 6, 7\n\t\t\t\t\t\t\t\ttableA = True\n\t\t\t\t\t\tEnd Select\n\t\t\t\t\tCase 7\n\t\t\t\t\t\tSelect Case first\n\t\t\t\t\t\t\tCase 0, 3, 6, 8, 9\n\t\t\t\t\t\t\t\ttableA = True\n\t\t\t\t\t\tEnd Select\n\t\t\t\tEnd Select\n\t\t\t\tIf tableA Then\n\t\t\t\t\tBarCode = BarCode & Chr(65 + Val(Mid(chain, i, 1)))\n\t\t\t\tElse\n\t\t\t\t\tBarCode = BarCode & Chr(75 + Val(Mid(chain, i, 1)))\n\t\t\t\tEnd If\n\t\t\tNext\n\t\t\tBarCode = BarCode & \"*\"   'Add middle separator\n\t\t\tFor i = 8 To 13\n\t\t\t\tBarCode = BarCode & Chr(97 + Val(Mid(chain, i, 1)))\n\t\t\tNext\n\t\t\tBarCode = BarCode & \"+\"   'Add end mark\n\t\tEnd If\n\tEnd If\n\tReturn BarCode\nEnd Function"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Delete Bend Notes\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Perimeter of Flatpattern using ilogic\n                    ", "solution": [], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: Error in a function called FreeLine\n                    ", "solution": [], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: add custom iProperties to each component with c# add-in\n                    ", "solution": ["public void occ_customipropertty(AssemblyDocument asmDoc)\n        {\n            SelectSet selSet = default(SelectSet);\n            selSet = asmDoc.SelectSet;\n\n            try\n            {\n                ComponentOccurrence compOcc = default(ComponentOccurrence);\n                object obj = null;\n                foreach (object obj_loopVariable in selSet)\n                {\n                    obj = obj_loopVariable;\n                    compOcc = (ComponentOccurrence)obj;\n                    System.Diagnostics.Debug.Print(compOcc.Name);\n                    compOcc.Visible = !compOcc.Visible;\n                    //add costum iproperties for each selected component\n                    CreateAndEditCustomProperty(\"Property Name\", \"Property value\", compOcc.ReferencedDocumentDescriptor.ReferencedDocument);\n                }\n            }\n            catch (Exception ex)\n            {\n                return;\n            }\n        }\n        public void CreateAndEditCustomProperty(string propName, object propValue, Inventor.Document invDoc)\n        { \n            PropertySet propSet = invDoc.PropertySets[\"Inventor User Defined Properties\"];\n            Inventor.Property prop;\n            try\n            {\n                prop = propSet[propName];\n            }\n            catch (Exception e)\n            {\n                prop = propSet.Add(\"\",propName);                    \n            }\n            prop.Value = propValue;\n            \n        }"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Need to open Create New File dialog box to choose the template\n                    ", "solution": ["\u00a0\nDim oPartDoc As PartDocument\noPartDoc = ThisApplication.Documents.Add(kPartDocumentObject, path of sheet metal template)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: To select multiple documents from assembly\n                    ", "solution": ["For", " ", "i", " = 1 ", "To", " 3\n\t", "If", " ", "oSelection", " = ", "oComp", " ", "Then", "\n\t\t", "entity", " = ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "SelectionFilterEnum", ".", "kAssemblyOccurrenceFilter", ", ", "iLNO", " & ", "\": Select Component:\"", ")\n\t\t", "oDoc", ".", "SelectSet", ".", "Select", "(", "entity", ")\n\t", "Else", " ", "If", " ", "oSelection", " = ", "oPart", " ", "Then", "\n\t\t", "entity", " = ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "kAssemblyLeafOccurrenceFilter", ", ", "iLNO", " & ", "\": Select Part:\"", ")\t\n\t", "End", " ", "If", "\n", "Next", "\n\n", "For", " ", "i", " = 1 ", "To", " 3 \n\t", "MsgBox", "(", "oDoc", ".", "SelectSet", ".", "Item", "(", "i", ").", "name", ")\n", "Next", " "], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Material and appearance illogic to copy to custom iproperty\n                    ", "solution": ["iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"gkp_Assembly_Apearance\"", ") = ", "ThisDoc", ".", "Document", ".", "activeappearance", ".", "displayname", "\n", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"gkp_Assembly_Material\"", ") = ", "ThisDoc", ".", "Document", ".", "activematerial", ".", "displayname"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Trouble with Inventor 2019\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: any unique property for differentiate inventor files?\n                    ", "solution": ["Dim secretPropSet As Inventor.PropertySet = mDocument.PropertySets.Add(\"Secret Property Set\")\nDim secretProp As Inventor.Property = secretPropSet.Add(\"ABC-XYZ\", \"Secret Property\")"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Anyone know how to turn this off? Please HELP\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: SelectionFilterEnum Enumerator for Center of Arc (or Circle)\n                    ", "solution": ["Imports System.Windows.Forms\n\nSub Main()\n'https://forums.autodesk.com/t5/inventor-customization/ilogic-move-body-from-point-to-coordinate/td-p/8222376\n'https://forums.autodesk.com/t5/inventor-customization/selectionfilterenum-enumerator-for-center-of-arc-or-circle/m-p/8556328\n'Dim myPoint = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPointEntities, \"Select Point to set as origin:\")\n\nDim iLNO As String = \"0004\"\nClipboard.SetText(\"TEST\")\noDoc = ThisApplication.ActiveDocument\noCompDef = oDoc.ComponentDefinition\n\noMidX = 0\noMidY = 0\noMidZ = 0\noSV = \"Single Vertex\"\noMP = \"Middle Point\"\noCP = \"Center point of Arc or Circle\"\noCancel = \"Cancel\"\n\n\nDim oPoint_Type As New ArrayList\noPoint_Type.Add(oSV)\noPoint_Type.Add(oMP)\noPoint_Type.Add(oCP)\noPoint_Type.Add(oCancel)\n\noCP_Other_Y = \"Yes\"\noCP_Other_N = \"No\"\noCP_Other_YN = oCP_Other_Y\noPoint_Type_X = InputListBox(\"Prompt\", oPoint_Type, oPoint_Type(0), Title := iLNO & \": Options\", ListName := iLNO & \": List\")\nIf oPoint_Type_X = oCP Then oCP_Other_YN = oCP_Other_N\nIf oPoint_Type_X = oCancel Then Exit Sub\nIf oPoint_Type_X = \"Middle Point\" Then\n\toIterate = 2\n\toDivider = 2\nElse\n\toIterate = 1\n\toDivider = 1\nEnd If\n\nFor i = 1 To oIterate\nIf i = 1 Then oTitle_MP = \"Select Point(Vertex) - 1st\"\nIf i = 2 Then oTitle_MP = \"Select Point(Vertex) - 2nd\"\n\t\n'Dim oPoint_SV = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPointEntities, \"Select a Point (vertex)\")\n'Dim oPoint_MP = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPointEntities, oTitle_MP)\n'Dim oArc = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, \"Select a Center Point (Arc or Circle)\")\nL_oPoint:\n\nIf oPoint_Type_X = oSV Then\n\tDim oPoint_SV = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPointEntities, \"Select a Point (vertex)\")\n\toPoint = oPoint_SV\nElse If oPoint_Type_X = oMP Then\n\tDim oPoint_MP = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPointEntities, oTitle_MP)\n\toPoint = oPoint_MP\nEnd If\n\nIf oCP_Other_YN = oCP_Other_Y Then\n\tIf IsNothing(oPoint) Then GoTo L_oPoint:\nEnd If\n\nIf oPoint_Type_X = oCP Then\n\toPoint_Str = oCP_Sub(oArc)\n\t'specify word splitting characters \"space\" and \"dash\"\n\tDim Separators() As Char = {\",\"c} \n\tSentence = oPoint_Str\n\tWords = Sentence.Split(Separators)\n\ti = 0\n\tFor Each wrd In Words\n'\tMessageBox.Show(\"Word Index #\" & i & \" = \" & Words(i))\n\ti += 1\n\tNext\n\toMidX = Val(Words(0))/2.54\n\toMidY = Val(Words(1))/2.54\n\toMidZ = Val(Words(2))/2.54\nEnd If\n\t\nIf oCP_Other_YN = oCP_Other_Y Then\n\tmyPoint = oPoint.Point\n\toMidX = (myPoint.X/2.54 + oMidX)\n\toMidY = (myPoint.Y/2.54 + oMidY)\n\toMidZ = (myPoint.Z/2.54 + oMidZ)\nEnd If\n\nNext i\n\noMidX = oMidX / oDivider\noMidY = oMidY / oDivider\noMidZ = oMidZ / oDivider\noWP_Cordinates = oMidX.ToString & \" \" & oMidY.ToString & \" \" & oMidZ.ToString\n\n'____Create and write to a text file_________________\noWrite = System.IO.File.CreateText(ThisDoc.PathAndFileName(False) & \".txt\")\noWrite.WriteLine(\"oMidX: \" & oMidX)\noWrite.WriteLine(\"oMidY: \" & oMidY)\noWrite.WriteLine(\"oMidZ: \" & oMidZ)\noWrite.WriteLine(oMidX & \" \" & oMidY & \" \" & oMidZ)\noWrite.WriteLine(oWP_Cordinates)\noWrite.Close()\n\n'open the file\nThisDoc.Launch(ThisDoc.PathAndFileName(False) & \".txt\")\nThisApplication.ActiveView.Fit\n\noCreateWP(oMidX,oMidY,oMidZ)\n\noClipboard = CStr(oMidX) & \",\" & CStr(oMidY) & \",\" & CStr(oMidZ)\nClipboard.SetText(oClipboard)\n\nEnd Sub\n\nSub oCreateWP(oMidX, oMidY, oMidZ)\noUCF = 2.54\noMidX = oMidX*oUCF\noMidY = oMidY*oUCF\noMidZ = oMidZ*oUCF\n\nDim oDoc As Document\noDoc = ThisApplication.ActiveDocument\n\nDim oTG As TransientGeometry\noTG = ThisApplication.TransientGeometry\nDim oWorkPoint As WorkPoint\n\n'create a workpoint\noWorkPoint = oDoc.ComponentDefinition.WorkPoints.AddFixed(oTG.CreatePoint(oMidX,oMidY,oMidZ))\n'display the new workpoint's coordinates\nMessageBox.Show(oWorkPoint.Point.X/2.54  &\", \"&  oWorkPoint.Point.Y/2.54 &\", \"&  oWorkPoint.Point.Z/2.54, \"@ SUB oCreateWP\")\n\nEnd Sub\n\nSub oAssign_from_Clipboard()\n  Dim Len_Max As Double\n  Len_Max = Convert.ToDouble(Clipboard.GetText)\t'To assgn clipboard value (numerical) to the variable\n  Dim oMfgr As String\n  oMfgr = Clipboard.GetText\t\t'To assgn clipboard value (string) to the variable\n\nEnd Sub\n\n\n\nFunction oCP_Sub(oArc)\t\t'rivate Sub TestGetCenter()\n'https://forums.autodesk.com/t5/inventor-customization/find-center-point-coordinate-of-arc-or-circle/td-p/2630752\nDim oCenter As Point\nCount_NotSelected = 0\n\nL_oArc:\nDim InputEdge = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, \"Select a Point (vertex):\")\n\n'If InputEdge Is Nothing Then\n'\tCount_NotSelected += 1\n'\tIf Count_NotSelected > 3 Then\t'To help if no crcular features to select\n'\t\tExit Function\n'\tElse\n'\t\tGoTo L_oArc :\n'\tEnd If\n'End If\n\nSelect Case InputEdge.GeometryType\nCase kCircularArcCurve\n\tDim arc As Arc3d\n\tarc = InputEdge.Geometry\n\tGetCenterPoint = arc.Center\nCase kCircleCurve\n\tDim circ As Inventor.Circle\n\tcirc = InputEdge.Geometry\n\tGetCenterPoint = circ.Center\nCase kEllipticalArcCurve\n\tDim ellipArc As EllipticalArc\n\tellipArc = InputEdge.Geometry\n\tGetCenterPoint = ellipArc.Center\nCase kEllipseFullCurve\n\tDim ellipse As EllipseFull\n\tellipse = InputEdge.Geometry\n\tGetCenterPoint = ellipse.Center\nCase Else\n\tGetCenterPoint = Nothing\nEnd Select\n'MsgBox(\"Center @ oCP_Sub: \" & GetCenterPoint.X/2.54 & \", \" & GetCenterPoint.Y/2.54 & \", \" & GetCenterPoint.Z/2.54)\nReturn (GetCenterPoint.X & \",\" & GetCenterPoint.Y & \",\" & GetCenterPoint.Z)\nEnd Function\n"], "author": "rwickrama"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic in a Loop to create multiple planes/definitions\n                    ", "solution": ["Dim oDoc As PartDocument \noDoc = ThisApplication.ActiveDocument \nDim oDef As PartComponentDefinition \noDef = oDoc.ComponentDefinition\n\nDim oAxis As WorkAxes\nDim oWPlane As WorkPlane\nDim FlatAngle As Double = Math.PI / 6 \nDim NoSides As Integer = 12\n'initialize counter\nWork1 = 1 ul\nWork2 = (NoSides / 2 ul) + Work1\noAxis= oDef.WorkAxes\noWPlane = oDef.WorkPlanes.AddByLinePlaneAndAngle(oAxis(\"Y Axis\"), oDef.WorkPlanes(\"XY Plane\"), 0 deg)\noWPlane.Name = CStr(Work1) & \"-\" & CStr(Work2) & \" Plane\"\nDim oWPName As String = oWPlane.Name \noWPlane.AutoResize = True\noWPlane.Visible = False\nInventorVb.DocumentUpdate()\n \nFor Work1 = 2 To NoSides \n\tWork2 = (NoSides / 2 ul) + Work1\n\toWPlane = oDef.WorkPlanes.AddByLinePlaneAndAngle(oAxis(\"Y Axis\"), oDef.WorkPlanes(oWPName), FlatAngle/4 )\n    oWPlane.Name = CStr(Work1 + NoSides) & \"-\" & CStr(Work2 + NoSides) & \" Plane\"\n\toWPName = oWPlane.Name\n    oWPlane.AutoResize = True\n    oWPlane.Visible = False \nNext"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Rule compile errors in {rulename}\n                    ", "solution": ["For Each oTextBox as TextBox In oTitleBlock.Definition.Sketch.TextBoxes", "For Each oTextBox as ", "Inventor.", "TextBox In oTitleBlock.Definition.Sketch.TextBoxes"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Vb.net create virtual component and set quantity\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Center Point of Arc or Circle\n                    ", "solution": ["Sub", " ", "Main", "()\t\t", "'rivate Sub TestGetCenter()", "\n", "iLNO", " = ", "\"0005PA\"", "\n", "'https://forums.autodesk.com/t5/inventor-customization/find-center-point-coordinate-of-arc-or-circle/td-p/2630752", "\n", "Dim", " ", "oCenter", " ", "As", " ", "Point", "\n", "Count_NotSelected", " = 0\n\n", "L_oArc", ":\n", "Dim", " ", "InputEdge", " = ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "SelectionFilterEnum", ".", "kAllCircularEntities", ", ", "\"Select a Point (vertex):\"", ")\n\n", "If", " ", "InputEdge", " ", "Is", " ", "Nothing", " ", "Then", "\n\t", "Count_NotSelected", " += 1\n\t", "If", " ", "Count_NotSelected", " > 3 ", "Then", "\t", "'To help if no crcular features to select", "\n\t\t", "Exit", " ", "Sub", "\n\t", "Else", "\n\t\t", "GoTo", " ", "L_oArc", " :\n\t", "End", " ", "If", "\n", "End", " ", "If", "\n\n", "Select", " ", "Case", " ", "InputEdge", ".", "GeometryType", "\n", "Case", " ", "CurveTypeEnum", ".", "kCircularArcCurve", "\n\t", "MessageBox", ".", "Show", "(", "\"Message1\"", ", ", "\"Title\"", ")\n\t", "Dim", " ", "arc", " ", "As", " ", "Arc3d", "\n\t", "arc", " = ", "InputEdge", ".", "Geometry", "\n\t", "GetCenterPoint", " = ", "arc", ".", "Center", "\n", "Case", " ", "CurveTypeEnum", ".", "kCircleCurve", "\n\t", "MessageBox", ".", "Show", "(", "\"Message2\"", ", ", "\"Title\"", ")\n\t", "Dim", " ", "circ", " ", "As", " ", "Inventor", ".", "Circle", "\n\t", "circ", " = ", "InputEdge", ".", "Geometry", "\n\t", "GetCenterPoint", " = ", "circ", ".", "Center", "\n", "Case", " ", "CurveTypeEnum", ".", "kEllipticalArcCurve", "\n\t", "MessageBox", ".", "Show", "(", "\"Message3\"", ", ", "\"Title\"", ")\n\t", "Dim", " ", "ellipArc", " ", "As", " ", "EllipticalArc", "\n\t", "ellipArc", " = ", "InputEdge", ".", "Geometry", "\n\t", "GetCenterPoint", " = ", "ellipArc", ".", "Center", "\n", "Case", " ", "CurveTypeEnum", ".", "kEllipseFullCurve", "\n\t", "MessageBox", ".", "Show", "(", "\"Message4\"", ", ", "\"Title\"", ")\n\t", "Dim", " ", "ellipse", " ", "As", " ", "EllipseFull", "\n\t", "ellipse", " = ", "InputEdge", ".", "Geometry", "\n\t", "GetCenterPoint", " = ", "ellipse", ".", "Center", "\n", "Case", " ", "Else", "\n\t", "MessageBox", ".", "Show", "(", "\"Message5\"", ", ", "\"Title\"", ")\n\t", "GetCenterPoint", " = ", "Nothing", "\n", "End", " ", "Select", "\n", "oCenter", " = ", "GetCenterPoint", "\n", "If", " ", "Not", " ", "oCenter", " ", "Is", " ", "Nothing", " ", "Then", " ", "\n\t", "MsgBox", " (", "\"Center: \"", " & ", "oCenter", ".", "X", ".", "ToString", "() & ", "\", \"", " & ", "oCenter", ".", "Y", ".", "ToString", "() & ", "\", \"", " & ", "oCenter", ".", "Z", ".", "ToString", "())\n", "End", " ", "If", " ", "\n", "End", " ", "Sub", "\u00a0\u00a0"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Retrieving Center Point Coordinates\n                    ", "solution": ["Imports System.Windows.Forms\n\nSub Main()\nDim iLNO As String = \"0004\"\nClipboard.SetText(\"TEST\")\noDoc = ThisApplication.ActiveDocument\noCompDef = oDoc.ComponentDefinition\n\noMidX = 0\noMidY = 0\noMidZ = 0\noSV = \"Single Vertex\"\noMP = \"Middle Point\"\noCP = \"Center point of Arc or Circle\"\noCancel = \"Cancel\"\n\nDim oPoint_Type As New ArrayList\noPoint_Type.Add(oSV)\noPoint_Type.Add(oMP)\noPoint_Type.Add(oCP)\noPoint_Type.Add(oCancel)\n\noCP_Other_Y = \"Yes\"\noCP_Other_N = \"No\"\noCP_Other_YN = oCP_Other_Y\noPoint_Type_X = InputListBox(\"Prompt\", oPoint_Type, oPoint_Type(0), Title := iLNO & \": Options\", ListName := iLNO & \": List\")\nIf oPoint_Type_X = oCP Then oCP_Other_YN = oCP_Other_N\nIf oPoint_Type_X = oCancel Then Exit Sub\nIf oPoint_Type_X = \"Middle Point\" Then\n\toIterate = 2\n\toDivider = 2\nElse\n\toIterate = 1\n\toDivider = 1\nEnd If\n\nFor i = 1 To oIterate\nIf i = 1 Then oTitle_MP = \"Select Point(Vertex) - 1st\"\nIf i = 2 Then oTitle_MP = \"Select Point(Vertex) - 2nd\"\n\t\n'Dim oPoint_SV = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPointEntities, \"Select a Point (vertex)\")\n'Dim oPoint_MP = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPointEntities, oTitle_MP)\n'Dim oArc = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, \"Select a Center Point (Arc or Circle)\")\nL_oPoint:\n\nIf oPoint_Type_X = oSV Then\n\tDim oPoint_SV = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPointEntities, \"Select a Point (vertex)\")\n\toPoint = oPoint_SV\nElse If oPoint_Type_X = oMP Then\n\tDim oPoint_MP = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPointEntities, oTitle_MP)\n\toPoint = oPoint_MP\nEnd If\n\nIf oCP_Other_YN = oCP_Other_Y Then\n\tIf IsNothing(oPoint) Then GoTo L_oPoint:\nEnd If\n\nIf oPoint_Type_X = oCP Then\n\toPoint_Str = oCP_Sub(oArc)\n\t'specify word splitting characters \"space\" and \"dash\"\n\tDim Separators() As Char = {\",\"c} \n\tSentence = oPoint_Str\n\tWords = Sentence.Split(Separators)\n\ti = 0\n\tFor Each wrd In Words\n'\tMessageBox.Show(\"Word Index #\" & i & \" = \" & Words(i))\n\ti += 1\n\tNext\n\toMidX = Val(Words(0))/2.54\n\toMidY = Val(Words(1))/2.54\n\toMidZ = Val(Words(2))/2.54\nEnd If\n\t\nIf oCP_Other_YN = oCP_Other_Y Then\n\tmyPoint = oPoint.Point\n\toMidX = (myPoint.X/2.54 + oMidX)\n\toMidY = (myPoint.Y/2.54 + oMidY)\n\toMidZ = (myPoint.Z/2.54 + oMidZ)\nEnd If\n\nNext i\n\noMidX = oMidX / oDivider\noMidY = oMidY / oDivider\noMidZ = oMidZ / oDivider\noWP_Cordinates = oMidX.ToString & \" \" & oMidY.ToString & \" \" & oMidZ.ToString\n\n'____Create and write to a text file_________________\noWrite = System.IO.File.CreateText(ThisDoc.PathAndFileName(False) & \".txt\")\noWrite.WriteLine(\"oMidX: \" & oMidX)\noWrite.WriteLine(\"oMidY: \" & oMidY)\noWrite.WriteLine(\"oMidZ: \" & oMidZ)\noWrite.WriteLine(oMidX & \" \" & oMidY & \" \" & oMidZ)\noWrite.WriteLine(oWP_Cordinates)\noWrite.Close()\n\n'open the file\nThisDoc.Launch(ThisDoc.PathAndFileName(False) & \".txt\")\nThisApplication.ActiveView.Fit\n\n'oCreateWP(oMidX,oMidY,oMidZ)\n\noClipboard = CStr(oMidX) & \",\" & CStr(oMidY) & \",\" & CStr(oMidZ)\nClipboard.SetText(oClipboard)\n\nEnd Sub\n\nSub oCreateWP(oMidX, oMidY, oMidZ)\noUCF = 2.54\noMidX = oMidX*oUCF\noMidY = oMidY*oUCF\noMidZ = oMidZ*oUCF\n\nDim oDoc As Document\noDoc = ThisApplication.ActiveDocument\n\nDim oTG As TransientGeometry\noTG = ThisApplication.TransientGeometry\nDim oWorkPoint As WorkPoint\n\n'create a workpoint\noWorkPoint = oDoc.ComponentDefinition.WorkPoints.AddFixed(oTG.CreatePoint(oMidX,oMidY,oMidZ))\n'display the new workpoint's coordinates\nMessageBox.Show(oWorkPoint.Point.X/2.54  &\", \"&  oWorkPoint.Point.Y/2.54 &\", \"&  oWorkPoint.Point.Z/2.54, \"@ SUB oCreateWP\")\nEnd Sub\n\nSub oAssign_from_Clipboard()\n  Dim Len_Max As Double\n  Len_Max = Convert.ToDouble(Clipboard.GetText)\t'To assgn clipboard value (numerical) to the variable\n  Dim oMfgr As String\n  oMfgr = Clipboard.GetText\t\t'To assgn clipboard value (string) to the variable\n\nEnd Sub\n\n\nFunction oCP_Sub(oArc)\t\t'rivate Sub TestGetCenter()\n'https://forums.autodesk.com/t5/inventor-customization/find-center-point-coordinate-of-arc-or-circle/td-p/2630752\nDim oCenter As Point\nCount_NotSelected = 0\n\nL_oArc :\n\nDim InputEdge = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllCircularEntities, \"Select a Point (vertex):\")\n\nIf InputEdge Is Nothing Then\n\tCount_NotSelected += 1\n\tIf Count_NotSelected > 3 Then\t'To help if no crcular features to select\n\t\tExit Function\n\tElse\n\t\tGoTo L_oArc :\n\tEnd If\nEnd If\n\nSelect Case InputEdge.GeometryType\nCase CurveTypeEnum. kCircularArcCurve\n\tDim arc As Arc3d\n\tarc = InputEdge.Geometry\n\tGetCenterPoint = arc.Center\nCase CurveTypeEnum.kCircleCurve\n\tDim circ As Inventor.Circle\n\tcirc = InputEdge.Geometry\n\tGetCenterPoint = circ.Center\nCase CurveTypeEnum.kEllipticalArcCurve\n\tDim ellipArc As EllipticalArc\n\tellipArc = InputEdge.Geometry\n\tGetCenterPoint = ellipArc.Center\nCase CurveTypeEnum.kEllipseFullCurve\n\tDim ellipse As EllipseFull\n\tellipse = InputEdge.Geometry\n\tGetCenterPoint = ellipse.Center\nCase Else\n\tGetCenterPoint = Nothing\nEnd Select\nReturn (GetCenterPoint.X & \",\" & GetCenterPoint.Y & \",\" & GetCenterPoint.Z)\n\nEnd Function\n"], "author": "rwickrama"},
{"created at": [], "solution Title": "\n                        Re: iLogic Error Message: The parameter is incorrect\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Edit parts material via BOM\n                    ", "solution": [" Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n    Dim strMaterialName As String\n    strMaterialName = \"cartboard\"\n    Dim oMaterial As MaterialAsset\n    On Error Resume Next\n    Dim oDoc As Document\n    For Each oDoc In oAsmDoc.AllReferencedDocuments\n        If oDoc.DocumentType = kPartDocumentObject Then\n          Dim oPartDoc As PartDocument\n          Set oPartDoc = oDoc\n          if oPartDoc.ActiveMaterial.name = \"1.4301\" or oPartDoc.ActiveMaterial.name = \"1.4571\" then\n                Dim localAsset As MaterialAsset\n                Dim localAsset1 As MaterialAsset\n                Set localAsset = oAsmDoc.MaterialAssets.Item(strMaterialName)\n                Set localAsset1 = localAsset.CopyTo(oPartDoc, True)\n               oPartDoc.ActiveMaterial = oPartDoc.MaterialAssets.Item(strMaterialName)\n          end if\n        End If\n    Next"], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: How to accept all part errors?\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Name drawing sheet with active model name and property from same part\n                    ", "solution": ["Dim oDoc As DrawingDocument \noDoc = ThisApplication.ActiveDocument \n\ndoc = ThisDrawing.ModelDocument \no_iProp = doc.PropertySets.Item(1).Item(\"Revision Number\").Value   \nmodelName = IO.Path.GetFileNameWithoutExtension(ThisDrawing.ModelDocument.FullFileName)\n\nDim oSheet As Sheet \nFor Each oSheet In oDoc.Sheets \n\toSheet.Name = modelName & \"-\" & o_iProp \nNext"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Ilogic change part list Style\n                    ", "solution": ["Sub Main()\n\tDim oDoc As DrawingDocument\n\toDoc = ThisApplication.ActiveDocument\n\n\tDim oStyleMgr As DrawingStylesManager\n\toStyleMgr = oDoc.StylesManager\n\t\n\tdoc = ThisDoc.ModelDocument \n\t\n\tDim oPartListStyle As PartsListStyle\n\n\t 'check file type\n\tIf doc.DocumentType = kPartDocumentObject Then\n\t \toPartListStyle = oStyleMgr.PartsListStyles.Item(\"REMY Pi\u00e8ce Normal\")\n\tElse If doc.DocumentType = kAssemblyDocumentObject Then\t \n\t\toPartListStyle = oStyleMgr.PartsListStyles.Item(\"REMY ENS (ISO)\")\n\tEnd If \n   \t\n\tDim oSheet As Sheet     \n\toSheet = oDoc.ActiveSheet \n\t\n    Dim oPartsList As PartsList\n    For Each oPartsList In oSheet.PartsLists\n\tIf Not oPartListStyle Is Nothing Then", "\t\toPartsList.Style = oPartListStyle", "\tEnd If\n    Next\n\t\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Declare Features In Vbaeditor\n                    ", "solution": ["If  Clamp minX< featureX<Clamp maxX then", "msgbox \"Feature in clamp area\"", "end if\n"], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Betreff: ClientGraphics to 3DPDF\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Using iLogic for Idealization of Shell Elements\n                    ", "solution": ["strCmdForNewIdealization", " = ", "\"<NewIdealization Name=\"\"Test Shell 1\"\" ID=\"\"1\"\" Type=\"\"1\"\" AddToAnalysis=\"\"1\"\" MaterialID=\"\"1\"\" Color=\"\"11087083\"\" HasAssociatedGeo=\"\"0\"\" CoordinateSystemID=\"\"0\"\" Thickness=\"\"0,001[m]\"\" EntitiesCount=\"\"0\"\"/>\""], "author": "PerreTheDude"},
{"created at": [], "solution Title": "\n                        Re: iLogic rules pop up an error when problem with relationships\n                    ", "solution": ["Parameter(\"d6\") = 90\nRuleParametersOutput()\nInventorVb.DocumentUpdate()\nDim MyErrorList As New ArrayList\n\nFor Each oConstraint In ThisApplication.ActiveDocument.ComponentDefinition.Constraints\n\tIf Not oConstraint.HealthStatus = HealthStatusEnum.kUpToDateHealth Then MyErrorList.Add(oConstraint.Name)\nNext\nIf MyErrorList.Count > 0 Then\n\tDim ErrorMsg As String = \"These mates have errors: \" & vbCr\n\tFor Each oErr In MyErrorList\n\t\tErrorMsg = ErrorMsg & oErr & vbCr\n\tNext\n\tMessageBox.Show(ErrorMsg, \"Title\")\nEnd If"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Control Font Size of Text Parameters in a Title Block with ilogic?\n                    ", "solution": ["Sub b()\n\nDim odoc As DrawingDocument\nSet odoc = ThisApplication.ActiveDocument ' drawing must be open\nDim otitle As TitleBlock\nSet otitle = odoc.ActiveSheet.TitleBlock\nDim otxt As TextBox\nFor Each otxt In otitle.Definition.Sketch.TextBoxes\nDebug.Print otxt.FormattedText\nNext", " otxt.FormattedText = \"something you will whant\"\n", "otxt.Width", "or", "otxt.widthscale"], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Help a Beginner Write a Sub Routine or Function\n                    ", "solution": ["Sub", " ", "Main", "()\n\t", "left1", " = ", "WithinLimit", "(", "MinFlange", ",", "MaxFlange", ",", "left1", ")\n\t", "'so on and so forth with your other values", "\n", "End", " ", "Sub", "\n", "Function", " ", "WithinLimit", "(", "minValue", " ", "As", " ", "Double", ", ", "maxValue", " ", "As", " ", "Double", ", ", "checkValue", " ", "As", " ", "Double", ") ", "As", " ", "Double", "\n\t", "If", " ", "checkValue", " < ", "minValue", " ", "Then", " \n\t\t", "MessageBox", ".", "Show", "(", "\"value was to low\"", ", ", "\"Title\"", ")\n\t\t", "WithinLimit", " = ", "minValue", "\n\t", "ElseIf", " ", "checkValue", " > ", "maxValue", " ", "Then", "\n\t\t", "MessageBox", ".", "Show", "(", "\"value was to high\"", ", ", "\"Title\"", ")\n\t\t", "WithinLimit", " = ", "maxValue", "\n\t", "Else", "\n\t\t", "WithinLimit", " = ", "checkValue", "\n\t", "End", " ", "If", "\n", "End", " ", "Function", " \n"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Parameter Value returns wrong Answer using Floor()\n                    ", "solution": ["let x = 1348.5\nlet x_cm = x / 10\nlet x_mm = x_cm / 0.1\nx_mm - 1348.5\n", "Dim mmValue As Double = oUnitsOfMeasure.ConvertUnits(inventorValue.ModelValue, Inventor.UnitsTypeEnum.kCentimeterLengthUnits, Inventor.UnitsTypeEnum.kMillimeterLengthUnits) \n", "Trace.WriteLine(\"mmValue - 1348.5 = {0}\", mmValue - 1348.5)"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Inventor VBA UserForm documentation or tutorials?\n                    ", "solution": [], "author": "clutsa"},
{"created at": ["\u200e03-11-2019 05:32 AM"], "solution Title": "\n                        Re: Create chamfer note with iLogic\n                    ", "solution": ["'this rule will attempt to look at a supplied assembly and dimensions the extents of a group of objects that are constrained together.\nSub Main()\n\tAddChamferNote(\"VIEW1\", \"Edge0\", \"Edge1\", 2.5, 2.5)\nEnd Sub\n\n\n''' <summary>\n''' Initially copied from this thread: \n''' https://forums.autodesk.com/t5/Inventor-customization/create-chamfer-note-With-ilogic/td-p/8646855\n''' </summary>\n''' <param name=\"View\"></param>\n''' <param name=\"Edge1\"></param>\n''' <param name=\"Edge2\"></param>\n''' <param name=\"NoteLocationX\"></param>\n''' <param name=\"NoteLocationY\"></param>\nSub AddChamferNote(View As String, Edge1 As String, Edge2 As String, Optional NoteLocationX As Double = 1, Optional NoteLocationY As Double = 1)\n\tIf Not TypeOf ThisDoc.Document Is DrawingDocument Then \n\t\tMessageBox.Show(\"Not a Drawing!\")\n\t\tExit Sub\n\tEnd If\n\tDim oDoc As DrawingDocument = ThisDoc.Document\n\tDim oSheet As Sheet = oDoc.ActiveSheet\n\tDim oView As DrawingView = ActiveSheet.View(View).View\t\t\n\tDim oTG As TransientGeometry = ThisApplication.TransientGeometry\n\tDim oViewModelDoc As Document = oView.ReferencedFile.ReferencedDocument\n\n\tDim aoEdge1 As Object\n\toObjs = oViewModelDoc.AttributeManager.FindObjects(\"iLogicEntityNameSet\", \"iLogicEntityName\", Edge1)\n\taoEdge1 = oObjs.Item(1)\n\t\n\tDim aoDrawingCurve1 As DrawingCurve\n\toDrawViewCurves1 = oView.DrawingCurves(aoEdge1)\n\taoDrawingCurve1 = oDrawViewCurves1.Item(1)\n\t\n\tDim points As ObjectCollection = ThisApplication.TransientObjects.CreateObjectCollection\n\tDim leaderPoint As Point2d = oTG.CreatePoint2d(aoDrawingCurve1.MidPoint.X, aoDrawingCurve1.MidPoint.Y + NoteLocationY)\n\t\n\tpoints.Add(leaderPoint)\n\tpoints.Add(aoDrawingCurve1.MidPoint)\n\t\n\tDim leaderNote As LeaderNote = oSheet.DrawingNotes.LeaderNotes.Add(points, Edge1)\n\t\n\tpoints.Clear\n\n\tDim aoEdge2 As Object\n\toObjs = oViewModelDoc.AttributeManager.FindObjects(\"iLogicEntityNameSet\", \"iLogicEntityName\", Edge2)\n\taoEdge2 = oObjs.Item(1)\n\n\tDim aoDrawingCurve2 As DrawingCurve\n\toDrawViewCurves2 = oView.DrawingCurves(aoEdge2)\n\taoDrawingCurve2 = oDrawViewCurves2.Item(1)\n\tleaderPoint = oTG.CreatePoint2d(aoDrawingCurve2.MidPoint.X, aoDrawingCurve2.MidPoint.Y + NoteLocationY)\n\t\n\tpoints.Add(leaderPoint)\n\tpoints.Add(aoDrawingCurve2.MidPoint)\n\t\n\tleaderNote = oSheet.DrawingNotes.LeaderNotes.Add(points, Edge2)\n\t\n\tDim oPosition As Point2d = oTG.CreatePoint2d(aoDrawingCurve2.MidPoint.X + NoteLocationX, aoDrawingCurve2.MidPoint.Y + NoteLocationY)\n\t\n\tDim oChamferNote As ChamferNote = oSheet.DrawingNotes.ChamferNotes.Add(oPosition, aoDrawingCurve2, aoDrawingCurve1)\n\tIf Not oChamferNote Is Nothing Then\n\t\toChamferNote.AttributeSets.Add(\"ilogic_Created\")\n\tEnd If\nEnd Sub"], "author": "AlexFielder"},
{"created at": ["\u200e03-08-2019 12:09 AM"], "solution Title": "\n                        Re: Please check my iLogic rule for iproperties\n                    ", "solution": ["Dim", " ", "doc", " = ", "ThisDoc", ".", "Document", "\n", "'Gets the active document", "\n\n", "'Gets the Inventor Property Set", "\n", "Dim", " ", "customPropertySet", " ", "As", " ", "PropertySet", "\n", "customPropertySet", " = ", "doc", ".", "PropertySets", ".", "Item", "(", "\"Inventor User Defined Properties\"", ")\n\n", "Dim", " ", "oProject", " ", "As", " ", "String", " = ", "doc", ".", "PropertySets", ".", "Item", "(", "\"Design Tracking Properties\"", ").", "Item", "(", "\"Project\"", ").", "Value", "\n", "Dim", " ", "oDesigner", " ", "As", " ", "String", " = ", "doc", ".", "PropertySets", ".", "Item", "(", "\"Design Tracking Properties\"", ").", "Item", "(", "\"Designer\"", ").", "Value", "\n", "Dim", " ", "oDescription", " ", "As", " ", "String", " = ", "doc", ".", "PropertySets", ".", "Item", "(", "\"Design Tracking Properties\"", ").", "Item", "(", "\"Description\"", ").", "Value", "\n", "Dim", " ", "oDIENUMBER", " ", "As", " ", "String", " = ", "customPropertySet", ".", "Item", "(", "\"DIE NUMBER\"", ").", "Value", "\n\n", "If", " ", "oProject", " = ", "\"\"", " ", "Then", " ", "MessageBox", ".", "Show", "(", "\"Project Name and Number\"", ", ", "\"Missing Entry\"", ")\n", "If", " ", "oDesigner", " = ", "\"\"", " ", "Then", " ", "MessageBox", ".", "Show", "(", "\"Designer\"", ", ", "\"Missing Entry\"", ")\n", "If", " ", "oDescription", " = ", "\"\"", " ", "Then", " ", "MessageBox", ".", "Show", "(", "\"Part's Description\"", ", ", "\"Missing Entry\"", ")\n", "If", " ", "oDIENUMBER", " = ", "\"\"", " ", "Then", " ", "MessageBox", ".", "Show", "(", "\"Die Number\"", ", ", "\"Missing Entry\"", ")"], "author": "yuvilo_"},
{"created at": ["\u200e03-08-2019 10:00 AM"], "solution Title": "\n                        Re: Int32 error while trying to sort numbers.\n                    ", "solution": [], "author": "philip1009"},
{"created at": ["\u200e03-11-2019 04:39 AM"], "solution Title": "\n                        Re: VBA Events get disconnected after code crash\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Associative property in AdditionalOptions\n                    ", "solution": ["if oview.ActiveDesignViewRepresentation <> \"\" then", "'is associative", "endif"], "author": "marcin_otr\u0119ba"},
{"created at": ["\u200e03-12-2019 11:42 AM", "\u200e03-12-2019 12:03 PM"], "solution Title": "\n                        Re: Help with iLogic for custom iProperties with yes/no value\n                    ", "solution": ["'Maybe some Like this if you use Yes and No", "\n", "'Type in what you want the title to be", "\n", "Dim", " ", "Title", " ", "As", " ", "String", " = ", "\"No matter what you want\"", "\n", "MessageBox", ".", "Show", "(", "\"MITER is \"", " +", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MITER\"", ").", "ToString", " & ", "vbLf", " & ", "\"SQ. Is \"", " +", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"SQ.\"", ").", "ToString", " & ", "vbLf", " & ", "\"PREP. Is \"", "  & ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"PREP.\"", "), ", "Title", ")\n\n\n\n", "If", " ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MITER\"", ") = ", "True", "   ", "And", " ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"SQ.\"", ") = ", "False", "  ", "And", " ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"PREP.\"", ") = ", "True", " ", "Then", "\n\n", "Else", " ", "If", "  ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MITER\"", ") = ", "False", "   ", "And", " ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"SQ.\"", ") = ", "True", " ", "And", " ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"PREP.\"", ") = ", "False", "  ", "Then", "\n \n", "Else", "\n", "MessageBox", ".", "Show", "(", "\"Unacceptable Compo\"", ", ", "\"Error\"", ")\n\n", "End", " ", "If", "'Maybe some Like this if you use Yes and No", "\n", "'Type in what you want the title to be", "\n", "Dim", " ", "Title", " ", "As", " ", "String", " = ", "\"No matter what you want\"", "\n", "MessageBox", ".", "Show", "(", "\"MITER is \"", " +", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MITER\"", ").", "ToString", " & ", "vbLf", " & ", "\"SQ. Is \"", " +", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"SQ.\"", ").", "ToString", " & ", "vbLf", " & ", "\"PREP. Is \"", "  & ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"PREP.\"", "), ", "Title", ")\n\n\n\n", "If", " ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MITER\"", ") = ", "True", "   ", "And", " ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"SQ.\"", ") = ", "False", "  ", "And", " ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"PREP.\"", ") = ", "True", " ", "Then", "\n\n", "Else", " ", "If", "  ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MITER\"", ") = ", "False", "   ", "And", " ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"SQ.\"", ") = ", "True", " ", "And", " ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"PREP.\"", ") = ", "False", "  ", "Then", "\n \n", "Else", "\n", "MessageBox", ".", "Show", "(", "\"Unacceptable Compo\"", ", ", "\"Error\"", ")\n\n", "Dim", " ", "NameList", " ", "As", " ", "New", " ", "ArrayList", "()\n", "NameList", ".", "Add", "(", "\"MITER = True  SQ. = False PREP. = True\"", ")\n", "NameList", ".", "Add", "(", "\"MITER = False SQ. = True  PREP. = False\"", ")\n\n\n\n\n", "Dim", " ", "msg", " ", "As", " ", "String", "\n\t", "msg", " = (", "\"Select acceptable  Compo \"", " & ", "vbLf", "  & ", "vbLf", ").", "ToString", "\n\n\n\t", "d0", " = ", "InputListBox", "(", "msg", ", ", "NameList", ", ", "d0", ", ", "Title", " := ", "\"Info - acceptable  Compo  needed\"", ", ", "ListName", " := ", "\"acceptable  Compo\"", ")\n\n", "If", " ", "d0", " = ", "\"MITER = True  SQ. = False PREP. = True\"", " ", "Then", " \n\t", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MITER\"", ") = ", "True", " \n\t", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"SQ.\"", ") = ", "False", " \n\t", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"PREP.\"", ") = ", "True", "\n\t", "End", " ", "If", " \n\t\n\t", "If", " ", "d0", " = ", "\"MITER = False SQ. = True  PREP. = False\"", " ", "Then", "\n\t\t\n\t\t", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"MITER\"", ") = ", "False", "\n\t\t", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"SQ.\"", ") = ", "True", "\n\t\t", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"PREP.\"", ") = ", "False", "\n\t\t\n\t\t", "End", " ", "If", " \n\n", "End", " ", "If"], "author": "bt"},
{"created at": ["\u200e03-12-2019 04:08 AM"], "solution Title": "\n                        Re: SelectMultiple fail\n                    ", "solution": ["Option Explicit\n\nPublic Sub selectAllNoBody()\nIf Not TypeOf ThisApplication.ActiveDocument Is AssemblyDocument Then Exit Sub\nDim assyDoc As AssemblyDocument\nSet assyDoc = ThisApplication.ActiveDocument\nDim ocPartDocs As ObjectCollection\nSet ocPartDocs = ThisApplication.TransientObjects.CreateObjectCollection\nDim obj As Object\nFor Each obj In ThisApplication.ActiveDocument.AllReferencedDocuments\n   If TypeOf obj Is PartDocument Then\n        Dim oPartdoc As PartDocument\n        Set oPartdoc = obj\n        If oPartdoc.ComponentDefinition.MassProperties.Volume = 0 Then\n              ocPartDocs.Add oPartdoc\n              Debug.Print oPartdoc.FullDocumentName\n        End If\n   End If\nNext\n\nDim ocPartOccurrences As ObjectCollection\nSet ocPartOccurrences = ThisApplication.TransientObjects.CreateObjectCollection\n\nDim AssyDef As AssemblyComponentDefinition\nSet AssyDef = assyDoc.ComponentDefinition\n\nDim partOcc As ComponentOccurrence\nFor i = 1 To ocPartDocs.Count\n    For Each partOcc In AssyDef.Occurrences\n        If partOcc.Definition.Document = ocPartDocs.Item(i) Then\n            ocPartOccurrences.Add partOcc\n        End If\n    Next\nNext i\n\nCall assyDoc.SelectSet.SelectMultiple(ocPartOccurrences)\nEnd Sub\n"], "author": "AlexFielder"},
{"created at": ["\u200e03-12-2019 10:28 PM"], "solution Title": "\n                        Re: Apprentice, Export BOM Mass defaults to kg\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": ["\u200e03-12-2019 08:15 AM", "\u200e03-12-2019 09:29 AM"], "solution Title": "\n                        Re: Replace borders in older drawings using iLogic\n                    ", "solution": ["ActiveSheet", ".", "SetBorder", "(", "\"<New Border Name>\"", ", ", "\"promptedEntry1\"", ", ", "\"promptedEntry2\"", ")"], "author": "blandb"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": ["\u200e03-12-2019 04:44 PM"], "solution Title": "\n                        Re: iLogic that will ask which parameters...\n                    ", "solution": ["oLength1", " = ", "InputBox", "(", "\"Select Length Parameter\"", ", ", "\"Ilogic Rule\"", ", ", "\"L1\"", ")\n\n", "oWidth1", " = ", "InputBox", "(", "\"Select Length Parameter\"", ", ", "\"Ilogic Rule\"", ", ", "\"A1\"", ")\n\n", "oThickness1", " = ", "InputBox", "(", "\"Select Length Parameter\"", ", ", "\"Ilogic Rule\"", ", ", "\"e1\"", ")\n\n", "oLength", " = ", "Parameter", ".", "Param", "(", "oLength1", ")\n", "oLength", ".", "ExposedAsProperty", " = ", "True", "\n", "oFormatLength", "=", "oLength", ".", "CustomPropertyFormat", "\n", "oFormatLength", ".", "PropertyType", "=", "Inventor", ".", "CustomPropertyTypeEnum", ".", "kTextPropertyType", "\n", "oFormatLength", ".", "Precision", "=", "Inventor", ".", "CustomPropertyPrecisionEnum", ".", "kZeroDecimalPlacePrecision", "\n", "oFormatLength", ".", "ShowUnitsString", "=", "False", "\n", "oFormatLength", ".", "ShowTrailingZeros", " = ", "False", "\n", "oFormatLength", ".", "ShowLeadingZeros", " = ", "False", "\n\n", "oWidth", " = ", "Parameter", ".", "Param", "(", "oWidth1", ")\n", "oWidth", ".", "ExposedAsProperty", " = ", "True", "\n", "oFormatWidth", "=", "oWidth", ".", "CustomPropertyFormat", "\n", "oFormatWidth", ".", "PropertyType", "=", "Inventor", ".", "CustomPropertyTypeEnum", ".", "kTextPropertyType", "\n", "oFormatWidth", ".", "Precision", "=", "Inventor", ".", "CustomPropertyPrecisionEnum", ".", "kZeroDecimalPlacePrecision", "\n", "oFormatWidth", ".", "ShowUnitsString", "=", "False", "\n", "oFormatWidth", ".", "ShowTrailingZeros", " = ", "False", "\n", "oFormatWidth", ".", "ShowLeadingZeros", " = ", "False", "\n\n", "oThickness", "= ", "Parameter", ".", "Param", "(", "oThickness1", ")\n", "oThickness", ".", "ExposedAsProperty", " = ", "True", "\n", "oFormatThickness", "=", "oThickness", ".", "CustomPropertyFormat", "\n", "oFormatThickness", ".", "PropertyType", "=", "Inventor", ".", "CustomPropertyTypeEnum", ".", "kTextPropertyType", "\n", "oFormatThickness", ".", "Precision", "=", "Inventor", ".", "CustomPropertyPrecisionEnum", ".", "kZeroDecimalPlacePrecision", "\n", "oFormatThickness", ".", "ShowUnitsString", "=", "False", "\n", "oFormatThickness", ".", "ShowTrailingZeros", " = ", "False", "\n", "oFormatThickness", ".", "ShowLeadingZeros", " = ", "False", "\n\n", "Dim", " ", "ovalue", " ", "As", " ", "String", " = ", "\"=UHMW, <\"", " & ", "oThickness1", " & ", "\">x<\"", " & ", "oWidth1", " & ", "\">x<\"", " & ", "oLength1", " & ", "\">\"", "\n\n", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Part Number\"", ") = ", "ovalue"], "author": "yuvilo_"},
{"created at": ["\u200e03-12-2019 09:21 AM"], "solution Title": "\n                        Re: Embossing - API\n                    ", "solution": [], "author": "tfrohe"},
{"created at": ["\u200e03-13-2019 01:11 AM"], "solution Title": "\n                        Re: Save as in macro works, save as it does not work in ilogic\n                    ", "solution": ["    ' Get the CommandManager object.\n    Dim oCommandMgr As CommandManager\n    oCommandMgr = ThisApplication.CommandManager\n\n    ' Get control definition for the line command.\n    Dim oControlDef As ControlDefinition\n    oControlDef = oCommandMgr.ControlDefinitions.Item(\"AppFileSaveAsCmd\")\n    ' Execute the command.\n\t'MsgBox (oControlDef.DisplayName)\n    oControlDef.Execute2(False)\n\t"], "author": "bradeneurope|Ar"},
{"created at": ["\u200e03-15-2019 06:20 AM"], "solution Title": "\n                        Re: Error when save a file\n                    ", "solution": ["Dim m_inventorApplication As Inventor.Application = Nothing\nm_inventorApplication = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\nDim oDoc As Document\noDoc = m_inventorApplication.ActiveDocument\noDoc.SaveAs(\"C:\\Temp\\TestFile.ipt\", True)"], "author": "GeorgK"},
{"created at": ["\u200e03-16-2019 09:50 AM"], "solution Title": "\n                        Re: Change veiw with Ilogic on part\n                    ", "solution": ["'set a reference to the part component definintion.", "\n", "Dim", " ", "oPartCompDef", " ", "As", " ", "PartComponentDefinition", "\n", "oPartCompDef", " = ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", "\n\n", "'define view rep collection", "\n", "Dim", " ", "oViewReps", " ", "As", " ", "DesignViewRepresentations", "\n", "oViewReps", " = ", "oPartCompDef", ".", "RepresentationsManager", ".", "DesignViewRepresentations", "\n\n", "Dim", " ", "NumberOfView", " = ", "oViewReps", ".", "Count", "\n\n", "For", " ", "i", "=1 ", "To", " ", "NumberOfView", " \n", "oViewReps", ".", "Item", "(", "i", ").", "Activate", "\n", "Next"], "author": "yuvilo_"},
{"created at": ["\u200e03-15-2019 01:38 PM"], "solution Title": "\n                        Re: Material/Appearance/Information/Name... physmat_?????\n                    ", "solution": ["Public Sub asse()\n\nDim a As Application\nSet a = ThisApplication\n\nDim oAsset As Asset\nDim oAssets As Assets\n\nSet al = a.AssetLibraries.Item(\"YOUR MATERIAL LIBRARY NAME\")\n\nDim m As MaterialAsset\nFor Each oAsset In al.MaterialAssets\nIf oAsset.DisplayName = \"YOUR MATERIAL\" Then\nDebug.Print oAsset.Name\nSet m = a.AssetLibraries.Item(\"YOUR MATERIAL LIBRARY NAME\").MaterialAssets.Item(oAsset.Name)\n\nMsgBox m.AppearanceAsset.DisplayName\nMsgBox m.DisplayName\nEnd If\n\nNext"], "author": "bradeneurope|Ar"},
{"created at": ["\u200e03-19-2019 05:13 AM", "\u200e03-19-2019 11:31 AM"], "solution Title": "\n                        Re: Unable to create balloon from workpoint\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": ["\u200e03-18-2019 11:17 AM"], "solution Title": "\n                        Re: Monitor for left click event\n                    ", "solution": [], "author": "dylanTEV9W"},
{"created at": ["\u200e03-18-2019 03:59 AM"], "solution Title": "\n                        Re: change sketch parameters (done in dwg file)\n                    ", "solution": ["d = InputBox(\"Enter d0\", \"Sketch dimensions\", \"4 in\")\nd1 = InputBox(\"Enter d1\", \"Sketch dimensions\", \"5 in\")\nd2 = InputBox(\"Enter d2\", \"Sketch dimensions\", \"35 deg\")\n\nDim oDoc As DrawingDocument\noDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\noSheet = oDoc.ActiveSheet\n\nDim oSketch As DrawingSketch\noSketch = oSheet.Sketches.Item(1) \n\nDim oConstraint As DimensionConstraint\nFor Each oConstraint In oSketch.DimensionConstraints\t\n    If oConstraint.Parameter.Name = \"d0\" Then\n        oConstraint.Parameter.Expression = d\n\tElse If oConstraint.Parameter.Name = \"d1\" Then\n        oConstraint.Parameter.Expression = d1 \n\tElse If oConstraint.Parameter.Name = \"d2\" Then\n    \toConstraint.Parameter.Expression = d2 \n    End If\nNext\nCall oSketch.Solve "], "author": "chandra.shekar."},
{"created at": ["\u200e03-18-2019 02:53 AM"], "solution Title": "\n                        Re: Sketchblockcolor\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n\n", "Dim", " ", "oBlocks", " ", "As", " ", "SketchBlockDefinitions", "\n", "oBlocks", "  ", "=", " ", "oDoc", ".", "ComponentDefinition", ".", "SketchBlockDefinitions", "\n\n", "oline", " ", "=", " ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "SelectionFilterEnum", ".", "kSketchBlockFilter", ", ", "\"", "Select a SketchBlock", "\"", ")", "\n", "oBlock01", "=", "oline", ".", "ContainingSketchBlock", "\n\n", "For", " ", "i", "=", "1", " ", "To", " ", "oBlocks", ".", "count", "\n    ", "If", " ", "InStr", "(", "1", ",", "oBlock01", ".", "Name", " ,", "oBlocks", ".", "item", "(", "i", ")", ".", "Name", ")", " ", ">", " ", "0", " ", "Then", "\n        ", "Dim", " ", "skbd", " ", "As", " ", "SketchBlockDefinition", "\n        ", "skbd", " ", "=", " ", "oBlocks", ".", "Item", "(", "i", ")", "\n        ", "Dim", " ", "oColor", " ", "As", " ", "Color", "\n        ", "oColor", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateColor", "(", "255", ", ", "0", ", ", "0", ")", " ", "'", "Red", "\n        ", "skbd", ".", "Color", " ", "=", " ", "oColor", "\n        ", "InventorVb", ".", "DocumentUpdate", "()", "\n    ", "End", " ", "If", "\n", "Next", "\n\n\n"], "author": "vulic"},
{"created at": ["\u200e03-13-2019 05:58 AM"], "solution Title": "\n                        Re: insert on mouse position\n                    ", "solution": ["oPathandName = \"\\\\samba\\dise\u00f1o\\Inventor\\530 CABALLETES\\530.09_D\\530.09D.05.12 Parante B.ipt\"", "ThisApplication", ".", "CommandManager", ".", "PostPrivateEvent", "(", "PrivateEventTypeEnum", ".", "kFileNameEvent", ",", "oPathandName", ") \n\n", "ThisApplication", ".", "CommandManager", ".", "ControlDefinitions", ".", "Item", "(", "\"AssemblyPlaceComponentCmd\"", ").", "Execute"], "author": "yuvilo_"},
{"created at": ["\u200e03-18-2019 07:16 AM"], "solution Title": "\n                        Re: Write parameters to multiple drawings\n                    ", "solution": ["Dim", " ", "processPath", " ", "As", " ", "String", " \n", "processPath", " = ", "ThisDoc", ".", "Path", "  ", "'''", "Specify the path of the folder", "\n\n", "Dim", " ", "drawings", " () ", "As", " ", "String", " = ", "System", ".", "IO", ".", "Directory", ".", "GetFiles", "(", "processPath", ",", "\"*.idw\"", ",", "System", ".", "IO", ".", "SearchOption", ".", "AllDirectories", ") \t\n\t\n", "For", " ", "Each", " ", "drawing", " ", "As", " ", "String", " ", "In", " ", "drawings", " \n\t", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n\t", "oDoc", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "drawing", ", ", "True", ")\n\t", "Dim", " ", "oDescription", " ", "As", " ", "String", "\n\t", "oDescription", " = ", "\"Description123\"", "\n\t", "oDoc", ".", "PropertySets", ".", "Item", "(", "\"Design Tracking Properties\"", ").", "Item", "(", "\"Description\"", ").", "Value", " = ", "oDescription", "\n\t", "oDoc", ".", "Save", "\n\t", "oDoc", ".", "Close", "\n", "Next"], "author": "yuvilo_"},
{"created at": ["\u200e03-21-2019 06:38 AM"], "solution Title": "\n                        Re: Change view back to aktive view before running ilogic(Add colur to all View)\n                    ", "solution": ["Dim doc As PartDocument\n doc = ThisApplication.ActiveDocument\n ' get AssemblyComponentDefinition\n Dim partDef As PartComponentDefinition \n partDef = doc.ComponentDefinition\n ' get Manager of Representations\n Dim dViewRepMgr As RepresentationsManager\n  dViewRepMgr = partDef.RepresentationsManager\n\nDim dViewRep As DesignViewRepresentation\n dViewRep = dViewRepMgr.ActiveDesignViewRepresentation\n \nDim oName As String \noName = dViewRep.Name \n\n' get the first Representation view\n  dViewRep = dViewRepMgr.DesignViewRepresentations.Item(oName)\n ' activate the first view\n dViewRep.Activate"], "author": "chandra.shekar."},
{"created at": ["\u200e03-20-2019 06:20 AM"], "solution Title": "\n                        Re: Match part color to another part in assembly\n                    ", "solution": ["Sub SetAppearance()\n    Dim occ1 As ComponentOccurrence\n    Set occ1 = ThisApplication.CommandManager.Pick(kAssemblyLeafOccurrenceFilter, \"Select an occurrence to copy appearance\")\n    \n    Dim occ2 As ComponentOccurrence\n    Set occ2 = ThisApplication.CommandManager.Pick(kAssemblyLeafOccurrenceFilter, \"Select an occurrence to paste appearance\")\n    \n    On Error GoTo ErrHandler\n    occ2.Appearance = occ1.Appearance\n    Exit Sub\n    \nErrHandler:\n    MsgBox (\"Original appearance is invalid, please select another\")\nEnd Sub\n"], "author": "tdant"},
{"created at": ["\u200e03-19-2019 06:46 AM"], "solution Title": "\n                        Re: Multiple Add-ins calling same Events\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": ["\u200e03-21-2019 11:39 PM"], "solution Title": "\n                        Re: Reference model in a drawing document\n                    ", "solution": ["oView = ThisApplication.ActiveView \nmodel = oView.Document.ActiveSheet.DrawingViews.Item(1).ReferencedFile.ReferencedDocument"], "author": "tomasz.dabrowsk"},
{"created at": ["\u200e03-20-2019 08:05 AM"], "solution Title": "\n                        Re: Adding parts items to BOM based on parameters in other parts?\n                    ", "solution": [], "author": "mneesley"},
{"created at": ["\u200e03-20-2019 10:47 AM"], "solution Title": "\n                        Re: Command opposite to FormatAsFraction\n                    ", "solution": ["Function ConvertFraction(inputString As String) As Double\n\tDim splitResult() As String = inputString.Split(\" \")\n\tDim fractionResult() As String = splitResult(UBound(splitResult)).Split(\"/\")\n\t\n\tDim whole As Integer = 0\n\tIf splitResult.Length > 1 Then\n\t\twhole = CInt(splitResult(LBound(splitResult)))\n\tEnd If\n\t\n\tDim denominator As Integer = CInt(fractionResult(UBound(fractionResult)))\n\tDim numerator As Integer = CInt(fractionResult(LBound(fractionResult)))\n\t\n\tConvertFraction = whole + (numerator / denominator)\nEnd Function"], "author": "tdant"},
{"created at": ["\u200e03-21-2019 12:17 AM", "\u200e03-21-2019 07:34 AM"], "solution Title": "\n                        Re: Traverse Assembly and create total cost while filtering some properties\n                    ", "solution": ["Sub", " ", "Main", " ", "TraverseAssemblySample", "()\n    ", "' Get the active assembly.", "\n    ", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", "\n    ", "oAsmDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n    ", "Dim", " ", "oCost", " ", "As", " ", "Decimal", "\n\n    ", "' Call the function that does the recursion.", "\n    ", "oCost", " = ", "TraverseAssembly", "(", "oAsmDoc", ".", "ComponentDefinition", ".", "Occurrences", ")\n\n    ", "MsgBox", "(", "oCost", ")\n", "End", " ", "Sub", "\n\n", "Private", " ", "Function", " ", "TraverseAssembly", "(", "ByVal", " ", "Occurrences", " ", "As", " ", "ComponentOccurrences", ") ", "As", " ", "Decimal", "\n    ", "' Iterate through all of the occurrence in this collection.  This", "\n    ", "' represents the occurrences at the top level of an assembly.", "\n\t", "Dim", " ", "oCost", " ", "As", " ", "Decimal", " = 0\n    ", "For", " ", "Each", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", " ", "In", " ", "Occurrences", "\n\n", "' Skip Phantom and reference parts.", "\n", "If", " ", "oOcc", ".", "BOMStructure", " = ", "BOMStructureEnum", ".", "kPhantomBOMStructure", " _ \n", "Or", " ", "oOcc", ".", "BOMStructure", " = ", "BOMStructureEnum", ".", "kReferenceBOMStructure", " ", "Then", "\n\n                  \n\n                ", "Else", "\n        ", "' The occurrence is valid count the cost.", "\n        ", "' Get the document file for this occurrence", "\n        ", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n        ", "oDoc", " = ", "oOcc", ".", "Definition", ".", "Document", "\n\n        ", "' Get the iPropertySet that constains the estimated cost property", "\n        ", "Dim", " ", "oPropSet", " ", "As", " ", "PropertySet", "\n        ", "oPropSet", " = ", "oDoc", ".", "PropertySets", ".", "Item", "(", "\"Design Tracking Properties\"", ")\n\n        ", "' Get the cost of this occurrence", "\n        ", "oCost", " += ", "oPropSet", ".", "Item", "(", "\"Cost\"", ").", "Value", "\n\n         ", "End", " ", "If", "\n\n        ", "' Check to see if this occurrence represents a subassembly", "\n        ", "' and recursively call this function to traverse through it.", "\n        ", "If", " ", "oOcc", ".", "DefinitionDocumentType", " = ", "kAssemblyDocumentObject", " ", "Then", "\n           ", "oCost", " += ", "TraverseAssembly", "(", "oOcc", ".", "Definition", ".", "Occurrences", ")\n        ", "End", " ", "If", "\n    ", "Next", "\n\t", "Return", " ", "oCost", "\n", "End", " ", "Function", "Sub", " ", "Main", " ", "TraverseAssemblySample", "()\n\t", "' Get the active assembly.", "\n\t", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", "\n\t", "oAsmDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n\t", "Dim", " ", "oCost", " ", "As", " ", "Decimal", "\n\n\t", "' Call the function that does the recursion.", "\n\t", "oCost", " = ", "TraverseAssembly", "(", "oAsmDoc", ".", "ComponentDefinition", ".", "Occurrences", ")\n\n\t", "MsgBox", "(", "oCost", ")\n", "End", " ", "Sub", "\n\n", "Private", " ", "Function", " ", "TraverseAssembly", "(", "ByVal", " ", "Occurrences", " ", "As", " ", "ComponentOccurrences", ") ", "As", " ", "Decimal", "\n\t", "' Iterate through all of the occurrence in this collection.  This", "\n\t", "' represents the occurrences at the top level of an assembly.", "\n\t", "Dim", " ", "oCost", " ", "As", " ", "Decimal", " = 0\n\t", "For", " ", "Each", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", " ", "In", " ", "Occurrences", "\n\n\t\t", "Try", "\n\t\t\t", "' Skip Phantom and reference parts.", "\n\t\t\t", "If", " ", "oOcc", ".", "BOMStructure", " = ", "BOMStructureEnum", ".", "kPhantomBOMStructure", " _\n\t\t\t\t", "Or", " ", "oOcc", ".", "BOMStructure", " = ", "BOMStructureEnum", ".", "kReferenceBOMStructure", " ", "Then", "\n\n\n\n\t\t\t", "Else", "\n\t\t\t\t", "' The occurrence is valid count the cost.", "\n\t\t\t\t", "' Get the document file for this occurrence", "\n\t\t\t\t", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n\t\t\t\t", "oDoc", " = ", "oOcc", ".", "Definition", ".", "Document", "\n\n\t\t\t\t", "' Get the iPropertySet that constains the estimated cost property", "\n\t\t\t\t", "Dim", " ", "oPropSet", " ", "As", " ", "PropertySet", "\n\t\t\t\t", "oPropSet", " = ", "oDoc", ".", "PropertySets", ".", "Item", "(", "\"Design Tracking Properties\"", ")\n\n\t\t\t\t", "' Get the cost of this occurrence", "\n\t\t\t\t", "oCost", " += ", "oPropSet", ".", "Item", "(", "\"Cost\"", ").", "Value", "\n\n\t\t\t", "End", " ", "If", "\n\n\t\t\t", "' Check to see if this occurrence represents a subassembly", "\n\t\t\t", "' and recursively call this function to traverse through it.", "\n\t\t\t", "If", " ", "oOcc", ".", "DefinitionDocumentType", " = ", "kAssemblyDocumentObject", " ", "Then", "\n\t\t\t\t", "oCost", " += ", "TraverseAssembly", "(", "oOcc", ".", "Definition", ".", "Occurrences", ")\n\t\t\t", "End", " ", "If", "\n\t\t", "Catch", "\n\n\t\t", "End", " ", "Try", "\n\t", "Next", "\n\n\t", "Return", " ", "oCost", "\n", "End", " ", "Function"], "author": "jhoel.forshav"},
{"created at": ["\u200e03-21-2019 08:33 AM"], "solution Title": "\n                        Re: How to create the most dead-simple add-in possible\n                    ", "solution": [], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: VBA Drawing Document \"Save\" Action?\n                    ", "solution": [], "author": "TA.Fehr"},
{"created at": ["\u200e03-21-2019 05:30 AM", "\u200e03-21-2019 05:47 AM"], "solution Title": "\n                        Re: Inventor 2017 changed to Professional. Some macros does not work anymore.\n                    ", "solution": ["Function GetiLogicAddin(oApplication As Inventor.Application) As Object\nSet addIns = oApplication.ApplicationAddIns", "Function GetiLogicAddin(oApplication As Inventor.Application) As Object\nDim addIns As ApplicationAddIns 'Variable needed to be dimmed.\nSet addIns = oApplication.ApplicationAddIns"], "author": "florian.steinho"},
{"created at": [], "solution Title": "\n                        Re: VB.Net Addin - Get reference to open form\n                    ", "solution": [], "author": "TA.Fehr"},
{"created at": [], "solution Title": "\n                        Re: iAssembly Factory Excel table \"IID\" location\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Changing start cell with ilogic\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: To RETRIEVE BOM STRUCTURE DATA (for OCCURRENCES) in to a notepad document\n                    ", "solution": ["Imports System.Windows.Forms\nSub Main()\n\tTry\n\t\t'This will create the class BOMCrawler, and run its Public Sub New all in one line of code.\n\t\tDim oBOMCrawler As New BOMCrawler\n\t\t'this will add the active document, because a class can not use the values This... without them being passed in\n\t\toBOMCrawler.oAssy_ThisDoc = ThisApplication.ActiveDocument\n\t\toBOMCrawler.CrawlBOM\n\tCatch ex As Exception\n\t\tMsgBox (\"Sub Main\" & vbCrLf & ex.ToString)\n\tEnd Try\nEnd Sub\n\t\n'use a class here when you want to define public variables that all other routines (subs and function) can read or modify.\t\nPublic Class BOMCrawler\n\t\t\n\tPublic Property oTextSave As String \n\tPublic Property iLNO As String \n\tPublic Property oName_Sub As String 'used for error reporting\n\tPublic Property oIndex As Integer 'used for error reporting\n\tPublic Property oTitle As String 'used for error reporting\n\tPublic Property oAssy_ThisDoc As AssemblyDocument \n\tPublic Property oAssy_CompDef As AssemblyComponentDefinition \n\tPublic Property BOM_Structure_SourceDoc As String \n\t\n''' <summary>\n''' Initialize public variables\n''' </summary>\t\n\tPublic Sub New\n\t\tTry\n\t\t\toTextSave  = \"C:\\Users\\Public\\Documents\\iLogicBuffer.txt\"\n\t\t\tiLNO  = \"0003-BOM\"\n\t\t\toName_Sub = \"New BOM Crawler\"\n\t\t\toIndex = 1\n\t\t\toTitle = iLNO & \"-\" & oIndex & \" @ SUB: \" & oName_Sub\n\t\tCatch ex As Exception\n\t\t\tMsgBox(oName_Sub & vbCrLf & oTitle & vbCrLf & ex.ToString)\n\t\tEnd Try\n\tEnd Sub\n\t\n\t''' <summary>\n\t''' Process the export of the BOM data to the specified text file\n\t''' </summary>\n\tPublic Sub CrawlBOM\n\t\toName_Sub = \"CrawlBOM\"\n\t\tTry\n\t\t\t'Get assembly component definition\n\t\t\tMe.oAssy_CompDef = oAssy_ThisDoc.ComponentDefinition \n\t\t\tMainDoc 'for main document BOM structure\n\t\t\t'crawl through the component occurrences\n\t\t\tFor i As Integer = 1 To oAssy_CompDef.Occurrences.Count\n\t\t\t\tDim occ As ComponentOccurrence = oAssy_CompDef.Occurrences(i)\n\t\t\t\tMsgBox(occ.Name & \" - \" & GetBOMType(occ.BOMStructure))\n\t\t\t\tRecurReferencing(occ, 0)\n\t\t\tNext\n\t\t\t'open Notepad to the new text file\n\t\t\tProcess.Start(\"Notepad.exe\", oTextSave)\t\n\t\tCatch ex As Exception\n\t\t\tMsgBox(oName_Sub & vbCrLf & oTitle & vbCrLf & ex.ToString)\n\t\tEnd Try\n\tEnd Sub\n\t\n\tSub RecurReferencing(oCompOcc As ComponentOccurrence, Level As Integer)\n\t\tTry\n\t\t\t'error header\n\t\t\toName_Sub = \"RecurReferencing\"\n\t\t\toIndex = 1\n\t\t\toTitle = iLNO & \"-\" & oIndex  & \" @ Sub: \" & oName_Sub\n\n\t\t\t'get bom type\n\t\t\tDim oFFN_cw_EXT As String = oCompOcc.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\t'cw file extension\n\t\t\tDim oStr As String = oDoc_LocalName_WExt(oFFN_cw_EXT)\n\t\t\tDim BOM_Structure_Return As String = Func_BOM_Structure(oCompOcc)\n\n\t\t\t'specify word splitting characters \"space\" and \"dash\"\n\t\t\tDim Separators() As Char = {\"*\"c} \n\t\t\tDim Sentence As String = BOM_Structure_Return\n\t\t\tDim Words() As String = Sentence.Split(Separators)\n\t\t\tDim BOM_Structure As String = Words(0)\n\t\t\tDim oOccurrence_FFN As String = Words(1)\n\n\t\t\tIf Level = 0\t \t\t\t\n\t\t\t\tBOM_Structure = oOccurrence_FFN & \" <- \" & \"BOM Structure: \" & BOM_Structure\n\t\t\t\t'error header\n\t\t\t\toIndex = 2\n\t\t\t\toTitle = iLNO & \"-\" & oIndex & \" @ Sub: \" & oName_Sub\n\t\t\t\toExtension = Right(oOccurrence_FFN, 3)\n\t\t\tElse\n\t\t\t\tMessageBox.Show(\"@ ELSE\", \"Title\")\n\t\t\t\tIf oCompOcc.BOMStructure = BOMStructureEnum.kDefaultBOMStructure Then\n\t\t\t\t\tBOM_Structure = oOccurrence_FFN & \" <- \" & BOM_Structure & \"(BOM STATUS: Default)\"\n\t\t\t\tElseIf oCompOcc.BOMStructure = BOMStructureEnum.kInseparableBOMStructure Then\n\t\t\t\t\tBOM_Structure = oOccurrence_FFN & \" <- \" & BOM_Structure & \"(BOM STATUS: Inseparable)\"\n\t\t\t\tElseIf oCompOcc.BOMStructure = BOMStructureEnum.kNormalBOMStructure Then\n\t\t\t\t\tBOM_Structure = oOccurrence_FFN & \" <- \" & BOM_Structure & \"(BOM STATUS: Normal)\"\n\t\t\t\tElseIf oCompOcc.BOMStructure = BOMStructureEnum.kPhantomBOMStructure Then\n\t\t\t\t\tBOM_Structure = oOccurrence_FFN & \" <- \" & BOM_Structure & \"(BOM STATUS: Phantom)\"\t\t\t\t\n\t\t\t\tElseIf oCompOcc.BOMStructure = BOMStructureEnum.kPurchasedBOMStructure Then\n\t\t\t\t\tBOM_Structure = oOccurrence_FFN & \" <- \" & BOM_Structure & \"(BOM STATUS: Purchased)\"\n\t\t\t\tElseIf oCompOcc.BOMStructure = BOMStructureEnum.kVariesBOMStructure Then\n\t\t\t\t\tBOM_Structure = oOccurrence_FFN & \" <- \" & BOM_Structure & \"(BOM STATUS: Varies)\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf Level = 0\t \t\t\t\n\t\t\t'\t\tMessageBox.Show(\"oStr @ Level = 0: \" & BOM_Str_Return, oTitle)\n\t\t\t\tBOM_Str_Return =  oOcc_FFN_X_Return & \"(BOM STATUS: \" & BOM_Str_Return & \")\"\n\t\t\tElse\n\t\t\t\tMessageBox.Show(\"oStr @ Level: \" & Level _\n\t\t\t\t& vbLf & \"oStr: \" & oStr, oTitle)\n\t\t\t\tBOM_Str_Return = oOcc_FFN_X_Return & BOM_Str_Return & \")\"\n\t\t\tEnd If\n\n\t\t\tIf oCompOcc.SubOccurrences.Count = 0\n\t\t\t\tUsing oWrite = System.IO.File.AppendText(oTextSave)\n\t\t\t\t\toWrite.WriteLine(BOM_Structure)\t\n\t\t\t\t\toWrite.Flush()\n\t\t\t\tEnd Using\n\t\t\tElse\n\t\t\t\tFor Each oSubocc In oCompOcc.Definition.Occurrences\n\t\t\t\t\tRecurReferencing(oSubocc, Level + 1)\n\t\t\t\tNext\n\t\t\tEnd If\n\t\tCatch ex As Exception\n\t\t\tMsgBox(oName_Sub & vbCrLf & oTitle & vbCrLf & ex.ToString)\n\t\tEnd Try\n\tEnd Sub\n\t\n\t''' <summary>\n\t''' Get and format sub path of file including file name and extension\n\t''' </summary>\n\t''' <param name=\"oFFN_cw_EXT\">Full file path</param>\n\tFunction oDoc_LocalName_WExt(oFFN_cw_EXT As String)\n\t\t'error header\n\t\toName_Sub = \"oDoc_LocalName_WExt\"\n\t\toTitle = iLNO & \" @ SUB: \" & oName_Sub\n\t\t\n\t\t'get sub path of file including file name and extension\n\t\toPos = Len(oFFN_cw_EXT) - InStrRev(oFFN_cw_EXT, \"\\\", -1)\n\t\toName_Local_cw_Ext = Right(oFFN_cw_EXT, oPos)\n\t\tReturn oName_Local_cw_Ext 'Local file name complete with extension\n\tEnd Function\n\t\t\n\t''' <summary>\n\t''' Get BOM Structure Enum and combine with full file name\n\t''' </summary>\n\t''' <param name=\"oCompOcc\"></param>\n\t", "Function Func_BOM_Structure(oCompOcc As ComponentOccurrence)\n", "\t    'error header\n\t\toName_Sub = \"BOM_Structure\"\n\t\toIndex = 1\n\t\toTitle = iLNO & \"=\" & oIndex & \" @ Sub: \" & oName_Sub\n\t\t'get full file name\n\t\toFFN_X = oCompOcc.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\n\t\t", "Dim BOM_Structure As String = GetBOMType(oCompOcc.BOMStructure)", "\n\t\toDoc_LocalName_WExt(oFFN_X)\n\t\tDim BOM_Structure_Return As String = BOM_Structure & \"*\" & oFFN_X\n\t\tReturn BOM_Structure_Return\n\tEnd Function\n\t\n\t''' <summary>\n\t''' Process the top file of the BOM tree, then initialize and save data to file.  This method does not return a value.\n\t''' </summary>\n\tSub MainDoc()\n\t\t'To retrieve BOM structure of current documrny\n\t\toName_Sub = \"MainDoc()\"\n\t\toIndex = 1\n\t\toTitle = iLNO & \"-\" & oIndex & \" @ SUB: \" & oName_Sub\n\t\tDim BOM_Structure_SourceDoc As String = GetBOMType(Me.oAssy_CompDef.BOMStructure)\n\n\t\t'Dim oModel_Occurence As ComponentOccurrence \n\t\tDim oFFN As String = oAssy_ThisDoc.FullFileName\n\t\tDim oPos_FFN As Integer = InStrRev(oFFN, \"\\\", - 1)\n\t\tDim docFName As String = Right(oFFN, Len(oFFN) - oPos_FFN)\n\t\tClipboard.SetText(docFName)\n\t\tUsing oWrite As System.IO.StreamWriter = System.IO.File.CreateText(oTextSave)\t\n\t\t\toWrite.WriteLine(\"FILE REFERENCE TREE RAN FROM: \" & oFFN)\n\t\t\tDim docFName_cw_BOM As String = docFName & \" <- \" & \"(BOM STATUS: \" & BOM_Structure_SourceDoc & \")\"\n\t\t\toWrite.WriteLine(docFName_cw_BOM) \n\t\t\toWrite.WriteLine(\"---------------------------------------------------------------------------------------------------------------------\")\n\t\tEnd Using\n\tEnd Sub\n\t\n\t''' <summary>\n\t''' Get the BOM type string from the BOMStructureEnum\n\t''' </summary>\n\t''' <param name=\"oBomStructure\">BOMStructure(Enum) from component occurrence</param>\n\t''' <returns></returns>\n\tPublic Function GetBOMType(oBomStructure As Inventor.BOMStructureEnum) As String\n\t\tDim BOM_Structure_SourceDoc As String = \"Unknown BOM Structure\"\n\t\t'Select BOM Structure \n\t\tSelect Case oBomStructure\n\t\t\tCase = BOMStructureEnum.kDefaultBOMStructure\n\t\t\t\tBOM_Structure_SourceDoc = \"Default\"\n\t\t\tCase = BOMStructureEnum.kNormalBOMStructure\n\t\t\t\tBOM_Structure_SourceDoc = \"Normal\"\n\t\t\tCase = BOMStructureEnum.kPhantomBOMStructure\n\t\t\t\tBOM_Structure_SourceDoc = \"Phantom\"\n\t\t\tCase = BOMStructureEnum.kReferenceBOMStructure\n\t\t\t\tBOM_Structure_SourceDoc = \"Reference\"\n\t\t\tCase = BOMStructureEnum.kPurchasedBOMStructure\n\t\t\t\tBOM_Structure_SourceDoc = \"Purchased\"\n\t\t\tCase = BOMStructureEnum.kInseparableBOMStructure\n\t\t\t\tBOM_Structure_SourceDoc = \"Inseparable\"\n\t\t\tCase = BOMStructureEnum.kVariesBOMStructure\n\t\t\t\tBOM_Structure_SourceDoc = \"Varies\" \n\t\tEnd Select\n\t\tReturn BOM_Structure_SourceDoc\n\tEnd Function\n\t\t\t\t\nEnd Class"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Odd Number Pattern\n                    ", "solution": ["Dim", " ", "testQty", " ", "As", " ", "Integer", " = 11\n\n", "If", " ", "testQty", " ", "Mod", " 2 <> 0 ", "Then", "\n\t", "testQty", " = ", "testQty", " - 1\n", "End", " ", "If", "\n\n", "MessageBox", ".", "Show", "(", "testQty", ", ", "\"Title\"", ")", "Qty = round(Height/Spacing)\n\nIf Qty Mod 2 <> 0 Then Qty -= 1"], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Betreff: Write to Notepad keeps growing every time the rule is run\n                    ", "solution": ["Dim FileDelete As String\n\nFileDelete = \"C:\\testDelete.txt\"\n\n If System.IO.File.Exists( FileDelete ) = True Then\n   System.IO.File.Delete( FileDelete )\n   MsgBox(\"File Deleted\")\nEnd If"], "author": "GeorgK"},
{"created at": ["\u200e02-25-2019 08:05 AM"], "solution Title": "\n                        Re: How to Write an iLogic Rule with a Loop that Outputs a Table of Values to Ex\n                    ", "solution": ["InventorVb", ".", "DocumentUpdate", "()\n", "Feature", ".", "IsActive", "(", "\"Split1\"", ") = ", "True", "\n\n", "i", " = 0\n", "Parameter", "(", "\"Offset\"", ") = ", "i", " * (1 in / 1 ul)\n", "GoExcel", ".", "Open", "(", "\"Table.xlsx\"", ", ", "\"Sheet1\"", ")\n", "String1", " = ", "\"A4\"", "\n", "String2", " = ", "\"B4\"", "\n\n", "GoExcel", ".", "CellValue", "(", "String1", ") = ", "Parameter", "(", "\"Offset\"", ")\n", "GoExcel", ".", "CellValue", "(", "String2", ") = ", "Round", "(", "iProperties", ".", "Volume", " / 231, 1)\n", "Parameter", "(", "\"Full\"", ") = ", "Round", "(", "iProperties", ".", "Volume", " / 231, 1)\n\n", "Height", " = ", "H2H", "\n", "Inc", " = 1\n\n", "Do", " ", "Until", " ", "Parameter", "(", "\"Offset\"", ") > ", "Height", "\n        ", "GoExcel", ".", "CellValue", "(", "String1", ") = ", "Parameter", "(", "\"Offset\"", ")\n        ", "GoExcel", ".", "CellValue", "(", "String2", ") = ", "Round", "(", "iProperties", ".", "Volume", " / 231, 1)\n        ", "i", " = ", "i", " + ", "Inc", "\n        ", "Parameter", "(", "\"Offset\"", ") = ", "i", " * (1 in    / 1 ul)\n        \n        ", "Dim", " ", "myChars", "() ", "As", " ", "Char", " = ", "String1", ".", "ToCharArray", "()\n        ", "Dim", " ", "resultString", " ", "As", " ", "String", " = ", "\"\"", "\n        ", "For", " ", "Each", " ", "ch", " ", "As", " ", "Char", " ", "In", " ", "myChars", "\n             ", "If", " ", "Char", ".", "IsDigit", "(", "ch", ") ", "Then", "\n                  ", "resultString", " = ", "resultString", " & ", "ch", "\n             ", "End", " ", "If", "\n        ", "Next", "\n        ", "A", " = ", "CStr", "(", "resultString", ") + ", "Inc", "\n        ", "String1", " = ", "Left", "(", "String1", ",1) & ", "CStr", "(", "A", ")\n        ", "String2", " = ", "Left", "(", "String2", ",1) & ", "CStr", "(", "A", ")\n\n        ", "InventorVb", ".", "DocumentUpdate", "(", "False", ")    ", "'required to get current mass properties", "\n", "Loop", "\n\n", "GoExcel", ".", "CellValue", "(", "String1", ") = ", "Parameter", "(", "\"Offset\"", ")\n", "GoExcel", ".", "CellValue", "(", "String2", ") = ", "Parameter", "(", "\"Full\"", ")\n", "GoExcel", ".", "CellValue", "(", "\"B4\"", ") = 0\n\n", "GoExcel", ".", "Save", "\n", "GoExcel", ".", "Close", "\n\n", "Feature", ".", "IsActive", "(", "\"Split1\"", ") = ", "False", "\n"], "author": "Buckeyefab-SLM"},
{"created at": [], "solution Title": "\n                        Re: How to set message box on top in inventor vb.net\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: How to pattern component from feature using VBA\n                    ", "solution": ["        Dim oPartFeatures As PartFeatures\n        Set oPartFeatures = oCompDef.Features\n        Dim oPF As PartFeature\n        For Each oPF In oPartFeatures\n            Debug.Print oPF.Type\n            If oPF.Type = kCircularPatternFeatureObject Then\n                Debug.Print oPF.ParentFeatures.Item(1).Name\n            End If\n        \n            If oPF.Type = kRectangularPatternFeatureObject Then\n                Debug.Print oPF.ParentFeatures.Item(1).Name\n            End If\n            \n            If oPF.Type = kSketchDrivenPatternFeatureObject Then\n                Debug.Print oPF.ParentFeatures.Item(1).Name\n            End If\n        Next", "Public Sub PartPatternTest()\n    \n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oPartOcc As ComponentOccurrence\n    \n    'Component to be patterned must be selected first\n    Set oPartOcc = oDoc.SelectSet.Item(1)\n    \n    Dim oAssyCompDef As AssemblyComponentDefinition\n    Set oAssyCompDef = oDoc.ComponentDefinition\n    \n    'Create an object collection\n    Dim objCol As ObjectCollection\n    Set objCol = ThisApplication.TransientObjects.CreateObjectCollection\n  \n    'Add the desired occurrence to be patterned\n    objCol.Add oPartOcc\n    \n    Dim oAxisProxy As WorkAxisProxy 'I used component axis to constrain the component\n    Dim oFaceProxy As FaceProxy\n    Dim oConstraint As AssemblyConstraint\n    Dim oProxyFeature As Object\n        \n    For Each oConstraint In oPartOcc.Constraints\n        Debug.Print oConstraint.Name\n        If oConstraint.Type = kMateConstraintObject Then\n            If oConstraint.EntityOne.Type = kWorkAxisProxyObject Then\n                Set oAxisProxy = oConstraint.EntityOne\n                Set oFaceProxy = oPartOcc.Constraints.Item(2).EntityTwo\n            Else\n                Set oAxisProxy = oConstraint.EntityTwo\n                Set oFaceProxy = oPartOcc.Constraints.Item(2).EntityOne\n            End If\n        End If\n    Next\n    \n    Dim oFeature As PartFeature 'This can be hole feature or pattern feature\n    Set oFeature = oFaceProxy.CreatedByFeature\n    \n    Dim oParentHole As HoleFeatureProxy\n    \n    If oFeature.Type = kHoleFeatureProxyObject Then\n        ' Get pattern if present for this hole\n        Dim oParent As ComponentDefinition\n        Set oParent = oFeature.Parent\n        \n        Dim oFeatToBe As PartFeature\n        Dim oPartFeatures As PartFeatures\n        Set oPartFeatures = oParent.Features\n        \n        Dim oPF As PartFeature\n        \n        Dim oPFRecProxy As RectangularOccurrencePatternProxy\n        Dim oPFCirProxy As CircularOccurrencePatternProxy\n        Dim oPFSketchProxy As SketchDrivenPatternFeatureProxy\n        \n        For Each oPF In oPartFeatures\n            Debug.Print oPF.Type\n            If oPF.Type = kCircularPatternFeatureObject Then\n                Debug.Print oPF.ParentFeatures.Item(1).Name\n                If oFeature.Name = oPF.ParentFeatures.Item(1).Name Then\n                    'MsgBox (\"Match!: \" & oFeature.Name)\n                    Set oFeatToBe = oPF 'CirProxy\n                End If\n            End If\n        \n            If oPF.Type = kRectangularPatternFeatureObject Then\n                Debug.Print oPF.ParentFeatures.Item(1).Name\n                If oFeature.Name = oPF.ParentFeatures.Item(1).Name Then\n                    'MsgBox (\"Match!: \" & oFeature.Name)\n                    Set oFeatToBe = oPF 'RecProxy\n                End If\n            End If\n            \n            If oPF.Type = kSketchDrivenPatternFeatureObject Then\n                Debug.Print oPF.ParentFeatures.Item(1).Name\n                If oFeature.Name = oPF.ParentFeatures.Item(1).Name Then\n                    'MsgBox (\"Match!: \" & oFeature.Name)\n                    Set oFeatToBe = oPF 'SketchProxy\n                End If\n            End If\n        Next\n    Else\n        'oFeature is already a proxy pattern\n        Set oProxyFeature = oFeature\n        \n        'Get surface of first hole from pattern - in this case oFeature is pattern\n        Set oParentHole = oFeature.ParentFeatures.Item(1)\n        Dim oParentFace As FaceProxy\n        Set oParentFace = oParentHole.Faces.Item(1)\n        \n        ' Delete existing constraint\n        For Each oConstraint In oPartOcc.Constraints\n            If oConstraint.Type = kMateConstraintObject Then\n                Call oConstraint.Delete\n            End If\n        Next\n        \n        ' Create the insert constraint between the parts.\n        Call MateAxisConstraint(oParentFace, oAxisProxy)\n    End If\n    \n    If oFeature.Type = kHoleFeatureProxyObject Then\n        If oFeatToBe Is Nothing Then\n            'Do nothing - there is no pattern for the hole\n            Exit Sub\n        Else\n            Call oAssyCompDef.Occurrences.Item(1).CreateGeometryProxy(oFeatToBe, oProxyFeature)\n        End If\n    End If\n        \n    ' Pattern component\n    Call oAssyCompDef.OccurrencePatterns.AddFeatureBasedPattern(objCol, oProxyFeature)\n    \nEnd Sub\n\nPublic Sub MateAxisConstraint(oBrepEnt1 As Object, oBrepEnt2 As Object)\n    \n    ' Set a reference to the assembly component definintion.\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n    ' Create the insert constraint between the parts.\n    Dim oMate As MateConstraint\n    Set oMate = oAsmCompDef.Constraints.AddMateConstraint(oBrepEnt1, oBrepEnt2, 0, kInferredLine, kInferredLine)\n    \nEnd Sub"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: iLogic not finding certain excel values\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: How to change the panel of instrument?\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Exception from HRESULT: 0x80004005 Error\n                    ", "solution": [], "author": "johan.gunnar"},
{"created at": [], "solution Title": "\n                        Re: Revise drawing to new revision letter\n                    ", "solution": ["Rev", " = ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Revision Number\"", ")\n", "MessageBox", ".", "Show", "(", "Rev", ", ", "\"Current revision\"", ")\n\n", "Dim", " ", "NextRev", " ", "As", " ", "String", "\n", "NextRev", " = ", "Chr", "(", "Asc", "(", "Rev", ") + 1)\n", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Revision Number\"", ") = ", "NextRev", "\n", "MessageBox", ".", "Show", "(", "NextRev", ", ", "\"Next revision\"", ")"], "author": "yuvilo_"},
{"created at": [], "solution Title": "\n                        Re: Creating a flat pattern from a loft\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: AssemblyComponentDefinition.\n                    ", "solution": ["Public Sub Main()\nDim _invapp As Inventor.Application = ThisApplication\nDim assembly As AssemblyDocument = _invapp.Documents.Open(\"D:\\Files\\Inventor Projects\\KeukentafeFrameSkelet2.iam\", True)\nDim assembly_comp As AssemblyComponentDefinition = assembly.ComponentDefinition\n", "Dim design_view_reps", " As Inventor.DesignViewRepresentations = assembly.ComponentDefinition.RepresentationsManager.DesignViewRepresentations\n\nDim MyDesignViewRep As DesignViewRepresentation = ", "design_view_reps", ".Item(3)\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": ["\u200e02-22-2019 04:52 AM"], "solution Title": "\n                        Re: VBA BOM export with excel template\n                    ", "solution": ["Public Sub BOM_Export()\n    ' Set a reference to the assembly document.\n    ' This assumes an assembly document is active.\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n\n    Dim oTemplate As String: oTemplate = \"C:\\Template.xlsx\"\n  \n    ' Set a reference to the BOM\n    Dim oBOM As BOM\n    Set oBOM = oDoc.ComponentDefinition.BOM\n    \n    ' Set whether first level only or all levels.\n    oBOM.StructuredViewFirstLevelOnly = False\n    \n    ' Make sure that the structured view is enabled.\n    oBOM.StructuredViewEnabled = True\n    \n    'Set a reference to the \"Structured\" BOMView\n    Dim oBOMView As BOMView\n    Set oBOMView = oBOM.BOMViews.Item(\"Strukturiert\")\n    \n    \n    Dim oPartNumProperty As String\n    oPartNumProperty = oDoc.ComponentDefinition.Document.PropertySets( _\n        \"Design Tracking Properties\")(\"Part Number\").Value\n    \n   \n    Dim oPartRevNum As String\n    oPartRevNum = oDoc.ComponentDefinition.Document.PropertySets( _\n        \"Inventor Summary Information\")(\"Revision Number\").Value\n        \n    Dim oPartTitle As String\n    oPartTitle = oDoc.ComponentDefinition.Document.PropertySets( _\n        \"Inventor Summary Information\")(\"Title\").Value\n            \n    \n    ' set excel app and add worksheet\n    Dim xlApp As Object\n    Dim xlwb As Object\n    Dim xlws As Object\n    Set xlApp = CreateObject(\"Excel.Application\")\n    Set xlwb = xlApp.Workbooks.Open(oTemplate)\n    'Set xlwb = xlApp.workbooks.Add\n    Set xlws = xlwb.Worksheets(1)\n    xlApp.Visible = True\n\n    ' write more stuff\n    xlws.Cells(1, 2) = oPartTitle\n    xlws.Cells(1, 3) = oPartNumProperty\n    xlws.Cells(1, 4) = \"Rev: \" & oPartRevNum\n    xlws.name = \"St\u00fcckliste \" & oPartNumProperty\n\n    'Initialize the tab for ItemNumber\n    Dim ItemTab As Long\n    ItemTab = -3\n\n    Dim oStartRow As Integer: oStartRow = 4\n    \n    Call QueryBOMRowProperties(oBOMView.BOMRows, ItemTab, xlApp, xlwb, xlws, oStartRow)\nEnd Sub\n\nPrivate Sub QueryBOMRowProperties(oBOMRows As BOMRowsEnumerator, ItemTab As Long, ByVal xlApp As Object, ByVal xlwb As Object, ByVal xlws As Object, oStartRow As Integer)\n    ItemTab = ItemTab + 3\n    \n    ' Iterate through the contents of the BOM Rows.\n    Dim i As Long\n    For i = 1 To oBOMRows.Count\n        ' Get the current row.\n        Dim oRow As BOMRow\n        Set oRow = oBOMRows.Item(i)\n\n        'Set a reference to the primary ComponentDefinition of the row\n        Dim oCompDef As ComponentDefinition\n        Set oCompDef = oRow.ComponentDefinitions.Item(1)\n\n        Dim oPartNumProperty As Property\n        Dim oPartStockNumProperty As Property\n        Dim oPartCategory As Property\n        Dim oPartTitle As Property\n        Dim oPartWidth As Property\n        Dim oPartHeight As Property\n        Dim oPartLength As Property\n\n        If TypeOf oCompDef Is VirtualComponentDefinition Then\n        \n            Set oPartNumProperty = oCompDef.Document.PropertySets _\n                .Item(\"Design Tracking Properties\").Item(\"Part Number\")\n                \n            Set oPartStockNumProperty = oCompDef.Document.PropertySets _\n                .Item(\"Design Tracking Properties\").Item(\"Stock Number\")\n\n            Set oPartTitle = oCompDef.Document.PropertySets _\n                .Item(\"Inventor Summary Information\").Item(\"Title\")\n            \n            On Error Resume Next\n            Set oPartWidth = oCompDef.Document.PropertySets _\n                .Item(\"Inventor User Defined Properties\").Item(\"Breite\")\n            \n            On Error Resume Next\n            Set oPartHeight = oCompDef.Document.PropertySets _\n                .Item(\"Inventor User Defined Properties\").Item(\"H\u00f6he\")\n            \n            On Error Resume Next\n            Set oPartLength = oCompDef.Document.PropertySets _\n                .Item(\"Inventor User Defined Properties\").Item(\"L\u00e4nge\")\n\n\n            'Get the file property that contains the \"Description\"\n            Set oDescripProperty = oCompDef.Document.PropertySets _\n                .Item(\"Design Tracking Properties\").Item(\"Description\")\n                \n            Set oPartCategory = oCompDef.Document.PropertySets _\n                .Item(\"Inventor Document Summary Information\").Item(\"Category\")\n                \n                xlws.Cells(oStartRow + b, 1) = oRow.ItemNumber\n                xlws.Cells(oStartRow + b, 2) = oPartCategory.Value\n                xlws.Cells(oStartRow + b, 3) = oPartStockNumProperty.Value\n                xlws.Cells(oStartRow + b, 4) = oPartTitle.Value\n                xlws.Cells(oStartRow + b, 5) = oPartNumProperty.Value\n                xlws.Cells(oStartRow + b, 6) = oPartWidth.Value\n                xlws.Cells(oStartRow + b, 7) = oPartHeight.Value\n                xlws.Cells(oStartRow + b, 8) = oPartLength.Value\n                xlws.Cells(oStartRow + b, 9) = oCompDef.BOMQuantity.UnitQuantity\n                xlws.Cells(oStartRow + b, 10) = oRow.ItemQuantity\n                \n        oStartRow = oStartRow + 1\n\n        Else\n            'Get the file property that contains the \"Part Number\"\n            'The file property is obtained from the parent\n            'document of the associated ComponentDefinition.\n                 ' write more stuff\n\n            Set oPartNumProperty = oCompDef.Document.PropertySets _\n                .Item(\"Design Tracking Properties\").Item(\"Part Number\")\n                \n            Set oPartStockNumProperty = oCompDef.Document.PropertySets _\n                .Item(\"Design Tracking Properties\").Item(\"Stock Number\")\n\n            Set oPartTitle = oCompDef.Document.PropertySets _\n                .Item(\"Inventor Summary Information\").Item(\"Title\")\n            \n            On Error Resume Next\n            Set oPartWidth = oCompDef.Document.PropertySets _\n                .Item(\"Inventor User Defined Properties\").Item(\"Breite\")\n            \n            On Error Resume Next\n            Set oPartHeight = oCompDef.Document.PropertySets _\n                .Item(\"Inventor User Defined Properties\").Item(\"H\u00f6he\")\n            \n            On Error Resume Next\n            Set oPartLength = oCompDef.Document.PropertySets _\n                .Item(\"Inventor User Defined Properties\").Item(\"L\u00e4nge\")\n\n            'Get the file property that contains the \"Description\"\n            Set oDescripProperty = oCompDef.Document.PropertySets _\n                .Item(\"Design Tracking Properties\").Item(\"Description\")\n                \n            Set oPartCategory = oCompDef.Document.PropertySets _\n                .Item(\"Inventor Document Summary Information\").Item(\"Category\")\n                \n                xlws.Cells(oStartRow + b, 1) = oRow.ItemNumber\n                xlws.Cells(oStartRow + b, 2) = oPartCategory.Value\n                xlws.Cells(oStartRow + b, 3) = oPartStockNumProperty.Value\n                xlws.Cells(oStartRow + b, 4) = oPartTitle.Value\n                xlws.Cells(oStartRow + b, 5) = oPartNumProperty.Value\n                xlws.Cells(oStartRow + b, 6) = oPartWidth.Value\n                xlws.Cells(oStartRow + b, 7) = oPartHeight.Value\n                xlws.Cells(oStartRow + b, 8) = oPartLength.Value\n                xlws.Cells(oStartRow + b, 9) = oCompDef.BOMQuantity.UnitQuantity\n                xlws.Cells(oStartRow + b, 10) = oRow.ItemQuantity\n                \n              oStartRow = oStartRow + 1\n\n            Debug.Print Tab(ItemTab); oRow.ItemNumber; Tab(17); oRow.ItemQuantity; Tab(30); _\n                oPartNumProperty.Value; Tab(70); oDescripProperty.Value\n            \n            'Recursively iterate child rows if present.\n            If Not oRow.ChildRows Is Nothing Then\n                Call QueryBOMRowProperties(oRow.ChildRows, ItemTab, xlApp, xlwb, xlws, oStartRow)\n            End If\n        End If\n    Next\n    ItemTab = ItemTab - 3\nEnd Sub\n"], "author": "florian.steinho"},
{"created at": [], "solution Title": "\n                        Re: Access Drawing view by View name with iLogic\n                    ", "solution": ["Dim", " ", "oDrawingDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawingDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " = ", "oDrawingDoc", ".", "ActiveSheet", "\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDrawingDoc", ".", "Sheets", "\n\t", "oViews", " = ", "oSheet", ".", "DrawingViews", "\n\t", "Dim", " ", "oView", " ", "As", " ", "DrawingView", "\n\t", "For", " ", "Each", " ", "oView", " ", "In", " ", "oViews", "\n\t\t\t\t", "oView", ".", "ShowLabel", " = ", "True", "\n\t\t\t\t", "Dim", " ", "orientype", " ", "As", " ", "ViewOrientationTypeEnum", "\n \t\t\t\t", "orientype", " = ", "oView", ".", "Camera", ".", "ViewOrientationType", "\n\t\t\t\t", "If", " ", "orientype", " = 10763 ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Arbitrary View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10756 ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Back View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10757  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Bottom View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10765  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Current View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10753 ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Specifies the Default setting To use. Inquiry methods/properties always Return the more strongly typed values\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10773  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Sheet metal flat pattern backside pivot 180 degrees\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10772  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Sheet metal flat pattern backside pivot left\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10770  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Sheet metal flat pattern backside\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10769  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Sheet metal flat pattern pivot 180 degrees\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10768  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Sheet metal flat pattern pivot left\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " =10767  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Sheet metal flat pattern pivot right\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10764  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Front View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10762  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Isometric -- Bottom Left View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10761  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Isometric -- Bottom Right View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10760  ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Isometric -- Top Left View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10759   ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Isometric -- Top Right View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10758   ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Left View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10755   ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Right View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10766   ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Saved camera View\"", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t\t", "If", " ", "orientype", " = 10754   ", "Then", "\n\t\t\t\t", "oView", ".", "Label", ".", "FormattedText", " = ", "\"Top View\"", "\n\t\t\t\t", "End", " ", "If", "\t\t\n\t", "Next", "\n", "Next"], "author": "yuvilo_"},
{"created at": ["\u200e02-22-2019 04:09 PM"], "solution Title": "\n                        Re: Publish to 3D PDF API extremly slow if called by a standalone EXE\n                    ", "solution": ["_invApp.UserInterfaceManager.UserInteractionDisabled = True\npdf3DConverter.Publish(asmdoc, options)\n_invApp.UserInterfaceManager.UserInteractionDisabled = False\n"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Ribbon Commands Within A Rule\n                    ", "solution": ["Dim", " ", "oCommandMgr", " ", "As", " ", "CommandManager", " \n", "oCommandMgr", " = ", "ThisApplication", ".", "CommandManager", " \n\n", "' Get control definition for the line command. ", "\n", "Dim", " ", "oControlDef", " ", "As", " ", "ControlDefinition", " \n ", "oControlDef", " = ", "oCommandMgr", ".", "ControlDefinitions", ".", "Item", "(", "\"AppCenterOfGravityCmd\"", ")  \n", "' Execute the command. ", "\n", "oControlDef", ".", "Execute", "Dim", " ", "oCommandMgr", " ", "As", " ", "CommandManager", " \n", "oCommandMgr", " = ", "ThisApplication", ".", "CommandManager", " \n\n", "' Get control definition for the line command. ", "\n", "Dim", " ", "oControlDef", " ", "As", " ", "ControlDefinition", " \n ", "oControlDef", " = ", "oCommandMgr", ".", "ControlDefinitions", ".", "Item", "(", "\"DrawingBaseViewCmd\"", ")  \n", "' Execute the command. ", "\n", "oControlDef", ".", "Execute2", "(", "True", ")"], "author": "yuvilo_"},
{"created at": [], "solution Title": "\n                        Re: Document (part or sub-assembly) highlight color is different from default bl\n                    ", "solution": ["Public Class RWEI_0023A\nSub main()\n\tDim iL_NO As String = \"0025A\"\n\tDim iL_Name As String = \"Highlighted Multiple Selections\"\n\tDim iL_FFN As String = \"Rule \" & iL_NO & \": \" & iL_Name\n\tDim oDoc As AssemblyDocument\n\toDoc = ThisApplication.ActiveDocument\n\n\tDim oLFN_Pos As Long\n\tDim oFFN As String\t'Full file name (with extension)\n\tDim oLFN As String\t'Local file name (with extension)\n\n\tDim oSelectionOptions As New ArrayList\n\tDim oComp As String  = \"Component\"\n\tDim oPart As String = \"Part\"\n\tDim oCancell As String = \"Cancel\"\n\toSelectionOptions.Add(oComp)\n\toSelectionOptions.Add(oPart)\n\toSelectionOptions.Add(oCancell)\n\n\n\tDim oSelectedSet As Inventor.HighlightSet\n\toSelectedSet = oDoc.CreateHighlightSet\n\toSelectedSet.Clear\n\t\n\tDim r As Byte = 0\n\tDim g As Byte = 0\n\tDim b As Byte = 250\n \tDim oColor As Color\n    oColor = ThisApplication.TransientObjects.CreateColor(r,g,b)\n\t\n\toSelectedSet.Color = oColor \n\t\n\tDim oEntities As ObjectCollection\n\toEntities = ThisApplication.TransientObjects.CreateObjectCollection\n\n\tDim oOccurrence As ComponentOccurrence\n\toSelection = InputListBox(\"SELECT\", oSelectionOptions, oSelectionOptions(0), Title := iL_NO & \": COMPONENT SELECTION\", ListName := iL_NO & \": Selection List\")\n\tIf oSelection = oCancell Then Exit Sub\n\n\tWhile True\n\t\tIf oSelection = oComp Then\n\t\t\toEntity = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAssemblyOccurrenceFilter, iL_NO & \": Select Component:\")\n\t\tElse If oSelection = oPart Then\n\t\t\toEntity = ThisApplication.CommandManager.Pick(kAssemblyLeafOccurrenceFilter, iL_NO & \": Select Part:\")\n\t\tEnd If\n\t\tIf IsNothing(oEntity) Then Exit While\n\t\toSelectedSet.AddItem(oEntity)\n\t\toEntities.Add(oEntity) \n\tEnd While\n\toSelectedSet.Clear\n\n\ti = 1\n\tFor Each oEntity In oEntities\n\t'\toDoc_Entity = oEntity.Definition.Document\n\t'\toFFN = oDoc_Entity.FullFileName\n\t'\toLFN_Return = oName_Doc_Local(oFFN, oLFN_Pos, oLFN)\n\t'\tMessageBox.Show(\"Name - Occurrence: \" & oEntity.Name _\n\t'\t& vbLf & \"Name - LFN: \" & oLFN_Return _\n\t'\t& vbLf & \"Name - FFN: \" & oDoc_Entity.FullFileName, iL_FFN)\n\t''\ti += 1\n\tNext \n\nEnd Sub\n\nFunction oName_Doc_Local(oFFN As String, oLFN_Pos As Double, oLFN As String)\n\t\toLFN_Pos = InStrRev(oFFN, \"\\\", -1)\t\t\n\t\toLFN = Mid(oFFN, oLFN_Pos + 1, Len(oFFN) - oLFN_Pos)\n\t\tReturn oLFN\nEnd Function\n\nEnd Class"], "author": "chandra.shekar."},
{"created at": ["\u200e02-19-2019 11:12 PM"], "solution Title": "\n                        Re: To find Parent of Occurrences\n                    ", "solution": ["Public", " ", "Class", " ", "RWEI_0001A", "\n\t", "Shared", " ", "oTextSave", " ", "As", " ", "String", " = ", "\"C:\\Users\\Public\\Documents\\iLogicBuffer.txt\"", "\n\t\n", "Sub", " ", "Main", "() \n\t", "'Accessing Assembly Components @ https://modthemachine.typepad.com/my_weblog/2009/03/accessing-assembly-components.html", "\n\t", "Dim", " ", "oDashes", " ", "As", " ", "String", " = ", "\"\"", "\n\t", "Dim", " ", "iL_NO", " ", "As", " ", "String", " = ", "\"0001A-BOM\"", "\n\t", "Dim", " ", "iL_Name", " ", "As", " ", "String", " = ", "\"All Occurrences with BOM Structure\"", "\n\t", "Dim", " ", "iL_FullName", " ", "As", " ", "String", " = ", "\"Rule \"", " & ", "iL_NO", " & ", "\": \"", " & ", "iL_Name", "\n\t", "Dim", " ", "oDoc", " ", "As", " ", "Document", " = ", "ThisApplication", ".", "ActiveDocument", "\n\t\t\t\n\t", "oDelete_ex_Notepad", "(", "oTextSave", ", ", "iL_NO", ")\n\t", "oHL1", " = ", "\"FILE REFERENCE TREE RAN FROM: \"", " & ", "oDoc", ".", "FullFileName", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL1", ")\n\t", "oHL2", " = ", "iL_FullName", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL2", ")\n\t", "For", " ", "i", " = 1 ", "To", " ", "Len", "(", "iL_FullName", ")\n\t\t", "oDashes", " = ", "oDashes", " & ", "\"-\"", "\n\t", "Next", " ", "i", "\n\t", "oWrite_DashLine", "(", "oTextSave", ", ", "oDashes", ")\n\t\n    ", "' Get the active assembly. ", "\n    ", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", " \n    ", "oAsmDoc", " = ", "ThisApplication", ".", "ActiveDocument", " \n\n    ", "' Call the function that does the recursion. ", "\n    ", "Call", " ", "TraverseAssembly", "(", "oAsmDoc", ".", "ComponentDefinition", ".", "Occurrences", ", 1) \n\t", "Process", ".", "Start", "(", "\"Notepad.exe\"", ", ", "oTextSave", ")\n", "End", " ", "Sub", " \n\n", "Private", " ", "Sub", " ", "TraverseAssembly", "(", "Occurrences", " ", "As", " ", "ComponentOccurrences", ", ", "Level", " ", "As", " ", "Integer", ") \n    ", "' Iterate through all of the occurrence in this collection.  This ", "\n    ", "' represents the occurrences at the top level of an assembly. ", "\n    ", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", " \n    ", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "Occurrences", " \n        ", "' Print the name of the current occurrence. ", "\n        ", "' Check to see if this occurrence represents a subassembly ", "\n        ", "' and recursively call this function to traverse through it. ", "\n        ", "If", " ", "oOcc", ".", "DefinitionDocumentType", " = ", "kAssemblyDocumentObject", " ", "Then", " \n            ", "Call", " ", "TraverseAssembly", "(", "oOcc", ".", "SubOccurrences", ", ", "Level", " + 1) \n        ", "End", " ", "If", " \n\t\t\n\t\t", "Try", "\n\t\t\t", "Dim", " ", "oParentocc", " ", "As", " ", "ComponentOccurrence", "\n\t\t\t", "oParentocc", " = ", "oOcc", ".", "ParentOccurrence", "\n\t\t\t", "oParent", " = ", "oParentocc", ".", "Name", "\n\t\t", "Catch", "\n\t\t\t", "oParent", " = ", "System", ".", "IO", ".", "Path", ".", "GetFileNameWithoutExtension", "(", "oOcc", ".", "Parent", ".", "Document", ".", "DisplayName", ")\n\t\t", "End", " ", "Try", "\n\n\t\t", "oData_X", " = ", "oParent", " & ", "\"@\"", " & ", "oOcc", ".", "Name", " & ", "\"@\"", " & ", "\"Level - \"", " & ", "Level", "\n\t\t", "oWrite_Data", "(", "oTextSave", ", ", "oData_X", ")\n\t", "Next", " \n", "End", " ", "Sub", "\n\n\n", "Function", " ", "GetOccurrenceParent", "(", "oOcc", " ", "As", " ", "ComponentOccurrence", ", ", "oOccName", " ", "As", " ", "String", ")\n\n\t", "Return", " ", "oOcc", ".", "Parent", ".", "Document", ".", "DisplayName", "\n", "End", " ", "Function", "\n\n\n", "'Process.Start(\"Notepad.exe\", oTextSave)\t", "\n", "Sub", " ", "oWrite_Data", "(", "oTextSave", " ", "As", " ", "String", ", ", "oData", " ", "As", " ", "String", ")\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "oTextSave", ")\n\t", "oWrite", ".", "WriteLine", "(", "oData", ")\t\n\t", "oWrite", ".", "Flush", "()\n\t", "oWrite", ".", "Close", "\n", "End", " ", "Sub", "\n\n", "Sub", " ", "oWrite_HeaderLines", "(", "oTextSave", " ", "As", " ", "String", ", ", "oHeaderLine", " ", "As", " ", "String", ")\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "oTextSave", ")\n\t", "oWrite", ".", "WriteLine", "(", "oHeaderLine", ")\t\n\t", "oWrite", ".", "Flush", "()\n\t", "oWrite", ".", "Close", "\n", "End", " ", "Sub", "\n\t\n", "Sub", " ", "oWrite_DashLine", "(", "oTextSave", " ", "As", " ", "String", ", ", "oDashes", " ", "As", " ", "String", ")\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "oTextSave", ")\n\t", "oWrite", ".", "WriteLine", "(", "oDashes", ")\t\n\t", "oWrite", ".", "Flush", "()\n\t", "oWrite", ".", "Close", "\n", "End", " ", "Sub", "\n\n", "Sub", " ", "oDelete_ex_Notepad", "(", "oTextSave", " ", "As", " ", "String", ", ", "iL_NO", " ", "As", " ", "String", ")\t\t", "'To delete oTextSave if existing.", "\n", "'\tDim FileDelete As String", "\n", "'\tFileDelete = \"C:\\testDelete.txt\"", "\n \t", "If", " ", "System", ".", "IO", ".", "File", ".", "Exists", "(", "oTextSave", ") = ", "True", " ", "Then", "\n   \t", "System", ".", "IO", ".", "File", ".", "Delete", "(", "oTextSave", ")\n\t", "MessageBox", ".", "Show", "(", "\"Existing (if any) File Deleted\"", ", ", "iL_NO", ")\n\t", "End", " ", "If", "\n", "End", " ", "Sub", "\n", "End", " ", "Class", "Public", " ", "Class", " ", "RWEI_0001A", "\n\t", "Shared", " ", "oTextSave", " ", "As", " ", "String", " = ", "\"C:\\Users\\Public\\Documents\\iLogicBuffer.txt\"", "\n\t\n", "Sub", " ", "Main", "() \n\t", "'Accessing Assembly Components @ https://modthemachine.typepad.com/my_weblog/2009/03/accessing-assembly-components.html", "\n\t", "Dim", " ", "oDashes", " ", "As", " ", "String", " = ", "\"\"", "\n\t", "Dim", " ", "iL_NO", " ", "As", " ", "String", " = ", "\"0009-BOM\"", "\n\t", "Dim", " ", "iL_Name", " ", "As", " ", "String", " = ", "\"All Occurrences with BOM Structure\"", "\n\t", "Dim", " ", "iL_FullName", " ", "As", " ", "String", " = ", "\"Rule \"", " & ", "iL_NO", " & ", "\": \"", " & ", "iL_Name", "\n\t", "Dim", " ", "oDoc", " ", "As", " ", "Document", " = ", "ThisApplication", ".", "ActiveDocument", "\n\t\t\t\n\t", "oDelete_ex_Notepad", "(", "oTextSave", ", ", "iL_NO", ")\n\t", "oHL1", " = ", "\"FILE REFERENCE TREE RAN FROM: \"", " & ", "oDoc", ".", "FullFileName", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL1", ")\n\t", "oHL2", " = ", "iL_FullName", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL2", ")\n\t", "For", " ", "i", " = 1 ", "To", " ", "Len", "(", "iL_FullName", ")\n\t\t", "oDashes", " = ", "oDashes", " & ", "\"-\"", "\n\t", "Next", " ", "i", "\n\t", "oWrite_DashLine", "(", "oTextSave", ", ", "oDashes", ")\n\t\n    ", "' Get the active assembly. ", "\n    ", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", " \n    ", "oAsmDoc", " = ", "ThisApplication", ".", "ActiveDocument", " \n\n    ", "' Call the function that does the recursion. ", "\n    ", "Call", " ", "TraverseAssembly", "(", "oAsmDoc", ".", "ComponentDefinition", ".", "Occurrences", ", 1) \n\t", "Process", ".", "Start", "(", "\"Notepad.exe\"", ", ", "oTextSave", ")\n", "End", " ", "Sub", " \n\n", "Private", " ", "Sub", " ", "TraverseAssembly", "(", "Occurrences", " ", "As", " ", "ComponentOccurrences", ", ", "Level", " ", "As", " ", "Integer", ") \n    ", "' Iterate through all of the occurrence in this collection.  This ", "\n    ", "' represents the occurrences at the top level of an assembly. ", "\n    ", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", " \n    ", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "Occurrences", " \n        ", "' Print the name of the current occurrence. ", "\n        ", "' Check to see if this occurrence represents a subassembly ", "\n        ", "' and recursively call this function to traverse through it. ", "\n        ", "If", " ", "oOcc", ".", "DefinitionDocumentType", " = ", "kAssemblyDocumentObject", " ", "Then", " \n            ", "Call", " ", "TraverseAssembly", "(", "oOcc", ".", "SubOccurrences", ", ", "Level", " + 1) \n        ", "End", " ", "If", " \n\t\n\t\t", "oFFN_cw_EXT", " = ", "oOcc", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", ".", "FullFileName", "\t", "'cw file extension\t", "\n\t\t", "oStr", " = ", "oDoc_LocalName_WExt", "(", "iL_NO", ", ", "oFFN_cw_EXT", ")\n\t\t", "BOM_Structure_Return", " = ", "Func_BOM_Structure", "(", "iL_NO", ", ", "oOcc", ")\n\t\t\t", "'specify word splitting characters \"space\" and \"dash\"", "\n\t\t\t", "Dim", " ", "Separators", "() ", "As", " ", "Char", " = {", "\"*\"c", "} \n\t\t\t", "Sentence", " = ", "BOM_Structure_Return", "\n\t\t\t", "Words", " = ", "Sentence", ".", "Split", "(", "Separators", ")\n\t\t\t", "i", " = 0\n\t\t\t", "For", " ", "Each", " ", "wrd", " ", "In", " ", "Words", "\n\t\t\t", "'MessageBox.Show(\"Word Index #\" & i & \" = \" & Words(i))", "\n\t\t\t", "i", " += 1\n\t\t\t", "Next", "\n\t\t", "BOM_Structure", " = ", "Words", "(0)\n\t\t", "oOccurrence_FFN", " = ", "Words", "(1)\n\t\t\n", "'\t\toParent = oOcc.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName", "\n\t\t", "Try", "\n\t\t\t", "Dim", " ", "oParentocc", " ", "As", " ", "ComponentOccurrence", "\n\t\t\t", "oParentocc", " = ", "oOcc", ".", "ParentOccurrence", "\n\t\t\t", "docFile", " = ", "oParentocc", ".", "Definition", ".", "Document", "\n\t\t    ", "oParent", " = ", "System", ".", "IO", ".", "Path", ".", "GetFileNameWithoutExtension", "(", "docFile", ".", "FullFileName", ")\n\t\t    ", "oParent", " = ", "System", ".", "IO", ".", "Path", ".", "GetFileName", "(", "docFile", ".", "FullFileName", ")\n\t\t", "Catch", "\n\t\t\t", "oParent", " = ", "System", ".", "IO", ".", "Path", ".", "GetFileNameWithoutExtension", "(", "oOcc", ".", "Parent", ".", "Document", ".", "DisplayName", ")\n\t\t\t", "oParent", " = ", "System", ".", "IO", ".", "Path", ".", "GetFileName", "(", "oOcc", ".", "Parent", ".", "Document", ".", "DisplayName", ")\n\t\t", "End", " ", "Try", "\n\t\n", "'\t\tIf Level > 1 Then ", "\n", "'\t\t\toParent = System.IO.Path.GetFileNameWithoutExtension(oOcc.ParentOccurrence.Definition.Document.FullFileName)\t", "\n", "'\t\tElse ", "\n", "'\t\t\toParent = System.IO.Path.GetFileNameWithoutExtension(oOcc.Parent.Document.DisplayName)", "\n", "'\t\tEnd If ", "\n\t\n\t\t", "oData_X", " = ", "oParent", " & ", "\"@\"", " & ", "oStr", " & ", "\"@\"", " & ", "\"Level-\"", " & ", "Level", " & ", "\"@\"", " & ", "BOM_Structure", "\t\n", "'\t\toData_X = oParent & \"@\" & oOcc.Name & \"@\" & \"Level-\" & Level & \"@\" & BOM_Structure", "\n", "'\t\toData_X = oStr & \"@\" & oFFN_cw_EXT & \"@\" & BOM_Structure & \" \" & oParent & \"@\" & oOcc.Name & \"@\" & \"Level-\" & Level", "\n\t\t", "oWrite_Data", "(", "oTextSave", ", ", "oData_X", ")\n\t", "Next", " \n", "End", " ", "Sub", "\n\n\t", "Function", " ", "oDoc_LocalName_WExt", "(", "iL_NO", " ", "As", " ", "String", ", ", "oFFN_cw_EXT", " ", "As", " ", "String", ")\n\t", "oName_Sub", " = ", "\"oDoc_LocalName_WExt\"", "\n\t", "oTitle", " = ", "iL_NO", " & ", "\" @ SUB: \"", " & ", "oName_Sub", "\n\t", "oPos", " = ", "Len", "(", "oFFN_cw_EXT", ") - ", "InStrRev", "(", "oFFN_cw_EXT", ", ", "\"\\\"", ", -1)\n\t", "oName_Local_cw_Ext", " = ", "Right", "(", "oFFN_cw_EXT", ", ", "oPos", ")\n\t", "Return", " ", "oName_Local_cw_Ext", " ", "'Local file name complete with extension", "\n\t", "End", " ", "Function", "\n\n\t", "Function", " ", "Func_BOM_Structure", "(", "iL_NO", " ", "As", " ", "String", ", ", "oCompOcc", " ", "As", " ", "ComponentOccurrence", ")\n\t", "oName_Sub", " = ", "\"BOM_Structure\"", "\n\t", "oTitle", " = ", "iL_NO", " & ", "\" @ SUB: \"", " & ", "oName_Sub", "\n\t", "Dim", " ", "oOccurrence", " ", "As", " ", "ComponentOccurrence", "\n\t", "oFFN_X", " = ", "oCompOcc", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", ".", "FullFileName", "\n\t", "BOM_X", " = ", "oCompOcc", ".", "Definition", ".", "BOMStructure", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kDefaultBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Default\"", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kNormalBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Normal\"", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kReferenceBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Reference\"", " \n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kPhantomBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Phantom\"", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kPurchasedBOMStructure", "  ", "Then", " ", "BOM_Structure", " = ", "\"Purchased\"", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kInseparableBOMStructure", "  ", "Then", " ", "BOM_Structure", " = ", "\"Inseparable\"", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kVariesBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Varies\"", " \n\n\t", "oDoc_LocalName_WExt", "(", "iL_NO", ", ", "oFFN_X", ")\n\t", "'BOM_Structure = oDoc_LocalName_WExt(iL_NO, oFFN_X) & \" <- \" & BOM_Structure & \"(BOM STATUS: Default)\"", "\n\t", "Dim", " ", "BOM_Structure_Return", " ", "As", " ", "String", " = ", "BOM_Structure", " & ", "\"*\"", " & ", "oFFN_X", "\n\t", "Return", " ", "BOM_Structure_Return", "\n\t", "End", " ", "Function", "\n\t\n", "Function", " ", "GetOccurrenceParent", "(", "oOcc", " ", "As", " ", "ComponentOccurrence", ", ", "oOccName", " ", "As", " ", "String", ")\n\n\t", "Return", " ", "oOcc", ".", "Parent", ".", "Document", ".", "DisplayName", "\n", "End", " ", "Function", "\n\n", "'Process.Start(\"Notepad.exe\", oTextSave)\t", "\n", "Sub", " ", "oWrite_Data", "(", "oTextSave", " ", "As", " ", "String", ", ", "oData", " ", "As", " ", "String", ")\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "oTextSave", ")\n\t", "oWrite", ".", "WriteLine", "(", "oData", ")\t\n\t", "oWrite", ".", "Flush", "()\n\t", "oWrite", ".", "Close", "\n", "End", " ", "Sub", "\n\n", "Sub", " ", "oWrite_HeaderLines", "(", "oTextSave", " ", "As", " ", "String", ", ", "oHeaderLine", " ", "As", " ", "String", ")\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "oTextSave", ")\n\t", "oWrite", ".", "WriteLine", "(", "oHeaderLine", ")\t\n\t", "oWrite", ".", "Flush", "()\n\t", "oWrite", ".", "Close", "\n", "End", " ", "Sub", "\n\t\n", "Sub", " ", "oWrite_DashLine", "(", "oTextSave", " ", "As", " ", "String", ", ", "oDashes", " ", "As", " ", "String", ")\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "oTextSave", ")\n\t", "oWrite", ".", "WriteLine", "(", "oDashes", ")\t\n\t", "oWrite", ".", "Flush", "()\n\t", "oWrite", ".", "Close", "\n", "End", " ", "Sub", "\n\n", "Sub", " ", "oDelete_ex_Notepad", "(", "oTextSave", " ", "As", " ", "String", ", ", "iL_NO", " ", "As", " ", "String", ")\t\t", "'To delete oTextSave if existing.", "\n", "'\tDim FileDelete As String", "\n", "'\tFileDelete = \"C:\\testDelete.txt\"", "\n \t", "If", " ", "System", ".", "IO", ".", "File", ".", "Exists", "(", "oTextSave", ") = ", "True", " ", "Then", "\n   \t", "System", ".", "IO", ".", "File", ".", "Delete", "(", "oTextSave", ")\n", "'\tMessageBox.Show(\"Existing (if any) File Deleted\", iL_NO)", "\n\t", "End", " ", "If", "\n", "End", " ", "Sub", "\n", "End", " ", "Class", "\n"], "author": "yuvilo_"},
{"created at": ["\u200e02-19-2019 07:02 AM"], "solution Title": "\n                        Re: Retrieve File Name (Local), BOM Structure, File Name (Full) for all Occurren\n                    ", "solution": ["Dim", " ", "openDoc", " ", "As", " ", "Document", "\n", "openDoc", " = ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "doc", " ", "As", " ", "Document", "\n", "For", " ", "Each", " ", "doc", " ", "In", " ", "openDoc", ".", "AllReferencedDocuments", "\n", "Dim", " ", "Parent", " ", "As", " ", "Document", " = ", "doc", ".", "ReferencingDocuments", ".", "Item", "(1)\n\t", "BOM_X", " = ", "Parent", ".", "componentdefinition", ".", "BOMStructure", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kDefaultBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Default\"", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kNormalBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Normal\"", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kPhantomBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Phantom\"", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kReferenceBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Reference\"", " \n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kPurchasedBOMStructure", "  ", "Then", " ", "BOM_Structure", " = ", "\"Purchased\"", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kInseparableBOMStructure", "  ", "Then", " ", "BOM_Structure", " = ", "\"Inseparable\"", "\n\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kVariesBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Varies\"", " \n\t", "MessageBox", ".", "Show", "(", "doc", ".", "displayname", " & ", "\": \"", " & ", "Parent", ".", "DisplayName", " & ", "\"@\"", " & ", "BOM_Structure", ", ", "\"Title\"", ")\n", "Next", "Public", " ", "Class", " ", "RWEI_0007BOM", "\n\t", "Shared", " ", "oTextSave", " ", "As", " ", "String", " = ", "\"C:\\Users\\Public\\Documents\\iLogicBuffer.txt\"", "\n", "Sub", " ", "Main", "\n\t", "Dim", " ", "oAssy_ThisDoc", " ", "As", " ", "AssemblyDocument", " \n\t", "Dim", " ", "oDoc", " ", "As", " ", "Document", " = ", "ThisApplication", ".", "ActiveDocument", "\n\t", "Dim", " ", "iL_NO", " ", "As", " ", "String", " = ", "\"0002-BOM\"", "\n\t", "oDelete_ex_Notepad", "(", "oTextSave", ", ", "iL_NO", ")\n\t", "Dim", " ", "HL1_Prefix", " ", "As", " ", "String", " = ", "\"FILE REFERENCE TREE RAN FROM: \"", "\n\t", "oHL1", " = ", "HL1_Prefix", " & ", "oDoc", ".", "FullFileName", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL1", ")\n\t", "Dim", " ", "iL_Name", " ", "As", " ", "String", " = ", "\"All Occurrences with BOM Structure\"", "\n\t", "Dim", " ", "oHL2", " ", "As", " ", "String", " = ", "\"Rule \"", " & ", "iL_NO", " & ", "\": \"", " & ", "iL_Name", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL2", ")\n\t", "Dim", " ", "oDashes", " ", "As", " ", "String", " = ", "\"\"", "\n\t", "For", " ", "i", " = 1 ", "To", " ", "Len", "(", "oHL2", ")\n\t", "oDashes", " = ", "oDashes", " & ", "\"-\"", "\n\t", "Next", " ", "i", "\n\t", "Dim", " ", "oHL3", " ", "As", " ", "String", " = ", "oDashes", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL3", ")\n\t", "Dim", " ", "oHL4", " ", "As", " ", "String", " = ", "\"\"", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL4", ")\n\n\t", "Dim", " ", "oName_Parent", " ", "As", " ", "String", "\n\t", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", "\n\t", "oAsmCompDef", " = ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", "\n\t\n\t", "Dim", " ", "doc", " ", "As", " ", "Document", "\n\t\t", "For", " ", "Each", " ", "doc", " ", "In", " ", "oDoc", ".", "AllReferencedDocuments", "\n\t\t\t", "oFFN_X", " =  ", "doc", ".", "FullFileName", "\n\t\t\t", "Dim", " ", "Parent", " ", "As", " ", "Document", " = ", "doc", ".", "ReferencingDocuments", ".", "Item", "(1)\n\t\t\t", "BOM_X", " = ", "Parent", ".", "componentdefinition", ".", "BOMStructure", "\n\t\t\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kDefaultBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Default\"", "\n\t\t\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kNormalBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Normal\"", "\n\t\t\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kPhantomBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Phantom\"", "\n\t\t\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kReferenceBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Reference\"", " \n\t\t\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kPurchasedBOMStructure", "  ", "Then", " ", "BOM_Structure", " = ", "\"Purchased\"", "\n\t\t\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kInseparableBOMStructure", "  ", "Then", " ", "BOM_Structure", " = ", "\"Inseparable\"", "\n\t\t\t", "If", " ", "BOM_X", " = ", "BOMStructureEnum", ".", "kVariesBOMStructure", " ", "Then", " ", "BOM_Structure", " = ", "\"Varies\"", " \n\t\t\t", "oName_Parent", " = ", "Parent", ".", "DisplayName", " & ", "\"@\"", " & ", "BOM_Structure", " & ", "\"@\"", " & ", "oFFN_X", "\n\t\t\t", "oWrite_Data", "(", "oTextSave", ", ", "oName_Parent", ")\n\t\t", "Next", "\n\t", "Process", ".", "Start", "(", "\"Notepad.exe\"", ", ", "oTextSave", ")\n", "End", " ", "Sub", "\n\t  \n\t", "Sub", " ", "oWrite_HeaderLines", "(", "oTextSave", " ", "As", " ", "String", ", ", "oHeaderLine", " ", "As", " ", "String", ")\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "oTextSave", ")\n\t", "oWrite", ".", "WriteLine", "(", "oHeaderLine", ")\t\n\t", "oWrite", ".", "Flush", "()\n\t", "oWrite", ".", "Close", "\n\t", "End", " ", "Sub", "\n\n\t", "Sub", " ", "oWrite_Data", "(", "oTextSave", " ", "As", " ", "String", ", ", "oData", " ", "As", " ", "String", ")\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "oTextSave", ")\n\t", "oWrite", ".", "WriteLine", "(", "oData", ")\t\n\t", "oWrite", ".", "Flush", "()\n\t", "oWrite", ".", "Close", "\n\t", "End", " ", "Sub", "\n\n\t", "Sub", " ", "oDelete_ex_Notepad", "(", "oTextSave", " ", "As", " ", "String", ", ", "iL_NO", " ", "As", " ", "String", ")\t\t", "'To delete oTextSave if existing.", "\n\t", "If", " ", "System", ".", "IO", ".", "File", ".", "Exists", "(", "oTextSave", ") = ", "True", " ", "Then", "\n\t", "System", ".", "IO", ".", "File", ".", "Delete", "(", "oTextSave", ")\n\t", "End", " ", "If", "\n\t", "End", " ", "Sub", "\n\t\n", "End", " ", "Class", "Public", " ", "Class", " ", "RWEI_0007BOM", "\n\t", "Shared", " ", "oTextSave", " ", "As", " ", "String", " = ", "\"C:\\Users\\Public\\Documents\\iLogicBuffer.txt\"", "\n", "Sub", " ", "Main", "\n\t", "Dim", " ", "oAssy_ThisDoc", " ", "As", " ", "AssemblyDocument", " \n\t", "Dim", " ", "oDoc", " ", "As", " ", "Document", " = ", "ThisApplication", ".", "ActiveDocument", "\n\t", "Dim", " ", "iL_NO", " ", "As", " ", "String", " = ", "\"0002-BOM\"", "\n\t", "oDelete_ex_Notepad", "(", "oTextSave", ", ", "iL_NO", ")\n\t", "Dim", " ", "HL1_Prefix", " ", "As", " ", "String", " = ", "\"FILE REFERENCE TREE RAN FROM: \"", "\n\t", "oHL1", " = ", "HL1_Prefix", " & ", "oDoc", ".", "FullFileName", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL1", ")\n\t", "Dim", " ", "iL_Name", " ", "As", " ", "String", " = ", "\"All Occurrences with BOM Structure\"", "\n\t", "Dim", " ", "oHL2", " ", "As", " ", "String", " = ", "\"Rule \"", " & ", "iL_NO", " & ", "\": \"", " & ", "iL_Name", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL2", ")\n\t", "Dim", " ", "oDashes", " ", "As", " ", "String", " = ", "\"\"", "\n\t", "For", " ", "i", " = 1 ", "To", " ", "Len", "(", "oHL2", ")\n\t", "oDashes", " = ", "oDashes", " & ", "\"-\"", "\n\t", "Next", " ", "i", "\n\t", "Dim", " ", "oHL3", " ", "As", " ", "String", " = ", "oDashes", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL3", ")\n\t", "Dim", " ", "oHL4", " ", "As", " ", "String", " = ", "\"\"", "\n\t", "oWrite_HeaderLines", "(", "oTextSave", ", ", "oHL4", ")\n\n", "Dim", " ", "oBOM", " ", "As", " ", "BOM", "\n", "oBOM", " = ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "BOM", "\n\n", "Dim", " ", "oBOMView", " ", "As", " ", "BOMView", "\n", "oBOMView", " = ", "oBOM", ".", "BOMViews", ".", "Item", "(", "\"Unnamed\"", ")", "'Accesing to Model data Column", "\n", "'In English__\"Unnamed\"_\"Structured\"_\"Parts Only\"__In Spanish__\"Sin nombre\"_\"Estructurado\"_\"Solo piezas\"", "\n\n  ", "Call", " ", "ListItems", "(", "oBOMView", ".", "BOMRows", ", 0)\n", "Process", ".", "Start", "(", "\"Notepad.exe\"", ", ", "oTextSave", ")\n\t\n", "End", " ", "Sub", "\n\n", "Sub", " ", "ListItems", "(", "Rows", " ", "As", " ", "BOMRowsEnumerator", ", ", "indent", " ", "As", " ", "Integer", ")\n    ", "Dim", " ", "oBOMRow", " ", "As", " ", "BOMRow", "\n    ", "For", " ", "Each", " ", "oBOMRow", " ", "In", " ", "Rows", "\n  \n\t\t", "Dim", " ", "oBOMStructnumber", " ", "As", " ", "String", "\n\t    ", "oBOMStructnumber", " = ", "oBOMRow", ".", "BOMStructure", "\n\t\t", "Dim", "  ", "BOM_Structure", " ", "As", " ", "String", "\n\t\t", "If", " ", "oBOMStructnumber", " = 51969 ", "Then", " ", "BOM_Structure", " = ", "\"The Default Structure Type\"", " \n\t\t", "If", " ", "oBOMStructnumber", " = 51974 ", "Then", " ", "BOM_Structure", " = ", "\"The inseparable Structure Type\"", " \n\t\t", "If", " ", "oBOMStructnumber", " =  51970 ", "Then", " ", "BOM_Structure", " = ", "\"The normal Structure Type\"", " \n\t\t", "If", " ", "oBOMStructnumber", " = 51971 ", "Then", " ", "BOM_Structure", " = ", "\"The phantom Structure Type\"", " \n\t\t", "If", " ", "oBOMStructnumber", " =  51973 ", "Then", " ", "BOM_Structure", " = ", "\"The purchased Structure Type\"", " \n\t\t", "If", " ", "oBOMStructnumber", " = 51972 ", "Then", " ", "BOM_Structure", " = ", "\"reference Structure Type\"", " \n\t\t", "If", " ", "oBOMStructnumber", " = 51975 ", "Then", " ", "BOM_Structure", " = ", "\"The Structure Type varies amongst references\"", " \n\n\t\t", "Dim", " ", "oDef", " ", "As", " ", "ComponentDefinition", "\n\t\t", "oDef", " = ", "oBOMRow", ".", "ComponentDefinitions", "(1)\n\t\t", "Dim", " ", "oFFN_X", "  ", "As", " ", "String", "\n\t\t", "oFFN_X", "  = ", "oDef", ".", "Document", ".", "Displayname", "\n\t\t\n\t\t", "Dim", " ", "oDocFile", " ", "As", " ", "Document", "\n\t\t", "oDocFile", " = ", "oDef", ".", "Document", "\n\t\t", "Dim", " ", "Parent", " ", "As", " ", "Document", " = ", "oDocFile", ".", "ReferencingDocuments", ".", "Item", "(1)\n\t\t\n\t    ", "If", " ", "Not", " ", "oBOMRow", ".", "ChildRows", " ", "Is", " ", "Nothing", " ", "Then", "\n\t        ", "Call", " ", "ListItems", "(", "oBOMRow", ".", "ChildRows", ", ", "indent", " + 1)\n\t    ", "End", " ", "If", "\n\t   \t", "oName_Parent", " = ", "Parent", ".", "DisplayName", " & ", "\"@\"", " & ", "BOM_Structure", " & ", "\"@\"", " & ", "oFFN_X", "\n\t\t", "oWrite_Data", "(", "oTextSave", ", ", "oName_Parent", ")\n    ", "Next", "\n\n", "End", " ", "Sub", "\n  \n\t", "Sub", " ", "oWrite_HeaderLines", "(", "oTextSave", " ", "As", " ", "String", ", ", "oHeaderLine", " ", "As", " ", "String", ")\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "oTextSave", ")\n\t", "oWrite", ".", "WriteLine", "(", "oHeaderLine", ")\t\n\t", "oWrite", ".", "Flush", "()\n\t", "oWrite", ".", "Close", "\n\t", "End", " ", "Sub", "\n\n\t", "Sub", " ", "oWrite_Data", "(", "oTextSave", " ", "As", " ", "String", ", ", "oData", " ", "As", " ", "String", ")\n\t", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "oTextSave", ")\n\t", "oWrite", ".", "WriteLine", "(", "oData", ")\t\n\t", "oWrite", ".", "Flush", "()\n\t", "oWrite", ".", "Close", "\n\t", "End", " ", "Sub", "\n\n\t", "Sub", " ", "oDelete_ex_Notepad", "(", "oTextSave", " ", "As", " ", "String", ", ", "iL_NO", " ", "As", " ", "String", ")\t\t", "'To delete oTextSave if existing.", "\n\t", "If", " ", "System", ".", "IO", ".", "File", ".", "Exists", "(", "oTextSave", ") = ", "True", " ", "Then", "\n\t", "System", ".", "IO", ".", "File", ".", "Delete", "(", "oTextSave", ")\n\t", "End", " ", "If", "\n\t", "End", " ", "Sub", "\n\t\n", "End", " ", "Class"], "author": "yuvilo_"},
{"created at": ["\u200e02-20-2019 12:26 AM"], "solution Title": "\n                        Re: BOM Structure assigned @ Assy Level - Not Captured by the RULE\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: create a user parameter in a drawing using vba\n                    ", "solution": ["Public Sub dwgpar()\n\nDim a As Application\nSet a = ThisApplication\n\nDim b As DrawingDocument\nSet b = a.ActiveDocument\n\nb.Parameters.UserParameters.AddByValue \"XYZ\", 1234, \"mm\"\n\nEnd Sub\n"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Revision Table - Delete all empty Rows\n                    ", "solution": ["'", "Delete rows with no text in column 1", "\n", "Dim", " ", "oDrawingDoc", " ", "As", " ", "DrawingDocument", "\n    ", "oDrawingDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    \n    ", "Dim", " ", "oActiveSheet", " ", "As", " ", "Sheet", "\n    ", "oActiveSheet", " ", "=", " ", "oDrawingDoc", ".", "ActiveSheet", "\n    \n    ", "Dim", " ", "oRevTable", " ", "As", " ", "RevisionTable", "\n    ", "Dim", " ", "oRow", " ", "As", " ", "RevisionTableRow", "\n    ", "For", " ", "Each", " ", "oRevTable", " ", "In", " ", "oActiveSheet", ".", "RevisionTables", "\n        ", "For", " ", "Each", " ", "oRow", " ", "In", " ", "oRevTable", ".", "RevisionTableRows", "\n        ", "For", " ", "i", " ", "=", " ", "1", " ", "To", " ", "oRevTable", ".", "RevisionTableColumns", ".", "Count", "\n        ", "Dim", " ", "oCell", " ", "As", " ", "RevisionTableCell", " ", "=", " ", "oRow", ".", "Item", "(", "i", ")", "\n        ", "oCell", " ", "=", " ", "oRow", ".", "Item", "(", "i", ")", "\n              \n                ", "If", " ", "i", " ", "=", " ", "1", " ", "And", " ", "oCell", ".", "Text", " ", "=", " ", "\"\"", "        \n                ", "oRow", ".", "Delete", "\n                ", "End", " ", "If", "\n            ", "Next", "\n            \n        ", "Next", "\n", "Next"], "author": "bclark"},
{"created at": [], "solution Title": "\n                        Re: ilogic - Get value from Function\n                    ", "solution": ["Sub Main\n'Dim oPartDoc As PartDocument\n'oPartDoc = ThisApplication.ActiveDocument\nNoOfBends\n'Call NoOfBends(oBendCount As Integer)\n    \nMsgBox(\"MAIN - Number from Function: \" & NoOfBends)\n\nEnd Sub\n\n\nFunction NoOfBends As Integer\nDim oPartDoc As PartDocument\noPartDoc = ThisApplication.ActiveDocument\n\nDim oCompDef As SheetMetalComponentDefinition\noCompDef = oPartDoc.ComponentDefinitions.Item(1)\noBendCount = oCompDef.Bends.Count\n\n    MsgBox(\"FUNCTION - No of bends: \" & oBendCount)\n    Return oBendCount\nEnd Function\n"], "author": "bradeneurope|Ar"},
{"created at": ["\u200e02-20-2019 06:32 AM"], "solution Title": "\n                        Re: re-align bom columns in drawing\n                    ", "solution": ["Sub Main()\n\tDim oRuleTitle As String = \"Reorder Parts List Columns\"\n\t\n\tDim oThisDoc As Inventor.DrawingDocument\n\t\n\tTry\n\t\toThisDoc = ThisDoc.Document\n\tCatch\n\t\tMessageBox.Show(\"Activate a drawing first.\",oRuleTitle,MessageBoxButtons.OK,MessageBoxIcon.Error)\n\t\tReturn\n\tEnd Try\n    \n\tDim oSheet As Sheet = oThisDoc.ActiveSheet\n\t\n\tDim oPartsList As PartsList = oSheet.PartsLists.Item(1)\n\t\n\tDim oColumnList As New List(Of String)\n\toColumnList.AddRange({\"Item\",\"Part Number\",\"QTY\",\"Description\",\"Stock Number\"})\n\t\n\tDim oTransaction As Inventor.Transaction = Nothing\n\t\n\tDim i As Integer = 0\n\tFor Each oColumnName As String In oColumnList\n\t\tDim oColumn As PartsListColumn = GetColumn(oPartsList,oColumnName)\n\t\t\n\t\tIf oColumn IsNot Nothing Then\n\t\t\ti += 1\n\t\t\t\n\t\t\tIf i = oPartsList.PartsListColumns.Count Then\n\t\t\t\tExit For\n\t\t\tElse If oPartsList.PartsListColumns.Item(i) Is oColumn Then\n\t\t\t\tContinue For\n\t\t\tElse\n\t\t\t\tIf oTransaction Is Nothing Then oTransaction = ThisApplication.TransactionManager.StartTransaction(oThisDoc,\"Reorder Parts List Columns\")\n\t\t\t\tCall oColumn.Reposition(i, True)\n\t\t\tEnd If 'We're at the last column\n\t\tEnd If 'Column exists\n\tNext 'Column to re-order\n\t\n\tIf oTransaction IsNot Nothing Then oTransaction.End\nEnd Sub\n\nFunction GetColumn(oPartsList,oColumnName) As PartsListColumn\n\tFor Each oColumn As PartsListColumn In oPartsList.PartsListColumns\n\t\tIf oColumn.Title.ToUpper = oColumnName.ToUpper Then Return oColumn\n\tNext 'Column in Parts List\n\t\n\tReturn Nothing\nEnd Function"], "author": "DRoam"},
{"created at": ["\u200e02-20-2019 10:26 PM"], "solution Title": "\n                        Re: Undefined error using Inventor.SplitFeatures.SplitBody\n                    ", "solution": ["Dim", " ", "_invApp", " ", "As", " ", "Inventor", ".", "Application", "\n", "_invApp", " = ", "ThisApplication", "\n\n", "' Set a reference to the active document", "\n", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "oDoc", " = ", "_invApp", ".", "ActiveDocument", "\n\n", "' Set a reference to the component definition", "\n", "Dim", " ", "oPartCompDef", " ", "As", " ", "PartComponentDefinition", "\n", "oPartCompDef", " = ", "oDoc", ".", "ComponentDefinition", "\n", "' Access surface body object", "\n", "Dim", " ", "oSurfaceBody", " ", "As", "  ", "SurfaceBody", " \n", "oSurfaceBody", " = ", "oPartCompDef", ".", "Features", ".", "ExtrudeFeatures", ".", "Item", "(1).", "SurfaceBodies", "(1)\n\n", "' Access a workplane", "\n", "Dim", " ", "oTestPlane", " ", "As", " ", "WorkPlane", "\n", "oTestPlane", " = ", "oPartCompDef", ".", "WorkPlanes", ".", "Item", "(4)\n\n", "' Print out names and types", "\n", "MessageBox", ".", "Show", "(", "oSurfaceBody", ".", "Name", ")\n", "MessageBox", ".", "Show", "(", "oSurfaceBody", ".", "Type", ")\n", "MessageBox", ".", "Show", "(", "oTestPlane", ".", "Name", ")\n", "MessageBox", ".", "Show", "(", "oTestPlane", ".", "Type", ")\n\n", "Dim", " ", "objCol", " ", "As", " ", "ObjectCollection", " \n", "objCol", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateObjectCollection", " \n", "objCol", ".", "Add", "(", "oPartCompDef", ".", "Features", ".", "ExtrudeFeatures", "(1).", "SideFaces", "(1))\n\n", "' Split the surface body using the test plane", "'Either way of the following two lines is working, choose depending on your needs\n", "'oPartCompDef", ".", "Features", ".", "SplitFeatures", ".", "SplitFaces", "(", "oTestPlane", ", ", "False", ", ", "objCol", ")\n", "oPartCompDef", ".", "Features", ".", "SplitFeatures", ".", "SplitFaces", "(", "oTestPlane", ", ", "True", ", ", "oSurfaceBody", ")"], "author": "JaneFan"},
{"created at": ["\u200e02-19-2019 12:59 PM", "\u200e02-19-2019 01:05 PM"], "solution Title": "\n                        Re: Ilogic - Excel worksheet required specific name pointed in GoExcel.FindRow\n                    ", "solution": ["excelSheet = excelWorkbook.Worksheets(1).activate", "excelSheet = excelWorkbook.ActiveSheet", "excelSheetName = excelSheet.Name", "i=GoExcel.FindRow(NewFile,excelSheetName, \"ELEMENT\", \"=\", \"CF3\")"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: How to hide the first part in an assembly with VBA\n                    ", "solution": ["Public Sub main()\n\nDim a As AssemblyDocument\nSet a = ThisApplication.ActiveDocument\n\nDim b As AssemblyComponentDefinition\nSet b = a.ComponentDefinition\n\nb.Occurrences.Item(1).Visible = False\n\nEnd Sub", "Public Sub main()\n\nDim a As AssemblyDocument\na = ThisApplication.ActiveDocument\n\nDim b As AssemblyComponentDefinition\nb = a.ComponentDefinition\n\n'Dim c As Occurrence\nb.Occurrences.Item(1).Visible = False\n\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic pdf batch print from assembly include sub assemblies\n                    ", "solution": ["'Set Folder options as you see fit here", "\n", "oFolder", " = ", "'Enter Folder String here.", "\n\n", "'PDF Options", "\n", "PDFAddIn", " = ", "oAddIns", ".", "ItemById", "(", "\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\"", ")\n", "oPDFContext", " = ", "oTG", ".", "CreateTranslationContext", "\n", "oPDFContext", ".", "Type", " = ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oPDFOptions", " = ", "oTG", ".", "CreateNameValueMap", "\n", "oPDFDataMedium", " = ", "oTG", ".", "CreateDataMedium", "\n", "oPDFOptions", ".", "Value", "(", "\"All_Color_AS_Black\"", ") = 0\n", "oPDFOptions", ".", "Value", "(", "\"Remove_Line_Weights\"", ") = 1\n", "oPDFOptions", ".", "Value", "(", "\"Vector_Resolution\"", ") = 4800\n", "oPDFOptions", ".", "Value", "(", "\"Sheet_Range\"", ") = ", "Inventor", ".", "PrintRangeEnum", ".", "kPrintAllSheets", "\n\n", "'Generate List of all Documents Referenced for this Assembly.", "\n", "oRefDocs", " = ", "ThisApplication", ".", "ActiveDocument", ".", "AllReferencedDocuments", "'Generate Document Reference.", "Dim oDoc As Document\n\n", "'Peruse each document in generated Documents list.", "\n", "For", " ", "Each", " ", "oDoc", " ", "In", " ", "oRefDocs", "\n\n\t", "'Generate text string of .idw file to look for in the same folder as component file.", "\n\t", "idwPathName", " = ", "Left", "(", "oDoc", ".", "FullDocumentName", ", ", "Len", "(", "oDoc", ".", "FullDocumentName", ") - 3) & ", "\"idw\"", "\n\n\t", "'Check if generated drawing file name exists.", "\n\t", "If", " ", "System", ".", "IO", ".", "File", ".", "Exists", "(", "idwPathName", ") ", "Then", "\n\n\t\t", "'Open drawing file.", "\n\t\t", "oDrawDoc", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "idwPathName", ", ", "True", ")\n\n\t\t", "'Remove idw extension for PDF save.", "\n\t\t", "oFileName", " = ", "Left", "(", "oDoc", ".", "DisplayName", ", ", "Len", "(", "oDoc", ".", "DisplayName", ") - 3)\n\n\t\t", "'Generate text string of idw name and folder location.", "\n\t\t", "oPDFDataMedium", ".", "FileName", " = ", "oFolder", " + ", "\"\\\"", " + ", "oFileName", " + ", "\"pdf\"", "\n\n\t\t", "'Save PDF Copy.", "\n\t\t", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oDrawDoc", ", ", "oPDFContext", ", ", "oPDFOptions", ", ", "oPDFDataMedium", ")\n\n\t\t", "'Close drawing file.", "\n\t\t", "oDrawDoc", ".", "Close", "(", "True", ")\n\n\t", "End", " ", "If", "\n", "Next", "\n\n", "'Top Level Document reference.", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n", "'Generate text string of .idw file to look for in the same folder as Assembly file.", "\n", "idwPathName", " = ", "Left", "(", "oDoc", ".", "FullDocumentName", ", ", "Len", "(", "oDoc", ".", "FullDocumentName", ") - 3) & ", "\"idw\"", "\n\n", "'Check if generated drawing file name exists.", "\n", "If", " ", "System", ".", "IO", ".", "File", ".", "Exists", "(", "idwPathName", ") ", "Then", "\n\n\t", "'Open drawing file.", "\n\t", "oDrawDoc", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "idwPathName", ", ", "True", ")\n\n\t", "'Remove idw extension for PDF save.", "\n\t", "oFileName", " = ", "Left", "(", "oDoc", ".", "DisplayName", ", ", "Len", "(", "oDoc", ".", "DisplayName", ") - 3)\n\n\t", "''Generate text string of idw name and folder location.", "\n\t", "oPDFDataMedium", ".", "FileName", " = ", "oFolder", " + ", "\"\\\"", " + ", "oFileName", " + ", "\"pdf\"", "\n\n\t", "'Save PDF Copy.", "\n\t", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oDrawDoc", ", ", "oPDFContext", ", ", "oPDFOptions", ", ", "oPDFDataMedium", ")\n\n\t", "'Close drawing file.", "\n\t", "oDrawDoc", ".", "Close", "(", "True", ")\n", "End", " ", "If"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Need to retrieve Type data of custom iPropertis using iLogic\n                    ", "solution": ["Sub Main()\n\noRuleNo = \"iL0080\"\n\n\n\nDim X_PaintCode As String\n\nX_PaintCode = \"Paint Code\"\n\nDim X_Size As String\n\nX_Size = \"Size\"\n\nDim X_Galvanized As String\n\nX_Galvanized = \"Galvanized\"\n\nDim X_Date_Completed As String\n\nX_Date_Completed = \"Completion Date\"\n\n\n\nDim oProp_Array As New ArrayList\n\noProp_Array.Add(X_PaintCode)\n\noProp_Array.Add(X_Size)\n\noProp_Array.Add(X_Galvanized)\n\noProp_Array.Add(X_Date_Completed)\n\n\n\n'define custom prp[erty collection\n\noCustomPropertySet = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\")\n\n\n\nFor Each X_oProp_Array In oProp_Array\n\n\tTry\n\n\t'set property value\n\n\toProp = oCustomPropertySet.Item(X_oProp_Array)\n\n\tCatch\n\n\tMessageBox.Show(\"Prop exists: No\", \"Title\")\n\n\t' Assume error means not found so create it\n\n\toCustomPropertySet.Add(\"\", X_oProp_Array)\n\n\tEnd Try\n\n\toYN = MessageBox.Show(\"Do you need to assign TYPE for \" & X_oProp_Array & \"?\", \"Title\", MessageBoxButtons.YesNo)\n\n\tIf oYN = vbYes Then oType_Assign(oRuleNo, X_oProp_Array)\n\nNext X_oProp_Array\n\n\n\niLogicVb.UpdateWhenDone = True\n\nEnd Sub\n\n\n\nSub oType_Assign(oRuleNo, X_oProp_Array)\n\noSubName = \"ASSIGN TYPE\"\n\nDim oProp_String As String \n\noType_String = \"String\"\n\nDim oProp_Dbl As Double\n\noType_Dbl = \"Double\"\n\nDim oProp_Bool As Boolean\n\noType_Bool = \"Boolean\"\n\nDim oProp_Date As Date\n\noType_Date = \"Date: mm/dd/yyyy\"\n\n'\n\nDim oTypes_Array As New ArrayList\n\noTypes_Array.Add(oType_String)\n\noTypes_Array.Add(oType_Dbl)\n\noTypes_Array.Add(oType_Bool)\n\noTypes_Array.Add(oType_Date)\n\noTypes_Selected = InputListBox(\"SELECT TYPE:\", oTypes_Array, oTypes_Array(0), oRuleNo, X_oProp_Array)\n\nDim oTime As DateTime \n\nSelect Case oTypes_Selected\n\nCase oType_String\n\n\tX_oProp_Data = InputBox(\"Enter data for \" & X_oProp_Array & \": \", oRuleNo, \"STRING DATA ONLY\") 'no default value\n \tiProperties.Value(\"Custom\", X_oProp_Array) = X_oProp_Data\nCase oType_Dbl\n\n\tX_oProp_Data = InputBox(\"Enter data for \" & X_oProp_Array & \": \", oRuleNo, \"NUMERICAL DATA ONLY\") 'no default value\n\tDim numeric As Double \n\tnumeric = Convert.ToDouble(X_oProp_Data)\n\tiProperties.Value(\"Custom\", X_oProp_Array) = numeric\nCase oType_Bool\n\n\tX_oProp_Data = InputBox(\"Enter data for \" & X_oProp_Array & \": \", oRuleNo, \"Boolean only\") 'no default value\n\tDim bool As Boolean \n\tbool = Boolean.Parse(X_oProp_Data)\n\tiProperties.Value(\"Custom\", X_oProp_Array) = bool\nCase oType_Date\n\n\tX_oProp_Data = InputBox(\"Enter data for \" & X_oProp_Array & \": \", oRuleNo, Now.ToString(\"MM/dd/yyyy\")) 'no default value\n\t \n\toTime = DateTime.Parse(X_oProp_Data)\n\tiProperties.Value(\"Custom\", X_oProp_Array) = oTime \nEnd Select\n\n'\n\n''set custom property values\n\n\n\nEnd Sub  "], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How to start Inventor from Visual Studio 2015 or 2017\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: ilogic rotate and anchor revision table\n                    ", "solution": ["Sub", " ", "Main", " ", "CreateRevTable", "()\n\t", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\n\t", "Dim", " ", "oRTBs", " ", "As", " ", "RevisionTables", " = ", "oDrawDoc", ".", "ActiveSheet", ".", "RevisionTables", "\n\n\t", "' Create the revision table location points", "\n\t", "Dim", " ", "oLocation", " ", "As", " ", "Point2d", "\n\t", "oLocation", " = ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(55.77, 54.61)\n\n\t", "'add a new table", "\n\t", "Dim", " ", "oRTB", " ", "As", " ", "RevisionTable", "\n\t", "oRTB", " = ", "oRTBs", ".", "Add2", "(", "oLocation", ", ", "True", ", ", "True", ", ", "True", ", ", "\"A\"", ")\n\t\n\t", "'Rotate Revision Table", "\n\t", "oRTBs", ".", "Item", "(1).", "Rotation", " = 90 * ", "Math", ".", "PI", " / 180\n\t\n\t\t\n\t", "iLogicVb", ".", "UpdateWhenDone", " = ", "True", "\n\n", "End", " ", "Sub"], "author": "pschell"},
{"created at": [], "solution Title": "\n                        Re: How to rename the workplanes using ilogic for features created in flat patte\n                    ", "solution": ["'Rename work planes", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "oCompDef", " = ", "oDoc", ".", "ComponentDefinition", "\n\n", "i", " = 1\n", "For", " ", "Each", " ", "oWorkPlane", " ", "In", " ", "oCompDef", ".", "WorkPlanes", "\n    ", "If", " ", "oWorkPlane", ".", "IsCoordinateSystemElement", " = ", "False", " ", "Then", " \n    ", "oWorkPlane", ".", "Name", " = ", "\"WorkPlane\"", " & ", "i", "\n    ", "i", "=", "i", "+1\n    ", "End", " ", "If", "\n", "Next", "\n\n", "i", " = 1\n", "For", " ", "Each", " ", "oWorkPlane", " ", "In", " ", "oCompDef", ".", "FlatPattern", ".", "WorkPlanes", "\n    ", "If", " ", "oWorkPlane", ".", "IsCoordinateSystemElement", " = ", "False", " ", "Then", " \n    ", "oWorkPlane", ".", "Name", " = ", "\"WorkPlane\"", " & ", "i", "\n    ", "i", "=", "i", "+1\n    ", "End", " ", "If", "\n", "Next"], "author": "t_hascj"},
{"created at": [], "solution Title": "\n                        Re: Uncheck \"Date checked\" in a drawing and its main assembly or part\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: How to get an iPartFactory from one of its members\n                    ", "solution": ["Public Sub main()\n\nDim a As Application\nSet a = ThisApplication\n\nDim b As PartDocument\nSet b = a.ActiveDocument\n\na.Documents.Open (b.ComponentDefinition.iPartMember.ReferencedDocumentDescriptor.FullDocumentName)\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Remove Add-in from Add-In manager\n                    ", "solution": [], "author": "jhoel.forshav"},
{"created at": [], "solution Title": "\n                        Re: C# Inventor api HoleFeature Problem\n                    ", "solution": ["                PlanarSketch sktch2 = cdef.Sketches.Add(wp, true);\n                SketchPoint point = sktch2.SketchPoints.Add(transgeo.CreatePoint2d(0, 3));\n                WorkPoint wp1 = cdef.WorkPoints.AddByPoint(point);", "                ObjectCollection holecenter = application.TransientObjects.CreateObjectCollection();\n                PointHolePlacementDefinition phpd = cdef.Features.HoleFeatures.CreatePointPlacementDefinition(holecenter[1], cdef.WorkAxes[2]);\n                HoleFeature hf = cdef.Features.HoleFeatures.AddDrilledByThroughAllExtent(phpd,1, PartFeatureExtentDirectionEnum.kPositiveExtentDirection);\n\n"], "author": "baris.kavur"},
{"created at": [], "solution Title": "\n                        Re: VBA: Replace components in different assemblies\n                    ", "solution": ["Public Sub ReplaceParts()\n    ' This is used to define the list of old and new file.  The first number in\n    ' Dim statement is the number of files in the list.  The number is one less\n    ' than the total number since the list starts at zero.  The second number\n    ' is always 1.\n    '\n    ' You can see where the old file and the new file are listed where each pair\n    ' of files has it's own unique first index. For the second index, the old\n    ' filename is 0 and the new filename is 1.\n    Dim files(3, 1) As String\n    files(0, 0) = \"C:\\Users\\ekins\\OneDrive\\Documents\\Inventor\\Tests\\OldTest1.ipt\"\n    files(0, 1) = \"C:\\Users\\ekins\\OneDrive\\Documents\\Inventor\\Tests\\NewTest1.ipt\"\n    \n    files(1, 0) = \"C:\\Users\\ekins\\OneDrive\\Documents\\Inventor\\Tests\\OldTest2.ipt\"\n    files(1, 1) = \"C:\\Users\\ekins\\OneDrive\\Documents\\Inventor\\Tests\\NewTest2.ipt\"\n    \n    files(2, 0) = \"C:\\Users\\ekins\\OneDrive\\Documents\\Inventor\\Tests\\OldTest3.ipt\"\n    files(2, 1) = \"C:\\Users\\ekins\\OneDrive\\Documents\\Inventor\\Tests\\NewTest3.ipt\"\n    \n    files(3, 0) = \"C:\\Users\\ekins\\OneDrive\\Documents\\Inventor\\Tests\\OldTest4.ipt\"\n    files(3, 1) = \"C:\\Users\\ekins\\OneDrive\\Documents\\Inventor\\Tests\\NewTest4.ipt\"\n    \n    ' Specify the folder where the assemlbies to process exist.\n    Dim folder As String\n    folder = \"C:\\Users\\ekins\\OneDrive\\Documents\\Inventor\\Tests\\\"\n    \n    ' Iterate through all of the assemblies in the specified folder. This does\n    ' not do subfolders.\n    Dim assemblyFile As String\n    assemblyFile = Dir(folder & \"*.iam\")\n    Do While assemblyFile <> \"\"\n        ' Open the current assembly.\n        Dim asmDoc As AssemblyDocument\n        Set asmDoc = ThisApplication.Documents.Open(folder & assemblyFile, False)\n        \n        ' Check to see if this assembly references any of the parts in the list.\n        Dim refDocDesc As DocumentDescriptor\n        For Each refDocDesc In asmDoc.ReferencedDocumentDescriptors\n            Dim i As Integer\n            For i = 0 To UBound(files, 1)\n                If refDocDesc.ReferencedDocument.FullFileName = files(i, 0) Then\n                    ' A match was found, so replace it.\n                    refDocDesc.ReferencedFileDescriptor.ReplaceReference (files(i, 1))\n                End If\n            Next\n        Next\n        \n        ' There's a bug where the display name of the occurrence doesn't always update.\n        ' This resets them to the their default.\n        Dim occ As ComponentOccurrence\n        For Each occ In asmDoc.ComponentDefinition.Occurrences\n            occ.Name = \"\"\n        Next\n        \n        ' Save the assembly and close it.\n        Call asmDoc.Save2(False)\n        asmDoc.Close\n    \n        ' Get the next assembly.\n        assemblyFile = Dir()\n    Loop\n    \n    MsgBox \"Finished.\"\nEnd Sub"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Ilogic - Export sheetmetal parts in an assembly to IGES format\n                    ", "solution": ["Public Sub Main()\n\tExportSheetMetalAsIGES(\"C:\\Temp\\\")\nEnd Sub\n\nPublic Sub ExportSheetMetalAsIGES(folder As String)\n\tIf ThisDoc.Document.DocumentType <> Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n\t\tMsgBox(\"The active document must be an assembly.\")\n\t\tReturn\n\tEnd If\n\n\tDim asmDoc As Inventor.AssemblyDocument = ThisDoc.Document\t\n\t\n\t' Iterate through each document in the assembly, looking for sheet metal parts.\n\tFor Each doc As Inventor.Document In asmDoc.AllReferencedDocuments\n\t\t' Check for sheet metal document.\n\t\tIf doc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n\t\t\t' Do a Save Copy As of the document to create the IGES file.\n\t\t\tdoc.SaveAs(folder & System.IO.Path.GetFileNameWithoutExtension(doc.FullFileName) & \".igs\", True)\n\t\tEnd If\n\tNext\nEnd Sub"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: iLogic - How to use Balloons.AttachToComponent?\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Parts with same part name to have different item numbers in BOM\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Remove an occurrence from an ObjectEnumerator (or ObjectCollection)\n                    ", "solution": ["\t\t Dim oAsmDoc As Inventor.AssemblyDocument\n        oAsmDoc = ThisApplication.ActiveDocument\n\n\n        Dim oAsmCompDef As AssemblyComponentDefinition\n        oAsmCompDef = oAsmDoc.ComponentDefinition\n\n        Dim oAsmOccPattern As OccurrencePattern\n        oAsmOccPattern = oAsmCompDef.OccurrencePatterns.Item(1)\n\n        Dim oAsmCompOcc As ComponentOccurrence\n        oAsmCompOcc = oAsmOccPattern.ParentComponents.Item(1)\n\n        Dim oOccurrences As ObjectCollection\n        oOccurrences = oAsmOccPattern.ParentComponents\n\n        oOccurrences.RemoveByObject(oAsmCompOcc)\n\n        oAsmOccPattern.ParentComponents = oOccurrences"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Adding Entries in combobox\n                    ", "solution": ["Private Sub UserForm_Activate()\n\nMe.ListBox1.AddItem \"x\", 0\nMe.ListBox1.AddItem \"y\", 0\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Edit all parts of Assembly\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Save and replace Ilogic\n                    ", "solution": [" Dim oDoc AS Document", "oDoc = ThisDoc.Document", "Dim oSS AS SelectSet", "oSS = oDOc.SelectSet", "Dim oCommandMgr As CommandManager", "oCommandMgr = ThisApplication.CommandManager", "Dim oControlDef As ControlDefinition", "oControlDef = oCommandMgr.ControlDefinitions.Item(\"AssemblyBonusTools_SaveAndReplaceComponentCmd\") ", "For Each oOcc in oDoc.ComponentDefinition.Occurrences.AllLeafOccurrences", "    If oOcc.Definition.Document.PropertySets(\"Design Tracking Properties\")(\"Part Number\").Value = \"\"\n        oSS.Clear", "        oSS.Select(oOcc)\n        oControlDef.Execute", "    End if", "Next"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Apply load to a specified area on content center files\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Use iLogic to Click on Vault Dialogue Button\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Wait add in from loading\n                    ", "solution": [], "author": "Rene.Gerlach"},
{"created at": [], "solution Title": "\n                        Re: help requried on macro for convert part\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Change part number from assembly level\n                    ", "solution": [], "author": "YannickEnrico"},
{"created at": [], "solution Title": "\n                        Re: Selecting a point in space with the mouse in C# -interaction events and hand\n                    ", "solution": [], "author": "michael-peterso"},
{"created at": [], "solution Title": "\n                        Re: How to Create Workplane At UCS Origin?\n                    ", "solution": ["    Private Sub COGUpdate()\n      Dim oWorkPoint As WorkPoint\n      Dim oWorkPlane As WorkPlane\n      Dim vX, vY, vZ As UnitVector\n      Dim oFixedDef As FixedWorkPointDef\n      Dim oAssPtDef As AssemblyWorkPointDef\n      Dim PointExist As Boolean = False\n      Dim COGXYExist As Boolean = False\n      Dim COGXZExist As Boolean = False\n      Dim COGYZExist As Boolean = False\n      Dim oDoc As Document = m_inventorApplication.ActiveDocument\n      Dim oCenterOfMass As Point = oDoc.ComponentDefinition.MassProperties.CenterOfMass\n\n      For Each oWorkPoint In oDoc.ComponentDefinition.WorkPoints\n        If oWorkPoint.Name = \"COG\" Then\n          PointExist = True\n          If oDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n            oAssPtDef = oWorkPoint.Definition\n            oAssPtDef.Point = oCenterOfMass\n          ElseIf oDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n            oFixedDef = oWorkPoint.Definition\n            oFixedDef.Point = oCenterOfMass\n          End If\n          oDoc.Update()\n          Exit For\n        End If\n      Next\n\n      If Not PointExist Then\n        oWorkPoint = oDoc.ComponentDefinition.WorkPoints.AddFixed(oCenterOfMass)\n        oWorkPoint.Name = \"COG\"\n      End If\n\n      vX = m_inventorApplication.TransientGeometry.CreateUnitVector(1, 0, 0)\n      vY = m_inventorApplication.TransientGeometry.CreateUnitVector(0, 1, 0)\n      vZ = m_inventorApplication.TransientGeometry.CreateUnitVector(0, 0, 1)\n\n      For Each oWorkPlane In oDoc.ComponentDefinition.WorkPlanes\n        Select Case oWorkPlane.Name\n          Case \"COG XY\"\n            oWorkPlane.SetFixed(oWorkPoint.Point, vX, vY)\n            COGXYExist = True\n            'oWorkPlane.Delete()\n          Case \"COG XZ\"\n            oWorkPlane.SetFixed(oWorkPoint.Point, vX, vZ)\n            COGXZExist = True\n            'oWorkPlane.Delete()\n          Case \"COG YZ\"\n            oWorkPlane.SetFixed(oWorkPoint.Point, vY, vZ)\n            COGYZExist = True\n          Case Else\n            Exit Select\n            'oWorkPlane.Delete()\n        End Select\n      Next\n\n      If Not COGXYExist Then\n        oWorkPlane = oDoc.ComponentDefinition.WorkPlanes.AddFixed(oWorkPoint.Point, vX, vY)\n        oWorkPlane.Name = \"COG XY\"\n      End If\n      If Not COGXYExist Then\n        oWorkPlane = oDoc.ComponentDefinition.WorkPlanes.AddFixed(oWorkPoint.Point, vX, vZ)\n        oWorkPlane.Name = \"COG XZ\"\n      End If\n      If Not COGYZExist Then\n        oWorkPlane = oDoc.ComponentDefinition.WorkPlanes.AddFixed(oWorkPoint.Point, vY, vZ)\n        oWorkPlane.Name = \"COG YZ\"\n      End If\n\n      oDoc.Update()\n\n    End Sub"], "author": "pineapple.law19"},
{"created at": [], "solution Title": "\n                        Re: Need to Rename Sketch Block using an iLogic Rule\n                    ", "solution": ["Dim doc As Inventor.PartDocument \ndoc = ThisApplication.ActiveDocument \n\nDim oDef As PartComponentDefinition \noDef = doc.ComponentDefinition \n\nDim blockList As ArrayList = New ArrayList()\nDim oSketchBlock As Inventor.SketchBlockDefinition \nFor Each oSketchBlock In oDef.SketchBlockDefinitions \n\tblockList.Add(oSketchBlock.Name)\nNext\n\nTry\n\tMultiValue.List(\"Sketch_Blocks\") = blockList\nCatch\n\t' parameter doesn't exist - create it\n\n\tDim oParam As Parameter = oDef.Parameters.UserParameters.AddByValue(\"Sketch_Blocks\", blockList(0), UnitsTypeEnum.kTextUnits)\n\tMultiValue.List(\"Sketch_Blocks\") = blockList\n\nEnd Try\n\nselectedBlock = InputListBox(\"Choose Sketch Block Defintion to rename\", MultiValue.List(\"Sketch_Blocks\"),  _\nblockList(0), Title := \"Sketch Block definition\", ListName := \"Available Sketch Block defintion\")\n\nmyparam = InputBox(\"Enter name to rename selected SketchBlockDefintion\", \"Editing SketchBlockDefintion\", \"DM-03-Circle\")\n\nFor Each oSketchBlock In oDef.SketchBlockDefinitions \n\tIf oSketchBlock.Name = selectedBlock Then\n\t\toSketchBlock.Name = myparam \n\t\tMessageBox.Show(\"Sucessfully renamed\", \"iLogic\")\n\tEnd If\nNext\n\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Alternative to ucsDef.SetByThreePoints in assembly\n                    ", "solution": ["UnitVector zUnitVector = facePlane.Normal;\nUnitVector xUnitVector = vertPlane.Plane.Normal;\nUnitVector yUnitVector = xUnitVector.CrossProduct(zUnitVector);\n\nMatrix matrix = transGeo.CreateMatrix();\nmatrix.SetCoordinateSystem(pickPt, xUnitVector.AsVector(), yUnitVector.AsVector(), zUnitVector.AsVector());\n\nUserCoordinateSystemDefinition ucsDef = compDef.UserCoordinateSystems.CreateDefinition();\nucsDef.Transformation = matrix;"], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: AddFitted and AddByTwoPoints problems...(C++/COM)\n                    ", "solution": ["    pDrawingSketch->Edit();\n\n    ...add stuff to the sketch...\n\n    pDrawingSketch->ExitEdit();"], "author": "oransen"},
{"created at": [], "solution Title": "\n                        Re: Need to swap Material Library using an iLogic rule\n                    ", "solution": ["Sub Main()\n\tDim oDoc = ThisDoc.Document\n\tDim assetLib As AssetLibrary\n\n\n\t'2nd Method\n\tDim oLibraries_Current_Project As New ArrayList\t\n\t'get the materials collection\n\t'get the desired material from the collection\n\toLibraries_Current_Project.Add(\"DhaMag Material Library\")\t\n\toLibraries_Current_Project.Add(\"Autodesk Material Library\")\t\n\toLibraries_Current_Project.Add(\"Inventor Material Library\")\t\n\toLibraries_Current_Project_X = InputListBox(\"SELECT REQ'D LIB. FROM ABOVE!\", oLibraries_Current_Project, oLibraries_Current_Project.Item(0), \"CHANGE MATERIAL LIB.\", \"LIST OF LIBRARIES\")\n\n\tDim oMaterialAsset As Inventor.AssetLibrary \n\toMaterialAsset = ThisApplication.AssetLibraries.Item(oLibraries_Current_Project_X)\n\n\n\tDim oMaterials As New ArrayList\n\tFor Each oMaterial In oMaterialAsset.MaterialAssets \n\t\toMaterials.Add(oMaterial.Displayname)\n\tNext\n\t\n\t\n\t'present the user with the list to choose from\n\t100:\n\toMaterial_IP = InputListBox(\"CHOOSE MATERIAL FROM ABOVE LIST\", oMaterials, oMaterials.Item(0), \"MATERIAL SELECTION\", \"LIST OF MATERIALS\")\n\tIf oMaterial_IP = \"\" Then Goto 100:\n\tiProperties.Material = oMaterial_IP\n\t\t\nEnd Sub\n\n\n\n\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: how to Add ModelSurfaceTextureSymbols\n                    ", "solution": ["Sub Main()\n\n    Dim doc As PartDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim oDef As PartComponentDefinition\n    Set oDef = doc.ComponentDefinition\n    \n    Dim oFace As Face\n    Set oFace = ThisApplication.CommandManager.Pick(kPartFaceFilter, \"Select a face to add leader point\")\n    \n    Dim oAnnotationPlaneDef As AnnotationPlaneDefinition\n    Set oAnnotationPlaneDef = oDef.ModelAnnotations.CreateAnnotationPlaneDefinitionUsingPlane(oFace)\n    \n    ' Set a reference to the TransientGeometry object.\n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n\n    Dim oSurfacePoints As ObjectCollection\n    Set oSurfacePoints = ThisApplication.TransientObjects.CreateObjectCollection\n\n    ' Create a few leader points.\n    Call oSurfacePoints.Add(oTG.CreatePoint(10, 15, 0))\n    \n    Dim oIntent As GeometryIntent\n    Set oIntent = oDef.CreateGeometryIntent(oFace)\n    \n    Call oSurfacePoints.Add(oIntent)\n    \n    Dim oSurfaceTexDef As ModelSurfaceTextureSymbolDefinition\n    Set oSurfaceTexDef = oDef.ModelAnnotations.ModelSurfaceTextureSymbols.CreateDefinition(oSurfacePoints, oAnnotationPlaneDef)\n    \n    Dim oSurfaceTexture As ModelSurfaceTextureSymbol\n    Set oSurfaceTexture = oDef.ModelAnnotations.ModelSurfaceTextureSymbols.Add(oSurfaceTexDef)\n    \n    Dim oLeaderPoints As ObjectCollection\n    Set oLeaderPoints = ThisApplication.TransientObjects.CreateObjectCollection\n\n    ' Create a few leader points.\n    Call oLeaderPoints.Add(oTG.CreatePoint(5, 10, 0))\n    \n    Dim oLeaderIntent As GeometryIntent\n    Set oLeaderIntent = oDef.CreateGeometryIntent(oFace)\n    \n    Call oLeaderPoints.Add(oLeaderIntent)\n    \n    Dim oLeaderDef As ModelLeaderNoteDefinition\n    Set oLeaderDef = oDef.ModelAnnotations.ModelLeaderNotes.CreateDefinition(oLeaderPoints, \"Sample\", oAnnotationPlaneDef)\n    \n    Dim oLeader As ModelLeaderNote\n    Set oLeader = oDef.ModelAnnotations.ModelLeaderNotes.Add(oLeaderDef)\n    \nEnd Sub\n\n", "Sub Main()\n\n    Dim doc As PartDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim oDef As PartComponentDefinition\n    Set oDef = doc.ComponentDefinition\n    \n    Dim oFace As Face\n    Set oFace = ThisApplication.CommandManager.Pick(kPartFaceFilter, \"Select a face to add Model feature control frame\")\n    \n    Dim oAnnotationPlaneDef As AnnotationPlaneDefinition\n    Set oAnnotationPlaneDef = oDef.ModelAnnotations.CreateAnnotationPlaneDefinitionUsingPlane(oFace)\n    \n    ' Set a reference to the TransientGeometry object.\n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n    \n    Dim oIntent As GeometryIntent\n    Set oIntent = oDef.CreateGeometryIntent(oFace)\n        \n    Dim oPt As Point\n    Set oPt = oTG.CreatePoint(12, 15, 0)\n    \n    Dim oMFCFDef As ModelFeatureControlFrameDefinition\n    Set oMFCFDef = oDef.ModelAnnotations.ModelFeatureControlFrames.CreateDefinition(oIntent, oAnnotationPlaneDef, oPt)\n\n    Dim oMFCFRow As ModelFeatureControlFrameRow\n    Set oMFCFRow = oMFCFDef.FeatureControlFrameRows.Add(kFlatness, 0.02)\n    \n    Dim oMFCF As ModelFeatureControlFrame\n    Set oMFCF = oDef.ModelAnnotations.ModelFeatureControlFrames.Add(oMFCFDef)\n    \n    \nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Title block update from iLogic\n                    ", "solution": [], "author": "tkennedy26"},
{"created at": [], "solution Title": "\n                        Re: iLogic class destructor\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: 'Border' is not a valid template type argument for parameter 'T'\n                    ", "solution": ["    CComPtr<Sheet> pSheet = nullptr ;\n \n    // Get some data about the sheet...\n    double SheetHeight,SheetWidth,Border ;\n    CComBSTR bstrSheetName ;\n    pSheet->get_Name (&bstrSheetName) ;\n", "    pSheet->get_Width(&SheetWidth) ;\n    pSheet->get_Height(&SheetHeight) ;\n", "    CComPtr<Border> pBorder; // <---- Border is not a type name !!!HERE!!!\n    pSheet->get_Border(&pBorder);", "\tHRESULT Result = NOERROR;\t\n\n\tCLSID InvAppClsid;\n\tResult = CLSIDFromProgID(L\"Inventor.Application\", &InvAppClsid);\n\tif (FAILED(Result)) return Result;\n\n\tCComPtr<IUnknown> pInvAppUnk;\n\t \n\tResult = ::GetActiveObject(InvAppClsid, NULL, &pInvAppUnk);\n\tif (FAILED(Result))\n\t\t_tprintf_s(_T(\"*** Could not get hold of an active Inventor application ***\\n\"));\n\t \n\tif (FAILED(Result)) return Result;\n\n\tCComPtr<Application> pInvApp;\n\tResult = pInvAppUnk->QueryInterface(__uuidof(Application), (void **)&pInvApp);\n\tif (FAILED(Result)) return Result;\n\n\tCComPtr<Document> pDoc;\n\tResult = pInvApp->get_ActiveDocument(&pDoc);\n\n\tCComPtr<DrawingDocument> pDrawDoc;\n\tpDrawDoc = pDoc;\n\n\tCComPtr<Sheet> pSheet;\n\tResult = pDrawDoc->get_ActiveSheet(&pSheet);\n\n\tCComPtr<Border> pBorder;\n\tResult = pSheet->get_Border(&pBorder);\n\n\treturn S_OK;"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Rename all constraints in iLogic\n                    ", "solution": ["Dim doc As AssemblyDocument = ThisDoc.Document\n\tFor Each oConstraint As AssemblyConstraint In doc.ComponentDefinition.Constraints\n\t\t\n\t\tDim oConstName As String = oConstraint.Name.Split(\":\")(0)\n\t\tIf oConstName = \"Mate\" Then\n\t\t\toConstraint.Name = \"NewName\" & \":\" & oConstraint.Name.Split(\":\")(1)\n\t\tEnd If\n\t\t\n\tNext\n\t"], "author": "jhoel.forshav"},
{"created at": [], "solution Title": "\n                        Re: Update part list style with ilogic\n                    ", "solution": ["Sub", " ", "Main", "()\n    ", "Dim", " ", "oPL", " ", "As", " ", "PartsList", "\n    ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "ThisDoc", ".", "Document", ".", "Sheets", "\n        ", "For", " ", "Each", " ", "oPL", " ", "In", " ", "oSheet", ".", "PartsLists", "\n            ", "Call", " ", "RefreshPartsListStyle", "(", "oPL", ")\n        ", "Next", "\n    ", "Next", "\n", "End", " ", "Sub", "\n\n", "Sub", " ", "RefreshPartsListStyle", "(", "oPartsList", " ", "As", " ", "PartsList", ")   \n    \n    ", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n    ", "oDoc", " = ", "oPartsList", ".", "Parent", ".", "Parent", "\n\n    ", "Dim", " ", "oStyleMgr", " ", "As", " ", "DrawingStylesManager", "\n    ", "oStyleMgr", " = ", "oDoc", ".", "StylesManager", "\n    \n    ", "oActivePLStyle", " = ", "oPartsList", ".", "Style", "\n   \n    ", "For", " ", "Each", " ", "oStyle", " ", "In", " ", "oStyleMgr", ".", "PartsListStyles", "\n        ", "If", " ", "Not", " ", "oStyle", ".", "Equals", "(", "oActivePLstyle", ")\n            ", "oNotActivePLStyle", " = ", "oStyle", "\n            ", "Exit", " ", "For", "\n        ", "End", " ", "If", "\n    ", "Next", "\n    \n    ", "oPartsList", ".", "Style", " = ", "oNotActivePLStyle", "\n    ", "'oDoc.Update", "\n    ", "oPartsList", ".", "Style", " = ", "oActivePLStyle", "\n", "End", " ", "Sub", "\u00a0\u00a0\u00a0"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Copy Model iProperty Settings with iLogic\n                    ", "solution": ["oRefDoc = ThisDrawing.ModelDocument\nDim oPropValue As String \n\noPropValue = oRefDoc.PropertySets(\"User Defined Properties\").Item(\"Sample\").value \niProperties.Value(\"Custom\", \"Sample\") = oPropValue"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic AutoComplete Enabled\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Using parameter to multiply the quntity in Part List\n                    ", "solution": ["Sub", " ", "Main", "()\n    ", "oQty", " = ", "BatchQty", "\n    ", "Call", " ", "AdjustBOMQTY", "(", "oQty", ")\n", "End", " ", "Sub", "\n\n", "Sub", " ", "AdjustBOMQTY", "(", "oQty", " ", "As", " ", "Double", ")\n    ", "Dim", " ", "oCD", " ", "As", " ", "ComponentDefinition", "\n    ", "oCD", " = ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", "\n\n    ", "Dim", " ", "oBOM", " ", "As", " ", "BOM", "\n    ", "oBOM", " = ", "oCD", ".", "BOM", "\n\n    ", "oBOM", ".", "StructuredViewEnabled", " = ", "True", "\n    \n    ", "Dim", " ", "oStructBOM", " ", "As", " ", "BOMView", "\n    ", "oStructBOM", " = ", "oBOM", ".", "BOMViews", "(", "\"Structured\"", ")\n    \n    ", "For", " ", "Each", " ", "oBOMRow", " ", "In", " ", "oStructBOM", ".", "BOMRows", "\n        ", "oBOMRow", ".", "TotalQuantityOverridden", " = ", "False", "\n        ", "oBOMRow", ".", "TotalQuantity", " = ", "oBOMRow", ".", "TotalQuantity", "*", "oQty", "\n    ", "Next", "\n", "End", " ", "Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Visual Studio: Type is not defined\n                    ", "solution": [], "author": "DonStauffer99"},
{"created at": [], "solution Title": "\n                        Re: damaged i.am file inventor 2016\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic in DWG: To select a dimension and assign to a user parameter in the m\n                    ", "solution": ["Dim oDoc As Document\noDoc = ThisDrawing.ModelDocument\n\nDim oUserParams As UserParameters\noUserParams = oDoc.ComponentDefinition.Parameters.UserParameters\n\nDim oDim As Inventor.GeneralDimension\nDo\n\toDim = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingDimensionFilter, \"Select Dimension\")\n\tIf oDim Is Nothing\n\t\tExit Do\n\tEnd If\n\t\n\toParamName = InputBox(\"Please enter parameter name.\", \"iLogic\")\n\tIf oParamName = \"\" Then\n\t\tContinue Do\n\tEnd If\n\t\n\tIf TypeOf oDim Is AngularGeneralDimension\n\t\toUserParams.AddByValue(oParamName, oDim.ModelValue, UnitsTypeEnum.kRadianAngleUnits)\n\tElse\n\t\toUserParams.AddByValue(oParamName, oDim.ModelValue, UnitsTypeEnum.kCentimeterLengthUnits)\n\tEnd If\n\t\nLoop While oDim IsNot Nothing"], "author": "peter.hamas"},
{"created at": [], "solution Title": "\n                        Re: Circular patterns feature strange results\n                    ", "solution": ["Dim oRotation As String = PatternRotation\n\tDim circularPatternDef As CircularPatternFeatureDefinition = oCompDef.Features.CircularPatternFeatures.CreateDefinition(objColl, oCompDef.WorkAxes(\"Z Axis\"), False, 4, \"PatternRotation\") ' The PatternRotation parameter used here results in the same value as OP no matter what!\n\tParameter.UpdateAfterChange = True\n\tDim circularPat As CircularPatternFeature = oCompDef.Features.CircularPatternFeatures.AddByDefinition(circularPatternDef)\n\tcircularPat.SetEndOfPart(True) 'move the EOP so things don't KABOOM\n\t'THIS IS A KLUDGE TO FIX AUTODESK'S BUG AND SHOULDN'T BE NECESSARY!:\n\tDim ModelParamList As List(Of ModelParameter) = New List(Of ModelParameter)\n\tFor Each MParameter As ModelParameter In oCompDef.Parameters.ModelParameters\n\t\tModelParamList.Add(MParameter)\t\n\tNext\n\t\n\t'debug information\n\tMessageBox.Show(ModelParamList.Count)\n\tDim maxParam As Parameter = Nothing\n\tDim maxParamNum As Integer = 0\n\tIf ModelParamList.Count > 0 Then\n\t\tModelParamList.Sort(Function(x As ModelParameter, y As ModelParameter) x.Name.CompareTo(y.Name)) 'would usually use list.OrderBy() extension method here, but iLogic doesn't recognise it!\n\t\tmaxParam = (From param As ModelParameter In ModelParamList Select param).Last()\n\tEnd If\n\tDim p As ModelParameter = maxParam ' should probably error check this but it works for me!\n\tp.Expression = \"PatternRotation\"\n\toCompDef.SetEndOfPartToTopOrBottom(False)", "// Create circular pattern off features", "ObjectCollection features = m_inventorApplication.TransientObjects.CreateObjectCollection();", "features.Add(*your features to pattern*);", "WorkAxis wa = prtDoc.ComponentDefinition.WorkAxes[3]; // Z-Axis", "object angle = (360 * 180 / Math.PI); ", "object amount = 4;", "CircularPatternFeatureDefinition cpfd = prtDoc.ComponentDefinition.Features.CircularPatternFeatures.CreateDefinition(features, wa, false, amount, angle, true); ", "CircularPatternFeature cpf = prtDoc.ComponentDefinition.Features.CircularPatternFeatures.AddByDefinition(cpfd);\n// ANGLE CIRCULAR PATTERN FIX FOR ERROR IN AUTODESK INVENTOR API, ANGLE NEVER RETURNS CORRECTLY\nModelParameter mp = prtDoc.ComponentDefinition.Parameters.ModelParameters[prtDoc.ComponentDefinition.Parameters.ModelParameters.Count];\nmp.Expression = \"360 deg\";"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Selection Methods\n                    ", "solution": ["  selectObj = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kSketchObjectFilter, \"Select sketch entity\")\n     ", " selectObj = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartBodyFilter, \"Select part body\")\n\t", "selectObj = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingDimensionFilter, \"Select drawing dimension\")\n\t", "Parameter", "(", "oModelDoc", ", ", "oLWT_Array_IP", ")", " ", "=", " ", "oTxt_SizeOA"], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: Analyzing Interference Between Different Nodes\n                    ", "solution": [], "author": "yoni.peleg"},
{"created at": [], "solution Title": "\n                        Re: how to add the user parameter to Sketch using vb.net\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: BOM Cell Value - Decimal Places\n                    ", "solution": ["doc = ThisDrawing.ModelDocument\n\nDim oUnit As Inventor.UnitsTypeEnum  \noUnit = doc.unitsofmeasure.MassUnits\n\nSelect Case oUnit \n\t\nCase UnitsTypeEnum.kGramMassUnits \n\t\n\tmessagebox.Show(\"Gram mass\", \"Mass unit\")\nCase Unitstypeenum.kLbMassMassUnits \n\t\n\tmessagebox.Show(\"Lbs mass\", \"Mass unit\")\nCase UnitsTypeEnum.kKilogramMassUnits \n\t\n\tmessagebox.Show(\"Kg mass\", \"Mass unit\") \nCase UnitsTypeEnum.kSlugMassUnits \n\n\tmessagebox.Show(\"Slug mass\", \"Mass unit\")\nEnd Select"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Set affectedbodies for RectangularPatternFeature\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Inventor 2019: Assign Name, Attribut Set Values\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: iLogic to import Model Parameters to dwg Iproperties.. for beginners\n                    ", "solution": ["'For loop version.", "For Each oUserParam in ThisApplication.ActiveDocument.ComponentDefinition.Parameters.UserParameters\n    If oUserparam.Name Like \"y*\" or oUserParam.Name like \"b*\" or oUserParam.Name like \"c*\" Then", "        MsgBox(oUserParam.Name)", "    End if\nNext", "Dim i As Integer\nDim fname As String \n\noViewModelName = ThisApplication.ActiveDocument.ActiveSheet.DrawingViews.Item(1).ReferencedDocumentDescriptor.ReferencedFileDescriptor.FullFileName\nfname = System.IO.Path.GetFileName(oViewModelName)\n\nDim i As Integer =1\nDim oComplete AS Boolean = False\nDo\n    Dim prop_y = \"y\"&i 'declaring property names\n    Dim prop_b = \"b\"&i 'all of these properties were created manually in my dwg\n    Dim prop_c = \"c\"&i 'its a template dwg so no big deal to do it manually\n    \n    Try\n        iProperties.Value(\"Custom\", prop_y)= Parameter(fname, prop_y)\n        iProperties.Value(\"Custom\", prop_b)= Parameter(fname, prop_b)\n        iProperties.Value(\"Custom\", prop_c)= Parameter(fname, prop_c)\n    Catch\n        oComplete = True\n    End Try", "    i = i+1\nLoop Until oComplete = True"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: To change drawing sheet size to Custom - 24 x 36\n                    ", "solution": ["'requires the input width/height in 'cm'", "With ThisApplication.ActiveDocument.ActiveSheet\n    .Size = DrawingSheetSizeEnum.kCustomDrawingSheetSize\n    .Height = 24*2.54\n    .Width = 36*2.54\nEnd With"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Change position\n                    ", "solution": ["Public Sub qwerty()\nThisApplication.ActiveDocument.ComponentDefinition.RepresentationsManager.PositionalRepresentations(\"", "QWERTY", "\").Activate\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Center drawing views\n                    ", "solution": ["Dim mApp As Inventor.Application\n        mApp = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n        Dim oDoc As DrawingDocument\n        oDoc = mApp.ActiveDocument\n\n        Dim oSheet As Sheet\n        oSheet = oDoc.ActiveSheet\n\n        Dim oListx As ArrayList = New ArrayList()\n        Dim oListy As ArrayList = New ArrayList()\n        Dim oView As DrawingView\n        For Each oView In oSheet.DrawingViews\n            oListx.Add(oView.Position.X)\n            oListy.Add(oView.Position.Y)\n        Next\n\n        oListx.Sort()\n        oListy.Sort()\n\n        Dim mid As Integer\n        mid = (oListy.Count - 1) / 2\n\n        Dim midView As DrawingView\n\n        For Each oView In oSheet.DrawingViews\n            If Math.Round(oView.Position.X, 6) = Math.Round(oListx(mid), 6) And Math.Round(oView.Position.Y, 6) = Math.Round(oListy(mid), 6) Then\n                midView = oView\n                Exit For\n            End If\n        Next\n\n        oDoc.SelectSet.Select(midView)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: VBA Macro to Move EOP\n                    ", "solution": [], "author": "dmora"},
{"created at": [], "solution Title": "\n                        Re: iLogic to to take a multiple sheet drawing file into separate drawing files\n                    ", "solution": ["Sub", " ", "Main", "()", "\n    ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n    ", "'", "Set oDrawDoc = ThisApplication.ActiveDocument", "\n    ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    ", "oPath", " ", "=", " ", "ThisDoc", ".", "Path", "\n    ", "Dim", " ", "str1", " ", "As", " ", "String", "\n    ", "str1", " ", "=", " ", "oDrawDoc", ".", "FullFileName", "\n    \n    ", "Dim", " ", "s", " ", "As", " ", "Sheet", "\n    \n    ", "For", " ", "Each", " ", "s", " ", "In", " ", "oDrawDoc", ".", "Sheets", "\n        \n        ", "s", ".", "Activate", "\n        ", "Dim", " ", "oDrawDoc1", " ", "As", " ", "DrawingDocument", "\n        \n        ", "'", "Set oDrawDoc1 = ThisApplication.Documents.Add(kDrawingDocumentObject)", "\n        ", "oDrawDoc1", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Add", "(", "kDrawingDocumentObject", ")", "\n        \n        ", "'", "Call s.CopyTo(oDrawDoc1)", "\n        ", "s", ".", "CopyTo", "(", "oDrawDoc1", ")", "\n        \n        ", "oDrawDoc1", ".", "Sheets", ".", "Item", "(", "1", ")", ".", "Delete", "\n        \n        ", "Dim", " ", "Str", " ", "As", " ", "String", "\n        \n        ", "Str", " ", "=", " ", "s", ".", "DrawingViews", ".", "Item", "(", "1", ")", ".", "ReferencedDocumentDescriptor", ".", "FullDocumentName", "\n        \n        ", "Str", " ", "=", " ", "Right", "(", "Str", ", ", "Len", "(", "Str", ")", " ", "-", " ", "InStrRev", "(", "Str", ", ", "\"", "\\", "\"", "))", "\n             \n        ", "Str", " ", "=", " ", "Left", "(", "Str", ", ", "Len", "(", "Str", ")", " ", "-", " ", "4", ")", "\n                \n        ", "Dim", " ", "fname", " ", "As", " ", "String", "\n        \n        ", "'", "fname = Replace(str1, \".idw\", \"_\" & Replace(s.Name, \":\", \"_\") & \"_\" & Str & \".idw\")", "\n        ", "fname", " ", "=", " ", "oPath", " ", "&", " ", "\"", "/", "\"", " ", "&", "  ", "Str", " ", "&", " ", "\"", ".idw", "\"", "\n\n        ", "'", "Call oDrawDoc1.SaveAs(fname, False)", "\n        ", "oDrawDoc1", ".", "SaveAs", "(", "fname", ", ", "False", ")", "\n        ", "'", "s.Name = Str", "\n        ", "'", "Call oDrawDoc1.Close", "\n        ", "oDrawDoc1", ".", "Close", "\n    ", "Next", "\n", "End Sub", "\n\n"], "author": "Jesper_S"},
{"created at": [], "solution Title": "\n                        Re: iLogic to export each view on individual page\n                    ", "solution": ["Imports", " ", "Inventor", ".", "ViewOrientationTypeEnum", "\n", "Imports", " ", "Inventor", ".", "DrawingViewStyleEnum", "\n", "Imports", " ", "Inventor", ".", "PointIntentEnum", "\n", "Imports", " ", "Inventor", ".", "DimensionTypeEnum", "\n", "Imports", " ", "Inventor", ".", "DrawingCurveSegmentEnum", "\n", "Imports", " ", "Inventor", ".", "DrawingCurveEnum", "\n", "Imports", " ", "Inventor", ".", "CurveTypeEnum", "\n\n", "Sub", " ", "Main", "\n    ", "Dim", " ", "oAsmDoc", " ", "as", " ", "AssemblyDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    ", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", " ", "=", " ", "oAsmDoc", ".", "ComponentDefinition", "\n\n    ", "Dim", " ", "AssemblyDocName", " ", "As", " ", "String", "     \n    ", "AssemblyDocName", " ", "=", " ", "ThisDoc", ".", "FileName", "(", "False", ")", " ", "'", "without extension", "\n    ", "Dim", " ", "path", " ", "As", " ", "String", " ", "=", " ", "ThisDoc", ".", "Path", "\n    ", "Dim", " ", "partDir", " ", "As", " ", "String", " ", "=", " ", "path", " ", "&", " ", "\"", "\\parts", "\"", "\n    ", "Dim", " ", "templateFile", " ", "As", " ", "String", " ", "=", " ", "partdir", " ", "&", " ", "\"", "\\StandardB.idw", "\"", "\n\n    ", "Dim", " ", "oAssem_DrawingDoc", " ", "As", " ", "DrawingDocument", "\n    ", "Assem_DrawingDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Add", "(", "kDrawingDocumentObject", ",", "templateFile", ", ", "True", ")", "\n\n    ", "'", "Get the Sheets collection", "\n    ", "oSheets", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "Sheets", "\n    ", "'", "Get the first sheet", "\n    ", "oSheet", " ", "=", " ", "oSheets", ".", "Item", "(", "1", ")", "            \n\n    ", "'", "Set the View Scales", "\n    ", "Dim", " ", "DrawingViewScale", " ", "As", " ", "Double", " \n    ", "DrawingViewScale", " ", "=", " ", "1", "/", "24", "\n    ", "'", "\n    ", "Dim", " ", "oTG", " ", "As", " ", "TransientGeometry", "\n    ", "oTG", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", "\n\n    ", "Dim", " ", "oTextPos", " ", "As", " ", "Point2d", "\n    ", "Dim", " ", "oPointOne", " ", "As", " ", "Point2d", "\n    ", "Dim", " ", "oPointTwo", " ", "As", " ", "Point2d", "\n    ", "Dim", " ", "oViewPos", " ", "As", " ", "Point2d", "\n    ", "oPointOne", " ", "=", " ", "oTG", ".", "CreatePoint2d", "(", "25", ", ", "13.5", ")", "\n    \n    ", "Dim", " ", "vws", " ", "=", " {", "kFrontViewOrientation", ",", "kBackViewOrientation", ",", "kLeftViewOrientation", ",", "kRightViewOrientation", ", ", "_", "\n                ", "kTopViewOrientation", ",", "kBottomViewOrientation", ",", "kIsoTopRightViewOrientation", "}\n    ", "For", " ", "Each", " ", "view", " ", "As", " ", "String", " ", "in", " ", "vws", "\n        ", "oSheet", " ", "=", " ", "oSheets", "(", "oSheets", ".", "Count", ")", "\n        ", "Try", " \n            ", "oBaseView", " ", "=", " ", "oSheet", ".", "DrawingViews", ".", "AddBaseView", "(", "oAsmDoc", ", ", "oPointOne", ", ", "DrawingViewScale", ", ", "view", ", ", "kHiddenLineRemovedDrawingViewStyle", ", ", "\"", "Default", "\"", ")", "\n        ", "Catch", " ", "ex", " ", "As", " ", "exception", "\n            ", "MessageBox", ".", "Show", "(", "ex", ".", "ToString", " ", "&", " ", "view", ", ", "\"", "BaseView", "\"", ")", "\n        ", "End", " ", "Try", "\n        ", "oSheets", ".", "Add", "\n    ", "Next", "\n", "End Sub", "          ", "'", "main", "Imports", " ", "Inventor", ".", "DrawingSheetSizeEnum", "\n", "Imports", " ", "Inventor", ".", "PageOrientationTypeEnum", "\n", "        ", "oSheets", ".", "Add", "(", "kA1DrawingSheetSize", ",", "kLandscapePageOrientation", ")", "\n"], "author": "kejlong"},
{"created at": [], "solution Title": "\n                        Re: Create a plane with offset using Inventor API\n                    ", "solution": [], "author": "Hochenauer"},
{"created at": [], "solution Title": "\n                        Re: iLogic message box at file open\n                    ", "solution": [], "author": "Jesper_S"},
{"created at": [], "solution Title": "\n                        Re: DRAWING SHEET iLogic - Ordinate Dimension overides\n                    ", "solution": ["Sub Main() \n\n\tDim oDimension As DrawingDimension\n\toDimension = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingDimensionFilter, \"Pick a Ordinate dimension to rename\")\n\t    \n\tIf oDimension.Type = ObjectTypeEnum.kOrdinateDimensionObject Then\n\t\t\n\t\tDim oList As ArrayList = New ArrayList()\n\t\toList.Add(\"01\")\n\t\toList.Add(\"02\")\n\t\toList.Add(\"03\")\n\t\t \n\t\tselected_num = InputListBox(\"Choose number to rename\", oList, oList.Item(0), \"Numbers list\", \"List of numbers to rename ordinate dimension\")\n\t\t\n\t\toDimension.HideValue = True \n\t\t\n\t\tSelect Case selected_num \n\t\t\n\t\tCase \"01\" \n\t\t\t\n\t\t\toDimension.Text.FormattedText = \"01\"\n\t\t\t\n\t\tCase \"02\" \n\t\t\t\n\t\t\toDimension.Text.FormattedText = \"02\"\n\t\tCase \"03\"\n\t\t\t\n\t\t\toDimension.Text.FormattedText = \"03\"\t \n\t\tEnd Select \n\t\t\n\t\tCall oDimension.Tolerance.SetToBasic()\n\tElse\n\t    MsgBox (\"Selected drawing dimension is not ordinate dimension\")\n\t    Exit Sub\n\tEnd If\n\nEnd Sub\n\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ButtonDefinition vrs ControlDefinition\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Parameter in VBA\n                    ", "solution": ["Public Sub GetDerivedParams()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n\n    Dim derivedTable As DerivedParameterTable\n    For Each derivedTable In partDoc.ComponentDefinition.Parameters.DerivedParameterTables\n        Debug.Print \"Parameters derived from: \" & derivedTable.ReferencedDocumentDescriptor.DisplayName\n        Dim param As DerivedParameter\n        For Each param In derivedTable.DerivedParameters\n            Debug.Print \"   \" & param.Name & \", \" & param.Value & \", \" & param.Units\n        Next\n    Next\nEnd Sub"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: How to read item number as per structured view\n                    ", "solution": ["Sub ListBomItems()\n        Dim asm As AssemblyDocument\n        asm = invApp.ActiveDocument\n\n        Dim b As BOM\n        b = asm.ComponentDefinition.BOM\n\n        b.StructuredViewEnabled = True\n\n        Dim bv As BOMView\n        bv = b.BOMViews(\"Structured\")\n        Dim oSort As Dictionary(Of Integer, Integer)\n        oSort = BOM_Sort(bv.BOMRows)\n        Call ListItems(bv.BOMRows, 0, oSort)\n    End Sub\n    Function BOM_Sort(rows As BOMRowsEnumerator)\n        Dim oSort As Dictionary(Of Integer, Integer) = New Dictionary(Of Integer, Integer)\n        Dim oRow As BOMRow\n        For i As Integer = 1 To rows.Count Step 1\n            oRow = rows.Item(i)\n            oSort.Add(oRow.ItemNumber, i)\n        Next\n        BOM_Sort = oSort\n    End Function\n    Sub ListItems(rows As BOMRowsEnumerator, indent As Integer, oSort As Dictionary(Of Integer, Integer))\n        Dim row As BOMRow\n        Dim i As Integer\n\n        For i = 1 To rows.Count Step 1\n\n            Dim key As Integer = oSort(i)\n            row = rows.Item(key)\n\n            Debug.Print(row.ItemNumber.ToString)\n\n            If Not row.ChildRows Is Nothing Then\n                Call ListItems(row.ChildRows, indent + 2)\n            End If\n        Next\n    End Sub\n    Sub ListItems(rows As BOMRowsEnumerator, indent As Integer)\n        Dim row As BOMRow\n        For Each row In rows\n            Debug.Print(row.ItemNumber.ToString)\n            If Not row.ChildRows Is Nothing Then\n                Call ListItems(row.ChildRows, indent + 2)\n            End If\n        Next\n    End Sub", "Sub ListBomItems()\n        Dim asm As AssemblyDocument\n        asm = invApp.ActiveDocument\n\n        Dim b As BOM\n        b = asm.ComponentDefinition.BOM\n\n        b.StructuredViewEnabled = True\n\n        Dim bv As BOMView\n        bv = b.BOMViews(\"Structured\")\n        Dim oSort As Dictionary(Of Integer, Integer)\n        oSort = BOM_Sort(bv.BOMRows)\n        Call ListItems(bv.BOMRows, 0, oSort)\n    End Sub\n    Function BOM_Sort(rows As BOMRowsEnumerator)\n        Dim oSort As Dictionary(Of Integer, Integer) = New Dictionary(Of Integer, Integer)\n        Dim oRow As BOMRow\n        For i As Integer = 1 To rows.Count Step 1\n            oRow = rows.Item(i)\n            oSort.Add(oRow.ItemNumber, i)\n        Next\n        BOM_Sort = oSort\n    End Function\n    Sub ListItems(rows As BOMRowsEnumerator, indent As Integer, oSort As Dictionary(Of Integer, Integer))\n        Dim row As BOMRow\n        Dim i As Integer\n\n        For i = 1 To rows.Count Step 1\n\n            Dim key As Integer = oSort(i)\n            row = rows.Item(key)\n\n            ", "Dim oCompDef As ComponentDefinition\n            oCompDef = row.ComponentDefinitions.Item(1)\n\n            Debug.Print(row.ItemNumber.ToString & \" \" & oCompDef.Type.ToString)\n", "\n            If Not row.ChildRows Is Nothing Then\n                Call ListItems(row.ChildRows, indent + 2)\n            End If\n        Next\n    End Sub\n    Sub ListItems(rows As BOMRowsEnumerator, indent As Integer)\n        Dim row As BOMRow\n        For Each row In rows\n            Dim oCompDef As ComponentDefinition\n            oCompDef = row.ComponentDefinitions.Item(1)\n\n            Debug.Print(row.ItemNumber.ToString & \" \" & oCompDef.Type.ToString)\n            If Not row.ChildRows Is Nothing Then\n                Call ListItems(row.ChildRows, indent + 2)\n            End If\n        Next\n    End Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic detect if adaptive assembly is hose&pipe or harness\n                    ", "solution": [" Sub SuppressAdaptivity()\n\n        Dim oAsmDoc As AssemblyDocument\n        Set oAsmDoc = ThisApplication.ActiveDocument\n\n        Dim occ As ComponentOccurrence\n        Dim occs As ComponentOccurrences\n        Set occs = oAsmDoc.ComponentDefinition.Occurrences\n\n        For Each occ In occs\n            If occ.Adaptive = True Then\n                'Dim fi As New System.IO.FileInfo(occ.ReferencedDocumentDescriptor.FullDocumentName)\nDim a As Document\nSet a = occ.ReferencedDocumentDescriptor.ReferencedDocument\n\nIf a.DocumentInterests.HasInterest(\"Piping Runs Environment\") = True Or a.DocumentInterests.HasInterest(\"HarnessPart\") = True Then\n\n                    MsgBox (occ.ReferencedDocumentDescriptor.FullDocumentName & \" = adaptive\")\n               \n    End If\nEnd If\n        Next\n    End Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Automatic PDF Macro\n                    ", "solution": [" If invdoc.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then\n                            Dim drawDoc As Inventor.DrawingDocument = invdoc\n                            ReadInventorData(batchFile)\n                            'warn user if errors (show error list, in log and on screen), choose to continue to plot or skip file and quit this routine\n                            Dim errorMng As ErrorManager = invApp.ErrorManager\n                            If errorMng.HasErrors = True Then\n                                Dim errors As String = errorMng.AllMessages\n                                MsgBox(\"This drawing has errors: \" & drawDoc.FullFileName & vbCr & errors, MsgBoxStyle.SystemModal)\n                                batchFile.Errors += \" Document errors:\" & errors\n                                booHasErrors = True\n                            End If\n                            If booHasErrors = True Then\n                                If MsgBox(\"Document has errors continue to PDF?\", MsgBoxStyle.YesNo + MsgBoxStyle.SystemModal) = MsgBoxResult.No Then\n                                    batchFile.Errors += \" Document not exported to PDF\"\n                                End If\n                            End If\n                            'export file to PDF using 'all sheets', 'default sizes', 'file name - Rev name' (keep color)\n                            Dim PDFAddin As TranslatorAddIn\n                            PDFAddin = invApp.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n                            Dim tContext As TranslationContext\n                            tContext = invApp.TransientObjects.CreateTranslationContext\n                            tContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n                            Dim nvmOptions As NameValueMap\n                            nvmOptions = invApp.TransientObjects.CreateNameValueMap\n                            Dim dm As DataMedium\n                            dm = invApp.TransientObjects.CreateDataMedium\n                            'create PDFprint filename\n                            Dim rev As String = drawDoc.PropertySets.Item(\"Inventor Summary Information\").Item(\"Revision Number\").Value\n                            batchFile.Revision = rev\n                            batchFile.PDF = VaultedFiles.Instance.Add(New SIO.FileInfo(CreatePDFFilePath(batchFile.Drawing.WorkFile.FullName, batchFile.Revision)))\n                            'project path\n                            Dim dirName As String = System.IO.Path.GetDirectoryName(batchFile.PDF.WorkFile.FullName)\n                            System.IO.Directory.CreateDirectory(dirName)\n                            If PDFAddin.HasSaveCopyAsOptions(drawDoc, tContext, nvmOptions) Then\n                                With nvmOptions\n                                    .Value(\"All_Color_AS_Black\") = 0\n                                    .Value(\"Remove_Line_Weights\") = 0\n                                    .Value(\"Vector_Resolution\") = 400\n                                    .Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\n                                End With\n                                dm.FileName = batchFile.PDF.WorkFile.FullName\n                                'replace old files:\n                                Try\n                                    If batchFile.PDF.WorkFile.Exists Then\n                                        ClearFileAttributes(batchFile.PDF.WorkFile)\n                                        batchFile.PDF.WorkFile.Delete()\n                                    End If\n                                    PDFAddin.SaveCopyAs(drawDoc, tContext, nvmOptions, dm)\n                                    ' batchFile.PDFFile = batchFile.PDFFile 'this will force a check to see if the file exists, without us doing so\n                                Catch ex As Exception\n                                    MsgBox(\"Error removing or writing file; perhaps existing file can't be overwritten.  Skipping file.\" & vbCr & batchFile.PDF.WorkFile.FullName, MsgBoxStyle.SystemModal)\n                                    batchFile.Errors += \" File not printed to PDF.\"\n                                End Try\n                            End If\n                            If batchFile.Drawing.FileOpened Then batchFile.Drawing.CloseFile()\n                        End If"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: accessing 'custom properties drawing'\n                    ", "solution": ["'Set view Label\nDim oSSet As SelectSet = ThisDoc.Document.SelectSet\nIf oSSet.Count = 0 Then\n\tMessageBox.Show(\"You must select a drawing view first\", \"iLogic\")\n''Exit Sub\nEnd If\n'Reference to the drawing view from the 1st selected object\nDim oView As DrawingView= TryCast(oSSet.Item(1), DrawingView)\noModel = ThisDoc.ModelDocument\nIf oView IsNot Nothing Then\noView.ShowLabel = True\n\n'''Call project 'removed for forum\n'MessageBox.Show(iProperties.Value(\"Project\", \"Project\"), \"Title\")\n\n'''oProject=iProperties.Value(\"Project\", \"Project\")\t\t\n\t'''\toItemValue= oProject & \"_QTY\"\n'MessageBox.Show(oItemValue, \"Title\")\n'Sub Set properties to create the Custom Fields, Without going into too much detail, I can't do this in one step\n\n'''o_iPropID_QTY = oModel.PropertySets.Item(\"User Defined Properties\").Item(oitemValue).PropId 'Custom QTY Field, defined above\no_iPropID_ENG = oModel.PropertySets.Item(\"User Defined Properties\").Item(\"ENG\").PropId\n\n'format the model iproperties\n\t'''oStringQTY = \"<StyleOverride Underline='True' FontSize='0.5' Bold='True'><Property Document='model' PropertySet='User Defined Properties' Property='customPropertyName' FormatID='{D5CDD505-2E9C-101B-9397-08002B2CF9AE}' PropertyID='\" _\n\t '''& o_iPropID_QTY & \"'>customPropertyName </Property></StyleOverride>\"\n\t \n\t oStringENG = \"<StyleOverride Underline='True' FontSize='0.5' Bold='True'><Property Document='model' PropertySet='User Defined Properties' Property='customPropertyName' FormatID='{D5CDD505-2E9C-101B-9397-08002B2CF9AE}' PropertyID='\" _\n\t & o_iPropID_ENG & \"'>customPropertyName </Property></StyleOverride>\"\n \n\toStringTXT = \"<StyleOverride Underline='True' FontSize='0.5' Bold='False'> OFF - AS SHOWN - MARK AS - </StyleOverride>\"\n\toStringScale = \"<Br/><StyleOverride FontSize='0.25'>SCALE <DrawingViewScale/></StyleOverride>\"\n\n'add to the view label\n'removed following for the forum\n'''oView.Label.FormattedText =  oStringQTY & oStringTXT & oStringENG & '''oStringScale\noView.Label.FormattedText =  oStringTXT & oStringENG & oStringScale\n\nElse\n\tMessageBox.Show(\"The selected object is not a drawing view\", \"iLogic\")\nEnd If"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Reference solid body name in balloon text?\n                    ", "solution": ["Sub Main()\n\tDim oSS As SelectSet\n\toSS = ThisApplication.ActiveDocument.SelectSet\n\t\n\toSS.Item(1).BalloonValueSets.Item(1).OverrideValue = GetSolidName(oSS.Item(1))\n\t\nEnd Sub\n\nFunction GetSolidName(oBalloon As Balloon) As String\n\tDim oLeader As Leader\n\toLeader = oBalloon.Leader\n\t\n\tDim oNode As LeaderNode\n\tDim oModelGeom\n\tFor Each oNode In oLeader.AllNodes\n\t\tIf Not (oNode.AttachedEntity Is Nothing)\n\t\t\toModelGeom = oNode.AttachedEntity.Geometry.ModelGeometry\n\t\t\tExit For\n\t\tEnd If\n\tNext\n\t\n\tIf oModelGeom.Type = ObjectTypeEnum.kEdgeObject\n\t\toSurfaceBody = oModelGeom.Faces.Item(1).SurfaceBody\n\tElse\n\t\toSurfaceBody = oModelGeom.SurfaceBody\n\tEnd If\n\t\n\tGetSolidName = oSurfaceBody.Name\nEnd Function\u00a0\u00a0"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: excel multiple look up\n                    ", "solution": ["'Search for the file name in column A\n\nGoExcel.Open(\"Book1.xlsx\", \"Sheet1\")\n\nRowStart = 2   'Corresponds to start row\nRowEnd = 100   'Corresponds to the some row just beyond the end of the dataset\n\nFor oRow = RowStart To RowEnd\n    If (GoExcel.CellValue(\"O\" & oRow)) = \"XXX\" Then\n        GoExcel.CellValue(\"O\" & oRow) = \"\"\n    End if\nNext\n\nGoExcel.Save\nGoExcel.Close\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: ilogic Beam-o-matic from library trouble\n                    ", "solution": ["ThisApplication._LibraryDocumentModifiable = True\nIf FIRST_OPEN = True Then\n", "iLogicVb.RunRule(\"SAVE\")", "\niLogicForm.Show(\"BEAM EDITOR\")\nElse If FIRST_OPEN = False Then\n'Do Nothing\nEnd If\nThisApplication._LibraryDocumentModifiable = False ", "ThisApplication._LibraryDocumentModifiable = True\niLogicVb.RunRule(\"SET_DESC\")\niLogicVb.UpdateWhenDone = True\nRuleParametersOutput()\nIf FIRST_OPEN = True Then\nFIRST_OPEN = False\n\nElse If FIRST_OPEN = False Then\nThisDoc.Save\nEnd If\nThisApplication._LibraryDocumentModifiable = False "], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic Export to Excel Error: Error loading type library/DLL\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to designate a custom template for 3D PDF export\n                    ", "solution": ["oOptions.Value(\"ExportTemplate\") = \"test.pdf\""], "author": "pineapple.law19"},
{"created at": [], "solution Title": "\n                        Re: Access form elements in my add in\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: i want to have a Equation value and not a nominal value of parameter qith il\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: create hatch in a sketched region in a drawing\n                    ", "solution": [], "author": "Josh_Hunt"},
{"created at": [], "solution Title": "\n                        Re: access iproperties of \"justSelectedEntities\"\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Need some help with a \"simple\" piece of iLogic\n                    ", "solution": [], "author": "chris"},
{"created at": [], "solution Title": "\n                        Re: Updating / Creating User Parameters from the Top Assembly to Components With\n                    ", "solution": [], "author": "noah"},
{"created at": [], "solution Title": "\n                        Re: update ipropoerties from textbox\n                    ", "solution": ["  Public m_InventorApplication As Inventor.Application\n\nPublic Sub New(\u00ednventorApp As Inventor.Application)\n\n        ' This call is required by the designer.\n        InitializeComponent()\n\n        ' Add any initialization after the InitializeComponent() call.\n        m_InventorApplication = \u00ednventorApp\n\n    End Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: C++ vs iLogic\n                    ", "solution": ["X", " ", "=", " ", "Nothing", "Y = Nothing", "Z = Nothing"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Using While\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Active document if editing a iam\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Rotating SketchLine- not what I expected\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Convert Thumbnail to image\n                    ", "solution": ["Public NotInheritable Class IPictureDispConverter : Inherits System.Windows.Forms.AxHost\n\n        Private Sub New()\n\n            MyBase.New(\"\")\n\n        End Sub\n\n\n        Public Shared Function ImageToPictureDisp(image As Image) As IPictureDisp\n\n            Try\n\n                Return DirectCast(GetIPictureDispFromPicture(image), IPictureDisp)\n\n            Catch ex As Exception\n\n                'Add error message or logging here if desired.\n\n                'Handle the conversion error by simply returning Nothing.\n\n                Return Nothing\n\n            End Try\n\n        End Function\n\n\n\n        Public Shared Function PictureDispToImage(pictureDisp As IPictureDisp) As Image\n\n            Try\n\n                Return GetPictureFromIPicture(pictureDisp)\n\n            Catch ex As Exception\n\n                'Add error message or logging here if desired.\n\n                'Handle the conversion error by simply returning Nothing.\n\n                Return Nothing\n\n            End Try\n\n        End Function\n\n    End Class"], "author": "sharkyenergy"},
{"created at": [], "solution Title": "\n                        Re: Waht dll to copy to clients?\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic multiple of constraint\n                    ", "solution": ["oIncrement1 = 10\noIncrement2 = 12.5\n\n'where OffsetMate is the name of your parameter\nIf OffsetMate Mod oIncrement1 <> 0 And \nOffsetMate Mod oIncrement2 <> 0 Then\n\t'round value down\n\t OffsetMate = Floor(Round(OffsetMate,0) / oIncrement1) * oIncrement1\n\t  'provide user a message\n\t MessageBox.Show(\"Value must be divisible by \" _\n\t & oIncrement1 & \" or \" & oIncrement2 & vbLf & _\n\t\"Resetting value to \" & OffsetMate, \"iLogic\")\t\n\t'update the document\n\tThisDoc.Document.Update\nEnd If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Change FastenerSize of HoleClearanceInfo\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Scanning a General Table\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: View Orientation Normal to active sketch\n                    ", "solution": ["\u00a0oDoc.SelectSet.Select oSketch", " Dim oControlDef As ControlDefinition", " Set oControlDef = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppLookAtCmd\") 'Look at the sketch", " oControlDef.Execute", "Doevents 'May not need this"], "author": "rogmitch"},
{"created at": [], "solution Title": "\n                        Re: Inventor iLogic Script to Create New Custom iProperties from New Array List\n                    ", "solution": ["Dim oDoc as Document\noDoc = ThisDoc.Document\n'define list of custom properties to delete \nDim MyArrayList As New ArrayList \nMyArrayList.add(\"Hello\") \nMyArrayList.add(\"World\") \nMyArrayList.add(\"Autodesk\") \nMyArrayList.add(\"Inventor\") \n\n'define custom property collection \noCustomPropertySet = oDoc.PropertySets.Item(\"Inventor User Defined Properties\") \n\n\n'[ 'create iprops missing from list\nFor Each oItem in MyArrayList\n\toFlag = False 'set flag to default value\n\t'look at each property in the collection \n\tFor Each oCustProp In oCustomPropertySet\n\t\t'check property name against the list item\n\t\tIf oItem = oCustProp.Name Then \n\t\t\toFlag = True 'trip the flag\n\t\tEnd If \n\tNext\n\t\n\tIf oFlag = False Then\n\t\t'Create new iProperty\n\t\tiProperties.Value(oDoc, \"Custom\", oItem ) = \"\"\n\tEnd If\nNext\n'] \n\n'[ remove old iProps not in list\nFor Each oCustProp In oCustomPropertySet\n\toFlag = False 'set flag to default value\n\tFor Each oItem in MyArrayList\n\t\t'check property name against the list item\n\t\tIf oCustProp.Name = oItem Then \n\t\t\toFlag = True 'trip the flag\n\t\tEnd If \n\tNext\n\t\n\tIf oFlag = False Then\n\t\t'delete property\n\t\toCustProp.Delete\n\tEnd If\nNext\n']"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: ilogic relativ Update view\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: ilogic rule message box elimination - requires ilogic rule editing knowledge\n                    ", "solution": ["Sub Main()\n    customPropertyName = \"Qty REQ\"", "\n    openDoc = ThisDoc.Document \n    assemblyDef = openDoc.ComponentDefinition\n\n    If openDoc.DocumentType = kAssemblyDocumentObject Then  \n        For Each docFile In openDoc.AllReferencedDocuments", "            'Convert file name & path into filename. ie; C:\\file.ipt -> file.ipt    \n            FNamePos = InStrRev(docFile.FullFileName, \"\\\", -1)        \n            docFName = Mid(docFile.FullFileName, FNamePos + 1, Len(docFile.FullFileName) - FNamePos)\n        \n            If docFile.IsModifiable = True Then\n            \n                partQty = assemblyDef.Occurrences.AllReferencedOccurrences(docFile)\n            \n                Try\n                    If partQty.Count <>  iProperties.Value(docFName, \"Custom\", customPropertyName) Then                \n                        iProperties.Value(docFName, \"Custom\", customPropertyName) = partQty.Count\n                    End If                      \n                Catch\n                    iProperties.Value(docFName, \"Custom\", customPropertyName) = partQty.Count\n                End Try\n            End If\n        Next\n    Else\n        MessageBox.Show(\"You must have a valid Assembly document open before using this code!\", \"File Type Mismatch!\",MessageBoxButtons.OK,MessageBoxIcon.Exclamation)\n    End If ", "\n    iLogicVb.UpdateWhenDone = True \n\nEnd Sub\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Inventor crashes while closing down when userform addin is active\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Edit dimensions of a part in assembly using Inventor API\n                    ", "solution": ["oOcc.Definition.Parameters.Item(1).Value = new_value"], "author": "johnsonshiue"},
{"created at": [], "solution Title": "\n                        Re: Get the interference volume between 2 parts using Inventor API\n                    ", "solution": [], "author": "johnsonshiue"},
{"created at": [], "solution Title": "\n                        Re: get a part from its file name\n                    ", "solution": ["oPartDoc = ThisApplication.Documents.Open(filename, boolvis)"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Best way to detect if part is flat\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Inventor API: How to Advise BrowserPane-Events\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Include thumbnail in custom table\n                    ", "solution": ["AddReference \"system.drawing.dll\"\nAddReference \"stdole.dll\"\nAddReference \"Microsoft.VisualBasic.Compatibility.dll\"\nImports Microsoft.VisualBasic.Compatibility.VB6\n\nSub Main()\n' Get the active document.\nDim doc As Document\ndoc = ThisApplication.ActiveDocument\n\n' Get the thumbnail from the document.\nDim thumb As Inventor.IPictureDisp\nthumb = doc.Thumbnail\n\n' Create the filename for the bmp file so it is the same\n' as the document name but with a \"bmp\" extension.\nDim filename As String\nfilename = Left$(doc.FullFileName, Len(doc.FullFileName) - 3) & \"bmp\"\n\n \nDim img As Drawing.Image\nimg = Compatibility.VB6.IPictureDispToImage(thumb)\n\nCall img.Save (\"C:\\temp\\custom.bmp\")\n\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic Overwrite Files with Renamed Files\n                    ", "solution": ["Public Sub AddReferences(ByVal odoc As Inventor.Document, ByVal selectedfile As String)\n\tDim oleReference As ReferencedOLEFileDescriptor", "\t", "For each oleReference in odoc.ReferencedOLEFileDescriptors ", "\t\tCall oleReference.Delete()", "\tNext", "\n\tIf selectedfile.Contains(\"|\") Then ' we have multiple files selected.\n\t\tDim file As String() = selectedfile.Split(\"|\")\n\t\tFor Each s As String In file\n\t\t\toleReference = odoc.ReferencedOLEFileDescriptors _\n\t\t\t\t.Add(s, OLEDocumentTypeEnum.kOLEDocumentLinkObject)\n\t\t\toleReference.BrowserVisible = True\n\t\t\toleReference.Visible = False\n\t\t\toleReference.DisplayName = Mid$(s, InStrRev(s, \"\\\") + 1)\n\t\tNext\n\tElse\n\t\toleReference = odoc.ReferencedOLEFileDescriptors _\n\t\t\t\t.Add(selectedfile,OLEDocumentTypeEnum.kOLEDocumentLinkObject)\n\t\toleReference.BrowserVisible = True\n\t\toleReference.Visible = False\n\t\toleReference.DisplayName = Mid$(selectedfile, InStrRev(selectedfile, \"\\\") + 1)\n\tEnd If\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Learning to write iLogic Code\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Copy multiple objects with API\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ilogic excel confusion\n                    ", "solution": [], "author": "Xun.Zhang"},
{"created at": [], "solution Title": "\n                        Re: New Layer creation\n                    ", "solution": ["Sub", " ", "Main", "()", "\n    ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n    ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    ", "Dim", " ", "oLayer", " ", "As", " ", "Layer", "\n    ", "'", " oLayer = oDrawDoc.StylesManager.Layers.Item(68)", "\n    ", "oLayer", " ", "=", " ", "oDrawDoc", ".", "StylesManager", ".", "Layers", ".", "Item", "(", "\"", "Title (ISO)", "\"", ")", "\n    ", "Dim", " ", "oNewLayer", " ", "As", " ", "Layer", "\n    ", "oNewLayer_Name", " ", "=", " ", "\"", "XYZ", "\"", "\n    ", "Try", "\n    ", "oNewLayer", " ", "=", " ", "oLayer", ".", "Copy", "(", "oNewLayer_Name", ")", "\n    ", "Catch", "\n    ", "MessageBox", ".", "Show", "(", "\"", "New layer, ", "\"", " ", "&", " ", "oNewLayer_Name", " ", "&", " ", "\"", ": Exists", "\"", ", ", "\"", "Title", "\"", ")", "\n    ", "End", " ", "Try", "\n", "ThisDrawing", ".", "Document", ".", "StylesManager", ".", "Layers", "(", "oNewLayer_Name", ")", ".", "Visible", " ", "=", " ", "False", "\n", "ThisDrawing", ".", "Document", ".", "StylesManager", ".", "Layers", "(", "oNewLayer_Name", ")", ".", "Plot", " ", "=", " ", "False", "\n", "End Sub", "\u00a0"], "author": "rwickrama"},
{"created at": [], "solution Title": "\n                        Re: iLogic [Event Trigger] API for [Run these rules when events occur] check box\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: 2018 SDK Developertools\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: VBA assembly part count and other properties\n                    ", "solution": ["TopAssy\n\u00a0 |------Part1.ipt:1\n\u00a0 |------Part1.ipt:2\n\u00a0 |------SubAssy:1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 |------Part1.ipt:1"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic - New Array form issues\n                    ", "solution": ["'ensure value is set to a value in the list, default of 0 chooses first in list\nMultiValue.SetValueOptions(True, DefaultIndex := 0)\n\n'reset List RD list to default\nMultiValue.SetList(\"FORM_RH_SECTION\", 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32) \n\n'set list based on RH value\nIf FORM_RH_SECTION = 4 Then\n\tMultiValue.SetList(\"FORM_RD_SECTION\", 4, 5, 6)\nElseIf FORM_RH_SECTION = 6 Then\n\n'rest of if/then condition here ........\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Inventor Change Sheet Metal Default Flange And Hole Size\n                    ", "solution": [], "author": "kelly.young"},
{"created at": [], "solution Title": "\n                        Re: iLogic to look for missing balloons\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule DXF export from surface\n                    ", "solution": ["'Export selected face to same place as file", "If", " ", "ThisApplication", ".", "ActiveDocument", ".", "SelectSet", ".", "Count", " = 0 ", "Then", "\n\t", "MsgBox", "(", "\"Face not selected. Aborting Rule!\"", ")\n\t", "Exit", " ", "Sub", "\n", "End", " ", "If", "\n\n", "oFileName", " = ", "ThisDoc", ".", "PathAndFileName", "(", "False", ") & ", "\".dxf\"", "\n\n", "Dim", " ", "oCmdMgr", " ", "As", " ", "CommandManager", "\n", "oCmdMgr", " = ", "ThisApplication", ".", "CommandManager", "\n\n", "Call", " ", "oCmdMgr", ".", "PostPrivateEvent", "(", "PrivateEventTypeEnum", ".", "kFileNameEvent", ", ", "oFileName", ")\n", "Call", " ", "oCmdMgr", ".", "ControlDefinitions", ".", "Item", "(", "\"GeomToDXFCommand\"", ").", "Execute", "\u00a0", "'Export face to pre-defined folder\n\nIf ThisApplication.ActiveDocument.SelectSet.Count = 0 Then\n\tMsgBox(\"Face not selected. Aborting Rule!\")\n\tExit Sub\nEnd If\noFolder = \"Z:\\DXF\\\"\noFileName = oFolder & ThisDoc.FileName & \".dxf\"\n\nDim oCmdMgr As CommandManager\noCmdMgr = ThisApplication.CommandManager\n\nCall oCmdMgr.PostPrivateEvent(PrivateEventTypeEnum.kFileNameEvent, oFileName)\nCall oCmdMgr.ControlDefinitions.Item(\"GeomToDXFCommand\").Execute"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Suppress feature if it has no effect instead of using equations.\n                    ", "solution": ["Sub Main()\n\tDim oDoc As Document\n\toDoc = ThisDoc.Document\n\t\n\tFor Each oFeature In oDoc.ComponentDefinition.Features\n\t\toFeature.Suppressed = False\n\tNext\n\t\n\tFor Each oFeature In oDoc.ComponentDefinition.Features\n\t\tIf oFeature.RangeBox Is Nothing Then\n\t\t\toFeature.Suppressed = True\n\t\tEnd If\n\tNext\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Issues with Sketched Symbols with Prompted Entry using iLogic\n                    ", "solution": [], "author": "serduro"},
{"created at": [], "solution Title": "\n                        Re: Changing parameter in form unintentionally  starts a rule!?\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to add the total QTY to the parts list?\n                    ", "solution": ["Sub Main()\n\toQTYCol = 2\n\t\n\tDim oDoc As Document\n\toDoc = ThisDoc.Document\n\t\n\toSheet = oDoc.ActiveSheet\n\t\n        oTotal = 0\n\n\tFor Each oPL In oSheet.PartsLists\n\t\tFor Each oRow In oPL.PartsListRows\n                        If oRow.Visible = True", "                            If oRow.Item(oQtyCol -1).Value = \"SUM\"", "                                'Do nothing", "                            Else\n\t\t\t        oTotal = CInt(oRow.Item(oQTYCol).Value) + oTotal", "                            End if\n                        End if\n\t\tNext\n\t\t", "                If oPL.PartsListRows.Item(oPL.PartsListRows.Count).Item(oQtyCol -1).Value = \"SUM\"", "                    oPL.PartsListRows.Item(oPL.PartsListRows.Count).Item(oQtyCol).Value = oTotal", "                Else", "                    oNewRow = oPL.PartsListRows.Add(0)", "                    oNewRow.Item(oQTYCol).Value = oTotal", "                    oNewRow.Item(oQTYCol-1).Value = \"SUM\"", "                End if", "            Next ", "End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: &FeatureProfilesLayerColor=255;127;255\n                    ", "solution": [], "author": "waynehelley"},
{"created at": [], "solution Title": "\n                        Re: Moving camera to drawingview\n                    ", "solution": ["Dim", " ", "oView", " ", "As", " ", "DrawingView", "\n", "oView", " = ", "ThisApplication", ".", "ActiveDocument", ".", "ActiveSheet", ".", "DrawingViews", "(1)\n\n", "Dim", " ", "oTG", " ", "As", " ", "TransientGeometry", "\n", "oTG", " = ", "ThisApplication", ".", "TransientGeometry", "\n\n", "Dim", " ", "oCamera", " ", "As", " ", "Camera", " = ", "ThisApplication", ".", "ActiveView", ".", "Camera", "\n\n", "oOversizePct", " = 2\n", "With", " ", "oCamera", "\n\t.", "ViewOrientationType", " = ", "ViewOrientationTypeEnum", ".", "kFrontViewOrientation", "\n\t.", "Eye", " = ", "oTG", ".", "CreatePoint", "(", "oView", ".", "Position", ".", "X", ", ", "oView", ".", "Position", ".", "Y", ", .", "Eye", ".", "Z", ")\n\t.", "Target", " = ", "oTG", ".", "CreatePoint", "(", "oView", ".", "Position", ".", "X", ", ", "oView", ".", "Position", ".", "Y", ", 0)\n\t.", "SetExtents", "(", "oOversizePct", " * ", "oView", ".", "Width", ", ", "oOversizePct", " * ", "oView", ".", "Height", " )\n\t.", "ApplyWithoutTransition", "()\n", "End", " ", "With"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to display a simple warning box?\n                    ", "solution": ["MsgBox (\"Name\", vbCritical, \"Title\")", "If front_pilaster_face < .25 \n ", "MsgBox", "(\"The minimum value allowed for this distance is .25!\", vbcritical,\"Error Message\")\n  ElseIf front_pilaster_face > .25 Then \nEnd If"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic save as STEP in same folder as source file with new name\n                    ", "solution": ["' Get the STEP translator Add-In.\nDim oSTEPTranslator As TranslatorAddIn\noSTEPTranslator = ThisApplication.ApplicationAddIns.ItemById(\"{90AF7F40-0C01-11D5-8E83-0010B541CD80}\")\nDim oContext As TranslationContext\noContext = ThisApplication.TransientObjects.CreateTranslationContext\nDim oOptions As NameValueMap\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\noStepFileName = iProperties.Value(\"Project\", \"Part Number\") & \"_\" & iProperties.Value(\"Project\", \"Revision Number\")\n\nIf oSTEPTranslator.HasSaveCopyAsOptions(ThisApplication.ActiveDocument, oContext, oOptions) Then\n    ' Set application protocol.\n    ' 2 = AP 203 - Configuration Controlled Design\n    ' 3 = AP 214 - Automotive Design\n    oOptions.Value(\"ApplicationProtocolType\") = 3\n    ' Other options...\n    'oOptions.Value(\"Author\") = \"\"\n    'oOptions.Value(\"Authorization\") = \"\"\n    'oOptions.Value(\"Description\") = \"\"\n    'oOptions.Value(\"Organization\") = \"\"\n    oContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n    Dim oData As DataMedium\n    oData = ThisApplication.TransientObjects.CreateDataMedium\n    'oData.FileName = ThisDoc.PathAndFileName(False) & \".stp\"\n    ", "oData.FileName = ThisDoc.Path & \"\\\" & oStepFileName & \".stp\"", "\n    oSTEPTranslator.SaveCopyAs(ThisApplication.ActiveDocument, oContext, oOptions, oData)\nEnd If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How do I go through all content center levels?\n                    ", "solution": [" Public Sub LoopReadContentCenterTree()\n\n        Dim oContentCenter As ContentCenter\n       \toContentCenter = ThisApplication.ContentCenter\n\n        Dim a As ContentTreeViewNode\n        a = oContentCenter.TreeViewTopNode\n\n        LoopGetFromTreeView(a)\n    End Sub\n\nPrivate Sub LoopGetFromTreeView(oContentTreeViewNode As ContentTreeViewNode)\n\n        Dim oContentTreeViewNodeLoop As ContentTreeViewNode\n\n        Dim strPath As String\n        strPath = oContentTreeViewNode.FullTreeViewPath\n        Dim strFam As String\n        strFam = oContentTreeViewNode.DisplayName\n        Dim strExport As String\n        strExport = oContentTreeViewNode.DisplayName\n\n        Dim oContentFamily As ContentFamily\n        \n        For Each oContentFamily In oContentTreeViewNode.Families\n\n\tDebug.Print oContentFamily.DisplayName\n\n        Next\n\n        For Each oContentTreeViewNodeLoop In oContentTreeViewNode.ChildNodes\n\n        LoopGetFromTreeView(oContentTreeViewNodeLoop)\n\n        Next\n End Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: VBA Library location\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: The type of the second parameter in GetRetrievableDimensions (COM C++) ?\n                    ", "solution": ["\tCComPtr<Document> pDoc;\n\tResult = pInvApp->get_ActiveDocument(&pDoc);\n\n\tCComPtr<DrawingDocument> pDrawDoc;\n\tpDrawDoc = pDoc;\n\n\tCComPtr<Sheet> Draw_Sheet;\n\tResult = pDrawDoc->get_ActiveSheet(&Draw_Sheet); \n\n\tDrawingViewsPtr draw_Views;\n\tResult = Draw_Sheet->get_DrawingViews(&draw_Views);\n\t\t\n\tDrawingViewPtr Draw_View;\n\tResult = draw_Views->get_Item(1, &Draw_View);\n\n\tDrawingDimensionsPtr Draw_Dims;\n\tResult = Draw_Sheet->get_DrawingDimensions(&Draw_Dims);\n\n\tGeneralDimensionsPtr draw_Gen_Dims;\n\tResult = Draw_Dims->get_GeneralDimensions(&draw_Gen_Dims);\n\n\tCComPtr<ObjectCollection> pObjCollection;\n\tResult = draw_Gen_Dims->GetRetrievableDimensions(Draw_View, CComVariant(), &pObjCollection);\n\t\n\tlong no_of_Retrieved_Dim = 0;\n\tif (pObjCollection != NULL)\n\t{\n\t\tResult = pObjCollection->get_Count(&no_of_Retrieved_Dim);\n\n\t}"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How to round a constraint to the nearest whole number using iLogic?\n                    ", "solution": [], "author": "I_Forge_KC"},
{"created at": [], "solution Title": "\n                        Re: Need to run an external rule for all parts of an assembly\n                    ", "solution": ["Dim aDoc As AssemblyDocument\naDoc = ThisApplication.ActiveDocument\n\nDim iDoc As Document\n\nFor Each iDoc In aDoc.AllReferencedDocuments\n    iLogicVb.RunExternalRule(iDoc, \"Test\")", "Next"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Use the macro and Inventor a the same time\n                    ", "solution": ["UserForm1.Show (False)"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Can I attach a step file to an ipt file, so it'll check into Vault with ipt?\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Balloon Style\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim oStyles As DrawingStylesManager\noStyles = oDrawDoc.StylesManager\n", "Dim oSheet As Sheet", "Dim oBalloon As Balloon", "\nFor Each oSheet In oDrawDoc.Sheets \n\tFor Each oBalloon In oSheet.Balloons\n\t\toBalloon.Style = oStyles.BalloonStyles.Item(\"Stylename\")\n\tNext\nNext\u00a0"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: .NET Version for Inventor 2019\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Help needed to create VBA macro for creating sketch, points and punchs.\n                    ", "solution": ["Public Sub NewSketchOnPlane()\n\nDim partDoc As PartDocument\nSet partDoc = ThisApplication.ActiveDocument\n\n' Create a new sketch on a selected face.\nDim planarEntity As Object\nSet planarEntity = ThisApplication.CommandManager.Pick(kAllPlanarEntities, _\n                                                \"Select a face or work plane.\")\nDim sk As Sketch\nSet sk = partDoc.ComponentDefinition.Sketches.Add(planarEntity)\n\n' Bring the sketch into edit mode.\nsk.Edit\n \nDim Path1 As String\nPath1 = InputBox(\"Enter Excel file Path e.g C:\\SapWorkDir\\Inventor\\UpdateOpen.xlsx\", \"Excel file Path\")\n\nIf Not (ThisApplication.FileManager.FileSystemObject.fileexists(Path1)) Then\n    MsgBox \"The input Excel file does not exist!\"\n    Exit Sub\nEnd If\n\n' Get the Excel file\nDim Excel As Excel.Application\nDim wb As Workbook\nDim ws As WorkSheet\nSet Excel = New Excel.Application\nSet wb = Excel.Workbooks.Open(Path1)\nSet ws = wb.Sheets(1)\n\n Dim iRow As Long\n iRow = 1\n \n Dim sPointX As String, sPointY As String, bStop As Boolean\n Dim oPoint As Point2d\n \n Dim oImportPts As Transaction\n Set oImportPts = ThisApplication.TransactionManager.StartTransaction(partDoc, \"Import Sketch Points\")\n \n ' start a transaction for import points to sketch\n Dim bAbortTransaction As Boolean: bAbortTransaction = True\n \n Do\n    ' read points data from Excel\n    sPointX = ws.cells(iRow, 1)\n    sPointY = ws.cells(iRow, 2)\n    \n    Debug.Print sPointX & \",\" & sPointY\n    \n    ' create sketch point if the data is valid\n    If IsNumeric(sPointX) And IsNumeric(sPointY) Then\n        Set oPoint = ThisApplication.TransientGeometry.CreatePoint2d(CDbl(sPointX), CDbl(sPointY))\n        sk.SketchPoints.Add oPoint, True\n        bAbortTransaction = False\n    Else\n        bStop = True\n    End If\n    iRow = iRow + 1\n    \n Loop Until bStop\n\n' if no points are imported, just abort the transaction\nIf bAbortTransaction Then\n    oImportPts.Abort\nElse\n    oImportPts.End\nEnd If\n\n'close Excel data and quit the Excel application\nwb.Close\nExcel.Quit\n\n'Exit sketch edit\nsk.ExitEdit\n\n' Find the ButtonDefinition of Punch Tool command and execute it\nDim oDef As ButtonDefinition\nSet oDef = ThisApplication.CommandManager.ControlDefinitions(\"SheetMetalPunchToolCmd\")\n\n'Execute the Punch Tool command\noDef.Execute\n\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic: HoleNote Precision\n                    ", "solution": [], "author": "martin.jacko"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2019 content center favorites\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: how can I put this rule from assembly\n                    ", "solution": [], "author": "jtylerbc"},
{"created at": [], "solution Title": "\n                        Re: iLogic to Auto-Fill \"Comments\" iproperty Formatting\n                    ", "solution": ["Dim String1 as String = IamaString1\nDim String2 as String = IamaString2\nDim String3 as String = IamaString3\n\niProperties.Value(\"Summary\",\"Comments\") = String1 & vbcrlf & String2 & vbcrlf & String3"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Print PDF i-logic stoped working in 2018\n                    ", "solution": ["If", " ", "PDFAddIn", ".", "HasSaveCopyAsOptions", "(", "oDocument", ", ", "oContext", ", ", "oOptions", ") ", "Then"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Geting RangeBOX for local UCS.\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Odd DLL Behavior\n                    ", "solution": [], "author": "Brett.G"},
{"created at": [], "solution Title": "\n                        Re: VBA Help - Turn off Component Visibility in all other View Representations\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: One button in form to run multiple rules\n                    ", "solution": ["Public Sub Main\n\n\tiLogicVb.RunRule(\"Rule1\")\n\tiLogicVb.RunRule(\"Rule2\")\n\tiLogicVb.RunRule(\"Rule3\")\n\nEnd Sub\n\n\nPublic Sub Main\n\n\tCall Rule1\n\nEnd Sub\n\n\nSub Rule1\n\n    iProperties.Value(\"Project\", \"Description\") = \"\"\n\tiProperties.Value(\"Project\", \"Part Number\") = \"\"\n\tSystem.Threading.Thread.CurrentThread.Sleep(1000)\n\tFeature.Color(\"Extrusion1\")= \"Red\"\n\tiProperties.Value(\"Project\", \"Description\") = \" Block is now Red\"\n\tiProperties.Value(\"Project\", \"Part Number\") = \"Pt_01\"\n\t\n\tInventorVb.DocumentUpdate()\n\nEnd Sub"], "author": "paul.hurley"},
{"created at": [], "solution Title": "\n                        Re: scaling functionality for a set of drawing views\n                    ", "solution": ["Private Sub ReArrange_Drawing()\n        Dim m_inventorApp As Inventor.Application\n        m_inventorApp = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n\n        Dim oDrawingDoc As DrawingDocument\n        oDrawingDoc = m_inventorApp.ActiveDocument\n\n        Dim oTG As TransientGeometry = m_inventorApp.TransientGeometry\n\n        Dim oTrans As Transaction\n        oTrans = m_inventorApp.TransactionManager.StartTransaction(m_inventorApp.ActiveDocument, \"Ansichten verschieben\")\n\n        Dim ActiveSheet As Sheet\n        ActiveSheet = oDrawingDoc.ActiveSheet\n\n        Dim oView As DrawingView\n\n        '###########################\n\n\n        Dim oSheet As Sheet\n        oSheet = oDrawingDoc.ActiveSheet\n\n        Dim oListx As ArrayList = New ArrayList()\n        Dim oListy As ArrayList = New ArrayList()\n\n        For Each oView In oSheet.DrawingViews\n            oListx.Add(oView.Position.X)\n            oListy.Add(oView.Position.Y)\n        Next\n\n        oListx.Sort()\n        oListy.Sort()\n\n        Dim mid As Integer\n        mid = (oListy.Count - 1) / 2\n\n        Dim midView As DrawingView = Nothing\n\n        For Each oView In oSheet.DrawingViews\n            If Math.Round(oView.Position.X, 6) = Math.Round(oListx(mid), 6) And Math.Round(oView.Position.Y, 6) = Math.Round(oListy(mid), 6) Then\n                midView = oView\n                'MsgBox(midView.Name.ToString)\n                Exit For\n            End If\n        Next\n\n        '################################\n        Dim oPositionX As Double\n        Dim oPositionY As Double\n        Dim oBaseViewHeight As Double\n        Dim oBaseViewWidth As Double\n\n\n\n        Dim prompt As String = \"Bitte geben Sie den Abstand ein\"\n        Dim title As String = \"Abstand zur \" & midView.Name\n        Dim oAbstand As String\n        ' Set prompt.\n        prompt = \"Bitte geben Sie den Abstand ein\"\n        ' Set title.\n        title = \"Abstand zur \" & midView.Name & \" in mm\"\n        ' Set default value.\n        oAbstand = \"80\"\n        ' Display prompt, title, and default value.\n        oAbstand = Interaction.InputBox(prompt, title, oAbstand)\n        If oAbstand = \"\" Then\n            Exit Sub\n        End If\n\n        'Pr\u00fcfen, ob Zahlen\n        If oAbstand.All(AddressOf Char.IsDigit) = True Then\n            oAbstand = oAbstand / 10\n        Else\n            Exit Sub\n        End If\n\n        Dim oResult As DialogResult\n        oResult = MessageBox.Show(\"Increasing(Yes) or Decreasing (No)\", \"Increasing/Decreasing\", MessageBoxButtons.YesNo)\n\n        If oResult = DialogResult.No Then\n            oAbstand = oAbstand * (-1)\n        End If\n\n        Dim inc_1 As Double = 1\n        Dim inc_2 As Double = 1\n        Dim inc_3 As Double = 1\n        Dim inc_4 As Double = 1\n        Dim inc_5 As Double = 1\n        Dim inc_6 As Double = 1\n        Dim inc_7 As Double = 1\n        Dim inc_8 As Double = 1\n        Dim dist As Double\n\n        For Each oView In ActiveSheet.DrawingViews\n            'If oView.ViewType = Inventor.DrawingViewTypeEnum.kStandardDrawingViewType Then\n            If oView.Name = midView.Name Then\n                oPositionX = oView.Position.X\n                oPositionY = oView.Position.Y\n                oBaseViewHeight = oView.Height / 2\n                oBaseViewWidth = oView.Width / 2\n\n            End If\n            'End If\n\n            Dim xRange As Double\n            Dim yRange As Double\n            xRange = Math.Abs(Math.Round(oView.Position.X, 2) - Math.Round(oPositionX, 2))\n            yRange = Math.Abs(Math.Round(oView.Position.Y, 2) - Math.Round(oPositionY, 2))\n\n            Dim oScale As Double\n\n            If oView.Position.X > oPositionX And Math.Round(yRange, 2) < 1 Then\n                ' MsgBox(\"Ansicht rechts\")\n                'Ansicht rechts\n\n                If oView.Scale >= 1 Then\n                    oScale = oView.Scale\n                End If\n\n                If oView.Scale < 1 Then\n                    oScale = 1 / oView.Scale\n                End If\n\n                dist = oAbstand * inc_1\n                Dim oRightViewPosition As Point2d\n                oRightViewPosition = m_inventorApp.TransientGeometry.CreatePoint2d()\n                oRightViewPosition.X = oPositionX + dist + oBaseViewWidth\n                oRightViewPosition.Y = oPositionY\n                oView.Position = oRightViewPosition\n\n                inc_1 = inc_1 + 1\n            ElseIf oView.Position.X < oPositionX And Math.Round(yRange, 2) < 1 Then\n                ' MsgBox(\"Ansicht links\")\n                'Ansicht links\n\n                If oView.Scale >= 1 Then\n                    oScale = oView.Scale\n                End If\n\n                If oView.Scale < 1 Then\n                    oScale = 1 / oView.Scale\n                End If\n                dist = oAbstand * inc_2\n                Dim oRightViewPosition As Point2d\n                oRightViewPosition = m_inventorApp.TransientGeometry.CreatePoint2d()\n                oRightViewPosition.X = oPositionX - dist - oBaseViewWidth\n                oRightViewPosition.Y = oPositionY\n                oView.Position = oRightViewPosition\n                inc_2 = inc_2 + 1\n            ElseIf Math.Round(xRange, 2) < 1 And oView.Position.Y < oPositionY Then\n                ' MsgBox(\"Ansicht unten\")\n                'Ansicht unten\n\n                If oView.Scale >= 1 Then\n                    oScale = oView.Scale\n                End If\n\n                If oView.Scale < 1 Then\n                    oScale = 1 / oView.Scale\n                End If\n                dist = oAbstand * inc_3\n                Dim oRightViewPosition As Point2d\n                oRightViewPosition = m_inventorApp.TransientGeometry.CreatePoint2d()\n                oRightViewPosition.X = oPositionX\n                oRightViewPosition.Y = oPositionY - dist - oBaseViewHeight\n                oView.Position = oRightViewPosition\n                inc_3 = inc_3 + 1\n            ElseIf Math.Round(xRange, 2) < 1 And oView.Position.Y > oPositionY Then\n                ' MsgBox(\"Ansicht oben\")\n                'Ansicht oben\n\n                If oView.Scale >= 1 Then\n                    oScale = oView.Scale\n                End If\n\n                If oView.Scale < 1 Then\n                    oScale = 1 / oView.Scale\n                End If\n                dist = oAbstand * inc_4\n                Dim oRightViewPosition As Point2d\n                oRightViewPosition = m_inventorApp.TransientGeometry.CreatePoint2d()\n                oRightViewPosition.X = oPositionX\n                oRightViewPosition.Y = oPositionY + dist + oBaseViewHeight\n                oView.Position = oRightViewPosition\n\n                inc_4 = inc_4 + 1\n            ElseIf oView.Position.X > oPositionX And oView.Position.Y > oPositionY Then\n                ' MsgBox(\"Ansicht ISO rechs oben\")\n                'Ansicht ISO rechs oben\n\n                If oView.Scale >= 1 Then\n                    oScale = oView.Scale\n                End If\n\n                If oView.Scale < 1 Then\n                    oScale = 1 / oView.Scale\n                End If\n                dist = oAbstand * inc_5\n                Dim oRightViewPosition As Point2d\n                oRightViewPosition = m_inventorApp.TransientGeometry.CreatePoint2d()\n                oRightViewPosition.X = oPositionX + dist + oBaseViewWidth\n                oRightViewPosition.Y = oPositionY + oAbstand + oBaseViewHeight\n                oView.Position = oRightViewPosition\n                inc_5 = inc_5 + 1\n            ElseIf oView.Position.X < oPositionX And oView.Position.Y > oPositionY Then\n                ' MsgBox(\"Ansicht ISO links oben\")\n                'Ansicht ISO links oben\n\n                If oView.Scale >= 1 Then\n                    oScale = oView.Scale\n                End If\n\n                If oView.Scale < 1 Then\n                    oScale = 1 / oView.Scale\n                End If\n\n                dist = oAbstand * inc_6\n                Dim oRightViewPosition As Point2d\n                oRightViewPosition = m_inventorApp.TransientGeometry.CreatePoint2d()\n                oRightViewPosition.X = oPositionX - dist - oBaseViewWidth\n                oRightViewPosition.Y = oPositionY + oAbstand + oBaseViewHeight\n                oView.Position = oRightViewPosition\n                inc_6 = inc_6 + 1\n            ElseIf oView.Position.X > oPositionX And oView.Position.Y < oPositionY Then\n                ' MsgBox(\"Ansicht ISO rechs unten\")\n                'Ansicht ISO rechs unten\n\n                If oView.Scale >= 1 Then\n                    oScale = oView.Scale\n                End If\n\n                If oView.Scale < 1 Then\n                    oScale = 1 / oView.Scale\n                End If\n                dist = oAbstand * inc_7\n                Dim oRightViewPosition As Point2d\n                oRightViewPosition = m_inventorApp.TransientGeometry.CreatePoint2d()\n                oRightViewPosition.X = oPositionX + dist + oBaseViewWidth\n                oRightViewPosition.Y = oPositionY - oAbstand - oBaseViewHeight\n                oView.Position = oRightViewPosition\n                inc_7 = inc_7 + 1\n            ElseIf oView.Position.X < oPositionX And oView.Position.Y < oPositionY Then\n                ' MsgBox(\"Ansicht ISO links unten\")\n                'Ansicht ISO links unten\n\n                If oView.Scale >= 1 Then\n                    oScale = oView.Scale\n                End If\n\n                If oView.Scale < 1 Then\n                    oScale = 1 / oView.Scale\n                End If\n                dist = oAbstand * inc_8\n                Dim oRightViewPosition As Point2d\n                oRightViewPosition = m_inventorApp.TransientGeometry.CreatePoint2d()\n                oRightViewPosition.X = oPositionX - dist - oBaseViewWidth\n                oRightViewPosition.Y = oPositionY - oAbstand - oBaseViewHeight\n                oView.Position = oRightViewPosition\n                inc_8 = inc_8 + 1\n            End If\n        Next\n        oTrans.End()\n        m_inventorApp.ActiveView.Fit()\n    End Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Add mass moments of inertia to drawing\n                    ", "solution": [], "author": "graham.wishartL"},
{"created at": [], "solution Title": "\n                        Re: Table of Contents\n                    ", "solution": [], "author": "kelly.young"},
{"created at": [], "solution Title": "\n                        Re: Need to assign selected dimension in DWG to user parameter in model\n                    ", "solution": ["Public Sub Main()", " If Not ThisApplication.ActiveDocument.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then", "     MessageBox.Show(\"Current document is not drawing document\", \"Inventor\")", " Exit Sub", " End If", " oModelDoc = ThisDrawing.ModelDocument", " Dim userParams As UserParameters ", " userParams = oModelDoc.ComponentDefinition.Parameters.UserParameters", " ", " Dim param As Parameter ", " ", " \u00a0\u00a0\u00a0 'set/create parameter", " Try ", " \u00a0\u00a0param = userParams.Item(\"LENGTH\") ", " \u00a0\u00a0param.Expression = \"5 in\"", " Catch\u00a0 ", " \u00a0\u00a0'The parameter doesn't exist so add it. ", " \u00a0\u00a0param = userParams.AddByExpression(\"LENGTH\", \"6\", UnitsTypeEnum.kInchLengthUnits) ", " End Try", " Try", " \u00a0\u00a0param = userParams.Item(\"WIDTH\") ", " \u00a0\u00a0param.Expression = \"8 in\" ", " Catch\u00a0 ", " \u00a0\u00a0'The parameter doesn't exist so add it. ", " \u00a0\u00a0param = userParams.AddByExpression(\"WIDTH\", \"7\", UnitsTypeEnum.kInchLengthUnits) ", " End Try", " Try", " \u00a0\u00a0param = userParams.Item(\"HEIGHT\") ", " \u00a0\u00a0param.Expression = \"9 in\"", " Catch\u00a0 ", " \u00a0\u00a0'The parameter doesn't exist so add it.", " \u00a0\u00a0param = userParams.AddByExpression(\"HEIGHT\", \"8\", UnitsTypeEnum.kInchLengthUnits) ", " End Try", "End Sub", "oModelDoc", " ", "=", " ", "ThisDrawing", ".", "ModelDocument", "oModelDoc", " ", "=", " ", "IO", ".", "Path", ".", "GetFileName", "(", "ThisDrawing", ".", "ModelDocument", ".", "FullFileName", ")", "Dim oDims_Array As New ArrayList\t\n\noDims_Array.Add(\"Length\")\noDims_Array.Add(\"Width\")\noDims_Array.Add(\"Height\")\noDims_Array.Add(\"Thickness\")\noDims_Array.Add(\"Cancel\")\n\noDim_Selected = InputListBox(\"SELECT FROM ABOVE!\", oDims_Array, oDims_Array.Item(0), \"MODEL PARAMETER EDIT\", \"USER PARAMETERS\")\n\nDim index As Integer\nindex = oDims_Array.IndexOf(oDim_Selected)\n\nMessageBox.Show(\"Item number : \" & index + 1 , \"Item\")", "oModelDoc = ThisDrawing.ModelDocument", "oModelDoc = IO.Path.GetFileName(ThisDrawing.ModelDocument.FullFileName)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Ilogic (VBA) Rounded lines in sketch\n                    ", "solution": ["Odcinek(i) = Szkic.SketchLines.AddByTwoPoints(Odcinek(i-1).EndSketchPoint, Geometria.CreatePoint2d(X(i), Y(i)))\n\n' Fillet the two sketch lines\nDim dRadius As Double:dRadius = 5\nSzkic.SketchArcs.AddByFillet(Odcinek(i-1),Odcinek(i),dRadius,Odcinek(i-1).StartSketchPoint.Geometry,Odcinek(i).EndSketchPoint.Geometry)"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Putting a sweep calculation as an informational column in an iPart table\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: How can I mirror a body/feature by iLogic rule ?\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: iLogic code to change iProperties on each open drawing\n                    ", "solution": ["Dim oDoc As Document\nFor Each oDoc In ThisApplication.Documents.VisibleDocuments\n\tIf oDoc.DocumentType = kDrawingDocumentObject Then\n\tMsgBox (\"it worked once\")", "        oDoc.Activate\n\tiProperties.Value(ThisDrawing,\"Project\", \"Project\")=\"newproject\"\n\tEnd If\nNext oDoc", "Dim oDoc As Document\nFor Each oDoc In ThisApplication.Documents.VisibleDocuments\n\tIf oDoc.DocumentType = kDrawingDocumentObject Then\n\t    MsgBox (\"it worked once\")", "            oDoc.PropertySets(\"Design Tracking Properties\")(\"Project\").Value = \"newproject\"\n\tEnd If\nNext oDoc"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: I logic to Select vertex on part and create WorPoint\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "PartDocument", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oDef", " ", "As", " ", "PartComponentDefinition", "\n", "oDef", " = ", "oDoc", ".", "ComponentDefinition", "\n\n", "Dim", " ", "oPoint", " = ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "SelectionFilterEnum", ".", "kPartVertexFilter", ", ", "\"Right Side\"", ")\n", "oDef", ".", "WorkPoints", ".", "AddByPoint", "(", "oPoint", ")", "Sub Single_Bend_Door_Add_WorkPoints()\n\nDim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\n\nDim oDef As PartComponentDefinition\nSet oDef = oDoc.ComponentDefinition\n\nDim oPoint As Vertex\nSet oPoint = ThisApplication.CommandManager.Pick(kPartVertexFilter, \"Right Side\")\nDim wp1 As WorkPoint\nSet wp1 = oDef.WorkPoints.AddByPoint(oPoint)\n\n\nEnd Sub"], "author": "jhoel.forshav"},
{"created at": [], "solution Title": "\n                        Re: Problem getting the Distance property in a DistanceChamfer via API\n                    ", "solution": [], "author": "Mark.Lancaster"},
{"created at": [], "solution Title": "\n                        Re: iLogic Parts List - remove heading, enable automatic wrap\n                    ", "solution": [], "author": "drafting03C23SK"},
{"created at": [], "solution Title": "\n                        Re: Problem getting the Distance property in a DistanceChamfer via API\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: How to read all component in assembly\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Change visibility at parts containing \"BQ\"\n                    ", "solution": ["Dim assemblyDef As AssemblyComponentDefinition = ThisDoc.Document.ComponentDefinition\nDim occ As Inventor.ComponentOccurrence\nFor Each occ In assemblyDef.Occurrences.AllLeafOccurrences\n\tDim refDoc As PartDocument = occ.Definition.Document\n\n\tIf iProperties.Value(occ.Name,\"Project\", \"Stock Number\").Contains(\"BQ\") Then\n\t\tocc.Visible = False\n\tElse\n\t\tocc.Visible = True\n\tEnd If\nNext"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: script need for automatic name field in iprop\n                    ", "solution": ["Public Sub main()\n\nDim a As Application\nSet a = ThisApplication\n\nDim b As DrawingDocument\nSet b = a.ActiveDocument\n\nDim Partnr As Property\nDim Desc As Property\n\nDim bx As Document\nSet bx = b.ReferencedDocuments.Item(1)\n\nMsgBox bx.FullDocumentName\n\nDim propset As PropertySet\nSet propset = bx.PropertySets.Item(\"Design Tracking Properties\")\n\nSet Partnr = propset.Item(\"Part Number\")\nSet Desc = propset.Item(\"Description\")\n\nDim Filen As String\nFilen = b.DisplayName '\"103-NiMo-10200-001 (Collection tank)\" '\n\nDim strSp() As String\nstrSp = Split(Filen, \" (\")\n\nMsgBox strSp(0)\nMsgBox strSp(1)\n\nPartnr.Value = strSp(0)\nDesc.Value = Replace(strSp(1), \").idw\", \"\")\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: user parameters in base quantity don't show in Unit Quantity\n                    ", "solution": ["'        oPara.Precision = kOneDecimalPlacePrecision"], "author": "^_^clovis^_^"},
{"created at": [], "solution Title": "\n                        Re: trying to show input box on Inventor through Add ins using C#\n                    ", "solution": [], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: Inventor Setting Up Macro To Automate Drawing View & Parts List Creation\n                    ", "solution": [], "author": "kelly.young"},
{"created at": [], "solution Title": "\n                        Re: Deriving Solids from Multi-Solid Body iPart\n                    ", "solution": ["Sub MakePart()\n        \n    ' set a reference to the active partdocument\n    Dim prt As PartDocument\n    Set prt = ThisApplication.ActiveDocument\n\n    Dim template As String\n    Dim folder As String\n    template = \"\"\n    folder = PathName(prt.fullFileName)\n    \n    ' create an object collection to store the parts to put in assembly\n    Dim prtCol As ObjectCollection\n    Set prtCol = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    Dim a As Integer: a = 0\n\n    ' loop through the filtered selection\n    Dim sb As SurfaceBody\n    For Each sb In prt.ComponentDefinition.SurfaceBodies\n    \n        ' create a new part to derive the solid body in\n        Dim newPart As PartDocument\n        Set newPart = ThisApplication.Documents.Add(kPartDocumentObject, template, True)\n        \n        ' set a reference to the derivedpartcomponents\n        Dim dpcs As DerivedPartComponents\n        Set dpcs = newPart.ComponentDefinition.ReferenceComponents.DerivedPartComponents\n                    \n        ' create the scale definition\n        Dim dpd As DerivedPartUniformScaleDef\n        Set dpd = dpcs.CreateUniformScaleDef(prt.fullFileName)\n                  \n        ' set the settings in another sub\n        Call settingsDerivedPart(dpd, sb)\n        Call dpcs.Add(dpd)\n        Call prtCol.Add(newPart)\n  \n        ' set the part title to the solidbodies name\n        newPart.PropertySets.Item(\"Inventor Summary Information\").Item(\"Title\").Value = sb.Name 'sb.CreatedByFeature.Name\n      \n        a = a + 1\n\n        ' Save the part\n        ThisApplication.SilentOperation = True\n        Call newPart.SaveAs(folder & sb.Name & \"_\" & a & \".ipt\", False)\n        ThisApplication.SilentOperation = False\n        \n    Next sb\n\n    ' find opened assembly in which the sketch part is\n    Dim asm As AssemblyDocument\n    Set asm = ThisApplication.Documents.Add(kAssemblyDocumentObject)\n    \n    ' place in assembly?\n    Set prt = Nothing\n    For Each prt In prtCol\n    \n        ' create an empty matrix\n        Dim mx As Matrix\n        Set mx = ThisApplication.TransientGeometry.CreateMatrix()\n        \n        Dim occ As ComponentOccurrence\n        Set occ = asm.ComponentDefinition.Occurrences.AddByComponentDefinition(prt.ComponentDefinition, mx)\n        Call prt.Close(True)\n        \n    Next\nEnd Sub\n\nFunction PathName(FullPath As String) As String\n \n ' return all left of last \\\n PathName = Left(FullPath, InStrRev(FullPath, \"\\\"))\n\nEnd Function\nSub settingsDerivedPart(ByRef dpd As DerivedPartUniformScaleDef, sb As SurfaceBody)\n   \n    ' set the derive style\n    'dpd.DeriveStyle = kDeriveAsSingleBodyNoSeams\n    'dpd.UseColorOverridesFromSource = False\n    Call dpd.ExcludeAll\n    \n    ' include solid, exclude the others\n    Dim dpe As DerivedPartEntity\n    For Each dpe In dpd.Solids\n        If dpe.ReferencedEntity.Name = sb.Name Then\n            dpe.IncludeEntity = True\n        End If\n    Next\n        \nEnd Sub"], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: vba userform position throws run time error\n                    ", "solution": ["Public Sub x()\nUserForm.Show\nDim a As Application\nSet a = ThisApplication\nWith UserForm\n'MsgBox a.ActiveView.Left\n'.StartUpPosition = 0\n.Left = a.ActiveView.Left + (0.5 * a.ActiveView.Width) - (0.5 * a.ActiveView.Width)\n.Top = a.ActiveView.Top + (0.5 * a.ActiveView.Height) - (0.5 * a.ActiveView.Height)\nEnd With\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: How to get an info on selected part in drawing view using VBA?\n                    ", "solution": [], "author": "omartin"},
{"created at": [], "solution Title": "\n                        Re: Access to the property field of the cartridge in vba\n                    ", "solution": ["Sub changePrompt()\n\n  Dim doc As DrawingDocument\n  Set doc = ThisApplication.ActiveDocument\n\n  Dim tb As TextBox\n\n  Dim i As Integer\n  i = 1\n\n  Dim border As TitleBlock\n  Set border = doc.ActiveSheet.TitleBlock\n\n  Dim borderDef As TitleBlockDefinition\n  Set borderDef = border.Definition\n\n  For Each tb In borderDef.Sketch.TextBoxes 'oDrawDoc.Sheets.Item(i).TitleBlock.Definition.Sketch.TextBoxes.count\n\n      If tb.Text = \"<DEPARTEMENT>\" Then\n\n         \nCall border.SetPromptResultText(tb, \"", "this is your string", "\")\n      End If\n\n      i = i + 1\n\n  Next\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Derived Part - Replace Model Reference - iLogic => VB.Net\n                    ", "solution": ["Dim selectedName As String = InputBox(\"Select the part to replace\", \"partNameList\", \"partNameList(0)\", , )"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Use Last modified Date in ilogic code .. to only run if fil is modified late\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic created text box breaking dimension lines\n                    ", "solution": ["Sub Main()\n' Build the Note\nDim sNoteAll As String = \"\"\nAddNote(sNoteAll, sNote1)\nAddNote(sNoteAll, sNote2)\nAddNote(sNoteAll, sNote3)\nAddNote(sNoteAll, sNote4)\nAddNote(sNoteAll, sNote5)\nAddNote(sNoteAll, sNote6)\nAddNote(sNoteAll, sNote7)\nAddNote(sNoteAll, sNote8)\nAddNote(sNoteAll, sNote9)\nAddNote(sNoteAll, sNote10)\nAddNote(sNoteAll, sNote11)", "AddNote(sNoteAll, sNote12)\nAddNote(sNoteAll, sNote13)\nAddNote(sNoteAll, sNote14)\nAddNote(sNoteAll, sNote15)\nAddNote(sNoteAll, sNote16)\nAddNote(sNoteAll, sNote17)\n\n'Place the note\nDim oNoteAll As GeneralNote\noNoteAll = oGeneralNotes.AddFitted(oTG.CreatePoint2d(dXCoord, dYCoord), sNoteAll)\noNoteAll.Rotation = oRotation\noNoteAll.Width = oSetWidth\n\nEnd Sub\n\nSub AddNote(ByRef sNoteAll As String, sNote As String)\n\tIf (Not String.IsNullOrEmpty(sNote)) Then\n\t\tIf (Not String.IsNullOrEmpty(sNoteAll)) Then\n\t\t\tsNoteAll = sNoteAll + vbCrLf\n\t\tEnd If\n\t\tsNoteAll = sNoteAll + sNote\n\tEnd If\nEnd Sub\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Start .ipt environment with a sketch on the XY (or any given) plane\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Copy custom iProperty from Child to parent\n                    ", "solution": ["Sub Main()\noRuleNo = \"iL0050\"\nDim openAssy As Document\noRun_or_Not = MessageBox.Show(\"DO YOU WANT TO RUN THIS RULE?\", oRuleNo, MessageBoxButtons.YesNo)\nIf oRun_or_Not = vbNo Then Exit Sub\n\nopenAssy = ThisDoc.Document\nDim oPropertySet_openAssy As PropertySet\nDim oChildDoc As Document\noPropertySet_openAssy = openAssy.PropertySets.Item(\"Inventor User Defined Properties\")\n\nIf openAssy.DocumentType = kAssemblyDocumentObject Then \n\toChildDoc = openAssy.AllReferencedDocuments.Item(1)\n\tMessageBox.Show(\"oChildDoc: \" & oChildDoc.FullFileName, \"Title\") \n\tiProperties.Value(\"Project\", \"Part Number\") = oChildDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Value\n\tiProperties.Value(\"Project\", \"Description\") = oChildDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\").Value\n\tiProperties.Value(\"Custom\", \"TOTAL QTY\") = oChildDoc.PropertySets.Item(\"User Defined Properties\").Item(\"TOTAL QTY\").Value\nElse\n\tMessageBox.Show(\"This document is not an assembly!\", \"INFORMATION\")\nEnd If \n\n\noSave()\nEnd Sub\n\nSub oSave()\nThisDoc.Save\nEnd Sub\n", "Dim oChildren_Assy As New ArrayList\nDim openAssy As AssemblyDocument\nopenAssy = ThisApplication.ActiveDocument \nDim oChildDoc As Document \n\nFor Each oChildDoc  In openAssy.AllReferencedDocuments\n\toChildren_Assy.Add(oChildDoc.FullFileName) \n\t\n\nNext oChildDoc\n\nchildName = InputListBox(\"Prompt\", oChildren_Assy, oChildren_Assy(0), Title := \"Title\", ListName := \"List\")\n\n\nDim selectedDoc As Document \n\nFor Each oChildDoc  In openAssy.AllReferencedDocuments\n\tIf oChildDoc.FullFileName = childName Then\n\t\tselectedDoc = oChildDoc \t\t\n\t\tExit For \n\tEnd If\n\nNext oChildDoc\n\nMessageBox.Show(selectedDoc.DisplayName, \"Title\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Upload to Autodesk Viewer (cloud)\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Initialdirectory does not function with ShowOpen\n                    ", "solution": ["Sub TestFileDialogSample()\n ' Create a new FileDialog object.\n Dim oFileDlg As FileDialog\n Call ThisApplication.CreateFileDialog(oFileDlg)\n\n ' Define the filter for file type.\n oFileDlg.Filter = \"Config Files (*.xml)|*.xml\"\n\n ' Save the file to the C:\\Temp\\ and set a default name for it.\n oFileDlg.FileName = \"C:\\Temp\\DefaultFileName\"\n \n ' Show the save dialog.\n oFileDlg.ShowSave\n End Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Assembly Form to drive part dimensions - excel\n                    ", "solution": ["iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n"], "author": "chrisjspower"},
{"created at": [], "solution Title": "\n                        Re: VBA Rotate Collection Object\n                    ", "solution": ["Public Sub RotateTest2()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    ' Get the first sketch in the part.\n    Dim sketch As PlanarSketch\n    Set sketch = partDoc.ComponentDefinition.Sketches.Item(1)\n       \n    ' Create a new object collection\n    Dim col As ObjectCollection\n    Set col = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    ' Add all of the lines in the sketch to the collection.\n    Dim line As SketchLine\n    For Each line In sketch.SketchLines\n        Call col.Add(line.StartSketchPoint)\n        Call col.Add(line.EndSketchPoint)\n    Next\n     \n    ' Define inputs needed to rotate.\n    Dim rotatePoint As Point2d\n    Set rotatePoint = ThisApplication.TransientGeometry.CreatePoint2d(0, 0)\n    Dim pi As Double\n    pi = Atn(1) * 4\n    Dim angle As Double\n    angle = 45 * (pi / 180)\n        \n    'attempt to rotate\n    Call sketch.RotateSketchObjects(col, rotatePoint, angle)\nEnd Sub"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Inventor DrawingNote.FormattedText in code\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Extract info from TitleBoxe to Excel (with VBA)\n                    ", "solution": ["Sub Main", "    Dim invApp As Object", "    invApp = GetObject(, \"Inventor.Application\")", "\n    Dim oDoc as DrawingDocument\n    oDrawDoc = invApp.ActiveDocument\n    \n    Dim oSheet As Sheet\n    oSheet = oDrawDoc.Sheets(1)\n    Dim oTitleBlockDef As TitleBlockDefinition\n    Dim oTBSketch As DrawingSketch\nTry    \n    ' Create the new title block defintion.\n    oTitleBlockDef = oDrawDoc.TitleBlockDefinitions(1)\n    oAttributes = oTitleBlockDef.AttributeSets\n    oTBSketch = oTitleBlockDef.Sketch\n    \nCatch ex As exception\n    MessageBox.Show(ex.ToString, \"Title\")\nEnd Try\n\n    For Each textBox In oTBSketch.TextBoxes\n        MessageBox.Show(textBox.text, \"Title\")\n    Next\n    ", "    invApp = Nothing\n\nEnd Sub     "], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Change of dimension type on a drawing  - arc length, diameter, radius...\n                    ", "solution": ["Sub ArcLengthDim()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    \n    Dim oCurveSeg As DrawingCurveSegment\n    Set oCurveSeg = ThisApplication.CommandManager.Pick(kDrawingCurveSegmentFilter, \"Select an arc drawing curve\")\n    \n    Dim oCurve As DrawingCurve\n    Set oCurve = oCurveSeg.Parent\n    \n    If oCurve.CurveType <> kCircularArcCurve Then\n        MsgBox \"The selected drawing curve is not an arc curve!\"\n        Exit Sub\n    End If\n    \n    Dim dPosX As Double, dPosY As Double\n    If oCurve.MidPoint.X <= oCurve.CenterPoint.X Then\n        dPosX = oCurve.MidPoint.X * 3 / 2 - oCurve.CenterPoint.X / 2\n    Else\n        dPosX = oCurve.MidPoint.X / 2 + oCurve.CenterPoint.X / 2\n    End If\n    If oCurve.MidPoint.Y <= oCurve.CenterPoint.Y Then\n        dPosY = oCurve.MidPoint.Y * 3 / 2 - oCurve.CenterPoint.Y / 2\n    Else\n        dPosY = oCurve.MidPoint.Y / 2 + oCurve.CenterPoint.Y / 2\n    End If\n    \n    Dim oPos As Point2d\n    Set oPos = ThisApplication.TransientGeometry.CreatePoint2d(dPosX, dPosY)\n    \n    Dim oIntent As GeometryIntent\n    Set oIntent = oSheet.CreateGeometryIntent(oCurve)\n    \n    Dim oArcLenDim As LinearGeneralDimension\n    Set oArcLenDim = oSheet.DrawingDimensions.GeneralDimensions.AddLinear(oPos, oIntent, , kArcLengthDimensionType)\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Title Block definition issues with VBA\n                    ", "solution": ["Public Sub ExecuteOrder66()\n\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n\n    Dim oCurSheet As Sheet\n    Set oCurSheet = oDoc.ActiveSheet\n    \n    Dim oRevTable As RevisionTable\n    Set oRevTable = oCurSheet.RevisionTables.Item(1)\n    \n    oRevTable.Title = \"revision stuff\"\n    \n    Dim oTitleBlock As TitleBlockDefinition\n    Set oTitleBlock = oCurSheet.TitleBlock.Definition\n     \n    \n    Dim oSketch As DrawingSketch\n    Set oSketch = oTitleBlock.Sketch\n    \n    Call oTitleBlock.Edit(oSketch)\n    \n    Dim cgCodeTB As TextBox\n    Set cgCodeTB = oSketch.TextBoxes.Item(19)\n    cgCodeTB.Text = \"Other stuff\"\n     \n    Call oTitleBlock.ExitEdit ", "    \n    MsgBox (\"Revision History Title and Cage Code have been updated.\") & (\"Current cage code is \") & cgCodeTB.Text\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Can you query the current vault user?\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Creating a centermark from a WorkPoint of a Substitute LOD part\n                    ", "solution": ["Sub test()\n\nDim Doc As DrawingDocument\nSet Doc = ThisApplication.ActiveDocument\n\nDim oAssyDoc  As AssemblyDocument\nSet oAssyDoc = Doc.ReferencedDocuments(1)\n\nDim oSheet As Sheet\nSet oSheet = Doc.Sheets.Item(1)\n\nDim oView As DrawingView\nSet oView = oSheet.DrawingViews.Item(1)\n\nDim oOccs As ComponentOccurrences\nSet oOccs = oAssyDoc.ComponentDefinition.Occurrences\n\n'Item #1 required Subassy 'LOD #6 - LOD Substitute\nDim oSubAssySubstituteOcc As ComponentOccurrence\nSet oSubAssySubstituteOcc = oOccs.Item(1).Definition.RepresentationsManager.LevelOfDetailRepresentations.Item(6).SubstituteOccurrence\n    \nDim oDiaPoint1 As WorkPoint\nSet oDiaPoint1 = oSubAssySubstituteOcc.Definition.Document.ComponentDefinition.WorkPoints.Item(2)\n\n' get the work point proxy in the sub assembly\nDim oDiaPoint1Proxy As WorkPointProxy\nCall oSubAssySubstituteOcc.CreateGeometryProxy(oDiaPoint1, oDiaPoint1Proxy)\n\n", "' get the work point proxy in the top assembly", "\n", "Dim", " oDiaPoint1Proxy2 ", "As", " WorkPointProxy\n", "Call", " oOccs.Item(1).CreateGeometryProxy(oDiaPoint1Proxy, oDiaPoint1Proxy2)\n\nDim oCentermarks As Centermarks\nSet oCentermarks = oSheet.Centermarks\n\nDim oCMark As Centermark\nSet oCMark = oCentermarks.AddByWorkFeature(oDiaPoint1Proxy2, oView)\n\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Ilogic: Bodies\n                    ", "solution": [], "author": "jhoel.forshav"},
{"created at": [], "solution Title": "\n                        Re: iLogic push all assembly user parameters to parts\n                    ", "solution": ["Public Sub Main()\n\tCopyUserParams()\nEnd Sub\n\nPrivate Sub CopyUserParams()\n    If ThisDoc.Document.DocumentType <> Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n        MsgBox(\"The active document must be an assembly.\")\n        Return\n    End If\n\n    Dim asmDoc As Inventor.AssemblyDocument = ThisDoc.Document\t\n    For Each refDoc As Inventor.Document In asmDoc.AllReferencedDocuments\n        ' Look for part documents.\n        If refDoc.DocumentType = Inventor.DocumentTypeEnum.kPartDocumentObject Then\n            Dim partDoc As Inventor.PartDocument = refDoc\n            Dim refDocUserParams As UserParameters = partDoc.ComponentDefinition.Parameters.UserParameters\n\n            ' Add the assembly parameters to the part.\n            For Each asmUserParam As UserParameter In asmDoc.ComponentDefinition.Parameters.UserParameters\n                ' Check to see if the parameter already exists.\n                Dim checkParam As UserParameter = Nothing\n                Try\n                    checkParam = refDocUserParams.Item(asmUserParam.Name)\n                Catch ex As Exception\n                    checkParam = Nothing\n                End Try\n\n                If checkParam Is Nothing Then\n                    ' Create the missing parameter.\n                    refDocUserParams.AddByExpression(asmUserParam.Name, asmUserParam.Expression, asmUserParam.Units)\n                Else\n                    ' Update the value of the existing parameter.\n                    checkParam.Expression = asmUserParam.Expression\n                End If\n            Next\n        End If\n    Next\nEnd Sub"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Extracting cell Data from Excel\n                    ", "solution": ["'Populate iProperties from filename", "\n", "iProperties", ".", "Value", "(", "\"Summary\"", ", ", "\"Title\"", ") = (", "Mid", "(", "ThisDoc", ".", "FileName", "(", "False", "),11, 100))\n", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Project\"", ") = (", "Left", "(", "ThisDoc", ".", "FileName", "(", "False", "), 4))\n", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"SYSTEM\"", ") = (", "Mid", "(", "ThisDoc", ".", "FileName", "(", "False", "), 6,4))\n\n", "'Project number variable", "\n", "ProjectNo", " = ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Project\"", ")\n\n", "'Spreadsheet rows start on the 3rd row", "\n", "GoExcel", ".", "TitleRow", " = 3\n", "'compare the project number variable against work order number column in spreadsheet.", "\n", "i", " = ", "GoExcel", ".", "FindRow", "(", "\"C:\\Vault Work\\Design Projects\\Title Block Info.xlsx\"", ", ", "\"Sheet1\"", ", ", "\"Work Order Number\"", ", ", "\"=\"", ", ", "ProjectNo", ")\n", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"Client\"", ") = ", "GoExcel", ".", "CurrentRowValue", "(", "\"Client\"", ")\n\n", "iLogicVb", ".", "UpdateWhenDone", " = ", "True", "\n", "InventorVb", ".", "DocumentUpdate", "()"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How Does Inventor Assign Edges To A DrawingCurvesEnumerator.Item() Array?\n                    ", "solution": ["Public Sub IdentifyDirEdges()\n' This procedure will scan through the positions of a specified component's visible edges, and then determine which edge is closest to the specified\n' cardinal direction (top, bottom, left, right, upper-right, upper-left, lower-right, lower-left) of the View that it exists within.  Once found,\n' this procedure will pass along the selected edge and the specified cardinal direction to the GenerateTestLeaderNote() procedure, which will generate\n' a Leader Note for the selected edge.\n\n    ' Set a reference to the drawing document.\n    Dim oDrawDoc As Inventor.DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n       \n    ' Set a reference to the active sheet.\n    Dim oSheet As Inventor.Sheet\n    Set oSheet = oDrawDoc.ActiveSheet\n       \n    ' Set a reference to all drawing views.\n    Dim oViews As DrawingViews\n    Set oViews = oSheet.DrawingViews\n    \n    ' This variable will specify which DrawingView we're referencing.\n    Dim iViewNum As Integer\n    iViewNum = 1 ' sets oView to \"VIEW1.\"\n    \n    ' Set a reference to the specified drawing view (iViewNum).\n    Dim oView As Inventor.DrawingView\n    Set oView = oViews.Item(iViewNum)\n    \n    ' Set a reference to the assembly document.\n    Dim oAssyDoc As Inventor.AssemblyDocument\n    Set oAssyDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n    \n    ' Readies code for creation of reference points for dimension placement.\n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n\n    ' This variable will fetch the parameters from the Crate Assembly Model.\n    Dim oCrateParams As Parameters\n    Set oCrateParams = oAssyDoc.ComponentDefinition.Parameters\n    \n    ' This variable will fetch the Crate Assembly Model's \"unit_slot_count\" parameter value.\n    Dim oCrateUnitSlotCount As Parameter\n    Set oCrateUnitSlotCount = oCrateParams.Item(\"unit_slot_count\") ' returns 1, 2, 3 or 4.\n'---------------------------------------------------------------------\n    \n    ' Set a reference to the Crate Assembly Model's component definition.\n    Dim oCrateCompDef As AssemblyComponentDefinition\n    Set oCrateCompDef = oAssyDoc.ComponentDefinition\n\n    ' This variable will be used to reference an occurrence of oCrateCompDef.\n    Dim oCrateCompOcc As Inventor.ComponentOccurrence\n    \n    ' This variable will be used to retrieve all of the rendered DrawingCurves of the current oCrateCompOcc component.\n    Dim oDrawingCurvesEnum As DrawingCurvesEnumerator\n'    Set oDrawingCurvesEnum = oView.DrawingCurves(bracing_block_4r)\n'    MsgBox (\"oDrawingCurvesEnum.Count = \" & oDrawingCurvesEnum.Count) ' Returns \"7\"\n    \n    ' This variable will be set to the pre-selected DrawingCurve of the current oCrateCompOcc component that we'll be attaching a Leader Note to.\n    Dim oDrawingCurve As DrawingCurve\n'    Set oDrawingCurve = oDrawingCurvesEnum.Item(1)\n'    MsgBox (\"oDrawingCurve.Parent.Name = \" & oDrawingCurve.Parent.Name) ' Returns \"VIEW1\"\n\n    ' This variable will be used to store the left-most edge of the named component.\n    Dim oTargetDwgCurve As DrawingCurve\n'---------------------------------------------------------------------\n    \n    ' This String variable will contain the name of the component that we want to cover in Leader Notes.\n    Dim sCompName As String\n    sCompName = \"block_1t_us4\"\n    \n    ' This variable will be referenced to determine which direction the target edge should be in.  The acceptable values are as follows:\n    ' top\n    ' bottom\n    ' left\n    ' right\n    ' upper-left\n    ' upper-right\n    ' lower-left\n    ' lower-right\n    Dim sTargetEdgeDirection As String\n    sTargetEdgeDirection = \"lower-left\"\n    \n    ' First, we must locate the component occurrence of our named component (sCompName).  Once found, we can then assign the DrawingCurvesEnumerator\n    ' of the named component to oDrawingCurvesEnum, which will allow us to then annotate the named component's edges.\n    For Each oCrateCompOcc In oCrateCompDef.Occurrences\n        ' We'll skip over all suppressed components, as well as components with no visible SurfaceBodies.\n        If oCrateCompOcc.Suppressed = False And oCrateCompOcc.SurfaceBodies.Count > 0 Then\n            ' If the current oCrateCompOcc's name matches sCompName, then we've found our component!  We assign the current component occurrence to\n            ' oDrawingCurvesEnum, and then exit this For-Each loop.\n            If oCrateCompOcc.Name = sCompName Then\n                Set oDrawingCurvesEnum = oView.DrawingCurves(oCrateCompOcc)\n                Exit For\n            End If\n        End If\n    Next\n    \n    ' This variable will keep count of each DrawingCurve edge number as we iterate through them in the For-Each loop below.\n    Dim iEdgeNum As Integer\n    iEdgeNum = 1\n    \n    ' The following two variables will be used to compare and store each edge's X&Y coordinates.  The edge that's furthest to the left will be determined\n    ' through the use of these two Double variables.\n    Dim dXCoord As Double\n    dXCoord = oDrawingCurvesEnum.Item(iEdgeNum).MidPoint.X\n    \n    Dim dYCoord As Double\n    dYCoord = oDrawingCurvesEnum.Item(iEdgeNum).MidPoint.Y\n    \n    Set oTargetDwgCurve = oDrawingCurvesEnum.Item(iEdgeNum)\n    \n    ' This variable will be used to identify the target edge number that's furthest to the left.\n    Dim iTargetEdgeNum As Integer\n    iTargetEdgeNum = iEdgeNum\n    \n    ' Now that we've assigned oDrawingCurvesEnum to our named component's DrawingCurves, we will create a For-Each loop to cycle through each visible\n    ' edge of the named component and compare their MidPoints' X&Y coordinates.  When the left-most edge has been identified, it'll be passed on to the\n    ' GenerateTestLeaderNote() procedure to label this edge with a Leader Note.\n    For Each oDrawingCurve In oDrawingCurvesEnum\n        Select Case sTargetEdgeDirection\n            Case \"top\"\n                If oDrawingCurve.MidPoint.Y > dYCoord Then\n                    dYCoord = oDrawingCurve.MidPoint.Y\n                    iTargetEdgeNum = iEdgeNum\n                    Set oTargetDwgCurve = oDrawingCurve\n                End If\n            \n            Case \"bottom\"\n                If oDrawingCurve.MidPoint.Y < dYCoord Then\n                    dYCoord = oDrawingCurve.MidPoint.Y\n                    iTargetEdgeNum = iEdgeNum\n                    Set oTargetDwgCurve = oDrawingCurve\n                End If\n            \n            Case \"left\"\n                If oDrawingCurve.MidPoint.X < dXCoord Then\n                    dXCoord = oDrawingCurve.MidPoint.X\n                    iTargetEdgeNum = iEdgeNum\n                    Set oTargetDwgCurve = oDrawingCurve\n                End If\n                \n            Case \"right\"\n                If oDrawingCurve.MidPoint.X > dXCoord Then\n                    dXCoord = oDrawingCurve.MidPoint.X\n                    iTargetEdgeNum = iEdgeNum\n                    Set oTargetDwgCurve = oDrawingCurve\n                End If\n            \n            Case \"upper-left\"\n                If oDrawingCurve.MidPoint.X < dXCoord And oDrawingCurve.MidPoint.Y > dYCoord Then\n                    dXCoord = oDrawingCurve.MidPoint.X\n                    dYCoord = oDrawingCurve.MidPoint.Y\n                    iTargetEdgeNum = iEdgeNum\n                    Set oTargetDwgCurve = oDrawingCurve\n                End If\n            \n            Case \"upper-right\"\n                If oDrawingCurve.MidPoint.X > dXCoord And oDrawingCurve.MidPoint.Y > dYCoord Then\n                    dXCoord = oDrawingCurve.MidPoint.X\n                    dYCoord = oDrawingCurve.MidPoint.Y\n                    iTargetEdgeNum = iEdgeNum\n                    Set oTargetDwgCurve = oDrawingCurve\n                End If\n            \n            Case \"lower-left\"\n                If oDrawingCurve.MidPoint.X < dXCoord And oDrawingCurve.MidPoint.Y < dYCoord Then\n                    dXCoord = oDrawingCurve.MidPoint.X\n                    dYCoord = oDrawingCurve.MidPoint.Y\n                    iTargetEdgeNum = iEdgeNum\n                    Set oTargetDwgCurve = oDrawingCurve\n                End If\n                \n            Case \"lower-right\"\n                If oDrawingCurve.MidPoint.X > dXCoord And oDrawingCurve.MidPoint.Y < dYCoord Then\n                    dXCoord = oDrawingCurve.MidPoint.X\n                    dYCoord = oDrawingCurve.MidPoint.Y\n                    iTargetEdgeNum = iEdgeNum\n                    Set oTargetDwgCurve = oDrawingCurve\n                End If\n            \n            Case Else\n                MsgBox (\"ERROR:  Incorrect value for sTargetEdgeDirection (\" & sTargetEdgeDirection & \").\")\n                Exit Sub\n        End Select\n        \n        iEdgeNum = iEdgeNum + 1\n    Next\n    \n    ' Now that we've identified the left-most edge for the named component, we'll annotate it with a Leader Note.\n    Call GenerateTestLeaderNote(iViewNum, oDrawDoc, oAssyDoc, oTargetDwgCurve, iTargetEdgeNum, sTargetEdgeDirection)\nEnd Sub\n\nPublic Sub GenerateTestLeaderNote(iViewNum, oDrawDoc, oAssyDoc, oDrawingCurve, iTargetEdgeNum, sTargetEdgeDirection)\n' This procedure will generate a Leader Note on the rendered component edge within the specified View provided by AnnotateComponentEdges().\n' The Leader Note's text flag will be positioned in the same direction as the cardinal direction specified by sTargetEdgeDirection.\n\n    ' Set a reference to the active sheet.\n    Dim oSheet As Sheet\n    Set oSheet = oDrawDoc.ActiveSheet\n\n    ' Set a reference to all drawing views.\n    Dim oViews As DrawingViews\n    Set oViews = oSheet.DrawingViews\n\n    ' Set a reference to the specified drawing view (iViewNum).\n    Dim oView As Inventor.DrawingView\n    Set oView = oViews.Item(iViewNum)\n    \n    ' This variable will contain the text that the Leader Note will display.\n    Dim sLNText As String\n    sLNText = \"Edge #\" & iTargetEdgeNum\n\n    ' Get the mid point of the selected curve\n    ' assuming that the selected curve is linear\n    Dim oMidPoint As Point2d\n    Set oMidPoint = oDrawingCurve.MidPoint\n\n    ' Set a reference to the TransientGeometry object.\n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n    \n    ' Create a reference to a TransientObjects' ObjectCollection.\n    Dim oLeaderPoints As ObjectCollection\n    Set oLeaderPoints = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    ' This variable will be used for adding attribute values to each created dimension.\n    Dim oDim1Att As AttributeSet\n'--------------------------------------------------------------------------------------\n    \n    ' These variables will be used to offset the text flag of the auto-generated Leader Note based on which edge it's to be pointed at.\n    Dim dXOffset As Double\n    dXOffset = 0\n    \n    Dim dYOffset As Double\n    dYOffset = 0\n    \n    ' This Select-Case block will assign the appropriate offset values to dXOffset & dYOffset.  These variables will then assist in\n    ' positioning the Leader Note's text flag in a position according to the cardinal direction specified by sTargetEdgeDirection.\n    Select Case sTargetEdgeDirection\n        Case \"top\"\n                dXOffset = 0\n                dYOffset = 1.5\n                \n            Case \"bottom\"\n                dXOffset = 0\n                dYOffset = -1.5\n            \n            Case \"left\"\n                dXOffset = -1.5\n                dYOffset = 0\n                \n            Case \"right\"\n                dXOffset = 1.5\n                dYOffset = 0\n            \n            Case \"upper-left\"\n                dXOffset = -1.5\n                dYOffset = 1.5\n            \n            Case \"upper-right\"\n                dXOffset = 1.5\n                dYOffset = 1.5\n            \n            Case \"lower-left\"\n                dXOffset = -1.5\n                dYOffset = -1.5\n                \n            Case \"lower-right\"\n                dXOffset = 1.5\n                dYOffset = -1.5\n            \n            Case Else\n                MsgBox (\"ERROR:  Incorrect value for sTargetEdgeDirection (\" & sTargetEdgeDirection & \").\")\n                Exit Sub\n        End Select\n\n    ' Create a leader point that marks where the \"elbow\" of the Leader Note should be placed in relation to the arrow head's location\n    ' (which is the MidPoint of our specified DrawingCurve).\n    Call oLeaderPoints.Add(oTG.CreatePoint2d(oMidPoint.X + dXOffset, oMidPoint.Y + dYOffset))\n\n    ' Create an intent and add to the leader points collection.\n    ' This is the geometry that the leader text will attach to.\n    Dim oGeometryIntent As GeometryIntent\n    Set oGeometryIntent = oSheet.CreateGeometryIntent(oDrawingCurve, oMidPoint)\n\n    Call oLeaderPoints.Add(oGeometryIntent)\n\n    ' Generate the actual Leader Note on the drawing.\n    Dim oLeaderNote As LeaderNote\n    Set oLeaderNote = oSheet.DrawingNotes.LeaderNotes.Add(oLeaderPoints, sLNText)\n\n    ' Now to give our oLeaderNote some custom attribute sets to allow us to delete only these auto-generated Leader Notes.\n    Set oDim1Att = oLeaderNote.AttributeSets.Add(\"iLogic_Created\")\n    Set oDim1Att = oLeaderNote.AttributeSets.Add(\"ID\")\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: B_L and G_L in custom content center; Frame Genenated members BOM parameters\n                    ", "solution": [], "author": "G60Dub"},
{"created at": [], "solution Title": "\n                        Re: iLogic form not updating between open documents when they become active\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Macro of turning visibility off of all working planes and axis and sketches\n                    ", "solution": ["Sub Main()\n    'user feedback tools start\n    Dim sw As New Stopwatch()\n    sw.Start()\n    'get user input as True or False\n    Dim Assyboolean As Boolean = InputRadioBox(\"Turn all Work Features On/Off\", \"On\", \"Off\", False, \"iLogic\")\n\n    If ThisApplication.ActiveDocument.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n        ToggleParts(ThisApplication.ActiveDocument, Assyboolean)\n    ElseIf ThisApplication.ActiveDocument.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n        'Dim wfBoolean As Boolean = InputRadioBox(\"Turn all Work Features & Sketches On/Off\", \"On\", \"Off\", False, \"iLogic\")\n        ToggleAssemblies(ThisApplication.ActiveDocument, Assyboolean)\n    End If\n    sw.Stop()\n    Dim timeElapsed As Timespan = sw.elapsed\n    messagebox.show(\"Processing took: \" & String.Format(\"{0:00}:{1:00}:{2:00}.{3:00}\",\n                                                        timeElapsed.Hours,\n                                                        timeElapsed.Minutes,\n                                                        timeElapsed.Seconds,\n                                                        timeElapsed.Milliseconds / 10))\nEnd Sub\n\nSub ToggleAssemblies(ByVal oAssyDoc As AssemblyDocument, ByVal wfBoolean As Boolean)\n    'Toggle this document\n    'set work plane visibility\n    For Each oWorkPlane In oAssyDoc.ComponentDefinition.WorkPlanes\n        oWorkPlane.Visible = wfBoolean\n    Next\n\n    'set work axis visibility\n    For Each oWorkAxis In oAssyDoc.ComponentDefinition.WorkAxes\n        oWorkAxis.Visible = wfBoolean\n    Next\n\n    'set work point visibility\n    For Each oWorkPoint In oAssyDoc.ComponentDefinition.WorkPoints\n        oWorkPoint.Visible = wfBoolean\n    Next\n    'Check all referenced docs\n    Dim oDoc As Inventor.Document\n    For Each oDoc In oAssyDoc.AllReferencedDocuments\n        If TypeOf oDoc Is partdocument Then\n            ToggleParts(oDoc, wfBoolean)\n        Else\n            'set work plane visibility\n            For Each oWorkPlane In oDoc.ComponentDefinition.WorkPlanes\n                oWorkPlane.Visible = wfBoolean\n            Next\n\n            'set work axis visibility\n            For Each oWorkAxis In oDoc.ComponentDefinition.WorkAxes\n                oWorkAxis.Visible = wfBoolean\n            Next\n\n            'set work point visibility\n            For Each oWorkPoint In oDoc.ComponentDefinition.WorkPoints\n                oWorkPoint.Visible = wfBoolean\n            Next\n            ToggleAssemblies(oDoc, wfBoolean)\n        End If\n    Next\n    'update the files\n    InventorVb.DocumentUpdate()\nEnd Sub\n\nSub ToggleParts(ByVal oDoc As document, ByVal wfBoolean As Boolean)\n    Dim PartDoc As PartDocument = oDoc\n    ''get user input as True or False\n    '    Dim partboolean As Boolean = Nothing\n    '    If wfBoolean = Nothing Then\n    '        partboolean = InputRadioBox(\"Turn all Work Features On/Off\", \"On\", \"Off\", False, \"iLogic\")\n    '    Else\n    '        partboolean = wfBoolean\n    '    End If\n    For Each oWorkPlane In PartDoc.ComponentDefinition.WorkPlanes\n        oWorkPlane.Visible = wfBoolean\n    Next\n    'set work axis visibility\n    For Each oWorkAxis In PartDoc.ComponentDefinition.WorkAxes\n        oWorkAxis.Visible = wfBoolean\n    Next\n    'set work point visibility\n    For Each oWorkPoint In PartDoc.ComponentDefinition.WorkPoints\n        oWorkPoint.Visible = wfBoolean\n    Next\n    togglePartSketches(oDoc, wfBoolean)\n    InventorVb.DocumentUpdate()\nEnd Sub\n\nSub togglePartSketches(ByVal doc As document, ByVal wfBoolean As Boolean)\n    For Each o2DSketch As Sketch In doc.ComponentDefinition.Sketches\n        o2DSketch.Visible = wfBoolean\n    Next\n\n    For Each o3DSketch As Sketch3D In doc.ComponentDefinition.Sketches3D\n        o3DSketch.Visible = wfBoolean\n    Next\n\n    'wfBoolean = InputRadioBox(\"Toggle Sketch Dimension display On/Off\", \"On\", \"Off\", False, \"iLogic\")\n    For Each o2DSketch As Sketch In doc.ComponentDefinition.Sketches\n        o2DSketch.DimensionsVisible = wfBoolean\n    Next\nEnd Sub"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: How to select a hole feature of a part in an assembly?\n                    ", "solution": ["Dim doc As Document\n    doc = ThisApplication.ActiveDocument\n\n    ' Have an object selected.\n    Dim selection As Object\n    selection = ThisApplication.CommandManager.Pick( _\n                                    SelectionFilterEnum.kPartFeatureFilter, _\n                                    \"Select a feature.\") \n\tMsgBox(selection.Name)"], "author": "jhoel.forshav"},
{"created at": [], "solution Title": "\n                        Re: To Edit User Parameter from within current Sketch\n                    ", "solution": ["Sub Main()\n\tDim oSelectedDim As DimensionConstraint\n\toSelectedDim = ThisApplication.Commandmanager.Pick(SelectionFilterEnum.kSketchDimConstraintFilter,\"Select a dimension to change dimension\")\n    \n    If oSelectedDim.Parameter.DrivenBy.Count > 0 Then\n        Dim oUserParam As UserParameter\n        oUserParam = oSelectedDim.Parameter.DrivenBy.Item(1)\n        \n        oUserParam.Expression = InputBox(\"Editing user parameter '\" & oUserParam.Name & \"'\", \"Edit user parameter\", \"10\") \n    Else\n        MsgBox (\"Selected dimension is not contianing any user parameter\")\n    End If\n\n    iLogicVb.UpdateWhenDone = True\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: What is happening to my ilogic?\n                    ", "solution": ["Sub", " ", "Main", "()", "\n", "'", "check that the active document is an assembly file", "\n", "If", " ", "ThisApplication", ".", "ActiveDocument", ".", "DocumentType", " ", "<>", " ", "kAssemblyDocumentObject", " ", "Then", "\n", "MessageBox", ".", "Show", "(", "\"", "Please run this rule from the assembly file.", "\"", ", ", "\"", "iLogic", "\"", ")", "\n", "Exit Sub", "\n", "End", " ", "If", "\n\n", "'", "define the active document as an assembly file", "\n", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", "\n", "oAsmDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "oAsmName", " ", "=", " ", "Left", "(", "oAsmDoc", ".", "DisplayName", ", ", "Len", "(", "oAsmDoc", ".", "DisplayName", ")", " ", "-", "4", ")", "\n\n", "'", "get user input", "\n", "RUsure", " ", "=", " ", "MessageBox", ".", "Show", " ", "(", " ", "_", "\n", "\"", "This will create a PDF file for all of the asembly components that have drawings files.", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "This rule expects that the drawing file shares the same name and location as the component.", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", " ", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "Are you sure you want to create PDF Drawings for all of the assembly components?", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "This could take a while.", "\"", ", ", "\"", "iLogic  - Batch Output PDFs ", "\"", ",", "MessageBoxButtons", ".", "YesNo", ")", "\n\n", "If", " ", "RUsure", " ", "=", " ", "vbNo", " ", "Then", "\n", "Return", "\n", "Else", "\n", "End", " ", "If", "\n\n", "'", "- - - - - - - - - - - - -PDF setup - - - - - - - - - - - -", "\n", "oPath", " ", "=", " ", "ThisDoc", ".", "Path", "\n", "PDFAddIn", " ", "=", " ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"", "{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}", "\"", ")", "\n", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " ", "=", " ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n\n", "If", " ", "PDFAddIn", ".", "HasSaveCopyAsOptions", "(", "oDataMedium", ", ", "oContext", ", ", "oOptions", ")", " ", "Then", "\n", "'", "oOptions.Value(\"All_Color_AS_Black\") = 0", "\n", "oOptions", ".", "Value", "(", "\"", "Remove_Line_Weights", "\"", ")", " ", "=", " ", "1", "\n", "oOptions", ".", "Value", "(", "\"", "Vector_Resolution", "\"", ")", " ", "=", " ", "400", "\n", "oOptions", ".", "Value", "(", "\"", "Sheet_Range", "\"", ")", " ", "=", " ", "Inventor", ".", "PrintRangeEnum", ".", "kPrintAllSheets", "\n", "'", "oOptions.Value(\"Custom_Begin_Sheet\") = 2'oOptions.Value(\"Custom_End_Sheet\") = 4", "\n", "End", " ", "If", "\n\n", "'", "get PDF target folder path", "\n", "oFolder", " ", "=", " ", "oPath", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oAsmName", " ", "&", " ", "\"", " PDF Files", "\"", "\n\n", "'", "Check for the PDF folder and create it if it does not exist", "\n", "If", " ", "Not", " ", "System", ".", "IO", ".", "Directory", ".", "Exists", "(", "oFolder", ")", " ", "Then", "\n    ", "System", ".", "IO", ".", "Directory", ".", "CreateDirectory", "(", "oFolder", ")", "\n", "End", " ", "If", "\n", "'", "- - - - - - - - - - - - -", "\n\n", "'", "- - - - - - - - - - - - -Component Drawings - - - - - - - - - - - -'look at the files referenced by the assembly", "\n", "doc", " ", "=", " ", "ThisDoc", ".", "Document", "\n    ", "Dim", " ", "oAssyDef", " ", "As", " ", "AssemblyComponentDefinition", " ", "=", " ", "doc", ".", "ComponentDefinition", "\n    ", "Dim", " ", "oBOM", " ", "As", " ", "BOM", " ", "=", " ", "oAssyDef", ".", "BOM", "\n\n    ", "oBOM", ".", "StructuredViewEnabled", " ", "=", " ", "True", "\n    ", "oBOM", ".", "StructuredViewFirstLevelOnly", " ", "=", " ", "False", "\n\n    ", "Dim", " ", "oBOMView", " ", "As", " ", "BOMView", " ", "=", " ", "oBOM", ".", "BOMViews", ".", "Item", "(", "\"", "Structured", "\"", ")", "\n\n    ", "Dim", " ", "oBOMRow", " ", "As", " ", "BOMRow", "\n    ", "Dim", " ", "oCompDef", " ", "As", " ", "ComponentDefinition", "\n\n    ", "For", " ", "Each", " ", "oBOMRow", " ", "In", " ", "oBOMView", ".", "BOMRows", "\n\n     \n       ", "If", " ", "Not", " ", "oBOMRow", ".", "ChildRows", " ", "Is", " ", "Nothing", "\n         ", "Call", " ", "RecurseBOMRow", "(", "oBOMRow", ", ", "PDFAddIn", ", ", "oFolder", ")", "\n      ", "End", " ", "If", "\n       ", "oCompDef", " ", "=", " ", "oBOMRow", ".", "ComponentDefinitions", ".", "Item", "(", "1", ")", "\n", "idwPathName", " ", "=", " ", "Left", "(", "oCompDef", ".", "Document", ".", "FullDocumentName", ", ", "Len", "(", "oCompDef", ".", "Document", ".", "FullDocumentName", ")", " ", "-", " ", "3", ")", " ", "&", " ", "\"", "idw", "\"", "\n", "'", "check to see that the model has a drawing of the same path and name ", "'", "MessageBox.Show(idwPathName)", "\n\n", "If", "(", "System", ".", "IO", ".", "File", ".", "Exists", "(", "idwPathName", "))", " ", "Then", "\n        ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n    ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "idwPathName", ", ", "True", ")", "\n    ", "oFileName", " ", "=", " ", "Left", "(", "oCompDef", ".", "Document", ".", "DisplayName", ", ", "Len", "(", "oCompDef", ".", "Document", ".", "DisplayName", ")", " ", "-", "3", ")", "\n    \n    ", "'", "INSERT RULE HERE", "\n    ", "iLogicVb", ".", "Automation", ".", "RunExternalRule", "(", "oDrawDoc", ", ", "\"", "DELETE1", "\"", ")", "\n    ", "iLogicVb", ".", "Automation", ".", "RunExternalRule", "(", "oDrawDoc", ", ", "\"", "DELETE2", "\"", ")", "\n\n    \n    \n    ", "On", " ", "Error", " ", "Resume", " ", "Next", " ", "'", " if PDF exists and is open or read only, resume next", "\n     ", "'", "Set the PDF target file name", "\n    ", "oDataMedium", ".", "FileName", " ", "=", " ", "oFolder", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oFileName", " ", "&", " ", "\"", "pdf", "\"", "\n        ", "'", "Write out the PDF", "\n    ", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oDrawDoc", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n    \n    ", "'", "close the file", "\n    ", "oDrawDoc", ".", "Close", "(", "True", ")", "\n    \n", "Else", "\n", "'", "If the model has no drawing of the same path and name - do nothing", "\n", "End", " ", "If", "\n    ", "Next", "\n\n\n\n", "'", "- - - - - - - - - - - - -", "\n", "Call", " ", "PrintTopLevel", "()", "\n", "MessageBox", ".", "Show", "(", "\"", "New Files Created in: ", "\"", " ", "&", " ", "vbLf", " ", "&", " ", "oFolder", ", ", "\"", "iLogic", "\"", ")", "\n", "'", "open the folder where the new ffiles are saved", "\n", "Shell", "(", "\"", "explorer.exe ", "\"", " ", "&", " ", "oFolder", ",", "vbNormalFocus", ")", "\n", "End Sub", "\n\n", "Sub", " ", "RecurseBOMRow", "(", "oBOMRow", " ", "As", " ", "BOMRow", ", ", "PDFAddIn", " ", "As", " ", "ApplicationAddIn", ", ", "oFolder", " ", "As", " ", "String", ")", "\n", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " ", "=", " ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n   ", "For", " ", "Each", " ", "oBOMRow", " ", "In", " ", "oBOMRow", ".", "ChildRows", "\n     ", "Dim", " ", "oCompDef", " ", "As", " ", "ComponentDefinition", "\n     ", "oCompDef", " ", "=", " ", "oBOMRow", ".", "ComponentDefinitions", ".", "Item", "(", "1", ")", "\n\n", "idwPathName", " ", "=", " ", "Left", "(", "oCompDef", ".", "Document", ".", "FullDocumentName", ", ", "Len", "(", "oCompDef", ".", "Document", ".", "FullDocumentName", ")", " ", "-", " ", "3", ")", " ", "&", " ", "\"", "idw", "\"", "\n\n", "'", "check to see that the model has a drawing of the same path and name ", "\n", "If", "(", "System", ".", "IO", ".", "File", ".", "Exists", "(", "idwPathName", "))", " ", "Then", "\n        ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n    ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "idwPathName", ", ", "True", ")", "\n    ", "oFileName", " ", "=", " ", "Left", "(", "oCompDef", ".", "Document", ".", "DisplayName", ", ", "Len", "(", "oCompDef", ".", "Document", ".", "DisplayName", ")", " ", "-", "3", ")", "\n   \n    ", "'", "INSERT RULE HERE", "\n   ", "iLogicVb", ".", "Automation", ".", "RunExternalRule", "(", "oDrawDoc", ", ", "\"", "DELETE1", "\"", ")", "\n    ", "iLogicVb", ".", "Automation", ".", "RunExternalRule", "(", "oDrawDoc", ", ", "\"", "DELETE2", "\"", ")", "\n\n    \n    \n    ", "'", "On Error Resume Next ' if PDF exists and is open or read only, resume next", "\n     ", "'", "Set the PDF target file name", "\n    ", "oDataMedium", ".", "FileName", " ", "=", " ", "oFolder", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oFileName", " ", "&", " ", "\"", "pdf", "\"", "\n        ", "'", "Write out the PDF", "\n    ", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oDrawDoc", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n    \n    ", "'", "close the file", "\n    ", "oDrawDoc", ".", "Close", "(", "True", ")", "\n    \n", "Else", "\n", "'", "If the model has no drawing of the same path and name - do nothing", "\n", "End", " ", "If", "\n     ", "If", " ", "Not", " ", "oBOMRow", ".", "ChildRows", " ", "Is", " ", "Nothing", "\n          ", "Call", " ", "RecurseBOMRow", "(", "oBOMRow", ", ", "PDFAddIn", ", ", "oFolder", ")", "\n     ", "End", " ", "If", "\n   ", "Next", "\n", "End Sub", "\n", "'", "- - - - - - - - - - - - -", "\n\n", "'", "- - - - - - - - - - - - -Top Level Drawing - - - - - - - - - - - -", "\n", "Sub", " ", "PrintTopLevel", "()", "\n", "PDFAddIn", " ", "=", " ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"", "{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}", "\"", ")", "\n", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " ", "=", " ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n\n", "oAsmDrawing", " ", "=", " ", "Left", "(", "ThisApplication", ".", "ActiveDocument", ".", "FullDocumentName", ", ", "Len", "(", "ThisApplication", ".", "ActiveDocument", ".", "FullDocumentName", ")", " ", "-", " ", "3", ")", " ", "&", " ", "\"", "idw", "\"", "\n", "oAsmDrawingDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oAsmDrawing", ", ", "True", ")", "\n", "oAsmDrawingName", " ", "=", " ", "Left", "(", "oAsmDrawingDoc", ".", "DisplayName", ", ", "Len", "(", "oAsmDrawingDoc", ".", "DisplayName", ")", " ", "-", "3", ")", "\n", "'", "write out the PDF for the Top Level Assembly Drawing file", "\n", "On", " ", "Error", " ", "Resume", " ", "Next", " ", "'", " if PDF exists and is open or read only, resume next", "\n ", "'", "Set the PDF target file name", "\n ", "oFolder", " ", "=", " ", "\"", "C:\\Work\\Projects\\24000\\24373\\24373-007-7000 PDF Files", "\"", "\n", "oDataMedium", ".", "FileName", " ", "=", " ", "oFolder", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oAsmDrawingName", " ", "&", " ", "\"", "pdf", "\"", "\n", "'", "Write out the PDF", "\n", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oAsmDrawingDoc", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n", "'", "Close the top level drawing", "\n", "oAsmDrawingDoc", ".", "Close", "\n", "End Sub", "\n\n\n"], "author": "jdollahan"},
{"created at": [], "solution Title": "\n                        Re: create an isometric dimension from two work points automatically.\n                    ", "solution": ["Public Sub DimBtwnWorkpoints()\n  'Creates a dimension between two work points\n  'Active document is inventor drawing\n  'Active sheet has view(s)\n  'First view is of assembly\n  'First component occurrence of assembly is part\n  'Part has two work points\n  'Dimension will be created between these two work points\n  \n  Dim oDrawingDocument As Inventor.DrawingDocument\n  Set oDrawingDocument = ThisApplication.ActiveDocument\n  \n  Dim oSheet As Inventor.Sheet\n  Set oSheet = oDrawingDocument.ActiveSheet\n  \n  Dim oView As Inventor.DrawingView\n  Set oView = oSheet.DrawingViews.Item(1)\n  \n  Dim oAssemblyDoc As Inventor.AssemblyDocument\n  Set oAssemblyDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n  \n  'Get the first component occurrence of the assembly\n  Dim oComponentOcc As Inventor.ComponentOccurrence\n  Set oComponentOcc = oAssemblyDoc.ComponentDefinition.Occurrences.Item(1)\n  Dim oPartDocument As Inventor.PartDocument\n  Set oPartDocument = oComponentOcc.Definition.Document\n  \n  'Get the first two work points (WorkPoints.Item(1) is the origin)\n  Dim oWorkPoint1 As Inventor.WorkPoint\n  Dim oWP2 As Inventor.WorkPoint\n  Set oWorkPoint1 = oPartDocument.ComponentDefinition.WorkPoints.Item(2)\n  Set oWP2 = oPartDocument.ComponentDefinition.WorkPoints.Item(3)\n  \n  'Create a proxy for the two work points\n  Dim oWorkPointProx1 As Inventor.WorkPointProxy\n  Dim oWorkPointProx2 As Inventor.WorkPointProxy\n  oComponentOcc.CreateGeometryProxy oWorkPoint1, oWorkPointProx1\n  oComponentOcc.CreateGeometryProxy oWP2, oWorkPointProx2\n  \n  'Include the work points in the drawing view\n  oView.SetIncludeStatus oWorkPointProx1, True\n  oView.SetIncludeStatus oWorkPointProx2, True\n  \n  'Now we need to find the two centermarks that represent the work point proxies\n  Dim oCenterMark1 As Inventor.Centermark\n  Dim oCenterMark2 As Inventor.Centermark\n  Dim oCenterMark As Inventor.Centermark\n  For Each oCenterMark In oSheet.Centermarks\n    If oCenterMark.Attached Then\n      If oCenterMark.AttachedEntity Is oWorkPointProx1 Then\n        Set oCenterMark1 = oCenterMark\n      ElseIf oCenterMark.AttachedEntity Is oWorkPointProx2 Then\n        Set oCenterMark2 = oCenterMark\n      End If\n    End If\n  Next\n  \n  'From the two work points, we create the geometry intent\n  Dim oGeomIntent1 As Inventor.GeometryIntent\n  Dim oGeomIntent2 As Inventor.GeometryIntent\n  Set oGeomIntent1 = oSheet.CreateGeometryIntent(oCenterMark1, Inventor.kPoint2dIntent)\n  Set oGeomIntent2 = oSheet.CreateGeometryIntent(oCenterMark2, Inventor.kPoint2dIntent)\n  \n  'Create a point for the text\n  Dim oTextPoint As Inventor.Point2d\n  Set oTextPoint = ThisApplication.TransientGeometry.CreatePoint2d()\n  oTextPoint.X = (oGeomIntent1.PointOnSheet.X + oGeomIntent2.PointOnSheet.X) / 2\n  oTextPoint.Y = (oGeomIntent1.PointOnSheet.Y) + 1\n  \n  'Create the dimension\n  Call ", "oSheet.DrawingDimensions.GeneralDimensions.AddLinear(oTextPoint, oGeomIntent1, oGeomIntent2, kAlignedDimensionType)", "\n  \n  'For extra credit, hide the work points\n  oCenterMark1.Visible = False\n  oCenterMark2.Visible = False\nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How do i fill a prompted entry from CUSTOM iproperty in an assembly\n                    ", "solution": ["oModelDoc = oSheet.DrawingViews.Item(1).ReferencedDocumentDescriptor.ReferencedDocument", "oSO = oModelDoc.PropertySets(\"Inventor User Defined Properties\")(\"SO\").Value"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Reveal Bad Bodies with API\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Creating a read write material library\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: User Parameter: How to retrieve Dimension Text Box Text\n                    ", "solution": ["Sub Main()\n\tDim oSelectedDim As DimensionConstraint\n\toSelectedDim = ThisApplication.Commandmanager.Pick(SelectionFilterEnum.kSketchDimConstraintFilter,\"Select a dimension to change dimension\")\n    \n    If oSelectedDim.Parameter.DrivenBy.Count > 0 Then\n        Dim oUserParam As UserParameter\n        oUserParam = oSelectedDim.Parameter.DrivenBy.Item(1)\n\t\t\n\tMsgBox (\"User parameter name is '\" & oUserParam.Name & \"'\") \n        \n    Else\n        MsgBox (\"Selected dimension is not contianing any user parameter\")\n    End If\n\n\tiLogicVb.UpdateWhenDone = True\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Ilogic Write to excel - Basic\n                    ", "solution": [], "author": "chrisjspower"},
{"created at": [], "solution Title": "\n                        Re: Excel parameter import inconsistency/user error\n                    ", "solution": [], "author": "dmora"},
{"created at": [], "solution Title": "\n                        Re: Rule for Component enable true or false\n                    ", "solution": ["    ", "Component", ".", "InventorComponent", "(", "\"", "Verloop", "\"", ")", ".", "Enabled", " ", "=", " ", "True"], "author": "KenVaessen"},
{"created at": [], "solution Title": "\n                        Re: Using Insert Points\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: create Leader from a work point api\n                    ", "solution": ["Private Sub CreateLeader()\n    Dim invApp As Inventor.Application = GetObject(, \"Inventor.Application\")\n    Dim drawDoc As DrawingDocument = invApp.ActiveDocument\n\n    ' Find the view named \"TestView\" on the active sheet.\n    Dim sht As Sheet = drawDoc.ActiveSheet\n    For Each drawView As DrawingView In sht.DrawingViews\n        If drawView.Name = \"TestView\" Then\n            ' Get the referenced assembly.\n            Dim tankAsm As AssemblyDocument = drawView.ReferencedDocumentDescriptor.ReferencedDocument\n            Dim tankAsmComp As AssemblyComponentDefinition = tankAsm.ComponentDefinition\n\n            ' Get the occurrence of the tank in the assembly.\n            Dim tankOcc As ComponentOccurrence = tankAsmComp.Occurrences.ItemByName(\"Tank:1\")\n\n            ' Get the tank part.\n            Dim tankPartComp As PartComponentDefinition = tankOcc.Definition\n\n            ' Get the work point named \"TANKWP\".\n            Dim tankWP As WorkPoint = tankPartComp.WorkPoints.Item(\"TANKWP\")\n\n            ' Get the value of the parameters.\n            Dim nameParam As Parameter = tankPartComp.Parameters.Item(\"TANKLEADER\")\n            Dim volParam As Parameter = tankPartComp.Parameters.Item(\"WORKINGVOLUME\")\n            Dim name As String = nameParam.Value\n            Dim vol As String = volParam.Value\n\n            Dim includeWP As Boolean = True\n            If includeWP Then\n                ' Get the proxy of the work point because we need it in the context of the assembly.\n                Dim tankWPProxy As WorkPointProxy = Nothing\n                tankOcc.CreateGeometryProxy(tankWP, tankWPProxy)\n\n                ' Include the work point.\n                Dim mark As Centermark = sht.Centermarks.AddByWorkFeature(tankWPProxy, drawView)\n\n                ' Create the leader.\n                Dim pnts As ObjectCollection = invApp.TransientObjects.CreateObjectCollection\n                pnts.Add(invApp.TransientGeometry.CreatePoint2d(mark.Position.X + 3, mark.Position.Y + 2))\n                pnts.Add(sht.CreateGeometryIntent(mark))\n                sht.DrawingNotes.LeaderNotes.Add(pnts, name & \"<Br/>\" & vol)\n            Else\n                ' Get the position of the work point.  This is in the part space of the thank.\n                Dim wpModelPosition As Point = tankWP.Point\n\n                ' Get the transform of the tank occurence. This defines the part to assembly transform.\n                Dim tankTrans As Matrix = tankOcc.Transformation\n\n                ' Transform the point using this transform to go from part to assembly space.\n                wpModelPosition.TransformBy(tankTrans)\n\n                ' Get this point in sheet space.\n                Dim wpViewPosition As Point2d = drawView.ModelToSheetSpace(wpModelPosition)\n\n                ' Create the leader.\n                Dim pnts As ObjectCollection = invApp.TransientObjects.CreateObjectCollection\n                pnts.Add(invApp.TransientGeometry.CreatePoint2d(wpViewPosition.X + 3, wpViewPosition.Y + 2))\n                pnts.Add(wpViewPosition)\n                sht.DrawingNotes.LeaderNotes.Add(pnts, name & \"<Br/>\" & vol)\n            End If\n        End If\n    Next\nEnd Sub"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Change Sheet Format - iLogic\n                    ", "solution": ["iLogicVb.UpdateWhenDone = True\n\n'check For Parameter and create If Not found\nTry\n    'get parameter value (just to see if it exists)\n    oTest = Parameter(\"SheetSize\") \nCatch\n    ' Get the active document.  Assumes a part document is active.\n    Dim partDoc As PartDocument\n    partDoc = ThisApplication.ActiveDocument\n    \n    ' Get the UserParameters collection\n    Dim userParams As UserParameters\n    userParams = partDoc.ComponentDefinition.Parameters.UserParameters\n    \n    'create the parameter\n    oParam = userParams.AddByValue(\"SheetSize\", \"A3 Horizontal\", UnitsTypeEnum.kTextUnits)\nEnd Try\n\n'Set the list\nMultiValue.SetList(\"SheetSize\", \"A3 Horizontal\", \"A4 Vertical\", \"A1 Vertical\")\n\n'Get user input and set color\noSize = InputListBox(\"Choose a sheet size.\", _\nMultiValue.List(\"SheetSize\"), MultiValue.List(\"SheetSize\").Item(0), \"iLogic\", \"List of sheet size:\")\n\n'Set a reference to the drawing document.\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\nDim oFormat As SheetFormat\nTry\noFormat = oDrawDoc.SheetFormats.Item(oSize)\nCatch\nMessageBox.Show(\"Error: the named sheet format might not exist.\", \"iLogic\")\nReturn\nEnd Try\nDim oSheet As Sheet\noSheet = oDrawDoc.Sheets.AddUsingSheetFormat(oFormat)\n \n\nDim sSheetToDelete As String\nsSheetToDelete = \"Sheet:1\"\noSheet = ThisApplication.ActiveDocument.Sheets.Item(sSheetToDelete)\noSheet.Delete\n\n", "If oFormat.HasDrawingViews Then        ", "'Open the model document invisible        ", "     Dim oModel As Document        ", "     Set oModel = ThisApplication.Documents.Open(\"C:\\temp\\block.ipt\", False)             ", "'Create a new sheet based on the sheet format        ", "     Set oSheet = oDrawDoc.Sheets.AddUsingSheetFormat(oFormat, oModel)    ", "Else        ", "     Set oSheet = oDrawDoc.Sheets.AddUsingSheetFormat(oFormat)    ", "End If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Using add-in to import Application Options XML?\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Closing file using iLogic causes .Net error\n                    ", "solution": ["sFile = ThisDoc.PathAndFileName(True)\nTry\n\tMy.Computer.FileSystem.DeleteFile(sFile)\nCatch\n\tMessageBox.Show(sFile & vbLf & \"    . . . can not delete file, or file not found.\", \"iLogic\")\nEnd Try", "Public Sub DeleteActiveDocument()\n    Dim bAnswer As VbMsgBoxResult\n    If ThisApplication.ActiveDocument.DocumentType = kPartDocumentObject Then\n        bAnswer = MsgBox(\"Do you really want to delete this document?\", vbYesNo, \"Document delete?\")\n        If bAnswer = vbYes Then\n            Call RuniLogic(\"C:\\0_INVENTOR\\0_SETTINGS\\RULES\\DELETE_EXISTING_PART_DOCUMENT.txt\")\n            ThisApplication.ActiveDocument.Close (True)\n        Else\n            Exit Sub\n        End If\n    Else\n        bAnswer = MsgBox(\"Document must be a PART!\", vbOKOnly, \"Error!\")\n    End If\n    \nEnd Sub", "Public Sub RuniLogic(ByVal sRuleName As String)\n    \n    Dim iLogicAuto As Object\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    If oDoc Is Nothing Then\n        MsgBox \"Missing Inventor Document!\"\n        Exit Sub\n    End If\n    \n    Set iLogicAuto = GetiLogicAddin(ThisApplication)\n    If (iLogicAuto Is Nothing) Then Exit Sub\n    iLogicAuto.runexternalrule oDoc, sRuleName\n    \nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: References not being held to selected objects in macros\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Round Dimensions-Table Parameter\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Inventor API support for 3d Annotations\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: IntersectWithSurface method\n                    ", "solution": [], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: iLogic Event Triggers missing tabs\n                    ", "solution": [], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: iLogic weird reaction\n                    ", "solution": [], "author": "kevin_hamel"},
{"created at": [], "solution Title": "\n                        Re: Always_pair value - parameter\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to save as and rename an assembly and all components\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Copy part of \"part name\" to \"description\" iProperties wi\n                    ", "solution": ["\u00a0Sub Main()    \n    ' Get the active document.\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n\n    ' Get the PropertySets object.\n    Dim oPropSets As PropertySets\n    Set oPropSets = oDoc.PropertySets\n\n    ' Get the design tracking property set.\n    Dim oPropSet As PropertySet\n    Set oPropSet = oPropSets.Item(\"Design Tracking Properties\")\n\n    ' Get the part number iProperty.\n    Dim oPartNum_iProp As Property\n    Set oPartNum_iProp = oPropSet.Item(\"Part Number\")\n   \n    ' Get the description iProperty.\n    Dim oDesc_iProp As Property\n    Set oDesc_iProp = oPropSet.Item(\"Description\")\n   \n    ' Copy part number to description\n    SavedString = Split(oPartNum_iProp.Value, \" \")", "    oDesc_iProp.Value = Trim(Replace(oPartNum_iProp.Value, SavedString(0), \"\"))", "    oPartNum_iProp.Value = SavedString(0)", "\n End Sub"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Access to the Path for iLogic rules (external): Denied\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic to set iProperty date to blank field\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Is possible to get unique id for dimensions in drawing\n                    ", "solution": ["Dim key1() As Byte\nDim key2() As Byte\n\nDim k As Long\nk = dwgdoc.ReferenceKeyManager.CreateKeyContext\n\nCall sh.DrawingDimensions(1).GetReferenceKey(key1, k)\nCall sh.DrawingDimensions(2).GetReferenceKey(key2, k)\n\nDim i As Integer\n\nFor i = 1 To 61\nDebug.Print (key1(i)) & \" : \" & (key2(i))\nNext i"], "author": "omartin"},
{"created at": [], "solution Title": "\n                        Re: Editing Feature Control Frama via iLogic\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Application Options - Use Styles Library\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Displaying and updating correct browser nodes\n                    ", "solution": [], "author": "mrawesomelemons"},
{"created at": [], "solution Title": "\n                        Re: Inventor Fatal API ERROR, in custom data iProperty.\n                    ", "solution": [], "author": "kbo"},
{"created at": [], "solution Title": "\n                        Re: Inventor Cannot Delete Customize User Command Macros\n                    ", "solution": [], "author": "kelly.young"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Did SaveAs fails in 2019\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Automatic dimensioning of arcs VBA\n                    ", "solution": ["Set int1 = dwg.ActiveSheet.CreateGeometryIntent(crv, PointIntentEnum.kMidPointIntent)", "Set int2 = dwg.ActiveSheet.CreateGeometryIntent(arc, PointIntentEnum.kMidPointIntent)"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Which is the sketch of the sketched part feature?\n                    ", "solution": ["Dim", " ", "doc", " ", "As", " ", "PartDocument", " = ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "revolves", " = ", "doc", ".", "ComponentDefinition", ".", "Features", ".", "RevolveFeatures", "\n", "Dim", " ", "revolve", " ", "As", " ", "RevolveFeature", " = ", "revolves", ".", "Item", "(", "\"Revolution1\"", ")\n", "Dim", " ", "revolveSketch", " = ", "revolve", ".", "Profile", ".", "Parent", "\n", "MsgBox", "(", "revolveSketch", ".", "Name", ")"], "author": "jhoel.forshav"},
{"created at": ["\u200e03-06-2019 09:15 AM"], "solution Title": "\n                        Re: Position Section Line Sketch in Parent View Using iLogic\n                    ", "solution": ["\tDim oDoc As DrawingDocument = ThisApplication.ActiveDocument\n\tDim oSheet As Sheet = oDoc.ActiveSheet\n\t' Get the view the section views are being created from\n\tDim oView As DrawingView = ActiveSheet.View(\"FRONT VIEW\").View \n\t' Set a reference to the transient geometry object.\n\tDim oTG As TransientGeometry = ThisApplication.TransientGeometry\n\tDim oSketch As DrawingSketch\n\tDim line As SketchLine\n\tDim vertLinePoint As Double = oView.Height / oView.Scale / 2 + 2\n\tDim horzLinePoint As Double = oView.Width / oView.Scale / 2 + 2\n\n\tFor Each oSketch In oView.Sketches\n\t\tSelect Case oSketch.Name \n\t\t\tCase \"vert\"\n\t\t\t\t' Open the sketch for edit.\n\t\t\t\toSketch.Edit\n\t\t\t\t' delete all lines in sketch\n\t\t\t\tFor Each line In oSketch.SketchLines\n\t\t\t\t\tline.Delete\n\t\t\t\tNext\n\t\t\t\t' redraw line in the sketch to move section view\n\t\t\t\tCall oSketch.SketchLines.AddByTwoPoints(oTG.CreatePoint2d(0, vertLinePoint), oTG.CreatePoint2d(0, -vertLinePoint))\n\t\t\t\t' Exit from editing the sketch.\n\t\t\t\toSketch.ExitEdit\n\t\t\tCase \"horz\" \n\t\t\t\t' Open the sketch for edit.\n\t\t\t\toSketch.Edit\n\t\t\t\t' delete all lines in sketch\n\t\t\t\tFor Each line In oSketch.SketchLines\n\t\t\t\t\tline.Delete\n\t\t\t\tNext\n\t\t\t\t' redraw line in the sketch to move section view\n\t\t\t\tCall oSketch.SketchLines.AddByTwoPoints(oTG.CreatePoint2d(horzLinePoint, 0), oTG.CreatePoint2d(-horzLinePoint, 0))\n\t\t\t\t' Exit from editing the sketch.\n\t\t\t\toSketch.ExitEdit\n\t\tEnd Select\n\tNext"], "author": "insomnix"},
{"created at": [], "solution Title": "\n                        Re: Ilogic rule to retrieve parameters and bypass if not exist.\n                    ", "solution": ["On Error Resume Next\nDim pSuggestedVendor \npSuggestedVendor = iProperties.Value(\"Custom\", \"SuggestedVendor\")\n\nIf Err.Number <> 0 Then\n\tpSuggestedVendor = Isempty\n\tErr.Clear \nEnd If\n\nOn Error GoTo 0"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Create DetailView Using iLogic/VBA, Selecting View Center by Attribute Name\n                    ", "solution": ["    Dim aoEdge As Face\n    Set oObjs = oPartDoc.AttributeManager.FindObjects(\"HINGE_HOLE_TOP\", \"DIM\", \"1\")\n    Set aoEdge = oObjs.Item(1)\n\n    Dim aoDrawCurves As DrawingCurve\n    Set oDrawViewCurves = oDrawingView.DrawingCurves(aoEdge.Edges(1))\n    Set aoDrawCurves = oDrawViewCurves.Item(1)\n    \n    Dim centerPoint As Point2d\n    Set centerPoint = aoDrawCurves.centerPoint"], "author": "insomnix"},
{"created at": [], "solution Title": "\n                        Re: Create drawing list from top level assembly\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: How Export multiple Selected Sheets in single PDF using C# Add in\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Round off to no decimals without comma\n                    ", "solution": [], "author": "marcin_otr\u0119ba"},
{"created at": [], "solution Title": "\n                        Re: Macro for creating a sweep from existing sketches Fails\n                    ", "solution": ["Public Sub CreateSweepYBC()\n   \n    'get active document\n    Dim PartDoc As PartDocument\n    Set PartDoc = ThisApplication.ActiveDocument\n    \n    'get component definition collection object of active part\n    Dim PartDef As PartComponentDefinition\n    Set PartDef = PartDoc.ComponentDefinition\n    \n    'get features object\n    Dim oFeatures As Object\n    Set oFeatures = PartDef.Features\n    \n    'get user parameters collection object\n    Dim oUserParams As UserParameters\n    Set oUserParams = PartDef.Parameters.UserParameters\n    \n    'SetEndOfPart Argument to desired parameter\n    'staggered bc of sketch order\n    Dim NumBends As Integer\n    NumBends = oUserParams.Item(\"NumBends\").Value + 2\n               \n    'Move EOP\n    PartDef.Sketches.Item(NumBends).SetEndOfPart (True)\n    \n     'find sketchcurve object to set as argument for create path\n    Dim swCurve As SketchLine\n    Set swCurve = PartDef.Sketches.Item(2).SketchLines.Item(1)\n    \n    'using first bend sketch to create path, all sketches before EOP should be included (in theory)\n    Dim oPath As Path\n    Set oPath = oFeatures.CreatePath(swCurve)\n        \n    'setting the end of tube sketch as the sweep profile\n    'selects the area between the two concentric circles with a boolean [combine = true]\n    Dim oProfile As Profile\n    Set oProfile = PartDef.Sketches.Item(1).Profiles.AddForSolid(True)\n          \n    'Create the sweep\n    Dim oSweep As SweepFeature\n    Set oSweep = oFeatures.SweepFeatures.AddUsingPath(oProfile, oPath, kJoinOperation)\n\nEnd Sub"], "author": "dmora"},
{"created at": [], "solution Title": "\n                        Re: How to use a wildcard to a occurrence name with ilogic?\n                    ", "solution": ["'Some quick error handling:\nIf Not ThisDoc.Document.DocumentType = kAssemblyDocumentObject Then\n\tMessageBox.Show(\"Whoops! This only works on assembly documents.\", \"ERROR\", MessageBoxButtons.OK, MessageBoxIcon.Hand)\n\tReturn\nEnd If\n\nDim oDoc As AssemblyDocument = TryCast(ThisDoc.Document, AssemblyDocument)\nDim compDef As AssemblyComponentDefinition = oDoc.ComponentDefinition\n\nFor Each oComp In compDef.Occurrences 'Loops through each component in the assembly\n\tIf oComp.Definition.Document.DocumentType = kPartDocumentObject Then 'Filters to check only part documents\n\t\tFor Each oConstraint In oComp.Constraints 'Loops through the constraints attached to the part\n\t\t\tIf oConstraint.Name = \"VERTICAL\" Or oConstraint.Name = \"LEFT\" Or oConstraint.Name = \"RIGHT\" Then 'Filters to constraints for which we're looking\n\t\t\t\tMessageBox.Show(oComp.Name & \": \" & oConstraint.Name)\n\t\t\t\t'This just announces the name of the component found with the constraint we are looking for. Replace this with your code\n\t\t\tEnd If\n\t\tNext\n\tEnd If\nNext"], "author": "richard.joseph."},
{"created at": [], "solution Title": "\n                        Re: NuGet Package Reference While Debugging Add-In\n                    ", "solution": ["XCopy \"$(TargetPath)\" \"%AppData%\\Autodesk\\ApplicationPlugins\\$(TargetName)\\\" /Y /R", "XCopy \"$(TargetDir)\" \"%AppData%\\Autodesk\\ApplicationPlugins\\$(TargetName)\\\" /Y /R"], "author": "richard.joseph."},
{"created at": [], "solution Title": "\n                        Re: Assembly Browser selected constraint refers to feature\n                    ", "solution": ["Sub GetConstraintRefFeatureInfo()\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oConstraint As AssemblyConstraint\n    Set oConstraint = oDoc.SelectSet(1)\n    oDoc.SelectSet.Clear\n    \n    Debug.Print \"The constraint: \" & oConstraint.Name\n    Debug.Print \"The 1st referenced feature is: \" & oConstraint.OccurrenceOne.Name & \"->\" & GetRefFeatureName(oConstraint.EntityOne, oDoc)\n    Debug.Print \"The 2nd referenced feature is: \" & oConstraint.OccurrenceTwo.Name & \"->\" & GetRefFeatureName(oConstraint.EntityTwo, oDoc)\nEnd Sub\n\nFunction GetRefFeatureName(oEntityProxy As Object, oTopDoc As AssemblyDocument) As String\n    Dim oNativeFeature As PartFeature\n    Dim oOccu As ComponentOccurrence\n    \n    If oEntityProxy.Type = kFaceProxyObject Or _\n        oEntityProxy.Type = kEdgeProxyObject Then\n        Set oOccu = oEntityProxy.ContainingOccurrence\n        Set oNativeFeature = oEntityProxy.NativeObject.CreatedByFeature\n        \n        Call HighlightFeatureInTopDoc(oNativeFeature, oTopDoc, oOccu)\n        \n        GetRefFeatureName = oNativeFeature.Name\n    End If\nEnd Function\n\nSub HighlightFeatureInTopDoc(oFeature As PartFeature, oDoc As AssemblyDocument, oOccu As ComponentOccurrence)\n    Dim oFeaProxy As PartFeature\n    \n    \n    Dim bStop As Boolean\n    bStop = False\n    \n    Do\n        oOccu.CreateGeometryProxy oFeature, oFeaProxy\n        Set oFeature = oFeaProxy\n        If oOccu.ParentOccurrence Is Nothing Then\n            bStop = True\n        Else\n            Set oOccu = oOccu.ParentOccurrence\n        End If\n    Loop Until bStop\n    \n    oDoc.SelectSet.Select oFeaProxy\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Run Inventor View instead normal Inventor\n                    ", "solution": ["            ApprenticeServerComponent oApp = null;\n            oApp = new ApprenticeServerComponentClass();\n\n            ApprenticeServerDocument oDoc = null;\n            string strFile = @\"C:\\TEMP\\MyData.ipt\";\n            oDoc = oApp.Open(strFile );\n\n            ClientViews oClientViews = oDoc.ClientViews;\n \n            IntPtr ptrHandle = this.pictureBox1.Handle;\n            int intHandle = ptrHandle.ToInt32();\n            ClientView oClientView = oClientViews.Add(intHandle);\n\n            Camera oCam = oClientView.Camera;\n            oCam.Fit();\n            oCam.Apply();\n            oClientView.Update(true);"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: ILogic vs API Model Property access via Drawing\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: create iLogic mate using iMate\n                    ", "solution": [], "author": "jzcrouse"},
{"created at": [], "solution Title": "\n                        Re: How to create libraries file .idcl to .ipt files by batch  method?\n                    ", "solution": ["Public Sub GetFromContentCenter()\n   \n    Dim headHeadNode As ContentTreeViewNode\n    Set headHeadNode = ThisApplication.ContentCenter.TreeViewTopNode\n    \n    Call FoundAllNodes(headHeadNode)\n    \nEnd Sub\n\nFunction FoundAllNodes(hexHeadNode As ContentTreeViewNode)\n        Dim oNode As ContentTreeViewNode\n        If hexHeadNode.Families.Count > 0 Then\n                    Dim i As LongLong\n                    i = 1\n                    \n                    Dim family As ContentFamily\n                    Dim checkFamily As ContentFamily\n                    For Each checkFamily In hexHeadNode.Families\n'\n'                            If checkFamily.LibraryName = \"AI2019_Inventor Routed Systems\" Then\n'                                Set family = checkFamily\n'                            End If\n                        \n                        If Not family Is Nothing Then\n                                ' Create the member (part file) from the table.\n                                Dim failureReason As MemberManagerErrorsEnum\n                                Dim failureMessage As String\n                                Dim memberFilename As String\n                                \n                                Dim kRow As LongLong\n                                For kRow = 1 To family.TableRows.Count\n                                    memberFilename = family.CreateMember(family.TableRows.Item(kRow), failureReason, failureMessage, kRefreshOutOfDateParts)\n                                Next\n                    End If\n                    Next\n        End If\n        If hexHeadNode.ChildNodes.Count > 0 Then\n            For Each oNode In hexHeadNode.ChildNodes\n                FoundAllNodes oNode\n            Next\n        End If\nEnd Function"], "author": "Xun.Zhang"},
{"created at": [], "solution Title": "\n                        Re: Ilogic PDF export showing rasterized view after model update\n                    ", "solution": [], "author": "AlexanderVokes"},
{"created at": [], "solution Title": "\n                        Re: Boundary patch with guide rails using VBA (API)\n                    ", "solution": ["Sub CreateBPWithGuiderail()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSk1 As PlanarSketch, oSk2 As PlanarSketch\n    Set oSk1 = oDoc.ComponentDefinition.Sketches(1)\n    Set oSk2 = oDoc.ComponentDefinition.Sketches(2)\n    \n    Dim oProfile1 As Profile\n    Set oProfile1 = oSk1.Profiles.AddForSurface\n    \n    Dim oBPDef1 As BoundaryPatchDefinition\n    Dim oBP1 As BoundaryPatchFeature\n    \n    Set oBPDef1 = oDoc.ComponentDefinition.Features.BoundaryPatchFeatures.CreateBoundaryPatchDefinition\n    oBPDef1.BoundaryPatchLoops.Add oProfile1\n    Set oBP1 = oDoc.ComponentDefinition.Features.BoundaryPatchFeatures.Add(oBPDef1)\n    \n    Dim oBPDef2 As BoundaryPatchDefinition\n    Dim oBP2 As BoundaryPatchFeature\n    Dim oGuideRails As ObjectCollection\n    \n    Set oBPDef2 = oDoc.ComponentDefinition.Features.BoundaryPatchFeatures.CreateBoundaryPatchDefinition\n    oBPDef2.BoundaryPatchLoops.Add oBP1.Faces(1).EdgeLoops(1)\n    Set oGuideRails = ThisApplication.TransientObjects.CreateObjectCollection\n    Set oPath = oDoc.ComponentDefinition.Features.CreatePath(oSk2.SketchControlPointSplines(1))\n    \n    oGuideRails.Add oSk2.SketchArcs(1)\n    oGuideRails.Add oSk2.SketchControlPointSplines(1)\n    oBPDef2.GuideRails = oGuideRails\n    \n    Set oBP2 = oDoc.ComponentDefinition.Features.BoundaryPatchFeatures.Add(oBPDef2)\n    \nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Unable to found documentation for c#\n                    ", "solution": [], "author": "richard.joseph."},
{"created at": [], "solution Title": "\n                        Re: Drawing View - Model State - Line Style - Api\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: How to make a trim between two surfaces with VBA?\n                    ", "solution": [], "author": "andresmpajaro"},
{"created at": [], "solution Title": "\n                        Re: Suppress a linked parameter in a part\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: How to make a trim between surfaces with VBA for Inventor?\n                    ", "solution": [" Dim oDoc As PartDocument\n        oDoc = _invApp.ActiveDocument\n        If Me.CheckBoxCreateSolid.Checked = False Then\n            Dim oCutTool As WorkSurface\n            ' Get the work surface from the cylinder extrusion\n            oCutTool = oDoc.ComponentDefinition.WorkSurfaces(3)\n\n            Dim oSplit As SplitFeature\n            Dim oFacesToSplit As ObjectCollection\n            oFacesToSplit = _invApp.TransientObjects.CreateObjectCollection\n\n            Dim oFace As Face\n            For Each oFace In oBP2.Faces\n                oFacesToSplit.Add(oFace)\n            Next\n\n            oSplit = oDoc.ComponentDefinition.Features.SplitFeatures.SplitFaces(oCutTool, False, oFacesToSplit)\n\n            Dim oFacesToDelete As FaceCollection\n            oFacesToDelete = _invApp.TransientObjects.CreateFaceCollection\n\n            ' judge which faces should be deleted.\n            Dim oCylinder As Cylinder\n            oCylinder = oCutTool.SurfaceBodies(1).Faces(1).Geometry\n\n            Dim oLine As Line\n            oLine = _invApp.TransientGeometry.CreateLine(oCylinder.BasePoint, oCylinder.AxisVector.AsVector)\n\n            For Each oFace In oSplit.Faces\n                Dim oPt As Point\n                oPt = oFace.PointOnFace\n\n                Dim dDist As Double\n                dDist = _invApp.MeasureTools.GetMinimumDistance(oPt, oCylinder, InferredTypeEnum.kInferredPoint, InferredTypeEnum.kInferredLine)\n\n                If dDist < oCylinder.Radius Then\n                    oFacesToDelete.Add(oFace)\n                End If"], "author": "andresmpajaro"},
{"created at": [], "solution Title": "\n                        Re: Drawing- parts quantity. iLogic\n                    ", "solution": ["' Set a reference to the drawing document.\n' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\nDim oPartList As PartsList\n'''---------------------\n'The next line is if you have more than one parts list on your drawing.\noPRTL = InputBox(\"Choose the Parts List\", \"Parts List Filter\", \"1\")\n'''---------------------\n'define custom property collection\noCustomPropertySet = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\")\nTry\n'set property value\noProp = oCustomPropertySet.Item(\"ASSQTY\")\nCatch\n' Assume error means not found so create it\noCustomPropertySet.Add(\"\", \"ASSQTY\")\nEnd Try\n'''-----------------------\n\n' Set a reference to the first parts list on the active sheet.\n'expand the parts list\noPartList = oDrawDoc.ActiveSheet.PartsLists.Item(oPRTL)\noPartList.Style = oDrawDoc.StylesManager.PartsListStyles.Item(\"Parts List\")\noASSQTY = InputBox(\"Enter Quantity of Assemblies Required\", \"iLogic\",iProperties.Value(\"Custom\", \"ASSQTY\") )\niProperties.Value(\"Custom\", \"ASSQTY\") = oASSQTY\n' Iterate through the contents of the parts list.\nDim i As Long\nFor i = 1 To oPartList.PartsListRows.Count\n", "oCell = oPartList.PartsListRows.Item(i).Item(\"ASS\")", "\n'write to the target cell\noCell.Value = iProperties.Value(\"Custom\", \"ASSQTY\")\nNext \nMessageBox.Show(\"All Done\", \"BOM QTY\")"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Betreff: ilogic for creating flat pattern for sheet metal assembly.\n                    ", "solution": ["'define the active document as an assembly file\nDim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument\noAsmName = Left(oAsmDoc.DisplayName, Len(oAsmDoc.DisplayName) -4)\n'check that the active document is an assembly file\nIf ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\nMessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\nExit Sub\nEnd If\n'get user input\nRUsure = MessageBox.Show ( _\n\"This will create a DXF file for all of the asembly components that are sheet metal.\" _\n& vbLf & \"This rule expects that the part file is saved.\" _\n& vbLf & \" \" _\n& vbLf & \"Are you sure you want to create DXF for all of the assembly components?\" _\n& vbLf & \"This could take a while.\", \"iLogic - Batch Output DXFs \",MessageBoxButtons.YesNo)\nIf RUsure = vbNo Then\nReturn\nElse\nEnd If\noPath = ThisDoc.Path\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n'get DXF target folder path\noFolder = oPath & \"\\\" & oAsmName & \" DXF Files\"\n'Check for the DXF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\nSystem.IO.Directory.CreateDirectory(oFolder)\nEnd If\n'- - - - - - - - - - - - -\n'- - - - - - - - - - - - -Component - - - - - - - - - - - -\n'look at the files referenced by the assembly\nDim oRefDocs As DocumentsEnumerator\noRefDocs = oAsmDoc.AllReferencedDocuments\nDim oRefDoc As Document\n'work the the drawing files for the referenced models\n'this expects that the model has been saved\nFor Each oRefDoc In oRefDocs\niptPathName = Left(oRefDoc.FullDocumentName, Len(oRefDoc.FullDocumentName) - 3) & \"ipt\"\n'check that model is saved\nIf(System.IO.File.Exists(iptPathName)) Then\nDim oDrawDoc As PartDocument\noDrawDoc = ThisApplication.Documents.Open(iptPathName, True)\noFileName = Left(oRefDoc.DisplayName, Len(oRefDoc.DisplayName))\nTry\n'Set the DXF target file name\n\nTry\nCustomName =iProperties.Value(oFileName, \"Custom\", \"PF_PRT_ZNR\")\nCatch\nCustomName =\"XXX\" 'Wert, wenn iPropertie PF_PRT_ZNR nicht existiert\nEnd Try\n\noDataMedium.FileName = oFolder & \"\\\" & CustomName  & \" \" & oFileName & \".dxf\"\n\nDim oCompDef As SheetMetalComponentDefinition\noCompDef = oDrawDoc.ComponentDefinition\nIf oCompDef.HasFlatPattern = False Then\noCompDef.Unfold\nElse\noCompDef.FlatPattern.Edit\nEnd If\nDim sOut As String\nsOut = \"FLAT PATTERN DXF?AcadVersion=2004&OuterProfileLayer=IV_OUTER_PR\u200bOFILE\"\noCompDef.DataIO.WriteDataToFile( sOut, oDataMedium.FileName)\n'just for check its works coretcly\n'i=MessageBox.Show(oDataMedium.FileName, \"Title\",MessageBoxButtons.OKCancel)\n'MessageBox.Show(i,\"title\",MessageBoxButtons.OK)\n'If i=2 Then\n'Exit Sub\n'End If\noCompDef.FlatPattern.ExitEdit\nCatch\nEnd Try\noDrawDoc.Close\nElse\nEnd If\nNext"], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: Popup button menu that doesn't show the show last button selected\n                    ", "solution": ["CommandControl control7 = panel.CommandControls.AddSplitButton(_buttonDef1, buttonDefs, true, true, \"ORDERFOX:CmdCategory:Home\", true);"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Parts list in a drawing. How to merge two parts and manipulate the quantity\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Save and Replace Component, with and custom iprop that is the old file numbe\n                    ", "solution": ["Sub Main ()\nInvDoc = ThisDoc.Document\n\n Dim refDocs As DocumentsEnumerator = InvDoc.AllReferencedDocuments\n\n Dim refDoc As Document\n\n \n\n For Each refDoc In refDocs\nMsgBox(refDoc.FullFileName)\n\nDim x As String\nx = refDoc.FullFileName\nDim path As String\n'MsgBox (Replace(refDoc.FullFileName,refDoc.displayname,\"\"))\n\n 'MessageBox.show(refDoc.DisplayName)\n\nIf refDoc.DisplayName = \"shell:1\" Then\npath = (Replace(refDoc.FullFileName,refDoc.displayname,\"\"))\n'This will find only \"shell:1\" and execute all the following code.  \n\n'If the refDoc.DisplayName is not \"Shell:1\" it'll jump to the red \"End If\" and proceed to check the next component.\n\n \n\n 'input box to enter new file name\n\n NewFileName = InputBox(\"What is the new file name for \" & refDoc.DisplayName & \"?\", \"New File Name\", refDoc.DisplayName)\n\n 'NewFileName = InputBox(\"What is the new file name for \" & refDoc.DisplayName & \"?\", \"New File Name\", iProperties.Value(refDoc.DisplayName, \"Project\", \"Part Number\"))\n\n   \n\n     'if the new file name is blank then use the same name\n\n     If NewFileName = \"\" Then\n\n         NewFileName = refDoc.DisplayName\n\n     End If\n\n   \n\n     'if the user also types in the extesion then remove the extension.\n\n     If NewFileName.EndsWith(\".ipt\") = True Then\n\n         NewFileName = NewFileName.substring(0,NewFileName.length-4)\n\n         'MessageBox.show(NewFileName)\n\n     End If\n\n   \n\n     'if there is a change in the name then do the following.\n\n     If refDoc.DisplayName <> NewFileName & \".ipt\" Then\n\n         'check to see the file already exist. if it does then replace.\n\n         If System.IO.File.Exists(path & NewFileName & \".ipt\") Then\n\n             Component.Replace(refDoc.DisplayName, path & NewFileName & \".ipt\", True)\n\n         Else\n\n             Dim oldName As String = refDoc.DisplayName\n\n             'if it does not exist then recreate the file\n\n             refDoc.saveas(path & NewFileName & \".ipt\",False)\n\n             Call UpdateDrawing(path, oldName, NewFileName)\n\n         End If\n\n       \n\n         FileChange = True\n\n     End If\n\n   End If\n\n Next\n\n \n\n'Not sure if you need any of the following as it appears to be building new sub-assemblies - and you are only replacing a part.\n\n'If you don't need it, comment it out using a  '  at the beginning of each line.\n\n \n\n' If FileChange = True Then\n\n'     NewAssemblyName = InputBox(\"What is the new file name for the assembly?\", \"New Assembly File Name\",iProperties.Value(\"Project\", \"Part Number\"))\n\n   \n\n'     If NewAssemblyName <> \"\" Then\n\n'         Dim oldName As String = ThisDoc.FileName(True) 'include extension\n\n'         ThisDoc.Document.SaveAs(Path & NewAssemblyName & \".iam\" , False)\n\n'         Call UpdateDrawing(Path, oldName, NewAssemblyName)\n\n'     End If\n\n' End If\n\n \n\n iLogicVb.UpdateWhenDone = True\n\n \n\n End Sub 'I'm not sure about this line.  \n\n'It could exit the iLogic code at this point.  I've only ever used it to end a sub-routine, but none has been defined.  \n\n'Someone who understands code better than me will tell you what it does!\n\n \n\n'And this next part is to do with Drawings?  Again, you can probably ditch this too.\n\n \n\n Private Sub UpdateDrawing (ByVal Path As String, ByVal oldName As String, ByVal newName As String)\n\n     Dim oDestinationDoc As DrawingDocument\n\n     Dim strFileExtension As String = oldName.Substring(oldName.Length-4,4)\n\n     oldName = oldName.Substring(0,oldName.Length-4)\n\n     Dim sFileName As String = Path & oldName & \".idw\"\n\n   \n\n     Try\n\n         If System.IO.File.Exists(sFileName) Then\n\n             oDestinationDoc = ThisApplication.Documents.Open(sFileName)\n\n             oDestinationDoc.SaveAs(Path & newName & \".idw\",False)\n\n             Dim oDocDescriptor As DocumentDescriptor\n\n             oDocDescriptor = oDestinationDoc.ReferencedDocumentDescriptors.Item(1)\n\n   \n\n             Dim oFileDescriptor As FileDescriptor\n\n             oFileDescriptor = oDocDescriptor.ReferencedFileDescriptor\n\n           \n\n             oFileDescriptor.ReplaceReference(Path & newName & strFileExtension)\n\n             oDestinationDoc.Update()\n\n             oDestinationDoc.Close\n\n         End If\n\n     Catch\n\n         oDestinationDoc.Close\n\n         MessageBox.Show(\"error\")\n\n     End Try\n\n \n\n End Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Ignore error on Transaction Abort\n                    ", "solution": ["oTxn", "=", "ThisApplication", ".", "TransactionManager", ".", "StartTransaction", "(", "ThisApplication", ".", "ActiveDocument", ",", "\"", "Add Component", "\"", ")", "\n", "On", " ", "Error", " ", "Goto", " ", "Abort", "'Bulk of Code", "oTxn.End", "Goto EndRule", "Abort:oTxn.Abort", "EndRule:"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Problem with RectangularPatternFeature\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Icon not showing 3D part view in open center.\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Why won't this simple iLogic code work for Content Center part??\n                    ", "solution": ["If iProperties.Value(\"Summary\", \"Category\") = ", "\"FASTENERS\"", " Then\nMessageBox.Show(\"This is a FASTENER\", \"M,P,S\") \nElse\nMessageBox.Show(\"I don't know what to do\", \"M,P,S\")\nEnd If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: I am trying to add iproperties and parameters to a part through ilogic\n                    ", "solution": [], "author": "dbatiste"},
{"created at": [], "solution Title": "\n                        Re: Help. intersection point between an sketch and a WorkPlane with VBA?\n                    ", "solution": ["Dim newWP As WorkPoint\nSet newWP = partDoc.ComponentDefinition.WorkPoints.AddByCurveAndEntity(skLine, wp)\nDim coord as Point\nSet coord = newWP.Point\nMsgBox coord.X & \", \" & coord.Y & \", \" & coord.Z", "Public Sub SketchPlaneIntersection()\n    Dim sketchCurve As SketchEntity\n    Set sketchCurve = ThisApplication.CommandManager.Pick(kSketchCurveFilter, \"Select sketch entity.\")\n    Dim sl As SketchLine\n    Dim wp As WorkPlane\n    Set wp = ThisApplication.CommandManager.Pick(kWorkPlaneFilter, \"Select work plane.\")\n    \n    Dim results As ObjectsEnumerator\n    Set results = ThisApplication.TransientGeometry.CurveSurfaceIntersection(sketchCurve.Geometry3d, wp.plane)\n    \n    If results Is Nothing Then\n        MsgBox \"No intersection was found.\"\n    Else\n        Dim i As Integer\n        For i = 1 To results.Count\n            MsgBox \"Intersection \" & i & \": \" & results.Item(i).X & \", \" & _\n                                                results.Item(i).Y & \", \" & _\n                                                results.Item(i).Z\n        Next\n    End If\nEnd Sub"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: ilogic rule to add weight to two decimal places\n                    ", "solution": ["Public Sub RoundMass()\n\nDim oInvDoc As Document\nSet oInvDoc = ThisApplication.ActiveDocument\n\nDim oInvDocInvDsgnTrcPrpPropSet   As PropertySet\nSet oInvDocInvDsgnTrcPrpPropSet = oInvDoc.PropertySets.Item(\"Design Tracking Properties\")\n\nDim oInvDocInvDsgnTrcPrpMassPropset As Property\nSet oInvDocInvDsgnTrcPrpMassPropset = oInvDocInvDsgnTrcPrpPropSet.Item(\"Mass\")\n'MsgBox oInvDocInvDsgnTrcPrpMassPropset.Value\n\nDim a As String\na = Round(oInvDocInvDsgnTrcPrpMassPropset.Value / 1000, 2)\n\nMsgBox a\n\nEnd Sub", "Public Sub Main()\n\nDim oInvDoc As Document\noInvDoc = ThisApplication.ActiveDocument\n\nDim oInvDocInvDsgnTrcPrpPropSet   As PropertySet\noInvDocInvDsgnTrcPrpPropSet = oInvDoc.PropertySets.Item(\"Design Tracking Properties\")\n\nDim oInvDocInvDsgnTrcPrpMassPropset As Inventor.Property\noInvDocInvDsgnTrcPrpMassPropset = oInvDocInvDsgnTrcPrpPropSet.Item(\"Mass\")\n'MsgBox oInvDocInvDsgnTrcPrpMassPropset.Value\n\nDim a As String\na = Round(oInvDocInvDsgnTrcPrpMassPropset.Value / 1000, 2)\n\nMsgBox (a)\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Merge parts in BOM\n                    ", "solution": ["Sub Main()", "\u00a0\u00a0\u00a0 Dim oDoc As DrawingDocument", "\u00a0\u00a0\u00a0 Set oDoc = ThisApplication.ActiveDocument", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim oSheet As Sheet", "\u00a0\u00a0\u00a0 Set oSheet = oDoc.ActiveSheet", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim oPartsList As PartsList", "\u00a0\u00a0\u00a0 Set oPartsList = oSheet.PartsLists.Item(1)", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 ", "Dim name_A As String", "\u00a0\u00a0\u00a0 name_A = \"Part A.ipt\"", "\u00a0\u00a0\u00a0 Dim name_B As String", "\u00a0\u00a0\u00a0 name_B = \"Part B.ipt\"", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim oRowPartA As PartsListRow", "\u00a0\u00a0\u00a0 Dim oRowPartB As PartsListRow", "\u00a0\u00a0\u00a0 Dim oRow As PartsListRow", "\u00a0\u00a0\u00a0 Dim sQtypartA As Integer", "\u00a0\u00a0\u00a0 sQtypartA = 0", "\u00a0\u00a0\u00a0 Dim sQtypartB As Integer", "\u00a0\u00a0\u00a0 sQtypartB = 0", "\u00a0\u00a0\u00a0 Dim sNewQty\u00a0 As Integer", "\u00a0\u00a0\u00a0 sNewQty = 0", "\u00a0\u00a0\u00a0 For Each oRow In oPartsList.PartsListRows", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 If ", "oRow.ReferencedFiles.Item(1).DisplayName = name_A", " Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Set oRowPartA = oRow", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sQtypartA = oRowPartA.Item(\"QTY\").Value / 8", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ElseIf oRow.ReferencedFiles.Item(1).DisplayName", " = name_B Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Set oRowPartB = oRow", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sQtypartB = oRowPartB.Item(\"QTY\").Value / 8", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 End If", "\u00a0\u00a0\u00a0 Next ", "\u00a0", "\u00a0\u00a0 sNewQty = sQtypartA + sQtypartB\u00a0", "\u00a0\u00a0  ", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 If Not oRowPartA Is Nothing And Not oRowPartB Is Nothing Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oRowPartA.Item(\"QTY\").Value = 0", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oRowPartB.Item(\"QTY\").Value = sNewQty", "\u00a0\u00a0\u00a0 End If", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 If oRowPartA Is Nothing And Not oRowPartB Is Nothing Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oRowPartB.Item(\"QTY\").Value = sNewQty", "\u00a0\u00a0\u00a0 End If", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 If Not oRowPartA Is Nothing And oRowPartB Is Nothing Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oRowPartA.Item(\"QTY\").Value = sNewQty", "\u00a0\u00a0\u00a0 End If", "\u00a0\u00a0\u00a0 ", "End Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Enable \"Copy Model iProperties\"\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Occurrence in browser\n                    ", "solution": ["Public Sub main()\nDim a As Application\nSet a = ThisApplication\n\nDim b As AssemblyDocument\nSet b = a.ActiveDocument\n\nDim occ As ComponentOccurrence\n\nDim occs As ComponentOccurrences\nSet occs = b.ComponentDefinition.Occurrences\n\nFor Each occ In occs\nMsgBox occ.Name\n\nDim oa As Document\nSet oa = occ.Definition.Document\n\nocc.Name = oa.FullFileName & \"-\" & oa.PropertySets.Item(\"Inventor Summary Information\").Item(\"Title\").Value\nNext\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: How to send iProperties to all parts of Assembly and his Sub-Assemblies\n                    ", "solution": ["Sub Main\n'Gets the Active Document\noDoc = ThisDoc.Document\n\n'Saves this document\noDoc.Save\n\n'Checks if the active document is an assembly\nIf oDoc.DocumentType = kAssemblyDocumentObject\n\t'Gets the assembly occurrences\n\tDim oOccs As ComponentOccurrences\n\toOccs = oDoc.ComponentDefinition.Occurrences\n\t'Call the subprocedure to traverse the assembly\n\tCall TraverseAssembly(oOccs)\nEnd If\n\nEnd Sub\n\n'***************\nPublic Sub TraverseAssembly(oOccs As ComponentOccurrences)\n 'Integer to traverse the assembly occurrences\n Dim i As Integer\n \n ", "'For i=1 To oOccs.Count", "\n  Dim oOcc As ComponentOccurrence", "For Each oOcc in oOccs\n  ", "'oOcc = oOccs.Item(i)", "  \n \tIf oOcc.Suppressed = False\n   \n\t\t'Occurrence Name (Display Name)\n\t\toOccName = oOcc.Name\n\t\t\n\t\t'Gets the first three leters of the Occurrence Name (e.g. \"STK\")\n\t\toOccPrefix = Left(oOccName, 3)\n\t\t\n\t\tIf oOccPrefix <> \"STK\"\n\t\t\n\t\t\tTry\n\t\t\t\tiProperties.Value(oOccName, \"Project\", \"Project\") = iProperties.Value(\"Project\", \"Project\")\n\t\t\t\tiProperties.Value(oOccName, \"Project\", \"Creation Date\") = iProperties.Value(\"Project\", \"Creation Date\")\t\t\n\t\t\t\tiProperties.Value(oOccName, \"Summary\", \"Title\") = iProperties.Value(\"Summary\", \"Title\")\n\t\t\t\tiProperties.Value(oOccName, \"Summary\", \"Company\") = iProperties.Value(\"Summary\", \"Company\")\n\t\t\t\tiProperties.Value(oOccName, \"Summary\", \"Author\") = iProperties.Value(\"Summary\", \"Author\")\n\t\t\t\tiProperties.Value(oOccName, \"Custom\", \"AVT_NUMBER\") = iProperties.Value(\"Custom\", \"AVT_NUMBER\")\n\t\t\t\tiProperties.Value(oOccName, \"Custom\", \"CAR_NUMBER\") = iProperties.Value(\"Custom\", \"CAR_NUMBER\")\n\t\t\t\tiProperties.Value(oOccName, \"Custom\", \"JOB_NAME\") = iProperties.Value(\"Custom\", \"JOB_NAME\")\n\t\t\t\tiProperties.Value(oOccName, \"Custom\", \"ToPrint_AVT_NUMBER\") = iProperties.Value(\"Custom\", \"ToPrint_AVT_NUMBER\")\n\t\t\t\tiProperties.Value(oOccName, \"Custom\", \"ToPrint_CAR_NUMBER\") = iProperties.Value(\"Custom\", \"ToPrint_CAR_NUMBER\")\n\t\t\t\tiProperties.Value(oOccName, \"Custom\", \"ToPrint_JOB_NAME\") = iProperties.Value(\"Custom\", \"ToPrint_JOB_NAME\")\n\t\t\t\tiProperties.Value(oOccName, \"Custom\", \"Path_Amada\") = iProperties.Value(\"Custom\", \"Path_Amada\")\n\t\t\t\tiProperties.Value(oOccName, \"Custom\", \"Path_Laser\") = iProperties.Value(\"Custom\", \"Path_Laser\")\n\t\t\t\n\t\t\t\t\n\t\t\tCatch\n\t\t\t\t'It won't be able to change Read-Only parts (e.g. Content Center)\n\t\t\t\t'MessageBox.Show(\"This is a content center file: \" & oOcc.Name, \"Title\")\n\t\t\tEnd Try\n\t\tEnd If\n\n\t\tIf oOcc.DefinitionDocumentType = kAssemblyDocumentObject\n\t\t\tCall TraverseAssembly(oOcc.SubOccurrences)\n\t\tEnd If\n\tEnd If\nNext\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Inventor Partslist: Retrieve Names in Property Column\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Inventor Automatically Include Print Date & Time In Title Block\n                    ", "solution": [], "author": "mdavis22569"},
{"created at": [], "solution Title": "\n                        Re: Is my iLogic rule running?\n                    ", "solution": ["If", " ", "GNDHALO_LASTBAR_INITIAL", " <= 0 ", "Then", "\n\t", "GNDHALO_STDBARCOUNT", " = ", "Ceil", "(( ", "GNDHALO_ROOM_LENGTH", " - ( 15.375 in * 2 ul ) - 8 in ) / ", "GNDHALO_STDBARSPACE", ")\n\t", "GNDHALO_LASTBAR", " = ", "GNDHALO_ROOM_LENGTH", " - ( 15.375 in * 2 ul ) - ( ", "GNDHALO_STDBARSPACE", " * ", "GNDHALO_STDBARCOUNT", " )\n\t", "GNDHALO_LASTBAR_PLACEMENT", " = 1.125 in\n\t", "GNDHALO_LASTBAR_JUSTIFY", " = 0 in\n", "ElseIf", "  ", "GNDHALO_LASTBAR_INITIAL", " <= 8 ", "Then", "\n\t", "GNDHALO_STDBARCOUNT", " = ", "Floor", "(( ", "GNDHALO_ROOM_LENGTH", " - ( 15.375 in * 2 ul ) - 8 in ) / ", "GNDHALO_STDBARSPACE", ")\n\t", "GNDHALO_LASTBAR", " = ", "GNDHALO_ROOM_LENGTH", " - ( 15.375 in * 2 ul ) - ( ", "GNDHALO_STDBARSPACE", " * ", "GNDHALO_STDBARCOUNT", " ) + 3.375 in * 2 ul\n\t", "GNDHALO_LASTBAR_PLACEMENT", " = (0 in - 2.25 in)\n\t", "GNDHALO_LASTBAR_JUSTIFY", " = .25 in\n", "ElseIf", " ", "GNDHALO_LASTBAR_INITIAL", " <= 144 ", "Then", "\n\t", "GNDHALO_STDBARCOUNT", " = ", "Floor", "(( ", "GNDHALO_ROOM_LENGTH", " - ( 15.375 in * 2 ul ) - 8 in ) / ", "GNDHALO_STDBARSPACE", ")\n\t", "GNDHALO_LASTBAR", " = ", "GNDHALO_ROOM_LENGTH", " - ( 15.375 in * 2 ul ) - ( ", "GNDHALO_STDBARSPACE", " * ", "GNDHALO_STDBARCOUNT", " )\n\t", "GNDHALO_LASTBAR_PLACEMENT", " = 1.125 in\n\t", "GNDHALO_LASTBAR_JUSTIFY", " = 0 in\n", "ElseIf", "  ", "GNDHALO_LASTBAR_INITIAL", " <= 152  ", "Then", "\n\t", "GNDHALO_STDBARCOUNT", " = ", "Ceil", "(( ", "GNDHALO_ROOM_LENGTH", " - ( 15.375 in * 2 ul ) - 8 in ) / ", "GNDHALO_STDBARSPACE", ")\n\t", "GNDHALO_LASTBAR", " = ", "GNDHALO_ROOM_LENGTH", " - ( 15.375 in * 2 ul ) - ( ", "GNDHALO_STDBARSPACE", " * ", "GNDHALO_STDBARCOUNT", " )+3.375 in * 2 ul\n\t", "GNDHALO_LASTBAR_PLACEMENT", " = (0 in - 2.25 in)\n\t", "GNDHALO_LASTBAR_JUSTIFY", " = .25 in\n", "ElseIf", "  ", "GNDHALO_LASTBAR_INITIAL", " > 152  ", "Then", "\n\t", "GNDHALO_STDBARCOUNT", " = ", "Floor", "(( ", "GNDHALO_ROOM_LENGTH", " - ( 15.375 in * 2 ul ) - 8 in ) / ", "GNDHALO_STDBARSPACE", ")\n\t", "GNDHALO_LASTBAR", " = ", "GNDHALO_ROOM_LENGTH", " - ( 15.375 in * 2 ul ) - ( ", "GNDHALO_STDBARSPACE", " * ", "GNDHALO_STDBARCOUNT", " )\n\t", "GNDHALO_LASTBAR_PLACEMENT", " = 1.125 in\n\t", "GNDHALO_LASTBAR_JUSTIFY", " = 0 in\n", "End", " ", "If", "\n", "iLogicVb", ".", "UpdateWhenDone", " = ", "True"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Sending Text Parameter from assembly to components using iLogic\n                    ", "solution": ["If Parameter(oOccurrence.Name, \"Text1\") Then", "For Each oOccurrence In oAsmCompDef.Occurrences", "Parameter.Quiet = True ", "If Parameter.Param(oOccurrence.Name, \"Text1\").Units = UnitsTypeEnum.kTextUnits Then ", " If Not Parameter(oOccurrence.Name, \"Text1\") = \"\" Then ", " Parameter(oOccurrence.Name, \"Text1\") = Text1", " End If ", "Else", " If Parameter(oOccurrence.Name, \"Text1\") Then", " Parameter(oOccurrence.Name, \"Text1\") = Text1", " End If ", "End If ", "Next "], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: ApprenticeServerComponent.open, Inventor 2019 files and windows accounts\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Is it valid to look at HealthStatusEnum  of a RectangularPatternFeature\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Matching item #'s\n                    ", "solution": ["Sub SyncBOMRowOrderFromSubAssembly()\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oBOM As BOM\n    Set oBOM = oDoc.ComponentDefinition.BOM\n    oBOM.StructuredViewEnabled = True\n    \n    Dim oStructedView As BOMView\n    Set oStructedView = oBOM.BOMViews(\"Structured\")\n    \n    Dim oRow As BOMRow, oChildRow As BOMRow\n    Dim oSubDoc As AssemblyDocument, oSubBOM As BOM, oSubStructedView As BOMView, oSubRow As BOMRow\n    Dim sItemNum() As String, sUpdateItemNum As String\n    For Each oRow In oStructedView.BOMRows\n        If oRow.ComponentDefinitions.Item(1).Type = kAssemblyComponentDefinitionObject Then\n            If oRow.ChildRows.Count > 1 Then\n                Set oSubDoc = oRow.ComponentDefinitions(1).Document\n                Set oSubBOM = oSubDoc.ComponentDefinition.BOM\n                oSubBOM.StructuredViewEnabled = True\n                \n                Set oSubStructedView = oSubBOM.BOMViews(\"Structured\")\n                \n                For Each oSubRow In oSubStructedView.BOMRows\n                    For Each oChildRow In oRow.ChildRows\n                        Debug.Print oChildRow.ReferencedFileDescriptor.FullFileName\n                        If StrComp(LCase(oSubRow.ReferencedFileDescriptor.FullFileName), LCase(oChildRow.ReferencedFileDescriptor.FullFileName)) = 0 Then\n                            sItemNum = Split(oChildRow.ItemNumber, \".\")\n                            oChildRow.ItemNumber = oSubRow.ItemNumber\n                            Exit For\n                        End If\n                    Next\n                Next\n            End If\n        End If\n    Next\n    \n    oStructedView.Sort \"Item\", True\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Insert parts list above titleblock\n                    ", "solution": ["If", " ", "iProperties", ".", "Value", "(", "\"", "Summary", "\"", ", ", "\"", "Category", "\"", ")", " ", "=", " ", "\"", "ASSEMBLY", "\"", " ", "Then", " \n\n", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "   \n\n", "'", " Set a reference to the drawing document.    ", "'", " This assumes a drawing document is active.    ", "\n", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "'", "Set a reference to the active sheet.    ", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", "    \n\n", "'", " Set a reference to the first drawing view on    ", "'", " the sheet. This assumes the first drawing    ", "'", " view on the sheet is not a draft view.    ", "\n", "Dim", " ", "oDrawingView", " ", "As", " ", "DrawingView", "\n\n", "Try", "\n    ", "oDrawingView", " ", "=", " ", "oSheet", ".", "DrawingViews", "(", "1", ")", "\n", "Catch", "\n    ", "MessageBox", ".", "Show", "(", "\"", "No View found. Can not continue", "\"", ", ", "\"", "iLogic", "\"", ")", "\n    ", "Return", "\n", "End", " ", "Try", "\n\n", "'", " Set a reference to th sheet's border    ", "\n", "Dim", " ", "oBorder", " ", "As", " ", "Border", "\n", "oBorder", " ", "=", " ", "oSheet", ".", "Border", "\n\n", "Dim", " ", "oPlacePoint", " ", "As", " ", "Point2d", "\n\n", "If", " ", "Not", " ", "oBorder", " ", "Is", " ", "Nothing", " ", "Then", "\n    ", "'", " A border exists. The placement point        ", "\n    ", "'", " is the top-right corner of the border. ", "\n    ", "oOffset", " ", "=", " ", "12.77", " ", "'", "user defined offset", "\n    ", "oX", " ", "=", " ", "oBorder", ".", "RangeBox", ".", "MaxPoint", ".", "X", "\n    ", "oY", " ", "=", " ", "oBorder", ".", "RangeBox", ".", "MinPoint", ".", "Y", " ", "+", " ", "oOffset", "\n    ", "oPlacePoint", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "oX", ",", "oY", ")", "\n", "Else", "\n    ", "'", " There is no border ", "\n     \n    ", "oPlacementPoint", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "20", ", ", "20", ")", "\n     \n     ", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n", "End", " ", "If", "\n\n", "Dim", " ", "oPartslist", " ", "As", " ", "PartsList", "\n\n", "Try", "        \n    ", "'", "look for the first parts list found on the sheet ", "\n    ", "'", "if succesful finding it, ", "\n    ", "'", "tell the user,then Do Nothing", "\n    ", "oPartslist", " ", "=", " ", "oSheet", ".", "PartsLists", "(", "1", ")", "\n    ", "MessageBox", ".", "Show", "(", "\"", "There is an existing Parts List", "\"", ", ", "\"", "iLogic", "\"", ")", "\n    \n", "Catch", "\n    ", "'", " Create the parts list.  ", "\n    ", "oPartsList", " ", "=", " ", "oSheet", ".", "PartsLists", ".", "Add", "(", "oDrawingView", ", ", "oPlacePoint", ")", "\n", "End", " ", "Try", "\n", "End", " ", "If", "If iProperties.Value(\"Summary\", \"Category\") = \"X\" Then \n\n\niLogicVb.UpdateWhenDone = True   \n\n' Set a reference to the drawing document.    ' This assumes a drawing document is active.    \nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\n'Set a reference to the active sheet.    \nDim oSheet As Sheet\noSheet = oDrawDoc.ActiveSheet    \n\n' Set a reference to the first drawing view on    ' the sheet. This assumes the first drawing    ' view on the sheet is not a draft view.    \nDim oDrawingView As DrawingView\n\nTry\n    oDrawingView = oSheet.DrawingViews(1)\nCatch\n    MessageBox.Show(\"No View found. Can not continue\", \"iLogic\")\n    Return 'return exits the rule\nEnd Try\n\n' Set a reference to th sheet's border    \nDim oBorder As Border\noBorder = oSheet.Border\n\nDim oPlacementPoint As Point2d\n\nIf Not oBorder Is Nothing Then\n    ' A border exists. The placement point        \n    ' is the top-right corner of the border.        \n    'oPlacementPoint = oBorder.RangeBox.MaxPoint\n\toPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(", "41.5, 10", ")  \nElse\n    ' There is no border      \n    oPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(", "41.5, 0.5", ")     \n     \nEnd If\n\nDim oPartslist As PartsList\n\nTry        \n    'look for the first parts list found on the sheet \n    'if succesful finding it, \n    'tell the user,then Do Nothing\n    oPartslist = oSheet.PartsLists(1)\n    MessageBox.Show(\"There is an existing Parts List\", \"iLogic\")\n    \nCatch\n    'if one is not found, Create it\n    oPartslist = oSheet.PartsLists.Add(oDrawingView, oPlacementPoint)\nEnd Try\nEnd If"], "author": "jdollahan"},
{"created at": [], "solution Title": "\n                        Re: Uncheck \"Checked Date\" with iLogic\n                    ", "solution": [], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: iLogic to autofill all parts/assemblies at drawing level\n                    ", "solution": ["Sub Main()\n\tDim bool_Custom_Prop1_Exists As Boolean = False \n\tDim bool_Custom_Prop2_Exists As Boolean = False \n\tDim bool_Custom_Prop3_Exists As Boolean = False \n\tDim value_List As List(Of String) = New List(Of String)\n\tvalue_List.Add(iProperties.Value(\"Project\", \"Vendor\"))\n\tvalue_List.Add( iProperties.Value(\"Project\", \"Stock Number\"))\n\tvalue_List.Add(iProperties.Value(\"Project\", \"Project\"))\n\tvalue_List.Add(iProperties.Value(\"Project\", \"Designer\"))\n\n\tTry\n\t\tvalue_List.Add(iProperties.Value(\"Custom\", \"Custom Property 1\"))\n\t\tbool_Custom_Prop1_Exists = True \n\tCatch \n\t\tMessageBox.Show(\"Custom propety 1 is not available at current document\", \"Custom Property 1\")\n\tEnd Try\n\n\tTry\n\t\tvalue_List.Add(iProperties.Value(\"Custom\", \"Custom Property 2\"))\n\t\tbool_Custom_Prop2_Exists = True \n\tCatch \n\t\tMessageBox.Show(\"Custom propety 2 is not available at current document\", \"Custom Property 2\")\n\tEnd Try\n\n\tTry\n\t\tvalue_List.Add(iProperties.Value(\"Custom\", \"Custom Property 3\"))\n\t\tbool_Custom_Prop3_Exists = True \n\tCatch \n\t\tMessageBox.Show(\"Custom propety 3 is not available at current document\", \"Custom Property 3\")\n\tEnd Try\n\n\tDim oDoc As Document\n\toDoc = ThisDrawing.ModelDocument \n\n\tIf oDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n\t\t\n\t\tUpdate_Properties(oDoc, bool_Custom_Prop1_Exists, bool_Custom_Prop2_Exists, bool_Custom_Prop3_Exists, value_List)\n\t\t\n\t\tDim oAsyDoc As AssemblyDocument \n\t\toAsyDoc = oDoc\n\t\t \n\t\tDim oReferDoc As Document \n\t\tDim occ As ComponentOccurrence \n\t\tDim oDef As AssemblyComponentDefinition \n\t\toDef = oAsyDoc.ComponentDefinition  \n\n\t\tFor Each occ In oDef.Occurrences \t\t\t\n\t\t\tIf occ.SubOccurrences.Count = 0 Then\n\t\t\t\toReferDoc = occ.ReferencedDocumentDescriptor.ReferencedDocument\n\t\t\t\tUpdate_Properties(oReferDoc,bool_Custom_Prop1_Exists,bool_Custom_Prop2_Exists,bool_Custom_Prop3_Exists,value_List)\n\t\t\tElse\t\t\t\t\n\t\t\t\toReferDoc = occ.ReferencedDocumentDescriptor.ReferencedDocument\n\t\t\t\tUpdate_Properties(oReferDoc, bool_Custom_Prop1_Exists, bool_Custom_Prop2_Exists, bool_Custom_Prop3_Exists, value_List)\n\t\t\t\tprocessAllSubOcc(occ,bool_Custom_Prop1_Exists, bool_Custom_Prop2_Exists, bool_Custom_Prop3_Exists, value_List)\n\t\t\tEnd If\t\t\t\t\n\t\tNext \n\t\t\n\tElse If oDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n\t\tUpdate_Properties(oDoc,bool_Custom_Prop1_Exists,bool_Custom_Prop2_Exists,bool_Custom_Prop3_Exists,value_List)\n\tEnd If \n\nEnd Sub \n\nPrivate Sub processAllSubOcc(ByVal oCompOcc As ComponentOccurrence,bool_Custom_Prop1_Exists As Boolean, bool_Custom_Prop2_Exists As Boolean, bool_Custom_Prop3_Exists As Boolean, value_List As List(Of String))\n    \n\tDim oSubCompOcc As ComponentOccurrence\n\tDim oReferDoc As Document \n    For Each oSubCompOcc In oCompOcc.SubOccurrences\n        If oSubCompOcc.SubOccurrences.Count = 0 Then\n            oReferDoc = oSubCompOcc.ReferencedDocumentDescriptor.ReferencedDocument\n\t\t\tUpdate_Properties(oReferDoc,bool_Custom_Prop1_Exists,bool_Custom_Prop2_Exists,bool_Custom_Prop3_Exists,value_List)\t\t\t\n        Else\n            oReferDoc = oSubCompOcc.ReferencedDocumentDescriptor.ReferencedDocument\n\t\t\tUpdate_Properties(oReferDoc,bool_Custom_Prop1_Exists,bool_Custom_Prop2_Exists,bool_Custom_Prop3_Exists,value_List)\t\t\t\n            Call processAllSubOcc(oSubCompOcc,bool_Custom_Prop1_Exists, bool_Custom_Prop2_Exists, bool_Custom_Prop3_Exists, value_List)\n        End If\n    Next\n\t\nEnd Sub\n\nSub Update_Properties(oDoc As Document, bool_Custom_Prop1_Exists As Boolean, bool_Custom_Prop2_Exists As Boolean, bool_Custom_Prop3_Exists As Boolean, value_List As List(Of String))\n\tDim oCustom_PropSet As PropertySet\n\toDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Vendor\").Value = value_List.Item(0)\n\toDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Stock Number\").Value = value_List.Item(1)\n\toDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Project\").Value = value_List.Item(2)\n\toDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Designer\").Value = value_List.Item(3)\n\t oCustom_PropSet  = oDoc.PropertySets.Item(\"User Defined Properties\")\n\tIf bool_Custom_Prop1_Exists = True Then\n\t\tTry\n\t\t\toCustom_PropSet.Item(\"Custom Property 1\").Value = value_List.Item(4)\n\t\tCatch\n\t\t\toCustom_PropSet.Add(value_List.Item(4),\"Custom Property 1\")\n\t\tEnd Try \t\t\n\tEnd If \n\tIf bool_Custom_Prop2_Exists = True Then\n\t\tTry\n\t\t\toCustom_PropSet.Item(\"Custom Property 2\").Value = value_List.Item(5)\n\t\tCatch\n\t\t\toCustom_PropSet.Add(value_List.Item(5),\"Custom Property 2\")\n\t\tEnd Try \t\t\n\tEnd If\n\tIf bool_Custom_Prop1_Exists = True Then\n\t\tTry\n\t\t\toCustom_PropSet.Item(\"Custom Property 3\").Value = value_List.Item(6)\n\t\tCatch\n\t\t\toCustom_PropSet.Add(value_List.Item(6),\"Custom Property 3\")\n\t\tEnd Try \t\t\n\tEnd If \n\toDoc.Save()\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Verify parameter type in iLogic rule\n                    ", "solution": ["\tIf (Parameter.Param(\"D1\").Units = \"Text\") Then\n\t\tMsgBox(\"Text param\")\n\tElse If (Parameter.Param(\"D1\").Units = \"Boolean\") Then\n\t\tMsgBox(\"Boolean param\")\n\tElse\n\t\tMsgBox (\"Numerical param\")\n\tEnd If"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Help. Combine/Divide solids with VBA for Inventor\n                    ", "solution": ["Set oBody1 = oDoc.ComponentDefinition.SurfaceBodies (1)", "    Dim oTempBody As SurfaceBody\n    For Each oTempBody In oDoc.ComponentDefinition.SurfaceBodies\n        If oTempBody.Name = \"Solid1\" Then\n            Set oSolid1 = oTempBody\n            Exit For\n        End If\n    Next", "    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    Dim oSolid1 As SurfaceBody\n    Dim oAttributeMgr As AttributeManager\n    Set oAttributeMgr = oDoc.AttributeManager\n    \n    Dim oCol As ObjectCollection\n    Set oCol = oAttributeMgr.FindObjects(, , \"BaseSolid\")\n    Set oSolid1 = oCol.Item(1)"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Vb.Net - Get project file path\n                    ", "solution": ["InvApp.DesignProjectManager.ActiveDesignProject.WorkspacePath"], "author": "R.Mabery"},
{"created at": [], "solution Title": "\n                        Re: Insert symbol, if it is not there\n                    ", "solution": ["' Set a reference to the drawing document.\n    ' This assumes a drawing document is active.\n    Dim oDrawDoc As DrawingDocument = ThisApplication.ActiveDocument\n\n    ' Obtain a reference to the desired sketched symbol definition.\n    Dim oSketchedSymbolDef As SketchedSymbolDefinition = oDrawDoc.SketchedSymbolDefinitions.Item(\"MATERIAL\")\n\n    Dim oSheet As Sheet = oDrawDoc.ActiveSheet\n\n    ' This sketched symbol definition contains one prompted string input. An array\n    ' must be input that contains the strings for the prompted strings.\n    Dim oPromptStrings As String() = {iProperties.Value(\"Project\", \"STOCK NUMBER\"),\"\"}\n    \nDim sk As SketchedSymbol\nFor Each sk In oSheet.SketchedSymbols\n\n\nIf sk.Name = \"MATERIAL\" Then\nExit Sub\nEnd If\n\nNext\n\n    Dim oBorder As Border\n    oBorder = oSheet.Border\n    Dim oPlacePoint As Point2d\n    oyOffset = 7 'user defined offset\n    oxOffset = 9\n    oX = oBorder.RangeBox.MaxPoint.X - oxOffset\n    oY = oBorder.RangeBox.MinPoint.Y + oyOffset\n    oPlacePoint = ThisApplication.TransientGeometry.CreatePoint2d(oX,oY)\n    ' Add an instance of the sketched symbol definition to the sheet.\n    ' Rotate the instance by 45 degrees and scale by .75 when adding.\n    ' The symbol will be inserted at (0,0) on the sheet. Since the\n    ' start point of the line was marked as the insertion point, the\n    ' start point should end up at (0,0).\n    Dim oSketchedSymbol As SketchedSymbol = oSheet.SketchedSymbols.Add(oSketchedSymbolDef, oPlacePoint, (0), 1,oPromptStrings )"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic Error\n                    ", "solution": [], "author": "bladedotexe"},
{"created at": [], "solution Title": "\n                        Re: Get FileSize with iLogic\n                    ", "solution": ["Imports System.IO", "Dim myFile As New FileInfo(ThisDoc.PathAndFileName(True))\nDim sizeInBytes As Long = myFile.Length\nMessageBox.Show(sizeInBytes.ToString & \" in bytes\", \"File Size in bytes\")\nDim sizeInKB As Long = sizeInBytes / 1024\nMessageBox.Show(sizeInKB.ToString & \" in KB\", \"File Size in KB\")\nDim sizeInMB As Long = sizeInKb / 1024 \nMessageBox.Show(sizeInMB.ToString & \" in MB\", \"File Size in MB\")\nDim sizeInGB As Long = sizeInMB / 1024 \nMessageBox.Show(sizeInGB.ToString & \" in GB\", \"File Size in GB\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Need to Retrieve Solid Body information - Derived Part\n                    ", "solution": ["Public Sub SuppressLinkderivedpart()\nDim oInvApp As Inventor.Application\nSet oInvApp = ThisApplication\n        ' Set a reference to the Active document as a Part\n        Dim oInvPartDocument As PartDocument\n        Set oInvPartDocument = oInvApp.ActiveDocument\n\n        ' Set a reference to the part component definition\n        Dim oInvPartCompDef As PartComponentDefinition\n        Set oInvPartCompDef = oInvPartDocument.ComponentDefinition\n\n        ' Set a reference to the derived part component\n        Dim oDerivedPart As DerivedPartComponent\n        Set oDerivedPart = oInvPartCompDef.ReferenceComponents.DerivedPartComponents.Item(1)\n\nMsgBox oDerivedPart.SolidBodies.Item(1).Name\n\n\n    End Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: How to Properly Loop through ReferencedDocuments.\n                    ", "solution": [" If TypeOf doc Is DrawingDocument Then\n    \n    Dim imFileCount As Variant\n        imFileCount = doc.ReferencedDocuments.Count\n                \n        For i = 1 To imFileCount\n    \n            Dim imfFile As Variant\n                imfFile = doc.ReferencedDocuments(i).FullFileName\n            \n            Dim rDoc As Document\n            Set rDoc = doc.ReferencedDocuments(i)\n        \n            Dim fExt As String\n                fExt = fso.GetExtensionName(imfFile)\n            \n            Dim imFile As String\n                imFile = fso.GetFileName(imfFile)\n           'Next\n        \n            Dim rDocFN As Variant\n                rDocFN = pNo + \".\" + fExt\n        \n            Dim mFile As Variant\n            mFile = imFile\n        \n            Dim x As Integer\n                x = StrComp(rDocFN, mFile)\n        \n           If x = 0 Then\n               \n                Set engInfo = rDoc.PropertySets.Item(\"Design Tracking Properties\") 'get the checkedBy and authorBy approval Property Set\n           \n                Dim rdpNo As Property\n                Set rdpNo = engInfo.Item(\"Part Number\") 'Referenced Document Part Number\n           \n                Dim checkedBy As Property\n                Set checkedBy = engInfo.Item(\"Checked by\")\n    \n                Dim authorBy As Property\n                Set authorBy = engInfo.Item(\"Engr Approved By\")\n    \n                Set salesInfo = rDoc.PropertySets.Item(\"Inventor User Defined Properties\") 'get the salesBy approval Property Set\n    \n                Dim salesBy As Property\n                Set salesBy = salesInfo.Item(\"Sales Rep.\")\n           \n           End If\n           \n        Next", "End If"], "author": "sgwilliams"},
{"created at": [], "solution Title": "\n                        Re: Convert Solid Parts Assembly to Sheet Metal Parts in Preparation for Nesting\n                    ", "solution": ["' ConvertToSheetMetal\n' an iLogic rule that converts parts matching a naming scheme 1w21-09a-a:1 \n' to Sheet Metal, Unfolds them and prepares for layout in Autodesk TruNest or Autodesk Nesting Utility\n'\n' Use case: we have an assembly of 2000+ solid parts of uniform thickness created in Fusion that we actually\n' want to layout and cut from sheets. So, we export from Fusion to Inventor using Autodesk Cloud. Then we\n' run this script, which re-assigns a material to each part, converts it to sheet metal, then unfolds read\n' to be packed onto sheets with a nesting program.\n'\n' This is an Inventor Rule | AKA iLogic Rule\n' To run this rule, goto Manage > iLogic Browser\n' double click iam main assembly (in the rule window) to expand children\n' click plus icon or right click in iLogic Browser and then select add New Rule\n' give the rule a name, paste this file into the window, click Save and Run\n' after the rule is run you might need to double click on any part to get Inventor to display updates\n'\n' References:\n' loop through all parts of an assembly https://www.cadlinecommunity.co.uk/hc/en-us/articles/202782862-Inventor-2016-ILogic-to-update-parameters-in-every-part-of-an-Assembly\n' various ways of getting access to parts of the model https://forums.autodesk.com/t5/inventor-forum/ilogic-assembly-component-occurrence-definition/td-p/3639162\n'\n' Written by Andrew Ringler public@andrewringler.com, https://andrewringler.com/ 2018\n' for New American Public Art, http://www.newamericanpublicart.com/kempelens-owls\n'\n' This code is licensed under Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\n'\nClass ThisRule\n\n    Dim updatedParts As Integer = 0\n    Dim updated_a As Integer = 0\n    Dim updated_b As Integer = 0\n    Dim updated_c As Integer = 0\n    Dim updated_d As Integer = 0\n    Dim updated_e As Integer = 0\n    Dim updated_f As Integer = 0\n    Dim updated_g As Integer = 0\n    Dim updated_h As Integer = 0\n    Dim errors As Integer = 0\n\n    Dim oAsmDoc As AssemblyDocument\n\n    ' This thickness seems to be in cm\n    Const SHEET_METAL_THICKNESS As Double = 1.2\n\t\n\t' Main gets run when we Run the rule\n    Sub Main()\n        oAsmDoc = ThisApplication.ActiveDocument\n        Call Iterate(oAsmDoc.ComponentDefinition.Occurrences, 1)\n\n        ' updated the parts, is this required?\n        oAsmDoc.Update\n\n        ' All done, give some feedback\n        MsgBox(\"Updated \" & updatedParts & \" parts To sheet metal:\" & vbLf & updated_a & \" 'a' parts\" & vbLf & updated_b & \" 'b' parts\" & vbLf & updated_c & \" 'c' parts\" & vbLf & updated_d & \" 'd' parts\" & vbLf & updated_e & \" 'e' parts\" & vbLf & updated_f & \" 'f' parts\" & vbLf & updated_g & \" 'g' parts\" & vbLf & updated_h & \" 'h' parts\" & vbLf & vbLf & errors & \" Errors\")\n    End Sub\n\n\t' Loop through all components in Assembly\n    Private Sub Iterate(Occurrences As ComponentOccurrences, Level As Integer)\n        'Iterate through Assembly\n        Dim oOcc As ComponentOccurrence\n        For Each oOcc In Occurrences\n\n            'Find Parts in the Assembly\n            Dim CadlinePart As String\n            CadlinePart = oOcc.Name\n\n            Try\n                ' Look for parts of the form: 1w21-09a-a:1 (the :1 is automatically added by Autodesk Fusion)\n                If CadlinePart.Length = 12 Then\n\t\t\t\t\t' Pull off 9th character, which is the material IE 1w21-09a-a:1 would be a\n                    Dim materialChar As Char\n                    materialChar = CadlinePart.Chars(9)\n\n                    ' Grab this part's document\n                    Dim invPart As PartDocument\n                    invPart = oOcc.Definition.Document\n\n                    ' Various updates to visible document, thanks to Brian Ekins\n                    'https://forums.autodesk.com/t5/inventor-customization/convert-solid-parts-assembly-to-sheet-metal-parts-in-preparation/td-p/8013539\n\n                    ' Make the part document visible.\n                    invPart.Views.Add\n\n                    ' Assign this part a material based on the part name\n                    'https://forums.autodesk.com/t5/Inventor-customization/material-change-Using-Inventor-api/td-p/4319281\n                    Dim componentDefinition As ComponentDefinition\n                    componentDefinition = oOcc.Definition\n\n                    ' Actual materials don't matter since we'll remap them to different materials in the nesting program\n                    Select Case materialChar\n                        Case \"a\"c\n\t\t\t\t\t\t\t' here we have grabbed the first material listed in the Inventor GUI\n                            componentDefinition.Material.Name = \"ABS Plastic\"\n\t\t\t\t\t\t\t' track how many of material a we have updated, so this \n\t\t\t\t\t\t\t' can appear in the summary message at the end\n                            updated_a += 1\n                        Case \"b\"c\n\t\t\t\t\t\t\t' here we have grabbed the second material listed in the Inventor GUI\n                            componentDefinition.Material.Name = \"Acetal Resin, Black\"\n                            updated_b += 1\n                        Case \"c\"c\n                            componentDefinition.Material.Name = \"Acetal Resin, White\"\n                            updated_c += 1\n                        Case \"d\"c\n                            componentDefinition.Material.Name = \"Aluminum 6061\"\n                            updated_d += 1\n                        Case \"e\"c\n                            componentDefinition.Material.Name = \"Aluminum 6061-AHC\"\n                            updated_e += 1\n                        Case \"f\"c\n                            componentDefinition.Material.Name = \"Aluminum 6061, Welded\"\n                            updated_f += 1\n                        Case \"g\"c\n                            componentDefinition.Material.Name = \"Brass, Soft Yellow\"\n                            updated_g += 1\n                        Case \"h\"c\n                            componentDefinition.Material.Name = \"Brass, Soft Yellow, Welded\"\n                            updated_h += 1\n                    End Select\n\n                    Try\n\t                    ' Change to a Sheet Metal Subtype\n\t                    ' https://forums.autodesk.com/t5/inventor-forum/batch-convert-regular-parts-to-sheet-metal-parts/td-p/6477451\n                        invPart.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\"\n\n                        ' Grab ComponentDefinition as SheetMetalComponentDefinition, now that we have changed its type\n                        Dim oSheetMetalCompDef As SheetMetalComponentDefinition\n                        oSheetMetalCompDef = invPart.ComponentDefinition\n\n                        ' Override the thickness for the document, otherwise we can't actually set the thickness\n                        ' https://forums.autodesk.com/t5/inventor-forum/sheet-metal-controlled-through-ilogic/td-p/3795810\n                        oSheetMetalCompDef.UseSheetMetalStyleThickness = False\n\n                        ' Change the thickness of this sheet metal part to match the thickness of the part\n                        ' this is so when we ask Inventor to Create a Flat Pattern / Unpack it just grabs a single face\n                        ' IE we don't want to unfold anything we are just cutting a solid part of uniform thickness out of a sheet\n                        Dim oThicknessParam As Parameter\n                        oThicknessParam = oSheetMetalCompDef.Thickness\n                        oThicknessParam.Value = SHEET_METAL_THICKNESS\n\n\t\t\t\t\t\t' Traces show up in DebugView\n\t\t\t\t\t\t' Google Windows DebugView to download this free Windows Program to display these logs\n                        Trace.WriteLine(\"Inventor: about to unfold part=\" & CadlinePart)\n                        Try\n                            ' Create Flat Pattern AKA Unfold\n                            If (Not oSheetMetalCompDef.HasFlatPattern) Then\n                                ' Unfold the part.  This will activate the flat pattern environment.\n                                oSheetMetalCompDef.Unfold\n\n                                ' Exit the flat pattern environment.\n                                oSheetMetalCompDef.FlatPattern.ExitEdit\n\n                                ' Close and save the document.  This will close the view but it will\n                                ' actually remain open because the assembly is still referencing it.\n                                Call invPart.Close(True)\n                            End If\n                        Catch e As Exception\n                            Trace.WriteLine(\"Inventor: unable to unfold part for part=\" & CadlinePart, e.Message)\n                            errors += 1\n                        End Try\n\n                        updatedParts += 1\n                    Catch e As Exception\n                        Trace.WriteLine(\"Inventor: unable to change part to sheet metal for part=\" & CadlinePart, e.Message)\n                        errors += 1\n                    End Try\n\n                    'Trace.WriteLine(\"Inventor: \" & CadlinePart & \" material=\" & materialChar & \", \" & componentDefinition.Material.Name)\n                    'Write iProps to Parts, could be usefull to add comments to part to record what we did to it\n                    'iProperties.Value(CadlinePart, \"Summary\", \"Comments\") = \"Hello World\"\n\n                End If\n            Catch e As Exception\n                Trace.WriteLine(\"Inventor: unknown error for part=\" & CadlinePart, e.Message)\n                errors += 1\n            End Try\n\n            'Run through the sub assemblies \n            If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n                Call Iterate(oOcc.SubOccurrences, Level + 1)\n            End If\n        Next\n    End Sub\n\nEnd Class"], "author": "andrewringler"},
{"created at": [], "solution Title": "\n                        Re: Limit sketch set to those used in features above EOF marker\n                    ", "solution": ["Dim", " ", "doc", " ", "As", " ", "PartDocument", " = ", "ThisDoc", ".", "Document", "\n", "For", " ", "Each", " ", "oSketch", " ", "As", " ", "Sketch", " ", "In", " ", "doc", ".", "ComponentDefinition", ".", "Sketches", "\n\n", "If", " ", "oSketch", ".", "HealthStatus", " <> ", "HealthStatusEnum", ".", "kBeyondStopNodeHealth", "\n\t\t", "MsgBox", "(", "oSketch", ".", "Name", ")\n", "End", " ", "If", "\n", "Next"], "author": "jhoel.forshav"},
{"created at": [], "solution Title": "\n                        Re: Identifying Base Component\n                    ", "solution": ["Public Sub SuppressLinkderivedpart()\nDim oInvApp As Inventor.Application\nSet oInvApp = ThisApplication\n        ' Set a reference to the Active document as a Part\n        Dim oInvPartDocument As PartDocument\n        Set oInvPartDocument = oInvApp.ActiveDocument\n\n        ' Set a reference to the part component definition\n        Dim oInvPartCompDef As PartComponentDefinition\n        Set oInvPartCompDef = oInvPartDocument.ComponentDefinition\n\n        ' Set a reference to the derived part component\n        Dim oDerivedPart As DerivedPartComponent\n        Set oDerivedPart = oInvPartCompDef.ReferenceComponents.DerivedPartComponents.Item(1)\nMsgBox oDerivedPart.ReferencedDocumentDescriptor.FullDocumentName\n\n\n    End Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: doc.BrowserPanes.ActivePane.TopNode not give current document after crop in\n                    ", "solution": [], "author": "hakon.sakseid"},
{"created at": [], "solution Title": "\n                        Re: Add Leader Notes with BOM Quantity to Balloons\n                    ", "solution": [" Public Sub BalloonQuantityNote()\n        GetInventorApplication()\n        If invApp.ActiveDocument IsNot Nothing Then\n            If invApp.ActiveDocument.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then\n                Dim aDoc As Inventor.DrawingDocument = invApp.ActiveDocument\n                Dim trans As Transaction = invApp.TransactionManager.StartTransaction(aDoc, \"BalloonQuantityNote\")\n                Dim aSheet As Inventor.Sheet = aDoc.ActiveSheet\n                Dim ss As Inventor.SelectSet = aDoc.SelectSet\n                Dim ssBalloons As New Dictionary(Of Balloon, List(Of LeaderNote))\n                For Each aObject As Object In ss\n                    If TypeOf aObject Is Balloon Then\n                        ssBalloons.Add(aObject, New List(Of LeaderNote))\n                    End If\n                Next\n                'pair all balloons with leaderNotes (there can be many leaders to one balloon)\n                'get leadernotes from sheet, and discover if connected to one of the user balloons\n                For Each ln As LeaderNote In aSheet.DrawingNotes.LeaderNotes\n                    For Each nd As Inventor.LeaderNode In ln.Leader.AllNodes\n                        If TypeOf nd.AttachedEntity Is GeometryIntent Then\n                            Dim gi As GeometryIntent = nd.AttachedEntity\n                            If TypeOf gi.Geometry Is Balloon Then\n                                Dim aBalloon As Inventor.Balloon = gi.Geometry\n                                'find a selected balloon\n                                If ssBalloons.ContainsKey(aBalloon) Then\n                                    ssBalloons(aBalloon).Add(ln)\n                                    Exit For\n                                End If\n                                Exit For\n                            End If\n                        End If\n                    Next nd\n                Next ln\n                'first find the balloons that have no leader notes attached, and attach one\n                For Each sdBalloon As KeyValuePair(Of Balloon, List(Of LeaderNote)) In ssBalloons\n                    Dim strQty As String = sdBalloon.Key.BalloonValueSets.Item(1).ReferencedRow.BOMRow.ItemQuantity & \"X\"\n                    If sdBalloon.Value.Count = 0 Then\n                        'add a leader note attached to this balloon's attachment nodes\n                        Dim bln As Balloon = sdBalloon.Key\n                        Dim pCenter As Point2d = bln.Position\n                        If bln.Leader.AllNodes.Count > 1 Then\n                            'determine direction of balloon.leader, and place leadernote on opposite side\n                            Dim booBalloonLeaderOnRight As Boolean = True\n                            If bln.Leader.AllNodes(2).Position.X - bln.Position.X < 0 Then\n                                booBalloonLeaderOnRight = False\n                            End If\n                            Dim leaderPoints As ObjectCollection = invApp.TransientObjects.CreateObjectCollection\n                            Dim pnt2 As Point2d = Nothing\n                            Select Case booBalloonLeaderOnRight\n                                Case True\n                                    pnt2 = tg.CreatePoint2d(bln.Position.X - bln.Style.DefaultOffset, bln.Position.Y)\n                                    strQty += \" \"'space after\n                                Case False\n                                    pnt2 = tg.CreatePoint2d(bln.Position.X + bln.Style.DefaultOffset, bln.Position.Y)\n                                    strQty = \" \" & strQty 'space before\n                            End Select\n                            Dim gi As GeometryIntent = aSheet.CreateGeometryIntent(bln, pnt2)\n                            leaderPoints.Add(gi)\n                            Dim lnQty As LeaderNote = aSheet.DrawingNotes.LeaderNotes.Add(leaderPoints, strQty)\n                        End If\n                    Else\n                        Dim lnQty As LeaderNote = Nothing\n                        'check the leaders for key text ##X\n                        For Each ln As LeaderNote In sdBalloon.Value\n                            If ln.FormattedText IsNot Nothing AndAlso Not String.IsNullOrWhiteSpace(ln.FormattedText) Then\n                                If ln.FormattedText.ToUpper.Contains(\"X\") Then\n                                    Dim booIsQuantity As Boolean = False\n                                    For i As Integer = 0 To ln.FormattedText.Count - 1\n                                        Dim nextChar As String = ln.FormattedText.Substring(i, 1)\n                                        If Not IsNumeric(nextChar) Then\n                                            'this value is a number, continue\n                                            If nextChar = \"X\" Then\n                                                booIsQuantity = True\n                                                lnQty = ln\n                                                Exit For\n                                            End If\n                                        End If\n                                    Next i\n                                End If\n                            Else\n                                Dim booBalloonLeaderOnRight As Boolean = True\n                                Dim bln As Balloon = sdBalloon.Key\n                                If bln.Leader.AllNodes(2).Position.X - bln.Position.X < 0 Then\n                                    booBalloonLeaderOnRight = False\n                                End If\n                                Dim pnt2 As Point2d = Nothing\n                                Select Case booBalloonLeaderOnRight\n                                    Case True\n                                        pnt2 = tg.CreatePoint2d(bln.Position.X - bln.Style.DefaultOffset, bln.Position.Y)\n                                        strQty += \" \"'space after\n                                    Case False\n                                        pnt2 = tg.CreatePoint2d(bln.Position.X + bln.Style.DefaultOffset, bln.Position.Y)\n                                        strQty = \" \" & strQty 'space before\n                                End Select\n                                ln.FormattedText = strQty\n                            End If\n                        Next ln\n                        If lnQty IsNot Nothing Then\n                            'update the quantity in this leader note\n                            Dim strOriginalNote As String = lnQty.FormattedText\n                            Dim strNewNote As String = String.Empty\n                            Dim strLineSplit() As String = strOriginalNote.Split(vbCr)\n                            If strLineSplit.Count > 0 Then\n                                For k As Integer = 0 To strLineSplit.Count - 1\n                                    Dim slp As String = strLineSplit(k)\n                                    Dim strWordSplit() As String = slp.Split(\" \")\n                                    slp = String.Empty\n                                    If strWordSplit.Count > 0 Then\n                                        For j As Integer = 0 To strWordSplit.Count - 1\n                                            Dim swp As String = strWordSplit(j)\n                                            If swp.ToUpper.Contains(\"X\") Then\n                                                Dim strsplit() As String = swp.Split(\"X\")\n                                                swp = String.Empty\n                                                For i As Integer = 0 To strsplit.Count - 1\n                                                    Dim sxp As String = strsplit(i)\n                                                    If IsNumeric(strsplit(i)) Then\n                                                        sxp = strQty\n                                                    Else\n                                                        If i <> strsplit.Count - 1 Then\n                                                            sxp += \"X\"\n                                                        End If\n                                                    End If\n                                                    swp += sxp\n                                                Next\n                                            End If\n                                            If j <> strWordSplit.Count - 1 Then\n                                                swp += \" \"\n                                            End If\n                                            slp += swp\n                                        Next\n                                        If k <> strLineSplit.Count - 1 Then\n                                            slp += vbCr\n                                        End If\n                                        strNewNote += slp\n                                    End If\n                                Next\n                            End If\n                            lnQty.FormattedText = strNewNote\n                        End If\n                    End If\n                Next\n                trans.End()\n            End If\n        End If\n    End Sub"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Selecting Edge for Chamfer in VBA (VB.net)\n                    ", "solution": ["Dim oEdge As Edge\nFor Each oEdge In oExtrude.StartFaces.Item(1).Edges\n        oEdges.Add(oEdge)\nNext\n", "    Dim oEdge As Edge, oExteriorEdge As Edge, dRadius As Double: dRadius = 0\n    For Each oEdge In oExtrude.StartFaces.Item(1).Edges\n        \n        \n        If dRadius = 0 Then\n            dRadius = oEdge.Geometry.Radius\n            oExteriorEdge = oEdge\n        Else\n            If dRadius < oEdge.Geometry.Radius Then\n                oExteriorEdge = oEdge\n            End If\n            oEdges.Add (oExteriorEdge)\n        End If\n    Next"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Ilogic excel background color Cell\n                    ", "solution": ["oDocNumber = ThisDoc.FileName(False) 'without extension\n\nmyXLS_File = \"Path of file\\Filename.xlsx or Filename.xls\"\n 'define Excel Application object\nexcelApp = CreateObject(\"Excel.Application\")\n'set Excel to run visibly, change to false if you want to run it invisibly\nexcelApp.Visible = True\n'suppress prompts (such as the compatibility checker)\nexcelApp.DisplayAlerts = False\n\n'check for existing file\nIf Dir(myXLS_File) <> \"\" Then\n'workbook exists, open it\nexcelWorkbook = excelApp.Workbooks.Open(myXLS_File)\n'set the first sheet active\nexcelSheet = excelWorkbook.Worksheets(1).activate\nElse\n'workbook does NOT exist, so create a new one using the default template\nexcelWorkbook = excelApp.Workbooks.Add\n' or use this syntax to specify a template to use\n'excelWorkbook =  excelApp.Workbooks.Add (\"Path of Excel template\")\nEnd If\n\n'Insert data into Excel.\nWith excelApp\n\tFor oRow = 2 To 1000 'define the rows that contain the data\n\t\tIf .Range(\"D\" & oRow).Value = oDocNumber And .Range(\"H\" & oRow).Value  = \"\" Then\n\t \t\t.Range(\"H\" & oRow).Value =  IN_STOCK \n\t\t    .Range(\"H\" & oRow).Interior.Color = RGB(255, 0, 255) \n\t\tElseIf  .Range(\"D\" & oRow).Value = oDocNumber And .Range(\"H\" & oRow).Value = \"NOT IN STOCK\" Then\n\t\t \t.Range(\"H\" & oRow).Value = IN_STOCK \n\t\t    .Range(\"H\" & oRow).Interior.Color = RGB(0, 0 ,255)  \n\t\tEnd If\n\tNext\n\n        \nEnd With  \n\n'set all of the columns to autofit\nexcelApp.Columns.AutoFit  \n'save the file\nexcelWorkbook.SaveAs(myXLS_File)\nexcelWorkbook.Close\nexcelApp.Quit\nexcelApp = Nothing"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Need to get correct length of the part\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Get date from excel to Custom Property\n                    ", "solution": ["iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"DEADLINE\"", ")= Date.FromOADate(", "oDATE)"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Active Thread feature in Drawing in Display option tab\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Use VBA to section, patch and thicken\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Write to iproperties in ASM contained in a drawing\n                    ", "solution": ["Dim oDoc As Document\noDoc = ThisDrawing.ModelDocument\n\nJN = oDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Project\").Value \nMessagebox.Show(JN, \"Project\")\nPartNo = oDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Value \nMessagebox.Show(PartNo, \"Project\") \ntargetFolder = \"P:\\2D Drawing Archive\"\n\nIf JN=\"\" Then\n   \n\tJN=InputBox(\"Input job number\", \"Job?\", \"\")\n\toDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Project\").Value = JN \nElse \n\n\tIf Not System.IO.Directory.Exists(targetFolder & \"\\\" & JN) Then\n    System.IO.Directory.CreateDirectory(targetFolder & \"\\\" & JN)\nEnd If\n  \tThisDoc.Document.SaveAs(targetFolder & \"\\\" & JN & \"\\\" & PartNo & (\".pdf\"), True)\nEnd If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Autodesk Inventor iLogic to set active lighting style\n                    ", "solution": ["oAssy.ActiveLightingStyle.Name = \"Grid Light\"", "Dim oAssy As AssemblyDocument = ThisApplication.ActiveDocument\n\nDim oLightStyleName As String \n\noLightStyleName = oAssy.ActiveLightingStyle.Name\n\nMessageBox.Show(oLightStyleName, \"Title\")\n\nDim lightingstyletochangeto As LightingStyle = oAssy.LightingStyles.Item(\"Grid Light\")\nIf Not oAssy.ActiveLightingStyle.Name = lightingstyletochangeto.Name Then\n\toAssy.ActiveLightingStyle = lightingstyletochangeto\n\tInventorVb.DocumentUpdate()\nElse\n\tMessageBox.Show(\"We're already using the desired lighting style!\")\nEnd If", "Dim doc As Document", "doc = ThisApplication.ActiveDocument", "Dim ls As LightingStyle", "If doc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then", " ", " Dim oAssy As AssemblyDocument ", " oAssy = doc ", " ", " ls = oAssy.LightingStyles.Item(\"Grid Light\")", " oAssy.ActiveLightingStyle = ls", " ", "Else If doc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then", " Dim oPart As PartDocument ", " oPart = doc ", " ", " ls = oPart.LightingStyles.Item(\"Grid Light\")", " oPart.ActiveLightingStyle = ls", " ", "End If"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: iProperties - Copying to new iProperties\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Event Trigger All Documents not firing.\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLOGIC Ipt export to Step in custom Location\n                    ", "solution": ["oData.FileName = CurrentFile"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic code to modify top-level Representations - Positions\n                    ", "solution": ["Dim posRepName = \"Master\"\nIf Width <= 3 Then\n\tposRepName = \"3\"\nElseIf Width <= 4 Then\n\tposRepName = \"4\"\nElse\n\tposRepName = \"5\"\nEnd If\nComponent.InventorComponent(\"Sub-assembly:1\").ActivePositionalRepresentation = posRepName\n", "Dim posRepName = \"Master\"\nIf Width > 2.5 And Width < 30.5 Then\n\tposRepName = Convert.ToString(Round(Width)) ' or maybe Round(Width-1.5) ?\nEnd If\nComponent.InventorComponent(\"Sub-assembly:1\").ActivePositionalRepresentation = posRepName\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Trim last two characters in sheet Name\n                    ", "solution": ["oSheet", ".", "Name", ".", "Remove", "(", "len", "(", "oSheet", ".", "Name", ")-2)", "sPromptStrings", "(0) = ", "Left", "(", "oSheet", ".", "Name", ",(", "InStrRev", "(", "oSheet", ".", "Name", ", ", "\":\"", ", - 1)-1))"], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Trouble Update parameter in a pattern unsupressed\n                    ", "solution": ["Sub Main()\n    Dim oDoc As Document\n     oDoc =  ThisDoc.Document\n\n    \n    Dim oDef As AssemblyComponentDefinition\n     oDef = oDoc.ComponentDefinition\n    \n    Dim oParam As Parameter\n     oParam = oDef.Parameters.Item(\"Type_SubAssy\")\n    \n    Dim oQtyParam As Parameter\n     oQtyParam = oDef.Parameters.Item(\"Qty_skt\")\n    \n    Dim oDistParam As Parameter\n     oDistParam = oDef.Parameters.Item(\"Distance_skt\")\n    \n    Dim oPattern As RectangularOccurrencePattern\n    For Each oPattern In oDef.OccurrencePatterns \n       If oParam.Value = \"Ball\" Then\n            oPattern.ColumnCount.Expression = \"Qty_skt\"\n            oPattern.ColumnOffset.Expression = \"Distance_skt\"\n       ElseIf oParam.Value = \"Tube\" Then\n            oPattern.ColumnCount.Expression = \"Qty_skt\"\n            oPattern.ColumnOffset.Expression = \"Distance_skt\"\n       End If \n    Next\n\t\n\tThisApplication.UserInterfaceManager.DoEvents()\n\tInventorVb.DocumentUpdate()\n\tiLogicVb.UpdateWhenDone = True\nEnd Sub\n\n\n", "iLogicVb.UpdateWhenDone = True\n\n\tIf Type_SubAssy=\"Ball\" Then\n\t\tComponent.IsActive(\"Pattern_Ball\")=True\n\t\tComponent.IsActive(\"Pattern_Tube\")=False\n\t\t\n\tElse\n\t\tComponent.IsActive(\"Pattern_Ball\")=False\n\t\tComponent.IsActive(\"Pattern_Tube\")=True\n\t\t\n\tEnd If\n\tiLogicVb.RunRule(\"Update Parameters\")", "Sub Main()\n\tDim oDoc As Document\n\toDoc=ThisDoc.Document\n\t\n        Dim oDef As AssemblyComponentDefinition\n        oDef = oDoc.ComponentDefinition\n\t\n\tDim oParam As Parameter\n\toParam = oDef.Parameters.Item(\"TRAVESSAS\")\n\t\n\tDim oPattern As RectangularOccurrencePattern\n\tFor Each oPattern In oDef.OccurrencePatterns\n\t\t\n\t\tIf oParam.Value = \"TRAVESSA OCULTA 1945\" Then\n\t\t\t\n\t\t\toPattern.ColumnCount.Expression = QTDE_DE_TRAVESSAS\n\t\t\toPattern.ColumnOffset.Expression = DIST_ENTRE_TRAVESSAS\n\t\t\t\n\t\tElseIf oParam.Value=\"TRAVESSA OCULTA 2024\" Then\n\t\t\toPattern.ColumnCount.Expression = QTDE_DE_TRAVESSAS\n\t\t\toPattern.ColumnOffset.Expression = DIST_ENTRE_TRAVESSAS\n\t\t\t\n\t\tElseIf oParam.Value=\"TRAVESSA OCULTA 1964 (likeinox)\" Then\n\t\t\toPattern.ColumnCount.Expression = QTDE_DE_TRAVESSAS\n\t\t\toPattern.ColumnOffset.Expression = DIST_ENTRE_TRAVESSAS\n\t\t\t\n\t\tEnd If\n\t\n\tNext\n\t\n\tThisApplication.UserInterfaceManager.DoEvents()\n\tInventorVb.DocumentUpdate()\n\tiLogicVb.UpdateWhenDone=True\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Use VBA to get the distance between all sketch points and the target point\n                    ", "solution": ["Sub getdistance()\n\n    Dim oSketch As PlanarSketch\n    Set oSketch = ThisApplication.ActiveEditObject\n    \n    Dim oPoint As Point2d\n    Set oPoint = ThisApplication.TransientGeometry.CreatePoint2d(1, 1)\n\n    Dim oSPs As SketchPoint\n    For Each oSPs In oSketch.SketchPoints\n    If oSPs.HoleCenter = True Then\n        Debug.Print oPoint.X - oSPs.Geometry.X\n        Debug.Print oPoint.Y - oSPs.Geometry.Y\n    End If\n    Next oSPs\n\nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: VBA: Delete unattached dimension - different behaviour with breakpoint in co\n                    ", "solution": [], "author": "mr_ensing"},
{"created at": [], "solution Title": "\n                        Re: Intercept click new file button\n                    ", "solution": ["m_inventorApplication.FileUIEvents.OnFileNewDialog += FileUIEvents_OnFileNewDialog;\n\n\nprivate void FileUIEvents_OnFileNewDialog(string TemplateDir, int ParentHWND, out string TemplateFileName, NameValueMap Context, out HandlingCodeEnum HandlingCode)\n        {\n       ....\n            TemplateFileName = \"\";\n            HandlingCode = HandlingCodeEnum.kEventHandled;\n        }"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: ThisAssembly.BeginManage/EndManage in subassembly?\n                    ", "solution": [], "author": "t_stramr"},
{"created at": [], "solution Title": "\n                        Re: How do I get the selectset properties during command execution?\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Print only A4 Sheets in a Drawing\n                    ", "solution": ["Dim oDrawing As Inventor.DrawingDocument\noDrawing = ThisApplication.ActiveDocument\nDim oSheet As Inventor.Sheet\n\nFor Each oSheet In oDrawing.Sheets\n\n\t\tIf oSheet.Size =  Inventor.DrawingSheetSizeEnum.kA4DrawingSheetSize And oSheet.Orientation = Inventor.PageOrientationTypeEnum.kPortraitPageOrientation Then\n  \t\t\t ActiveSheet = ThisDrawing.Sheet(oSheet.Name)\n \n\n\t\t\toPrintMgr = ThisApplication.ActiveDocument.PrintManager\n\t\t\t'oPrintMgr.ColorMode = kPrintGrayScale\n\t\t\toPrintMgr.ColorMode = kPrintColorPalette\n\t\t\toPrintMgr.NumberOfCopies = 1\n\t\t\toPrintMgr.ScaleMode = kPrintFullScale\n\t\t\toPrintMgr.Orientation = kPortraitOrientation\n\t\t\t'oPrintMgr.Orientation = kLandscapeOrientation\n\t\t\toPrintMgr.PaperSize = kPaperSizeA4\n\t\t\toPrintMgr.PaperHeight = 210 mm\n\t\t\toPrintMgr.PaperWidth = 297 mm\n\t\t\toPrintMgr.SubmitPrint\n\t\tEnd If \n\n\t\tIf oSheet.Size = Inventor.DrawingSheetSizeEnum.kA4DrawingSheetSize And oSheet.Orientation = Inventor.PageOrientationTypeEnum.kLandscapePageOrientation Then \t\t\n\t\t\t ActiveSheet = ThisDrawing.Sheet(oSheet.Name)\n\t\t\toPrintMgr = ThisApplication.ActiveDocument.PrintManager\n\t\t\t'oPrintMgr.ColorMode = kPrintGrayScale\n\t\t\toPrintMgr.ColorMode = kPrintColorPalette\n\t\t\toPrintMgr.NumberOfCopies = 1\n\t\t\toPrintMgr.ScaleMode = kPrintFullScale\n\t\t\t'oPrintMgr.Orientation = kPortraitOrientation\n\t\t\toPrintMgr.Orientation = kLandscapeOrientation\n\t\t\toPrintMgr.PaperSize =  kPaperSizeA4\n\t\t\toPrintMgr.PaperHeight = 297 mm\n\t\t\toPrintMgr.PaperWidth = 210 mm\n\t\t\toPrintMgr.SubmitPrint\t\t\t        \n\t\tEnd If\nNext", "Public Sub main()\n\nDim oDrawing As Inventor.DrawingDocument\noDrawing = ThisApplication.ActiveDocument\nDim oSheet As Inventor.Sheet\nDim oPrintMgr As Inventor.PrintManager\noPrintMgr = ThisApplication.ActiveDocument.PrintManager\nFor Each oSheet In oDrawing.Sheets\n'MsgBox oSheet.Orientation\nDim ActiveSheet As Sheet\n        If oSheet.Size = kA4DrawingSheetSize And oSheet.Orientation = kPortraitPageOrientation Then\n        oSheet.Activate\n\n            MsgBox \"P\"\n            oPrintMgr.ColorMode = kPrintColorPalette\n            oPrintMgr.NumberOfCopies = 1\n            oPrintMgr.ScaleMode = kPrintFullScale\n            oPrintMgr.Orientation = kPortraitOrientation\n\n            oPrintMgr.PaperSize = kPaperSizeA4\n            oPrintMgr.PaperHeight = 210\n            oPrintMgr.PaperWidth = 297\n            oPrintMgr.SubmitPrint\n        End If\n\n        If oSheet.Size = kA4DrawingSheetSize And oSheet.Orientation = kLandscapePageOrientation Then\n       \n        oSheet.Activate\n\n            MsgBox \"L\"\n            'oPrintMgr = ThisApplication.ActiveDocument.PrintManager\n\n            oPrintMgr.ColorMode = kPrintColorPalette\n            oPrintMgr.NumberOfCopies = 1\n            oPrintMgr.ScaleMode = kPrintFullScale\n\n            oPrintMgr.Orientation = kLandscapeOrientation\n            oPrintMgr.PaperSize = kPaperSizeA4\n            oPrintMgr.PaperHeight = 297\n            oPrintMgr.PaperWidth = 210\n            oPrintMgr.SubmitPrint\n        End If\nNext\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Error message when trying to add Reference to VB.Net form.\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Displaying a view into a PictureBox\n                    ", "solution": ["    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n        Dim invApp As Inventor.Application\n        invApp = GetObject(, \"Inventor.Application\")\n\n        Dim view As View = invApp.ActiveView\n        view.SaveAsBitmap(\"C:\\Temp\\Junk.png\", Me.PictureBox1.Width, Me.PictureBox1.Height)\n\n        PictureBox1.Image = Image.FromFile(\"C:\\Temp\\Junk.png\")\n    End Sub"], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: How to get the pixel coordinates of the sketch point on the screen\n                    ", "solution": ["Dim skCoord\u00a0As Point2D\nDim sk As PlanarSketch\nGetAPointInSketchSpaceSomehow(skCoord, sk)\n\nDim modelPoint as Point\nmodelPoint = sk.SketchToModelSpace(skCoord)\n\nDim viewPoint as Point2D\nDim cam as Camera = ThisApplication.ActiveView.Camera\nviewPoint = cam.ModelToViewSpace(modelPoint)"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Get Item Weight From Partslist\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Get ChamferNote Values and Tolerances\n                    ", "solution": ["<Distance1 ", "Precision='3'", " AlternatePrecision='0' UpperTolerance='0.000000' LowerTolerance='0.000000' ToleranceType='kSymmetricTolerance' TolerancePrecision='2' ToleranceAlternatePrecision='2'></Distance1> X <Angle ", "Precision='2'", " UpperTolerance='0.000000' LowerTolerance='0.000000' ToleranceType='kSymmetricTolerance' TolerancePrecision='2'></Angle> Chamfer", "Sub Main()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    \n    Dim oChamferNote As ChamferNote\n    Set oChamferNote = oSheet.DrawingNotes.ChamferNotes.Item(1)\n    \n    Debug.Print oChamferNote.FormattedChamferNote\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ilogic 2019 fail\n                    ", "solution": [], "author": "jletcher"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Ilogic to change name in browser tree - VIEW1:\n                    ", "solution": ["'", "Takes the part shown in the 1st view", "\n'", "of the current sheet's DrawingViews collection", "\n", "oDrawingDoc", " ", "=", " ", "ThisDrawing", ".", "Document", "\n", "oSheet", " ", "=", " ", "ActiveSheet", ".", "Sheet", "\n", "oDrawingView", " ", "=", " ", "oSheet", ".", "DrawingViews", "(", "1", ")", "\n", "oPart", " ", "=", " ", "ActiveSheet", ".", "View", "(", "oDrawingView", ".", "Name", ")", ".", "ModelDocument", "\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Difference between doc.SaveAs(true) and PDF.AddIn.SaveCopyAs()\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Change date format of custom iProperty\n                    ", "solution": ["Sub Main()\n\n    Dim invApp As Inventor.Application = ThisApplication\n    Dim oDoc As Inventor.Document = invApp.ActiveDocument\n    Dim oPropSet As PropertySet = oDoc.PropertySets(\"Inventor User Defined Properties\")\n    Dim oProp As Inventor.Property\n    \n    Try\n    \toProp = oPropSet(\"MyProp\")\n    Catch\n        oProp = oPropSet.Add(Now.ToString(\"dd-MMM-yy\"), \"MyProp\")\n    End Try\n\n\tDim d As Date\n\tTry\n\t\tDim arr() As String = Split(oProp.Value, \"/\", 3)\n\t\td = DateSerial(arr(2), arr(1), arr(0))\n\t\toProp.Value = Microsoft.VisualBasic.Strings.Format(d,\"dd-MMM-yy\")\n\tCatch\n\tEnd Try\n\nEnd Sub"], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: ILogic to Set Assembly Cut Participants BOM Structure to Reference\n                    ", "solution": ["Dim oAsmDoc As AssemblyDocument\noAsmDoc= ThisApplication.ActiveDocument\n\nDim oCompDef As AssemblyComponentDefinition\noCompDef = oAsmDoc.ComponentDefinition\n\nDim oAssemblyFeatures As Features\noAssemblyFeatures = oCompDef.Features\n\nDim oAssemblyFeature As PartFeature\nDim oAssyFeatureParticipant As ComponentOccurrence\n\nFor Each oAssemblyFeature In oAssemblyFeatures\n\tIf oAssemblyFeature.Name = \"Extrusion 88\" Then\n\t\t'Set the participents to Refrence\n\t\tFor Each oAssyFeatureParticipant In oAssemblyFeature.Participants\n\t\t\t'(Set the participent to Refrence)\n\t\t\toAssyFeatureParticipant.BOMStructure = BOMStructureEnum.kReferenceBOMStructure \n\t\tNext\n\tEnd If\nNext \n\nFor Each oAssemblyFeature In oAssemblyFeatures\n\tIf oAssemblyFeature.Name  = \"Extrusion 99\" Then\n\t'Set the participents to Refrence\n\tFor Each oAssyFeatureParticipant In oAssemblyFeature.Participants\n\t\t'(Set the participent to Defalt)\n\t\toAssyFeatureParticipant.BOMStructure=BOMStructureEnum.kDefaultBOMStructure\n\tNext\n\tEnd If\nNext"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: LODs as  Multi value list?\n                    ", "solution": ["Private Sub ListBox1_Click()\nDim a As Application\nSet a = ThisApplication\n\nDim b As AssemblyDocument\nSet b = a.ActiveDocument\n\nDim LOD As LevelOfDetailRepresentation\nDim LODS As LevelOfDetailRepresentations\nSet LODS = b.ComponentDefinition.RepresentationsManager.LevelOfDetailRepresentations\n\nLODS.Item(ListBox1.Text).Activate\nEnd Sub\n\nPrivate Sub UserForm_activate()\nDim a As Application\nSet a = ThisApplication\n\nDim b As AssemblyDocument\nSet b = a.ActiveDocument\n\nDim LOD As LevelOfDetailRepresentation\nDim LODS As LevelOfDetailRepresentations\nSet LODS = b.ComponentDefinition.RepresentationsManager.LevelOfDetailRepresentations\n\nFor Each LOD In LODS\nListBox1.AddItem LOD.Name\n\nNext\nEnd Sub", "\u00a0"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Placing part in context of main assembly\n                    ", "solution": [], "author": "marcinbaron"},
{"created at": [], "solution Title": "\n                        Re: How to delete specific rule using VBA\n                    ", "solution": ["Call iLogic.Automation.DeleteRule(ThisApplication.ActiveDocument, \"MyRule\")"], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: getting derived assemblies from master ipart to function in the background\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: how to use ShrinkwrapComponents and ShrinkwrapDefinition API\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: ComboBox in Ribbon Panel with vb.net\n                    ", "solution": ["Private Sub ComboBox1_OnSelect(Context As NameValueMap) Handles ComboBox1.OnSelect\n            MsgBox(Context.Text)\n        End Sub\n    End Class", "Public Class FreeTools_3DCS\n    Implements Inventor.ApplicationAddInServer\n    Public WithEvents comboBox1 As ComboBoxDefinition\n.........", "'Combo Box Definitions\n                comboBox1 = AddinGlobal.InventorApp.CommandManager.ControlDefinitions.AddComboBoxDefinition(\n                        \"Value1\", \"Value2\", CommandTypesEnum.kQueryOnlyCmdType,\n                        400, Guid.NewGuid().ToString(),\n                        \"Browsernanmen wiederherstellen\", \"Stellt den urspr\u00fcnglichen Display Namen der zugeh\u00f6rigen Datei wieder her\",\n                        ButtonDisplayEnum.kDisplayTextInLearningMode)\n\n                comboBox1.AddItem(\"Value1\")\n                comboBox1.AddItem(\"Value2\")\n                comboBox1.AddItem(\"ComboBoxItem #3\")\n                comboBox1.DescriptionText = \"Test ComboBox\"\n                comboBox1.ListIndex = 1\n                AddHandler comboBox1.OnSelect, AddressOf ComboBox1_OnSelect", "Private Sub ComboBox1_OnSelect()\n MsgBox(comboBox1.Text & \" - \" & comboBox1.ListIndex.ToString)\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Inventor Api - Set focus back to inventor\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Create subfolder in an assembly\n                    ", "solution": ["Public Sub BrowserFolders1()\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    Dim pane As BrowserPane\n    Set pane = asmDoc.BrowserPanes.ActivePane\n    \n    Dim topFolder As BrowserFolder\n    Set topFolder = pane.AddBrowserFolder(\"Top Folder\")\n    \n    Dim subFolder As BrowserFolder\n    Set subFolder = pane.AddBrowserFolder(\"Sub Folder\")\n    \n    Call topFolder.Add(subFolder.BrowserNode)\nEnd Sub\n\nPublic Sub BrowserFolders2()\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    Dim pane As BrowserPane\n    Set pane = asmDoc.BrowserPanes.ActivePane\n    \n    Dim subFolder1 As BrowserFolder\n    Set subFolder1 = pane.AddBrowserFolder(\"Sub Folder 1\")\n    \n    Dim subFolder2 As BrowserFolder\n    Set subFolder2 = pane.AddBrowserFolder(\"Sub Folder 2\")\n    \n    Dim folders As ObjectCollection\n    Set folders = ThisApplication.TransientObjects.CreateObjectCollection\n    Call folders.Add(subFolder1.BrowserNode)\n    Call folders.Add(subFolder2.BrowserNode)\n    \n    Dim topFolder As BrowserFolder\n    Set topFolder = pane.AddBrowserFolder(\"Top Folder\", folders)\nEnd Sub"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Flat pattern in macro doesnt work\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: auto resize idw views when model linked to spreadsheet changes size\n                    ", "solution": ["Dim", " ", "oApp", " ", "As", " ", "Application", "\n", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "Dim", " ", "oDD", " ", "As", " ", "DrawingDocument", "\n", "Dim", " ", "oSht", " ", "As", " ", "Sheet", "\n", "Dim", " ", "oBV", " ", "As", " ", "DrawingView", "\n", "Dim", " ", "oLabel", " ", "As", " ", "DrawingViewLabel", "\n", "Dim", " ", "oPt", " ", "As", " ", "Point2d", "\n", "Dim", " ", "oTg", " ", "As", " ", "TransientGeometry", "\n", "oApp", " ", "= ", "ThisApplication", "\n", "oDoc", " = ", "oApp", ".", "ActiveDocument", "\n\u00a0\n", "If", " ", "oDoc", ".", "DocumentType", " = ", "DocumentTypeEnum", ".", "kDrawingDocumentObject", " ", "Then", "\n", "oDD", " = ", "oDoc", "\n", "oSht", " = ", "oDD", ".", "ActiveSheet", "\n", "oBV", " = ", "oSht", ".", "DrawingViews", ".", "Item", "(1)\n", "oLabel", " = ", "oBV", ".", "Label", "\n", "oPt", " = ", "oLabel", ".", "Position", "\n", "oTg", " = ", "oApp", ".", "TransientGeometry", "\n", "oBV", ".", "ScaleString", " = ", "\"1 : 1\"", "\n", "BaseWidth", " = 51.87\n", "If", " ", "Round", "(", "oBV", ".", "Width", ", 2) > ", "BaseWidth", " ", "Then", "\n", "SetScale", " = ", "Round", "(", "oBV", ".", "Width", " / ", "BaseWidth", ", 0)\n", "oBV", ".", "ScaleString", " = ", "\"1 : \"", " & ", "SetScale", "\n", "End", " ", "If", "\n", "oLabel", ".", "Position", " = ", "oTg", ".", "CreatePoint2d", "(", "oBV", ".", "Position", ".", "X", ", (", "oBV", ".", "Position", ".", "Y", " - (", "oBV", ".", "Height", " / 2)))\n", "Else", "\n", "MsgBox", " ", "(", "\"Only for Drawing Document Type!\"", ", ", "vbCritical", ", ", "\"Warning\"", ")", "End", " ", "If"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Visual Studio Community 2017 vs Visual Studio Code for Inventor coding\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: iLogic link between MessageBox Yesbutton and InputBox\n                    ", "solution": [], "author": "Thomas_Savage"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Design Doctor\n                    ", "solution": ["Public Sub TestProblems()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n\n    If PartHasProblems(partDoc) Then\n        MsgBox \"Part has problems\"\n    Else\n        MsgBox \"Part is OK\"\n    End If\nEnd Sub\n\nPublic Function PartHasProblems(partDoc As PartDocument) As Boolean\n    Dim feature As PartFeature\n    For Each feature In partDoc.ComponentDefinition.Features\n        If feature.HealthStatus <> kUpToDateHealth And _\n           feature.HealthStatus <> kBeyondStopNodeHealth And _\n           feature.HealthStatus <> kSuppressedHealth Then\n            PartHasProblems = True\n            Exit Function\n        End If\n    Next\n    \n    PartHasProblems = False\nEnd Function"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: iLogic Activate sheet that had Red Lightning Bolt\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Alternative to Lengthy \"If Else\" Statements\n                    ", "solution": ["        Select Case DoorChoice\n            Case \"Saturn - 3 Wing\"\n                Tcs = \"True\"\n                Fcs = \"False\"\n                TWsat = \"True\"\n                TWcom = \"False\"\n                TWext = \"False\"\n                FWsat = \"False\"\n                FWcom = \"False\"\n                FWext = \"False\"\n            Case \"Comet - 3 Wing\"\n                Tcs = \"True\"\n                Fcs = \"False\"\n                TWsat = \"False\"\n                TWcom = \"True\"\n                TWext = \"False\"\n                FWsat = \"False\"\n                FWcom = \"False\"\n                FWext = \"False\"\n            Case \"Saturn Extrusion - 3 Wing\"\n                Fcs = \"False\"\n                TWsat = \"False\"\n                TWcom = \"False\"\n                TWext = \"True\"\n                FWsat = \"False\"\n                FWcom = \"False\"\n                FWext = \"False\"\n            Case \"Saturn - 4 Wing\"\n                Tcs = \"False\"\n                Fcs = \"True\"\n                TWsat = \"False\"\n                TWcom = \"False\"\n                TWext = \"False\"\n                FWsat = \"True\"\n                FWcom = \"False\"\n                FWext = \"False\"\n            Case \"Comet - 4 Wing\"\n                Tcs = \"False\"\n                Fcs = \"True\"\n                TWsat = \"False\"\n                TWcom = \"False\"\n                TWext = \"False\"\n                FWsat = \"False\"\n                FWcom = \"True\"\n                FWext = \"False\"\n            Case \"Saturn Extrusion - 4 Wing\"\n                Tcs = \"False\"\n                Fcs = \"True\"\n                TWsat = \"False\"\n                TWcom = \"False\"\n                TWext = \"False\"\n                FWsat = \"False\"\n                FWcom = \"False\"\n                FWext = \"True\"\n        End Select"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: To build up rule commomn for Part, Assembly and Drawing Documents\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: iLogic: If A=1 or if B=, do something.\n                    ", "solution": [], "author": "Yijiang.Cai"},
{"created at": [], "solution Title": "\n                        Re: Struggling with language in iLogic\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Efficient way to loop through hundreds of occurrences in assembly file\n                    ", "solution": [], "author": "Brett.G"},
{"created at": [], "solution Title": "\n                        Re: ilogic export step to custom directory\n                    ", "solution": ["CurrentFile = Stepfilename & Rev & \".stp\"", "CurrentFile = \"C:\\Mylocation\\\" & Stepfilename & Rev & \".stp\""], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Export Mass Properties, CG, Density to Excel\n                    ", "solution": [], "author": "seth.moffit"},
{"created at": [], "solution Title": "\n                        Re: Problems with Content Center\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Ilogic - unable to see new external rule in iLogic browser\n                    ", "solution": [], "author": "dpuchta"},
{"created at": [], "solution Title": "\n                        Re: \"Object variable or With block variable not set\" Please help\n                    ", "solution": [], "author": "MaximUdod"},
{"created at": [], "solution Title": "\n                        Re: iLogic: control the visibility of one body\n                    ", "solution": ["D", "im", " ", "oApp", " ", "As", " ", "Application", "\n", "Dim", " ", "oPD", " ", "As", " ", "PartDocument", "\n", "Dim", " ", "oPCD", " ", "As", " ", "PartComponentDefinition", "\n", "Dim", " ", "oSurfBody", " ", "As", " ", "SurfaceBody", "\n\n", "oApp", " = ", "ThisApplication", "\n", "oPD", " = ", "oApp", ".", "ActiveDocument", "\n", "oPCD", " = ", "oPD", ".", "ComponentDefinition", "\n\n", "For", " ", "Each", " ", "oSurfBody", " ", "In", " ", "oPCD", ".", "SurfaceBodies", "\n    ", "If", " ", "oSurfBody", ".", "Name", " = ", "\"Sliderail\"", " ", "Then", "\n        if Sliderail = \"Yes\" then", "\t\toSurfBody.Visible = True", "\telse", "\t\t", "oSurfBody", ".", "Visible", " = ", "False", "\tend if", "\n    ", "End", " ", "If", "\n", "Next"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: VBA can't use component occurrence as argument of a function\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Ilogic How to get a custom Property from ASSY to all Children parts\n                    ", "solution": ["Dim", " ", "oApp", " ", "As", " ", "Application", "\n", "Dim", " ", "oAD", " ", "As", " ", "AssemblyDocument", "\n", "Dim", " ", "oACD", " ", "As", " ", "AssemblyComponentDefinition", "\n", "Dim", " ", "oSub", " ", "As", " ", "Document", "\n", "Dim", " ", "oMainPropSet", " ", "As", " ", "PropertySet", "\n", "Dim", " ", "oSubPropSet", " ", "As", " ", "PropertySet", "\n", "Dim", " ", "oMainProp", " ", "As", " ", "[Property]", "\n", "Dim", " ", "oSubProp", " ", "As", " ", "[Property]", "\n", "Dim", " ", "MyDate", " ", "As", " ", "Date", "\n", "MyDate", " = ", "\"7/15/2018\"", "\n\n", "oApp", " = ", "ThisApplication", "\n", "oAD", " = ", "oApp", ".", "ActiveDocument", "\n", "oACD", " = ", "oAD", ".", "ComponentDefinition", "\n", "oMainPropSet", " = ", "oAD", ".", "PropertySets", ".", "Item", "(", "\"User Defined Properties\"", ")\n", "oMainProp", " = ", "oMainPropSet", ".", "Item", "(", "\"Delivery Date\"", ")\n", "oMainProp", ".", "Value", " = ", "MyDate", "\n\n", "For", " ", "Each", " ", "oSub", " ", "In", " ", "oAD", ".", "AllReferencedDocuments", "\n    ", "oSubPropSet", " = ", "oSub", ".", "PropertySets", ".", "Item", "(", "\"User Defined Properties\"", ")\n    ", "On", " ", "Error", " ", "Resume", " ", "Next", "\n    ", "oSubProp", " = ", "oSubPropSet", ".", "Item", "(", "\"Delivery Date\"", ")\n    \n    ", "If", " ", "Err", ".", "Number", " <> 0 ", "Then", "\n        ", "Call", " ", "oSubPropSet", ".", "Add", "(", "MyDate", ", ", "\"Delivery Date\"", ")\n    ", "Else", "\n        ", "oSubProp", ".", "Value", " = ", "MyDate", "\n    ", "End", " ", "If", "\n", "Next"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Change sheet borders in several sheets at once\n                    ", "solution": ["'Define the drawing", "\n", "Dim", " ", "oDrawing", " ", "As", " ", "DrawingDocument", "\n", "oDrawing", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "Dim", " ", "oBorder", " ", "As", " ", "Border", "\n", "Dim", " ", "oBorderDef", " ", "As", " ", "BorderDefinition", "\n\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDrawing", ".", "Sheets", "\n\n", "If", " ", "oSheet", ".", "Orientation", " = ", "kPortraitPageOrientation", " ", "Then", "\n    ", "If", " ", "oSheet", ".", "Size", " = ", "kA0DrawingSheetSize", " ", "Then", "\n        ", "If", " ", "oSheet", ".", "Border", ".", "Name", " = ", "\"A0_V\"", " ", "Then", "\n            ", "'Do Nothing", "\n        ", "Else", "\n            ", "oSheet", ".", "Border", ".", "Delete", "\n            ", "oBorderDef", " = ", "oDrawing", ".", "BorderDefinitions", ".", "Item", "(", "\"A0_V\"", ")\n            \n            ", "Call", " ", "oSheet", ".", "AddBorder", "(", "oBorderDef", ")\n        ", "End", " ", "If", "\n    ", "ElseIf", " ", "oSheet", ".", "Size", " = ", "kA1DrawingSheetSize", " ", "Then", "\n        ", "If", " ", "oSheet", ".", "Border", ".", "Name", " = ", "\"A1_V\"", " ", "Then", "\n            ", "'Do Nothing", "\n        ", "Else", "\n            ", "oSheet", ".", "Border", ".", "Delete", "\n            ", "oBorderDef", " = ", "oDrawing", ".", "BorderDefinitions", ".", "Item", "(", "\"A1_V\"", ")\n            \n            ", "Call", " ", "oSheet", ".", "AddBorder", "(", "oBorderDef", ")\n        ", "End", " ", "If", "\n    ", "End", " ", "If", "\n", "ElseIf", " ", "oSheet", ".", "Orientation", " = ", "kLandscapePageOrientation", " ", "Then", "\n    ", "If", " ", "oSheet", ".", "Size", " = ", "kA0DrawingSheetSize", " ", "Then", "\n        ", "If", " ", "oSheet", ".", "Border", ".", "Name", " = ", "\"A0_H\"", " ", "Then", "\n            ", "'Do Nothing", "\n        ", "Else", "\n            ", "oSheet", ".", "Border", ".", "Delete", "\n            ", "oBorderDef", " = ", "oDrawing", ".", "BorderDefinitions", ".", "Item", "(", "\"A0_H\"", ")\n            \n            ", "Call", " ", "oSheet", ".", "AddBorder", "(", "oBorderDef", ")\n        ", "End", " ", "If", "\n    ", "ElseIf", " ", "oSheet", ".", "Size", " = ", "kA1DrawingSheetSize", " ", "Then", "\n        ", "If", " ", "oSheet", ".", "Border", ".", "Name", " = ", "\"A1_H\"", " ", "Then", "\n            ", "'Do Nothing", "\n        ", "Else", "\n            ", "oSheet", ".", "Border", ".", "Delete", "\n            ", "oBorderDef", " = ", "oDrawing", ".", "BorderDefinitions", ".", "Item", "(", "\"A1_H\"", ")\n            \n            ", "Call", " ", "oSheet", ".", "AddBorder", "(", "oBorderDef", ")\n        ", "End", " ", "If", "\n    ", "End", " ", "If", "\n", "End", " ", "If", "\n\n", "Next"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Get Drawing dimensions of specific views via api\n                    ", "solution": [], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: Check if Dimension is horizontal or vertical Orientation via API\n                    ", "solution": [], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: Direct reading Radius of Fillet Part Feature\n                    ", "solution": [], "author": "MaximUdod"},
{"created at": [], "solution Title": "\n                        Re: Need help modifying an iLogic rule (Sort Bom in drawing)\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Cannot create ActiveX component error when writing to excel\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Read WorkPoint types (separate Wire Pins from the rest)\n                    ", "solution": ["Dim oPartDoc As PartDocument=ThisDoc.Document\nDim oCompDef As ComponentDefinition=oPartDoc.ComponentDefinition\nDim oWP As WorkPoint\nDim oAttr As Attribute\nDim WpMsgBody As String\nDim WpIndx As Integer\n\n' Check if 1st Attribute's Value in 1st AttributeSet is \"ConnectorPin\"\nFor WpIndex=2 To (oCompDef.WorkPoints.Count)-1\noWP=oCompDef.WorkPoints.Item(WpIndex)\nTrace.WriteLine (\"iLogicEcho\" & oWP.Name)\nTry\n\toAttr=oWP.AttributeSets.Item(1).Item(1)\n\tIf oAttr.Value=\"ConnectorPin\" Then WpMsgBody=WpMsgBody & oWP.Name & vbCrLf\nCatch\nEnd Try\nNext\nMsgBox (WpMsgBody,,\"Wire Pins are:\")"], "author": "MaximUdod"},
{"created at": [], "solution Title": "\n                        Re: Get expression of Design Tracking/ User Defined Properties from within Drawi\n                    ", "solution": [], "author": "rwickrama"},
{"created at": [], "solution Title": "\n                        Re: Content Center Part Number Change\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Saving a .idw as a PDF with iLogic\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Loop through all folders in assembly using API\n                    ", "solution": [], "author": "t_hascj"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Custom value = TBD as part number\n                    ", "solution": ["If Length = 4500 And Diameter = 700 Then\n\tiProperties.Value(\"Project\", \"Part Number\") = 123456\t\nElseIf Length = 4500 And Diameter = 800 Then\n\tiProperties.Value(\"Project\", \"Part Number\") = 789123\nElse \n        ", "iProperties.Value(\"Project\", \"Part Number\") = \"TBD\"", "\nEnd If"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Multibody ipart - Form to control active solid bodies\n                    ", "solution": [], "author": "chrisjspower"},
{"created at": [], "solution Title": "\n                        Re: Export DXF to path\n                    ", "solution": ["' Get the DXF translator Add-In.  \nDim DXFAddIn As TranslatorAddIn  \nDXFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC4-122E-11D5-8E91-0010B541CD80}\")  \n'Set a reference to the active document (the document to be published).  \nDim oDocument As Document  \noDocument = ThisApplication.ActiveDocument  \nDim oContext As TranslationContext  \noContext = ThisApplication.TransientObjects.CreateTranslationContext  \noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism  \n' Create a NameValueMap object  \nDim oOptions As NameValueMap  \noOptions = ThisApplication.TransientObjects.CreateNameValueMap  \n' Create a DataMedium object  \nDim oDataMedium As DataMedium  \noDataMedium = ThisApplication.TransientObjects.CreateDataMedium  \n' Check whether the translator has 'SaveCopyAs' options  \nIf DXFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then  \nDim strIniFile As String  \nstrIniFile = \"C:\\Users\\Public\\Documents\\Autodesk\\Inventor 2019\\Design Data\\DWG-DXF\\exportdxf.ini\"     \n' Create the name-value that specifies the ini file to use.  \noOptions.Value(\"Export_Acad_IniFile\") = strIniFile  \nEnd If  \nDim prt_num As Double\nprt_num = CDbl(iProperties.Value(\"Project\", \"Part Number\"))\ninc = 500 ' rounding increment ( .125, .25, .5, etc)\nprt_num = Floor(Round(prt_num,0) / inc) * inc ' round down to nearest 500\n'Set the destination file name  \nDim fldrpath As String\nfldrpath = \"C:\\Temp\\\" & prt_num.ToString\nIf Not System.IO.Directory.Exists(fldrpath) Then\n    System.IO.Directory.CreateDirectory(fldrpath)\nEnd If\noDataMedium.FileName = fldrpath & \"\\\" & ThisDoc.FileName(False) & \".dxf\"  \n'Publish document.  \nDXFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)"], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: Unload Add-In using VBA\n                    ", "solution": ["Public Sub SmarTeamToggle()\n    Dim AddIn As Inventor.ApplicationAddIn\n    For Each AddIn In ThisApplication.ApplicationAddIns\n        If AddIn.DisplayName = \"SMARTEAM Add-In\" Then\n            If AddIn.Activated = True Then\n            AddIn.Deactivate\n            Else\n            AddIn.Activate\n            End If\n        End If\n    Next AddIn\nEnd Sub"], "author": "alasdair.currie"},
{"created at": [], "solution Title": "\n                        Re: iLogic to extract characters from Description iproperty\n                    ", "solution": ["Sub Main()\n\tDim desc As String ", "\tdesc = \"1/2_HYDLINE_LENGTH TL_E1_END1_E2_END2\"", "\t'desc = ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Description\"", ")\n\tDim Indexes As List(Of Integer) = GetIndexes(desc, \"_\")\n\tDim end1 As String = desc.Substring(Indexes(3) + 1, Indexes(4) - Indexes(3) - 1)\n\tMessageBox.Show(end1, \"Result of end1\")\n\tDim end2 As String = desc.Substring(Indexes(5) + 1, desc.Length - Indexes(5) - 1)\n\tMessageBox.Show(end2, \"Result of end2\")\nEnd Sub \n\nPrivate Function GetIndexes(ByVal SearchWithinThis As String, ByVal SearchForThis As String) As List(Of Integer)\n        Dim Result As New List(Of Integer)\n\n        Dim i As Integer = SearchWithinThis.IndexOf(SearchForThis)\n\n        While (i <> -1)\n            Result.Add(i)\n            i = SearchWithinThis.IndexOf(SearchForThis, i + 1)\n        End While\n\n        Return Result\nEnd Function"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Update Browser Display Name\n                    ", "solution": [], "author": "mrawesomelemons"},
{"created at": [], "solution Title": "\n                        Re: Shifting to Factory BIM\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Making parts in a drawing that are suppressed non-visible through iLogic\n                    ", "solution": ["Sub", " ", "Main", " ()\n\t", "Dim", " ", "invDoc", " ", "As", " ", "DrawingDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\t\t\t\t\t\t\t", "'This document (which is active) is given the name invDoc and is defined as a drawing document.", "\n\t", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", " = ", "invDoc", ".", "ActiveSheet", "\t\t\t\t\t\t\t\t\t\t\t\t", "'Is used to tell which sheet in the drawing is active. ", "\n\t", "Dim", " ", "assyFileName", " ", "As", " ", "String", " = ", "\"M:\\ENG\\Design\\Models\\I500000\\550000.iam\"", "\t\t\t\t\t", "'This option automatically places the active model state of the assembly, but shows excluded parts that shouldnt be in the drawing view.", "\n\t", "Dim", " ", "viewName", " ", "As", " ", "String", " = ", "\"BaseIsometric\"", "\t\t\t\t\t\t\t\t\t\t\t\t", "'Names what the view being placed will be called.", "\n\t", "Dim", " ", "sheetCenterVertical", " ", "As", " ", "Single", " = (", "oSheet", ".", "Height", " /2)\t\t\t\t\t\t\t\t\t", "'Defines variable for where the view will be placed (vertical location = sheet height divided by specified number)", "\n\t", "Dim", " ", "baseViewHorizontal", " ", "As", " ", "Single", " = (", "oSheet", ".", "Width", "/3)\t\t\t\t\t\t\t\t\t\t", "'Defines variable for where the view will be placed (horizontal location = sheet width divided by specified number)", "\n\t\n\t", "'MsgBox(sheetCenterVerticle)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Displays the vertical position the view will be placed. used to debug", "\n\t", "'MsgBox(baseViewHorizontal)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Displays the horizontal position the view will be placed. used to debug", "\n\t\n\t", "DeleteBaseView", "(", "oSheet", ")\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "'Deletes any views that are existing on the sheet.", "\n\t", "Dim", " ", "oDocument", " ", "As", " ", "Inventor", ".", "Document", " = ", "ThisApplication", ".", "Documents", ".", "ItemByName", "(", "assyFileName", ")\n\n\t", "ActivePartNumber", " = ", "oDocument", ".", "PropertySets", ".", "Item", "(", "\"Design Tracking Properties\"", ").", "Item", "(", "\"Part Number\"", ").", "Value", "\n\n\t", "filePath", " = ", "\"M:\\ENG\\Design\\Models\\I500000\\550000\\\"", "\n\t", "instanceFilePath", " =  ", "filepath", " & ", "ActivePartNumber", " & ", "\".iam\"", "\n\n\t", "Dim", " ", "modelReference", " ", "As", " ", "Document", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "instanceFilePath", ", ", "False", ")\n\n\t", "Dim", " ", "oPoint", "(1) ", "As", " ", "Point2d", "\n\n\t", "oPoint", "(1) = ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "baseViewHorizontal", ", ", "sheetCenterVertical", ")\t\t\t", "'Defines the location of the point where the view will be placed (x,y)", "\n\t", "Dim", " ", "oScale", " ", "As", " ", "Double", " = 1\n\t", "Dim", " ", "viewOrientation", "(1) ", "As", " ", "ViewOrientationTypeEnum", "\n\t", "viewOrientation", "(1) = 10759\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "'Sets the view orientation (Iso view, front view, side view, etc.) codes can be found at http://help.autodesk.com/view/INVNTOR/2018/ENU/?guid=GUID-A3A8B201-5C21-4881-B3C3-6B58E5E66920", "\n\t", "Dim", " ", "viewStyle", " ", "As", " ", "DrawingViewStyleEnum", " = 32258\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "'Sets the drawign view style (Hidden lines, Hidden lines removed, ETC.) codes can be found at http://help.autodesk.com/view/INVNTOR/2018/ENU/?guid=GUID-8EDD58CF-665C-493E-A957-147FDE7996B4", "\n\t", "Dim", " ", "oBaseView", " ", "As", " ", "DrawingView", " = ", "oSheet", ".", "DrawingViews", ".", "AddBaseView", "(", "modelReference", ", ", "oPoint", "(1), ", "oScale", ", ", "viewOrientation", "(1), ", "viewStyle", ")\t\t\t", "'Defines the variable for the base view. adds the view(what model is being used, where it is being placed, view scale, orientation type, style type)", "\n\t", "oBaseView", ".", "Name", " = ", "viewName", "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "'Gives the view just placed the name specified above in viewName", "\n\t\n\t", "For", " ", "Each", " ", "view", " ", "As", " ", "DrawingView", " ", "In", " ", "oSheet", ".", "DrawingViews", "\n\t\t", "If", " ", "view", ".", "Name", " = ", "viewName", " ", "Then", "\n\t\t\t", "SetBaseViewScale", "(", "oSheet", ", ", "oBaseView", ")\t\t\t\t\t\t\t\t\t\t\t\t", "'View actually shows up on drawing in the location, size, orientation and style as specified", "\n\t\t", "End", " ", "If", "\n\t", "Next", "\n", "End", " ", "Sub", "\n\n", "Function", " ", "DeleteBaseView", "(", "oSheet", " ", "As", " ", "Sheet", ")\n\t", "For", " ", "Each", " ", "view", " ", "As", " ", "DrawingView", " ", "In", " ", "oSheet", ".", "DrawingViews", "\n\t\t", "view", ".", "Delete", "()\n\t", "Next", "\n", "End", " ", "Function", "\n\n", "Function", " ", "SetBaseViewScale", "(", "oSheet", " ", "As", " ", "Sheet", ", ", "oBaseView", " ", "As", " ", "DrawingView", ")\n\t", "Dim", " ", "viewScale", " ", "As", " ", "Double", " = ", "Nothing", "\n\t", "Dim", " ", "TrueViewHeight", " ", "As", " ", "Double", " = ", "oBaseView", ".", "Height", "\n\t", "Dim", " ", "viewHeight", " ", "As", " ", "Double", " = (", "oSheet", ".", "Height", " * .45)\n\t", "viewScale", " = (", "viewHeight", " / ", "TrueViewHeight", ")\n\t", "oBaseView", ".", "Scale", " = ", "viewScale", "\n\t", "iLogicVb", ".", "UpdateWhenDone", " = ", "True", "\n", "End", " ", "Function"], "author": "jwesselsHZJ98"},
{"created at": [], "solution Title": "\n                        Re: iLogic ask to choose from list of ID based on OD of tube in Description.\n                    ", "solution": ["\t", "Dim", " ", "oSize125", " ", "As", " ", "New", " ", "ArrayList", "\n\t", "oSize125", ".", "Add", "(", "\"0.049\"", ")\n\t", "oSize125", ".", "Add", "(", "\"0.095\"", ")\n\t", "oSize125", ".", "Add", "(", "\"0.120\"", ")\n\n\t", "Dim", " ", "oV", " ", "As", " ", "String", "\n\n\t", "oV", " = ", "InputListBox", "(", "\"Available ID Sizes\"", ", ", "oSize125", ", ", "oSize125", ", ", "Title", " := ", "\"Available Sizes for OD\"", ", ", "ListName", " := ", "\"Please choose one of the following available ID sizes for OD        .\"", ")\n\n\t", "oContents", "(1) = ", "\"1.250 X \"", " & ", "oV", " & ", "\" J524\""], "author": "Saqib.Iqbal"},
{"created at": [], "solution Title": "\n                        Re: Sharing a movable model without allowing them to see details\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Ilogic - Selecting Iparts with a form within an Iassebly\n                    ", "solution": [], "author": "Mark.Lancaster"},
{"created at": [], "solution Title": "\n                        Re: SOS-----iLogic: Export Parts List error\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Access \"Change Size\" for a Content Center Component through the AP\n                    ", "solution": ["Public sub Main", "Dim CmdMan As ControlDefinition\n    'Set CmdMan = ThisApplication.CommandManager.ControlDefinitions.Item(\"", "Command Name", "\")\n    ", "Set CmdMan = ThisApplication.CommandManager.ControlDefinitions.Item(\"CCV2ChangeSizeButtonCM", "\")", "\n\tCmdMan.Execute\n    \tCmdMan.Execute2 (True)", "end sub", "-----------\nThese are the possible other ", "command names:", "\nCCV2ChangeSizeButtonCM                                Change size of Standard Component\nCCV2EditorButton                                      Open Content Center Editor\nCCV2OpenButton                                        Open Component from Content Center\nCCV2OpenCWButton                                      Access Autodesk Manufacturing Supplier Content Center\nCCV2PlaceButton                                       Place Component from Content Center\nCCV2PlaceButtonCM                                     Place Component from Content Center\nCCV2PlaceFeatureButton                                Place Feature from Content Center\nCCV2PlaceFeatureButtonCM                              Place Feature from Content Center\nCCV2PublishButton                                     Publish Part to Content Center\nCCV2ReplaceButton                                     Replace Component with Component from Content Center\nCCV2ReplaceButtonCM                                   Replace Component with Component from Content Center\nCCV2RSCButton", " Sub Main()\n\tIf ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\n\t\tMessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\n\t\tExit Sub\n\tEnd If\n\t\n\tDim oHexHeadNode As ContentTreeViewNode = ThisApplication.ContentCenter.TreeViewTopNode.ChildNodes.Item(\"Standard Parts & Assemblies\")\n\t\n\tDim oFamily As ContentFamily\n    For Each oCheckFamily As ContentFamily In oHexHeadNode.Families()\n        If oCheckFamily.DisplayName() = \"Family Name\" Then\n            oFamily = oCheckFamily\n            Exit For\n        End If\n    Next\n\t\n\tDim oString As String = oFamily.ContentIdentifier()\n\tThisApplication.CommandManager.PostPrivateEvent(PrivateEventTypeEnum.kStringEvent, oString)\n\tThisApplication.CommandManager.ControlDefinitions.Item(\"CCV2PlaceButtonCM\").Execute()\n End Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2019 Apprentice - Print IDW to PDF\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: *.idw saveas PDF \u6211\u6709\u56f0\u60d1\n                    ", "solution": ["PDFPath", " & ", "\"\\\"", " & ", "ThisDoc", ".", "FileName", "(", "False", ") & ", "\" \"", " & ", "Kubh", " & (", "\".pdf\"", ")\u00a0\u00a0", "'Set the PDF target file name", "\n", "oDataMedium", ".", "FileName", " = ", "ExportPath", " & ", "ExportFilename", "oFileName", " = ThisDrawing.Sheet(\"Sheet:1\").View(\"VIEW1\").ModelDocument.PropertySets.Item(3).Item(\"Stock Number\").Value"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Suppress Part with iLogic\n                    ", "solution": [], "author": "Mark.Lancaster"},
{"created at": [], "solution Title": "\n                        Re: Inventor using iLogic to change model tolerance of hole feature\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: ilogic setting values to an array\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: ilogic to project sketch entities of a feature\n                    ", "solution": ["Public Sub AutoProject()\n    '  a reference to the currently active document.\n    ' This assumes that it is a part document.\n    Dim oPart As PartDocument\n    Set oPart = ThisApplication.ActiveDocument\n    \n    '  a reference to the component definition.\n    Dim oDef As PartComponentDefinition\n    Set oDef = oPart.ComponentDefinition\n    \n    Dim planeEnt As Object\n    Set planeEnt = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllPlanarEntities, \"Select plane to create the sketch.\")\n       \n    Dim oSketch As PlanarSketch\n    Set oSketch = oDef.Sketches.Add(planeEnt)\n    \n    Dim sketchName As String\n    sketchName = InputBox(\"Give your new sketch a name\", \"Sketch Name\", \"Enter Sketch Name Here\")\n    oSketch.name = sketchName\n    \n    Dim feat As PartFeature\n    Set feat = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartFeatureFilter, \"Select the feature to project\")\n    \n    ' Iterate over the faces that were created by the feature.\n    Dim usedEdges As ObjectCollection\n    Set usedEdges = ThisApplication.TransientObjects.CreateObjectCollection\n    Dim featFace As Face\n    For Each featFace In feat.faces\n        ' Iterate over the edges in the faces.\n        Dim featEdge As Edge\n        For Each featEdge In featFace.Edges\n            ' Check to see if this edge has already been projected.\n            Dim checkEdge As Edge\n            Dim isUsed As Boolean\n            isUsed = False\n            For Each checkEdge In usedEdges\n                If featEdge Is checkEdge Then\n                    isUsed = True\n                    Exit For\n                End If\n            Next\n            \n            If Not isUsed Then\n                ' Project the edge onto the sketch.\n                Call oSketch.AddByProjectingEntity(featEdge)\n                \n                ' Add this edge to the list of used edges.\n                Call usedEdges.Add(featEdge)\n            End If\n        Next\n    Next\nEnd Sub"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Show FeatureDimensions on multiple features\n                    ", "solution": ["Sub ShowDimensions()\n\nDim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\n\n\nDim oCompDef As PartComponentDefinition\nSet oCompDef = oDoc.ComponentDefinition\n\nDim oSelectSet As SelectSet\n\nDim oFeature As PartFeature\nFor Each oFeature In oCompDef.Features\nCall oDoc.SelectSet.Select(oFeature)\nNext oFeature\n\nDim oControlDef As ControlDefinition\nSet oControlDef = ThisApplication.CommandManager.ControlDefinitions.Item(\"PartShowDimensionsCtxCmd\")\noControlDef.Execute\n\nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Suppress part features from assembly\n                    ", "solution": ["Dim", " ", "HoleTest", " ", "As", " ", "String", "\n", "HoleTest", "=", "GoExcel", ".", "CellValue", "(", "\"Test.xlsx\"", ", ", "\"Sheet1\"", ", ", "\"B1\"", ")\n", "Dim", " ", "ExtrudeTest", " ", "As", " ", "String", "\n", "ExtrudeTest", " = ", "GoExcel", ".", "CellValue", "(", "\"Test.xlsx\"", ", ", "\"Sheet1\"", ", ", "\"B2\"", ")\n\n", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", "\n", "oOcc", " = ", "ThisDoc", ".", "Document", " .", "ComponentDefinition", ".", "Occurrences", ".", "ItemByName", "(", "\"testpart-02:1\"", ")\n", "Dim", " ", "oSubDoc", " ", "As", " ", "PartDocument", "\n", "If", " ", "oOcc", ".", "IsiPartMember", " = ", "False", " ", "Then", "\n\t", "If", " ", "UCase", "(", "HoleTest", ") = ", "\"NO\"", " ", "Then", "\n\t\t", "Feature", ".", "IsActive", "(", "oOcc", ".", "Name", " , ", "\"Hole1\"", ") = ", "False", "\n\t", "ElseIf", " ", "UCase", "(", "HoleTest", ") = ", "\"YES\"", " ", "Then", "\n\t\t", "Feature", ".", "IsActive", "(", "oOcc", ".", "Name", ", ", "\"Hole1\"", ") = ", "True", "\n\t", "End", " ", "If", "\n\n\t", "If", " ", "UCase", "(", "ExtrudeTest", ") = ", "\"NO\"", " ", "Then", "\n\t\t", "Feature", ".", "IsActive", "(", "oOcc", ".", "Name", ", ", "\"Extrusion2\"", ") = ", "False", "\n\t", "ElseIf", " ", "UCase", "(", "ExtrudeTest", ") = ", "\"YES\"", " ", "Then", "\n\t\t", "Feature", ".", "IsActive", "(", "oOcc", ".", "Name", ", ", "\"Extrusion2\"", ") = ", "True", "\n\t", "End", " ", "If", "\n", "Else", " \n     ", "oSubDoc", " = ", "oOcc", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", ".", "ReferencedDocuments", "(1)\n\t ", "Dim", " ", "oFeatures", " = ", "oSubDoc", ".", "ComponentDefinition", ".", "Features", "\n\t ", "If", " ", "UCase", "(", "HoleTest", ") = ", "\"NO\"", " ", "Then", "\n\t\t", "oFeatures", ".", "HoleFeatures", ".", "Item", "(", "\"Hole1\"", ").", "Suppressed", "  = ", "True", "\n\t", "ElseIf", " ", "UCase", "(", "HoleTest", ") = ", "\"YES\"", " ", "Then", "\n\t\t", "oFeatures", ".", "HoleFeatures", ".", "Item", "(", "\"Hole1\"", ").", "Suppressed", "  = ", "False", "\n\t", "End", " ", "If", "\n\n\t", "If", " ", "UCase", "(", "ExtrudeTest", ") = ", "\"NO\"", " ", "Then", "\n\t\t", "oFeatures", ".", "extrudefeatures", ".", "item", "(", "\"Extrusion2\"", ").", "Suppressed", " = ", "True", "\n\t", "ElseIf", " ", "UCase", "(", "ExtrudeTest", ") = ", "\"YES\"", " ", "Then", "\n\t\t", "oFeatures", ".", "extrudefeatures", ".", "Item", "(", "\"Extrusion2\"", ").", "Suppressed", "  = ", "False", "\n\t", "End", " ", "If", "\n", "End", " ", "If", "\n\n", "iLogicVb", ".", "UpdateWhenDone", " = ", "True", "\u00a0"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Multiple conditions in statement\n                    ", "solution": ["If TIPO = \"PARTES MAQUINADAS\" And SIZE = \"CARTA\" Then\n\tIf MARGEN = \"CLEAN\" Then\t", "\t\tActiveSheet.TitleBlock = \"CLEAN PART MT C\"\n\t\tActiveSheet.Border = \"MT ROUND CLEAN\"\n\n\tElseIf  MARGEN = \"ZONE\" Then\n\t\tActiveSheet.TitleBlock = \"ZONE PART MT C\"\n\t\tActiveSheet.Border = \"MT ROUND 8 ZONAS\"\n\tEnd If\nEnd If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: OnFileSaveAsDialog event problem\n                    ", "solution": [], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: ILOGIC Code to keep an extrusion colour white\n                    ", "solution": ["Feature", ".", "Color", "(", "\"featurename\"", ") = ", "\"white\""], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: iLogic can't find excel file\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Best way to get Vault Status for Open Inventor Document\n                    ", "solution": [], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: Clear appearence override on selected parts\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: iLogic-Insert sheet metal thickness on the drawing view of the flat pattern\n                    ", "solution": ["Sub", " ", "Main", "\n    ", "Dim", " ", "oApp", " ", "As", " ", "Application", "\n    ", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n    ", "Dim", " ", "oDD", " ", "As", " ", "DrawingDocument", "\n    ", "Dim", " ", "oSht", " ", "As", " ", "Sheet", "\n    ", "Dim", " ", "oDV", " ", "As", " ", "DrawingView", "\n    ", "Dim", " ", "oModelDoc", " ", "As", " ", "Document", "\n    ", "Dim", " ", "oPD", " ", "As", " ", "PartDocument", "\n    ", "Dim", " ", "oSMCD", " ", "As", " ", "SheetMetalComponentDefinition", "\n    ", "Dim", " ", "oThick", " ", "As", " ", "String", "\n    ", "oApp", " = ", "ThisApplication", "\n    \n    ", "For", " ", "Each", " ", "oDoc", " ", "In", " ", "oApp", ".", "Documents", ".", "VisibleDocuments", "\n        ", "If", " ", "oDoc", ".", "DocumentType", " = ", "kDrawingDocumentObject", " ", "Then", "\n            ", "oDD", " = ", "oDoc", "\n            ", "For", " ", "Each", " ", "oSht", " ", "In", " ", "oDD", ".", "Sheets", "\n                ", "For", " ", "Each", " ", "oDV", " ", "In", " ", "oSht", ".", "DrawingViews", "\n                    ", "oModelDoc", " = ", "oDV", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", "\n                    ", "If", " ", "oModelDoc", ".", "DocumentType", " = ", "kPartDocumentObject", " ", "Then", "\n                        ", "oPD", " = ", "oModelDoc", "\n                        ", "If", " ", "oDV", ".", "IsFlatPatternView", " = ", "True", " ", "Then", "\n                            ", "oSMCD", " = ", "oPD", ".", "ComponentDefinition", "\n                            \n                            ", "If", " ", "oSMCD", ".", "UseSheetMetalStyleThickness", " = ", "False", " ", "Then", "\n                                ", "oThick", " = ", "oSMCD", ".", "Thickness", ".", "Value", " * 10\n                            ", "Else", "\n                                ", "oThick", " = ", "oSMCD", ".", "ActiveSheetMetalStyle", ".", "Thickness", "\n                            ", "End", " ", "If", "\n                            ", "oDV", ".", "ShowLabel", " = ", "True", "\n                            ", "oDV", ".", "Label", ".", "FormattedText", " = ", "\"Flat Pattern<Br/>\"", " & ", "oThick", " & ", "\"mm Plate\"", "\n                        ", "End", " ", "If", "\n                    ", "End", " ", "If", "\n                ", "Next", "\n            ", "Next", "\n        ", "End", " ", "If", "\n    ", "Next", "\n", "End", " ", "Sub"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Export each views to pdf or png\n                    ", "solution": ["Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\n        ", "Dim", " ", "oDrawView", " ", "As", " ", "DrawingView", "\n        \n        ", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n        ", "Dim", " ", "cam", " ", "As", " ", "Camera", "\n        ", "cam", " = ", "ThisApplication", ".", "ActiveView", ".", "Camera", "\n\n        ", "Dim", " ", "tg", " ", "As", " ", "TransientGeometry", "\n        ", "tg", " = ", "ThisApplication", ".", "TransientGeometry", "\n\n        ", "Dim", " ", "i", " ", "As", " ", "Integer", " = 0\n\n        ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDrawDoc", ".", "Sheets", "\n            ", "oSheet", ".", "Activate", "()\n            ", "For", " ", "Each", " ", "oDrawView", " ", "In", " ", "oSheet", ".", "DrawingViews", "\n                ", "i", " = ", "i", " + 1\n                ", "cam", ".", "Eye", " = ", "tg", ".", "CreatePoint", "(", "oDrawView", ".", "Center", ".", "X", ", ", "oDrawView", ".", "Center", ".", "Y", ", 20)\n                ", "cam", ".", "Target", " = ", "tg", ".", "CreatePoint", "(", "oDrawView", ".", "Center", ".", "X", ", ", "oDrawView", ".", "Center", ".", "Y", ", 10)\n                ", "cam", ".", "UpVector", " = ", "tg", ".", "CreateUnitVector", "(0, 1, 0)\n                ", "cam", ".", "SetExtents", "(", "oDrawView", ".", "Width", " + 1, ", "oDrawView", ".", "Height", " + 1)\n\n                ", "cam", ".", "ApplyWithoutTransition", "()\n\n                ", "ThisApplication", ".", "ActiveView", ".", "Camera", ".", "SaveAsBitmap", "(", "\"C:\\temp\\picture\"", " & ", "i", " & ", "\".png\"", ", (", "oDrawView", ".", "Width", " + 1) * 100, (", "oDrawView", ".", "Height", " + 1) * 100)\n\n            ", "Next", "\n        ", "Next"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Writing a subroutine or loop in iLogic rule\n                    ", "solution": ["Sub Main()\n\t' Constants\n\tinc = 1 'rounding increment\n\twidth = 360 'only here for my example\n\tleftOffset = 1 'only here for my example\n\trightOffset = 1 'only here for my example\n\n\t' Calcs\n\tpatternWidth = width - leftOffset - rightOffset\n\n\t' Calculates number of horizontal holes\n\troundedIteration = CalcHorizHole(patternWidth, inc) ' Here I'm calling the function and passing the patternWidth & inc arguments\n\tmsgbox(roundedIteration)\n\t\n\titerationNumber = (roundedIteration - 1) 'Pattern Iteration Number of Holes\n\n\t' Calculates distance between pattern holes\n\tpatternSpace = patternWidth / roundedIteration\n\tinc = 1 'rounding increment\n\troundedSpace = Ceil(Round(patternSpace, 4) / inc) * inc \n\t\n\tpatternWidthCenter = patternWidth / 2 + leftOffset \n\ttop_patternWidthCenter_odd = patternWidthCenter + (roundedSpace / 2) \n\tbottom_patternWidthCenter_odd = patternWidthCenter - (roundedSpace / 2) \nEnd Sub\n\nPublic Function CalcHorizHole(patternWidth As Double, inc as Double) As Double\n\t' Calculates number of horizontal holes\n\titeration = patternWidth / 90\n\troundedIteration = Floor(Round(iteration, 4) / inc) * inc\n\tReturn roundedIteration\nEnd Function"], "author": "R.Mabery"},
{"created at": [], "solution Title": "\n                        Re: How to disable the close icon of InputBox\n                    ", "solution": ["\t", "oUsername", " = ", "Environ", "(", "\"Username\"", ")\n\t", "If", " ", "oUsername", " <> ", "MultiValue", ".", "FindValue", "(", "MultiValue", ".", "List", "(", "\"oCreator\"", "), ", "\"=\"", ", ", "oUsername", ") ", "Then", "\n", "ThisApplication.UserInterfaceManager.UserInteractionDisabled = True", "\t\t", "ThisApplication", ".", "Quit", "\n\t\t", "Exit", " ", "Sub", "\n\t", "End", " ", "If", "\u00a0"], "author": "zdhrichard"},
{"created at": [], "solution Title": "\n                        Re: Annotate Tab customization\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Sketch consumption by PartFeature (browser tree analysis)\n                    ", "solution": ["Dim oSketch As Sketch\nDim oCompDef As PartComponentDefinition\noCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n \nFor Each oSketch In oCompDef.Sketches\n\tIf oSketch.Consumed = False Then\n\t\tMessageBox.Show(\"Name of sketch which is not used to create solid body : \"+oSketch.Name, \"Sketch name\")\n\tEnd If\t\nNext"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Need ilogic code to continue method from rule opened file\n                    ", "solution": ["oPartDoc = ThisDoc.Document.documenttype=Inventor.DocumentTypeEnum.kPartDocumentObject\noAssyDoc = ThisDoc.Document.documenttype=Inventor.DocumentTypeEnum.kAssemblyDocumentObject\noDrawDoc = ThisDoc.Document.documenttype=Inventor.DocumentTypeEnum.kDrawingDocumentObject\n\niLogicVb.RunExternalRule(\"Delete All Rules\")\niLogicVb.RunExternalRule(\"Add Local Rule\")\n\n\nIf ThisDoc.Document Is ThisApplication.ActiveDocument  And oPartDoc = True Then\n'define path and name\nDim sFilePath As String \nsFilePath = \"\\\\Innovation\\CAD Styles and Materials\\Part Triggers.ipt\" \n\n'name of ilogic rule\nDim oRuleName As String = \"Set Rule Triggers\" \n\n'open the file invisibly\noFile =  ThisApplication.Documents.Open(sFilePath, False) \n\n'define the ilogicAutomation\nDim iLogicAuto As Object \niLogicAuto = iLogicVb.Automation \n\n'get the rule\nDim oRule As Object \noRule = iLogicAuto.GetRule(oFile, oRuleName) \n\n'run the rule\niLogicAuto.RunRuleDirect(oRule) \n\n'close the file\noFile.Close \n\t\nElseIf ThisDoc.Document Is ThisApplication.ActiveDocument  And oAssyDoc = True Then\n'define path and name\nDim sFilePath As String \nsFilePath = \"\\\\Innovation\\CAD Styles and Materials\\Assy Triggers.iam\" \n\n'name of ilogic rule\nDim oRuleName As String = \"Set Rule Triggers\" \n\n'open the file invisibly\noFile =  ThisApplication.Documents.Open(sFilePath, False) \n\n'define the ilogicAutomation\nDim iLogicAuto As Object \niLogicAuto = iLogicVb.Automation \n\n'get the rule\nDim oRule As Object \noRule = iLogicAuto.GetRule(oFile, oRuleName) \n\n'run the rule\niLogicAuto.RunRuleDirect(oRule) \n\n'close the file\noFile.Close \n\nElseIf ThisDoc.Document Is ThisApplication.ActiveDocument  And oDrawDoc = True Then\n'define path and name\nDim sFilePath As String \nsFilePath = \"\\\\Innovation\\CAD Styles and Materials\\Drawing Triggers.idw\" \n\n'name of ilogic rule\nDim oRuleName As String = \"Set Rule Triggers\" \n\n'open the file invisibly\noFile =  ThisApplication.Documents.Open(sFilePath, False) \n\n'define the ilogicAutomation\nDim iLogicAuto As Object \niLogicAuto = iLogicVb.Automation \n\n'get the rule\nDim oRule As Object \noRule = iLogicAuto.GetRule(oFile, oRuleName) \n\n'run the rule\niLogicAuto.RunRuleDirect(oRule) \n\n'close the file\noFile.Close \n\t\nEnd If"], "author": "jeremiah.boe"},
{"created at": [], "solution Title": "\n                        Re: Filename into custom iproperty\n                    ", "solution": ["'create a custom iprop called TAG and make its value the filename\niProperties.Value(\"Custom\", \"TAG\") = ThisDoc.FileName(False) 'false = without extension"], "author": "mcgyvr"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: How Can I Create Drawing Via iLogic & a Form?\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Split solid on pattern element with iLogic\n                    ", "solution": [], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: print to PDF with iLogic\n                    ", "solution": ["oPrintMgr.ColorMode = PrintColorModeEnum.kPrintGrayScale", "oPrintMgr.AllColorsAsBlack = True"], "author": "St\u00f6cker"},
{"created at": [], "solution Title": "\n                        Re: Remove all TitleBlocks and Borders VBA\n                    ", "solution": [], "author": "sgwilliams"},
{"created at": [], "solution Title": "\n                        Re: Rule not working as an External Rule\n                    ", "solution": ["EJN = iProperties.Value(\"Custom\", \"Job No.\")\nELN = iProperties.Value(\"Custom\", \"Line No.\")\nESN = iProperties.Value(\"Custom\", \"Sheet No.\")\n\nSNL = Len(ESN)\nDim NewPN as String\nIf SNL = 2 Then\n    NewPN = EJN & \"-\" & ELN & \"-\" & ESN\nElse\n    NewPN = ESN\nEnd If\nIf iProperties.Value(\"Project\", \"Part Number\") <> NewPN then\n    iProperties.Value(\"Project\", \"Part Number\") = NewPN\n    iLogicVb.UpdateWhenDone = True\nEnd if"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: SQLite and ilogic\n                    ", "solution": ["Option explicit On\nAddReference \"System.Data.SQLite.dll\"\nAddReference \"System.Data\"\nImports System.Data\nImports System.Data.SQLite\nDim sqlite_conn As SQLiteConnection\n' create a new database connection:\nsqlite_conn = New SQLiteConnection(\"Data Source=F:\\path\\to\\your\\database\\file\\iLogic Test.db;Version=3;\")\n\nsqlite_conn.Open()\n\nDim sqlite_cmd As SQLiteCommand = sqlite_conn.CreateCommand()\n\nsqlite_cmd.CommandText = \"CREATE TABLE test (id integer primary key, text varchar(100));\"\n\nsqlite_cmd.ExecuteNonQuery()"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Update G_L property for all part files in assembly\n                    ", "solution": ["If Parameter(\"G_L\") = 914 Then\n\tParameter(\"G_L\") = 950\nEnd If", "'Define the open document\nDim openDoc As Document\nopenDoc = ThisApplication.ActiveDocument\n \n'Look at all of the files referenced in the open document\nDim partDoc As Document\nFor Each partDoc In openDoc.AllReferencedDocuments\n\t'look at only part files\n\tIf partDoc.DocumentType = kPartDocumentObject Then\n\t\tDim userParam As UserParameter\n\t\tFor Each userParam In partDoc.ComponentDefinition.Parameters.UserParameters\n\t\t\tIf userParam.Name = \"G_L\" Then\n\t\t\t\tIf userParam.Expression = \"914 mm\" Then\n\t\t\t\t\tuserParam.Expression = \"950 mm\"\n\t\t\t\tElse\n\t\t\t\t\tMessageBox.Show(\"User param is: \" & userParam.Value)\n\t\t\t\tEnd If\n\t\t\tEnd If\n'\t\t\tIf Parameter(\"G_L\") = 914 Then\n'\t\t\t\tParameter(\"G_L\") = 950\n'\t\t\tEnd If\n\t\tNext\n\t\tpartDoc.Update\n\tEnd If\nNext\n\niLogicVb.UpdateWhenDone = True"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Question about MassProperties (get_MassProperties)\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Set the row of an iAssembly within the parent assembly\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Use iLogic to create assembly parameter\n                    ", "solution": ["Sub", " ", "Main", "\n    ", "Dim", " ", "varPartDoc", " ", "as", " ", "PartDocument", "\n    ", "Dim", " ", "varAssDoc", " ", "as", " ", "AssemblyDocument", "\n    ", "If", " ", "ThisApplication", ".", "ActiveDocumentType", " ", "=", " ", "kPartDocumentObject", " ", "Then", "\n        ", "varPartDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n        ", "'", "add TEXTURE parameter if it doesn't exist", "\n        ", "Try", "\n            ", "'", "Change value of param", "\n            ", "Parameter", "(", "\"", "TEXTURE", "\"", ")", " ", "=", " ", "\"", "True", "\"", "\n        ", "Catch", "\n            ", "'", "Create Param as it doesn't exist", "\n            ", "varPartDoc", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", ".", "AddByValue", "(", "\"", "TEXTURE", "\"", ", ", "False", ", ", "\"", "BOOLEAN", "\"", ")", "\n        ", "End", " ", "Try", "\n    ", "Else", " ", "If", " ", "ThisApplication", ".", "ActiveDocumentType", " ", "=", " ", "kAssemblyDocumentObject", " ", "Then", "\n        ", "varAssDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n        ", "'", "add TEXTURE parameter if it doesn't exist", "\n        ", "Try", "\n            ", "'", "Change value of param", "\n            ", "Parameter", "(", "\"", "TEXTURE", "\"", ")", " ", "=", " ", "\"", "True", "\"", "\n        ", "Catch", "\n            ", "'", "Create Param as it doesn't exist", "\n            ", "varAssDoc", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", ".", "AddByValue", "(", "\"", "TEXTURE", "\"", ", ", "False", ", ", "\"", "BOOLEAN", "\"", ")", "\n        ", "End", " ", "Try", "\n    ", "Else", ":\n        ", "MsgBox", "(", "\"", "Wrong Document Type", "\"", ", ", "vbOKOnly", ", ", "\"", "Incorrect Document type", "\"", ")", " ", "'", " this code could be wrong", "\n    ", "End", " ", "If", "\n", "End Sub"], "author": "Scott_Stubbingt"},
{"created at": [], "solution Title": "\n                        Re: Export/Import 3D Information Array\n                    ", "solution": ["'Option explicit Off", "\n", "Dim", " ", "Matrix", "(5, 5, 5) ", "As", " ", "Double", "\n\n", "Dim", " ", "y", " ", "As", " ", "Integer", "\n", "Dim", " ", "x", " ", "As", " ", "Integer", "\n", "Dim", " ", "z", " ", "As", " ", "Integer", "\n", "Dim", " ", "user_y", " ", "As", " ", "String", "\n", "Dim", " ", "user_x", " ", "As", " ", "String", "\n", "Dim", " ", "user_z", " ", "As", " ", "String", "\n", "Dim", " ", "t", " ", "As", " ", "Integer", "\n", "t", " = 0\n", "y", " = 0\n", "x", " = 0\n", "z", " = 0\n\n", "For", " ", "x", " = 0 ", "To", " 4\n\t", "For", " ", "y", " = 0 ", "To", " 4\n\t\t", "For", " ", "z", " = 0 ", "To", " 4\n\t\t\t", "Matrix", "(", "x", ", ", "y", ", ", "z", ") = ", "t", ".", "ToString", "\n\t\t\t", "t", " = ", "t", " + 1\n\t\t", "Next", " \n\t", "Next", "\n", "Next", " \n\n", "MessageBox", ".", "Show", "(", "Matrix", ".", "Rank", " & ", "\"=Rank & \"", " & ", "Matrix", ".", "Length", " & ", "\"=Length\"", ", ", "\"Dimensions\"", ")\n\n", "Dim", " ", "cycle", " ", "As", " ", "Integer", "\n", "cycle", " = 0\n\n", "While", " ", "cycle", " <1\n", "user_x", " = ", "InputBox", "(", "\"Insert x-value\"", ", ", "\"Value Inquiry\"", ", ", "\"0\"", ")\n\n", "user_y", " = ", "InputBox", "(", "\"Insert y-value\"", ", ", "\"Value Inquiry\"", ", ", "\"0\"", ")\n\n", "user_z", " = ", "InputBox", "(", "\"Insert z-value\"", ", ", "\"Value Inquiry\"", ", ", "\"0\"", ")\n\n", "MessageBox", ".", "Show", "(", "Matrix", "(", "Val", "(", "user_x", "), ", "Val", "(", "user_y", "), ", "Val", "(", "user_z", ")).", "ToString", ", ", "\"Value Inquiry Results\"", ")\n\n", "Dim", " ", "bool1", " ", "As", " ", "Boolean", "\n", "bool1", " = ", "InputRadioBox", "(", "\"Retry?\"", ", ", "\"Yes\"", ", ", "\"No\"", ", ", "True", ", ", "Title", " := ", "\"Program Cycle\"", ")\n", "If", " ", "bool1", " = ", "True", "\n\t", "cycle", " = 0\n\t", "Else", "\n\t", "cycle", " = 1\n", "End", " ", "If", "\n", "End", " ", "While", "\n\n", "Dim", " ", "bool2", " ", "As", " ", "Boolean", "\n", "bool2", " = ", "InputRadioBox", "(", "\"Export Array?\"", ", ", "\"Yes\"", ", ", "\"No\"", ", ", "True", ", ", "Title", " := ", "\"Array Export\"", ")\n\n", "''Export", "\n\n\t", "Dim", " ", "Temporary_x", " ", "As", " ", "String", "\n\t", "Dim", " ", "Temporary_y", " ", "As", " ", "String", "\n\t", "Dim", " ", "Collective", " ", "As", " ", "String", "\n", "'\tCollective = \"{\"", "\n", "'\tTemporary_y = \"\"", "\n", "'\tTemporary_x = \"\"", "\n", "If", " ", "bool2", " = ", "True", "\n\t", "Collective", " = ", "\"\"", "\n\t", "For", " ", "z", " = 0 ", "To", " ", "Matrix", ".", "GetLength", "(2)-2\n\t\t", "Temporary_y", " = ", "\"\"", "\n\t\t", "For", " ", "y", " = 0 ", "To", " ", "Matrix", ".", "GetLength", "(1)-2\n\t\t\t", "Temporary_x", " = ", "\"\"", "\n\t\t\t", "For", " ", "x", " = 0 ", "To", " ", "Matrix", ".", "GetLength", "(0)-2\n\t\t\t\t", "If", " ", "x", " = 0\n\t\t\t\t\t", "Temporary_x", " = ", "Matrix", "(", "x", ",", "y", ",", "z", ").", "ToString", "\n\t\t\t\t", "Else", "\n\t\t\t\t\t", "Temporary_x", " = ", "Temporary_x", " & ", "\":\"", " & ", "Matrix", "(", "x", ",", "y", ",", "z", ").", "ToString", "\n\t\t\t\t", "End", " ", "If", "\n\t\t\t", "Next", "\n\t\t\t", "If", " ", "y", " = 0\n\t\t\t\t", "Temporary_y", " = ", "Temporary_x", "\n\t\t\t", "Else", "\n\t\t\t\t", "Temporary_y", " = ", "Temporary_y", " & ", "\",\"", " & ", "Temporary_x", "\n\t\t\t", "End", " ", "If", " \n\t\t", "Next", "\n\t\t", "If", " ", "z", " = 0\n\t\t\t", "Collective", " = ", "Temporary_y", "\n\t\t", "Else", "\n\t\t\t", "Collective", " = ", "Collective", " & ", "\";\"", " & ", "Temporary_y", "\n\t\t", "End", " ", "If", "\n\t", "Next", "\n\n\t", "Else", "\n", "End", " ", "If", "\n\n", "'WriteAllText(\"Libraries\\Documents\\Test_1.txt\",Collective.ToString)", "\n", "oWrite", " = ", "System", ".", "IO", ".", "File", ".", "CreateText", "(", "ThisDoc", ".", "PathAndFileName", "(", "False", ") & ", "\".txt\"", ")\n", "oWrite", ".", "WriteLine", "(", "Collective", ".", "ToString", ")\n", "oWrite", ".", "Close", "\n", "MessageBox", ".", "Show", "(", "Collective", ", ", "\"Preliminary Proof of Concept\"", ")\n\n", "Dim", " ", "Collective2", " ", "As", " ", "String", "\n", "Collective2", " = ", "My", ".", "Computer", ".", "FileSystem", ".", "ReadAllText", "(", "ThisDoc", ".", "PathAndFileName", "(", "False", ") & ", "\".txt\"", ")\n\n", "''Import", "\n", "Dimz", " = ", "Collective2", ".", "Split", "(", "\";\"", ").", "Count", " - 1\n", "Dimy", " = ", "Collective2", ".", "Split", "(", "\";\"", ")(0).", "Split", "(", "\",\"", ").", "Count", " - 1\n", "Dimx", " = ", "Collective2", ".", "Split", "(", "\";\"", ")(0).", "Split", "(", "\",\"", ")(0).", "Split", "(", "\":\"", ").", "Count", " - 1\n", "Dim", " ", "Matrix2", "(", "Dimx", "+1,", "Dimy", "+1,", "Dimz", "+1) ", "As", " ", "String", "\n", "For", " ", "z", " = 0 ", "To", " ", "Dimz", "\n\t", "For", " ", "y", " = 0 ", "To", " ", "Dimy", "\n\t\t", "For", " ", "x", " = 0 ", "To", " ", "Dimx", "\n\t\t\t", "Matrix2", "(", "x", ", ", "y", ", ", "z", ") = ", "Collective2", ".", "Split", "(", "\";\"", ")(", "z", ").", "Split", "(", "\",\"", ")(", "y", ").", "Split", "(", "\":\"", ")(", "x", ")\n\t\t", "Next", "\n\t", "Next", "\n", "Next", "\n\n", "MessageBox", ".", "Show", "(", "Matrix2", ".", "Rank", " & ", "\"=Rank & \"", " & ", "Matrix2", ".", "Length", " & ", "\"=Length\"", ", ", "\"Dimensions\"", ")\n\n", "''Testing", "\n", "cycle", " = 0\n\n", "While", " ", "cycle", " <1\n", "user_x", " = ", "InputBox", "(", "\"Insert x-value\"", ", ", "\"Value Inquiry\"", ", ", "\"0\"", ")\n\n", "user_y", " = ", "InputBox", "(", "\"Insert y-value\"", ", ", "\"Value Inquiry\"", ", ", "\"0\"", ")\n\n", "user_z", " = ", "InputBox", "(", "\"Insert z-value\"", ", ", "\"Value Inquiry\"", ", ", "\"0\"", ")\n\n", "MessageBox", ".", "Show", "(", "Matrix2", "(", "Val", "(", "user_x", "), ", "Val", "(", "user_y", "), ", "Val", "(", "user_z", ")).", "ToString", ", ", "\"Value Inquiry Results\"", ")\n\n", "Dim", " ", "bool1", " ", "As", " ", "Boolean", "\n", "bool1", " = ", "InputRadioBox", "(", "\"Retry?\"", ", ", "\"Yes\"", ", ", "\"No\"", ", ", "True", ", ", "Title", " := ", "\"Program Cycle\"", ")\n", "If", " ", "bool1", " = ", "True", "\n\t", "cycle", " = 0\n\t", "Else", "\n\t", "cycle", " = 1\n", "End", " ", "If", "\n", "End", " ", "While"], "author": "llerickson"},
{"created at": [], "solution Title": "\n                        Re: Delete content center family table columns via API?\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Inventor File Dialog\n                    ", "solution": ["Sub main()\n  Dim oDoc As Inventor.AssemblyDocument\n   Set oDoc = ThisApplication.ActiveDocument\n   Dim oCompDef As Inventor.ComponentDefinition\n   Set oCompDef = oDoc.ComponentDefinition\n   Call ThisApplication.CommandManager.DoSelect(oCompDef.Occurrences.Item(1))\n   ThisApplication.CommandManager.ControlDefinitions.Item(\"AssemblyReplaceCmd\").Execute\nEnd Sub"], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: Change precision of alternate units using VBA\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Rule looping, cyclus is wrongly running twice\n                    ", "solution": [], "author": "BRLMCHKD"},
{"created at": [], "solution Title": "\n                        Re: Debug InputBox running twice\n                    ", "solution": [], "author": "BRLMCHKD"},
{"created at": [], "solution Title": "\n                        Re: how to set default parts list style in a template?\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: iLogic Sketch Redefine.\n                    ", "solution": ["Dim oPD As PartDocument\n    Dim oPCD As PartComponentDefinition\n    Dim oSkt As PlanarSketch '<------\n    Dim oXY As WorkPlane\n    Dim oCentP As WorkPoint\n    Dim oSktPt As SketchPoint\n   \n    oPD = ThisApplication.ActiveDocument\n    oPCD = oPD.ComponentDefinition\n    oXY = oPCD.WorkPlanes.Item(\"XY Plane\")\n\t\n\n    oCentP = oPCD.WorkPoints.Item(1)\n   \n    oSkt = oPCD.Sketches.Item(\"Szkic2\")\n   \n    If Not oSkt.PlanarEntity Is oXY Then\n        oSkt.PlanarEntity = oXY\n    End If\n   \n       oSktPt = oSkt.SketchPoints.Item(1)\n    On Error Resume Next\n    Call oSkt.AddByProjectingEntity(oCentP)"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Modify start point of line throught vba\n                    ", "solution": ["Dim oPoint As Point2d\nSet oPoint = ThisApplication.TransientGeometry.CreatePoint2d(20, 0)\nCall olines.StartSketchPoint.MoveTo(oPoint)"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Logical type of Active Inv Doc (if TryCast is a best bet)\n                    ", "solution": ["Sub Test()\nDim app As Application\nDim Doc As Document\nDim CompDef As ComponentDefinition\nDim MsgBody As String\n\nSet app = ThisApplication\nSet Doc = app.ActiveDocument\n\nSelect Case Doc.DocumentType\nCase Is = DocumentTypeEnum.kPartDocumentObject\n    MsgBody = \"Part File\"\n    Set CompDef = Doc.ComponentDefinition\n    If CompDef.IsiPartFactory Then MsgBody = \"Multi-config Part Factory\"\n    If CompDef.IsiPartMember Then MsgBody = \"Multi-config Part Member\"\nCase Is = DocumentTypeEnum.kDrawingDocumentObject\n    MsgBody = \"Plain Drawing File\"\n    Dim DocM As Document\n    If Doc.ReferencedDocuments.Count > 0 Then\n        Set DocM = Doc.ReferencedDocuments.Item(1)\n        Set CompDef = DocM.ComponentDefinition\n        Select Case DocM.DocumentType\n        Case Is = DocumentTypeEnum.kPartDocumentObject\n            MsgBody = \"Part Drawing File\"\n            If CompDef.IsiPartFactory Then MsgBody = \"Multi-config Part drawing Factory\"\n            If CompDef.IsiPartMember Then MsgBody = \"Multi-config Part drawing Member\"\n        Case Id = DocumentTypeEnum.kAssemblyDocumentObject\n            MsgBody = \"Assy Drawing File\"\n            If CompDef.IsiPartFactory Then MsgBody = \"Multi-config Assy drawing Factory\"\n            If CompDef.IsiPartMember Then MsgBody = \"Multi-config Assy drawing Member\"\n        End Select\n    End If\nCase Is = DocumentTypeEnum.kAssemblyDocumentObject\n    MsgBody = \"Assy File\"\n    Set CompDef = Doc.ComponentDefinition\n    If CompDef.IsiAssemblyFactory Then MsgBody = \"Multi-config Assy Factory\"\n    If CompDef.IsiAssemblyMember Then MsgBody = \"Multi-config Assy Member\"\nEnd Select\nMsgBox (MsgBody)\n\nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Setting tolerance values using VBA\n                    ", "solution": [], "author": "danilo.veljkovi"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Access Arraylist to imputlistbox\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic form trigger question\n                    ", "solution": ["If ThisDoc.Document.Open Then iLogicForm.Show(\"Form 1\")"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iLogic Design Copy - make multiple copies?\n                    ", "solution": [], "author": "nick"},
{"created at": [], "solution Title": "\n                        Re: changing the words on the view cube to South North East West\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: butech hole feature\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: iProperties from a drawing to an assembly\n                    ", "solution": ["oDrawingDoc = ThisDoc.ChangeExtension(\".idw\") \n\nDim oDoc As Document \noDoc = ThisApplication.Documents.Open(oDrawingDoc, False)  \n\nDim oRev As String  \noRev = iProperties.Value(oDoc, \"Project\", \"Revision Number\")\n\nMessageBox.Show(oRev, \"Title\")", "oDoc.Close()"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Drawing - Display \"FileName\" in a Form\n                    ", "solution": ["Dim", " ", "iFileName", " ", "As", " ", "String", "\n", "iFileName", "=", "ThisDoc", ".", "FileName", "(", "False", ")\n", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"File_Name\"", ") = ", "iFileName"], "author": "arkelec"},
{"created at": [], "solution Title": "\n                        Re: AddButtonPopup with custom text\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Code to change Content Center default Save Preview Picture to \"Active I\n                    ", "solution": [], "author": "Jason.Rugg"},
{"created at": [], "solution Title": "\n                        Re: Can't create ClientFeature\n                    ", "solution": ["Public Sub Main()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As PartComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    Dim oClientFeatDef As ClientFeatureDefinition\n    Set oClientFeatDef = oDef.Features.ClientFeatures.CreateDefinition()\n    \n    Dim oClientFeat As ClientFeature\n    Set oClientFeat = oDef.Features.ClientFeatures.Add(oClientFeatDef, \"MyNode\")\n    \n    oClientFeat.Name = \"Testing\"\n    \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Debug Add-in Visual Basic 2015\n                    ", "solution": [], "author": "TA.Fehr"},
{"created at": [], "solution Title": "\n                        Re: Fastest way to check if Thumbnail contains any graphics\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Code to add User parameters In Assemblies\n                    ", "solution": ["If ThisDoc.Document.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n\toMyParameter = ThisAssembly.Document.ComponentDefinition.Parameters.UserParameters \nElse\n\toMyParameter = ThisApplication.ActiveDocument.ComponentDefinition.Parameters.UserParameters \nEnd If \n\n''THIS WORKS NOTE PARAMETERS WILL BE ADDED IN THE EXACT ORDER THEY ARE GENERATED IN THIS LIST\n\noParameter = oMyParameter.AddByValue(\"DESCRIPCION\", \"\", UnitsTypeEnum.kTextUnits)\noParameter = oMyParameter.AddByValue(\"FECHAX\", \"\", UnitsTypeEnum.kTextUnits)\noParameter = oMyParameter.AddByValue(\"COMPARTIR\", \"\", UnitsTypeEnum.kTextUnits)\nMultiValue.SetList(\"COMPARTIR\", \"MT\", \"MESS\")\noParameter=oMyParameter.AddByValue(\"RES_KICK\", \"\", UnitsTypeEnum.kTextUnits)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: \"Object not set to an instance of an object\" on RuleArgument (on E\n                    ", "solution": ["On Error GoTo Skipline\nRuleArguments.Arguments.Value(\"ReturnValue\") = retval", "RuleArguments.Arguments.Value(\"Description\") = msg", "Skipline : \nMessagebox.Show (\"Message\",\"Title\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How to add spaces to text line, auto-prefilled by ilogic rule\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Create a workplane in the assembly via VBA\n                    ", "solution": ["Sub CreateWorkPlane()\nDim App As Application\nSet App = ThisApplication\nDim oAssmDoc As AssemblyDocument\nSet oAssmDoc = App.ActiveDocument\nDim oCompDef As AssemblyComponentDefinition\nSet oCompDef = oAssmDoc.ComponentDefinition\nDim oWkPlane As WorkPlane\nDim myPlane As WorkPlane\nSet myPlane = oCompDef.WorkPlanes.Item(\"YZ Plane\")\nDim myPoint As WorkPoint\nSet myPoint = oCompDef.WorkPoints.Item(\"Center Point\")\nSet oWkPlane = oCompDef.WorkPlanes.AddFixed(myPoint.Point, myPlane.Definition.XAxis, myPlane.Definition.YAxis)\nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic, close active excel files with certain name\n                    ", "solution": ["Sub Main()\n\tFName = ThisDoc.FileName(False) 'without extension\n\tFPath = ThisDoc.Path & \"\\\"\n\tDim xlsfile = FPath & FName & \".xlsx\"\n\tDim calcFile = CurDir & \"\\Datasheet1.xlsx\"\n\tDim ParaFile = CurDir & \"\\lookuptable.xlsx\"\n\n\tDim excelApp As Object\n\tTry \n\t    excelApp = GetObject( , \"Excel.Application\") 'changed this line\n\t    For Each wb As Object In excelApp.workbooks\n\t\t\tmessagebox.Show(wb.fullname)\n\t        If UCase(wb.fullname) = UCase(xlsfile) Or UCase(wb.fullname) = UCase(calcFile) Or UCase(wb.fullname) = UCase(ParaFile) Then\n\t\t\t   'workbook is already opened: Save and close it\n\t\t\t   wb.Save\n\t\t\t   wb.Close   \n\t        End If\n\t    Next\n\tCatch\n\tFinally\n\t    excelApp = Nothing\n\tEnd Try\nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: View label to display stock numbers of parts shown in view rep view\n                    ", "solution": ["Dim oDoc As DrawingDocument\noDoc = ThisDrawing.Document\n\nDim oSheet As Sheet\noSheet = oDoc.ActiveSheet \n\nDim oView As DrawingView\nViewsNamed = False\nFor Each oView In oSheet.DrawingViews\n\tdoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\n\tIf doc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n\t\tDim compDef As ComponentDefinition = doc.ComponentDefinition\n\t\tDim repMan As RepresentationsManager = compDef.RepresentationsManager\n\t\tIf ViewsNamed = False Then\n\t\t\tFor Each DVR In repMan.DesignViewRepresentations\n\t\t\t\tIf Not DVR.Name = \"Master\" Then\n\t\t\t\t\tDVR.Activate\n\t\t\t\t\tpartName1 = \"\"\n\t\t\t\t\tpartName2 = \"\"\n\t\t\t\t\tFor Each occ In compDef.Occurrences\n\t\t\t\t\t\tIf occ.visible Then\n\t\t\t\t\t\t\tIf partName1 = \"\" Then partName1 = occ.Name Else partName2 = occ.name\n\t\t\t\t\t\tEnd If\n\t\t\t\t\tNext\n\t\t\t\t\tIf InStr(partName1, \":\") > 0 Then partName1 = Left(partName1, Len(partName1) - 1 - (Len(partName1) - InStr(partName1, \":\")))\n\t\t\t\t\tIf InStr(partName2, \":\") > 0 Then partName2 = Left(partName2, Len(partName2) - 1 - (Len(partName2) - InStr(partName2, \":\")))\n\t\t\t\t\trepMan.ActiveDesignViewRepresentation.Name = \"Typical \" & partName1 & \" to \" & partName2 & \" ConnectionDetails\"\n\t\t\t\tEnd If\n\t\t\tNext\n\t\t\tViewsNamed = True\n\t\t\trepMan.DesignViewRepresentations(\"Master\").Activate\n\t\tEnd If\n\t\t\n\toView.Label.FormattedText = Replace(oView.Label.FormattedText, \"<DrawingViewName/>\", oView.ActiveDesignViewRepresentation)\n\t\t\n\tElse\n\t\tMessageBox.Show(\"Referenced documnet is not Assembly\") \n\tEnd If\nNext"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: VBA run External Rule from Existing Addin\n                    ", "solution": ["Public Sub ComprasRule()\n    'ilogic rule name:\n     RuniLogic (\"ComprasDb\")\nEnd Sub", "Public Sub RunRule()\n    RuniLogic (\"C:\\Users\\t_gc\\Desktop\\Sample.iLogicVb\")\nEnd Sub\n\nPublic Sub RuniLogic(ByVal RuleName As String)\n    Dim iLogicAuto As Object\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    If oDoc Is Nothing Then\n        MsgBox \"Missing Inventor Document\"\n        Exit Sub\n    End If\n    Set iLogicAuto = GetiLogicAddin(ThisApplication)\n    If (iLogicAuto Is Nothing) Then Exit Sub\n    iLogicAuto.RunExternalRule oDoc, RuleName\nEnd Sub\n \nPublic Function GetiLogicAddin(oApplication As Inventor.Application) As Object\n    Dim addIn As ApplicationAddIn\n    On Error GoTo NotFound\n    Set addIn = oApplication.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\n    If (addIn Is Nothing) Then Exit Function\n    addIn.Activate\n    Set GetiLogicAddin = addIn.Automation\n    Exit Function\nNotFound:\nEnd Function", "Private Sub database_Click()\n\n Call ComprasRules.ComprasRule\n\nEnd Sub", "Private Sub database_Click()\n\n Call ComprasRule\n\nEnd Sub"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Creating new lines/cells in Excel with iLogic?\n                    ", "solution": [], "author": "gsweet0613"},
{"created at": [], "solution Title": "\n                        Re: Create Assembly from Excel List\n                    ", "solution": ["Dim path As String\npath = \"D:\\Chandra\\Autodesk Cases\\Inventor\\Aug-2018\\14537574\\\"\n\nDim oList As ArrayList\noList = GoExcel.CellValues(path + \"Assembly_List.xlsx\", \"Sheet1\", \"A1\", \"A7\")\n\nFor Each name In oList\n\tDim oNewAssy As AssemblyDocument\n\toNewAssy = ThisApplication.Documents.Add(DocumentTypeEnum.kAssemblyDocumentObject)\n\t\n\tDim oMatrix As Matrix\n\toMatrix = ThisApplication.TransientGeometry.CreateMatrix() \n\t\n\tDim componentA As ComponentOccurrence \n\tcomponentA = oNewAssy.ComponentDefinition.Occurrences.Add(\"D:\\Chandra\\Autodesk Cases\\Inventor\\Aug-2018\\14537574\\NOZLC2-RF150-8-40-AUX\\PIPES\\PIPEC2-40-8.ipt\", oMatrix)\n\tcomponentA.Name = \"Pipe\"\n\t\n\tDim componentB As ComponentOccurrence \n\tcomponentB = oNewAssy.ComponentDefinition.Occurrences.Add(\"D:\\Chandra\\Autodesk Cases\\Inventor\\Aug-2018\\14537574\\NOZLC2-RF150-8-40-AUX\\FLANGES\\RF150-2.ipt\", oMatrix)\n\tcomponentB.Name = \"Flange\"\n\t \n\tCall oNewAssy.SaveAs(path + name, False)\n\t\n\tCall oNewAssy.Close\nNext", "Dim path As String\npath = \"C:\\Users\\Public\\2019\\\"\nNolzPath = \"C:\\Users\\Public\\2019\\NZLS\\\"\n\nDim oList As ArrayList\noList = GoExcel.CellValues(path + \"ASSEMBLY GENERATOR.xlsx\", \"Nozzles\", \"O5\", \"O6\")\n'oList = GoExcel.CellValues(path + \"ASSEMBLY GENERATOR.xlsm\", \"Nozzles\", \"O2\", \"O3\")\n\nDim FlangeFolder As String\n\nFor Each name In oList\n\tDim oNewAssy As AssemblyDocument\n\toNewAssy = ThisApplication.Documents.Add(DocumentTypeEnum.kAssemblyDocumentObject)\n\t\n\n\n\toNozSize = Split(name, \"-\")(0)\n\t'MessageBox.Show(oNozSize, \"SIZE\")\n\toNozSch = Split(name, \"-\")(1)\n\t'MessageBox.Show(oNozSch, \"SCH\")\n\toNozLen = Split(name, \"-\")(2)\n\t'MessageBox.Show(oNozLen, \"LEN\")\n\toFlgTypeRtng = Split(name, \"-\")(3)\n\t'MessageBox.Show(oFlgTypeRtng, \"\")\n\toNozServ = Split(name, \"-\")(4)\n\t'MessageBox.Show(oNozServ, \"SERVICE\")\n\t\n\t''remove 1st 5 charachters from file name - ie. NOZLC\n\toNozSize = Right(oNozSize, Len(oNozSize) - 5)\n\t'MessageBox.Show(oNozSize,\"size\")\n\t'create values for the rating and type of flange. ie RF150 is RF and 150\n\toFlgType = Left(oFlgTypeRtng, Len(oFlgTypeRtng) - 3)\n\toFlgRtng = Right(oFlgTypeRtng, Len(oFlgTypeRtng) - 2)\n\t'MessageBox.Show(oFlgType, \"FLNG TYPE\")\n\t'MessageBox.Show(oFlgRtng,\"FLNG RATING\")\n\n\tTry\n\toNozSize = (oNozSize).Replace(\"/\", \"_\")\n\tCatch\n\tEnd Try\n\t\n\tDim oMatrix As Matrix\n\toMatrix = ThisApplication.TransientGeometry.CreateMatrix() \n\t\n\t\n\tFlangePath = \"Tube & Pipe:Fittings:Flanges\"\n\t\n\tIf oFlgType = \"RF\"\n\tSelect Case oFlgRtng\n\tCase \"150\"\n\t\tFlangeFolder = \"ASME B16.5(21)\\\"\n\tCase \"300\"\n\t\tFlangeFolder = \"ASME B16.5(23)\\\"\n\tCase \"600\"\n\t\tFlangeFolder = \"ASME B16.5(25)\\\"\n\tCase \"900\"\n\t\tFlangeFolder = \"ASME B16.5(26)\\\"\n\tEnd Select\n\tAxis = \"False\"\n\tInsertDis = .5\n\tElse If oFlgType = \"WN\"\n\tSelect Case oFlgRtng\n\tCase \"150\"\n\t\tFlangeFolder = \"ASME B16.5(38)\\\"\n\tCase \"300\"\n\t\tFlangeFolder = \"ASME B16.5(41\\\"\n\tCase \"600\"\n\t\tFlangeFolder = \"ASME B16.5(43)\\\"\n\tCase \"900\"\n\t\tFlangeFolder = \"ASME B16.5(44)\\\"\n\tEnd Select\n\tAxis = \"True\"\n\tInsertDis = .125\n\tEnd If\t\t\n\t'MessageBox.Show(FlangeFolder, \"Title\")\n\n\t'\\\\\\ here are the paths where the flanges and pipe are saved at. \n\tPipePath = \"C:\\Users\\dfitting\\Documents\\Inventor\\Content Center Files\\R2019\\en-US\\ASME B36.10M(1)\\\" & \"PIPEC\" & oNozSize & \"-\" & oNozSch & \"-\" & oNozLen & \".ipt\"\n\tFlangePath = \"C:\\Users\\dfitting\\Documents\\Inventor\\Content Center Files\\R2019\\en-US\\\" & FlangeFolder & \"FLNGC\" & oNozSize & \".ipt\"\n\n\tDim componentA As ComponentOccurrence \n\tcomponentA = oNewAssy.ComponentDefinition.Occurrences.Add(PipePath, oMatrix)\n\tcomponentA.Name = \"Pipe\"\n\n\tDim componentB As ComponentOccurrence \n\tcomponentB = oNewAssy.ComponentDefinition.Occurrences.Add(FlangePath, oMatrix)\n\tcomponentB.Name = \"Flange\" \n\t\n\tDim oFace As Face\n\tDim oFlangeFace_Pipe As Face\n\tDim oInsideFace_Pipe As Face\n\tFor Each oFace In componentA.Definition.SurfaceBodies.Item(1).Faces\n\t\tIf oFace.InternalName = \"{D2F0749E-CD50-6222-9FD3-82A95937E2C7}\" Then\n\t\t    oFlangeFace_Pipe = oFace\n\t\tElseIf oFace.InternalName = \"{34E025BE-9958-2F5D-43C5-4A4EDECF143F}\" Then\n\t\t    oInsideFace_Pipe = oFace\n\t\tEnd If\n\tNext\n \n\t \n\tDim oFlangeFace_Flange As Face\n\tFor Each oFace In componentB.Definition.SurfaceBodies.Item(1).Faces\n\t\tIf oFace.InternalName = \"{F5A66A0A-37CA-1154-750F-3BE821568F9F}\" Then\n\t\t    oFlangeFace_Flange = oFace\n\t\t    Exit For\n\t\tEnd If\n\tNext\n\n\tDim oFaceProxy_pipe As FaceProxy\n\tIf Not oFlangeFace_Pipe Is Nothing Then\n\t\tCall componentA.CreateGeometryProxy(oFlangeFace_Pipe, oFaceProxy_pipe)\n\tElse\n\t\tExit Sub\n\tEnd If\n\n\tDim oFaceProxy_Flange As FaceProxy\n\tIf Not oFlangeFace_Flange Is Nothing Then\n\t\tCall componentB.CreateGeometryProxy(oFlangeFace_Flange, oFaceProxy_Flange)\n\tElse\n\t\tExit Sub\n\tEnd If\n\n\tCall oNewAssy.ComponentDefinition.Constraints.AddInsertConstraint(oFaceProxy_pipe, oFaceProxy_Flange, False, InsertDis)\n\n\tDim oCustomProp As Inventor.Property \n\tTry\n\t\toNewAssy.PropertySets.Item(4).Item(\"Custom Prop\").Value = \"Custom Value\"\n\tCatch\n\t\toCustomProp = oNewAssy.PropertySets.Item(4).Add(\"Custom value\", \"Custom Prop\")\n\tEnd Try \n\toNewAssy.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Value = \"123456\"\n\toNewAssy.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\").Value = \"Description\"\n\n\tTry\n\tname = (name).Replace(\"/\", \"_\")\n\tCatch\n\tEnd Try\n\n\t \n\tCall oNewAssy.SaveAs(NolzPath + name + \".iam\", False)\n\t\n\tCall oNewAssy.Close\nNext", "Dim oDoc As PartDocument\noDoc = ThisApplication.ActiveDocument \n\nDim oFace As Face \noFace = oDoc.SelectSet.Item(1)\n\nMessageBox.Show(oFace.InternalName, \"Internal name\")", "Dim path As String\npath = \"C:\\Users\\Public\\2019\\\"\nNolzPath = \"C:\\Users\\Public\\2019\\NZLS\\\"\n\nDim oList As ArrayList\noList = GoExcel.CellValues(path + \"ASSEMBLY GENERATOR.xlsx\", \"Nozzles\", \"O5\", \"O6\")\n'oList = GoExcel.CellValues(path + \"ASSEMBLY GENERATOR.xlsm\", \"Nozzles\", \"O2\", \"O3\")\n\nDim FlangeFolder As String\n\nFor Each name In oList\n\tDim oNewAssy As AssemblyDocument\n\toNewAssy = ThisApplication.Documents.Add(DocumentTypeEnum.kAssemblyDocumentObject)\n\t\n\n\n\toNozSize = Split(name, \"-\")(0)\n\t'MessageBox.Show(oNozSize, \"SIZE\")\n\toNozSch = Split(name, \"-\")(1)\n\t'MessageBox.Show(oNozSch, \"SCH\")\n\toNozLen = Split(name, \"-\")(2)\n\t'MessageBox.Show(oNozLen, \"LEN\")\n\toFlgTypeRtng = Split(name, \"-\")(3)\n\t'MessageBox.Show(oFlgTypeRtng, \"\")\n\toNozServ = Split(name, \"-\")(4)\n\t'MessageBox.Show(oNozServ, \"SERVICE\")\n\t\n\t''remove 1st 5 charachters from file name - ie. NOZLC\n\toNozSize = Right(oNozSize, Len(oNozSize) - 5)\n\t'MessageBox.Show(oNozSize,\"size\")\n\t'create values for the rating and type of flange. ie RF150 is RF and 150\n\toFlgType = Left(oFlgTypeRtng, Len(oFlgTypeRtng) - 3)\n\toFlgRtng = Right(oFlgTypeRtng, Len(oFlgTypeRtng) - 2)\n\t'MessageBox.Show(oFlgType, \"FLNG TYPE\")\n\t'MessageBox.Show(oFlgRtng,\"FLNG RATING\")\n\n\tTry\n\toNozSize = (oNozSize).Replace(\"/\", \"_\")\n\tCatch\n\tEnd Try\n\t\n\tDim oMatrix As Matrix\n\toMatrix = ThisApplication.TransientGeometry.CreateMatrix() \n\t\n\t\n\tFlangePath = \"Tube & Pipe:Fittings:Flanges\"\n\t\n\tIf oFlgType = \"RF\"\n\tSelect Case oFlgRtng\n\tCase \"150\"\n\t\tFlangeFolder = \"ASME B16.5(21)\\\"\n\tCase \"300\"\n\t\tFlangeFolder = \"ASME B16.5(23)\\\"\n\tCase \"600\"\n\t\tFlangeFolder = \"ASME B16.5(25)\\\"\n\tCase \"900\"\n\t\tFlangeFolder = \"ASME B16.5(26)\\\"\n\tEnd Select\n\tAxis = \"False\"\n\tInsertDis = .5\n\tElse If oFlgType = \"WN\"\n\tSelect Case oFlgRtng\n\tCase \"150\"\n\t\tFlangeFolder = \"ASME B16.5(38)\\\"\n\tCase \"300\"\n\t\tFlangeFolder = \"ASME B16.5(41\\\"\n\tCase \"600\"\n\t\tFlangeFolder = \"ASME B16.5(43)\\\"\n\tCase \"900\"\n\t\tFlangeFolder = \"ASME B16.5(44)\\\"\n\tEnd Select\n\tAxis = \"True\"\n\tInsertDis = .125\n\tEnd If\t\t\n\t'MessageBox.Show(FlangeFolder, \"Title\")\n\n\t'\\\\\\ here are the paths where the flanges and pipe are saved at. \n\tPipePath = \"C:\\Users\\dfitting\\Documents\\Inventor\\Content Center Files\\R2019\\en-US\\ASME B36.10M(1)\\\" & \"PIPEC\" & oNozSize & \"-\" & oNozSch & \"-\" & oNozLen & \".ipt\"\n\tFlangePath = \"C:\\Users\\dfitting\\Documents\\Inventor\\Content Center Files\\R2019\\en-US\\\" & FlangeFolder & \"FLNGC\" & oNozSize & \".ipt\"\n\n\tDim componentA As ComponentOccurrence \n\tcomponentA = oNewAssy.ComponentDefinition.Occurrences.Add(PipePath, oMatrix)\n\tcomponentA.Name = \"Pipe\"\n\n\tDim componentB As ComponentOccurrence \n\tcomponentB = oNewAssy.ComponentDefinition.Occurrences.Add(FlangePath, oMatrix)\n\tcomponentB.Name = \"Flange\" \n\t\n\tDim oFace As Face\n\tDim oFlangeFace_Pipe As Face\n\tDim oInsideFace_Pipe As Face\n\tFor Each oFace In componentA.Definition.SurfaceBodies.Item(1).Faces\n\t\tIf oFace.InternalName = \"{D2F0749E-CD50-6222-9FD3-82A95937E2C7}\" Then\n\t\t    oFlangeFace_Pipe = oFace\n\t\tElseIf oFace.InternalName = \"{34E025BE-9958-2F5D-43C5-4A4EDECF143F}\" Then\n\t\t    oInsideFace_Pipe = oFace\n\t\tEnd If\n\tNext\n \n\t \n\tDim oFlangeFace_Flange As Face\n\tFor Each oFace In componentB.Definition.SurfaceBodies.Item(1).Faces\n\t\tIf oFace.InternalName = \"{F5A66A0A-37CA-1154-750F-3BE821568F9F}\" Then\n\t\t    oFlangeFace_Flange = oFace\n\t\t    Exit For\n\t\tEnd If\n\tNext\n\n\tDim oFaceProxy_pipe As FaceProxy\n\tIf Not oFlangeFace_Pipe Is Nothing Then\n\t\tCall componentA.CreateGeometryProxy(oFlangeFace_Pipe, oFaceProxy_pipe)\n\tElse\n\t\tExit Sub\n\tEnd If\n\n\tDim oFaceProxy_Flange As FaceProxy\n\tIf Not oFlangeFace_Flange Is Nothing Then\n\t\tCall componentB.CreateGeometryProxy(oFlangeFace_Flange, oFaceProxy_Flange)\n\tElse\n\t\tExit Sub\n\tEnd If\n\n\tCall oNewAssy.ComponentDefinition.Constraints.AddInsertConstraint(oFaceProxy_pipe, oFaceProxy_Flange, False, InsertDis)\n\t\n\tDim xzPlaneA As WorkPlane\n\txzPlaneA = componentA.Definition.Workplanes.Item(\"XZ Plane\")\n\tDim xzPlaneA_proxy As WorkPlaneProxy\n\tcomponentA.CreateGeometryProxy(xzPlaneA,xzPlaneA_proxy)\n\n\tDim xzPlaneB As WorkPlane\n\txzPlaneB = componentB.Definition.Workplanes.Item(\"XZ Plane\")\n\tDim xzPlaneB_proxy As WorkPlaneProxy\n\tcomponentB.CreateGeometryProxy(xzPlaneB, xzPlaneB_proxy)\n\n\tCall oNewAssy.ComponentDefinition.Constraints.AddMateConstraint(xzPlaneA_proxy,xzPlaneB_proxy,\"0\")\n\n\tDim oCustomProp As Inventor.Property \n\tTry\n\t\toNewAssy.PropertySets.Item(4).Item(\"Custom Prop\").Value = \"Custom Value\"\n\tCatch\n\t\toCustomProp = oNewAssy.PropertySets.Item(4).Add(\"Custom value\", \"Custom Prop\")\n\tEnd Try \n\toNewAssy.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Value = \"123456\"\n\toNewAssy.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\").Value = \"Description\"\n\n\tTry\n\tname = (name).Replace(\"/\", \"_\")\n\tCatch\n\tEnd Try\n\n\t \n\tCall oNewAssy.SaveAs(NolzPath + name + \".iam\", False)\n\t\n\tCall oNewAssy.Close\nNext\n\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Associativity\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: iLogic event triggers not functionig properly\n                    ", "solution": ["itrigger", " = ", "T_Length"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Inventor iLogic Rules Are Not Updated\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Count all Normal components in Assembly\n                    ", "solution": ["Sub Main() \n    ' Get the active assembly. \n    Dim oAsmDoc As AssemblyDocument \n    oAsmDoc = ThisApplication.ActiveDocument \n\n    ' Get the assembly component definition. \n    Dim oAsmDef As AssemblyComponentDefinition \n    oAsmDef = oAsmDoc.ComponentDefinition \n\n    ' Get all of the leaf occurrences of the assembly. \n    Dim oLeafOccs As ComponentOccurrencesEnumerator \n    oLeafOccs = oAsmDef.Occurrences.AllLeafOccurrences \n\n    ' Iterate through the occurrences and print the name. \n\tDim cnt As Integer \n\tcnt = 0\n\t\n    Dim oOcc As ComponentOccurrence \n    For Each oOcc In oLeafOccs \n        If oOcc.BomStructure = BOMStructureEnum.kNormalBOMStructure Then\n\t\t\tcnt = cnt + 1\n\t\t\tMessageBox.Show(oOcc.Name) \n\t\tEnd If\n\t\t\t \n    Next \n\tMessageBox.Show(cnt)\nEnd Sub", "Imports Inventor\nImports System.IO\nPublic Sub Main\nIf TypeOf ThisDoc.Document Is PartDocument Then\nPartFeatureCount(ThisDoc)\nElse\nRunFeatureCount(ThisDoc.Document)\nEnd If\nMessageBox.Show(\"Done!\")\nEnd Sub\n\nPublic Sub RunFeatureCount(ByVal oDoc as Inventor.Document)\n\tDim oAssy As inventor.AssemblyDocument\n\tDim oSubDoc as Inventor.Document\n\tIf oDoc.DocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n\t\toAssy = CType(oDoc,AssemblyDocument)\n\t\tAssemblyFeatureCount(oAssy)\n\t\tFor Each oComp In oAssy.ReferencedDocuments\n\t\t\t'oSubDoc = CType(oComp.Definition.Document,Document)\n\t\t\t'MessageBox.Show(oSubDoc.File.FullFileName)\n\t\t\tIf oComp.DocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n\t\t\t\t'run FeatureCount and then call RunFeatureCount to recurse the assembly structure\n\t\t\t\t'iLogicVb.RunExternalRule(\"FEATURECOUNT\")\n\t\t\t\tFeatureCount(oComp)\n\t\t\t\tRunFeatureCount(oComp)\n\t\t\tElse\n\t\t\t\t'run FeatureCount\n\t\t\t\t'iLogicVb.RunExternalRule(\"FEATURECOUNT\")\n\t\t\t\tFeatureCount(oComp)\n\t\t\tEnd If\n\t\tNext\n\tElseIf oDoc.DocumentType = Inventor.DocumentTypeEnum.kPartDocumentObject Then\n\t\tFeatureCount(oDoc)\n\tEnd If\nEnd Sub\n\nSub FeatureCount(ByVal oDoc as Inventor.Document)\n\t\n\tTry\n\tDim SaveRequired As Boolean = False\n\t\n\t'uncomment for debugging purposes!\n\t'MessageBox.Show(DocName)\n\t\tIf TypeOf oDoc Is PartDocument Then\n\t\t\tIf Not oDoc.File.FullFileName.Contains(\"Content\") And Not oDoc.File.fullfilename.contains(\"FACILITY\") And Not oDoc.File.fullfilename.contains(\"Imported Components\") Then 'skip CC and FACILITY files\n\t\t\t\tDim PartDocName As String = System.IO.Path.GetFileNameWithoutExtension(oDoc.DisplayName) & \":1\"\n\t\t\t\tDim oFeats as PartFeatures = oDoc.ComponentDefinition.Features\n\t\t\t\tDim oParams as Parameters = oDoc.ComponentDefinition.Parameters\n\t\t\t\tTry\n\t\t\t\t\tIf Not iProperties.Value(PartDocName,\"Custom\", \"FEATURECOUNT\") = oFeats.Count Then 'or update it\n\t\t\t\t\t\tiProperties.Value(PartDocName,\"Custom\", \"FEATURECOUNT\") = oFeats.Count\n\t\t\t\t\t\tSaveRequired = True\n\t\t\t\t\tEnd If\n\t\t\t\t\t'MessageBox.Show(\"Feature Count for this part is: \" & oFeats.Count, \"FEATURECOUNT\")\n\t\t\t\t\tIf Not iProperties.Value(PartDocName,\"Custom\",\"PARAMETERCOUNT\") = oParams.Count Then 'or update it\n\t\t\t\t\t\tiProperties.Value(PartDocName,\"Custom\",\"PARAMETERCOUNT\") = oParams.Count\n\t\t\t\t\t\tSaveRequired = True\n\t\t\t\t\tEnd If\n\t\t\t\t\t'MessageBox.Show(\"Parameter Count for \" & oDoc.File.fullfilename &\" is: \" & oParams.Count, \"PARAMETERCOUNT\")\n\t\t\t\t\tIf SaveRequired Then\n\t\t\t\t\t\t'oDoc.Save 'try to save the file.\n\t\t\t\t\tEnd If\n\t\t\t\tCatch\n\t\t\t\t\tiProperties.Value(PartDocName,\"Custom\", \"FEATURECOUNT\") = oFeats.Count\n\t\t\t\t\tiProperties.Value(PartDocName,\"Custom\",\"PARAMETERCOUNT\") = oParams.Count\n\t\t\t\t\t'oDoc.Save 'try to save the file.\n\t\t\t\t\tExit Sub\n\t\t\t\tEnd Try\n\t\t\tEnd If\n\t\tElseIf TypeOf oDoc Is AssemblyDocument Then\n\t\t\tIf Not oDoc.File.FullFileName.Contains(\"Content\") And Not oDoc.File.fullfilename.contains(\"FACILITY\") And Not oDoc.File.fullfilename.contains(\"Imported Components\") Then\n\t\t\t\tDim DocName As String = System.IO.Path.GetFileNameWithoutExtension(oDoc.DisplayName) & \":1\"\n\t\t\t\tDim oFeats as Features = oDoc.ComponentDefinition.Features\n\t\t\t\tDim Occs as ComponentOccurrences = oDoc.ComponentDefinition.Occurrences\t\t\t\n\t\t\t\tDim oParams as Parameters = oDoc.ComponentDefinition.Parameters\n\t\t\t\t'Dim oConstraints as Constraints = oDoc.ComponentDefinition.Constraints\n\t\t\t\tTry\n\t\t\t\t\tIf Not iProperties.Value(DocName,\"Custom\", \"FEATURECOUNT\") = oFeats.Count Then\n\t\t\t\t\t\tiProperties.Value(DocName,\"Custom\", \"FEATURECOUNT\") = oFeats.Count\n\t\t\t\t\t\tSaveRequired = True\n\t\t\t\t\tEnd If\n\t\t\t\t\t'MessageBox.Show(\"Feature Count for this assembly is: \" & oFeats.Count, \"FEATURECOUNT\")\n\t\t\t\t\tIf Not iProperties.Value(DocName, \"Custom\", \"OCCURRENCECOUNT\") = Occs.Count Then\n\t\t\t\t\t\tiProperties.Value(DocName, \"Custom\", \"OCCURRENCECOUNT\") = Occs.Count\n\t\t\t\t\t\tSaveRequired = True\n\t\t\t\t\tEnd If\n\t\t\t\t\t'MessageBox.Show(\"Occurrence Count for \" & oDoc.File.fullfilename & \" is: \" & Occs.Count, \"OCCURRENCECOUNT\")\n\t\t\t\t\tIf Not iProperties.Value(DocName, \"Custom\",\"PARAMETERCOUNT\") = oParams.Count Then\n\t\t\t\t\t\tiProperties.Value(DocName, \"Custom\", \"PARAMETERCOUNT\") = oParams.Count\n\t\t\t\t\t\tSaveRequired = True\n\t\t\t\t\tEnd If\n\t\t\t\t\t'MessageBox.Show(\"Parameter Count for this part is: \" & oDoc.ComponentDefinition.Constraints.Count, \"PARAMETERCOUNT\")\n\t\t\t\t\tIf Not iProperties.Value(DocName, \"Custom\",\"CONSTRAINTCOUNT\") = oDoc.ComponentDefinition.Constraints.Count Then\n\t\t\t\t\t\tiProperties.Value(DocName,\"Custom\", \"CONSTRAINTCOUNT\") = oDoc.ComponentDefinition.Constraints.Count\n\t\t\t\t\t\tSaveRequired = True\n\t\t\t\t\tEnd If\n\t\t\t\t\t'MessageBox.Show(\"Constraint Count for Assembly \" & DocName & \" is: \" & oDoc.ComponentDefinition.Constraints.Count, \"CONSTRAINTCOUNT\")\n\t\t\t\t\tIf SaveRequired Then\n\t\t\t\t\t\t'oDoc.Save 'try to save the file.\n\t\t\t\t\tEnd If\n\t\t\t\tCatch\n\t\t\t\t\t'creates any missing iProperties.\n\t\t\t\t\tiProperties.Value(DocName,\"Custom\", \"FEATURECOUNT\") = oFeats.Count\n\t\t\t\t\tiProperties.Value(DocName, \"Custom\", \"OCCURRENCECOUNT\") = Occs.Count\n\t\t\t\t\tiProperties.Value(DocName, \"Custom\", \"PARAMETERCOUNT\") = oParams.Count\n\t\t\t\t\tiProperties.Value(DocName,\"Custom\", \"CONSTRAINTCOUNT\") = oDoc.ComponentDefinition.Constraints.Count\n\t\t\t\t\t'oDoc.Save 'saves the assembly\n\t\t\t\t\tExit Sub\n\t\t\t\tEnd Try\n\t\t\tEnd If\n\t\tEnd If\n\tCatch ex As Exception\n\t\t'MessageBox.Show(\"The error is: \" & ex.Message & vbCrLf & ex.StackTrace,oDoc.DisplayName)\n\tEnd Try\n\t\nEnd Sub\n\tDim SaveRequired As Boolean = False\nSub PartFeatureCount(ByVal oDoc)\n\tTry\n\t\tIf Not oDoc.File.FullFileName.Contains(\"Content\") And Not oDoc.File.fullfilename.contains(\"FACILITY\") And Not oDoc.File.fullfilename.contains(\"Imported Components\") Then\n\t\t\tDim oFeats as PartFeatures = oDoc.Document.ComponentDefinition.Features\n\t\t\tDim oParams as Parameters = oDoc.Document.ComponentDefinition.Parameters\n\t\t\tTry\n\t\t\t\t'may need to save the file when we're done, hence the boolean check\n\t\t\t\tIf Not iProperties.Value(\"Custom\", \"FEATURECOUNT\") = oFeats.Count Then\n\t\t\t\t\tiProperties.Value(\"Custom\", \"FEATURECOUNT\") = oFeats.Count\n\t\t\t\t\tSaveRequired = True\n\t\t\t\tEnd If\n\t\t\t\t'MessageBox.Show(\"Feature Count for this part is: \" & oFeats.Count, \"FEATURECOUNT\")\n\t\t\n\t\t\t\tIf Not iProperties.Value(\"Custom\",\"PARAMETERCOUNT\") = oParams.Count Then\n\t\t\t\t\tiProperties.Value(\"Custom\",\"PARAMETERCOUNT\") = oParams.Count\n\t\t\t\t\tSaveRequired = True\n\t\t\t\tEnd If\n\t\t\t\t'MessageBox.Show(\"Parameter Count for \" & oDoc.Document.File.fullfilename &\" is: \" & oParams.Count, \"PARAMETERCOUNT\")\n\t\t\t\tIf SaveRequired Then\n\t\t\t\t\t'oDoc.Save 'try to save the file.\n\t\t\t\tEnd If\n\t\t\tCatch\n\t\t\t\t'definitely need to save the file!\n\t\t\t\tiProperties.Value(\"Custom\", \"FEATURECOUNT\") = oFeats.Count\n\t\t\t\tiProperties.Value(\"Custom\",\"PARAMETERCOUNT\") = oParams.Count\n\t\t\t\t'oDoc.Save 'try to save the file.\n\t\t\t\t'oDoc.Close 'try to close the file - on a vaulted file this will fire the check-in dialogue.\n\t\t\tEnd Try\n\t\tEnd If\n\tCatch ex As Exception\n\t\t'MessageBox.Show(\"The error is: \" & ex.Message & vbCrLf & ex.StackTrace)\n\tEnd Try\n\t\nEnd Sub\n\nSub AssemblyFeatureCount(ByVal oDoc)\n\tTry\n\t\tDim SaveRequired As Boolean = False\n\t\t'Dim DocName As String = oDoc.DisplayName\n\t\tIf Not oDoc.File.FullFileName.Contains(\"Content\") And Not oDoc.File.fullfilename.contains(\"FACILITY\") And Not oDoc.File.fullfilename.contains(\"Imported Components\") Then\n\t\t\tDim oFeats as Features = oDoc.ComponentDefinition.Features\n\t\t\tDim Occs as ComponentOccurrences = oDoc.ComponentDefinition.Occurrences\t\t\t\n\t\t\tDim oParams as Parameters = oDoc.ComponentDefinition.Parameters\n\t\t\t'Dim oConstraints as Constraints = oDoc.ComponentDefinition.Constraints\n\t\t\tTry\n\t\t\t\tIf Not iProperties.Value(\"Custom\", \"FEATURECOUNT\") = oFeats.Count Then\n\t\t\t\t\tiProperties.Value(\"Custom\", \"FEATURECOUNT\") = oFeats.Count\n\t\t\t\t\tSaveRequired = True\n\t\t\t\tEnd If\n\t\t\t\t'MessageBox.Show(\"Feature Count for this assembly is: \" & oFeats.Count, \"FEATURECOUNT\")\n\t\t\t\tIf Not iProperties.Value(\"Custom\", \"OCCURRENCECOUNT\") = Occs.Count Then\n\t\t\t\t\tiProperties.Value(\"Custom\", \"OCCURRENCECOUNT\") = Occs.Count\n\t\t\t\t\tSaveRequired = True\n\t\t\t\tEnd If\n\t\t\t\t'MessageBox.Show(\"Occurrence Count for \" & oDoc.File.fullfilename & \" is: \" & Occs.Count, \"OCCURRENCECOUNT\")\n\t\t\t\tIf Not iProperties.Value(\"Custom\",\"PARAMETERCOUNT\") = oParams.Count Then\n\t\t\t\t\tiProperties.Value(\"Custom\", \"PARAMETERCOUNT\") = oParams.Count\n\t\t\t\t\tSaveRequired = True\n\t\t\t\tEnd If\n\t\t\t\t'MessageBox.Show(\"Parameter Count for this part is: \" & oDoc.ComponentDefinition.Constraints.Count, \"PARAMETERCOUNT\")\n\t\t\t\tIf Not iProperties.Value(\"Custom\",\"CONSTRAINTCOUNT\") = oDoc.ComponentDefinition.Constraints.Count Then\n\t\t\t\t\tiProperties.Value(\"Custom\", \"CONSTRAINTCOUNT\") = oDoc.ComponentDefinition.Constraints.Count\n\t\t\t\t\tSaveRequired = True\n\t\t\t\tEnd If\n\t\t\t\t'MessageBox.Show(\"Constraint Count for Assembly \" & DocName & \" is: \" & oDoc.ComponentDefinition.Constraints.Count, \"CONSTRAINTCOUNT\")\n\t\t\t\tIf SaveRequired Then\n\t\t\t\t\t'oDoc.Save 'try to save the file.\n\t\t\t\tEnd If\n\t\t\tCatch\n\t\t\t\t'creates any missing iProperties.\n\t\t\t\tiProperties.Value(\"Custom\", \"FEATURECOUNT\") = oFeats.Count\n\t\t\t\tiProperties.Value(\"Custom\", \"OCCURRENCECOUNT\") = Occs.Count\n\t\t\t\tiProperties.Value(\"Custom\", \"PARAMETERCOUNT\") = oParams.Count\n\t\t\t\tiProperties.Value(\"Custom\", \"CONSTRAINTCOUNT\") = oDoc.ComponentDefinition.Constraints.Count\n\t\t\t\t'oDoc.Save 'saves the assembly\n\t\t\t\tExit Sub\n\t\t\tEnd Try\n\t\tEnd If\n\tCatch ex As Exception\n\t\t'MessageBox.Show(\"The error is: \" & ex.Message & vbCrLf & ex.StackTrace)\n\tEnd Try\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Proper syntax for Greater than, less than, etc. in Select Case statements?\n                    ", "solution": ["oLength = Parameter(\"Table_Length\")\n\nSelect Case oLength\nCase oLength >= 12 And oLength < 24\n'etc.....\nEnd Select"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic control assign name face color\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic rule runs in .iam but will flag an error if drawing file is open\n                    ", "solution": ["'Find all parts in this assembly that contain parameter name G_L\n'Convert the boundary box z dimension into an iProperty\n \nfmgr = ThisApplication.FileManager\nFor Each file In fmgr.Files\n\tTry\n    doc = ThisApplication.Documents.ItemByName (File.fullfileName)\n    compdef = doc.ComponentDefinition\n    If (doc.documenttype = 12291) Then 'Only do this for assembly or subassembly\n   \n        For Each occ In compdef.Occurrences\n            If (occ.definition.type = 83886592) Then 'Only do this for part\n               \n                Try     'Look for existance of G_L parameter\n                    TempG_L = Parameter(occ.Name, \"G_L\")\n                Catch   'Part does not contain G_L\n                    GoTo skipThisPart\n                End Try 'Found a file containing G_L\n\t\t\t\t\n\t\ttemplen = Round(10*(occ.definition.RangeBox.MaxPoint.Z - occ.definition.RangeBox.MinPoint.Z),1)\n\t\t\t\t\n\t\ttemplen = Ceil(templen) 'Rounds the result to next whole number\n                \n                'Push this number value into an unused iProperty           \n                iProperties.Value(occ.Name, \"Project\", \"Vendor\") = templen\n\n            skipThisPart:\n            End If\n        Next occ\n    End If\n\tCatch\n\t\tContinue For\n\tEnd Try\nNext File\n \nInventorVb.DocumentUpdate() 'Update the model"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: iLogic Checking on which plane sketch is defined.\n                    ", "solution": ["Dim oDoc As PartDocument\noDoc = ThisDoc.Document\n\nDim oDef As PartComponentDefinition\noDef = oDoc.ComponentDefinition\n\nDim oSketch As PlanarSketch\nTry \n\toSketch = oDef.Sketches.Item(1)\t\n\tIf oSketch.PlanarEntity.Name <> \"XY Plane\" Then\n\t\tMessageBox.Show _\n\t\t(\"Sketch needs to be definied on XY plane!\", \"iLogic\")\n\tEnd If\nCatch\n\t'catch error when no sketch is found\nEnd Try"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How Can I Edit Revision Table Through iLogic & a Form?\n                    ", "solution": ["Try", "\n", "' Get the current revision table, must be created (Thanks to Curtis)", "\n\t", "Dim", " ", "oRevTable", " ", "As", " ", "RevisionTable", "\n\t", "oRevTable", " = ", "ThisDoc", ".", "Document", ".", "ActiveSheet", ".", "RevisionTables", ".", "Item", "(1)\n\t", "'add a new rev row", "\n\t", "Dim", " ", "oRows", " ", "As", " ", "RevisionTableRows", " \n\t", "oRevRowCount", " = ", "oRevTable", ".", "RevisionTableRows", ".", "Count", "\t\t\n\t", "Dim", " ", "oRow", " ", "As", " ", "RevisionTableRow", "\n\t", "oRows", " = ", "oRevTable", ".", "RevisionTableRows", "\n\t", "oRows", ".", "Add", "()\n\t", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"Date\"", ") = ", "Now", "\n\n", "Catch", "\n\t", "MessageBox", ".", "Show", "(", "\"Tabla de revision No hallada.\"", ", ", "\"REVISION\"", ")\n", "End", " ", "Try", "\n\n", "iLogicVb", ".", "UpdateWhenDone", " = ", "True", " ", "iLogicForm", ".", "Show", "(", "\"Your Form Name Here\"", ")"], "author": "j.romo"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Change part number from assembly level\n                    ", "solution": ["Mid", "(", "oOccurrence", ".", "Name", ",", "8", ",", "12", ")"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Excel link with embedded sheet\n                    ", "solution": ["'i = GoExcel.FindRow(\"3rd Party:Embedding 1\", \"Sheet1\", \"columnName\", \"<=\", 0.2)", "\n\n", "i", " = ", "GoExcel", ".", "FindRow", "(", "\"3rd Party:Incorporation1\"", ", ", "\"toto\"", ", ", "\"TYPE\"", ", ", "\"=\"", ", ", "\"A\"", ")"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Delete User Parameters from Old Files\n                    ", "solution": ["oDoc = ThisDoc.Document\n' before start check if the document type is PartDocument\nIf oDoc.DocumentType = Inventor.DocumentTypeEnum.kPartDocumentObject Then\n\t' define an a String Array which cotain all the parameter names to delete\n\tDim oArr As String() = {\"PROGRAM4\",\"PROGRAM5\",\"PROGRAM3\",\"PROGRAM2\",\"PROGRAM1\",\"MA5\",\"MA4\",\"MA3\",\"MA2\",\"MA1\"}\n\n\tDim oDef As PartComponentDefinition = oDoc.ComponentDefinition\n\t\n\t' now for each String in the \"oArr\" \n\tFor Each s In oArr\n\t\tTry\n\t\t\tDim up As UserParameter = oDef.Parameters.UserParameters.Item(s)\n\t\t\tup.Delete() ' this will be evaluated only if the parameter exist\n\t\tCatch ex As Exception\n\t\t\t' nothing to do only chatch the exception\n\t\tEnd Try\n\tNext\n\toDoc.Update\nEnd If"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Inventor.interop??\n                    ", "solution": [], "author": "jameswillo"},
{"created at": [], "solution Title": "\n                        Re: Place iLogic Component API\n                    ", "solution": [], "author": "duke"},
{"created at": [], "solution Title": "\n                        Re: Error when create a new Part file\n                    ", "solution": ["oDoc = _invapp.Documents.Add _\n        (DocumentTypeEnum.kPartDocumentObject,\n         _invapp.FileManager.GetTemplateFile(DocumentTypeEnum.kPartDocumentObject, ", "SystemOfMeasureEnum.kMetricSystemOfMeasure, DraftingStandardEnum.kISO_DraftingStandard", "), True)"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Ilogic: Exporting .pdf file from drawing to separate location\n                    ", "solution": ["'Get the Full Path of the file\nFullPath = ThisDoc.Path\n\n'Gets the Workspace Path\nWorkspacePath= ThisDoc.WorkspacePath()\n\n'Gets the Length of the WorkspacePath String\nWorkspacePathLength = Len(WorkspacePath)\n\n'Gets just the Path of the file\nPathOnly = ThisDoc.Path\n\n'Removes the Workspace Path from FullPath\nDirectoryPath = Strings.Right(PathOnly, PathOnly.Length-WorkspacePathLength)\n\n'get model path and name for first view in drawing\nmodelName = IO.Path.GetFileName(ThisDrawing.ModelDocument.FullFileName)\n\n'get iprop from model doc\noiProp = iProperties.Value(modelName, \"Summary\", \"Title\") \n'Get the left 4 chars of the title to use as the fodler name\noFolder = Left(oiProp,4)\n\n'Sets the Dirctory that the PDF should be saved in\nPDFPath = \"L:\\$WorkingFolder\\Designs\\\"  & DirectoryPath  & \"\\\" & oFolder\n\n\n'Checks to see if that directory exists, if not, it is created\nIf(Not System.IO.Directory.Exists(PDFPath)) Then\n\tSystem.IO.Directory.CreateDirectory(PDFPath)\nEnd If\n\n'Saves the PDF in the desired location\nThisDoc.Document.SaveAs(PDFPath & \"\\\" & ThisDoc.FileName(False) & (\".pdf\") , True)\n", "'Get the Full Path of the file\nFullPath = ThisDoc.Path\n\n'Gets the Workspace Path\nWorkspacePath= ThisDoc.WorkspacePath()\n\n'Gets the Length of the WorkspacePath String\nWorkspacePathLength = Len(WorkspacePath)\n\n'Gets just the Path of the file\nPathOnly = ThisDoc.Path\n\n'Removes the Workspace Path from FullPath\nDirectoryPath = Strings.Right(PathOnly, PathOnly.Length-WorkspacePathLength)\n\n'get model path and name for first view in drawing\nmodelName = IO.Path.GetFileName(ThisDrawing.ModelDocument.FullFileName)\n\n'get iprop from model doc\noiProp = iProperties.Value(modelName, \"Summary\", \"Title\") \n\n'split up the value where the dash occurs\nDim sArray As String()\nsArray = oiProp.Split(\"-\")\n\ni = LBound(sArray)\n\n'get the first string in the string array\n'Trim removes 'whitespace' aka spaces\noFolder = Trim(sArray(i))\n\n'Sets the Dirctory that the PDF should be saved in\nPDFPath = \"L:\\$WorkingFolder\\Designs\\\"  & DirectoryPath  & \"\\\" & oFolder\n\n'Checks to see if that directory exists, if not, it is created\nIf(Not System.IO.Directory.Exists(PDFPath)) Then\n\tSystem.IO.Directory.CreateDirectory(PDFPath)\nEnd If\n\n'Saves the PDF in the desired location\nThisDoc.Document.SaveAs(PDFPath & \"\\\" & ThisDoc.FileName(False) & (\".pdf\") , True)\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Custom Form With Date Issue\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Show total mass automatically in Parts list\n                    ", "solution": ["Sub testTotalMass()\n\nDim dwg As DrawingDocument\nSet dwg = ThisApplication.ActiveDocument\n\nDim oview As DrawingView\nSet oview = ThisApplication.CommandManager.Pick(kDrawingViewFilter, \"Pick the assembly view\")\n\nOn Error Resume Next\nDim asm As AssemblyDocument\nSet asm = oview.ReferencedDocumentDescriptor.ReferencedDocument\nIf Err Then\n    MsgBox (\"Not an assembly\")\n    Exit Sub\nEnd If\n\nDim pl As PartsList\nSet pl = dwg.ActiveSheet.PartsLists.Item(1)\n\nDim plr As PartsListRow\nDim found As Boolean\nFor Each plr In pl.PartsListRows\n    If plr.Item(3).Value = \"TOTAL MASS\" Then\n        found = True\n        Exit For\n    End If\nNext\n\nDim txn As Transaction\nSet txn = ThisApplication.TransactionManager.StartTransaction(dwg, \"Add total mass\")\n\nIf found = False Then Set plr = pl.PartsListRows.Add(pl.PartsListRows.count, False)\n\nplr.Item(3).Value = \"TOTAL MASS\"\nplr.Item(4).Value = Round(asm.ComponentDefinition.MassProperties.mass, 2) & \" kg\"\n\ntxn.End\n\nEnd Sub"], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: Attaching DXF file to an IDW file so they both check-in to Vault together\n                    ", "solution": ["Option explicit on\n''' <summary>\n''' Will only run if the activedocument has been saved.\n''' </summary> \nSub Main()\n\tDim trans As Transaction = ThisApplication.TransactionManager.StartTransaction(ThisApplication.ActiveDocument, \"Export and Attach DXF file\")\n\t\tIf Parameter(\"m_p_s\") = \"p (purchased)\" Then\n\t\t\ttrans.abort()\n\t\tElseIf Not iProperties.Value(\"Project\", \"Part Number\") = \"\" Then\n\t\t\tDim filenameToAttach As String = ExportToDXF()\n\t\t\tIf Not filenameToAttach = String.Empty Then\n\t\t\t\tDim doc As Document = ThisApplication.ActiveDocument\n\t\t\t\tAddReferences(doc, filenameToAttach)\n\t\t\tEnd If\n\t\tElse\n\t\t\tMessageBox.Show(\"NuTec Part Number is blank...Cannot save the .dxf file\",\"Error Saving File\")\n\t\t\ttrans.Abort()\n\t\tEnd If\nEnd Sub\n\n''' <summary>\n''' Returns an empty string if the dxf file didn't save for some reason.\n''' </summary>\n''' <returns></returns>\nFunction ExportToDXF() As String\n\tDim filename As String\n\t' Get the DXF translator Add-In.\n\tDim DXFAddIn As TranslatorAddIn\n\tDXFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{90AF7F40-0C01-11D5-8E83-0010B541CD80}\")\n\t'Set a reference to the active document (the document to be published)\n\tDim oDocument As Document\n\toDocument = ThisApplication.ActiveDocument\n\tDim oContext As TranslationContext\n\toContext = ThisApplication.TransientObjects.CreateTranslationContext\n\toContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n\t'Create a NameValueMap object\n\tDim oOptions As NameValueMap\n\toOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\t'Create a DataMedium object\n\tDim oDataMedium As DataMedium\n\toDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\t'Check whether the translator has 'SaveCopyAs' options\n\tIf DXFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\tDim strIniFile As String\n\tstrIniFile = \"L:\\Autodesk Software\\iLogic Rules\\NuTec Save As DXF File.ini\"\n\t'Create the name-value that specifies the ini file to use.\n\toOptions.Value(\"Export_Acad_IniFile\") = strIniFile\n\tEnd If\n\t'Set the destination file name\n\toDataMedium.FileName = ThisDoc.PathAndFileName(False) & \".dxf\"\n\t'Publish document.\n\tDXFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n\tfilename = oDataMedium.FileName\n\t'Launch the dxf file in whatever application Windows is set to open this document type with\n\tDim i As DialogResult = MessageBox.Show(\"Preview the DXF file?\", \"Open the DXF File\",MessageBoxButtons.YesNo,MessageBoxIcon.Question)\n\tIf i = DialogResult.Yes Then ThisDoc.Launch(oDataMedium.FileName)\n\tIf System.IO.File.Exists(filename) Then\n\t\tMessageBox.Show(filename)\n\t\tReturn filename\n\tElse\n\t\tReturn \"\"\n\tEnd If\nEnd Function\n\n''' <summary>\n''' Attaches any file using the full c:\\path\\to\\your\\file.extension format.\n''' </summary>\n''' <param name=\"odoc\"></param>\n''' <param name=\"selectedfile\"></param>\nPublic Sub AddReferences(ByVal odoc As Inventor.Document, ByVal selectedfile As String)\n\tDim oleReference As ReferencedOLEFileDescriptor\n\t'This deletes any previously attached .dxf files before attaching a New .dxf file\n\tFor Each oleReference In odoc.ReferencedOLEFileDescriptors\n\t\tCall oleReference.Delete()\n\tNext\t\n\tIf selectedfile.Contains(\"|\") Then ' we have multiple files selected.\n\t\tDim file As String() = selectedfile.Split(\"|\")\n\t\tFor Each s As String In file\n\t\t\toleReference = odoc.ReferencedOLEFileDescriptors _\n\t\t\t\t.Add(s, OLEDocumentTypeEnum.kOLEDocumentLinkObject)\n\t\t\toleReference.BrowserVisible = True\n\t\t\toleReference.Visible = False\n\t\t\toleReference.DisplayName = Mid$(s, InStrRev(s, \"\\\") + 1)\n\t\tNext\n\tElse\n\t\toleReference = odoc.ReferencedOLEFileDescriptors _\n\t\t\t\t.Add(selectedfile,OLEDocumentTypeEnum.kOLEDocumentLinkObject)\n\t\toleReference.BrowserVisible = True\n\t\toleReference.Visible = False\n\t\toleReference.DisplayName = Mid$(selectedfile, InStrRev(selectedfile, \"\\\") + 1)\n\tEnd If\nEnd Sub"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Tracking Inventor under-process (Property and Attribute values change)\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule to suppress feature based on sketch dimension\n                    ", "solution": ["If Cap_Height < \".750\" Then \n\tFeature.IsActive(\"Fillet1\") = False\nElse Feature.IsActive(\"Fillet1\") = True\nEnd If"], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: Assign value in the Clipboard to variable in the rule\n                    ", "solution": ["Imports System.Windows.Forms", "Sub Main()\n  \n  Dim Len_Max As Double\n  Len_Max = Convert.ToDouble(Clipboard.GetText)\t'To assgn clipboard value (numerical) to the variable\n  Dim oMfgr As String\n  oMfgr = Clipboard.GetText\t\t'To assgn clipboard value (string) to the variable\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic Create Leader Note no Attachment\n                    ", "solution": ["'The setup\nDim invApp As Inventor.Application\ninvApp = ThisApplication\nDim oDrawDoc As DrawingDocument\noDrawDoc = invApp.ActiveEditDocument\nDim oActiveSheet As Sheet\noActiveSheet = oDrawDoc.ActiveSheet\n'Looks up existing placed assembly\n'oModelDoc = IO.Path.GetFileName(ThisDrawing.ModelDocument.FullFileName)\n'sets model parameter frame as oFrame\n'oFrame = Parameter(oModelDoc, \"frame\")\n'creates fake parameter for example purposes\noFrame = \"X\"\nFor Each oSheet As Sheet In oDrawDoc.Sheets\n\tDim Xcoord = 12.25\n\tDim Ycoord = 17.25\n\tDim LS = 0.4\n\tDim oTG As Inventor.TransientGeometry = invApp.TransientGeometry\n\tDim leaderPoints As ObjectCollection = invApp.TransientObjects.CreateObjectCollection()\n\tleaderPoints.Add(oTG.CreatePoint2d(oSheet.Width - Xcoord, Ycoord))\n\tdim oNote as leadernote = oSheet.DrawingNotes.LeaderNotes.Add(leaderpoints, \"Model \" & oFrame)\n\tleaderPoints.Clear()\n'\toNote = oSheet.DrawingNotes.GeneralNotes.AddFitted(oTG.CreatePoint2d(oSheet.Width - Xcoord, Ycoord), \"Model \" & oFrame)\n\tYcoord = Ycoord - LS\n\tleaderPoints.Add(oTG.CreatePoint2d(oSheet.Width - Xcoord, Ycoord))\n\toNote = oSheet.DrawingNotes.LeaderNotes.Add(leaderPoints, \"Note 2\")\n'\toNote = oSheet.DrawingNotes.GeneralNotes.AddFitted(oTG.CreatePoint2d(oSheet.Width - Xcoord, Ycoord), \"Note 2\")\n\toDrawDoc.Update()\n'\tWith oNote\n'\t\t.HorizontalJustification = Inventor.HorizontalTextAlignmentEnum.kAlignTextCenter\n'\t\t.VerticalJustification = Inventor.VerticalTextAlignmentEnum.kAlignTextMiddle\n'\t\t.TextStyle.FontSize = 0.203\n'\tEnd With\nNext"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Set option create independent bodies on failed boolean in iLogic rule\n                    ", "solution": ["oDerivedAssemblyDef.IndependentSolidsOnFailedBoolean = True"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: ilogic search iproperties for special characters\n                    ", "solution": ["Option Explicit on\nSub Main()\n\t\n\t'Get document file name\n'\tdocname = ThisDoc.FileName(False)\n\t'Get the model which the drawing is referencing (1st view)\n\tDim oModelDoc As String = IO.Path.GetFileName(ThisDrawing.ModelDocument.FullFileName)\n\tDim oDesc As String = iProperties.Value(oModelDoc, \"Project\", \"Description\")\n\tDim disallowedlist As String = \"<>:;/\\|?*\" & Chr(34)\n\tIf oDesc = \"\" Then\n\t\tMessageBox.Show(\"The Description iproperty cannot be empty. Go to the Part/Assembly and type a Description. NO PDF WILL BE GENERATED\", \"Warning\")\n\t\tExit Sub\n\tElse\n\t\t'debug:\n'\t\tMessageBox.Show(\"Description not empty, continuing!\" & (oDesc.IndexOfAny(disallowedlist.ToCharArray) > 1))\n\t\tIf oDesc.IndexOfAny(disallowedlist.ToCharArray) > -1 Then\n\t\t\tMessageBox.Show(\"The Description contains an illegal character, exiting!\")\n\t\t\tExit Sub\n\t\tEnd If\n\tEnd If\n\n    ' Get the PDF translator Add-In.\n    Dim PDFAddIn As TranslatorAddIn\n    PDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\n    'Set a reference to the active document (the document to be published).\n    Dim oDocument As Document\n    oDocument = ThisApplication.ActiveDocument\n\n    Dim oContext As TranslationContext\n    oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = kFileBrowseIOMechanism\n\n    ' Create a NameValueMap object\n    Dim oOptions As NameValueMap\n    oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n    ' Create a DataMedium object\n    Dim oDataMedium As DataMedium\n    oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n    ' Check whether the translator has 'SaveCopyAs' options\n    If PDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n        ' Options for drawings...\n        oOptions.Value(\"All_Color_AS_Black\") = 0\n        oOptions.Value(\"Remove_Line_Weights\") = 0\n        oOptions.Value(\"Vector_Resolution\") = 400\n        oOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\n        'oOptions.Value(\"Custom_Begin_Sheet\") = 2\n        'oOptions.Value(\"Custom_End_Sheet\") = 4\n    End If\n    \n    'get PDF target folder path\n    Dim oPath As String = IO.Path.GetDirectoryName(ThisDrawing.ModelDocument.FullFileName) ' \"C:\\Users\\user\\Desktop\\test\"\n\tMessageBox.Show(oPath)\n    'oFolder = Left(oPath, InStrRev(oPath, \"\\\")) & \"PDF\"\n    Dim oFileName As String = ThisDoc.FileName(False) 'without extension\n    Dim oRevNum As String = iProperties.Value(\"Project\", \"Revision Number\")\n\tDim oDate As String = DateTime.Now.ToString(\"_yyMMdd\")\n    \n\tIf oDesc = \"\" Then\n\t\tMessageBox.Show(\"Warning\", \"Description iproperties is empty\")\n\tEnd If\n\tDim oPathCom As String = String.Empty\n\tIf oRevNum = \"-\" Or oRevNum = \"\" Then\n\t\toPathCom = oPath & \"\\\" & oFileName & \" - \" & oDesc & oDate &\".pdf\"\n\tElse\n\t\toPathCom = oPath & \"\\\" & oFileName & \"-\"  & oRevNum & \" - \" & oDesc & oDate & \".pdf\"\n\tEnd If\n\n\toDataMedium.FileName = oPathCom\n\t\n\n    'Publish document.\n    Call PDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n    '\nEnd Sub"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Change Inventor references using PowerShell\n                    ", "solution": ["[System.Reflection.Assembly]::LoadWithPartialName(\"Autodesk.Inventor.Interop\")\n\n$invApp = New-Object Inventor.ApprenticeServerComponentClass\n$oDoc = $invApp.Open(\"c:\\progetti\\test.iam\") # open the assembly\n\n# list all referenced files\nforeach($ref in $oDoc.ReferencedFileDescriptors){\n    $ref.FullFileName\n}\n# my referenced file:\n# c:\\progetti\\Part2.ipt\n# c:\\progetti\\Part3.ipt\n\nforeach($ref in $oDoc.File.ReferencedFileDescriptors){\n    if($ref.FullFileName -eq \"c:\\progetti\\Part3a.ipt\"){\n        $ref.ReplaceReference(\"c:\\progetti\\Part3.ipt\")\n    }\n}\n\nWrite-Host \"After modification...\"\nforeach($ref in $oDoc.ReferencedFileDescriptors){\n    $ref.FullFileName\n}\n# my referenced file after modification:\n# c:\\progetti\\Part2.ipt\n# c:\\progetti\\Part3a.ipt\n$invApp.FileSaveAs.AddFileToSave($oDoc, $oDoc.FullFileName)\n$invApp.FileSaveAs.ExecuteSave() # save the assembly\n$invApp.Close()"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: open a document from specific folder\n                    ", "solution": [], "author": "pineapple.law19"},
{"created at": [], "solution Title": "\n                        Re: Delete notes on specified sheet only\n                    ", "solution": ["Dim invApp As Inventor.Application\n    invApp = ThisApplication\n    Dim oDrawDoc As Document\n    oDrawDoc = invApp.ActiveEditDocument\n    oSheet = oDrawDoc.Sheets(2) ' changed this line\n        For Each oGeneralNote In oSheet.DrawingNotes.GeneralNotes\n            oGeneralNote.Delete\n        Next\n        For Each oLeaderNote In oSheet.DrawingNotes.LeaderNotes\n            oLeaderNote.Delete\n        Next\n'removed the 'Next' because we aren't in a loop anymore"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Save copy as PDF options\n                    ", "solution": ["Sub Main()\n\t\n\tDim SheetRange As String = InputBox(\"Please enter the range of sheets you want to export.\" & vbLf & _\n\t\"You can use these input types:\" & vbLf & \"  ' 1 ' ,  ' 1-10 ' \", \"Sheet range\", \"1-10\")\n\tIf SheetRange = vbNullString Then Exit Sub\n\tDim SPL As Integer = InStr(SheetRange, \"-\")\n\tDim L1 As Integer\n\tDim L2 As Integer\n\tIf SPL > 0 Then\n\t\tL1 = Val(Left(SheetRange, SPL))\n\t\tL2 = Val(Mid(SheetRange, SPL + 1))\n\tElse\n\t\tL1 = Val(SheetRange)\n\t\tL2 = Val(SheetRange)\n\tEnd If\n\t' Get the PDF translator Add-In.\n\tDim PDFAddIn As TranslatorAddIn\n\tPDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\t'Set a reference to the active document (the document to be published).\n\tDim oDocument As Document\n\toDocument = ThisApplication.ActiveDocument\n\tDim oContext As TranslationContext\n\toContext = ThisApplication.TransientObjects.CreateTranslationContext\n\toContext.Type = kFileBrowseIOMechanism\n\t' Create a NameValueMap object\n\tDim oOptions As NameValueMap\n\toOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\t' Create a DataMedium object\n\tDim oDataMedium As DataMedium\n\toDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\t' Check whether the translator has 'SaveCopyAs' options\n\tIf PDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\t' Options for drawings...\n\toOptions.Value(\"All_Color_AS_Black\") = 0\n\toOptions.Value(\"Remove_Line_Weights\") = 0\n\toOptions.Value(\"Vector_Resolution\") = 400\n\toOptions.Value(\"Sheet_Range\") = PrintRangeEnum.kPrintSheetRange \n\toOptions.Value(\"Custom_Begin_Sheet\") = L1\n\toOptions.Value(\"Custom_End_Sheet\") = L2\n\tEnd If\n\t'Set the destination file name\n\toDataMedium.FileName = \"C:\\temp\\test.pdf\"\n\t'Publish document.\n\tCall PDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Create user parameters / Crear par\u00e1metros usuario\n                    ", "solution": ["Dim oPartDoc As PartDocument = ThisDoc.Document\nDim userParams As UserParameters = oPartDoc.ComponentDefinition.Parameters.UserParameters\nDim newParam As UserParameter ' Placeholder\nDim oFormat As CustomPropertyFormat\n\n'LENGTH\nTry\noParam = oPartDoc.ComponentDefinition.Parameters(\"LENGTH\")\nCatch \t'If the parameter was not found, then create a new one.\n\tnewParam = userParams.AddByExpression(\"LENGTH\", 0, \"mm\") ' Create the Parameter as per above\n\tnewParam.ExposedAsProperty=True 'Flag for Export\n\toFormat=newParam.CustomPropertyFormat 'For some reason or other this line is needed to enable the following formatting\n\toFormat.PropertyType=Inventor.CustomPropertyTypeEnum.kTextPropertyType\n\t\t\toFormat.Precision=Inventor.CustomPropertyPrecisionEnum.kZeroDecimalPlacePrecision 'Set one decimal place\n\t\t\t'oFormat.Units=\"mm\" 'Units\n\t\t\toFormat.ShowUnitsString=False\n\t\t\toFormat.ShowLeadingZeros=False\n\t\t\toFormat.ShowTrailingZeros=False\nEnd Try\n\t\t\t\n'WIDTH\nTry\noParam = oPartDoc.ComponentDefinition.Parameters(\"WIDTH\")\nCatch \t'If the parameter was not found, then create a new one.\nnewParam = userParams.AddByExpression(\"WIDTH\", 0, \"mm\") ' Create the Parameter as per above\n\tnewParam.ExposedAsProperty=True 'Flag for Export\n\toFormat=newParam.CustomPropertyFormat 'For some reason or other this line is needed to enable the following formatting\n\toFormat.PropertyType=Inventor.CustomPropertyTypeEnum.kTextPropertyType\n\t\t\toFormat.Precision=Inventor.CustomPropertyPrecisionEnum.kZeroDecimalPlacePrecision 'Set one decimal place\n\t\t\t'oFormat.Units=\"mm\" 'Units\n\t\t\toFormat.ShowUnitsString=False\n\t\t\toFormat.ShowLeadingZeros=False\n\t\t\toFormat.ShowTrailingZeros=False\n\t\t\t\nEnd Try\n'HEIGHT\nTry\noParam = oPartDoc.ComponentDefinition.Parameters(\"HEIGHT\")\nCatch \t'If the parameter was not found, then create a new one.\nnewParam = userParams.AddByExpression(\"HEIGHT\", 0, \"mm\") ' Create the Parameter as per above\n\tnewParam.ExposedAsProperty=True 'Flag for Export\n\toFormat=newParam.CustomPropertyFormat 'For some reason or other this line is needed to enable the following formatting\n\toFormat.PropertyType=Inventor.CustomPropertyTypeEnum.kTextPropertyType\n\t\t\toFormat.Precision=Inventor.CustomPropertyPrecisionEnum.kZeroDecimalPlacePrecision 'Set one decimal place\n\t\t\t'oFormat.Units=\"mm\" 'Units\n\t\t\toFormat.ShowUnitsString=False\n\t\t\toFormat.ShowLeadingZeros=False\n\t\t\toFormat.ShowTrailingZeros=False\n\t\t\t\nEnd Try\n'OD\nTry\noParam = oPartDoc.ComponentDefinition.Parameters(\"OD\")\nCatch \t'If the parameter was not found, then create a new one.\nnewParam = userParams.AddByExpression(\"OD\", 0, \"mm\") ' Create the Parameter as per above\n\tnewParam.ExposedAsProperty=True 'Flag for Export\n\toFormat=newParam.CustomPropertyFormat 'For some reason or other this line is needed to enable the following formatting\n\toFormat.PropertyType=Inventor.CustomPropertyTypeEnum.kTextPropertyType\n\t\t\toFormat.Precision=Inventor.CustomPropertyPrecisionEnum.kZeroDecimalPlacePrecision 'Set one decimal place\n\t\t\t'oFormat.Units=\"mm\" 'Units\n\t\t\toFormat.ShowUnitsString=False\n\t\t\toFormat.ShowLeadingZeros=False\n\t\t\toFormat.ShowTrailingZeros=False\nEnd Try\n'THICK\nTry\noParam = oPartDoc.ComponentDefinition.Parameters(\"THICK\")\nCatch \t'If the parameter was not found, then create a new one.\nnewParam = userParams.AddByExpression(\"THICK\", 0, \"mm\") ' Create the Parameter as per above\n\tnewParam.ExposedAsProperty=True 'Flag for Export\n\toFormat=newParam.CustomPropertyFormat 'For some reason or other this line is needed to enable the following formatting\n\toFormat.PropertyType=Inventor.CustomPropertyTypeEnum.kTextPropertyType\n\t\t\toFormat.Precision=Inventor.CustomPropertyPrecisionEnum.kZeroDecimalPlacePrecision 'Set one decimal place\n\t\t\t'oFormat.Units=\"mm\" 'Units\n\t\t\toFormat.ShowUnitsString=False\n\t\t\toFormat.ShowLeadingZeros=False\n\t\t\toFormat.ShowTrailingZeros=False\n\t\t\tEnd Try", "'Reg - iLogic to create a new User Parameter\nSub Main()\nDim oNewParam as String\nDim oPartDoc as PartDocument = ThisDoc.Document\n\n'Get the new Parameter Name\n\ttNewParam = InputBox(\"Input Name for New Parameter\" & vbNewLine & \"\" & vbNewLine & \"add '-DEG' for Angle\" & vbNewLine & \"E.G: xxx-DEG\", \"iLogic\", \"\") ' prompt the user for a parameter name\n\nIf tNewParam <>\"\" Then 'Error Check if user presses the Cancel key\n'Split the name If Needed\n\toNewParam = Split(tNewParam, \"-\") (0)\n\n 'Check for the new parameter name\n 'If found then Exit to the question of create something else.\n\tTry\n\t\toParam = oPartDoc.ComponentDefinition.Parameters(oNewParam)\n\t\ti1 = MessageBox.Show(oNewParam & vbNewLine & \"Parameter already exists\", \"iLogic\", MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button1)\n\t\tCall DONEAsktoCreateAnother ' Subroutine to create another\n\t\t\n\t\tCatch \t'If the parameter was not found, then create a new one.\n\t\t\tIf tNewParam.Contains (\"deg\") Or tNewParam.Contains (\"DEG\")Then 'Checks the Temp name, inputted by user\n\t\t\t\tCall DegreeSUB (oNewParam) 'Pass the Variable name to the sub\n\t\t\tElse\n\t\t\t\tCall mmSUB (oNewParam) 'Pass the Variable name to the sub\n\t\t\t'Return\n\t\t\tEnd If\n\t\tEnd Try\n\tElse 'this one comes from the cancel key press\n\tMessageBox.Show(\"Cancel key pressed\", \"iLogic\")\n\tReturn 'exit the code if Cancel is pressed.\n\tEnd If\nEnd Sub\n\nSub DegreeSUB (ByRef oNewParam As String)\nDim oPartDoc As PartDocument = ThisDoc.Document\nDim userParams As UserParameters = oPartDoc.ComponentDefinition.Parameters.UserParameters\n\noValue=InputBox(\"Add a Value for\" & vbNewLine &  oNewParam & \" ?\", \"iLogic\", 0) ' Get a Value if desired\noComment=InputBox(\"Add a description if desired for\" & vbNewLine &  oNewParam & \" ?\", \"iLogic\", \"\") ' Get a description if desired\n\tDim newParam As UserParameter ' Placeholder\n\tDim oFormat As CustomPropertyFormat\n\tnewParam = userParams.AddByExpression(oNewParam, oValue, \"deg\") ' Create the Parameter as per above\n\tnewParam.ExposedAsProperty=True 'Flag for Export\n\toFormat=newParam.CustomPropertyFormat 'For some reason or other this line is needed to enable the following formatting\n\toFormat.PropertyType=Inventor.CustomPropertyTypeEnum.kTextPropertyType\n\t\t\toFormat.Precision=Inventor.CustomPropertyPrecisionEnum.kOneDecimalPlacePrecision 'Set one decimal place\n\t\t\t'oFormat.Units=\"mm\" 'Units\n\t\t\toFormat.ShowUnitsString=False\n\t\t\toFormat.ShowLeadingZeros=False\n\t\t\toFormat.ShowTrailingZeros=False\n\tnewParam.Comment=oComment 'Set the Description\n\tCall AsktoCreateAnother (oNewParam, oComment) ' Subroutine to add another\nEnd Sub\n\nSub mmSUB (ByRef oNewParam As String)\nDim oPartDoc As PartDocument = ThisDoc.Document\nDim userParams As UserParameters = oPartDoc.ComponentDefinition.Parameters.UserParameters\n\noValue=InputBox(\"Add a Value for\" & vbNewLine &  oNewParam & \" ?\", \"iLogic\", 0) ' Get a Value if desired\noComment=InputBox(\"Add a description if desired for\" & vbNewLine &  oNewParam & \" ?\", \"iLogic\", \"\") ' Get a description if desired\n\tDim newParam As UserParameter ' Placeholder\n\tDim oFormat As CustomPropertyFormat\n\tnewParam = userParams.AddByExpression(oNewParam, oValue, \"mm\") ' Create the Parameter as per above\n\tnewParam.ExposedAsProperty=True 'Flag for Export\n\toFormat=newParam.CustomPropertyFormat 'For some reason or other this line is needed to enable the following formatting\n\toFormat.PropertyType=Inventor.CustomPropertyTypeEnum.kTextPropertyType\n\t\t\toFormat.Precision=Inventor.CustomPropertyPrecisionEnum.kOneDecimalPlacePrecision 'Set one decimal place\n\t\t\t'oFormat.Units=\"mm\" 'Units\n\t\t\toFormat.ShowUnitsString=False\n\t\t\toFormat.ShowLeadingZeros=False\n\t\t\toFormat.ShowTrailingZeros=False\n\tnewParam.Comment=oComment 'Set the Description\n\tCall AsktoCreateAnother (oNewParam, oComment) ' Subroutine to add another\nEnd Sub\n\nSub AsktoCreateAnother (ByRef oNewParam As String, ByRef oComment As String)\n\ti2 = MessageBox.Show(oNewParam & \" (\" & oComment & \")\" & \" - Created\" & vbNewLine & \"Add Another\", \"iLogic\", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)\n\tIf i2 = \"6\" Then\n\tMain 'Got to the begining\n\tElseIf i2 = \"7\" Then\n\t'Return\n\tEnd If\n\tReturn\nEnd Sub\n\nSub DONEAsktoCreateAnother\n\ti3 = MessageBox.Show(\"Add Another\", \"iLogic\", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)\n\tIf i3 = \"6\" Then\n\tMain 'Got to the begining\n\tElseIf i3 = \"7\" Then\n\t'Return\n\tEnd If\n\tReturn\nEnd Sub"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Rename hole description in a Hole Tabele\n                    ", "solution": ["oTable.HoleTableRows.Item(i).Item(1).Text = \"A1\""], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Setting view cube orientation with iLogic\n                    ", "solution": ["Sub Main()\ndim partDoc as partdocument = thisapplication.activedocument 'gets the activedocument in partdocument form\ndim partDef as partcomponentdefinition = partdoc.componentdefinition 'gets the part file definition.\ndim selectedworkplane as workplane = partDef.workplanes(1) 'gets the XY plane so swap this with whatever your object is\nSetFrontViewToWorkplane(ThisApplication, partDoc, selectedworkplane)\n\nEnd Sub\n\nPublic Shared Sub SetFrontViewToWorkplane(ByVal InventorApp As Inventor.Application, ByVal partDoc As PartDocument, ByVal selectedWorkPlane As WorkPlane)\n    partDoc.SelectSet.Clear()\n    partDoc.SelectSet.[Select](selectedWorkPlane)\n    Dim selSet As SelectSet = partDoc.SelectSet\n    Dim LookAt As ControlDefinition = InventorApp.CommandManager.ControlDefinitions(\"AppLookAtCmd\")\n    LookAt.Execute()\n    selSet.Clear()\n    Dim activeView As View = InventorApp.ActiveView\n    activeView.SetCurrentAsFront()\nEnd Sub"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Copy Model Properties not picking up formulas\n                    ", "solution": ["oRefDoc = ThisDrawing.ModelDocument\nDim oPartNumber As String\noPartNumber = oRefDoc.PropertySets(\"Design Tracking Properties\").Item(\"Part Number\").Value \niProperties.Value(\"Project\", \"Part Number\") = oPartNumber \n\nDim oDescription As String \noDescription = oRefDoc.PropertySets(\"Design Tracking Properties\").Item(\"Description\").Value \niProperties.Value(\"Project\", \"Description\") = oDescription\n\nDim oRevision As String \noRevision = oRefDoc.PropertySets(\"Summary Information\").Item(\"Revision Number\").Value \niProperties.Value(\"Summary\", \"Revision Number\") = oRevision\n\nDim oAuthor As String \noPropValue = oRefDoc.PropertySets(\"Summary Information\").Item(\"Author\").Value \niProperties.Value(\"Summary\", \"Author\") = oPropValue\n\n\nDim oFeature As String \nTry\n\toFeature = oRefDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"FEATURES\").Value \n\tiProperties.Value(\"Custom\", \"FEATURES\") = oFeature\nCatch \n\tMessageBox.Show( \"'FEATURES' Custom property not found\", \"Custom property\")\nEnd Try\n\nDim oMachineRef As String \nTry\n\toMachineRef = oRefDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"MACHINE REF\").Value \n\tiProperties.Value(\"Custom\", \"MACHINE REF\") = oMachineRef\nCatch \n\tMessageBox.Show( \"'MACHINE REF' Custom property not found\", \"Custom property\")\nEnd Try\n\nDim oManufacturer As String \nTry\n\toManufacturer = oRefDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"MANUFACTURER\").Value \n\tiProperties.Value(\"Custom\", \"MANUFACTURER\") = oManufacturer\nCatch \n\tMessageBox.Show( \"'MANUFACTURER' Custom property not found\", \"Custom property\")\nEnd Try\n\nDim oManufacturerPN As String \nTry\n\toManufacturerPN = oRefDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"MANUFACTURER'S P/N\").Value \n\tiProperties.Value(\"Custom\", \"MANUFACTURER'S P/N\") = oManufacturerPN\nCatch \n\tMessageBox.Show( \"'MANUFACTURER'S P/N' Custom property not found\", \"Custom property\")\nEnd Try\n "], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: FindUsingRay in C#\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: 2D Equation Curve\n                    ", "solution": ["Public Sub SketchCurves()\n    ' Create a new part.\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.Documents.Add(kPartDocumentObject, _\n                  ThisApplication.FileManager.GetTemplateFile(kPartDocumentObject))\n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n                  \n    \n    ' Create a 2D sketch on the Y-Z plane.\n    Dim sketch2 As PlanarSketch\n    Set sketch2 = partDef.Sketches.Add(partDef.WorkPlanes.Item(1))\n    \n    ' Create a spline based on an equation.\n    Dim equationCurve As SketchEquationCurve\n    Set equationCurve = sketch2.SketchEquationCurves.Add(kParametric, kCartesian, \".001*t * cos(t)\", \".001*t * sin(t)\", 0, 360)\n                                \n    ' Create a 3D sketch.\n    Dim sketch3 As Sketch3D\n    Set sketch3 = partDef.Sketches3D.Add\n    \n    \n    ' Create a 3D spline based on an equation.\n    Dim equationCurve2 As SketchEquationCurve3D\n    Set equationCurve2 = sketch3.SketchEquationCurves3D.Add(kCartesian, _\n                            \".001*t * cos(t) + 8\", \".001*t * sin(t)\", \"0.002*t\", 0, 360 * 3)\n                            \n    ThisApplication.ActiveView.Fit    \n\nEnd Sub"], "author": "Xun.Zhang"},
{"created at": [], "solution Title": "\n                        Re: How to attach sketched symbol leader to view in drawing using inventor API?\n                    ", "solution": ["    Public Sub InsertSketchedSymboSample(oDim As Object, ByRef MaxP As Point2d, ByRef MinP As Point2d) 'ByRef Text As Box2d)\n        Dim oDrawDoc As DrawingDocument\n        oDrawDoc = _invApp.ActiveDocument\n        ' Obtain a sketched symbol definition.\n        Dim oSketchedSymbolDef As SketchedSymbolDefinition = Nothing\n        For i = 1 To oDrawDoc.SketchedSymbolDefinitions.Count\n            If oDrawDoc.SketchedSymbolDefinitions.Item(i).Name = \"mySymbol\" Then\n                oSketchedSymbolDef = oDrawDoc.SketchedSymbolDefinitions.Item(i)\n                Exit For\n            End If\n        Next\n        If oSketchedSymbolDef Is Nothing Then\n            CreateSketchedSymbolDefinition()\n            For i = 1 To oDrawDoc.SketchedSymbolDefinitions.Count\n                If oDrawDoc.SketchedSymbolDefinitions.Item(i).Name = \"mySymbol\" Then\n                    oSketchedSymbolDef = oDrawDoc.SketchedSymbolDefinitions.Item(i)\n                    Exit For\n                End If\n            Next\n        End If\n        Dim oSheet As Sheet\n        oSheet = oDrawDoc.ActiveSheet\n        Dim sPromptStrings(0) As String\n        sPromptStrings(0) = dgvDimValues.RowCount - 1\n        ' Create sketched symbol\n        Dim oTG As TransientGeometry\n        oTG = _invApp.TransientGeometry\n        Dim oPoint As Point2d = Nothing\n        For x = 0 To 315 Step 45\n            Select Case x 'My.Settings.BalloonPos\n                Case 0\n                    oPoint = oTG.CreatePoint2d(MinP.X + (MaxP.X - MinP.X) / 2, MaxP.Y + 0.15)\n                Case 45\n                    oPoint = oTG.CreatePoint2d(MaxP.X + 0.15, MaxP.Y + 0.15)\n                Case 90\n                    oPoint = oTG.CreatePoint2d(MaxP.X + 0.15, MinP.Y + (MaxP.Y - MinP.Y) / 2)\n                Case 135\n                    oPoint = oTG.CreatePoint2d(MaxP.X + 0.15, MinP.Y - 0.15)\n                Case 180\n                    oPoint = oTG.CreatePoint2d(MinP.X + (MaxP.X - MinP.X) / 2, MinP.Y - 0.15)\n                Case 225\n                    oPoint = oTG.CreatePoint2d(MinP.X - 0.15, MinP.Y - 0.15)\n                Case 270\n                    oPoint = oTG.CreatePoint2d(MinP.X - 0.15, MinP.Y + (MaxP.Y - MinP.Y) / 2)\n                Case 315\n                    oPoint = oTG.CreatePoint2d(MinP.X - 0.15, MaxP.Y + 0.15)\n            End Select\n            Dim oSketchedSymbol As SketchedSymbol\n            Dim oGI As GeometryIntent\n            oGI = oSheet.CreateGeometryIntent(oDim, oPoint)\n            Dim oCol As ObjectCollection\n            oCol = _invApp.TransientObjects.CreateObjectCollection\n            oCol.Add(oPoint)\n            oCol.Add(oGI)\n            oSketchedSymbol = oSheet.SketchedSymbols.Add(oSketchedSymbolDef, oPoint, 0, 1, sPromptStrings)\n            oSketchedSymbol.Leader.AddLeader(oCol)\n            oSketchedSymbol.LeaderVisible = False\n\n        Next\n    End Sub"], "author": "TA.Fehr"},
{"created at": [], "solution Title": "\n                        Re: iLogic check for and delete all unresolved components\n                    ", "solution": ["Sub DeleteUnresolvedFiles()\n        Dim oFile As Inventor.File\n        Set oFile = ThisApplication.ActiveDocument.File\n        \n        Dim oDoc As AssemblyDocument\n        Set oDoc = ThisApplication.ActiveDocument\n        oDoc.Save\n        \n        Dim oDocDef As AssemblyComponentDefinition\n        Set oDocDef = oDoc.ComponentDefinition\n        \n        Call ProcessReferences(oFile, oDoc, oDocDef)\n\nEnd Sub\nPrivate Sub ProcessReferences(ByVal oFile As Inventor.File, oDoc As AssemblyDocument, oDocDef As ComponentDefinition)\n\n        Dim oFileDescriptor As FileDescriptor\n        For Each oFileDescriptor In oFile.ReferencedFileDescriptors\n            If Not oFileDescriptor.ReferenceMissing Then\n                If Not oFileDescriptor.ReferencedFileType = FileTypeEnum.kForeignFileType Then\n                    Call ProcessReferences(oFileDescriptor.ReferencedFile, oDoc, oDocDef)\n                End If\n            Else\n            Dim oComp As ComponentOccurrence\n            For Each oComp In oDocDef.Occurrences\n            If oComp.ReferencedDocumentDescriptor.ReferencedFileDescriptor.FullFileName = oFileDescriptor.FullFileName Then\n            MsgBox (oFileDescriptor.FullFileName & vbCrLf & oFileDescriptor.RelativeFileName)\n            'oComp.Delete\n            End If\n            Next oComp\n            End If\n                       \n        Next\nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: multi value list giving me trouble\n                    ", "solution": ["MultiValue", ".", "SetList", "(", "\"Machine\"", ", ", "\"Plasma\"", ", ", "\"Shear\"", ", ", "\"Sawer\"", ")\n"], "author": "martin.jacko"},
{"created at": [], "solution Title": "\n                        Re: Sort parts List based on Part Number\n                    ", "solution": ["oPartNumberStart = oPartNumber.Value.ToString().Substring(0,3)", "'", " Set a reference to the drawing document.", "'", " This assumes a drawing document is active.", "\n", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n  \n", "'", " Set a reference to the first parts list on the active sheet.", "'", " This assumes that a parts list is on the active sheet.", "\n", "Dim", " ", "oPartList", " ", "As", " ", "PartsList", "\n", "oPartList", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", "\n \n", "Dim", " ", "oPartNumber", " ", "As", " ", "PartsListCell", "\n", "Dim", " ", "oType", " ", "As", " ", "PartsListCell", "\n\n", "'", "Dim oPartNumberLength As Integer", "'", "Dim invCharPosition As Integer", "\n\n", "'", " Iterate through the contents of the parts list.", "\n", "Dim", " ", "i", " ", "As", " ", "Long", "\n", "For", " ", "i", " ", "=", " ", "1", " ", "To", " ", "oPartList", ".", "PartsListRows", ".", "Count", "\n    ", "'", "Get value from PartNumber column", "\n    ", "oPartNumber", " ", "=", " ", "oPartList", ".", "PartsListRows", ".", "Item", "(", "i", ")", ".", "Item", "(", "\"", "DWG/PART No.", "\"", ")", "\n    ", "oType", " ", "=", " ", "oPartList", ".", "PartsListRows", ".", "Item", "(", "i", ")", ".", "Item", "(", "\"", "PART TYPE", "\"", ")", "\n    \n    ", "'", "Find the 1st 3 characters of the Part Number", "\n    ", "oPartNumberDXF", " ", "=", " ", "oPartNumber", ".", "Value", ".", "ToString", "()", ".", "Substring", "(", "0", ",", "3", ")", "\n    \n    ", "'", "Return the Part Number as a string", "\n    ", "oPartNumberValue", " ", "=", " ", "oPartNumber", ".", "Value", ".", "ToString", "()", "\n    \n    ", "'", "Return the number of characters in the Part Number", "\n    ", "oPartNumberLength", " ", "=", " ", "Len", "(", "oPartNumberValue", ")", "\n\n        ", "If", " ", "oPartNumberDXF", " ", "=", " ", "\"", "DXF", "\"", " ", "Then", "\n        ", "oType", ".", "Value", " ", "=", " ", "\"", "DXF", "\"", "\n        ", "ElseIf", " ", "oPartNumberLength", " ", "=", " ", "11", " ", "Then", "\n        ", "oType", ".", "Value", " ", "=", " ", "\"", "DWG", "\"", "\n        ", "Else", " ", "If", " ", "oPartNumberLength", " ", "=", " ", "5", " ", "Then", "\n        ", "oType", ".", "Value", " ", "=", " ", "\"", "STD", "\"", "\n        ", "Else", "\n        ", "oType", ".", "Value", " ", "=", " ", "\"", "Other", "\"", "\n        ", "End", " ", "If", "\n\n", "Next", "\n\n", "oPartList", ".", "Sort", "(", "\"", "PART TYPE", "\"", ", ", "1", ", ", "\"", "DWG/PART No.", "\"", ", ", "1", ")", "\n", "oPartList", ".", "Renumber", "\n", "oPartList", ".", "SaveItemOverridesToBOM"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Deleting and adding custom properties\n                    ", "solution": ["Private Sub DeleteButton_Click()", "Dim oCustomPropertySet as PropertySet\nSet oCustomPropertySet = ThisApplication.ActiveDocument.PropertySets.Item(\"Inventor User Defined Properties\")\nDim oCustProp As Property", "\nFor Each oCustProp In oCustomPropertySet\noCustProp.Delete\nNext\n\nEnd Sub"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: iLogic code to find the appearance of the first feature\n                    ", "solution": ["Dim doc = ThisDoc.Document\nDim compDef = doc.componentDefinition\nDim Feat1 = compDef.Features.Item(1)\nDim partColor = Feature.Color(Feat1.Name)\nMessageBox.Show(\"partColor = \" & partColor, \"Title\")"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic MS Access find next empty record and record new record\n                    ", "solution": ["AddReference", " ", "\"System.Data\"", "\n", "AddReference", " ", "\"System.Core\"", "\n", "AddReference", " ", "\"System.Xml\"", "\n", "Imports", " ", "System", ".", "Data", ".", "OleDb", "\n", "Imports", " ", "System", ".", "Data", "\n", "Imports", " ", "System", ".", "Xml", "\n", "Sub", " ", "Main", "()\n\n", "'\tDim Tabla As String = \"CAD\"", "\n\t", "Dim", " ", "query", " ", "As", " ", "String", " = ", "\"SELECT * FROM CAD WHERE PartNo =  '\"", " & ", "MT_NAMING", " & ", "\"'\"", "\n\t", "Dim", " ", "MDBConnString_", " ", "As", " ", "String", " = ", "\"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\\\DESKTOP-VDT88EI\\database\\Ingenieria.accdb;Persist Security Info=False;\"", "\n\t", "Dim", " ", "ds", " ", "As", " ", "New", " ", "DataSet", "\n\t", "Dim", " ", "cnn", " ", "As", " ", "OleDbConnection", " = ", "New", " ", "OleDbConnection", "(", "MDBConnString_", ")\n\t", "cnn", ".", "Open", "()\n\t", "Dim", " ", "cmd", " ", "As", " ", "New", " ", "OleDbCommand", "(", "query", ", ", "cnn", ")\n\t", "Dim", " ", "da", " ", "As", " ", "New", " ", "OleDbDataAdapter", "(", "cmd", ")\n\t", "da", ".", "Fill", "(", "ds", ", ", "\"CAD\"", ")\n\t", "cnn", ".", "Close", "()\n\t", "Dim", " ", "****", " = ", "ds", ".", "Tables", "(", "\"CAD\"", ").", "rows", ".", "count", "\n\n", "If", " ", "****", " > 0 ", "Then", "\n\t", "MessageBox", ".", "Show", "(", "****", " & ", "\"This Part Number is allready added to the database!\"", ", ", "MT_NAMING", " )\n", "Else", " \n\t\n\n", "Dim", " ", "OPROJ", " ", "As", " ", "String", "\n", "Dim", " ", "oCREAT", " ", "As", " ", "String", "\n", "Dim", " ", "oDAT", " ", "As", " ", "Date", "\n", "Dim", " ", "oCOMENT", " ", "As", " ", "String", "\n", "Dim", " ", "oSTATUS", " ", "As", " ", "String", "\n", "oNAME", " = ", "MT_NAMING", "\n", "OPROJ", " = ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Project\"", ")\n", "oDAT", " = ", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Creation Date\"", ")\n", "oCREAT", " = ", "ThisApplication", ".", "GeneralOptions", ".", "UserName", "\n", "oCOMENT", " = ", "DESCRIPCION", "\n", "oSTATUS", " = ", "STATUS_MASTER", "\t\n\n    ", "Dim", " ", "Table_", " ", "As", " ", "String", " = ", "\"CAD\"", "\n    ", "Dim", " ", "query1", " ", "As", " ", "String", " = ", "\"INSERT INTO \"", " & ", "Table_", " & ", "\"(Proyect, PartNo, AutorDePieza, FechaCreacion, DescripcionDePieza,Estado) VALUES ('\"", "&", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Project\"", ")&", "\"','\"", "& ", "MT_NAMING", " &", "\"', '\"", "& ", "oCREAT", " &", "\"', '\"", "& ", "oDAT", " &", "\"', '\"", "& ", "oCOMENT", " &", "\"', '\"", "& ", "STATUS_MASTER", " &", "\"')\"", "\n    ", "Dim", " ", "MDBConnString_1", " ", "As", " ", "String", " = ", "\"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\\\DESKTOP-VDT88EI\\database\\Ingenieria.accdb;Persist Security Info=False;\"", "\n    ", "Dim", " ", "ds1", " ", "As", " ", "New", " ", "DataSet", "\n    ", "Dim", " ", "cnn1", " ", "As", " ", "OleDbConnection", " = ", "New", " ", "OleDbConnection", "(", "MDBConnString_1", ")\n    ", "cnn1", ".", "Open", "()\n    ", "Dim", " ", "cmd1", " ", "As", " ", "New", " ", "OleDbCommand", "\n    ", "cmd", ".", "Connection", " = ", "cnn1", "\n    ", "cmd", ".", "CommandText", " = ", "query1", "\n    ", "cmd", ".", "ExecuteNonQuery", "()\n    ", "cnn1", ".", "Close", "()\n", "End", " ", "If", "\n", "End", " ", "Sub"], "author": "j.romo"},
{"created at": [], "solution Title": "\n                        Re: To find the index in the array for the value selected.\n                    ", "solution": ["Dim oArrray As New ArrayList\noArrray.Add(\"rer1\")\noArrray.Add(\"rer2\")\noArrray.Add(\"rer3\")\noArrray.Add(\"rer4\")\noArrray.Add(\"rer5\")\n\n\noArrray_Selected = InputListBox(\"Prompt\", oArrray, oArrray(0), Title := \"Title\", ListName := \"List\")\n\nXX = oArrray.IndexOf(oArrray_Selected)\nMessageBox.Show(XX + 1, \"Title\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Can not invoke InventorStudio in Inventor 2019\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How to drive constraints\n                    ", "solution": ["Sub Main()\n    Dim assyDoc As AssemblyDocument\n    assyDoc = ThisApplication.ActiveDocument\n    Dim oConstraint As AssemblyConstraint\n    For Each oConstraint In assyDoc.ComponentDefinition.Constraints\n\t\tIf oConstraint.Name = \"move1\" Then\n\t\t\tIf oConstraint.DriveConstraintSettings.IsInitialized Then\n\t            With oConstraint.DriveConstraintSettings\n\t\t\t.StartValue = \"0\"\n\t                .EndValue = \"155\"\n\t                .GoToStart               \n\t                .PlayForward \n\n\t\t\t\tEnd With\n        \tEnd If\n\t\tElseIf oConstraint.Name = \"rotate1\" Then\n\t\t\tIf oConstraint.DriveConstraintSettings.IsInitialized Then\n\t            With oConstraint.DriveConstraintSettings\n\t\t\t.StartValue = 0\n\t                .EndValue = 45\n\t                .GoToStart               \n\t                .PlayForward \n\n\t\t\t\tEnd With\n        \tEnd If\n\t\tEnd If \n\t\t\n        \n    Next\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Prefill max/min value into InputBox\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: API Support to promote model dimensions to 3d annotations and/or position th\n                    ", "solution": ["Sub CreteModelAnnotationFromFeatureDim()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oExtrude As ExtrudeFeature\n    Set oExtrude = oDoc.ComponentDefinition.Features.ExtrudeFeatures(1)\n    \n    Dim oFeatureDim As FeatureDimension\n    Set oFeatureDim = oExtrude.FeatureDimensions.Item(1)\n    \n    Dim oModelDims As ModelDimensions\n    Set oModelDims = oDoc.ComponentDefinition.ModelAnnotations.ModelDimensions\n    \n    Dim oIntentOne As GeometryIntent\n    Dim oIntentTwo As GeometryIntent\n    Dim oAnnoPlaneDef As AnnotationPlaneDefinition\n    Dim oTextPos As Point\n    \n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n    \n    Dim oStartEdge As Edge\n    Set oStartEdge = oExtrude.StartFaces(1).Edges(1)\n     \n    \n    Dim oStartFace As Face\n    Set oStartFace = oExtrude.StartFaces(1)\n    \n    Set oIntentOne = oDoc.ComponentDefinition.CreateGeometryIntent(oStartEdge)\n    \n    Dim oSideFace As Face, oFace As Face\n    For Each oFace In oStartEdge.Faces\n        If Not (oFace Is oStartFace) Then\n            Set oSideFace = oFace\n            Exit For\n        End If\n    Next\n\n    Dim oEdge As Edge\n    For Each oEdge In oSideFace.Edges\n        If oEdge.Geometry.Direction.IsParallelTo(oStartEdge.Geometry.Direction) And Not (oEdge Is oStartEdge) Then\n             \n            Set oIntentTwo = oDoc.ComponentDefinition.CreateGeometryIntent(oEdge)\n            Exit For\n        End If\n    Next\n    \n    Set oAnnoPlaneDef = oDoc.ComponentDefinition.ModelAnnotations.CreateAnnotationPlaneDefinitionUsingPlane(oSideFace)\n    Set oTextPos = oFeatureDim.TextPoint\n    \n    Dim oModelDimDef As LinearModelDimensionDefinition\n    Set oModelDimDef = oModelDims.LinearModelDimensions.CreateDefinition(oIntentOne, oIntentTwo, oAnnoPlaneDef, oTextPos, kAlignedDimensionType)\n    \n    Dim oModelDim As LinearModelDimension\n    Set oModelDim = oModelDims.LinearModelDimensions.Add(oModelDimDef)\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Check whether the Sketch is Auxiliary\n                    ", "solution": ["oNode = oPane.GetBrowserNodeFromObject(oSketch)", "Dim oCompdef As PartComponentDefinition\noCompdef = ThisDoc.Document.ComponentDefinition\n\nDim oPane As BrowserPane\noPane = ThisDoc.Document.BrowserPanes(\"PmDefault\")\n    \nDim MsgBody As String\nDim AboveEoP_SkCount As Integer=0\nFor Each oSketch As Sketch In oCompdef.Sketches\n\tOn Error Resume Next\n    Dim oNode As BrowserNode\n    oNode = oPane.GetBrowserNodeFromObject(oSketch)\n    \n\tIf Err.Number=0 Then\n\t    If oSketch.HealthStatus <> HealthStatusEnum.kBeyondStopNodeHealth Then\n\t        SkCount = AboveEoP_SkCount + 1\n\t        MsgBody = MsgBody & \"                     \" & oSketch.Name & \" - \" & oSketch.IsOwnedByFeature & vbCrLf\n\t    Else\n\t        Exit For\n\t    End If\n\tElse\n\t\tErr.Clear \n\t\tOn Error GoTo 0\n\tEnd If\nNext\nMsgBox (MsgBody,,\"Out of \" & oCompdef.Sketches.Count & \" sketches \" & AboveEoP_SkCount & \" are placed above EoP:     \")"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: CustomTable Export to Excel from a C++-App\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Form appearance changes to \"old\" style randomly\n                    ", "solution": [], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Inputbox -Cancel button - Causes failure\n                    ", "solution": ["If Answer=vbYes Then \nmyparam = InputBox(\"Enter a valid Dia <=OutPipeClearanceDia\", \"LinerDiaMachined\", \"\u00d8\")\nIf myparam = \"\" Then Exit Sub '<===Added this line\nMessageBox.Show(\"Value=\" & myparam, \"The value I entered\")\nLinerDiaMachined=myparam\nLinerMachining=True\nFeature.IsActive(\"Extrusion4_LinerMachining\")=True\niLogicVb.UpdateWhenDone=True"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Standard Drawing Template - PDF Line Weight\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: HRESULT: 0x80004005 while run external iLogic on one of the two IPTs\n                    ", "solution": ["Dim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\nMsgBox (oDoc.ActiveMaterial.DisplayName)", "Dim oDoc As PartDocument\noDoc = ThisApplication.ActiveDocument\nMsgBox (oDoc.ActiveMaterial.DisplayName)"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Occasional \"Object Variable or With block Variable Not Set\" Error\n                    ", "solution": ["oCompdef = ThisDoc.Document.ComponentDefinition", "Dim partDoc As PartDocument = ThisDoc.Document\noCompDef = partDoc.ComponentDefinition\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Determine which IDW sheet has inserted OLE-object (Excel Workbook)\n                    ", "solution": [], "author": "MaximUdod"},
{"created at": [], "solution Title": "\n                        Re: Add iPart Data Field to BOM\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Rule in drawing: To retrieve custom properties of a non-model drawing\n                    ", "solution": ["oDoc_Other = C:\\$WF_DHAMAG\\Projects\\DHAMAG_SDAI\\ADSI-P001-ARF33\\P001-A0001.iam", "Dim oDoc As Document \noDoc = ThisApplication.Documents.Open(oDoc_Other, False)  \n\nDim oDescription As String \noDescription = oDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\").Value\n\nMessageBox.Show(oDescription, \"Title\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ilogic rule to export all sheets as images in idw file\n                    ", "solution": ["Sub", " ", "Main", "()\n\t", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\n\t", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n\t\n\t", "Dim", " ", "sExt", " ", "As", " ", "String", " = ", "\".png\"", "\n\t", "Dim", " ", "pImageX", " ", "As", " ", "Integer", " = 5000\n\t", "Dim", " ", "pImageY", " ", "As", " ", "Integer", " = 5000\n\t", "Dim", " ", "FilePath", " ", "As", " ", "String", " = ", "ThisDoc", ".", "Path", "\n\t", "Dim", " ", "sDocName", " ", "As", " ", "String", " = ", "ThisDoc", ".", "FileName", "(", "False", ")\n\t", "Dim", " ", "sImageLocation", " ", "As", " ", "String", " = ", "\"\\Auto Imager\"", " ", "'''", "CHANGE STORAGE FOLDER HERE", "\n\t", "Dim", " ", "sWritePath", " ", "As", " ", "String", " = ", "FilePath", " & ", "sImageLocation", "\n\t", "Dim", " ", "IncVal", " ", "As", " ", "Integer", " = 1\n\t", "Dim", " ", "SFile", " ", "As", " ", "System", ".", "IO", ".", "File", "\n\t", "Dim", " ", "SDir", " ", "As", " ", "System", ".", "IO", ".", "Directory", "\n\t", "'''", "Check the directory exists", "\n\t", "If", " ", "Not", " ", "SDir", ".", "Exists", "(", "sWritePath", ") ", "Then", " ", "SDir", ".", "CreateDirectory", "(", "sWritePath", ")\n\t\t\t\n\t", "'''", "Set the active view", "\n", "ThisApplication", ".", "CommandManager", ".", "ControlDefinitions", ".", "Item", "(", "\"AppIsometricViewCmd\"", ").", "Execute", "\n\t", "oView", " = ", "ThisApplication", ".", "ActiveView", "\n\t\n\t", "'''", "Iterate through and capture image", "\n    ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDrawDoc", ".", "Sheets", "\n\t\t", "oSheet", ".", "Activate", "\n        ", "sSheetName", " = ", "oSheet", ".", "Name", "\n\t\t", "sSheetName", " = ", "sSheetName", ".", "Substring", "(0,", "sSheetName", ".", "Length", "-2)\n\t\t", "'sImageName = sDocName & \"_\" & sSheetName", "\n\t\t", "sImageName", " = ", "sSheetName", " ", "'''", " SAVED AS SHEET NAME ONLY", "\n\t\t", "sImageNameandPath", " = ", "sWritePath", " & ", "\"\\\"", " & ", "sImageName", " & ", "sExt", "\t\n\t", "'''", "Check if File exsists already. If So, increase incremental value", "\n\t\t", "If", " ", "Not", " ", "SFile", ".", "Exists", "(", "sImageNameandPath", ") ", "Then", "\n\t\t\t", "oView", ".", "SaveAsBitmap", "(", "sImageNameandPath", ", ", "pImageX", ", ", "pImageY", ")\n\t\t", "Else", "\t\t\n      \t\t", "Do", "\n          \t\t", "IncVal", " += 1\n           \t", "sImageNameandPath", " = ", "sWritePath", " & ", "\"\\\"", " & ", "sImageName", " & ", "\"_\"", " & ", "IncVal", " & ", "sExt", "\n        \t", "Loop", " ", "While", " ", "SFile", ".", "Exists", "(", "sImageNameandPath", ")\n\t\t\t", "oView", ".", "SaveAsBitmap", "(", "sImageNameandPath", ", ", "pImageX", ", ", "pImageY", ")\n\t\t", "End", " ", "If", "\n    ", "Next", "\n", "End", " ", "Sub", "\n"], "author": "lmc.engineering"},
{"created at": [], "solution Title": "\n                        Re: Count unique bodies in the IAM\n                    ", "solution": ["Dim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument\nDim MsgBody As String=\"\"\nDim OccIndex As Integer=0\nDim BdQTY As Integer=0\nDim oDoc As Document \nFor Each oDoc In oAsmDoc.AllReferencedDocuments \nBdQTY=BdQTY+ oDoc.ComponentDefinition.SurfaceBodies.Count\nOccIndex=OccIndex+1\nMsgBody=MsgBody & \"#\" & OccIndex & \":\" & vbCrLf & \"Name : \" & oDoc.DisplayName & vbCrLf & \"Type : \" & oDoc.DocumentType & vbCrLf & \"BodyQTY = \" & oDoc.ComponentDefinition.SurfaceBodies.Count  & vbCrLf & vbCrLf\nNext\nMsgBox(MsgBody,, BdQTY & \" bodies found in \" & oAsmDoc.ComponentDefinition.Occurrences.Count & \" components:\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Betreff: 'Company' field of an add-in\n                    ", "solution": [], "author": "etaCAD"},
{"created at": [], "solution Title": "\n                        Re: VBA Loop - Start with Active Document\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Event when iProperty was changed\n                    ", "solution": [], "author": "Michal_W"},
{"created at": [], "solution Title": "\n                        Re: SelectSet problem\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: OnOpenDocument is executed too often\n                    ", "solution": [], "author": "pineapple.law19"},
{"created at": [], "solution Title": "\n                        Re: Editing text using illogic forms\n                    ", "solution": [], "author": "j.romo"},
{"created at": [], "solution Title": "\n                        Re: To Select Multiple Items from a Drop-Down list\n                    ", "solution": ["Dim oTypes_Array As New ArrayList \noTypes_Array.Add(\"Paint code\")\noTypes_Array.Add(\"Paint code 2\")\noTypes_Array.Add(\"PART COMMENTS\")\noTypes_Array.Add(\"Completion Date\")\noTypes_Array.Add(\"Exit\")\nDim oSelected As New ArrayList \n\nWhile True \n\toTypes_Selected = InputListBox(\"SELECT TYPE:\", oTypes_Array, oTypes_Array(0), oRuleNo, X_oProp_Array)\n\tIf IsNothing (oTypes_Selected) Then Exit While \n\toSelected.Add(oTypes_Selected)\t\nEnd While \n\nIf oSelected.Count > 0 Then\n\tFor Each oText In oSelected \n\t\tMessageBox.Show(oText, \"Selected items\")\n\tNext\nEnd If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ilogic Get User name: property to custom parameter\n                    ", "solution": ["iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Engineer\"", ") = ", "invApp", ".", "GeneralOptions", ".", "UserName"], "author": "j.romo"},
{"created at": [], "solution Title": "\n                        Re: GetExistingFacetTolerances error when converting VBA to VB.NET\n                    ", "solution": ["        Dim tolsCount As Integer\n        Dim existingTols() As Double = {}\n        body.GetExistingFacetTolerances(tolsCount, existingTols)\n\n        Dim bestTol As Double = existingTols(0)\n        For i As Integer = 1 To tolsCount - 1\n            If existingTols(i) < bestTol Then\n                bestTol = existingTols(i)\n            End If\n        Next\n\n        Dim vertCount As Integer\n        Dim facetCount As Integer\n        Dim coords() As Double = {}\n        Dim verts() As Double = {}\n        Dim indices() As Integer = {}\n        body.GetExistingFacets(bestTol, vertCount, facetCount, coords, verts, indices)"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: ilogic rule fails and crashes\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: ilogic: Save only specific .ipt from assembly\n                    ", "solution": ["Imports Path = System.IO.Path\n\nDim newName = \"SamplePart Length = \" & PlateLength & \".ipt\"\n\nDim compOcc = Component.InventorComponent(\"SamplePart:1\") ' get a component by name.\n' This will find the component in the current assembly or a subassembly.\n\nDim partDoc As Document = compOcc.Definition.Document \npartDoc.Update() ' make sure the document is up to date before saving it.\nDim newFullName = Path.Combine(Path.GetDirectoryName(partDoc.FullFileName), newName)\npartDoc.SaveAs(newFullName, False)\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: ilogic to get balloon no. of every (asembly/part) in parts list & copy i\n                    ", "solution": ["Sub Main()\n\tDim doc = ThisDoc.Document\n\n\tIf doc.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then\n\t\tDim oSheet As Sheet \n\t\toSheet = ActiveSheet.Sheet \n\t\t\n\t\tDim oBalloon As Inventor.Balloon \n\t\tFor Each oBalloon In oSheet.Balloons \n\t\t\tDim oReferDoc As Document\n\t\t\toReferDoc = oBalloon.BalloonValueSets.Item(1).ReferencedFiles.Item(1).ReferencedDocument\n\t\t\t\n\t\t\tUpdate_Balloon_Number(oBalloon.BalloonValueSets.Item(1).ItemNumber, oReferDoc)\n\t\tNext\n\tElse\n\t\tMessageBox.Show(\"Current docuement is not Drawing\", \"Document\")\n\tEnd If\nEnd Sub\n\nSub Update_Balloon_Number(ByVal ItemNumber As String, ByVal oDoc As Document) \n\n\tTry\n\t\toDoc.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Balloon_Number\").Value = ItemNumber\n\tCatch\n\t\t'catch error when iproperty doesn't exist and create it\n\t\toDoc.PropertySets.Item(\"Inventor User Defined Properties\").Add(\"\", \"Balloon_Number\")\n\t\t'then set the property\n\t\toDoc.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Balloon_Number\").Value = ItemNumber\n\tEnd Try \t\nEnd Sub "], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: get value of balloons and copy to iproperties of each in parts list\n                    ", "solution": ["Sub Main()\n    Dim doc = ThisDoc.Document\n\n    If doc.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then\n        Dim oSheet As Sheet \n        oSheet = ActiveSheet.Sheet \n        Dim al As New ArrayList()\n        Dim oBalloon As Inventor.Balloon \n        For Each oBalloon In oSheet.Balloons \n            \n\t\t\t\n\t\t\tIf Not (al.Contains(oBalloon.BalloonValueSets.Item(1).ItemNumber )) Then\n\t\t\t    al.Add(oBalloon.BalloonValueSets.Item(1).ItemNumber )\n\t\t\tEnd If\n\n        Next\n\t\tDim i As Integer = 0\n\t\tFor Each oBalloon In oSheet.Balloons \n\t\t\tIf oBalloon.BalloonValueSets.Item(1).ItemNumber = al(i) Then\n\t\t\t\toBalloon.BalloonValueSets.Item(1).Value = iProperties.Value(\"Summary\", \"Title\") + \" - \"+ oBalloon.BalloonValueSets.Item(1).Value \n\t\t\t\ti = i + 1\n\t\t\tEnd If\n\t\tNext\n    Else\n        MessageBox.Show(\"Current docuement is not Drawing\", \"Document\")\n    End If\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Lexical error in ifc exported from Inventor\n                    ", "solution": [], "author": "patric.jakobsso"},
{"created at": [], "solution Title": "\n                        Re: List Model Parameter Values in Drawing\n                    ", "solution": [], "author": "jhdietz"},
{"created at": [], "solution Title": "\n                        Re: Difference in file formats\n                    ", "solution": [], "author": "Hetzelt"},
{"created at": [], "solution Title": "\n                        Re: Drawing events\n                    ", "solution": [], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: VBA Drawing Turn on Axis/Work plane visibility of sub component\n                    ", "solution": ["Sub TestDrawingAxis()\n    'code requires a drawing view plate with assembly and a sub part\n    Dim oApp As Application: Set oApp = Inventor.ThisApplication\n    Dim oDoc As DrawingDocument:  Set oDoc = ThisApplication.ActiveDocument\n    Dim oSheets As Sheets: Set oSheets = oDoc.Sheets\n    Dim oSheet As Sheet: Set oSheet = oDoc.ActiveSheet\n    \n    Dim oDrawingView1 As DrawingView\n    Set oDrawingView1 = ThisApplication.CommandManager.Pick(kDrawingViewFilter, \"Select Drawing View\")\n    If oDrawingView1 Is Nothing Then\n        Exit Sub\n    End If\n    \n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = oDrawingView1.ReferencedDocumentDescriptor.ReferencedDocument\n    Dim asmCompDef As ComponentDefinition\n    Set asmCompDef = asmDoc.ComponentDefinition\n    \n    Dim oAxisYZ As WorkPlane\n    Set oAxisYZ = asmCompDef.WorkPlanes(1)\n    oAxisYZ.AutoResize = True\n    \n    Dim oAxisXZ As WorkPlane\n    Set oAxisXZ = asmCompDef.WorkPlanes(2)\n    oAxisXZ.AutoResize = True\n    \n    Dim oAxisXY As WorkPlane\n    Set oAxisXY = asmCompDef.WorkPlanes(3)\n    oAxisXY.AutoResize = True\n    \n    Call oDrawingView1.SetIncludeStatus(oAxisYZ, True)\n    \n    Dim occ As ComponentOccurrence\n    Set occ = asmCompDef.Occurrences.Item(1)\n    \n    Dim oTestAxis As WorkAxis\n    Set oTestAxis = occ.Definition.WorkAxes.Item(1)\n    \n    Dim asmTestAxis As WorkAxis\n    Call occ.CreateGeometryProxy(oTestAxis, asmTestAxis)\n    Call oDrawingView1.SetIncludeStatus(asmTestAxis, True)\nEnd Sub"], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Ilogic from part create excel Hyperlink to PDF drawing\n                    ", "solution": ["Imports", " ", "Microsoft", ".", "Office", ".", "Interop", ".", "Excel", "Dim invApp As Application\ninvApp = ThisApplication\n\nDim partDoc As PartDocument", "' Get active Part Document\npartDoc = invApp.ActiveDocument\n\n' Check whether document is nothing\nIf partDoc Is Nothing  Then\n    Exit Sub\nEnd If\n' Check whether type of active document is Part Document\nIf Not TypeOf partDoc Is PartDocument  Then\n    Exit Sub\nEnd If\n' Get full path of the active part document (C:\\blabla\\Part1.ipt)\nDim partFilePath As String = partDoc.FullFileName", "' Get only filename of the active part document (Part1.ipt)\nDim partFileName As String = partDoc.DisplayName", "' Get only directory of the active part document\nDim pathOnly As String = partFilePath.Replace(partFileName,\"\")", "' Get filename of the active part document but without extension\nDim nameOnly As String = System.IO.Path.GetFileNameWithoutExtension(partFilePath)", "' Get the pdf filename as combination of the previous path, filename and extension\nDim pdfFilePath As String = pathOnly & nameOnly & \".pdf\"\n\nDim oExcel As Object\nDim oWB As Object\nDim oWS As Object\nDim ExcelFile As String\noExcel = CreateObject(\"Excel.Application\")\n' Set your Excel document here\noWB = oExcel.Workbooks.Open(pathOnly & \"Book1.xlsx\")\noExcel.Visible = False\noExcel.DisplayAlerts = False\noWS = oWB.Sheets(1)\n", "' Create a hyperlink", "With oWS \n .Hyperlinks.Add(Anchor:=.Range(\"a5\"), _ \n Address:=pdfFilePath, _ \n ScreenTip:=\"This is a hyperlink\", _ \n TextToDisplay:=\"Hyperlink\")\nEnd With \n\noWB.Close(True)\noExcel.Quit\nMsgBox(\"Hyperlink is created. Open excel workbook and check.\",,\"Information\")", "For oRow = 1 To 1000\n\tIf oWS.Range(\"A\" & oRow).Value = nameOnly Then\n\t\toWS.Hyperlinks.Add(Anchor :=oWS.Range(\"K\" & oRow), Address :=pdfFilePath, ScreenTip :=\"This is a hyperlink\", TextToDisplay :=\"Hyperlink\")\n\t\tMsgBox(\"PartName \" & nameOnly & \" is found in the row No.\" & oRow,,\"Information\")\n\tEnd If\nNext", "If oWS.Range(\"A\" & oRow).Value = ", "iProperties.Value(\"Project\", \"Part Number\")", " Then"], "author": "danijel.radenko"},
{"created at": [], "solution Title": "\n                        Re: 2019.1 ilogic saveasbitmap background color\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Changing Part Parameter straight from assembly\n                    ", "solution": ["Parameter", "(", "\"testpart:1\"", ", ", "\"LEN\"", ") = 5"], "author": "kelly.young"},
{"created at": [], "solution Title": "\n                        Re: make all components in drawing visible\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: The link of \u201cMy First Plug-in\u201d is invalid. Where can I download the courses?\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Export coordinate of sketchpoints\n                    ", "solution": [], "author": "Captain_Price"},
{"created at": [], "solution Title": "\n                        Re: BOM create\n                    ", "solution": [], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re: Using ILOGIC to control planes for new tool\n                    ", "solution": [], "author": "ToddHarris7556"},
{"created at": [], "solution Title": "\n                        Re: Hide selected component original coordinate system\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: iLogic Tutorials\n                    ", "solution": [], "author": "doug.johnston"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Determine radius of a cylindrical face\n                    ", "solution": ["MsgBox", "(", "ThisDoc", ".", "Document", ".", "SelectSet", "(1).", "Geometry", ".", "Radius", ")", "Dim", " ", "oDoc", " ", "As", " ", "PartDocument", " \n", "oDoc", " = ", "ThisDoc", ".", "Document", " \n", "oDoc", ".", "SelectSet", ".", "Clear", " \n\n", "Dim", " ", "oFace", " ", "As", " ", "Face", "\n", "For", " ", "Each", " ", "oFace", " ", "In", " ", "oDoc", ".", "ComponentDefinition", ".", "SurfaceBodies", "(1).", "Faces", "\n\t", "If", " ", "oFace", ".", "SurfaceType", " = ", "SurfaceTypeEnum", ".", "kCylinderSurface", " ", "Then", " \n\t\t", "If", " ", "oFace", ".G", "eometry", ".R", "adius", " = ", "CertainRadiusValue", " ", "Then", " \n\t\t\t", "oDoc", ".", "SelectSet", ".", "Select", "(", "oFace", ")\n\t\t", "End", " ", "If", " \n\t", "End", " ", "If", " \n", "Next", " "], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Make pattern fit within Length Value\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: How do I check Parts List exists vba?\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Get attributes values from Sketched Symbol\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: I-LOGIC CODE\n                    ", "solution": [], "author": "rkontra"},
{"created at": [], "solution Title": "\n                        Re: Update snapshot in presentation (VBA)?\n                    ", "solution": ["Sub Main()\n    \n    Dim oDoc As PresentationDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oScene As PresentationScene\n    Set oScene = oDoc.Scenes.Item(1)\n    \n    Dim oView As PresentationSnapshotView\n    Set oView = oScene.SnapshotViews.Item(1)\n    \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Custom iProperties from iLogic, Assembly to Parts\n                    ", "solution": ["Dim asmDoc As AssemblyDocument = ThisDoc.Document\nDim childDoc As Document\nFor Each childDoc In asmDoc.AllReferencedDocuments\n\tTry\n\t\tDim filename = IO.Path.GetFileName(childDoc.FullFileName)\n\t\tiProperties.Value(filename, \"Custom\", \"Archive Part Number\") = iProperties.Value(filename, \"Project\", \"Part Number\")\n\tCatch\n\tEnd Try\nNext"], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: Assembly name restrictions in .addin file\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Ilogic - cant get view properties to populate into sketch symbol\n                    ", "solution": ["Dim", " ", "App", " ", "As", " ", "Application", "\n", "App", " ", "=", " ", "ThisApplication", "\n\n", "Dim", " ", "oDV", " ", "As", " ", "DrawingView", "\n", "oDV", " ", "=", " ", "App", ".", "CommandManager", ".", "Pick", "(", "SelectionFilterEnum", ".", "kDrawingViewFilter", ", ", "\"", "Select View:", "\"", ")", "\n\n", "Dim", " ", "SktSymb", " ", "As", " ", "SketchedSymbol", "\n", "Dim", " ", "oTB", " ", "As", " ", "TextBox", "\n\n", "'", "choose the sketch symbol we want to inject text strings into fields of", "\n", "SktSymb", "=", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "SelectionFilterEnum", ".", "kDrawingsketchedSymbolFilter", ",", "\"", "Select a Label:", "\"", ")", "\n\n", "'", "if our sketched symbol name is named ITEM8 then do the actions", "'", "    If SktSymb.Definition.Name = \"ITEM8\" Then", "'", "For Each SktSymb In oDV.Parent.SketchedSymbols", "\n    ", "If", " ", "LCase", "(", "SktSymb", ".", "Name", ")", " ", "=", " ", "LCase", "(", "\"", "ITEM8", "\"", ")", " ", "Then", "\n        ", "For", " ", "Each", " ", "oTB", " ", "In", " ", "SktSymb", ".", "Definition", ".", "Sketch", ".", "TextBoxes", "\n            ", "If", " ", "LCase", "(", "oTB", ".", "Text", ")", " ", "=", " ", "LCase", "(", "\"", "NAME", "\"", ")", " ", "Then", "\n                ", "Call", " ", "SktSymb", ".", "SetPromptResultText", "(", "oTB", ", ", "oDV", ".", "Name", ")", "\n            ", "End", " ", "If", "\n        ", "Next", "\n    ", "End", " ", "If", "\n", "'", "Next"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: COM Exception while closing Drawing Document in Inventor 2018\n                    ", "solution": [], "author": "ajitnikam1"},
{"created at": [], "solution Title": "\n                        Re: Convert a non-fitted textbox back to fitted\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: ilogic change source of embeded excel sheet\n                    ", "solution": ["Sub Main()", "   ", "    Dim oAssyDoc As Inventor.AssemblyDocument = ThisDoc.Document\n    \n    Dim OldExcelFile As String = \"C:\\...\\...\\ExcelFile01.xlsx\"\n    Dim NewExcelFile As String = \"C:\\...\\...\\ExcelFile02.xlsx\"\n    ", "    'Handle Top level Doc", "    call ReplaceRefFile(oAssyDoc, OldExcelFile, NewExcelFile)", "    'Iterate through sub level docs.\n    Dim oDoc As Inventor.Document = Nothing\n    For Each oDoc In oAssyDoc.AllReferencedDocuments\n        If oDoc.DocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Or oDoc.DocumentType = Inventor.DocumentTypeEnum.kPartDocumentObject Then\n             Call ReplaceRefFile(oDoc, OldExcelFile, NewExcelFile)\n        End If\n    Next\n    \n    oAssyDoc.update2(True)\n    \n    MsgBox(\"Done\", MsgBoxStyle.Information, \"Done\")", "End Sub\n", "Sub ReplaceRefFile(oDoc As Document, OldExcelFile As String, NewExcelFile As String)\n            Dim oReferencedFile As Inventor.ReferencedOLEFileDescriptor = Nothing\n            If oDoc.ReferencedOLEFileDescriptors.Count > 0 Then", "                If oDoc.IsModifiable = True\n                  For Each oReferencedFile In oDoc.ReferencedOLEFileDescriptors\n                    If oReferencedFile.FullFileName = OldExcelFile Then\n                        oReferencedFile.FileDescriptor.ReplaceReference(NewExcelFile)\n                        oDoc.Update2(True)\n                    End If\n                  Next", "                 Else", "                     MsgBox(oDoc.FullFileName & vblf & \"is not modifiable. References NOT replaced\")", "                 End if\n            End If\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Problem with BOM api calls on assembly with Level of detail other than maste\n                    ", "solution": ["        Dim oDoc As AssemblyDocument = ThisApplication.ActiveEditDocument\n\n        If (oDoc.ComponentDefinition.RepresentationsManager.ActiveLevelOfDetailRepresentation.Name <> \"Master\") Then\n            If (MsgBox(\"Master level of detail not selected.\" & vbNewLine & \"Click Yes to switch to Master LOD or No to cancel.\", MsgBoxStyle.YesNo) = MsgBoxResult.Yes) Then\n                oDoc.ComponentDefinition.RepresentationsManager.LevelOfDetailRepresentations.Item(\"Master\").Activate()\n            Else\n                Me.Close()\n                Exit Sub\n            End If\n        End If"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: iLogic Pick function\n                    ", "solution": ["Sub Main()\n\n    Dim oFace As Face\n    oFace = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartFaceFilter, \"Select a face\")\n    \n    Dim occ As ComponentOccurrence\n    occ = oFace.Parent.Parent    \n    \n    iProperties.Value(occ.Name, \"Custom\", \"MATERIAL\") = \"123\"\n    iProperties.Value(occ.Name,  \"Custom\", \"MATERIAL DESCRIPTION\") = \"Some description\"\n    \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Exclude a sheet from print if a certain condition is met\n                    ", "solution": ["oDoc= ThisApplication.ActiveDocument\nDim oSheet As Sheet\n\nIf Parameter(\"D1.ipt.f1_type\") < 5 mm Then\n  For Each oSheet In oDoc.Sheets\n    If (oSheet.Name = \"Jamb_typeG\") Or (oSheet.Name = \"Jamb_typeG:2\")\n      oSheet.ExcludeFromCount = True\n      oSheet.ExcludeFromPrinting = True\n    End If\n\n    If (oSheet.Name = \"Jamb_typeM\") Or (oSheet.Name = \"Jamb_typeM:2\")\n      oSheet.ExcludeFromCount = False\n      oSheet.ExcludeFromPrinting = False\n    End If\n  Next\nEnd If"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Saving hole configurations.\n                    ", "solution": [], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re: WorkPlaneProxy error\n                    ", "solution": ["Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", " = ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", " = ", "oAsmDoc", ".", "ComponentDefinition", "\n", "Dim", " ", "oTG", " ", "As", " ", "TransientGeometry", " = ", "ThisApplication", ".", "TransientGeometry", "\n", "Dim", " ", "oMatrix", " ", "As", " ", "Matrix", " = ", "ThisApplication", ".", "TransientGeometry", ".", "CreateMatrix", "\n\n", "'set references for Assembly planes", "\n", "Dim", " ", "oMasterPlaneYZ", " ", "As", " ", "WorkPlane", " = ", "oAsmCompDef", ".", "WorkPlanes", "(1)\n", "'Dim oMasterPlaneXZ As WorkPlane = oAsmCompDef.Workplanes(2)'Dim oMasterPlaneXY As WorkPlane = oAsmCompDef.Workplanes(3)", "\n\n", "Dim", " ", "oPart", "  ", "As", " ", "ComponentOccurrence", "\n", "oPart", " = ", "oAsmCompDef", ".", "Occurrences", ".", "Item", "(1)\n", "oPart", ".", "Grounded", " = ", "False", "\n\n", "' define part planes", "\n", "Dim", " ", "oPartPlane", " ", "As", " ", "WorkPlane", " = ", "oPart", ".", "Definition", ".", "WorkPlanes", "(1)\n\n", "' define proxies", "\n", "Dim", " ", "oProxyPlane", " ", "As", " ", "WorkPlaneProxy", " \n", "Call", " ", "oPart", ".", "CreateGeometryProxy", "(", "oPartPlane", ", ", "oProxyPlane", ")\n\n", "Call", " ", "oAsmCompDef", ".", "Constraints", ".", "AddMateConstraint", "(", "oMasterPlaneYZ", ", ", "oProxyPlane", ", 0)"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: change color from IPT to change to reference in IAM\n                    ", "solution": ["Dim", " ", "oAssyDoc", " ", "As", " ", "AssemblyDocument", "\n", "oAssyDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", "\n", "oAsmCompDef", " ", "=", " ", "oAssyDoc", ".", "ComponentDefinition", "\n", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", "\n\n", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "oAssyDoc", ".", "ComponentDefinition", ".", "AppearanceOverridesObjects", "\n", "If", " ", "oOcc", ".", "BOMStructure", " ", "<>", " ", "kReferenceBOMStructure", " ", "Then", "\n", "oOcc", ".", "AppearanceSourceType", " ", "=", " ", "100612", "\n", "End", " ", "If", "\n", "Next", "\n\n", "For", " ", "Each", " ", "oOccurrence", " ", "In", " ", "oAsmCompDef", ".", "Occurrences", "\n", "If", " ", "oOccurrence", ".", "BOMStructure", " ", "=", " ", "BOMStructureEnum", ".", "kReferenceBOMStructure", " ", "Or", " ", "_", "\n", "oOccurrence", ".", "Definition", ".", "BOMStructure", " ", "=", " ", "BOMStructureEnum", ".", "kReferenceBOMStructure", " ", "Then", "\n", "Component", ".", "Color", "(", "oOccurrence", ".", "Name", ")", " ", "=", " ", "\"", "Red", "\"", "\n", "End", " ", "If", "\n", "Next"], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: Notification available from Inventor when raster views are fully-calculated?\n                    ", "solution": [], "author": "jeff.andrews"},
{"created at": [], "solution Title": "\n                        Re: Function Translating and rotating part in assembly\n                    ", "solution": ["'Moves the latest instance of a part to a specified location\n'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nPublic Sub Move_Part(FileName As String, Location() As Double, Rotation As Boolean)\n\n    Dim oOcc As ComponentOccurrence\n    Dim Part As ComponentOccurrence\n    Dim oLeafOccs As ComponentOccurrencesEnumerator\n    Dim PartName As String\n    Dim Rot As Matrix\n    Dim Trans As Matrix\n    \n    Set oLeafOccs = ThisApplication.ActiveDocument.ComponentDefinition.Occurrences.AllLeafOccurrences\n    PartName = Split(Split(FileName, \"\\\")(UBound(Split(FileName, \"\\\"))), \".\")(0)\n\n    For Each oOcc In oLeafOccs\n        If Not Part Is Nothing Then\n            If Split(oOcc.Name, \":\")(0) = PartName And Split(oOcc.Name, \":\")(UBound(Split(oOcc.Name, \":\"))) > Split(Part.Name, \":\")(UBound(Split(Part.Name, \":\"))) Then Set Part = oOcc\n        Else\n            If Split(oOcc.Name, \":\")(0) = PartName Then Set Part = oOcc\n        End If\n    Next\n    \n    Part.Grounded = False\n    \n    If Rotation = True Then\n        Pi = Atn(1) * 4\n        Set Rot = Part.Transformation\n        Call Rot.SetToRotation(Pi / 2, ThisApplication.TransientGeometry.CreateVector(0, 0, 1), ThisApplication.TransientGeometry.CreatePoint(1, 1, 1))\n        Call Part.SetTransformWithoutConstraints(Rot)\n    End If\n    \n    Set Trans = Part.Transformation\n    Call Trans.SetTranslation(ThisApplication.TransientGeometry.CreateVector(Location(0) * 2.54, Location(1) * 2.54, Location(2) * 2.54))\n    Call Part.SetTransformWithoutConstraints(Trans)\n    Part.Grounded = True\nEnd Sub\n'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"], "author": "Thomas.Long"},
{"created at": [], "solution Title": "\n                        Re: Parts List Table Title Automation\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Searching Subassemblies Via iLogic\n                    ", "solution": ["Sub Main()\n    Call HideBreakReps(ThisDoc.Document.ComponentDefinition.Occurrences)\nEnd Sub\n\nSub HideBreakReps(Occurrences As ComponentOccurrences)\n    For Each oOcc in Occurrences\n        If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n            Call HideBreakReps(oOcc.SubOccurrences)\n        Elseif oOcc.DefinitionDocumentType = kPartDocumentObject Then\n            If InStr(LCase(oOcc.Name), \"break rep\")\n                oOcc.Visible = False\n            End If\n        Else\n            Call Msgbox(\"No sub-assemblies or parts found\")\n        End If\n    Next\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: new sheet\n                    ", "solution": [], "author": "Ruffy85"},
{"created at": [], "solution Title": "\n                        Re: iterate through title block?\n                    ", "solution": ["Dim oDoc As Document\noDoc = ThisDoc.Document\n\nDim oPropertySets as Inventor.PropertySets\noPropertySets = oDoc.PropertySets\n\nFor j = 1 To oPropertySets.Count\n      oPropSet = oPropertySets.Item(j)\n      \n      For i = 1 To oPropSet.Count()\n           oProp = oPropSet.Item(i)\n           \n           'Functionality here:\n\t\t    Try\n\t\t   \t\toValue = CStr(oProp.Value)\n\t\t\tCatch\n\t\t\t\toValue = \"N/A DATA TYPE\"\n\t\t\tEnd Try\n\t\t\t\n            oStr = oStr & vbLf & j & \") \" & oPropSet.DisplayName & \" - \" & i & \") \" & oProp.DisplayName & \" - \" & oValue      \n           'End Functionality\n      Next\nNext\n\nMsgBox(oStr)"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Test if Inventor Server is running\n                    ", "solution": ["@tasklist /NH | find /I \"calculator.exe\" >nul 2>&1 && (\n @echo.\n @echo. Calculator is running\n @echo.\n) || (\n @echo.\n @echo. Calculator is NOT running\n @echo.\n)", "@tasklist /NH | find /I \"calculator.exe\" >nul 2>&1 && (\n @echo.\n @echo. Calculator is running, no action needed\n @echo.\n) || (\n @echo.\n @echo. Calculator is NOT running, so I will start it", " calc\n @echo.\n)", "tasklist /NH | find /I \"calculator.exe\" >nul 2>&1 && ( @echo. Calculator is running ) || (\ncalc )", "tasklist /NH | find /I \"calculator.exe\" >nul 2>&1 || ( calc )", "tasklist /NH | find /I \"InventorFCADServer.exe\" >nul 2>&1 || ( \"%PROGRAMFILES%\\Autodesk\\Infraworks\\Parametric Generation\\Inventor Server\\bin\\InventorFCADServer.exe\" )"], "author": "freesbee"},
{"created at": [], "solution Title": "\n                        Re: Constrain two Vertexs in assembly\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Need help with strange problem with copy surface between parts\n                    ", "solution": ["Class ThisRule\n\tSub Main()\n\n\tDim CutSurfacePartRefChainList As New List(Of String)\n\tDim CompOccNames As New List(Of String)\n\n\t\tFor i=1 To 19\n\t\t\tCutSurfacePartRefChainList.add(\"SubAssy.StairStep_\" & i & \".CenterPlate\")\n\t\tNext\n\n'\t\tCompOccNames.add(\"CentralPipe.CentralPipe_2\")\n\t\tCompOccNames.add(\"CentralPipe.CentralPipe_1\")\n\t\t'CompOccNames.add(\"CentralPipe.CentralPipe_2\")\n\n\tCreateSculptFeature(\"CutSurface\", CutSurfacePartRefChainList, CompOccNames, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)\n\tCompOccNames.Clear()\n\tCompOccNames.add(\"CentralPipe.CentralPipe_2\")\n\tCreateSculptFeature(\"CutSurface\", CutSurfacePartRefChainList, CompOccNames, PartFeatureExtentDirectionEnum.kPositiveExtentDirection)\n   iLogicVb.UpdateWhenDone = True\n\tEnd Sub\n\t\n\t\n\tFunction CreateSculptFeature(CutSurfaceName As String, CutSurfacePartRefChainList As List(Of String), CompOccNames as List(Of String), SurfaceDirection As PartFeatureExtentDirectionEnum)\n\t\t\t\n\t\t\tDim oAssemblyDoc As AssemblyDocument = ThisServer.ActiveDocument\n\t\t\tDim oAssemblyDef As AssemblyComponentDefinition = oAssemblyDoc.ComponentDefinition\n\t\t\tDim oSurfaces As ObjectCollection= ThisServer.TransientObjects.CreateObjectCollection\n\t\t\t\n\t\t\tDim oSurfaceBodies As New List(Of Inventor.SurfaceBody)\n\t\n\t\t\tDim oMatrixes As ObjectCollection= ThisServer.TransientObjects.CreateObjectCollection\n\t\t\t\n\t\t\tFor Each refchain in CutSurfacePartRefChainList\n\t\t\t\tDim iPath() As String = refchain.split(\".\")\n\t\t\t\tDim arr As New ArrayList \n\t\t\t\tarr.add(iPath(0))\n\t\t\t\tarr.add(iPath(1))\n\t\t\t\tarr.add(iPath(2))\n\t\t\t\tOccWithSurface  = Component.InventorComponentInThisContext(arr)\n\t\t\t\tDim OccWithSurfacePartDef As PartComponentDefinition = OccWithSurface.Definition\n\t\t\t\tFor Each item in  OccWithSurfacePartDef.Worksurfaces\n\t\t\t\t\tIf item.Surfacebodies(1).CreatedByFeature.Name = CutSurfaceName Then\n\t\t\t\t\t\tDim oSourceBody As SurfaceBody = item.Surfacebodies(1)\n\t\t\t\t\t\toSurfaceBodies.add(oSourceBody)\n\t\t\t\t\t\toMatrixes.add(OccWithSurface.Transformation)\n\t\t\t\t\t\tExit For\n\t\t\t\t\tEnd If\n\t\t\t\tNext\n\t\t\tNext\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\tFor i= 0 To CompOccNames.Count-1\n\t\t\t\tDim occPath() As String = CompOccNames(i).split(\".\")\n\t\t\t\tDim occarr As New ArrayList \n\t\t\t\toccarr.add(occPath(0))\n\t\t\t\toccarr.add(occPath(1))\n\t\t\t\t\tDim PipeOcc As ComponentOccurrence = Component.InventorComponentInThisContext(occarr)\n\t\t\t\t\tDim PipeOccDef As PartComponentDefinition = PipeOcc.Definition\n\n\t\t\t\t\tDim oMatrix2 As Matrix\n\t\t\t\t\toMatrix2 = PipeOcc.Transformation\n\t\t\t\t\toMatrix2.Invert\n\t\t\t\t\t  \n\t\t\t\t\toSurfaces.clear()\n\t\t\t\t\t\n\t\t\t\t\tFor ii= 0 To oSurfaceBodies.count -1\n\t\t\t\t\t\tDim oMatrix1 As Matrix = oMatrixes(ii+1)\n\t\t\t\t\t\toMatrix1.PreMultiplyBy(oMatrix2)\n\t\t\t\t\t\tPipeOccDef.Features.NonParametricBaseFeatures.Add(oSurfaceBodies(ii), oMatrix1)\n\t\t\t\t\t\toSurfaces.Add(PipeOccDef.Features.SculptFeatures.CreateSculptSurface(PipeOccDef.WorkSurfaces.Item(PipeOccDef.WorkSurfaces.count), _\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSurfaceDirection))\n\t\t\t\t\tNext\n\n\t\t\t\t\tPipeOccDef.Features.SculptFeatures.Add(oSurfaces, PartFeatureOperationEnum.kCutOperation )\n\t\t\tNext\n\t\t\t\n\t\t\t\t\t\n\n\n\n\n\tEnd Function\nEnd Class"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Create Large Buttons with .NET\n                    ", "solution": ["' This following adds the button to the panel with the 'large' option enabled. This is the ',True' after adding the button definition.", "oPanel.CommandControls.AddButton(button_definition, True)"], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule - Not Working\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic save to PDF and DXF (ask before run)\n                    ", "solution": ["Sub Main()\n   \n   Dim oDoc As Document\n   oDoc = ThisDoc.Document  \n\n  If isVisible(oDoc) = False Then\n      Exit Sub\n  End If\n\n  If MsgBox(\"Export Files?\", MsgBoxStyle.YesNo, \"MacroMagic\") = vbYes\n     iLogicVb.RunExternalRule(\"ruleFileName\")\n     iLogicVb.RunExternalRule(\"ruleFileName\")\n  End if\n\nEnd Sub\n\nFunction isVisible(oDoc As Document) As Boolean\n    For Each oVisDoc in ThisApplication.Documents.VisibleDocuments\n        If oVisDoc Is oDoc Then\n\t    Return True\n\tEnd If\n    Next\n    Return False\nEnd Function\n\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Change Text Color at Drawing Sketch Symbol\n                    ", "solution": ["On", " ", "Error", " ", "Resume", " ", "Next", "\n", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n", "Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oSketch", " ", "As", " ", "DrawingSketch", "\n", "Dim", " ", "oColor", " ", "As", " ", "color", "\n", "Dim", " ", "oSymDefName", " ", "As", " ", "String", "\n", "Dim", " ", "x", " ", "As", " ", "Integer", " ", "=", " ", "1", "\n", "Dim", " ", "y", " ", "As", " ", "Integer", " ", "=", " ", "1", "\n", "Dim", " ", "oSymDef", " ", "As", " ", "SketchedSymbolDefinition", "\n", "For", " ", "Each", " ", "SketchedSymbolDefinition", " ", "In", " ", "odoc", ".", "SketchedSymbolDefinitions", "\n        ", "oSymDefName", " ", "=", " ", "odoc", ".", "SketchedSymbolDefinitions", ".", "Item", "(", "x", ")", ".", "Name ", "'gets the name of the block", "\n        ", "oSymDef", " ", "=", " ", "odoc", ".", "SketchedSymbolDefinitions", ".", "Item", "(", "oSymDefName", ")", "\u00a0", "'uses the name of the block", "\n        ", "oSymDef", ".", "Edit", "(", "oSketch", ")", "\n        ", "For", " ", "Each", " ", "TextBox", " ", "In", " ", "oSketch", ".", "TextBoxes", "\n        ", "oColor ", "= ", "oSketch", ".", "TextBoxes", ".", "Item", "(", "y", ")", ".", "Color", "\u00a0", "'gets the current color", "\n        ", "oColor", ".", "ColorSourceType", " ", "=", " ", "ColorSourceTypeEnum", ".", "kLayerColorSource", "\u00a0", "'Makes the current color bylayer", "\n        ", "oSketch", ".", "TextBoxes", ".", "Item", "(", "y", ")", ".", "Color", " ", "=", " ", "oColor ", "\u00a0", "'assigns the color with bylayer", "        ", "y", "=", "y", "+", "1", "\n        ", "Next", "\n        ", "y", "=", "1", "\n        ", "x", "=", "x", "+", "1", "\n", "oSymDef", ".", "ExitEdit", " ", "(", "True", ")", "\n", "Next"], "author": "jerryrouten"},
{"created at": [], "solution Title": "\n                        Re: BOM Auto Export\n                    ", "solution": ["Sub Reorder_PartColumns()\n    \n    'move sheet to template", "    Windows(\"PartsBOM Original.xls\").Activate\n    Sheets(\"Sheet1\").Move Before:=Workbooks( _\n    \"External BOM Template.xlsm\").Sheets(5)\n\n    'set sheet name\n    Sheets(\"Sheet1\").Select\n    Sheets(\"Sheet1\").Name = \"PartsBOM Original\"\n    \n    'order columns\n    Dim arrColOrder As Variant, ndx As Integer\n    Dim Found As Range, counter As Integer\n    \n    arrColOrder = Array(\"Part Number\", \"Title\", ..........\")\n    \n    counter = 1\n    \n    Application.ScreenUpdating = False\n    \n    For ndx = LBound(arrColOrder) To UBound(arrColOrder)\n    \n        Set Found = Rows(\"1:1\").Find(arrColOrder(ndx), LookIn:=xlValues, LookAt:=xlWhole, _\n                          SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:=False)\n        \n        If Not Found Is Nothing Then\n            If Found.Column <> counter Then\n                Found.EntireColumn.Cut\n                Columns(counter).Insert shift:=xlToRight\n                Application.CutCopyMode = False\n            End If\n            counter = counter + 1\n        End If\n        \n    Next ndx\n    \n    Application.ScreenUpdating = True\n       \nEnd Sub"], "author": "JamieS"},
{"created at": [], "solution Title": "\n                        Re: Running all drawings from assembly\n                    ", "solution": ["Sub Main()\n    ' Check that the active document is an assembly file\n    If ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\n        MessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\n        Exit Sub\n    End If\n    \n    ' Define the active document As an Assembly file\n    Dim oAsmDoc As AssemblyDocument\n    oAsmDoc = ThisApplication.ActiveDocument\n\t\n\toPath = ThisDoc.Path\n\t\t\n    '- - - - - - - - - - - - -Component Drawings - - - - - - - - - - - -\n    ' Look at the files referenced by the assembly\n    Dim oRefDocs As DocumentsEnumerator\n    oRefDocs = oAsmDoc.AllReferencedDocuments\n    Dim oRefDoc As Document\n    \n    For Each oRefDoc In oRefDocs\n        idwPathName = Left(oRefDoc.FullDocumentName, Len(oRefDoc.FullDocumentName) - 3) & \"idw\"\n        ' Check to see that the model has a drawing of the same path and name\n        If(System.IO.File.Exists(idwPathName)) Then\n            Dim oDrawDoc As DrawingDocument\n            oDrawDoc = ThisApplication.Documents.Open(idwPathName, True)\n            Call pdfdwg(oDrawDoc, oPath & \"\\DWG_PDF\")\n            ' Close the file\n            oDrawDoc.Close\n        End If\n    Next\n    \n\tMsgBox(\"Export Complete!\")\nEnd Sub\n\nSub pdfdwg(oDocument As Document, oFolder As String)\n\n\tIf Not System.IO.Directory.Exists(oFolder) Then\n\t\tSystem.IO.Directory.CreateDirectory(oFolder)\n\tEnd If\n\n\t'oRevNum = iProperties.Value(System.IO.Path.GetFileName(oDocument.FullFileName), \"Project\", \"Revision Number\")\n\t", "oRevNum = oDocument.PropertySets(\"Inventor Summary Information\")(\"Revision Number\").Value", "        If oRevNum = \"\" Then\n\t\tUnderscore = \"\"\n\tElse\n\t\tUnderscore = \"_\"\n\tEnd If\n\t\n\tDim oPDFAddIn As TranslatorAddin\n    oPDFAddIn = ThisApplication.ApplicationAddIns.ItemById (\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n    Dim oDWGAddIn As TranslatorAddIn\n    oDWGAddIn = ThisApplication.ApplicationAddIns.ItemById (\"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\")\n\t\n    oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n    \n    'Define the drawing\n    Dim oSheet As Sheet\n    Dim iSheetNumber As Integer\n    \n    For Each oSheet In oDocument.Sheets                'step through each drawing sheet\n\t\toSheet.activate\n\t\t\n\t\toSplArr = Split(oSheet.Name, \":\")\n\t\tiSheetNumber = oSplArr(UBound(oSplArr))\n\t\t\n\t\toOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\t\t\n\t\tIf oPDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\t\t\toOptions.Value(\"All_Color_AS_Black\") = 0\n\t\t\toOptions.Value(\"Remove_Line_Weights\") = 1\n\t\t\toOptions.Value(\"Vector_Resolution\") = 1200\n\t\t\toOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintSheetRange\n\t\t\toOptions.Value(\"Custom_Begin_Sheet\") = iSheetNumber\n\t\t\toOptions.Value(\"Custom_End_Sheet\") = iSheetNumber\n\t\tEnd If\n\t\n\t\t'DWG SETUP - Check whether the translator has 'SaveCopyAs' options\n\t\tIf oDWGAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\t\t\tDim strIniFile As String\n\t\t\tstrIniFile = \"C:\\Cad_Settings\\Inventor_Support_files 2018\\Design Data\\DWG-DXF\\ExportDWGiLogic.ini\"\n\t\t\t'Create the name-value that specifies the ini file To use.\n\t\t\toOptions.Value(\"Export_Acad_IniFile\") = strIniFile\n\t\tEnd If\n\t\t\t\t\n\t\tDim fileName As String\n\t\toFileName = ThisDoc.FileName(False) 'without extension\n\t\tfileName = oFileName & Underscore & oRevNum & \"-\" & iSheetNumber\n\t\t\n\t\toDataMediumPDF = ThisApplication.TransientObjects.CreateDataMedium\n\t\toDataMediumPDF.FileName = oFolder & \"\\\" & fileName & \".pdf\"\n    \t\n\t\toDataMediumDWG = ThisApplication.TransientObjects.CreateDataMedium\n\t\toDataMediumDWG.FileName = oFolder & \"\\\" & fileName & \".dwg\"\n\t\t\n\t\t'Make PDF and DWG\n\t\toPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMediumPDF)\n\t\toDWGAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMediumDWG)\n    Next\nEnd Sub", "    For Each oRefDoc In oRefDocs\n        idwPathName = Left(", "oRefDoc.FullFileName", ", Len(", "oRefDoc.FullFileName", ") - 3) & \"idw\"\n        ' Check to see that the model has a drawing of the same path and name\n        If(System.IO.File.Exists(idwPathName)) Then\n            Dim oDrawDoc As DrawingDocument\n            oDrawDoc = ThisApplication.Documents.Open(idwPathName, True)\n            Call pdfdwg(oDrawDoc, oPath & \"\\DWG_PDF\")\n            ' Close the file\n            oDrawDoc.Close\n        End If\n    Next"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Copy/paste properties from the 3D to the 2D ON SAVE\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ILogic to move end of features in an assembly\n                    ", "solution": ["ThisDoc", ".", "Document", ".", "ComponentDefinition", ".", "SetEndOfFeaturesToTopOrBottom", "(", "True", ")"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: iLogic Bug - Cannot change the BOM structure of an assembly\n                    ", "solution": ["Sub Main()\n   Dim oDoc As Document\n   oDoc = ThisApplication.ActiveDocument\n   Dim oCompDef As ComponentDefinition\n   oCompDef = oDoc.ComponentDefinition\n   oCompDef.BOMStructure = BOMStructureEnum.kPurchasedBOMStructure\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: how to link more parameters from an already linked part by using API?\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Bug on Inventor Portuguese version when using iLogic\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Need Diameter of Hole in API (iLogic)\n                    ", "solution": [], "author": "jerryrouten"},
{"created at": [], "solution Title": "\n                        Re: Inventor Doesn't Recognize Try...End Try\n                    ", "solution": ["        For Each View In Views\n            'Check if the drawing view reference is an assembly instead of assuming \n            If (View.ReferencedDocumentDescriptor.ReferencedDocument.DocumentType = kAssemblyDocumentObject) Then\n                Dim RefDoc As AssemblyDocument\n                Set RefDoc = View.ReferencedDocumentDescriptor.ReferencedDocument 'run-time error 13: mismatch\n                'recurse all components in assembly referenced by view\n                Call recurseOccurrences(RefDoc.ComponentDefinition.Occurrences)\n            End If\n        Next"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Component Occurrence Visibility in Drawing View\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: To retrieve Appearances from the current Appearance Library\n                    ", "solution": ["Sub oAppearance_Sub()\n\nDim oLib As AssetLibrary\nDim sAppearance As String\n\nDim invAppearanceProperty As Inventor.Property\n'oLib = ThisApplication.AssetLibraries(\"Autodesk Appearance Library\")\noLib = ThisApplication.AssetLibraries(\"RWEI TEXTURES\")\n\nDim oTextures As New ArrayList\nFor Each oTexture In ThisApplication.ActiveAppearanceLibrary.AppearanceAssets\n'oMsg = MessageBox.Show(oTexture.DisplayName, \"Title\",MessageBoxButtons.OKCancel)\noTextures.add(oTexture.DisplayName)\nIf msg = vbCancel Then\nExit For\nEnd If\nNext\n\n'present the user with the list to choose from\n100:\noTextures_Selected = InputListBox(\"CHOOSE TEXTURE FROM ABOVE LIST\", oTextures, oTextures.item(0), \"TEXTURE SELECTION\", \"LIST OF TEXTURES\")\nIf oTextures_Selected = \"\" Then Goto 100:\n\nMessageBox.Show(\"oTextures_Selected: \" & oTextures_Selected, \"Title\")\n\noPartDoc = ThisDoc.Document\t\t'oCompDef.Document\n\noPartDoc.ActiveAppearance.DisplayName = oTextures_Selected\n\nEnd Sub\n", "Sub Main()\noAppearance_Sub()\nThisDoc.Save\nEnd Sub\n\nSub oAppearance_Sub()\nDim oPartDoc As Inventor.PartDocument = ThisApplication.ActiveDocument\n        \nDim oAppearanceAssets As AssetsEnumerator\noAppearanceAssets = oPartDoc.AppearanceAssets\nDim oAsset As Asset\n\t\nDim oAsset_Array As New ArrayList\nFor Each oAsset_Array_X In ThisApplication.ActiveAppearanceLibrary.AppearanceAssets\n'oMsg = MessageBox.Show(oTexture.DisplayName, \"Title\",MessageBoxButtons.OKCancel)\noAsset_Array.add(oAsset_Array_X.DisplayName)\nIf msg = vbCancel Then\nExit For\nEnd If\nNext\n\n'present the user with the list to choose from\n100:\noAsset_Array_Selected = InputListBox(\"CHOOSE TEXTURE FROM ABOVE LIST\", oAsset_Array, oAsset_Array.item(0), \"TEXTURE SELECTION\", \"LIST OF TEXTURES\")\nIf oAsset_Array_Selected = \"\" Then Goto 100:\n\noAsset_X = oAsset_Array_Selected\n\nFor Each oAsset In oAppearanceAssets\n\t'Loop through the assetsvalues, that you see in the appearance dialogbox\n    Dim oAssetValue As AssetValue\n\t'oMsgBox = MessageBox.Show(\"oAsset: \" & oAsset.DisplayName, \"oAsset\")\n\tIf oAsset.DisplayName = oAsset_X Then\n\toPartDoc.ActiveAppearance = oAsset\n\tExit For\n\tEnd If\t\nNext\n\nEnd Sub"], "author": "rwickrama"},
{"created at": [], "solution Title": "\n                        Re: Create/Modify Design Views in ipt\n                    ", "solution": ["Public Sub subHalfsection()\n    Dim oRepManager As RepresentationsManager\n    Set oRepManager = ThisApplication.ActiveDocument.ComponentDefinition.RepresentationsManager\n    \n    Dim oRootPoint As point\n    Set oRootPoint = ThisApplication.TransientGeometry.CreatePoint(0, 0, 0)\n\n    Dim oNormal As Vector\n    Set oNormal = ThisApplication.TransientGeometry.CreateVector(0, -1, 0)\n\n    Dim oPlane As Plane\n    Set oPlane = ThisApplication.TransientGeometry.CreatePlane(oRootPoint, oNormal)\n\n    Call oRepManager.ActiveDesignViewRepresentation.SetSectionView(kHalfSectionViewType, oPlane)\nEnd Sub", "Sub Main()\n\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oPCD As PartComponentDefinition\n    Set oPCD = oDoc.ComponentDefinition\n    \n    Set oSecView = oPCD.RepresentationsManager.DesignViewRepresentations.Add(\"XY Section\")\n    oSecView.Activate\n    Call oSecView.SetSectionView(kHalfSectionView, oPCD.WorkPlanes(2))\n\nEnd Sub", "Sub Main()\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oPCD As ComponentDefinition\n    Set oPCD = oDoc.ComponentDefinition\n    \n    Set oSecView = oPCD.RepresentationsManager.DesignViewRepresentations.Add(\"XY Section\")\n    oSecView.Activate\n    Call oSecView.SetSectionView(SectionViewTypeEnum.kHalfSectionViewType, oPCD.WorkPlanes(2).Plane)\n\nEnd Sub"], "author": "wolfgang.nickl"},
{"created at": [], "solution Title": "\n                        Re: Export Browser Icon\n                    ", "solution": [], "author": "MattH_Work"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Matching part number to linked parameter and then exrtruding from t\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Insert an Excel into inventor drawing\n                    ", "solution": ["'Original code: https://forums.autodesk.com/t5/inventor-customization/ilogic-create-virtual-components/td-p/5678953", "Sub Main()\n\tDim oFileDlg As inventor.FileDialog = Nothing\n\tInventorVb.Application.CreateFileDialog(oFileDlg)\n\toFileDlg.InitialDirectory = oOrigRefName\n\toFileDlg.CancelError = True\n\toFileDlg.ShowOpen()\n\t\n\tIf Err.Number <> 0 Then\n\t\tReturn\n\tElseIf oFileDlg.FileName <> \"\" Then\n\t\tselectedfile = oFileDlg.FileName\n\tEnd If\n\t\n\tGoExcel.Open(selectedFile, \"Sheet1\")\n\t\n'Ready inventor\t\t\t\t\t\n\tDim asmDoc As AssemblyDocument\n\tasmDoc = ThisApplication.ActiveDocument\n\tDim oAsmCompDef As AssemblyComponentDefinition\n\toAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\t\t\t\t\n'/ready\n\t\t\t\t\t\n\t'get iProperties from the XLS file\n\tFor MyRow = 2 To 1000 'index row 2 through 1000\n\t\t'get the iProperty from the XLS file for each column\n\t\toProp1 = GoExcel.CellValue(\"B\" & MyRow )\n\t\toProp2 = GoExcel.CellValue(\"C\" & MyRow )\n\t\toProp3 = GoExcel.CellValue(\"D\" & MyRow)\n\t\toProp4 = GoExcel.CellValue(\"E\" & MyRow)\n\t\toProp5 = GoExcel.CellValue(\"F\" & MyRow)\n\t\toProp6 = GoExcel.CellValue(\"G\" & MyRow)\n\t\toProp7 = ThisApplication.GeneralOptions.UserName\n\n\t\n\t'get quantity from user\n\tiQTY = oProp2\n\t\n\t'Iterate through all of the occurrences in the assembly\n\tDim asmOcc As ComponentOccurrence\n\tFor Each asmOcc  In oAsmCompDef.Occurrences\n\t\tDim oOcc As Object\n\t\toOcc = asmOcc.Name.Split(\":\")(0)\n\t\t\n\t\tIf TypeOf asmOcc.Definition Is VirtualComponentDefinition Then\n\t\t\tIf oOcc = sVirtPart Then\n\t\t\t\tasmOcc.delete\n\t\t\tEnd If\n\t\tEnd If\n\tNext\n\t\n\tDim occs As ComponentOccurrences\n\toccs = asmDoc.ComponentDefinition.Occurrences\n\t\n\tDim identity As Matrix\n\tidentity = ThisApplication.TransientGeometry.CreateMatrix\n\t\n\n\tDim virtOcc As ComponentOccurrence\n\tIf  iQTY >= 1 Then\n\t\tvirtOcc = occs.AddVirtual(sVirtPart, identity)\n\t\t\n\t\tTry\n\t\tiProperties.Value(sVirtPart & \":1\", \"Project\", \"Description\") = oProp3\n\t\t\tCatch 'catch error when oProp1 = nothing\n\t\t\tEnd Try\n\t\tTry\n\t\tiProperties.Value(sVirtPart & \":1\", \"Project\", \"Part Number\") = oProp1\n\t\t\tCatch 'catch error when oProp2 = nothing\n\t\t\tEnd Try\n\t\tTry\n\t\tiProperties.Value(sVirtPart & \":1\", \"Project\", \"Designer\") = oProp7\n\t\t\tCatch 'catch error when oProp3 = nothing\n\t\t\tEnd Try\n\t\tTry\n\t\tiProperties.Value(sVirtPart & \":1\", \"Custom\", \"OmschrijvingDuits\") = oProp6\n\t\t\tCatch 'catch error when oProp4 = nothing\n\t\t\tEnd Try\n\t\tTry\n\t\tiProperties.Value(sVirtPart & \":1\", \"Custom\", \"OmschrijvingEngels\") = oProp4\n\t\t\tCatch 'catch error when oProp5 = nothing\n\t\t\tEnd Try\n\t\tTry\n\t\tiProperties.Value(sVirtPart & \":1\", \"Custom\", \"OmschrijvingFrans\") = oProp5\n\t\t\tCatch 'catch error when oProp5 = nothing\n\t\t\tEnd Try\n\t\tTry\n\t\tiProperties.Value(sVirtPart & \":1\", \"Summary\", \"Author\") = oProp7\n\t\t\tCatch 'catch error when oProp5 = nothing\n\t\t\tEnd Try\n\t\tTry\n\t\tiProperties.Value(sVirtPart & \":1\", \"Project\", \"Creation Date\") = Now\n\t\t\tCatch\n\t\t\tEnd Try\n\t\t\t\t\n\tElse\n\t\tReturn\n\tEnd If\n\t\n\t'add next instance starting at instance2 (if applicable)\n\tDim index As Integer\n\tindex = 2\n\tDo While index <= iQTY\n\t\toccs.AddByComponentDefinition(virtOcc.Definition, identity)\n\t\tindex += 1\n\tLoop\n\tNext\n\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Set Inventor to \"Edit Factory Scope\"\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Properties\n                    ", "solution": [], "author": "martin.winkler"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Export to XML\n                    ", "solution": ["AddReference \"System.Linq\"\nAddReference \"System.Xml\"\nAddReference \"System.Xml.Linq\"\nAddReference \"System.Core\"\n\nImports System.Linq\nImports System.Xml\nImports System.Xml.Linq\nImports System.Xml.Schema"], "author": "t_hascj"},
{"created at": [], "solution Title": "\n                        Re: Get Vault mapping for libraries\n                    ", "solution": ["<ProjectPaths>\n  <ProjectPath pathtype=\"Library\">\n    <PathName>Library</PathName>\n    <Path>C:\\...</Path>\n    <VaultPath>$/...</VaultPath>\n  </ProjectPath>\n</ProjectPaths>\n"], "author": "FRFR1426"},
{"created at": [], "solution Title": "\n                        Re: How to know which occuerence is ActiveEditDocument?\n                    ", "solution": ["Hi Hideo,", "You can get the active occurrence name using 'ActiveOccurrence' property. It'll be Nothing if there is no active occurrence.", "Dim", " ", "oDoc", " ", "As", " ", "AssemblyDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oActiveOcc", " ", "As", " ", "ComponentOccurrence", " ", "=", " ", "oDoc", ".", "ComponentDefinition", ".", "ActiveOccurrence", "\n", "If", " ", "Not", " ", "IsNothing", "(", "oActiveOcc", ")", " ", "Then", "\n    ", "MsgBox", "(", "oActiveOcc", ".", "Name", ")", "\n", "End", " ", "If", "\n", "If", " ", "Not", " ", "IsNothing", "(", "oActiveOcc", ")", " ", "Then", "\n    ", "Dim", " ", "oActiveDoc", " ", "As", " ", "Document", " ", "=", " ", "oActiveOcc", ".", "Definition", ".", "Document", "\n    ", "If", " ", "oActiveDoc", " ", "Is", " ", "MyOtherDoc", " ", "Then", "\n        ", "MsgBox", "(", "\"", "Active Doc is MyOtherDoc", "\"", ")", "\n    ", "End", " ", "If", "\n", "End", " ", "If", "Hope this helps,", "Luke"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Constrain two parts in subassembly from an assembly\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: about  SetPromptResultText ()\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: API code to get kFactor not correct?\n                    ", "solution": ["SheetMetalComponentDefinitionObject.UnfoldMethod.kFactor", "oSheetMetalDef.ActiveSheetMetalStyle.UnfoldMethod.kFactor", "oSheetMetalDef.UnfoldMethod.kFactor"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Any VB code sample on real time 3D surface drag like the \"bulge\"\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: DrawingView orientation VBA (turn 90 dgr)\n                    ", "solution": ["yourView.Rotation = - 1.57079"], "author": "t_hascj"},
{"created at": [], "solution Title": "\n                        Re: Test is file is iPart or iAssembly\n                    ", "solution": ["'", "Part file", "\n", "If", " ", "oDoc", ".", "DocumentType", " ", "=", " ", "Inventor", ".", "DocumentTypeEnum", ".", "kPartDocumentObject", " ", "And", " ", "oDoc", ".", "SubType", " ", "<>", " ", "\"", "{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}", "\"", " ", "Then", "\n    ", "If", " ", "oDoc", ".", "ComponentDefinition", ".", "IsiPartFactory", " ", "Or", " ", "oDoc", ".", "ComponentDefinition", ".", "IsiPartMember", " ", "Then", "\n        ", "MessageBox", ".", "Show", "(", "\"", "This is a iPart", "\"", ", ", "\"", "iPart", "\"", ")", "\n        ", "Return", "\n    ", "End", " ", "If", "\n    ", "MessageBox", ".", "Show", "(", "\"", "This ia a Part", "\"", ", ", "\"", "Part", "\"", ")", "\n\n", "'", "Assembly file", "\n", "Else", " ", "If", " ", "oDoc", ".", "DocumentType", " ", "=", " ", "Inventor", ".", "DocumentTypeEnum", ".", "kAssemblyDocumentObject", " ", "Then", "\n    ", "If", " ", "oDoc", ".", "ComponentDefinition", ".", "IsiAssemblyFactory", " ", "Or", " ", "oDoc", ".", "ComponentDefinition", ".", "IsiAssemblyMember", " ", "Then", "\n        ", "MessageBox", ".", "Show", "(", "\"", "Dit is een iAssembly", "\"", ", ", "\"", "Title", "\"", ")", "\n        ", "Return", "\n    ", "End", " ", "If", "\n    ", "MessageBox", ".", "Show", "(", "\"", "Dit is een Assembly", "\"", ", ", "\"", "Title", "\"", ")", "\n", "End", " ", "If"], "author": "robert.vdrijst"},
{"created at": [], "solution Title": "\n                        Re: Use inventors existing command icons in add-in\n                    ", "solution": ["Sub ExtractBuiltInIconSample()\n    Dim oDef1 As ButtonDefinition\n    Set oDef1 = ThisApplication.CommandManager.ControlDefinitions.Item(\"PartFilletCmd\")\n    \n    Dim oIcon As IPictureDisp\n    Set oIcon = oDef1.LargeIcon\n    \n    StdFunctions.SavePicture oIcon, \"C:\\temp\\Fillet.bmp\"\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Vb.net - Export files and then can not change project\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Run External Rule From an Assembly that affects the opened document\n                    ", "solution": ["Dim", " ", "Temp_Thick", " ", "As", " ", "String", "\n", "Temp_Thick", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "Parameters", ".", "item", "(", "\"", "Thickness", "\"", ")", ".", "Expression", "\n", "oFileName", " ", "=", " ", "oQty", " ", "&", " ", "\"", "x", "\"", " ", "&", " ", "\"", " ", "\"", "&", " ", "ThisDoc", ".", "FileName", "(", "False", ")", " ", "&", " ", "\"", ".dwg", "\"", " ", "'", "without extension", "\n", "MsgBox", "(", "Temp_Thick", " ", "&", " ", "oFileName", ")", "FullFileName", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "FullFileName", "\n\n", "FileName", " ", "=", " ", "FullFileName", ".", "Remove", "(", "0", ", ", "FullFileName", ".", "LastIndexOf", "(", "\"", "\\", "\"", ")", " ", "+", " ", "1", ")", "\n\n", "MsgBox", "(", "FileName", ")", "\n"], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: Leader Note API text Position\n                    ", "solution": ["Sub ChangeLeaderTextOrientation()\n    Dim oLeaderNote As LeaderNote\n    Set oLeaderNote = Me.SelectSet(1)\n    \n    Debug.Print oLeaderNote.Rotation\n    oLeaderNote.Rotation = 1.57\n    Dim oPo As Point2d\n    If oLeaderNote.Leader.HasRootNode Then\n        If Not (oLeaderNote.Position.IsEqualTo(oLeaderNote.Leader.RootNode.Position, 0.000001)) Then\n            Set oPo = oLeaderNote.Leader.RootNode.Position\n            \n            oPo.X = oLeaderNote.Leader.RootNode.Position.X\n            oPo.Y = oLeaderNote.Leader.RootNode.Position.Y + 0.3\n            \n            ' Change the leader note text position just above the root node\n            oLeaderNote.Position = oPo\n        End If\n    End If\n    \nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic Expose \"Thickness\" to custom iProperty\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Loft not showing on drawing file\n                    ", "solution": [], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: Retrieve the parent file name of an ipart member\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: iLogic Parameter function behaviour\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Copy iProperties to all parts n Assemblies\n                    ", "solution": ["Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", "\n", "oAsmCompDef", " = ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", "\n\n", "'Iterate through all Of the occurrences", "\n", "Dim", " ", "oOccurrence", " ", "As", " ", "ComponentOccurrence", "\n", "For", " ", "Each", " ", "oOccurrence", " ", "In", " ", "oAsmCompDef", ".", "Occurrences", ".", "AllReferencedOccurrences", "(", "oAsmCompDef", ")  \n\t", "MsgBox", "(", "oOccurrence", ".", "definition", ".", "document", ".", "Ismodifiable", ")\n\t", "If", " ", "oOccurrence", ".", "definition", ".", "document", ".", "Ismodifiable", " ", "Then", "\n\t    ", "'write to component iprops", "\n\t    ", "iProperties", ".", "Value", "(", "oOccurrence", ".", "Name", ", ", "\"Custom\"", ", ", "\"Project\"", ") = _\n\t    ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"Project\"", ")\n\t    \n\t    ", "iProperties", ".", "Value", "(", "oOccurrence", ".", "Name", ", ", "\"Custom\"", ", ", "\"Client\"", ") = _\n\t    ", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"Client\"", ")\n\t", "End", " ", "If", " \n", "Next  "], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: call vba module from a global ilogic form in Inventor 2018\n                    ", "solution": ["InventorVb", ".", "RunMacro", "(", "\"Applicationproject\"", ", ", "\"TestM\"", ", ", "\"Test1\"", ")"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Update2 resolves crash\n                    ", "solution": [], "author": "peter"},
{"created at": [], "solution Title": "\n                        Re: iLogic, Move Views Using Rule In Part File\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Inventor VBA - Changing view position\n                    ", "solution": [], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: Adjust Location of Symbol When View Moves\n                    ", "solution": ["Sub Main()\n\tDeleteSymbols()\n\t\n\tPlaceGrainDirectionSymbol(\"ISO\",\"GRAIN DIRECTION\")\n\tPlaceGrainDirectionSymbol(\"FRONT\",\"GRAIN DIRECTION\")\n'\tPlaceGrainDirectionSymbol(\"ISO\",\"HORZ GRAIN DIR\")\n'\tPlaceGrainDirectionSymbol(\"FRONT\",\"HORZ GRAIN DIR\")\nEnd Sub\n\n' Add symbols to show grain direction on a view\nSub PlaceGrainDirectionSymbol(viewName As String, symbolName As String)\n\tDim drawDoc As DrawingDocument\n\tdrawDoc = ThisApplication.ActiveDocument\n\t\n\tDim sheet As Sheet\n\tsheet = drawDoc.ActiveSheet\n\t\n\tDim symbolDef As SketchedSymbolDefinition\n\tsymbolDef = drawDoc.SketchedSymbolDefinitions.Item(symbolName)' \"GRAIN DIRECTION\", \"HORZ GRAIN DIR\"\n\t\t\t\t\n\t' Select a drawing view.\n        Dim drawingView As DrawingView\n        drawingView = ActiveSheet.View(viewName).View\n\t\n\t' Get center of the view to place the symbol\n\tDim symbolCenter As Point2d = drawingView.Center\n\t' If it is the isometric view, move the center of the symbol so it displays centered on the face of the part\n\tIf viewName = \"ISO\" Then\n\t\tsymbolCenter.X = symbolCenter.X - ActiveSheet.View(viewName).Scale * .75\n\t\tsymbolCenter.Y = symbolCenter.Y - ActiveSheet.View(viewName).Scale * .4\n\tEnd If\n\t\n\t' Default scale is 1\n\tDim symbolScale As Double = 1\n\t' Adjust scale so symbol fits on the face of the part better. \n\t' Scale will differ slightly if the view is isometric vs a face.\n\tIf drawingView.Width <7.5 And symbolName = \"HORZ GRAIN DIR\" And viewName = \"ISO\" Then\n\t\tsymbolScale = drawingView.Width / 7.5\n\tElseIf drawingView.Width <7 And symbolName = \"HORZ GRAIN DIR\" Then\n\t\tsymbolScale = drawingView.Width / 7\n\tElseIf drawingView.Height <9 And symbolName = \"GRAIN DIRECTION\" And viewName = \"ISO\" Then\n\t\tsymbolScale = drawingView.Height / 9\n\tElseIf drawingView.Height <4.5 And symbolName = \"GRAIN DIRECTION\" Then\n\t\tsymbolScale = drawingView.Height / 4.5\n\tEnd If\n\t\n\t' Default rotation is 0\n\tDim symbolRotation As Double = 0\n\t' Isometric view is angled and horizontal grail does not display correctly, angle to match iso view.\n\tIf viewName = \"ISO\" And symbolName = \"HORZ GRAIN DIR\" Then\n\t\tsymbolRotation = - PI / 6 ' rotation is in radian's, this equation equates to -30 degrees\n\tEnd If\n\t\n\tDim sketchedSymbol As SketchedSymbol\n\tsketchedSymbol = sheet.SketchedSymbols.Add(symbolDef, symbolCenter, symbolRotation, symbolScale)\n\tsketchedSymbol.Static = True\nEnd Sub\n\n' Delete all symbols from all sheets.\nPublic Sub DeleteSymbols()\n\tDim doc As DrawingDocument\n\tdoc = ThisApplication.ActiveDocument\n\t\n\tDim sheet As Sheet\n\tFor Each sheet In doc.Sheets\n\t\tsheet.Activate\n\t\tsheet = doc.ActiveSheet\n\t\tFor Each sketchedSymbol in sheet.SketchedSymbols\n\t\t\tsketchedSymbol.Delete\n\t\tNext\n\tNext\nEnd Sub"], "author": "insomnix"},
{"created at": [], "solution Title": "\n                        Re: PDFs with Revisions\n                    ", "solution": ["    oRevNum = oDoc.PropertySets(\"Inventor Summary Information\")(\"Revision Number\").Value", "    If oRevNum <> 0 Then", "        oShortName = Left(oName, Len(oName) - 4) & \"-\"& oRevNum", "    Else", "        oShortName = Left(oName, Len(oName) - 4)", "    End if", "If oRevNum <> 0 Then", "If oRevNum <> \"\" Then"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Assembly workaxes, does  AddByLineAndPoint, API help file error\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Reading value from listbox problem\n                    ", "solution": [], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: Make all components with selected part name invisible\n                    ", "solution": ["Sub", " ", "Main", "()\n    ", "Dim", " ", "doc", " ", "As", " ", "AssemblyDocument", "\n    ", "doc", " = ", "ThisDoc", ".", "Document", "\n\t\n\t", "Dim", " ", "oOccurrence", " ", "As", " ", "ComponentOccurrence", " \n\t", "Try", ": \n\t\t", "oOccurrence", " = ", "doc", ".", "SelectSet", ".", "Item", "(1)\n\t", "Catch", " : \n\t\t", "MsgBox", "(", "\"Please select the component to be hidden: \"", ")\n\t\t", "Exit", " ", "Sub", " \n\t", "End", " ", "Try", "\n\t\n    ", "Dim", " ", "strFileName", " = ", "oOccurrence", ".", "Name", "\n\t", "Dim", " ", "strSearch", " = ", "strFileName", ".", "Split", "(", "\":\"", ")(0)\n\t\n    ", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", "\n    ", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "doc", ".", "ComponentDefinition", ".", "Occurrences", "\n        ", "Call", " ", "SetOccurrenceVisibility", "(", "strSearch", ", ", "False", ", ", "oOcc", ")\n    ", "Next", "\n", "End", " ", "Sub", "\n\n", "Sub", " ", "SetOccurrenceVisibility", "(", "strSearch", " ", "As", " ", "String", ", ", "bVisible", " ", "As", " ", "Boolean", ", ", "oOcc", " ", "As", " ", "ComponentOccurrence", ")\n    ", "If", " ", "LCase", "(", "oOcc", ".", "Name", ".", "Split", "(", "\":\"", ")(0)) = ", "LCase", "(", "strSearch", ") ", "Then", "\n       ", "oOcc", ".", "Visible", " = ", "bVisible", " \n    ", "End", " ", "If", "\n    \n    ", "Dim", " ", "osubOcc", " ", "As", " ", "ComponentOccurrence", "\n    ", "If", " ", "oOcc", ".", "SubOccurrences", ".", "Count", " > 0 ", "Then", "\n        ", "For", " ", "Each", " ", "osubOcc", " ", "In", " ", "oOcc", ".", "SubOccurrences", "\n\t\t\t", "Call", " ", "SetOccurrenceVisibility", "(", "strSearch", ", ", "bVisible", ",", "osubOcc", ")\n        ", "Next", "\n    ", "End", " ", "If", "\n", "End", " ", "Sub"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Assembly level of detail link issue\n                    ", "solution": ["Sub", " ", "Main", "\n    ", "Dim", " ", "doc", " = ", "ThisDoc", ".", "Document", "\n    ", "Dim", " ", "oLOD", " ", "As", " ", "LevelOfDetailRepresentation", "  \n    ", "Dim", " ", "oAsmCompDef", " ", "As", " ", "ComponentDefinition", "  \n    ", "oAsmCompDef", " = ", "doc", ".", "ComponentDefinition", " \n    ", "Try", " \n    ", "oLOD", " = ", "oAsmCompDef", ".", "RepresentationsManager", ".", "LevelOfDetailRepresentations", ".", "Item", "(", "\"LOD1\"", ").", "Activate", "(", "True", ")\n    ", "Catch", "\n    ", "Dim", " ", "nLOD", " ", "As", " ", "LevelOfDetailRepresentation", "\n    ", "nLOD", " = ", "oAsmCompDef", ".", "RepresentationsManager", ".", "LevelOfDetailRepresentations", ".", "Add", "(", "\"LOD1\"", ")\n    ", "oLOD", " = ", "nLOD", "\n    ", "Finally", "\n    ", "oLOD", " = ", "oAsmCompDef", ".", "RepresentationsManager", ".", "LevelOfDetailRepresentations", ".", "Item", "(", "\"LOD1\"", ").", "Activate", "(", "True", ")\n    ", "End", " ", "Try", "\n    ", "Dim", " ", "oOccurrence", " ", "As", " ", "ComponentOccurrence", " \n    ", "For", " ", "Each", " ", "oOccurrence", " ", "In", " ", "doc", ".", "componentdefinition", ".", "occurrences", " \n        ", "If", " ", "oOccurrence", ".", "DefinitionDocumentType", " = ", "kAssemblyDocumentObject", " \n            ", "If", " ", "DRExist", "(", "\"LOD1\"", ", ", "oOccurrence", ".", "definition", ".", "RepresentationsManager", ".", "LevelOfDetailRepresentations", ") ", "Then", "\n                ", "oOccurrence", ".", "SetLevelOfDetailRepresentation", "(", "\"LOD1\"", ")\n            ", "Else", " \n                ", "oOccurrence", ".", "SetLevelOfDetailRepresentation", "(", "\"All Content Center Suppressed\"", ")\n            ", "End", " ", "If", " \n        ", "End", " ", "If", " \n    ", "Next", " \n", "End", " ", "Sub", " \n\n", "Function", " ", "DRExist", "(", "strDR", " ", "As", " ", "String", ", ", "oDVs", " ", "As", " ", "LevelOfDetailRepresentations", ")\n    ", "DRExist", " = ", "False", " \n    ", "Dim", " ", "oDR", " ", "As", " ", "LevelOfDetailRepresentation", "   \n    ", "For", " ", "Each", " ", "oDR", " ", "In", " ", "oDVs", " \n        ", "If", " ", "LCase", "(", "oDR", ".", "Name", ") = ", "LCase", "(", "strDR", ")", "Then", " \n            ", "DRExist", " = ", "True", " \n            ", "Exit", " ", "For", "\n        ", "End", " ", "If", " \n    ", "Next", " \n", "End", " ", "Function", " "], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Adding a WorkPlane into an assembly, why does AddFixed not work?\n                    ", "solution": ["static HRESULT GetInventorInformation()\n{\n\tHRESULT Result = NOERROR;\n\n\tTCHAR Str[_MAX_PATH];\n\t\n\tCLSID InvAppClsid;\n\tResult = CLSIDFromProgID (L\"Inventor.Application\", &InvAppClsid);\n\tif (FAILED(Result)) return Result;\n\n\tCComPtr<IUnknown> pInvAppUnk;\n\tResult = ::GetActiveObject(InvAppClsid, NULL, &pInvAppUnk);\n\tif (FAILED(Result))\n\t{\n\t\t_tprintf_s(_T(\"*** Could not get hold of an active Inventor application ***\\n\"));\n\t\t return Result;\n\t}\n\n\tCComPtr<Application> pInvApp;\n\tResult = pInvAppUnk->QueryInterface (__uuidof(Application), (void **) &pInvApp);\n\tif (FAILED(Result)) return Result;\n\n\tCComPtr<Document> oDoc;\n\tCComPtr<AssemblyDocument> pAssyDoc;\n\tResult = pInvApp->get_ActiveDocument(&oDoc);\n\tpAssyDoc = oDoc;\n\n\tCComPtr<TransientGeometry> pTransGeo;\n\tResult = pInvApp->get_TransientGeometry(&pTransGeo);\n\n\tCComPtr<Point> pt;\n\tResult = pTransGeo->CreatePoint(0, 0, 0,&pt);\n\n\tCComPtr<UnitVector> xVector;\n\tResult = pTransGeo->CreateUnitVector(1,0, 0, &xVector);\n\t\n\tCComPtr<UnitVector> yVector;\n\tResult = pTransGeo->CreateUnitVector(0, 1, 0, &yVector);\n\n\tCComPtr<WorkPlane> wPlane;\n\n\tResult = pAssyDoc->ComponentDefinition->WorkPlanes->AddFixed(pt,xVector,yVector, VARIANT_FALSE,&wPlane);\n\n\treturn Result;\n}"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ilogic to get part extents\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: 100% Automated Drawing Creation without relocating, recreating, reattaching\n                    ", "solution": [], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: Switching imported parameters to user defined parameters through iLogic\n                    ", "solution": ["Option", " ", "Explicit", "\n\n", "Sub", " ", "Main", "()", "\n\n", "Dim", " ", "Param", " ", "As", " ", "Parameter", "\n", "Dim", " ", "Param_Expression", " ", "As", " ", "String", "\n", "Dim", " ", "Param_Units", " ", "As", " ", "String", "\n", "Dim", " ", "Usr_Params", " ", "As", " ", "UserParameters", "\n", "Dim", " ", "Der_Param_Table", " ", "As", " ", "DerivedParameterTable", "\n", "Dim", " ", "i", " ", "As", " ", "Integer", "\n\n", "i", " ", "=", " ", "1", "\n\n", "For", " ", "Each", " ", "Der_Param_Table", " ", "In", " ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "Parameters", ".", "DerivedParameterTables", "\n\n", "For", " ", "Each", " ", "Param", " ", "In", " ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "Parameters", ".", "DerivedParameterTables", ".", "Item", "(", "i", ")", ".", "DerivedParameters", "\n\n", "Param_Expression", " ", "=", " ", "AlphaNumericOnly", "(", "Param", ".", "Expression", ")", "\n", "MsgBox", "(", "Param_Expression", ")", "\n\n", "Param_Units", " ", "=", " ", "Param", ".", "Units", "\n", "Param", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", ".", "AddByExpression", "(", "\"", "Temp_", "\"", " ", "&", " ", "Param", ".", "Name", ", ", "Param_Expression", ", ", "Param_Units", ")", "\n\n", "Next", "\n\n", "i", " ", "=", " ", "i", " ", "+", " ", "1", "\n\n", "Next", "\n\n", "For", " ", "Each", " ", "Der_Param_Table", " ", "In", " ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "Parameters", ".", "DerivedParameterTables", "\n\n", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "Parameters", ".", "DerivedParameterTables", ".", "Item", "(", "1", ")", ".", "Delete", "\n\n", "Next", "\n\n", "For", " ", "Each", " ", "Param", " ", "In", " ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", "\n\n", "If", " ", "InStr", "(", "Param", ".", "Name", ", ", "\"", "Temp_", "\"", ")", " ", "=", " ", "1", " ", "Then", "\n\n", "Param", ".", "Name", " ", "=", " ", "Right", "(", "Param", ".", "Name", ", ", "Len", "(", "Param", ".", "Name", ")", " ", "-", " ", "5", ")", "\n\n", "End", " ", "If", "\n\n", "Next", "\n\n", "End Sub", "\n\n\n", "Function", " ", "AlphaNumericOnly", "(", "strSource", " ", "As", " ", "String", ")", " ", "As", " ", "String", "\n    ", "Dim", " ", "i", " ", "As", " ", "Integer", "\n    ", "Dim", " ", "strResult", " ", "As", " ", "String", "\n\n    ", "For", " ", "i", " ", "=", " ", "1", " ", "To", " ", "Len", "(", "strSource", ")", "\n        ", "Select", " ", "Case", " ", "Asc", "(", "Mid", "(", "strSource", ", ", "i", ", ", "1", "))", "\n            ", "Case", " ", "46", ", ", "48", " ", "To", " ", "57", ":\n                ", "strResult", " ", "=", " ", "strResult", " ", "&", " ", "Mid", "(", "strSource", ", ", "i", ", ", "1", ")", "\n        ", "End", " ", "Select", "\n    ", "Next", "\n    ", "AlphaNumericOnly", " ", "=", " ", "strResult", "\n", "End Function", "Option Explicit\n\nSub Main()\n\nDim oPart As PartDocument\n    oPart = ThisApplication.ActiveDocument\n\nDim oParams As Parameters\nDim oDevParam As DerivedParameter\n'Get Parameter Tables\n    oParams = oPart.ComponentDefinition.Parameters\n\t'check id there is a derived table\n    If oParams.DerivedParameterTables.Count > 0 Then\n\t \n\t For Each oDevTable In oParams.DerivedParameterTables", "\n\t  'Kopie Parameters to User Parameters\n\t  '! This not necessary if the derived parameters are used in the model parameters\n\t  ' then they will be copied automatically\n\t  For Each oDevParam in oDevTable.DerivedParameters\n\t   'Copy Method from B.Sharan Raj\n\t  Next\n\t  \n          If oDevTable.HasReferenceComponent = False Then\n\t  'delete all linked tables \n\t   oDevTable.Delete\n\t  End If\n\t Next\n    End If\nEnd Sub"], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: What data format for the 'Contents' variable of 'CustomTables.Add'\n                    ", "solution": ["Sub Main()\n\n    Dim oDrawDoc As DrawingDocument\n    oDrawDoc = ThisDoc.Document\n    \n    Dim oSheet As Sheet\n    oSheet = oDrawDoc.ActiveSheet\n    \n    Dim oTitles() As String\n    oTitles = {\"BOLT SIZE\", \"Gr 2 - UNC\", \"Gr 2 - UNF\", \"Gr 5 - UNC\", \"Gr 5 - UNF\", \"Gr 8 - UNC\", \"Gr 8 - UNF\", \"18-8 SS - UNC\", \"18-8 SS - UNF\"}\n\n    ' Set the contents of the custom table (contents are set row-wise)\n    Dim oContents() As String\n\toContents = {\"#4\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"(5.2)\", \"-\", _\n\t\t\t\t\"#6\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"(9.6)\", \"-\", _\n\t\t\t\t\"#8\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"(19.8)\", \"-\", _\n\t\t\t\t\"#10\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"(22.8)\", \"(31.7)\", _\n\t\t\t\t\"\u00f81/4\" & Chr(34), \"4\", \"4.7\", \"6.3\", \"7.3\", \"9\", \"10\", \"6.3\", \"7.8\", _\n\t\t\t\t\"\u00f85/16\" & Chr(34), \"8\", \"9\", \"13\", \"14\", \"18\", \"20\", \"11\", \"11.8\", _\n\t\t\t\t\"\u00f83/8\" & Chr(34), \"15\", \"17\", \"23\", \"26\", \"33\", \"37\", \"20\", \"22\", _\n\t\t\t\t\"\u00f87/16\" & Chr(34), \"24\", \"27\", \"37\", \"41\", \"52\", \"58\", \"31\", \"33\", _\n\t\t\t\t\"\u00f81/2\" & Chr(34), \"37\", \"41\", \"57\", \"64\", \"80\", \"90\", \"43\", \"45\", _\n\t\t\t\t\"\u00f89/16\" & Chr(34), \"53\", \"59\", \"82\", \"91\", \"115\", \"129\", \"57\", \"63\", _\n\t\t\t\t\"\u00f85/8\" & Chr(34), \"73\", \"83\", \"112\", \"128\", \"159\", \"180\", \"93\", \"104\", _\n\t\t\t\t\"\u00f83/4\" & Chr(34), \"125\", \"138\", \"200\", \"223\", \"282\", \"315\", \"128\", \"124\", _\n\t\t\t\t\"\u00f87/8\" & Chr(34), \"129\", \"144\", \"322\", \"355\", \"454\", \"501\", \"194\", \"193\", _\n\t\t\t\t\"\u00f81\" & Chr(34), \"188\", \"210\", \"483\", \"541\", \"682\", \"764\", \"287\", \"289\"}\n    \n      \n    Dim oCustomTable As CustomTable\n\n    oCustomTable = oSheet.CustomTables.Add(\"RECOMMENDED TORQUE SPECS [ft-lb / (in-lb)]\", ThisApplication.TransientGeometry.CreatePoint2d(15, 15), 9, 14, oTitles, oContents)                                    \n    \nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: BOM Qty across all Parts\n                    ", "solution": ["Dim openDoc As Document\nopenDoc = ThisDoc.Document\n\nIf openDoc.DocumentType <> 12291 Then\n    MsgBox(\"You must have a document open to run this rule!\")\n    Exit Sub\nEnd if\n\nDim BatchQty As Double\nTry\n    BatchQty = iProperties.Value(\"Custom\", \"Qty Required\")\nCatch\n    MsgBox(\"No 'Qty Required' iProp found in this doc\" & vblf & vblf & \"Aborting rule!\")\n    Exit Sub\nEnd try\n\n Dim docFile As Document\n For Each docFile In openDoc.AllReferencedDocuments\n        Dim docFName As String\n        docFName = System.IO.Path.GetFileName(docFile.FullFileName)\n\n        If docFile.IsModifiable = True Then\n            Dim assemblyDef As AssemblyComponentDefinition\n            assemblyDef = openDoc.ComponentDefinition\n\n            Dim partQty As Double\n            partQty = assemblyDef.Occurrences.AllReferencedOccurrences(docFile).Count\n\n            Try \n                oCheck = iProperties.Value(docFName, \"Custom\", \"Qty Required\")\n            Catch\n                iProperties.Value(docFName, \"Custom\", \"Qty Required\") = 0\n            End Try\n\n            If partQty <> Cdbl(iProperties.Value(docFName, \"Custom\", \"Qty Required\")) Then \n                iProperties.Value(docFName, \"Custom\", \"Qty Required\") = partQty*BatchQty \n            End If\n        End If\nNext"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: BOM structure (Normal,Phantom,etc) to custom iProperties\n                    ", "solution": ["Sub Main()\n    Dim oDoc As Document = ThisDoc.Document\n    PushBOMStructToiProp(oDoc)\n\n    Dim oSubDoc As Document\n    For Each oSubDoc in oDoc.AllReferencedDocuments\n        PushBOMStructToiProp(oSubDoc)\n    Next\n    MsgBox(\"Rule Complete!", "\"", ")\nEnd Sub\n\nSub PushBOMStructToiProp(oSubDoc As Document)\n        Select Case oSubDoc.ComponentDefinition.BOMStructure\n            Case 51974\n                oBOMStruct = \"INSEPARABLE\"\n             Case 51970\n                oBOMStruct = \"NORMAL\"\n            Case 51971\n                oBOMStruct = \"PHANTOM\"\n            Case 51973\n                oBOMStruct = \"PURCHASED\"\n            Case 51972\n                oBOMStruct = \"REFERENCE\"\n            Case Else\n                 MsgBox(\"Error fetching BOM structure to iProp for:\" & vblf & oSubDoc.FullFileName)\n          End Select\n\n    Try     \n     iProperties.Value(System.IO.Path.GetFileName(oSubDoc.FullFileName), \"Custom\", \"BOMStruct\") = oBOMStruct\n    Catch\n         MsgBox(\"Error pushing BOM Structure to iProp for: \" & vblf & oSubDoc.FullFileName)\n    End try   \nEnd Sub"], "author": "bas0570"},
{"created at": [], "solution Title": "\n                        Re: Loading addins when starting inventor with VBA\n                    ", "solution": ["For j = 1 in invApp.ApplicationAddins.Count\n     oAddin = invApp.ApplicationAddins.Item(j)\n     \n     oStr = oStr & j & \") \" & oAddin.DisplayName & \" - \" & oAddin.Activated \nNext\n\nMsgBox(oStr)"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Ribbon Icon Enable or Disable per document\n                    ", "solution": ["Public Class YourClassName\n\n' Declare event\nPrivate WithEvents m_ApplicationsEvents As Inventor.ApplicationEvents\n\n\nPublic Sub Activate(ByVal siteObj As Inventor.ApplicationAddInSite, ByVal loaded1stTime As Boolean) Implements ApplicationAddInServer.Activate\n\n...\n\n' Connect to the representations interface events\n        m_ApplicationsEvents = siteObj.ApplicationEvents\n\n...\n\n'Creating the buttons\n\n...\n\nEnd Sub\n\n\n' Reacting on events\n\n Private Sub m_ApplicationsEvents_OnActivateDocument(DocumentObject As _Document, _\n                                                        BeforeOrAfter As EventTimingEnum, _\n                                                        Context As NameValueMap, _\n                                                        ByRef HandlingCode As HandlingCodeEnum) Handles m_ApplicationsEvents.OnActivateDocument\n        If BeforeOrAfter = EventTimingEnum.kAfter Then\n           ActivateOrDeactivateButtonAccordingToYourConditions()\n        End If\n End Sub\n\n\nEnd Class"], "author": "etaCAD"},
{"created at": [], "solution Title": "\n                        Re: Search part of a filename with iLogic\n                    ", "solution": [], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re: iLogic to select by plane\n                    ", "solution": ["Dim oDoc As AssemblyDocument\noDoc = ThisApplication.ActiveDocument\n\nDim oDef As AssemblyComponentDefinition\noDef = oDoc.ComponentDefinition\n\nDim oPlane As WorkPlane\noPlane = oDef.WorkPlanes.Item(\"XY Plane\")\n\nDim oCommand As CommandManager\noCommand = ThisApplication.CommandManager\n\noCommand.DoSelect(oPlane)\n\nDim oCtrlDef As ControlDefinition\noCtrlDef = ThisApplication.CommandManager.ControlDefinitions.Item(\"AssemblyEnhSelSelectByPlaneCmd\")\n\noCtrlDef.Execute2(True)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Inventor Sheet Metal Bug?\n                    ", "solution": ["    Dim oFPEdge As Edge\n    Set oFPEdge = oDef.FlatPattern.GetFlatPatternEntity(oRightmostEdge)\n    \n    Dim oFPOrient As FlatPatternOrientation\n    Set oFPOrient = oDef.FlatPattern.FlatPatternOrientations.ActiveFlatPatternOrientation\n    \n    oFPOrient.AlignmentAxis = oFPEdge\n    oFPOrient.AlignmentType = kVerticalAlignment\n    oFPOrient.FlipAlignmentAxis = True\n"], "author": "t_remal"},
{"created at": [], "solution Title": "\n                        Re: Change sheet metal styles from an assembly for selected parts.\n                    ", "solution": ["Dim [variable] as [type] = [object of type]", "Dim oOccurrence as ThisApplication.ActiveDocument.SelectSet.Item(1)", "Dim [variable] as [object]", "Dim oOccurrence as ComponentOccurrence = ThisApplication.ActiveDocument.SelectSet.Item(1)"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to export files of an assembly to dxf and stp\n                    ", "solution": ["'", "define the active document as an assembly file", "\n", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", "\n", "oAsmDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "oAsmName", " ", "=", " ", "Left", "(", "oAsmDoc", ".", "DisplayName", ", ", "Len", "(", "oAsmDoc", ".", "DisplayName", ")", " ", "-", "4", ")", "\n", "'", "check that the active document is an assembly file", "\n", "If", " ", "ThisApplication", ".", "ActiveDocument", ".", "DocumentType", " ", "<>", " ", "kAssemblyDocumentObject", " ", "Then", "\n", "MessageBox", ".", "Show", "(", "\"", "Please run this rule from the assembly file.", "\"", ", ", "\"", "iLogic", "\"", ")", "\n", "Exit Sub", "\n", "End", " ", "If", "\n", "'", "get user input", "\n", "RUsure", " ", "=", " ", "MessageBox", ".", "Show", " ", "(", " ", "_", "\n", "\"", "This will create a DXF file for all of the asembly components that are sheet metal.", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "This rule expects that the part file is saved.", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", " ", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "Are you sure you want to create DXF for all of the assembly components?", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "This could take a while.", "\"", ", ", "\"", "iLogic - Batch Output DXFs ", "\"", ",", "MessageBoxButtons", ".", "YesNo", ")", "\n", "If", " ", "RUsure", " ", "=", " ", "vbNo", " ", "Then", "\n", "Return", "\n", "Else", "\n", "End", " ", "If", "\n", "oPath", " ", "=", " ", "ThisDoc", ".", "Path", "\n", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " ", "=", " ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "'", "get DXF target folder path", "\n", "oFolder", " ", "=", " ", "oPath", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oAsmName", " ", "&", " ", "\"", " DXF Files", "\"", "\n", "'", "Check for the DXF folder and create it if it does not exist", "\n", "If", " ", "Not", " ", "System", ".", "IO", ".", "Directory", ".", "Exists", "(", "oFolder", ")", " ", "Then", "\n", "System", ".", "IO", ".", "Directory", ".", "CreateDirectory", "(", "oFolder", ")", "\n", "End", " ", "If", "\n", "'", "- - - - - - - - - - - - -Component - - - - - - - - - - - -", "\n'", "look at the files referenced by the assembly", "\n", "Dim", " ", "oRefDocs", " ", "As", " ", "DocumentsEnumerator", "\n", "oRefDocs", " ", "=", " ", "oAsmDoc", ".", "AllReferencedDocuments", "\n", "Dim", " ", "oRefDoc", " ", "As", " ", "Document", "\n", "'", "work the the drawing files for the referenced models", "\n'", "this expects that the model has been saved", "\n", "For", " ", "Each", " ", "oRefDoc", " ", "In", " ", "oRefDocs", "\n", "iptPathName", " ", "=", " ", "Left", "(", "oRefDoc", ".", "FullDocumentName", ", ", "Len", "(", "oRefDoc", ".", "FullDocumentName", ")", " ", "-", " ", "3", ")", " ", "&", " ", "\"", "ipt", "\"", "\n", "'", "check that model is saved", "\n", "If", "(", "System", ".", "IO", ".", "File", ".", "Exists", "(", "iptPathName", "))", " ", "Then", "\n", "Dim", " ", "oDrawDoc", " ", "As", " ", "PartDocument", "\n", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "iptPathName", ", ", "True", ")", "\n", "oFileName", " ", "=", " ", "Left", "(", "oRefDoc", ".", "DisplayName", ", ", "Len", "(", "oRefDoc", ".", "DisplayName", "))", "\n", "Try", "\n", "'", "Set the DXF target file name", "\n", "Try", "\n", "CustomName", " ", "=", "iProperties", ".", "Value", "(", "oFileName", ", ", "\"", "Custom", "\"", ", ", "\"", "PF_PRT_ZNR", "\"", ")", "\n", "Catch", "\n", "CustomName", " ", "=", "\"", "XXX", "\"", " ", "'", "Wert, wenn iPropertie PF_PRT_ZNR nicht existiert", "\n", "End", " ", "Try", "\n\n", "oDataMedium", ".", "FileName", " ", "=", " ", "oFolder", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "CustomName", "  ", "&", " ", "\"", " ", "\"", " ", "&", " ", "oFileName", " ", "&", " ", "\"", ".dxf", "\"", "\n\n", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "oCompDef", " ", "=", " ", "oDrawDoc", ".", "ComponentDefinition", "\n", "If", " ", "oCompDef", ".", "HasFlatPattern", " ", "=", " ", "False", " ", "Then", "\n", "oCompDef", ".", "Unfold", "\n", "Else", "\n", "oCompDef", ".", "FlatPattern", ".", "Edit", "\n", "End", " ", "If", "\n", "Dim", " ", "sOut", " ", "As", " ", "String", "\n", "sOut", " ", "=", " ", "\"", "FLAT PATTERN DXF?AcadVersion=2004&OuterProfileLayer=IV_OUTER_PR?OFILE", "\"", "\n", "oCompDef", ".", "DataIO", ".", "WriteDataToFile", "(", " ", "sOut", ", ", "oDataMedium", ".", "FileName", ")", "\n", "'", "just for check its works coretcly", "\n'", "i=MessageBox.Show(oDataMedium.FileName, \"Title\",MessageBoxButtons.OKCancel)", "\n'", "MessageBox.Show(i,\"title\",MessageBoxButtons.OK)", "\n'", "If i=2 Then", "\n'", "Exit Sub", "\n'", "End If", "\n", "oCompDef", ".", "FlatPattern", ".", "ExitEdit", "\n", "Catch", "\n", "End", " ", "Try", "\n", "oDrawDoc", ".", "Close", "\n", "Else", "\n", "End", " ", "If", "\n", "Next", "\n"], "author": "robert.vdrijst"},
{"created at": [], "solution Title": "\n                        Re: Error on Document.FullDocumentName\n                    ", "solution": ["oRefDoc.FullFileName"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Stuck in iLogic with IsiAssemblyMember\n                    ", "solution": ["Else If oDoc.DocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n    If oDoc.ComponentDefinition.IsiAssemblyFactory Then\n        MessageBox.Show(\"This is an iAssemblyFactory\", \"I will stop\")\n        Return\n    Else If oDoc.ComponentDefinition.IsiAssemblyMember Then\n        MessageBox.Show(\"This is an iAssemblyMember\", \"I will stop\")            'Here it gives an error when I save the iAssembly Members\n        Return\n    End If\n...", "Else If oDoc.DocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n    Dim oAssyDoc As Inventor.AssemblyDocument = oDoc\n    If oAssyDoc.ComponentDefinition.IsiAssemblyFactory Then\n        MessageBox.Show(\"This is an iAssemblyFactory\", \"I will stop\")\n        Return\n    Else If oAssyDoc.ComponentDefinition.IsiAssemblyMember Then\n        MessageBox.Show(\"This is an iAssemblyMember\", \"I will stop\")            'Here it gives an error when I save the iAssembly Members\n        Return\n    End If\n..."], "author": "t_hascj"},
{"created at": [], "solution Title": "\n                        Re: Rule to suppress features containg certain words...\n                    ", "solution": ["Sub Main()\n\n\tDim oAsmDoc As AssemblyDocument = ThisApplication.ActiveDocument\n\tDim oAsmDef As AssemblyComponentDefinition = oAsmDoc.ComponentDefinition\n\tDim oUniqueOccurrencesFileNames As New List(Of String)()\n\tDim oUniqueOccurrencesDefs As ObjectCollection = ThisApplication.TransientObjects.CreateObjectCollection\n\tFor Each oThing As ComponentOccurrence In oAsmDef.Occurrences\n\t\tIf Not oUniqueOccurrencesFileNames.Contains(oThing.Definition.Document.FullFileName) Then\n\t\t\toUniqueOccurrencesFileNames.Add(oThing.Definition.Document.FullFileName)\n\t\t\toUniqueOccurrencesDefs.Add(oThing.Definition)\n\t\tEnd If\n\tNext\n\t\n\tDim oStringToFilter As String = \"Control_Side\" ''' Make this whatever\n\t\n\tFor Each oThing As ComponentDefinition In oUniqueOccurrencesDefs\n\t\tFor Each oFeature As PartFeature In oThing.Features\n\t\t\tIf oFeature.Name.ToUpper.Contains(oStringToFilter.ToUpper) Then\n\t\t\t\toFeature.Suppressed = True\n\t\t\tEnd If\n\t\tNext\n\tNext\n\tInventorVb.DocumentUpdate()\n\nEnd Sub"], "author": "perrysc"},
{"created at": [], "solution Title": "\n                        Re: Changind units/scale on a drawing from inches to feet\n                    ", "solution": [], "author": "rfennell"},
{"created at": [], "solution Title": "\n                        Re: content center component replace quote mark in filename\n                    ", "solution": ["\"Tube & Pipe:Fittings:Ferrules:Tri-Clamp Ferrule\""], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Flat Pattern FlipAlignmentAxis help needed....\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Two diameters... non iLogic solution?\n                    ", "solution": ["sign(RagColl - RagAtt)\nsqrt(abs((RagColl*RagColl) - (RagAtt*RagAtt))) * ifRes"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Extract numbers from string\n                    ", "solution": ["Sub", " ", "Main", "()", "\n\n    ", "Dim", " ", "oRawString", " ", "As", " ", "String", " ", "=", " ", "\"", "Rod 5 mm x 3mt stainless steel grade 304", "\" 'your string goes HERE", "\n    ", "Dim", " ", "oMessage", " ", "As", " ", "String", " ", "=", " ", "\"", "Raw String:", "\"", " ", "&", " ", "vbLf", " ", "&", " ", "oRawString", " ", "&", " ", "vbLf", " ", "&", " ", "\"", "Extracted Values:", "\"", "\n    ", "Dim", " ", "oValues", " ", "As", " ", "ObjectCollection", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateObjectCollection", "\n    ", "Call", " ", "_StringDefragifier", "(", "oRawString", ",", "oValues", ")", "\n    ", "For", " ", "i", " ", "As", " ", "Integer", " ", "=", " ", "1", " ", "To", " ", "oValues", ".", "Count", "\n        ", "oMessage", " ", "=", " ", "oMessage", " ", "&", " ", "vbLf", " ", "&", " ", "oValues", ".", "Item", "(", "i", ")", "\n    ", "Next", "\n    ", "MsgBox", "(", "oMessage", ")", "\n\n", "End Sub", "\n\n", "Sub", " ", "_StringDefragifier", "(", "oRawString", " ", "As", " ", "String", ",", "oCollection", " ", "As", " ", "ObjectCollection", ")", "\n    \n    ", "Dim", " ", "oWorkingString", " ", "As", " ", "String", " ", "=", " ", "_RemoveExtraneous", "(", "oRawString", ")", "\n    ", "Dim", " ", "oFirstValue", " ", "As", " ", "String", " ", "=", " ", "_GetNumeric", "(", "oWorkingString", ")", "\n    ", "oWorkingString", " ", "=", " ", "Right", "(", "oWorkingString", ",", "Len", "(", "oWorkingString", ")", "-", "Len", "(", "oFirstValue", "))", "\n    ", "oCollection", ".", "Add", "(", "oFirstValue", ")", "\n    ", "oWorkingString", " ", "=", " ", "_RemoveExtraneous", "(", "oWorkingString", ")", "\n    ", "Dim", " ", "oSecondValue", " ", "As", " ", "String", " ", "=", " ", "_GetNumeric", "(", "oWorkingString", ")", "\n    ", "oWorkingString", " ", "=", " ", "Right", "(", "oWorkingString", ",", "Len", "(", "oWorkingString", ")", "-", "Len", "(", "oSecondValue", "))", "\n    ", "Dim", " ", "oCharsToNextValue", " ", "As", " ", "Integer", " ", "=", " ", "0", "\n    ", "For", " ", "i", " ", "As", " ", "Integer", " ", "=", " ", "1", " ", "To", " ", "Len", "(", "oWorkingString", ")", "\n        ", "If", " ", "Not", " ", "IsNumeric", "(", "Mid", "(", "oWorkingString", ",", "i", ",", "1", "))", " ", "Then", "\n            ", "oCharsToNextValue", " ", "+=", " ", "1", "\n        ", "Else", "\n            ", "Exit", " ", "For", "\n        ", "End", " ", "If", "\n    ", "Next", "\n    ", "If", " ", "oCharsToNextValue", " ", "<", " ", "9", " ", "Then", " ", "'", "Careful - assumes characters between dimensions no greater than 8", "\n        ", "oCollection", ".", "Add", "(", "oSecondValue", ")", "\n    ", "End", " ", "If", "\n\n", "End Sub", "\n\n", "Function", " ", "_RemoveExtraneous", "(", "oString", " ", "As", " ", "String", ")", " ", "As", " ", "String", "\n    ", "For", " ", "j", " ", "As", " ", "Integer", " ", "=", " ", "1", " ", "To", " ", "Len", "(", "oString", ")", "\n        ", "If", " ", "IsNumeric", "(", "Mid", "(", "oString", ",", "j", ",", "1", "))", " ", "Then", "\n            ", "_RemoveExtraneous", " ", "=", " ", "Right", "(", "oString", ",", "Len", "(", "oString", ")", "-", "(", "j", "-", "1", "))", "\n            ", "Exit", " ", "For", "\n        ", "End", " ", "If", "\n    ", "Next", "\n", "End Function", "\n\n", "Function", " ", "_GetNumeric", "(", "oString", " ", "As", " ", "String", ")", " ", "As", " ", "String", "\n    ", "Dim", " ", "oDummyValue", " ", "As", " ", "String", " ", "=", " ", "\"\"", "\n    ", "For", " ", "j", " ", "As", " ", "Integer", " ", "=", " ", "1", " ", "To", " ", "Len", "(", "oString", ")", "\n        ", "If", " ", "Not", " ", "Asc", "(", "Mid", "(", "oString", ",", "j", ",", "1", ")", ".", "ToUpper", ")", ">=", "Asc", "(", "\"", "A", "\"", ")", " ", "AndAlso", " ", "Not", " ", "Asc", "(", "Mid", "(", "oString", ",", "j", ",", "1", ")", ".", "ToUpper", ")", ">=", "Asc", "(", "\"", "Z", "\"", ")", " ", "Then", "\n            ", "oDummyValue", " ", "=", " ", "oDummyValue", " ", "&", " ", "Mid", "(", "oString", ",", "j", ",", "1", ")", "\n        ", "Else", "\n            ", "_GetNumeric", " ", "=", " ", "oDummyValue", "\n            ", "Exit", " ", "For", "\n        ", "End", " ", "If", "\n    ", "Next", "\n", "End Function"], "author": "perrysc"},
{"created at": [], "solution Title": "\n                        Re: simple ilogic to difference between titles\n                    ", "solution": ["If Firstletter < RevCode Then\n\tiProperties.Value(\"Project\", \"Description\") = description\n\tdocfile.ComponentDefinition.BOMStructure = 51973 'BOMStructureEnum.kPurchasedBOMStructure\n\tiProperties.Value(\"Summary\", \"Subject\") = \"LIBRARY PART\"\nEnd If\n\n'drawing items\nIf Firstletter >= RevCode Then\n\tIf (FileName Like \"*,*\")\n\t\tiProperties.Value(\"Project\", \"Description\") = commadescription\n\t\tiProperties.Value(\"Summary\", \"Subject\") = Subject\n\tElse\n\t\tiProperties.Value(\"Project\", \"Description\") = description\n\t\tiProperties.Value(\"Summary\", \"Subject\") = \"\"\n\tEnd If\nEnd If"], "author": "jeff.andrews"},
{"created at": [], "solution Title": "\n                        Re: How to detrmine if a custom level of detail has been saved?\n                    ", "solution": ["Dim oAsmDoc As AssemblyDocument = ThisApplication.ActiveDocument 'or other reference to it", "Dim oAsmDef As AssemblyComponentDefinition = oAsmDoc.ComponentDefinition", "Dim oLODwanted As String 'The name of your LOD you want to be saved as", "Dim oHasBeenSaved As Boolean = False", "For Each oLOD As LevelOfDetailRepresentation In oAsmDef.RepresentationsManager.LevelOfDetailRepresentations", "\tIf oLOD.LevelOfDetail = 56072 AndAlso oLOD.Name = oLODWanted Then 'is kCustomLevelOfDetail and namecheck", "\t\toHasBeenSaved = True\t\t", "\t\tMsgBox(\"This assembly has been saved with \" & oLODwanted)", "\t\tExit For", "\tEnd If", "Next", "If Not oHasBeenSaved Then", "\tMsgBox(\"This assembly has not been saved with \" & oLODwanted)", "\tExit Sub", "End If", "\t"], "author": "perrysc"},
{"created at": [], "solution Title": "\n                        Re: Need a VBA macro for creating a single sketch, a point and use punch at the\n                    ", "solution": [], "author": "huliang2009"},
{"created at": [], "solution Title": "\n                        Re: Why don't CustomTable text styles affect their respective areas of the table\n                    ", "solution": [], "author": "CattabianiI"},
{"created at": [], "solution Title": "\n                        Re: Adding A Dimension from a point or Sketch entity to  an edge of a face\n                    ", "solution": ["Sub CreateOffsetDimConstraintSample()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSk As PlanarSketch\n    Set oSk = oDoc.ComponentDefinition.Sketches(\"My New Sketch\")\n    \n    Dim oFace As Face\n    Set oFace = oDoc.ComponentDefinition.Features.ExtrudeFeatures(1).SideFaces(1)\n    \n    Dim oHoleCenter As SketchPoint\n    Set oHoleCenter = oSk.SketchPoints(1)\n    oDoc.SelectSet.Select oHoleCenter\n    \n    oSk.Edit\n    oSk.AddByProjectingEntity oFace.Edges(2)\n    oSk.AddByProjectingEntity oFace.Edges(5)\n    \n    Call oSk.DimensionConstraints.AddOffset(oSk.SketchLines(1), oHoleCenter, ThisApplication.TransientGeometry.CreatePoint2d(2, 2), False)\n    Call oSk.DimensionConstraints.AddOffset(oSk.SketchLines(2), oHoleCenter, ThisApplication.TransientGeometry.CreatePoint2d(-2, 0), False)\n    \n    oSk.ExitEdit\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: name and location in code\n                    ", "solution": ["iProperties.Value(\"Project\", \"Part Number\")", "iProperties.Value(SysIO.Path.GetFileName(view.Document), \"Project\", \"Part Number\")", "Imports SysIO = System.IO\n\nSub Main()\n\n   'Check pre-processing conditions.\n   If (ThisApplication.Views.Count = 0) Then: Exit Sub: End If\n\n   Dim DWGAddIn As TranslatorAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\")\n   Dim oContext As TranslationContext = ThisApplication.TransientObjects.CreateTranslationContext\n   oContext.Type = kFileBrowseIOMechanism\n\n   Dim oOptions As NameValueMap = ThisApplication.TransientObjects.CreateNameValueMap\n   Dim oDataMedium As DataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n", "\n   For Each oVisDoc In ThisApplication.Documents.VisibleDocuments", "\n      If oVisDoc.DocumentType = kDrawingDocumentObject Then \n             DocName = SysIO.Path.GetFileName(oVisDoc.FullFileName)\n", "             'Dim dwgDir = SysIO.Path.GetDirectoryName(oVisDoc.FullFileName)\n             Dim dwgDir = \"S:\\Drawing Office\\Inventor Design Folder\\Export Copy Main Directory - Shared\\dwg\\\"", "\n\t     oDataMedium.MediumType = kFileNameMedium\n             oDataMedium.FileName = dwgDir & iProperties.Value(DocName, \"Project\", \"Part Number\") & \" Rev. \" & iProperties.Value(DocName, \"Project\", \"Revision Number\") & \".dwg\"\n\n             If DWGAddIn.HasSaveCopyAsOptions(oVisDoc, oContext, oOptions) Then\n                 Dim strIniFile As String = \"S:\\Drawing Office\\Inventor Design Folder\\Export Copy Main Directory - Shared\\dwg\\Format2000DONOTDELETE.ini\"\n                 oOptions.Value(\"Export_Acad_IniFile\") = strIniFile\n                 \n                 Call DWGAddIn.SaveCopyAs(oVisDoc, oContext, oOptions, oDataMedium)\n             End If\n       End If \n    Next\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: addin form won't open again\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic Regenerate all Rules With Update Button\n                    ", "solution": ["Dim controlDef as ControlDefinition = ThisApplication.CommandManager.ControlDefinitions.Item(\"iLogic.RegenAllRules\")\ncontrolDef.Execute2(True)\n "], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: Document sub type in addin\n                    ", "solution": ["' Set a reference to the sheet metal document. ", "' This assumes a part document is active. ", "Dim oPartDoc As PartDocument ", "Set oPartDoc = ThisApplication.ActiveDocument", " ' Make sure the document is a sheet metal document. ", "If oPartDoc.SubType \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then ", "MsgBox \"A sheet metal document must be open.\" ", "Exit Sub ", "End If"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic to move drawing notes\n                    ", "solution": ["doc = ThisDoc.Document\nDim noteToMove As GeneralNote\nFor Each note In doc.ActiveSheet.drawingnotes\n\tlocX = note.Position.X\n\tlocY = note.Position.Y\n\tnoteToMove = note\n\t\n\t'test:2\n\tlocation = ThisApplication.transientGeometry.CreatePoint2d(locX + 1,locY + 1)\n\tnoteToMove.Position = location\nNext"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Combining Multiple Rotations\n                    ", "solution": ["Sub Main()\n\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    Dim occ As ComponentOccurrence\n    Set occ = oDef.Occurrences.Item(1)\n    \n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n\n    ' Create an identity matrix\n    Dim xMatrix As Matrix\n    Set xMatrix = oTG.CreateMatrix\n\n    ' Rotate about X-Axis by 45 degrees\n    Call xMatrix.SetToRotation(3.14159 / 4, oTG.CreateVector(1, 0, 0), oTG.CreatePoint(0, 0, 0))\n    \n    ' Create an identity matrix\n    Dim yMatrix As Matrix\n    Set yMatrix = oTG.CreateMatrix\n\n    ' Rotate about Y-Axis by 45 degrees\n    Call yMatrix.SetToRotation(3.14159 / 4, oTG.CreateVector(0, 1, 0), oTG.CreatePoint(0, 0, 0))\n    \n    ' Create an identity matrix\n    Dim zMatrix As Matrix\n    Set zMatrix = oTG.CreateMatrix\n\n    ' Rotate about Z-Axis by 45 degrees\n    Call zMatrix.SetToRotation(3.14159 / 4, oTG.CreateVector(0, 0, 1), oTG.CreatePoint(0, 0, 0))\n    \n    Dim oMatrix As Matrix\n    Set oMatrix = oTG.CreateMatrix\n    \n    Call oMatrix.PreMultiplyBy(xMatrix)", "    ", "    Call oMatrix.PreMultiplyBy(yMatrix)\n    \n    Call oMatrix.PreMultiplyBy(zMatrix)\n    \n    occ.Transformation = oMatrix\n    \n    Call oDoc.Update\n    \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Automatically show reference planes in drawing views\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Need help modifying an iLogic rule\n                    ", "solution": ["'Vb.net\n\nSub Main()\n    Dim oDwgDoc As Document\n    oDwgDoc = ThisApplication.ActiveDocument\n    \n    oFeatureName = \"Control_Side\"\n    oFilterLayerName = \"power_breaks\"\n    \n    Dim oNewLayer As Layer\n    oNewLayer = oDwgDoc.StylesManager.Layers.Item(oFilterLayerName)\n    If oNewLayer Is Nothing Then\n        Call MsgBox(\"Layer Not Found! Please fix.\" & vbLf & vbLf & \"Aboring Rule.\", , \"MacroMagic\")\n        Exit Sub\n    End If\n    \n    \n    For Each oSheet In oDwgDoc.Sheets\n        Dim oCurveColl As ObjectCollection\n        oCurveColl = ThisApplication.TransientObjects.CreateObjectCollection\n    \n        For Each oView In oSheet.DrawingViews\n            For Each oCurve In oView.DrawingCurves\n                oModelGeo = oCurve.ModelGeometry\n                \n                If oModelGeo.Type = 67119520 Then 'Variant/Object/FaceProxy\n                Else\n                        For Each oFace In oModelGeo.Faces\n                            If UCase(oFace.CreatedByFeature.Name) = UCase(oFeatureName) Then\n                                For Each oSegment In oCurve.Segments\n                                    Call oCurveColl.Add(oSegment)\n                                Next\n                            End If\n                        Next\n                End If\n            Next 'curve\n        Next 'view\n        \n        Call oSheet.ChangeLayer(oCurveColl, oNewLayer)\n        oCurveColl.Clear\n    Next 'sheet\nEnd Sub", "'vba", "Sub Main()\n    Dim oDwgDoc As Document\n    Set oDwgDoc = ThisApplication.ActiveDocument\n    \n    oFeatureName = \"Control_Side\"\n    oFilterLayerName = \"power_breaks\"\n    \n    Dim oNewLayer As Layer\n    Set oNewLayer = oDwgDoc.StylesManager.Layers.Item(oFilterLayerName)\n    If oNewLayer Is Nothing Then\n        Call MsgBox(\"Layer Not Found! Please fix.\" & vbLf & vbLf & \"Aboring Rule.\", , \"MacroMagic\")\n        Exit Sub\n    End If\n    \n    \n    For Each oSheet In oDwgDoc.Sheets\n        Dim oCurveColl As ObjectCollection\n        Set oCurveColl = ThisApplication.TransientObjects.CreateObjectCollection\n    \n        For Each oView In oSheet.DrawingViews\n            For Each oCurve In oView.DrawingCurves\n                Set oModelGeo = oCurve.ModelGeometry\n                \n                If oModelGeo.Type = 67119520 Then 'Variant/Object/FaceProxy\n                Else\n                        For Each oFace In oModelGeo.Faces\n                            If UCase(oFace.CreatedByFeature.Name) = UCase(oFeatureName) Then\n                                For Each oSegment In oCurve.Segments\n                                    Call oCurveColl.Add(oSegment)\n                                Next\n                            End If\n                        Next\n                End If\n            Next 'curve\n        Next 'view\n        \n        Call oSheet.ChangeLayer(oCurveColl, oNewLayer)\n        oCurveColl.Clear\n    Next 'sheet\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to get parameters and mass of a part with Python\n                    ", "solution": ["import win32com.client\nfrom win32com.client import gencache, Dispatch, constants, DispatchEx\n\n\noApp = win32com.client.Dispatch('Inventor.Application')\noApp.Visible = True\nmod = gencache.EnsureModule('{D98A091D-3A0F-4C3E-B36E-61F62068D488}', 0, 1, 0)\noApp = mod.Application(oApp)\n# oApp.SilentOperation = True\noDoc = oApp.ActiveDocument\noDoc = mod.PartDocument(oDoc)\n\nprop = oApp.ActiveDocument.PropertySets.Item(\"Design Tracking Properties\")\n\n# getting description and designer from iproperties (works)\nDescrip = prop('Description').Value\nDesigner = prop('Designer').Value\nprint(Descrip)\nprint(Designer)\n\n\n\n# getting mass and parameters (doesn\u00b4t work)\nMassProps = oDoc.ComponentDefinition.MassProperties\npartDef = oDoc.ComponentDefinition.Parameters\n\ndArea = MassProps.Area\nprint(dArea)\n\nlNum = partDef.Count\nprint(lNum)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Inventor addin icon size\n                    ", "solution": [" ' Add a button to the panel, using the previously created button definition.\n    newFeaturesPanel.CommandControls.AddButton(m_buttonDef", ", True", ")\n"], "author": "catot"},
{"created at": [], "solution Title": "\n                        Re: Change Modeling Dimension display using iLogic\n                    ", "solution": ["Public Sub SketchDimensions()\nDim oparam As Inventor.Parameters\n\nSet oparam = ThisApplication.ActiveDocument.ComponentDefinition.Parameters\noparam.DimensionDisplayType = DimensionDisplayTypeEnum.kDimensionDisplayAsTolerance\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Looking at how to implement my auto-work order creation code\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Copy issue, extra folders and files with double extension\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Create G - Code from sketch blocks using iLogic\n                    ", "solution": ["doc = ThisDoc.Document\ncompDef = doc.ComponentDefinition\noSketch = compDef.Sketches.Item(1) 'first sketch in file\nFor Each sketchPoint In osketch.SketchPoints\n\tMessageBox.Show(\"X=\" & sketchPoint.Geometry3d.X & vbCr & \"Y=\" & sketchPoint.Geometry3d.Y & vbCr & \"Z=\" & sketchPoint.Geometry3d.Z, \"Title\")\nNext", "doc = ThisDoc.Document\ncompDef = doc.ComponentDefinition\noSketch = compDef.Sketches.Item(1) 'first sketch in file\n\n\n'____Create and write to a text file_________________\noWrite = System.IO.File.CreateText(ThisDoc.PathAndFileName(False) & \".txt\")\n\nFor Each SketchPoint In osketch.SketchPoints\n    oWrite.WriteLine(\"X=\" & sketchPoint.Geometry3d.X & vbCr & \"Y=\" & sketchPoint.Geometry3d.Y & vbCr & \"Z=\" & sketchPoint.Geometry3d.Z)\n\nNext\n'open the file\nThisDoc.Launch(ThisDoc.PathAndFileName(False) & \".txt\")\noWrite.Close()"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: CUSTOM IPART- with user Entry form\n                    ", "solution": [], "author": "Thomas_Savage"},
{"created at": [], "solution Title": "\n                        Re: physical/mass properties in idw\n                    ", "solution": ["Parameter(\"AssyMass\") = iProperties.Mass\n"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Fail to export positional representation to image\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Create a new work plane on an angle from reference - iLogic or Macro\n                    ", "solution": ["oDef = ThisDoc.Document.ComponentDefinition\nDim oWPlane As WorkPlane\nDim oAxis As WorkAxes\n\noAxis= oDef.WorkAxes\noWPlane = oDef.WorkPlanes.AddByLinePlaneAndAngle(oAxis(\"Y Axis\"), oDef.WorkPlanes(\"XY Plane\"), 45)\noWPlane.Name = \"Plane_Name\""], "author": "HPsteam"},
{"created at": [], "solution Title": "\n                        Re: Custom properties starting with \"_\" are missing within the form ed\n                    ", "solution": ["Dim", " ", "PArName", " ", "As", " ", "String", "\n\n", "oMyParameter", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "Parameters", ".", "UserParameters", "\n'Create an array with the parameter names\n    ", "ParArray", " ", "=", " ", "New", " ", "String", "()", "{", "\"", "prop1", "\"", ", ", "\"", "prop2", "\"", ",", "\"", "prop3", "\"", " ", "}\n'loop through the array values to initialize the parameters values", "For", " ", "i", "=", "0", " ", "To", " ", "UBound", "(", "ParArray", ")", " \n    ", "Try", "\n        ", "ParName", " ", "=", " ", "ParArray", "(", "i", ")", "\n        ", "PropName", " ", "=", " ", "\"", "_", "\"", " ", "&", " ", "ParName", "\n ", "'", "Change value of param", "        ", "Parameter", "(", "ParName", ")", " ", "=", " ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "PropName", ")", "\n    \n    ", "Catch", "\n        ", "'", "Create Param as it doesn't exist", "\n        ", "oParameter", "=", "oMyParameter", ".", "AddByValue", "(", "ParName", ", ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "PropName", ")", ", ", "UnitsTypeEnum", ".", "kTextUnits", ")", "\n    \n    ", "End", " ", "Try", "\n", "Next", "\n\n", "Parameter", ".", "UpdateAfterChange", " ", "=", " ", "True", "\n\n", "'", "----------------------------------------Call the form in which the parameters are used and can be modified", "\n", "iLogicForm", ".", "Show", "(", "\"", "Data form", "\"", ", ", "FormMode.Modal", ")", "\n", "'update the hidden props based on the parameters values", "\n", "For", " ", "i", "=", "0", " ", "To", " ", "UBound", "(", "ParArray", ")", " \n    ", "ParName", " ", "=", " ", "ParArray", "(", "i", ")", "\n    ", "PropName", " ", "=", " ", "\"", "_", "\"", " ", "&", " ", "ParName", "\n    ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "PropName", ")", " ", "=", " ", "Parameter", "(", "ParName", ")", "\n", "Next", "\n \n", "Parameter", ".", "UpdateAfterChange", " ", "=", " ", "True", "\n", "ThisDoc", ".", "Save", "\n\u00a0"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: VBA - Check if Mass update is required.\n                    ", "solution": ["Public Sub mass()\nDim a As Document\nSet a = ThisDocument\n\nDim StrMass1 As String\nStrMass1 = a.ComponentDefinition.MassProperties.mass\n\nDim StrMass2 As String\nStrMass2 = a.PropertySets.Item(\"Design Tracking Properties\").Item(\"Mass\").Value / 1000\n\nIf StrMass1 <> StrMass2 Then\nMsgBox StrMass1 & \" unequal \" & StrMass2 & \" And needs Update\"\nElse\nMsgBox StrMass1 & \" = \" & StrMass2 & \" and needs no Update\"\nEnd If\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Collect values of iProperties from sub components\n                    ", "solution": ["Sub Main ()\n\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n\tIf oDoc.DocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then Exit Sub\n\t \n\tDim oADO As Inventor.ComponentOccurrences = oDoc.ComponentDefinition.Occurrences\t \n\tiProperties.Value(\"Custom\", \"FORM\") = 0\n\tiProperties.Value(\"Custom\", \"PUNCH\") = 0\n\tiProperties.Value(\"Custom\", \"WELD\") = 0\n\t\n\tFor Each aDoc As Document In oDoc.AllReferencedDocuments\n\t\t\n", "\t \tForm = 0", "\n\t\t\n\t\tIf aDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n\t\t\tDim oAssmDoc As AssemblyDocument = aDoc\n\t\t\toDef = oAssmDoc.ComponentDefinition\n\t\tElseIf aDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n\t\t\tDim oPartDoc As PartDocument = aDoc\n\t\t\toDef = oPartDoc.ComponentDefinition\n\t\tEnd If\n\n\t' MyOperations = New String(){\"FORM\", \"PUNCH\", \"WELD\"}\n\t'\n\t' For Each op in MyOperations\n\t' MsgBox(op)\n\t' Next\n\n\t\tIf oDef.BOMStructure <> BOMStructureEnum.kPhantomBOMStructure \n\t      Dim Amount As Integer = oADO.AllReferencedOccurrences(aDoc).Count\n", "\t      Form = collectQuantity(aDoc,Amount,oLibraryPath)", "\n\t\tEnd If\n\t\t\n\t\tFORM_QTY = FORM_QTY + Form\n\tNext\n\t\n\tiProperties.Value(\"Custom\", \"FORM\") = FORM_QTY\n \nEnd Sub\n \nFunction collectQuantity (aDoc As Document, Amount As Integer,oLibraryPath As String) As Double\n\n\tDim oPropsets As PropertySets = aDoc.PropertySets\n\tDim oCustomPropSet As PropertySet = oPropsets.Item(\"User Defined Properties\")\n\tDim FORM As Double\n\n\tTry\n\t\tFORM =  oCustomPropSet(\"FORM\").Value * Amount\n\t\t'MsgBox(FORM)\n\tCatch\n\t\tFORM = 0\n\tEnd Try\n\n\tReturn FORM\n\nEnd Function"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Betreff: Run a calculation before update of model\n                    ", "solution": [], "author": "arminhajrovic"},
{"created at": [], "solution Title": "\n                        Re: ChamferNote.ChamferEdgeOne fails\n                    ", "solution": [], "author": "rfink"},
{"created at": [], "solution Title": "\n                        Re: How to compare two document internal name without open\n                    ", "solution": ["Public", " ", "Function", " ", "FullFileNameToGUID", "(", "ffn", " ", "As", " ", "String", ") ", "As", " ", "String", "\n\n\t", "Dim", " ", "Identifier", " ", "As", " ", "Byte", "() = ", "New", " ", "Byte", "() {}\n\t", "ThisApplication", ".", "FileManager", ".", "GetIdentifierFromFileName", "(", "ffn", ", ", "Identifier", ")\n\n\t", "Dim", " ", "guidOffset", " ", "As", " ", "Integer", " = 4\n\t\n\t", "Dim", " ", "guidAsByteList", " ", "As", " ", "New", " ", "List", "(", "Of", " ", "Byte", ") \n        ", "        ' group 1: 4 bytes\n\t", "For", " ", "i", " ", "As", " ", "Integer", " = ", "Identifier", ".", "Length", " - 1 - ", "guidOffset", " ", "To", " ", "Identifier", ".", "Length", " - 4 - ", "guidOffset", " ", "Step", " -1\n\t\t", "guidAsByteList", ".", "Insert", "(0, ", "Identifier", "(", "i", "))\n\t", "Next", "\n\t", "        ' group 2: 2 bytes\n\t", "For", " ", "i", " ", "As", " ", "Integer", " = ", "Identifier", ".", "Length", " - 4 - 1 - ", "guidOffset", " ", "To", " ", "Identifier", ".", "Length", " - 4 - 2 - ", "guidOffset", " ", "Step", " -1\n\t\t", "guidAsByteList", ".", "Insert", "(0, ", "Identifier", "(", "i", "))\n\t", "Next", "\n\t", "        ' group 3: 2 bytes\n\t", "For", " ", "i", " ", "As", " ", "Integer", " = ", "Identifier", ".", "Length", " - 6 - 1 - ", "guidOffset", " ", "To", " ", "Identifier", ".", "Length", " - 6 - 2 - ", "guidOffset", " ", "Step", " -1\n\t\t", "guidAsByteList", ".", "Insert", "(0, ", "Identifier", "(", "i", "))\n\t", "Next", "\n", "        ' group 4: 2 bytes\n\t", "For", " ", "i", " ", "As", " ", "Integer", " = ", "Identifier", ".", "Length", " - 8 - 1 - ", "guidOffset", " ", "To", " ", "Identifier", ".", "Length", " - 8 - 2 - ", "guidOffset", "  ", "Step", " -1\n\t\t", "guidAsByteList", ".", "Insert", "(0, ", "Identifier", "(", "i", "))\n\t", "Next", " \n", "        ' group 5: 6 bytes\n\t", "For", " ", "i", " ", "As", " ", "Integer", " = ", "Identifier", ".", "Length", " - 10 - 1 - ", "guidOffset", " ", "To", " ", "Identifier", ".", "Length", " - 10 - 6 - ", "guidOffset", " ", "Step", " -1\n\t\t", "guidAsByteList", ".", "Insert", "(0, ", "Identifier", "(", "i", "))\n\t", "Next", " \n\t\n\t", "Dim", " ", "guid", " ", "As", " ", "New", " ", "Guid", "(", "guidAsByteList", ".", "ToArray", ")\n\t\n\t", "Return", " ", "guid", ".", "ToString", ".", "ToUpper", "\n\n", "End", " ", "Function"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Assembly Drawing title block material N/A\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Create Hole on Workpoint\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Modify Tapinfo for Hole features\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: iLogic and different language\n                    ", "solution": [], "author": "Jon.Balgley"},
{"created at": [], "solution Title": "\n                        Re: Renaming Browse Nodes Sequentially\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "AssemblyDocument", "\n", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "'", " Get the model browser", "\n", "Dim", " ", "oPane", " ", "As", " ", "BrowserPane", "\n", "oPane", " ", "=", " ", "oDoc", ".", "BrowserPanes", ".", "Item", "(", "\"", "Model", "\"", ")", "\n\n", "'", " Get the occurrence of the object", "\n", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", "\n\n\n", "i", " ", "=", " ", "0", "\n", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "oDoc", ".", "ComponentDefinition", ".", "Occurrences", "\n", "Dim", " ", "oNode", " ", "As", " ", "BrowserNode", "\n", "oNode", " ", "=", " ", "oPane", ".", "GetBrowserNodeFromObject", "(", "oOcc", ")", "\n", "'", "reset name", "\n", "If", " ", "Left", "(", "oNode", ".", "NativeObject", ".", "Name", ",", "9", " ", ")", " ", "=", " ", "\"", "LAG Screw", "\"", " ", "Then", "\n", "i", " ", "=", " ", "i", " ", "+", " ", "1", "\n", "MessageBox", ".", "Show", "(", " ", "oNode", ".", "NativeObject", ".", "Name", ", ", "\"\"", ")", "\n", "'", "oNode.NativeObject.Name = \"\"", "\n", "oNode", ".", "NativeObject", ".", "Name", " ", "=", "  ", "\"", "LAG Screw", "\"", " ", "+", " ", "\"", ":", "\"", " ", "+", " ", "CStr", "(", "i", ")", "\n", "End", " ", "If", "\n", "Next"], "author": "crojasNB2ET"},
{"created at": [], "solution Title": "\n                        Re: Detecting Inventor mirror from event\n                    ", "solution": [], "author": "zadazLWJJ4"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2018 Annotate Centerlines\n                    ", "solution": [], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: Replace only the active components\n                    ", "solution": [], "author": "janos.buczko"},
{"created at": [], "solution Title": "\n                        Re: Setting position of a global form through ilogic\n                    ", "solution": [], "author": "t_hascj"},
{"created at": [], "solution Title": "\n                        Re: Dim As Document or As PartDocument ??\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Object Visibility of sketches API\n                    ", "solution": ["Sub ChangeViz()\n\nDim oDoc As Document\nSet oDoc = ThisApplication.ActiveDocument\n\noDoc.ObjectVisibility.Sketches = False\n\n\nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Export to DWG with iLogic makes DWF\n                    ", "solution": [], "author": "robert.vdrijst"},
{"created at": [], "solution Title": "\n                        Re: PDF I logic problems after 2018 upgrade\n                    ", "solution": [" Public Sub Main()\n\tDim doc as DrawingDocument\n\t' Is this a drawing document?\n\tTry\n\t\tdoc = ThisApplication.ActiveDocument\n\tCatch\n\t\tIf Not ThisApplication.ActiveDocument.DocumentType = kDrawingDocumentObject Then\n\t\t\tMessageBox.Show(\"This command is only used on drawing documents\", _\n\t\t\t\t\t\t\t\t\t\t\t\"Harmony Enterprises Automation\", _\n\t\t\t\t\t\t\t\t\t\t\tMessageBoxButtons.OK, _\n\t\t\t\t\t\t\t\t\t\t\tMessageBoxIcon.Exclamation)\n\t\t\tExit Sub\n\t\tEnd If\n\tEnd Try\n\t\n\t'Set all variables and build paths\n \tiLogicVb.RunExternalRule(\"SharedVars\")\n\tiLogicVb.RunExternalRule(\"PathBuilder\")\n\t\n\t' hook the PDF export add-in\n \toPDFAddIn = ThisApplication.ApplicationAddIns.ItemById (\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\toDocument = ThisApplication.ActiveDocument\n\toContext = ThisApplication.TransientObjects.CreateTranslationContext\n\toContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n\toOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\toDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n\t'If oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then 'old\n \t", "If oPDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then 'new", "\n\toOptions.Value(\"All_Color_AS_Black\") = 0\n\toOptions.Value(\"Remove_Line_Weights\") = 0\n\toOptions.Value(\"Vector_Resolution\") = 400\n\toOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\n\tEnd If\n\n\t'get PDF target folder path\n\tDim targetFile As String = SharedVariable(\"fullpdfPath\")\n\tIf System.IO.File.Exists(targetFile) Then\n\t\tbooleanParam = InputRadioBox(\"WARNING!\", \"Overwrite Existing File...\", \"Cancel Command\", False, Title := \"Harmony Automation\")\n\t\tIf booleanParam = False then Exit Sub\n\tEnd If\n\t\n\t 'Set the PDF target file name\n\toDataMedium.FileName = targetFile\n\n\t'Save the file\n\toPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n\t\n\t'Was the file created?\n\tDim argMap As NameValueMap\n\targMap = ThisApplication.TransientObjects.CreateNameValueMap()\n\targMap.Add(\"checkFile\", targetFile)\n\tiLogicVb.RunExternalRule(\"file_Validation\",argMap)\n End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Lofting 2 Profiles (2D Sketches) with 1 Centerline (3D Sketch)\n                    ", "solution": ["Sub CenterLineLoftCreation()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n\n    Dim oComp As PartComponentDefinition\n    Set oComp = oDoc.ComponentDefinition\n\n    Dim oSections As ObjectCollection\n    Set oSections = ThisApplication.TransientObjects.CreateObjectCollection\n\n    oSections.Add oComp.Sketches(1).Profiles.AddForSolid\n    oSections.Add oComp.Sketches(2).Profiles.AddForSolid\n\n    Dim oDef As LoftDefinition\n    Set oDef = oComp.Features.LoftFeatures.CreateLoftDefinition(oSections, kJoinOperation)\n\n    oDef.Centerline = oComp.Sketches3D.Item(1).Profiles3D.AddOpen\n\n    Dim oLoft As LoftFeature\n    Set oLoft = oComp.Features.LoftFeatures.Add(oDef)\n\nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: DWGAddIn translator export options\n                    ", "solution": [], "author": "Frederick.Law"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule not updating parameter\n                    ", "solution": ["Parameter", ".", "Param", "(", "\"", "p", "\"", ")", ".", "Value", "Sub", " ", "Main", "()", "\n        \n    ", "'", "Display current value for params", "\n    ", "MessageBox", ".", "Show", "(", "\"", "MatGroupA :", "\"", " ", "&", " ", "ringMatGroupA", " ", "&", " ", "vbCr", " ", "&", " ", "\"", "MatGroupb :", "\"", " ", "&", " ", "ringMatGroupB", ", ", "\"", "Showing Param vals before", "\"", ")", "\n    \n    ", "Dim", " ", "p", " ", "As", " ", "Single", " ", "=", " ", "ringMatGroupA", " ", "+", " ", "1", "\n        \n    ", "MessageBox", ".", "Show", "(", "p", ", ", "\"", "Title", "\"", ")", "\n\n    ", "'", "retrieve mat group from RuleB", "\n    ", "Dim", " ", "map", " ", "As", " ", "Inventor", ".", "NameValueMap", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "()", "\n    ", "map", ".", "Add", "(", "\"", "Arg2", "\"", ", ", "\"", "new", "\"", ")", "\n    \n    ", "iLogicVb", ".", "RunRule", "(", "\"", "RuleB", "\"", ", ", "map", ")", "\n    \n    ", "'", "Display value after getMatGroup rule. Should be the same value if success", "\n    ", "MessageBox", ".", "Show", "(", "\"", "MatGroupA :", "\"", " ", "&", " ", "Parameter", "(", "\"", "ringMatGroupA", "\"", ")", " ", "&", " ", "vbCr", " ", "&", " ", "\"", "MatGroupb :", "\"", " ", "&", " ", "Parameter", "(", "\"", "ringMatGroupB", "\"", ")", " , ", "\"", "Showing Param vals after getmatGroup rule", "\"", ")", "\n\n    ", "If", " ", "p", " ", "=", " ", "Parameter", "(", "\"", "ringMatGroupA", "\"", ")", "\n    \n        ", "MessageBox", ".", "Show", "(", "\"", "Success: ", "\"", " ", "&", " ", "Parameter", "(", "\"", "ringMatGroupA", "\"", ")", " , ", "\"", "Success", "\"", ")", "\n        \n        ", "Else", "\n        \n        ", "MessageBox", ".", "Show", "(", "\"", "Failed: ", "\"", " ", "&", " ", "Parameter", "(", "\"", "ringMatGroupA", "\"", ")", " , ", "\"", "Failed", "\"", ")", "\n        \n    ", "End", " ", "If", "\n    \n    ", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n    ", "Parameter", ".", "UpdateAfterChange", " ", "=", " ", "True", "\n    ", "RuleParametersOutput", "()", "\n    ", "InventorVb", ".", "DocumentUpdate", "()", "\n    \n", "End Sub", "    ", "    ", "Sub", " ", "Main", "()", "\n\n        ", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n        ", "Parameter", ".", "UpdateAfterChange", " ", "=", " ", "True", "\n        ", "Dim", " ", "arg1Value", " ", "As", " ", "String", "\n        ", "arg1Value", " ", "=", " ", "RuleArguments", "(", "\"", "Arg2", "\"", ")", "\n\n                \n        ", "If", " ", "arg1Value", " ", "=", " ", "\"", "new", "\"", " ", "Then", " ", "'", "get matgroup codes based on Material rather than part number", "\n                    \n                ", "ringMatGroupA", "  ", "=", " ", "ringMatGroupA", " ", "+", " ", "1", "\n                                \n                ", "ringMatGroupB", "  ", "=", " ", "ringMatGroupB", " ", "+", " ", "1", "\n                \n                ", "MessageBox", ".", "Show", "(", "\"", "MatGroupA :", "\"", " ", "&", " ", "ringMatGroupA", " ", "&", " ", "vbCr", " ", "&", " ", "\"", "MatGroupb :", "\"", " ", "&", " ", "ringMatGroupB", ", ", "\"", "Matgroups", "\"", ")", "\n                                \n            \n        ", "End", " ", "If", "\n        \n        ", "RuleParametersOutput", "()", "\n        ", "InventorVb", ".", "DocumentUpdate", "()", "\n", "End Sub"], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: Printing Hard Copies - Portrait and Landscape\n                    ", "solution": ["Dim oDrawDoc As Document\noDrawDoc = ThisApplication.ActiveDocument\n \n \nDim oPrintMgr As PrintManager\noPrintMgr = oDrawDoc.PrintManager\noPrintMgr.Printer = \"Your Printer Name\"\noPrintMgr.ScaleMode = kPrintBestFitScale\noPrintMgr.ColorMode = kPrintDefaultColorMode\noPrintMgr.Orientation = kPortraitOrientation'kLandscapeOrientation\noprintmgr.Rotate90Degrees = False\noPrintMgr.PaperSize = SizeActiveSheet\noPrintMgr.SubmitPrint"], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: Is there a limit to how many changes you can wrap in a single Global Transac\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Supression of Rules\n                    ", "solution": ["'suppressing TypeMast", "auto", " ", "=", " ", "iLogicVb", ".", "Automation", "\n", "auto", ".", "GetRule", "(", "ThisDoc", ".", "Document", ", ", "\"", "TypeMast", "\"", ")", ".", "IsActive", " ", "=", " ", "False", "'activating all features", "Dim FeaturesArray As New ArrayList", "FeaturesArray.add(\"Feature 1\")", "FeaturesArray.add(\"Feature 2\")", "FeaturesArray.add(\"Feature etc.\")", "Dim oString As Object", "i = 0", "For Each oString In FeaturesArray", "Feature.IsActive(oString) = True", "i = i + 1", "Next"], "author": "tdant"},
{"created at": [], "solution Title": "\n                        Re: Search and Replace Rule Text from Other Rule\n                    ", "solution": ["'", "Name of Rule: Search_and_Replace_iLogic", "'", "To Change", "oRule", " ", "=", " ", "\"", "Different Angle", "\"", "oSearch", " ", "=", " ", "\"", "83.5", "\"", "oReplace", " ", "=", " ", "\"", "83", "\"", "'", "Returns index where found, or -1 if not found", "If", " ", "iLogicVb", ".", "Automation", ".", "GetRule", "(", "ThisDoc", ".", "Document", ", ", "oRule", ")", ".", "text", ".", "IndexOf", "(", "oSearch", ")", " ", ">", " ", "-", "1", " ", "Then", "iLogicVb", ".", "Automation", ".", "GetRule", "(", "ThisDoc", ".", "Document", ", ", "oRule", ")", ".", "text", " ", "=", " ", "iLogicVb", ".", "Automation", ".", "GetRule", "(", "ThisDoc", ".", "Document", ", ", "oRule", ")", ".", "text", ".", "Replace", "(", "oSearch", ", ", "oReplace", ")", "End", " ", "If"], "author": "m.degroot28HL9"},
{"created at": [], "solution Title": "\n                        Re: iLogic save and replace component\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: ThisDoc.Document.SaveAs not working as expected\n                    ", "solution": ["OldFileName", " ", "=", " ", "ThisDoc", ".", "FileName", "(", "True", ")", " ", "'", "with extension", "\n", "PartNumber", " ", "=", " ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", " ", "'", "Get \"PartNumber\" from iProperties", "\n", "PartName", " ", "=", " ", "iProperties", ".", "Value", "(", "\"", "Summary", "\"", ", ", "\"", "Title", "\"", ")", " ", "'", "Get \"Title\" from iProperties", "\n", "FilePath", " ", "=", " ", "ThisDoc", ".", "Path", " ", "& \"\\\"", " ", "'", "Get the path of document", "\n\n", "If", " ", "PartNumber", " ", "=", " ", "\"\"", " ", "And", " ", "PartName", " ", "=", " ", "\"\"", " ", "Then", " ", "'", "Check \"PartNumber\" and \"Title\" for content", "\n    ", "Return", "\n", "Else", "\n    ", "NewFileName", " ", "=", " ", "PartNumber", " ", "&", " ", "\"", "_", "\"", " ", "&", " ", "PartName", " ", "&", " ", "\"", ".ipt", "\"", " ", "'", "Generate new file name", "\n\n    ", "If", " ", "NewFileName", " ", "<>", " ", "OldFileName", " ", "Then", " ", "'", "Check file name for changes", "\n        ", "ThisDoc", ".", "Document", ".", "SaveAs", "(", "FilePath", " ", "&", " ", "NewFileName", ", ", "False", ")", " ", "'", "SaveAs with new file name", "\n    ", "End", " ", "If", "\n\n", "End", " ", "If", "\n"], "author": "akAMYTB"},
{"created at": [], "solution Title": "\n                        Re: iLogic to renumber partlist in assembly\n                    ", "solution": ["' Set a reference to the assembly document.", "\n    ", "' This assumes an assembly document is active.", "\n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n\n    Dim FirstLevelOnly As Boolean\n    If MsgBox(\"First level only?\", vbYesNo) = vbYes Then\n        FirstLevelOnly = True\n    Else\n        FirstLevelOnly = False\n    End If\n    \n    ", "' Set a reference to the BOM", "\n    Dim oBOM As BOM\n    oBOM = oDoc.ComponentDefinition.BOM\n    \n    ", "' Set whether first level only or all levels.", "\n    If FirstLevelOnly Then\n        oBOM.StructuredViewFirstLevelOnly = True\n    Else\n        oBOM.StructuredViewFirstLevelOnly = False\n    End If\n    \n    ", "' Make sure that the structured view is enabled.", "\n    oBOM.StructuredViewEnabled = True\n    \n    ", "'Set a reference to the \"Structured\" BOMView", "\n    Dim oBOMView As BOMView\n     oBOMView = oBOM.BOMViews.Item(\"Structured\")", "\n"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: ilogic code iges\n                    ", "solution": ["Imports SysIO = System.IO\nSub Main()\n'See if there are any open views\nIf (ThisApplication.Views.Count > 0) Then\n' Get the IGES translator Add-In.\nDim oIGESTranslator As TranslatorAddIn\noIGESTranslator = ThisApplication.ApplicationAddIns.ItemById(\"{90AF7F44-0C01-11D5-8E83-0010B541CD80}\")\nDim oContext As TranslationContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = kFileBrowseIOMechanism\n' Create a NameValueMap object\nDim oOptions As NameValueMap = ThisApplication.TransientObjects.CreateNameValueMap\n' Create a DataMedium object\nDim oDataMedium As DataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n'Go through each view and save if it's a drawing document\nFor Each view As View In ThisApplication.Views\nIf view.Document.DocumentType = kPartDocumentObject Then\n'Get the directory file is saved in. Can replace this with specific directory\nDim IGESDir = \"C:\\IGES\\\"\n'Get name Of file without the extension And add _acad2k To it.\noDataMedium.MediumType = kFileNameMedium\n\noDataMedium.FileName = IGESDir & _\n SysIO.Path.GetFileNameWithoutExtension(view.Document.FullFileName) & _\n \" - Rev. \" & \".igs\"\n\n' Check whether the translator has 'SaveCopyAs' options\nIf oIGESTranslator.HasSaveCopyAsOptions(ThisApplication.ActiveDocument, oContext, oOptions) Then\n   ' Set geometry type for wireframe.\n   ' 0 = Surfaces, 1 = Solids, 2 = Wireframe\n   oOptions.Value(\"GeometryType\") = 1\n   ' To set other translator values:\n   ' oOptions.Value(\"SolidFaceType\") = n\n   ' 0 = NURBS, 1 = Analytic\n   ' oOptions.Value(\"SurfaceType\") = n\n   ' 0 = 143(Bounded), 1 = 144(Trimmed)\n\n'Use Export To IGES to save drawing configuration and set here\n'Dim strIniFile As String = \"C:\\IGES\\Format2000DONOTDELETE.ini\"\n' Create the name-value that specifies the ini file to use.\n'oOptions.Value(\"Export_Acad_IniFile\") = strIniFile\n'Save File\nCall oIGESTranslator.SaveCopyAs(view.Document, oContext, oOptions, oDataMedium)\nEnd If\nEnd If\nNext\nEnd If\nEnd Sub"], "author": "JamieS"},
{"created at": [], "solution Title": "\n                        Re: Inventor assembly matches orientation of actual mechanism using encoder feed\n                    ", "solution": [], "author": "hbelch"},
{"created at": [], "solution Title": "\n                        Re: Ilogic appearance color to drawing with hatch\n                    ", "solution": [], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Detect Lofted Flange Present and Execute Code\n                    ", "solution": ["Dim", " ", "doc", " = ", "ThisDoc", ".", "Document", "\n", "If", "  ", "doc", ".", "componentdefinition", ".", "type", " = ", "ObjectTypeEnum", ".", "kSheetMetalComponentDefinitionObject", " ", "Then", " \n\t", "Dim", " ", "oSMCD", " ", "As", " ", "SheetMetalComponentDefinition", " \n\t", "oSMCD", " = ", "doc", ".", "componentdefinition", "\n\t", "Dim", " ", "oFeats", " ", "As", " ", "LoftedFlangeFeatures", " \n\t", "oFeats", " = ", "oSMCD", ".", "Features", ".", "Loftedflangefeatures", "\n\t\n\t", "If", " ", "oFeats", ".", "Count", " > 0 ", "Then", " \n\t\t", "MsgBox", "(", "\"There is Flange existing in this doc\"", " & ", "oFeats", ".", "Count", ".", "ToString", "())\n\t", "Else", "\n\t\t", "MsgBox", "(", "\"No Flange exists in this doc\"", ")\n\t", "End", " ", "If", " \n\t", "Dim", " ", "oFeat", " ", "As", " ", "LoftedFlangeFeature", " \n\t", "For", " ", "Each", " ", "oFeat", " ", "In", " ", "oFeats", "\n\t\t", "oFeat", ".", "delete", "\n\t", "Next", "\n", "End", " ", "If", " "], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Expanding the Origin of a Selected Component in Browser\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic- assembly rule - part numbers update after design copy.\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Is It Possible To Batch Run A Single Add-In On Multiple Assembly Models?\n                    ", "solution": ["Dim", " fi ", "As", " List", "(", "Of FileInfo", ")", " ", "=", " ", "New", " List", "(", "Of FileInfo", ")", "\n", "For", " ", "Each", " File ", "In", " FileLocation", ".", "GetFiles", "()", "\n    ", "If", " ", "(", "File IsNot ", "Nothing", ")", " ", "Then", "\n        ", "If", " ", "(", "Path", ".", "GetExtension", "(", "File", ".", "ToString", ".", "ToLower", ")", " ", "=", " ", "\".iam\"", ")", " ", "Then", "\n            ", "If", " ", "(", "File", ".", "ToString", ".", "ToLower", ".", "Contains", "(", "\"data\"", "))", " ", "Then", " fi", ".", "Add", "(", "File", ")", "\n        ", "End", " ", "If", "\n    ", "End", " ", "If", "\n", "Next", "' You can switch the document visibility on / off by switching the False to True etc.", "Dim oDoc As AssemblyDocument = ThisApplication.Documents.Open(\"Filename Here\",False)"], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: iLogic Updates Incorrectly\n                    ", "solution": ["'", "determine hub type availability", "\n", "If", " ", "HubType", " ", "<>", " ", "\"", "A", "\"", "\n    ", "oHubWidth", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "HubType", " ", "&", " ", "\"", "LTB", "\"", ")", "\n", "End", " ", "If", "\n", "While", " ", "oHubWidth", " ", "=", " ", "0", " ", "And", " ", "HubType", " ", "<>", " ", "\"", "A", "\"", "\n", "HubType", " ", "=", " ", "InputListBox", "(", "\"", "Hub type unavailable. Please select another from the options above.", "\"", ", ", "MultiValue", ".", "List", "(", "\"", "HubType", "\"", ")", ", ", "\"", "A", "\"", ", ", "Title", " :", "=", " ", "\"", "Hub Type Unavailable", "\"", ", ", "ListName", " :", "=", " ", "\"", "Hub Types", "\"", ")", "\n", "oHubWidth", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "HubType", " ", "&", " ", "\"", "LTB", "\"", ")", "\n", "InventorVb", ".", "DocumentUpdate", "()", "\n", "End", " ", "While"], "author": "tdant"},
{"created at": [], "solution Title": "\n                        Re: Modifying sub-assembly in main assembly using forms\n                    ", "solution": [], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: File Dialog Operation for saving PDF Print\n                    ", "solution": [], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: iLogic Auto Sort on Update check box\n                    ", "solution": ["On", " ", "Error", " ", "Resume", " ", "Next", "\n\n", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oPartsList1", " ", "As", " ", "PartsList", "\n", "Dim", " ", "oPartsList2", " ", "As", " ", "PartsList", "\n", "Dim", " ", "oPartsList3", " ", "As", " ", "PartsList", "\n", "Dim", " ", "oPartsList4", " ", "As", " ", "PartsList", "\n\n", "oPartsList1", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", "\n", "oPartsList1", ".", "Sort2", "(", "\"", "VENDOR", "\"", ",", "1", ",", "\"", "DESCRIPTION", "\"", ",", "1", ",", "\"", "SIZE", "\"", ",", "1", ",", "AutoSortOnUpdate", ",", "True", ")", "\n", "oPartsList1", ".", "Renumber", "\n", "oPartsList1", ".", "SaveItemOverridesToBOM", "\n", "oPartsList2", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", ".", "PartsLists", ".", "Item", "(", "2", ")", "\n", "oPartsList2", ".", "Sort2", "(", "\"", "VENDOR", "\"", ",", "1", ",", "\"", "DESCRIPTION", "\"", ",", "1", ",", "\"", "SIZE", "\"", ",", "1", ",", "AutoSortOnUpdate", ",", "True", ")", "\n", "oPartsList2", ".", "Renumber", "\n", "oPartsList2", ".", "SaveItemOverridesToBOM", "\n", "oPartsList3", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", ".", "PartsLists", ".", "Item", "(", "3", ")", "\n", "oPartsList3", ".", "Sort2", "(", "\"", "VENDOR", "\"", ",", "1", ",", "\"", "DESCRIPTION", "\"", ",", "1", ",", "\"", "SIZE", "\"", ",", "1", ",", "AutoSortOnUpdate", ",", "True", ")", "\n", "oPartsList3", ".", "Renumber", "\n", "oPartsList3", ".", "SaveItemOverridesToBOM", "\n", "oPartsList4", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", ".", "PartsLists", ".", "Item", "(", "4", ")", "\n", "oPartsList4", ".", "Sort2", "(", "\"", "VENDOR", "\"", ",", "1", ",", "\"", "DESCRIPTION", "\"", ",", "1", ",", "\"", "SIZE", "\"", ",", "1", ",", "AutoSortOnUpdate", ",", "True", ")", "\n", "oPartsList4", ".", "Renumber", "\n", "oPartsList4", ".", "SaveItemOverridesToBOM"], "author": "nbroughton"},
{"created at": [], "solution Title": "\n                        Re: Change Color of SolidBody\n                    ", "solution": ["Dim oDoc As PartDocument = ThisDoc.Document \noDef = oDoc.ComponentDefinition\n\n'define appearance library by name\nDim assetLib As AssetLibrary\nassetLib = ThisApplication.AssetLibraries.Item(\"Autodesk Appearance Library\")\n\nsColor1 = \"Red\"\nsColor2 = \"Cyan\"\n\n'define colors to work with\nDim libAsset1 As Asset\nlibAsset1 = assetLib.AppearanceAssets.Item(sColor1) \n\nDim libAsset2 As Asset\nlibAsset2 = assetLib.AppearanceAssets.Item(sColor2)\n\n' try to Copy the asset locally.\nTry\n\tlocalAsset1 = libAsset1.CopyTo(oDoc)\nCatch\n'assume error means it's already local\n\tlocalAsset1 = oDoc.Assets(sColor1)\nEnd Try\n\n' try to Copy the asset locally.\nTry\n\tlocalAsset2 = libAsset1.CopyTo(oDoc)\nCatch\n'assume error means it's already local\n\tlocalAsset2 = oDoc.Assets(sColor2)\nEnd Try\n\n' change specific body to specific color \nDim oSB1 As SurfaceBody\noSB1 = oDef.SurfaceBodies(1)\noSB1.Appearance = localAsset1 'red\n\nDim oSB2 As SurfaceBody\noSB2 = oDef.SurfaceBodies(2)\noSB2.Appearance = localAsset2 'cyan", "Dim oDoc As PartDocument = ThisDoc.Document \noDef = oDoc.ComponentDefinition\n\n'define appearance library by name\nDim assetLib As AssetLibrary\nassetLib = ThisApplication.AssetLibraries.Item(\"Autodesk Appearance Library\")\n\nsColor1 = \"Red\"\n\n'define colors to work with\nDim libAsset1 As Asset\nlibAsset1 = assetLib.AppearanceAssets.Item(sColor1) \n\n' try to Copy the asset locally.\nTry\n\tlocalAsset1 = libAsset1.CopyTo(oDoc)\nCatch\n'assume error means it's already local\n\tlocalAsset1 = oDoc.Assets(sColor1)\nEnd Try\n\n' set all solid bodies to the color\nDim oSB As SurfaceBody\nFor Each oSB In oDef.SurfaceBodies\n\t\toSB.Appearance = localAsset1\nNext\n\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: VBA Plugin doesn't work\n                    ", "solution": [], "author": "jens.bejer.pede"},
{"created at": [], "solution Title": "\n                        Re: Place specific inventor file in assembly\n                    ", "solution": ["' set a reference to the assembly component definintion.' This assumes an assembly document is open.\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n' Set a reference to the transient geometry object.\nDim oTG As TransientGeometry\noTG = ThisApplication.TransientGeometry\n    \n' Create a matrix.  \nDim oMatrix As Matrix\noMatrix = oTG.CreateMatrix\n\n'place an instance of the component \nDim oOccurrence As ComponentOccurrence\noOccurrence = oAsmCompDef.Occurrences.Add", "(\"Path of specific file\",", " ", "oMatrix) \n' Set the translation portion of the matrix so the part will be 'positioned at the co-ordinates\noMatrix.SetTranslation(oTG.CreateVector(0, 0, 0)) \n\n'check for grounded component, such as the first component in the assembly\nIf oOccurrence.Grounded = True Then\n    oGrounded = MessageBox.Show(\"Should this component be grounded?\", _\n    \"iLogic\",MessageBoxButtons.YesNo)\n    If oGrounded = vbNo Then\n    oOccurrence.Grounded = False\n    Else \n    End If\nEnd If\n\n'Get the plane from the selected part.' The work plane obtained is in the context of the part, not the assembly.\nDim oPartPlane1 As WorkPlane\nDim oPartPlane2 As WorkPlane\nDim oPartPlane3 As WorkPlane\n oPartPlane1 =  oOccurrence.Definition.WorkPlanes.Item(\"YZ Plane\") 'Component YZ Plane\n oPartPlane2 =  oOccurrence.Definition.WorkPlanes.Item(\"XZ Plane\") 'Component XZ Plane\n oPartPlane3 =  oOccurrence.Definition.WorkPlanes.Item(\"XY Plane\") 'Component XY Plane\n oPartPlane4 =  oOccurrence.Definition.WorkPlanes.Item(\"XY Plane\") 'Component XY Plane\n 'Get the plane from the assembly\nDim oAsmPlane1 As WorkPlane\nDim oAsmPlane2 As WorkPlane\nDim oAsmPlane3 As WorkPlane\n oAsmPlane1 = oAsmCompDef.WorkPlanes.Item(\"YZ Plane\") 'Assembly YZ Plane\n oAsmPlane2 = oAsmCompDef.WorkPlanes.Item(\"XZ Plane\") 'Assembly XZ Plane\n oAsmPlane3 = oAsmCompDef.WorkPlanes.Item(\"XY Plane\") 'Assembly XY Plane' Create proxies for the work planes of the part.' The proxies represent the part work planes in the context of the assembly.\nDim oAsmPlane4 As WorkPlaneProxy\nDim oAsmPlane5 As WorkPlaneProxy\nDim oAsmPlane6 As WorkPlaneProxy\noOccurrence.CreateGeometryProxy(oPartPlane1, oAsmPlane4)\noOccurrence.CreateGeometryProxy(oPartPlane2, oAsmPlane5)\noOccurrence.CreateGeometryProxy(oPartPlane3, oAsmPlane6)\noOccurrence.CreateGeometryProxy(oPartPlane4, oAsmPlane7)\n' Create the constraint using the part work plane proxies.\n\noConstraint = oAsmCompDef.Constraints.AddFlushConstraint(oAsmPlane1, oAsmPlane4, 0)\noConstraint = oAsmCompDef.Constraints.AddFlushConstraint(oAsmPlane2, oAsmPlane5, 0)\noConstraint = oAsmCompDef.Constraints.AddFlushConstraint(oAsmPlane3, oAsmPlane6, 0)\n'oConstraint = oAsmCompDef.Constraints.AddFlushConstraint(oAsmPlane3, oAsmPlane7, 0)'zoom all\nThisApplication.ActiveView.Fit\noDoc = ThisDoc.Document\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Converting VBA script into Python (+comtypes) script\n                    ", "solution": ["# -*- coding: utf-8 -*-\n\n'''\nCreated on 07.11.2017\n\n@author: Thomas Pietrowski\n@api: http://help.autodesk.com/view/INVNTOR/2018/ENU/?guid=GUID-AA811AF0-2494-4574-8C43-4C22E608252F\n'''\n\nimport os\n\nimport ctypes\n\nimport win32com\nwin32com.__gen_path__ = os.path.join(os.path.split(__file__)[0], \"gen_dir\") \n\nimport win32com.client\nimport pythoncom\n\n\n#ThisApplication = win32com.client.gencache.EnsureDispatch(\"Inventor.Application\")\ntry:\n    ThisApplication = win32com.client.GetActiveObject(\"Inventor.Application\")\nexcept:\n    ThisApplication = win32com.client.Dispatch(\"Inventor.Application\")\n    #ThisApplication.Visible=True\n\n#foreign_filename = \".\\\\test_cube.ipt\"\nforeign_filename = \".\\\\test_cube.iam\"\n\n#Document = ThisApplication.ActiveDocument\n\n# Open files\nopen_documents = []\nif ThisApplication.Documents.Count:\n    for i in range(ThisApplication.Documents.Count):\n        open_document = ThisApplication.Documents.Item(i+1)\n        print(open_document.FullFileName)\n        open_documents.append(open_document)\n\nif foreign_filename not in open_documents:\n    document = ThisApplication.Documents.Open(foreign_filename)\n    document_opened = True\nelse:\n    document_opened = False\n\n\nSTLTranslatorAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{533E9A98-FC3B-11D4-8E7E-0010B541CD80}\")\nContext = ThisApplication.TransientObjects.CreateTranslationContext()\nOptions = ThisApplication.TransientObjects.CreateNameValueMap()\n#    Save Copy As Options:\n#       Name Value Map:\n#               ExportUnits = 4\n#               Resolution = 1\n#               AllowMoveMeshNode = False\n#               SurfaceDeviation = 60\n#               NormalDeviation = 14\n#               MaxEdgeLength = 100\n#               AspectRatio = 40\n#               ExportFileStructure = 0\n#               OutputFileType = 0\n#               ExportColor = True\n\nif STLTranslatorAddIn.HasSaveCopyAsOptions(document, Context, Options):\n    # Set accuracy.\n    #   2 = High,  1 = Medium,  0 = Low\n    # was 4\n    \n    # http://help.autodesk.com/view/INVNTOR/2018/ENU/?guid=GUID-5FDFF606-1D15-4FA0-9ED1-1BF4A3BCEBF8\n    Options.Remove(\"Resolution\")\n    Options.Insert(\"Resolution\", 2)\n    \n    # Set output file type:\n    #   0 - binary,  1 - ASCII\n    Options.Remove(\"OutputFileType\")\n    Options.Insert(\"OutputFileType\", 1)\n\n    # IOMechanismEnum Enumerator - http://help.autodesk.com/view/INVNTOR/2018/ENU/?guid=GUID-A3660CD6-8B11-48CE-9FA5-E51DCC6F8DEB\n    Context.Type = 13059 #kFileBrowseIOMechanism\n\n    Data = ThisApplication.TransientObjects.CreateDataMedium()\n    filedir, filename = os.path.split(foreign_filename)\n    # if \".\" in filename\n    real_filename = os.path.splitext(filename)[0]\n    stl_filename = real_filename + \".stl\"\n    stl_fullpath = os.path.join(filedir, stl_filename)\n    Data.FileName = stl_fullpath\n    print(\"saved as: {}\".format(stl_fullpath))\n\n    STLTranslatorAddIn.SaveCopyAs(document, Context, Options, Data)\n\nif document_opened:\n    document.Close(True)"], "author": "thopiekar"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Change sheet metal styles from an assembly for selected parts.\n                    ", "solution": ["Dim oDoc As AssemblyDocument\noDoc = ThisApplication.ActiveDocument\n\nDim oDef As AssemblyComponentDefinition\noDef = oDoc.ComponentDefinition\n\nDim oSheetDef As SheetMetalComponentDefinition\nDim oStyle As SheetMetalStyle\n\nFor Each occ As ComponentOccurrence In oDef.Occurrences.AllLeafOccurrences\n    If occ.Definition.Document.DisPlayName = \"999-1.ipt\" AndAlso platte_selected = \"4 mm\" Then\n        oSheetDef = occ.Definition\n        For Each oStyle In oSheetDef.SheetMetalStyles\n            If oStyle.Name = \"_4 mm S355MC\" Then\n                oStyle.Activate()\n            End If\n        Next\n    ElseIf occ.Definition.Document.DisplayName = \"999-2.ipt\" AndAlso platte_selected = \"5 mm\" Then\n        oSheetDef = occ.Definition\n        For Each oStyle In oSheetDef.SheetMetalStyles\n            If oStyle.Name = \"_5 mm S355MC\" Then\n                oStyle.Activate()\n            End If\n        Next\n    ElseIf occ.Definition.Document.DisplayName = \"999-3.ipt\" AndAlso platte_selected = \"6 mm\" Then\n        oSheetDef = occ.Definition\n        For Each oStyle In oSheetDef.SheetMetalStyles\n            If oStyle.Name = \"_6 mm S355MC\" Then\n                oStyle.Activate()\n            End If\n        Next\n    End If\nNext"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: update BOMRows during iLogic rule runtime\n                    ", "solution": ["Class BomCouplers\n\t' Doc Parameters\n\tShared Dim modelDoc As AssemblyDocument\n\tShared Dim MainAsmFilename As String\t\n\tShared Dim asmCompDef As AssemblyComponentDefinition\n\tShared Dim UoM As UnitsOfMeasure\n\tShared Dim BedCompOccS As ComponentOccurrences\n\t\n\tShared Dim oBOM As BOM\n\tShared Dim oBOMRowS As BOMRowsEnumerator\n\n\tShared Dim keyVirtCoupler As String\t= \"VirtCoupler\"\n\tShared Dim CoupCounts As New Dictionary(Of String, Integer)\n\tShared Dim keyVirtEndCap As String = \"Virtual End Cap\"\n\t\n\tSub Main()\n\t\t'[ SETUP\n\t\tmodelDoc = ThisDoc.Document\n\t\tMainAsmFilename = IO.Path.GetFileName(modelDoc.FullFileName)\t''Assembly Filename\n\t\t\n\t\t''Assembly references\n\t\tUoM = modelDoc.UnitsOfMeasure\n\t\tasmCompDef = modelDoc.ComponentDefinition\n\t\tBedCompOccS = asmCompDef.Occurrences\n\t\t']\n\t\t'[ BOM SETUP\n\t\toBOM = asmCompDef.BOM\n\t\tIf Not oBOM.StructuredViewEnabled Then\n\t\t\toBOM.StructuredViewEnabled = True\n\t\t\toBOM.StructuredViewFirstLevelOnly = False\n\t\t\toBOM.StructuredViewDelimiter = \"-\"\n\t\tEnd If\n\t\tDim oBOMViews As BOMViews = oBOM.BOMViews\n\t\tDim oBOMStruct As BOMView = oBOMViews.Item(\"Structured\")\n\t\toBOMRowS = oBOMStruct.BOMRows\n\t\t']\n\t\tCoupCounts.Clear()\t''reset dictionary\n\t\t\n\t\tDeleteVirtCouplers()\t'' delete all virtual pipe couplers\n\t\t\n\t\tRuleParametersOutput()\n\t\tInventorVb.DocumentUpdate()\n\t\t\n\t\tCountPrefabEndCaps()\n\t\t\n\t\t''iterate through Coupler counts dictionary\n        Dim pair As KeyValuePair(Of String, Integer)\n        For Each pair In CoupCounts\n            Dim size As String = pair.Key\n\t\t\tDim PlainEnds As Integer = pair.Value\n\t\t\t'MessageBox.Show(\"size: \" & vbTab & size & vbCrLf & \"PlainEnds: \" & vbTab & PlainEnds & vbCrLf & \"zzzzzzzzz: \" & vbTab & zzzzzzz)\n\t\t\t\n\t\t\t''number of plain ends divided by 2 = couplers\n\t\t\tDim qty As Integer = Ceil(PlainEnds/2)\n\t\t\t'MessageBox.Show(\"size: \" & vbTab & size & vbCrLf & \"PlainEnd: \" & vbTab & PlainEnds & vbCrLf & \"qty: \" & vbTab & qty)\n   \t\t\tVirtCoupler(qty, size)\t''Create or or update \n        Next\n\t\t']\n\tEnd Sub\n\t\n\tSub CountPrefabEndCaps()\n\t\tDim PF_Size As String \n\t\tDim PropSetPrj As PropertySet\n\t\tDim BOM_PN As String\n\t\t\n\t\tFor Each oBOMRow In oBOMRowS\n\t\t\t''query part number and quantity\n\t\t\toCompDef1 = oBOMRow.ComponentDefinitions.Item(1)\n\t\t\t\n\t\t\tIf TypeOf oCompDef1 Is VirtualComponentDefinition Then\n\t\t\t\tPropSetPrj = oCompDef1.PropertySets.Item(\"Design Tracking Properties\")\n\t\t\tElse\n\t\t\t\t''line below will return the assembly file name for Virtual Components\n\t\t\t\tPropSetPrj = oCompDef1.Document.PropertySets.Item(\"Design Tracking Properties\")\n\t\t\tEnd If\n\t\t\t\n\t\t\tBOM_PN = PropSetPrj.Item(\"Part Number\").Value\n\t\t\t\n\t\t\t''query part number for size \n\t\t\tPF_Size = PrefabStubSize(BOM_PN)\n\t\t\tIf PF_Size <> \"\" Then\t''PN is a End Cap with a Prefab Stub\n\t\t\t\tDim TotQTY As String = oBOMRow.TotalQuantity\n\t\t\t\tDim PF_Qty As Integer = CInt(TotQTY)\n\t\t\t\t''Each prefab Stub would have a plain end\n\t\t\t\t\n\t\t\t\tIf CoupCounts.TryGetValue(PF_Size, currentCount) Then\n\t\t\t\t\t''add value to existing key\n\t\t\t\t\tCoupCounts(PF_Size) = currentCount + PF_Qty\n\t\t\t\tElse\n\t\t\t\t\t''create key and store value\n\t\t\t\t\tCoupCounts.Add(PF_Size, PF_Qty)\n\t\t\t\tEnd If\n\t\t\tEnd If\n\t\tNext\n\tEnd Sub\n\t\n\tFunction PrefabStubSize(strPN As String) As String\n\t\tDim size As String\n\t\tSelect Case strPN\n\t\t\tCase \"SC310EPE10B\", \"SC310EPE10T\"\n\t\t\t\tsize = \"10\"\n\t\t\tCase \"SC310EPE12B\"\n\t\t\t\tsize = \"12\"\n\t\t\tCase \"SC740EPE18\", \"SC740EPE18B\", \"SC740EPE18T\"\n\t\t\t\tsize = \"18\"\n\t\t\tCase \"SC740EPE24B\", \"SC740EPE24\"\n\t\t\t\tsize = \"24\"\n\t\t\tCase Else\n\t\t\t\t''if part number is not above then it's not a prefab stub\n\t\t\t\tsize = \"\"\n\t\tEnd Select\n\t\tReturn size\n\tEnd Function\n\t\n\t'[ VIRTUAL\n\tSub DeleteVirtCouplers()\n\t\t''Deletes all Virtual Split Couplers\n\t\tFor Each occ In BedCompOccS\n\t\t\tIf iProperties.Value(occ.Name, \"Summary\", \"Keywords\") = keyVirtCoupler Then\n\t\t\t\tocc.Delete\n\t\t\tEnd If\n\t\tNext\n\tEnd Sub\n\t\n\tSub VirtCoupler(qty As Integer, size As String)\n\t\tDim identity As Matrix\n\t\tidentity = ThisServer.TransientGeometry.CreateMatrix\n\t\tDim virtOcc As ComponentOccurrence\n\t\t\n\t\tDim strPN As String = Coupler_PN(size)\n\t\tDim strDesc As String = Coupler_Desc(size)\n\t\tDim strCompName As String = \"Coupler \" & size & \" inch\"\n\t\t\n\t\t''create first instance Of the virtual part\n\t\tvirtOcc = BedCompOccS.AddVirtual(strCompName, identity)\n\t\tvirtOcc.Name = strCompName\n\t\t\n\t\t''iProperties and quantity\n\t\tiProperties.Value(strCompName, \"Project\", \"Part Number\") = strPN\n\t\tiProperties.Value(strCompName, \"Project\", \"Description\") = strDesc\n\t\tiProperties.Value(strCompName, \"Summary\", \"Keywords\") = keyVirtCoupler\n\t\tiProperties.Value(strCompName, \"Custom\", \"STAN\") = \"STAN\"\n\t\tiProperties.Value(strCompName, \"Project\", \"Vendor\") = \"ADS\"\n\t\tiProperties.Value(strCompName, \"Custom\", \"NOTE\") = \"NOT SHOWN\"\n\t\tiProperties.Value(strCompName, \"Custom\", \"ItemPriority\") = 15.0\n\t\tThisBOM.OverrideQuantity(\"Model Data\", strPN, qty)\n\tEnd Sub\n\t']\n\t'[ COUPLER\n\tFunction Coupler_PN(size As String) As String\n\t\tDim strPN As String\n\t\tSelect Case size\n\t\t\tCase \"4\"\n\t\t\t\tstrPN = \"0412AA\"\n\t\t\tCase \"6\"\n\t\t\t\tstrPN = \"0613AA\"\n\t\t\tCase \"8\"\n\t\t\t\tstrPN = \"0813AA\"\n\t\t\tCase \"10\"\n\t\t\t\tstrPN = \"1011AA\"\n\t\t\t\t''future option \"1013AA\"\t\"10\"\".DWALL SNAP COUPLER.(3/BG)\"\n\t\t\tCase \"12\"\n\t\t\t\tstrPN = \"1265AA\"\n\t\t\tCase \"15\"\n\t\t\t\tstrPN = \"1565AA\"\n\t\t\tCase \"18\"\n\t\t\t\tstrPN = \"1865AA\"\n\t\t\tCase \"24\"\n\t\t\t\tstrPN = \"2465AA\"\n\t\t\tCase \"30\"\n\t\t\t\tstrPN = \"3065AA\"\n\t\t\tCase \"36\"\n\t\t\t\tstrPN = \"3661AA\"\n\t\t\tCase \"42\"\n\t\t\t\tstrPN = \"4265AA\"\n\t\t\tCase \"48\"\n\t\t\t\tstrPN = \"4865AA\"\n\t\t\tCase \"60\"\n\t\t\t\tstrPN = \"6065AA\"\n\t\t\tCase Else\n\t\t\t\tstrPN = \"??????????\"\n\t\tEnd Select\n\t\t\n\t\tReturn strPN\n\tEnd Function\n\t\n\tFunction Coupler_Desc(size As String) As String\n\t\tSelect Case size\n\t\t\tCase \"4\"\n\t\t\t\tDesc = \"4\"\".SNAP COUPLER.(24/BG)\"\n\t\t\tCase \"6\"\n\t\t\t\tDesc = \"6\"\".DWALL SNAP COUPLER.(8/BG)\"\n\t\t\tCase \"8\"\n\t\t\t\tDesc = \"8\"\".DWALL SNAP COUPLER.(4/BG)\"\n\t\t\tCase \"10\"\n\t\t\t\tDesc = \"10\"\".SPLIT COUPLER.(H - 12/BG)\"\n\t\t\t\t''future option \"1013AA\"\t\"10\"\".DWALL SNAP COUPLER.(3/BG)\"\n\t\t\tCase \"12\"\n\t\t\t\tDesc = \"12\"\".SPLIT COUPLER.(200/PALLET)\"\n\t\t\tCase \"15\"\n\t\t\t\tDesc = \"15\"\".SPLIT COUPLER.(150/PALLET)\"\n\t\t\tCase \"18\"\n\t\t\t\tDesc = \"18\"\".SPLIT COUPLER.(150/PALLET)\"\n\t\t\tCase \"24\"\n\t\t\t\tDesc = \"24\"\".SPLIT COUPLER.(100/PALLET)\"\n\t\t\tCase \"30\"\n\t\t\t\tDesc = \"30\"\".SPLIT COUPLER.(50/PALLET)\"\n\t\t\tCase \"36\"\n\t\t\t\tDesc = \"36\"\".SPLIT COUPLER.(50/PALLET)\"\n\t\t\tCase \"42\"\n\t\t\t\tDesc = \"42\"\".SPLIT COUPLER.(50/PALLET)\"\n\t\t\tCase \"48\"\n\t\t\t\tDesc = \"48\"\".SPLIT COUPLER.(25/PALLET)\"\n\t\t\tCase \"60\"\n\t\t\t\tDesc = \"60\"\".SPLIT COUPLER.(25/PALLET)\"\n\t\t\tCase Else\n\t\t\t\tPN = \"??????????\"\n\t\tEnd Select\n\t\t\n\t\tReturn Desc\n\tEnd Function\n\t']\nEnd Class"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Restore unsaved parts list changes to BOM's values\n                    ", "solution": [], "author": "danipon71"},
{"created at": [], "solution Title": "\n                        Re: Balloon Selection\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Default large icons in VBNET addin\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Getting part or assembly out of drawing\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: SelectSet\n                    ", "solution": ["  Try\n            For a = 1 To ss.Count\n                Try\n                    ' When testing I found some objects that have a value of nothing and no type, they cause an error. Skip this error - should check this\n                    If ss.Item(a).Type = ObjectTypeEnum.kDrawingViewObject Or ss.Item(a).Type = ObjectTypeEnum.kSectionDrawingViewObject Or ss.Item(a).Type = ObjectTypeEnum.kDetailDrawingViewObject Then\n\n                        ' If the item is a view object then set it\n                        oview = ss.Item(a)\n\n                        ' The views found in this loop are the views that have to be aligned to eachother\n                        ' Store them in an array by combining them into a string\n                        viewCol(b) = (oview.Position.X & \";\" & oview.Position.Y)\n\n                        ' b is the counter for when an actual view is found\n                        b = b + 1\n\n                        ' Save the first views width and height\n                        If b = 1 Then\n                            height1 = oview.Height\n                            width1 = oview.Width\n                        End If\n\n                    End If\n                Catch ex As Exception\n\n                End Try\n            Next"], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to open document directory and select the document file\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Create construction lines\n                    ", "solution": ["oSketch.SketchLines.Item(1).Construction = True\noSketch.SketchLines.Item(2).Construction = True\noSketch.SketchLines.Item(3).Construction = True\noSketch.SketchLines.Item(4).Construction = True"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Angle dimension\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Can't change column width in Custom Table\n                    ", "solution": [], "author": "psp"},
{"created at": [], "solution Title": "\n                        Re: Set newly created hole feature diameter to existing parameter\n                    ", "solution": ["newHole.HoleDiameter.Value = DRYHelpers.Parameters.GetParameter(\"HoleDia\" + item.HoleDia.ToString());", "newHole.HoleDiameter.Expression = \"HoleDia\" + item.HoleDia.ToString();"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: check iproperties via excel\n                    ", "solution": ["GoExcel", ".", "Open", "(", "\"C:\\TEMP\\iLogicTest\\GA\\4\\New folder\\Test.xlsx\"", ")\n", "Dim", " ", "doc", " = ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "strPN", " ", "As", " ", "String", " \n", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", " \n", "For", " ", "Each", " ", "oDoc", " ", "As", " ", "PartDocument", " ", "In", " ", "doc", ".", "AllReferencedDocuments", "\n\t", "'Get Summary->Author property information in the document", "\n\t", "strPN", " = ", "oDoc", ".", "PropertySets", ".", "Item", "(1).", "Item", "(3).", "Expression", "\n\t", "'Change 6 to any number which indicates the row numbers in excel file", "\n\t", "For", " ", "row", " = 1 ", "To", " 6\n\t\t", "Dim", " ", "addr1", " ", "As", " ", "String", " = ", "\"A\"", " & ", "Row", "\n\t\t", "Dim", " ", "addr2", " ", "As", " ", "String", " = ", "\"B\"", " & ", "Row", "\n\t\t", "Dim", " ", "oa", " ", "As", " ", "Object", " = ", "GoExcel", ".", "CellValue", "(", "addr1", ")\n\t\t", "Dim", " ", "ob", " ", "As", " ", "Object", " = ", "GoExcel", ".", "CellValue", "(", "addr2", ")\n\t\t", "If", " (", "oa", ".", "ToString", "() = ", "strPN", ") ", "Then", "\n\t\t\t", "If", " ", "Int", "(", "ob", ") = 200 ", "Or", " ", "Int", "(", "ob", ") = 300 ", "Then", "\n\t\t\t\t", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "doc", ".", "componentdefinition", ".", "occurrences", "\n\t\t\t\t\t", "If", " ", "oOcc", ".", "definition", ".", "document", " ", "Is", " ", "oDoc", " ", "Then", " \n\t\t\t\t\t\t", "Component", ".", "Color", "(", "oOcc", ".", "Name", ") = ", "\"red\"", "\n\t\t\t\t\t", "End", " ", "If", " \n\t\t\t\t", "Next", " \n\t\t\t\t", "errMsg", " = ", "errMsg", " + ", "String", ".", "Format", "(", "\"Large Values: row={0}, Name={1}, Value={2}\"", ", ", "Row", ", ", "oa", ", ", "ob", ") + ", "\"; \"", "\n\t\t\t\t", "MsgBox", "(", "errMsg", ")\n\t\t\t\t", "Exit", " ", "For", "\n\t\t\t", "End", " ", "If", "\n\t\t", "End", " ", "If", " \n\t", "Next", "\n", "Next", "\n\n", "GoExcel", ".", "Open", "(", "\"xxx\\Test.xlsx\"", ")\n", "Dim", " ", "doc", " = ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "strPN", " ", "As", " ", "String", " \n", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", " \n", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "doc", ".", "componentdefinition", ".", "occurrences", "\n\t", "'Get Summary->Author property information in the document", "\n\t", "strPN", " = ", "oOcc", ".", "definition", ".", "document", ".", "PropertySets", ".", "Item", "(1).", "Item", "(3).", "Expression", "\n\t", "MsgBox", "(", "doc", ".", "componentdefinition", ".", "occurrences", ".", "count", ")\n\t", "MsgBox", "(", "strPN", ")\n\t", "'Change 6 to any number which indicates the row numbers in excel file", "\n\t", "Try", "\n\t", "For", " ", "row", " = 1 ", "To", " 2000\n\t\t", "Dim", " ", "addr1", " ", "As", " ", "String", " = ", "\"A\"", " & ", "Row", "\n\t\t", "Dim", " ", "addr2", " ", "As", " ", "String", " = ", "\"B\"", " & ", "Row", "\n\t\t", "Dim", " ", "oa", " ", "As", " ", "Object", " = ", "GoExcel", ".", "CellValue", "(", "addr1", ")\n\t\t", "Dim", " ", "ob", " ", "As", " ", "Object", " = ", "GoExcel", ".", "CellValue", "(", "addr2", ")\n\t\t", "If", " (", "oa", ".", "ToString", "() = ", "strPN", ") ", "Then", "\n\t\t\t", "If", " ", "Int", "(", "ob", ") = 200 ", "Or", " ", "Int", "(", "ob", ") = 300 ", "Then", "\n\t\t\t\t", "Component", ".", "Color", "(", "oOcc", ".", "Name", ") = ", "\"Pink\"", "\n\t\t\t\t", "errMsg", " = ", "errMsg", " + ", "String", ".", "Format", "(", "\"Large Values: row={0}, Name={1}, Value={2}\"", ", ", "Row", ", ", "oa", ", ", "ob", ") + ", "\"; \"", "\n\t\t\t\t", "MsgBox", "(", "errMsg", " )\n\t\t\t", "End", " ", "If", "\n\t\t", "End", " ", "If", " \n\t", "Next", "\n\t", "Catch", "\n\t", "End", " ", "Try", "\n", "Next"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Cross-part reference of WorkAxis using API\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: ILogic to control iAssembly and iParts\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Read Only\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Creating a VBA macro for a double rotation function\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: ApprenticeServer as Windows Service\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Set active iPart member\n                    ", "solution": ["If", " ", "doc", ".", "ComponentDefinition", ".", "IsiPartFactory", "  ", "Then", " \n\t", "Dim", " ", "IPF", " ", "As", " ", "iPartFactory", " \n\t", "IPF", " = ", "doc", ".", "ComponentDefinition", ".", "iPartFactory", " \n\t\n\t", "Dim", " ", "oRow", " ", "As", " ", "iPartTableRow", " \n\t", "oRow", " = ", "IPF", ".", "TableRows", ".", "Item", "(1)\n\t", "IPF", ".", "DefaultRow", " = ", "oRow", " \n", "End", " ", "If", " \n"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: iLogic\n                    ", "solution": [], "author": "YannickEnrico"},
{"created at": [], "solution Title": "\n                        Re: iLogic write custom iprop t assembly level\n                    ", "solution": ["Sub Main\n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oBOM As BOM\n    oBOM = oDoc.ComponentDefinition.BOM\n    \n    Dim oBOMView As BOMView\n    oBOMView = oBOM.BOMViews.Item(\"Parts Only\")\n    \n    Dim Materials As Object\n    Materials = CreateObject(\"Scripting.Dictionary\")\n    \n    Call BOMweightIteration(oBOMView.BOMRows, Materials)\n\n    For Each item In Materials\n\t\tIf msg = \"\" Then \n\t\t\t'msg = \"Materials & Mass:\" & item & \" \" & Materials(item) & \"kg\" & \", \"\n\t\t\tmsg = item & \" \" & Materials(item) & \"kg\" & \", \"\n\t\tElse\n        \tmsg = msg & item & \" \" & Materials(item) & \"kg\" & \",\"\n\t\tEnd If\n    Next\n\tmsg = Left(msg, Len(msg) - 1) 'removes the last comma\n\t\n\tMaterials = Nothing\n\t\n\t'iProperties.Value(System.IO.Path.GetFileName(oDoc.FullFilename), \"Custom\", \"MatlWeights\") = msg\n\tiProperties.Value(\"Custom\", \"MatlWeights\") = msg\n\tMsgBox(msg)\nEnd Sub\n\n\nPrivate Sub BOMweightIteration(oBOMRows As BOMRowsEnumerator, ByRef Materials As Object)\n\n    Dim i As Long\n\tDim oItemWeight As Double\n\tDim weight As Double\n\t\n    For i = 1 To oBOMRows.count\n        Dim oRow As BOMRow\n        oRow = oBOMRows.Item(i)\n  \n        Dim oCompDef As ComponentDefinition\n        oCompDef = oRow.ComponentDefinitions.Item(1)\n\t\t\n\t\toRowDoc = oCompDef.Document\n\t\t\n\t\tMatl = oRowDoc.PropertySets(\"Design Tracking Properties\")(\"Material\").Value\n\t\t\n\t\tWeight = oCompDef.MassProperties.Mass 'mass in kg as it is database units\n\t\toItemWeight = Round(Weight*oRow.TotalQuantity, 2)\n\t\t\n\t\t'MsgBox(oRowDoc.FullFileName & vbLf & Matl & vbLf & oItemWeight)\n\t\t\n        If Materials.Exists(Matl) Then\n\t\t\tMaterials(Matl) = Materials(Matl) + oItemWeight 'where 1 = 1 decimal place\n\t\tElse\n\t\t\tMaterials.Add(Matl, oItemWeight)\n\t\tEnd If  \n    Next\nEnd Sub "], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Export Idw to DXF\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Inventor drawing Title block for Add new sheet needs to be different.\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: [BUG] Revision Table Active Row\n                    ", "solution": ["For Each oRow In oRevTable.RevisionTableRows\n        If oRow(1).Text = oActiveRow Then\n            oRow.IsActiveRow = False\n        End If\nNext "], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Ilogic to update design view in assembly\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: developertools.msi In installed but wizard not showing in visual studio 2013\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Go to all Sheets\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Copy Titleblock Prompted Entries to Custom iProperty\n                    ", "solution": ["If oPrompt is Nothing Then\n     MsgBox(\"No Textbox Matching such text found\")\n     Exit Sub\nEnd if\n", "Option Compare Text\n\nSub Main()\n\n\toTextFileName = \"C:\\Users\\Public\\Documents\\iLogicBuffer.txt\"\n\toWrite = System.IO.File.CreateText(oTextFileName)\n\n\toItem = ThisDoc.Document.SelectSet.Item(1)\n\toTBS = oItem.Definition.Sketch.Textboxes\n\tFor j = 1 To oTBS.Count\n\t\tTry\n\t\t\toTB = oTBS.Item(j).FormattedText\n\t\t\t\n\t\t\t'Comment out below 3 lines if you want to see all lines with overrides\n\t\t\tIf Not (oTB Like \"*</PROMPT>*\" Or oTB Like \"*PropertyID=*\")\n\t\t\t\toTB = \"FORMATTED TEXT: \" & oTBS.Item(j).Text\n\t\t\tEnd If\n\t\tCatch\n\t\t\tTry\n\t\t\t\toTB = oTBS.Item(j).Text\n\t\t\tCatch\n\t\t\t\tMsgBox(\"Issue accessing textbox text!\")\n\t\t\t\tExit Sub\n\t\t\tEnd Try\n\t\tEnd Try\n\t\toWrite.WriteLine(j & \") \" & oTB)\n\tNext\n\t\n\toWrite.Close\n\tProcess.Start(\"notepad.exe\", oTextFileName)\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Maximum Number of Characters in an Text Field\n                    ", "solution": ["Dim MyTitle1 As String = CStr(iProperties.Value(\"Custom\", \"ABBREVIATED NAME\"))\nDim MyTitle2 As String = CStr(iProperties.Value(\"Custom\", \"TITLE OVER-RIDE\"))\n\nDim currentLength As Integer = Len(MyTitle1)\n\nIf CStr(iProperties.Value(\"Custom\", \"Customer\")) = \"CCM\" _\n    AndAlso currentLength > 30 _\n    AndAlso CStr(iProperties.Value(\"Custom\", \"AMD\")) = \"NO\" Then\n\n    Do Until currentLength <= 30\n        MyTitle2 = InputBox(\"PRODUCT DESCRIPTION TOO LONG\" & vbLf & vbLf & \"Please enter an abbreviated format!\", _\n                            \"Drawing Title Error\", MyTitle2)\n        If String.IsNullOrWhiteSpace(MyTitle2) Then Exit Sub\n        currentLength = Len(MyTitle2)\n    Loop\n    iProperties.Value(\"Custom\", \"TITLE OVER-RIDE\") = MyTitle2\n    iProperties.Value(Component_Assembly, \"Project\", \"Description\") = \"MARKING DRAWING\" & \", \" & iProperties.Value(\"Custom\", \"TITLE OVER-RIDE\")\nElse\n    MsgBox(CStr(iProperties.Value(\"Custom\", \"Customer\")) & vbLf & _\n        currentLength & vbLf & _\n        CStr(iProperties.Value(\"Custom\", \"AMD\")))\nEnd If"], "author": "jens.bejer.pede"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: iLogic delete external rule with certain path\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Edit selected sketch dimension properties using vba / vb.net\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Convert VB.net Code to c Sharp\n                    ", "solution": [], "author": "navbor"},
{"created at": [], "solution Title": "\n                        Re: Copy UCS from part to assembly\n                    ", "solution": ["Sub Main()\n\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n\n    Dim oUCS As UserCoordinateSystem\n    Set oUCS = ThisApplication.CommandManager.Pick(kUserCoordinateSystemFilter, \"Select UCS\")\n    \n    Dim occDef As ComponentDefinition\n    Set occDef = oUCS.Parent\n    \n    Dim occ As ComponentOccurrence\n    Dim occMatrix As Matrix\n    \n    For Each occ In oDef.Occurrences\n        If occ.Definition Is occDef Then\n            Set occMatrix = occ.Transformation\n        End If\n    Next\n    \n    If occMatrix Is Nothing Then\n        Debug.Print (\"UCS occurrence not found\")\n    Else\n     \n        Dim oMatrix As Matrix\n        Set oMatrix = oUCS.Transformation\n        Call oMatrix.TransformBy(occMatrix)\n           \n        Dim oUCSDef As UserCoordinateSystemDefinition\n        Set oUCSDef = oDef.UserCoordinateSystems.CreateDefinition\n        \n        oUCSDef.Transformation = oMatrix\n        \n        Dim copiedUCS As UserCoordinateSystem\n        Set copiedUCS = oDef.UserCoordinateSystems.Add(oUCSDef)\n        \n    End If\n    \nEnd Sub\n", "Sub Main()\n\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n\n    Dim oUCS As UserCoordinateSystem\n    Set oUCS = ThisApplication.CommandManager.Pick(kUserCoordinateSystemFilter, \"Select UCS\")\n    \n    Dim occDef As ComponentDefinition\n    Set occDef = oUCS.Parent\n    \n    Dim occ As ComponentOccurrence\n    Dim occMatrix As Matrix\n    \n    For Each occ In oDef.Occurrences.AllLeafOccurrences\n        If occ.Definition Is occDef Then\n            Set occMatrix = occ.Transformation\n            Exit For\n        End If\n    Next\n    \n    If occMatrix Is Nothing Then\n        Debug.Print (\"UCS occurrence not found\")\n    Else\n     \n        Dim oMatrix As Matrix\n        Set oMatrix = oUCS.Transformation\n        Call oMatrix.TransformBy(occMatrix)\n           \n        Dim oUCSDef As UserCoordinateSystemDefinition\n        Set oUCSDef = oDef.UserCoordinateSystems.CreateDefinition\n        \n        oUCSDef.Transformation = oMatrix\n        \n        Dim copiedUCS As UserCoordinateSystem\n        Set copiedUCS = oDef.UserCoordinateSystems.Add(oUCSDef)\n        \n    End If\n    \nEnd Sub\n\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Updating Multi-Value parameters while running an iLogic rule\n                    ", "solution": ["'MultiValue.UpdateAfterChange =True will cause the model (document) to Update after the parameter is changed.", "'This only takes effect when you change parameters using the Parameter function\n\nMultiValue.UpdateAfterChange = True", "\nRuleParametersOutput()", "\nInventorVb.DocumentUpdate()", "MultiValue.UpdateAfterChange = True"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Get sheet format\n                    ", "solution": ["Dim oIDW As DrawingDocument\noIDW = ThisApplication.ActiveDocument\nDim oSheet As Sheet\noSheet = oIDW.ActiveSheet\nDim oLayers As LayersEnumerator = oSheet.Parent.StylesManager.Layers\nDim sFormatName As String\n\n\nFor Each oSheet In oIDW.Sheets\nIf oSheet.Size = DrawingSheetSizeEnum.kA4DrawingSheetSize Then \nsFormatName = \"A4\"\nMessageBox.Show(sFormatName , \"iLogic\")\n\nElseIf oSheet.Size = DrawingSheetSizeEnum.kA3DrawingSheetSize Then \nsFormatName = \"A3\"\nMessageBox.Show(sFormatName , \"iLogic\")\n\nElseIf oSheet.Size = DrawingSheetSizeEnum.kA2DrawingSheetSize Then \nsFormatName = \"A2\"\nMessageBox.Show(sFormatName , \"iLogic\")\n\nElseIf oSheet.Size = DrawingSheetSizeEnum.kA1DrawingSheetSize Then \nsFormatName = \"A1\"\nMessageBox.Show(sFormatName , \"iLogic\")\n\nElseIf oSheet.Size = DrawingSheetSizeEnum.kA0DrawingSheetSize Then \nsFormatName = \"A0\"\nMessageBox.Show(sFormatName , \"iLogic\")\n\nEnd If\nNext\n\n"], "author": "martinhoos"},
{"created at": [], "solution Title": "\n                        Re: Code not updating properly\n                    ", "solution": ["Parameter", ".", "UpdateAfterChange", " ", "=", " ", "True", " \n", "MultiValue", ".", "UpdateAfterChange", " ", "=", " ", "True", " \n\n", "RuleParametersOutput", "()", "\n\n", "Select", " ", "Case", " ", "Parameter", "(", "\"", "Clutch_Size", "\"", ")", "\n    ", "Case", " ", "\"", "1M", "\"", " \n        ", "Parameter", "(", "\"", "Oil_Volume", "\"", ")", " ", "=", " ", "\"", "7", "\"", " \n    ", "Case", " ", "\"", "2M", "\"", " \n        ", "Parameter", "(", "\"", "Oil_Volume", "\"", ")", " ", "=", " ", "\"", "12", "\"", " \n    ", "Case", " ", "\"", "4M", "\"", " \n        ", "Parameter", "(", "\"", "Oil_Volume", "\"", ")", " ", "=", " ", "\"", "15", "\"", " \n    ", "Case", " ", "\"", "8M", "\"", " \n        ", "Parameter", "(", "\"", "Oil_Volume", "\"", ")", " ", "=", " ", "\"", "22", "\"", " \n    ", "Case", " ", "\"", "12M", "\"", " \n        ", "Parameter", "(", "\"", "Oil_Volume", "\"", ")", " ", "=", " ", "\"", "30", "\"", " \n    ", "Case", " ", "\"", "18M", "\"", " \n        ", "Parameter", "(", "\"", "Oil_Volume", "\"", ")", " ", "=", " ", "\"", "50", "\"", " \n    ", "Case", " ", "\"", "30M", "\"", " \n        ", "Parameter", "(", "\"", "Oil_Volume", "\"", ")", " ", "=", " ", "\"", "65", "\"", " \n    ", "Case", " ", "\"", "42M", "\"", " \n        ", "Parameter", "(", "\"", "Oil_Volume", "\"", ")", " ", "=", " ", "\"", "80", "\"", " \n    ", "Case", " ", "\"", "60M", "\"", " \n        ", "Parameter", "(", "\"", "Oil_Volume", "\"", ")", " ", "=", " ", "\"", "110", "\"", " \n", "End", " ", "Select", " \n\n", "InventorVb", ".", "DocumentUpdate", "()", " \n\n", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "Oil_Volume", "\"", ")", " ", "=", " ", "Parameter", "(", "\"", "Oil_Volume", "\"", ")", "\n", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "Clutch_Size", "\"", ")", " ", "=", " ", "Parameter", "(", "\"", "Clutch_Size", "\"", ")", "\n\n", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n\n", "InventorVb", ".", "DocumentUpdate", "()", "\n\n", "iLogicVb", ".", "RunExternalRule", "(", "\"", "Export to PDF", "\"", ")"], "author": "Formsprag"},
{"created at": [], "solution Title": "\n                        Re: Title block Update and Print PDF\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: set units from US to ISO\n                    ", "solution": [], "author": "robert.vdrijst"},
{"created at": [], "solution Title": "\n                        Re: Need iLogic help To delete all Revision Clouds in idw\n                    ", "solution": ["Sub", " ", "DelRevCloud", "()", "\n    ", "Dim", " ", "oDwgDoc", " ", "As", " ", "DrawingDocument", "\n    ", "oDwgDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    \n    ", "Dim", " ", "oSheets", " ", "As", " ", "Sheets", "\n    ", "oSheets", " ", "=", " ", "oDwgDoc", ".", "Sheets", "\n    ", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n    ", "Dim", " ", "oDwgView", " ", "As", " ", "DrawingView", "\n    ", "Dim", " ", "oSketch", " ", "As", " ", "DrawingSketch", "\n    ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oSheets", "\n        ", "For", " ", "Each", " ", "oDwgView", " ", "In", " ", "oSheet", ".", "DrawingViews", "\n            ", "For", " ", "Each", " ", "oSketch", " ", "In", " ", "oDwgView", ".", "Sketches", "\n                ", "oSketch", ".", "Delete", "\n            ", "Next", "\n        ", "Next", "\n    ", "Next", "\n    ", "Call", " ", "DelSketchAtSheet", "\n", "End Sub", "\n\n", "Sub", " ", "DelSketchAtSheet", "()", "\n    ", "Dim", " ", "oDwgDoc", " ", "As", " ", "DrawingDocument", "\n    ", "oDwgDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    \n    ", "Dim", " ", "oSheets", " ", "As", " ", "Sheets", "\n    ", "oSheets", " ", "=", " ", "oDwgDoc", ".", "Sheets", "\n    ", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n    ", "Dim", " ", "oSketch", " ", "As", " ", "DrawingSketch", "\n    \n    ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oSheets", "\n        ", "For", " ", "Each", " ", "oSketch", " ", "In", " ", "oSheet", ".", "Sketches", "\n            ", "oSketch", ".", "Delete", "\n        ", "Next", "\n    ", "Next", "\n", "End Sub", "Sub  Main()\t\t'DelRevRags()\n    \n\tMessageBox.Show(\"\" & \"TO DELETE ALL (FOR REV UP):\" _\n\t& vbLf & \"1. REVISION TAGS\" _\n\t& vbLf & \"2. REVISION CLOUDS (FREE)\" _\n\t& vbLf & \"3. REVISION CLOUDS (VIEW ATTACHED)\" _\n\t& vbLf & \"\" & vbLf & \"\" & \"NOTE: WITHOUT DELETING THE REV ROW!\", \"DELETE REVION TAGS WITHOUT DELETING REVISION ROW!!!\")\n\t\nDim oDrawgDoc As DrawingDocument\n    oDrawgDoc = ThisApplication.ActiveDocument\n    Dim oRevTable As RevisionTable\n    oRevTable = oDrawgDoc.ActiveSheet.RevisionTables.Item(1)\n\tDim oRow As RevisionTableRow\n\tDim oRows As RevisionTableRows = oRevTable.RevisionTableRows\n\t\n    oDrawgDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheets As Sheets\n    oSheets = oDrawgDoc.Sheets\n    Dim oSheet As Sheet\n\t\n\tDim oCell As RevisionTableCell\t\n\tDim oRowData_Last As New ArrayList\n\tDim xx As Integer = 0\n\t\n\toMax = oRevTable.RevisionTableRows.Count\n\toRow = oRevTable.RevisionTableRows.Item(oMax)\n\tFor xx = 1 To oRevTable.RevisionTableColumns.Count\n\t\t\toCell = oRow.Item(xx)\n\t\t\toCellText = oRow.Item(xx).Text\n\t\t\toRowData_Last.add(oCellText)\n\tNext\n\t\n\toRows.Add()\n\toMax_New = oRevTable.RevisionTableRows.Count\n\toRow = oRevTable.RevisionTableRows.Item(oMax_New)\n\tFor xx = 1 To oRevTable.RevisionTableColumns.Count\n\toRow.Item(xx).Text = oRowData_Last(xx-1)\n\tNext\n\t\n\toRevTable.RevisionTableRows.Item(oMax_New).IsActiveRow = True\n\toRevTable.RevisionTableRows.Item(oMax_New-1).Delete\n\t\n\tCall oDel_AttachedRevClouds()\n\tCall oDEL_FreeRevClouds()\n\t\nEnd Sub\n\nSub oDel_AttachedRevClouds()\n    Dim oDrawgDoc As DrawingDocument\n    oDrawgDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheets As Sheets\n    oSheets = oDrawgDoc.Sheets\n    Dim oSheet As Sheet\n    Dim oSketch As DrawingSketch\n    \n    For Each oSheet In oSheets\n        For Each oSketch In oSheet.Sketches\n\t\tIf oSketch.Name.Contains(\"RevisionCloud\") = True Then oSketch.Delete\n        Next\n    Next\nEnd Sub\n\nSub  oDEL_FreeRevClouds()\t\t'DelRevCloud()\n    Dim oDrawgDoc As DrawingDocument\n    oDrawgDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheets As Sheets\n    oSheets = oDrawgDoc.Sheets\n    Dim oSheet As Sheet\n    Dim oDwgView As DrawingView\n    Dim oSketch As DrawingSketch\n    For Each oSheet In oSheets\n        For Each oDwgView In oSheet.DrawingViews\n            For Each oSketch In oDwgView.Sketches\n                If oSketch.Name.Contains(\"RevisionCloud\") = True Then oSketch.Delete\n\t\t\t\t'oSketch.Delete\n            Next\n        Next\n    Next\nEnd Sub"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Inventor - Documentation for API / Macros\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic; BOM Qty; need help with code\n                    ", "solution": ["Sub Main()\n\n    doc = ThisDoc.Document\n    Dim oAssyDef As AssemblyComponentDefinition = doc.ComponentDefinition\n    Dim oBOM As BOM = oAssyDef.BOM\n\n    oBOM.StructuredViewEnabled = True\n\n    Dim oBOMView As BOMView = oBOM.BOMViews.Item(\"Structured\")\n\n    Dim oBOMRow As BOMRow\n    Dim oCompDef As ComponentDefinition\n\n    For Each oBOMRow In oBOMView.BOMRows\n\n      oCompDef = oBOMRow.ComponentDefinitions.Item(1)\n      \n", "       'OLD : NOTICE THE 'AS' KEYWORD INCORRECTLY THERE.\n      'Call SetRowProps(oCompDef As ComponentDefinition, QTY As String)\n", "      'New Line. Notice the LACK of 'As' Keyword.\n      Call SetRowProps(oCompDef, oBOMRow.TotalQuantity)", "\n      \n      If Not oBOMRow.ChildRows is Nothing\n          Call RecurseBOMRow(oBOMRow)\n      End if\n    Next\nEnd Sub\n\nSub RecurseBOMRow(oBOMRow As BOMRow)\n   For Each oBOMRow In oBOMRow.ChildRows\n     Dim oCompDef As ComponentDefinition\n     oCompDef = oBOMRow.ComponentDefinitions.Item(1)\n\n     Call SetRowProps(oCompDef, oBOMRow.TotalQuantity)\n\n     If Not oBOMRow.ChildRows is Nothing\n          Call RecurseBOMRow(oBOMRow)\n     End ig\n   Next\nEnd Sub\n\nSub SetRowProps(oCompDef As ComponentDefinition, QTY As String)\n Dim CompFullDocumentName As String = oCompDef.Document.FullDocumentName\n Dim CompFileNameOnly As String\n Dim index As Integer = CompFullDocumentName.lastindexof(\"\\\")\n CompFileNameOnly = CompFullDocumentName.substring(index+1)\n\n 'MessageBox.Show(CompFileNameOnly)\n\n iProperties.Value(CompFileNameOnly, \"Custom\", \"PartQty\") = QTY\n iProperties.Value(CompFileNameOnly, \"Custom\", \"SO\") = iProperties.Value(\"Custom\", \"SO\") \nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic Design Copy assembly part names change disrupting rule\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: open next idw/ipt file in directory\n                    ", "solution": ["Sub Main()\n\toCurrFile = ThisApplication.ActiveDocument.FullFileName\n\toCurrDir = System.IO.Path.GetDirectoryName(oCurrFile)\n\t\n\toFiles = System.IO.Directory.GetFiles(oCurrDir, \"*.idw\", System.IO.SearchOption.TopDirectoryOnly)\n\t\t\n\tIf oFiles.Length < 1\n\t\tMsgBox(\"No Drawings Found in current directory!\" & vbLf & vbLf & \"Current Directory: \" & oCurrDir)\n\t\tExit Sub\n\tEnd If\n\t\n\tFor j = 0 To oFiles.Length - 1\n\t\tIf oFiles(j) = oCurrFile Then\n\t\t\tIf j >= oFiles.Length - 1 Then\n\t\t\t\tMsgBox(\"Currently Opened File is Last File in Folder!\")\n\t\t\tElse\n\t\t\t\tThisApplication.Documents.Open(oFiles(j+1), True)\n\t\t\tEnd If\n\t\tEnd If\n\tNext\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Using Inventor API / VBa to output BOM to text file - finding beginning Assy\n                    ", "solution": ["Public Sub IterateRows(ByVal oBOMRows As BOMRowsEnumerator, _\n                        ByVal parentNumber As String, _\n                        ByVal indent As Integer)\n    Dim oBOMRow As BOMRow\n    \n    For Each oBOMRow In oBOMRows\n        ' Let's only get the first definition\n        ' It would only be more than one if rows were merged\n        Dim oDef As ComponentDefinition\n        Set oDef = oBOMRow.ComponentDefinitions(1)\n        \n        Dim partNumber As String\n        partNumber = oDef.Document.PropertySets( _\n            \"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\")(\"Part Number\").Value\n        \n        Dim PieceNO As String\n        PieceNO = Right(\"000000\" & oBOMRow.ItemNumber, 6)\n        \n        Debug.Print Tab(indent); PieceNO & \" \" & parentNumber & \"<=\" & partNumber\n        \n        If Not oBOMRow.ChildRows Is Nothing Then\n            Call IterateRows(oBOMRow.ChildRows, partNumber, indent + 1)\n        End If\n    Next\nEnd Sub\n\nPublic Sub IterateThroughStructuredBOM()\n    Dim oAsm As AssemblyDocument\n    Set oAsm = ThisApplication.ActiveDocument\n    \n    Dim oBOM As BOM\n    Set oBOM = oAsm.ComponentDefinition.BOM\n    \n    Dim partNumber As String\n    partNumber = oAsm.ComponentDefinition.Document.PropertySets( _\n        \"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\")(\"Part Number\").Value\n    \n    ' Make sure it's enabled\n    oBOM.StructuredViewEnabled = True\n    oBOM.StructuredViewFirstLevelOnly = False\n    \n    Dim oBOMView As BOMView\n    Set oBOMView = oBOM.BOMViews(\"Structured\")\n    \n    Call IterateRows(oBOMView.BOMRows, partNumber, 1)\nEnd Sub"], "author": "jens.bejer.pede"},
{"created at": [], "solution Title": "\n                        Re: Move occurrences with same filename\n                    ", "solution": ["oFileNameToMove = \"C:\\Test.ipt\"\noDocToMove = ThisApplication.Documents.Open(oFileNameToMove, True)\n\nFor Each oOcc As Occurrence in\u00a0oParentAsm.", "AllReferencedOccurrences", "(oDocToMove)\n    'Do your stuff\nNext"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Derive in iProperties of a part.\n                    ", "solution": ["Dim", " ", "NewFileNameAddition", " ", "As", " ", "String", " ", "=", " ", "\"", "-1", "\"", "\n", "Dim", " ", "TemplateFileName", " ", "As", " ", "String", " ", "=", " ", "\"", "D:\\Template.ipt", "\"", "\n\n", "Dim", " ", "CurrentDocFileName", " ", "As", " ", "String", " ", "=", " ", "ThisDoc", ".", "Document", ".", "fullfilename", "\n", "Dim", " ", "NewDocFileName", " ", "As", " ", "String", " ", "=", " ", "strings", ".", "left", "(", "CurrentDocFileName", ",", "strings", ".", "instrrev", "(", "CurrentDocFileName", ",", "\"", ".", "\"", ")", " ", "-", " ", "1", ")", " ", "&", " ", "NewFileNameAddition", " ", "&", " ", "\"", ".ipt", "\"", "\n\n", "Dim", " ", "oNewDoc", " ", "As", " ", "Inventor", ".", "PartDocument", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Add", "(", "Inventor", ".", "DocumentTypeEnum", ".", "kPartDocumentObject", ", ", "TemplateFileName", ", ", "True", ")", "\n", "oNewDoc", ".", "SaveAs", "(", "NewDocFileName", ", ", "False", ")", "\n\n", "Dim", " ", "oNewDocDef", " ", "As", " ", "Inventor", ".", "PartComponentDefinition", " ", "=", " ", "oNewDoc", ".", "ComponentDefinition", "\n", "Dim", " ", "oDerivedPartDefinition", " ", "As", " ", "Inventor", ".", "DerivedPartDefinition", " ", "=", " ", "oNewDocDef", ".", "ReferenceComponents", ".", "DerivedPartComponents", ".", "CreateDefinition", "(", "CurrentDocFileName", ")", "\n", "'", " oDerivedPartDefinition.IncludeAllParameters = True", "\n", "oDerivedPartDefinition", ".", "ExcludeAll", "()", "\n", "oDerivedPartDefinition", ".", "Parameters", ".", "Item", "(", "\"", "YourParameterName1", "\"", ")", ".", "IncludeEntity", " ", "=", " ", "True", "\n", "oDerivedPartDefinition", ".", "Parameters", ".", "Item", "(", "\"", "YourParameterName2", "\"", ")", ".", "IncludeEntity", " ", "=", " ", "True", "\n", "oDerivedPartDefinition", ".", "Parameters", ".", "Item", "(", "\"", "YourParameterName3", "\"", ")", ".", "IncludeEntity", " ", "=", " ", "True", "\n\n", "Dim", " ", "oNewDerivedPartComponent", " ", "As", " ", "Inventor", ".", "DerivedPartComponent", " ", "=", " ", "oNewDocDef", ".", "ReferenceComponents", ".", "DerivedPartComponents", ".", "Add", "(", "oDerivedPartDefinition", ")", "\n\n", "oNewDoc", ".", "Save", "()", "\n\n", "MsgBox", "(", "\"", "Done", "\"", ", ", "MsgBoxStyle", ".", "Information", ", ", "\"", "Done", "\"", ")"], "author": "lcampsteijn"},
{"created at": [], "solution Title": "\n                        Re: Browser Name Part Number are not the same\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: how to remove ole links\n                    ", "solution": ["Sub Main()\n    Dim oDoc As Document\n\n    'vba:\n    Set oDoc = ThisApplication.ActiveDocument\n\n    'vb.net:\n    'oDoc = ThisDoc.Document\n\n    Dim oLog As String\n\n    For Each oSubDoc in oDoc.AllReferencedDocuments\n        If oSubDoc.IsModifiable = True Then\n            Call RemoveOLEsFromDoc(oSubDoc, oLog)\n        End if\n     Next\n\n    Call MsgBox(\"Rule Complete!\" & vblf & vblf & _\n                  \"OLEs Removed From: \" & vblf & oLog)\nEnd Sub\n\n\nSub RemoveOLEsFromDoc(ByVal oDoc As Document, ByRef oLogStr As String)\n\t\n\tIf oDoc.ReferencedOLEFileDescriptors.Count > 0\n\t\tFor Each oOLEFileRef In oDoc.ReferencedOLEFileDescriptors\n\t\t\t'oOLEFileRef.BrowserVisible = True\n                         oOLEFileRef.Delete\n\t\tNext\n                oLogStr = oLogStr & oDoc.DisplayName\n\tEnd If\n\t\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Writing properties to cc-part with Inventor 2018\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Creating Dimensions in a Section with Attribute Helper\n                    ", "solution": ["Sub FindModelObjectForDrawingCurve()\n Dim oDoc As DrawingDocument\n Set oDoc = ThisApplication.ActiveDocument\n \n Dim oCurveSeg As DrawingCurveSegment\n Set oCurveSeg = oDoc.SelectSet(1)\n \n Dim oCurve As DrawingCurve\n Set oCurve = oCurveSeg.Parent\n \n Dim oModelGeo As Object\n Set oModelGeo = oCurve.ModelGeometry\n \n ' get parent document of model geometry\n Dim oParent As Object\n Dim bFind As Boolean: bFind = False\n Dim oModelDoc As Document\n \n Set oParent = oModelGeo.Parent\n \n Do\n    If Not (oParent.Type = kPartComponentDefinitionObject Or oParent.Type = kAssemblyComponentDefinitionObject) Then\n        Set oParent = oParent.Parent\n    Else\n        Set oModelDoc = oParent.Document\n        bFind = True\n    End If\n    \n Loop Until bFind\n \n If oModelDoc.Views.Count = 0 Then\n    oModelDoc.Views.Add\n Else\n    oModelDoc.Activate\n End If\n \n ' highlight the model geometry that projected as the drawing curve.\n oModelDoc.SelectSet.Clear\n oModelDoc.SelectSet.Select oModelGeo\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Access iProperties without opening the file\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Creating new parts in C# - Application does not support just-in-time (JIT) d\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Replace Paremeter Name in Equation\n                    ", "solution": ["    ", "Dim", " ", "oPartDoc", " ", "As", " ", "PartDocument", "\n    ", "oPartDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    ", "Dim", " ", "oUserParamX", " ", "As", " ", "UserParameter", "\n    ", "Dim", " ", "oUserParamY", " ", "As", " ", "UserParameter", "\n    ", "Dim", " ", "oLinkParam", " ", "As", " ", "DerivedParameter", "\n    ", "Dim", " ", "oAllLinkParam", " ", "As", " ", "DerivedParameters", "\n    ", "oAllLinkParam", " ", "=", " ", "oPartDoc", ".", "ComponentDefinition", ".", "Parameters", ".", "DerivedParameterTables", ".", "Item", "(", "1", ")", ".", "DerivedParameters", "\n\n    \n    ", "For", " ", "Each", " ", "oUserParamX", " ", "In", " ", "oPartDoc", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", "\n        ", "X", " ", "=", " ", "Len", "(", "oUserParamX", ".", "Name", ")", "\n        ", "For", " ", "Each", " ", "oLinkParam", " ", "In", " ", "oAllLinkParam", "\n            ", "Y", " ", "=", " ", "Left", "(", "oLinkParam", ".", "Name", ", ", "X", ")", "\n            ", "If", " ", "oUserParamX", ".", "Name", " ", "=", " ", "Y", " ", "Then", "\n                ", "'", "Choose this option with delete comment (')", "\n                ", "oUserParamX", ".", "Name", " ", "=", " ", "oUserParamX", ".", "Name", " ", "&", " ", "\"", "_Old", "\"", "\n                ", "'", "oLinkParamX.Name = Y", "                ", "For", " ", "Each", " ", "oUserParamY", " ", "In", " ", "oPartDoc", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", " ", "                    Result", " ", "=", " ", "Replace", "(", "oUserParamY", ".", "Expression", ", ", "oUserParamX", ".", "Name", ", ", "oLinkParam", ".", "Name", ")", " ", "                    On", " ", "Error", " ", "Resume", " ", "Next", " ", "                    oUserParamY", ".", "Expression", " ", "=", " ", "Result", "                Next", "\n            ", "End", " ", "If", "\n            \n        ", "Next", "\n    ", "Next", "\n    \n    ", "oPartDoc", ".", "Update"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Row Height of Revision Table\n                    ", "solution": ["Sub Main()\n\n    Dim oDoc As DrawingDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    oSheet = oDOc.Sheets.Item(1)\n    \n    Dim oRevTable As RevisionTable\n    oRevTable = oSheet.RevisionTables.Item(1)\n    \n    Dim oRevTableRow As RevisionTableRow\n    oRevTableRow = oRevTable.RevisionTableRows.Item(1)\n    \n    Dim height As Double\n    height = oRevTableRow.Height\n\t\n    MessageBox.Show(height, \"Height of revison table row\")\n    \nEnd Sub", "Sub Main()\nDim oDrawgDoc As DrawingDocument\noDrawgDoc = ThisApplication.ActiveDocument\nDim oSheet As Sheet\noSheet = oDrawgDoc.ActiveSheet\noSheet = oDrawgDoc.Sheets.Item(1)\nDim oRevTable As RevisionTable\nDim oRevTableRow As RevisionTableRow\nDim oRT_InsertionPoint As Point2d\nDim oHt_RT As Double\t'Revision table\noHt_RT = 0\nDim oHt_TB As Double\t'Title block\noHt_TB = 2.75\nDim oW_TB As Double\t'Title block\noW_TB = 7.5 in\n\noMagin_Border = 0.25 in\noW_Sheet = oSheet.Width\nIf oSheet.RevisionTables.Count >0 Then Goto oRevTable_End:\nIf oSheet.RevisionTables.Count = 0 Then\noRT_InsertionPoint = ThisApplication.TransientGeometry.CreatePoint2d((oSheet.Width-(oW_TB+oMagin_Border)*2.54), (oHt_TB+oMagin_Border+oHt_RT)*2.54)\noRevTable = oSheet.RevisionTables.Add(oRT_InsertionPoint)\n    oRevTableRow = oRevTable.RevisionTableRows.Item(1)\n\toHt_RT = oRevTableRow.Height\noNRows_wHeader = oRevTable.RevisionTableRows.Count + 1\noHt_RT = oHt_RT*oNRows_wHeader\n\noPurgeRevTables()\n\noRT_InsertionPoint = ThisApplication.TransientGeometry.CreatePoint2d((oSheet.Width-(oW_TB+oMagin_Border)*2.54), ((oHt_TB+oMagin_Border)*2.54+oHt_RT))\noRevTable = oSheet.RevisionTables.Add(oRT_InsertionPoint)\n\nElse\noRevTable = oDrawgDoc.ActiveSheet.RevisionTables.Item(1)\n    oRevTableRow = oRevTable.RevisionTableRows.Item(1)\n\toHt_RT = oRevTableRow.Height\noNRows_wHeader = oRevTable.RevisionTableRows.Count + 1\noHt_RT = oHt_RT*oNRows_wHeader\noPurgeRevTables()\n\noRT_InsertionPoint = ThisApplication.TransientGeometry.CreatePoint2d((oSheet.Width-(oW_TB+oMagin_Border)*2.54), ((oHt_TB+oMagin_Border)*2.54+oHt_RT))\noRevTable = oSheet.RevisionTables.Add(oRT_InsertionPoint)\n\nEnd If\n\noRevTable_End:\nEnd Sub\n\nSub oPurgeRevTables()\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\nDim oSheet As Sheet\noSheet = oDrawDoc.Sheets.Item(1)\nDim oRevTable As RevisionTable\noRevTable = oSheet.RevisionTables.Item(1)\n'oSheet = oDrawDoc.ActiveSheet\n'oRevTable.Delete\nIf oSheet.RevisionTables.Count > 0 Then\noSheet = oDrawDoc.ActiveSheet\noSheet.Activate\n\tFor Each oRevTable In oSheet.RevisionTables\n\toRevTable.Delete\n\tNext\nEnd If\nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: BOMViews Object Query\n                    ", "solution": ["If CompDefs.Item(1) Is ViewPart Then"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Item Bubbles\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Set check date using iLogic Rule\n                    ", "solution": ["If", " ", "(", "ThisDoc", ".", "Document", ".", "DocumentType", " ", "<>", " ", "kDrawingDocumentObject", ")", " ", "Then", " ", "Return", "\n", "Dim", " ", "odrawdoc", " ", "As", " ", "DrawingDocument", "\n", "odrawdoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n", "If", " ", "(", "odrawdoc", " ", "Is", " ", "Nothing", ")", " ", "Then", " ", "Return", "\n\n", "customPropertySet", "=", "odrawdoc", ".", "PropertySets", ".", "Item", "(", "\"", "Inventor User Defined Properties", "\"", ")", "\n\n", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Checked Date", "\"", ")", "=", "Now", "\n\n", "InventorVb", ".", "DocumentUpdate", "()"], "author": "gkpbydesign."},
{"created at": [], "solution Title": "\n                        Re: Control Inventor Application Option using Macro\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic: create unitless user parameter\n                    ", "solution": ["Dim a As PartDocument\nSet a = ThisDocument\nDim b As Parameters\nSet b = a.ComponentDefinition.Parameters\nb.UserParameters.AddByExpression \"Piet\", \"100\", \"ul\""], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Probleem met het opene Inventor 2015\n                    ", "solution": [], "author": "PierreAlbertus"},
{"created at": [], "solution Title": "\n                        Re: ComponentOccurence.Definition is null when occurrence is suppressed\n                    ", "solution": [], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Create work axis using iLogic\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: 3D PDF in drawing\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Copy General Note from a template\n                    ", "solution": ["Dim a As Application\na = ThisApplication\n\nDim b As DrawingDocument\nDim c As Inventor.DrawingNote\n\nset b = thisdocument\n\nDim b1 As DrawingDocument\nb1 = a.Documents.Open(\"C:\\Work\\Inventor\\Templates\\Backup.idw\", False)\n\n'select the item to be copied\nc = b1.Sheets.Item(1).DrawingNotes.Item(2)\nDim PP As Inventor.Point2d\n\n\nPP = b1.Sheets.Item(1).DrawingNotes.Item(1).Position\n\nb.Sheets.Item(1).DrawingNotes.GeneralNotes.AddFitted (PP, b1.Sheets.Item(1).DrawingNotes.Item(2).text)\n\n\nb1.Close"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Custom message form info center\n                    ", "solution": ["Dim a As Application\nSet a = ThisApplication\n\nDim b As Balloontip\nSet b = a.UserInterfaceManager.BalloonTips.Add(\"String Name\", \"String Title\", \"Watch out\")\n\nb.Display"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: To Retrieve Total Weight from BOM\n                    ", "solution": ["'GetBOMWeight", "'By MMM - Dec3-2017", "'Purpose: Single use tool for pushing PartsList weight total into custom dwg property", "'Rev 0.1: Revised from original to include better error handling", "If ThisApplication.ActiveDocument.DocumentType <> kDrawingDocumentObject THen", "    MsgBOx(\"Rule only valid for Drawing Documents!\" & vblf & vblf & \"Aborting Rule!\")", "    Exit Sub", "End if", "Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n", "If oDrawDoc.ActiveSheet.PartsList.Count < 1 Then", "    MsgBox(\"No PartsList found on active sheet!\" & vblf & vblf & \"Aborting Rule!\")", "    Exit SUb", "End if", "\nDim oPartList As PartsList\noPartList = oDrawDoc.ActiveSheet.PartsLists.Item(1)\n\noCol_Qty = InputBox(\"COLUMN NUMBER FOR QTY PER ASS'Y: \", \"COLUMN NUMBER: QTY\", \"Column Number - QTY\")\noCol_WT = InputBox(\"COLUMN NUMBER FOR WEIGHT: \", \"COLUMN NUMBER: WEIGHT\", \"Column Number - WT\")\n\nDim oWT_Units_Array As New ArrayList\t\noWT_Units_Array.add(\"LBS\")\noWT_Units_Array.add(\"Kg\")\noWT_LBS_Kg = InputListBox(\"SELECT FROM ABOVE!\", oWT_Units_Array, oWT_Units_Array.Item(0), \"Select Units For Weight\", \"WEIGHT UNITS\")\n\n\nWT_Total = 0", "\nDim i As Long\nFor i = 1 To oPartList.PartsListRows.Count\n    If oPartList.PartsListRows.Item(i).Visible = False\n        MessageBox.Show(\"INVISIBLE ROW\", \"ALERT!\")\n    Else\n        oCell_UWT = oPartList.PartsListRows.Item(i).Item(Val(oCol_Qty)).Value\n        oCell_QTY = oPartList.PartsListRows.Item(i).Item(Val(oCol_WT)).Value\n        WT_ithRow = Val(oCell_UWT)*Val(oCell_QTY)\n       WT_Total = WT_Total + WT_ithRow\n\n       'MessageBox.Show(\"ROW NUMBER: \" & i _\n        '& vbLf & \"oCell_UWT: \" & oCell_UWT _\n        '& vbLf & \"oCell_QTY: \" & oCell_QTY _\n        '& vbLf & \"WT_ithRow: \" & WT_ithRow _\n        '& vbLf & \"WT_Total: \" & WT_Total, \"Title\")\n    End If\nNext", "\nMessageBox.Show(\"oPartList.PartsListRows.Count: \" & oPartList.PartsListRows.Count, \"Title\")\niProperties.Value(\"Custom\", \"WEIGHT\") = CStr(WT_Total) & \" \" & oWT_LBS_Kg\niLogicVb.UpdateWhenDone = True"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic - Suppress parts - Bigger and smaller.\n                    ", "solution": [], "author": "iva.btblan"},
{"created at": [], "solution Title": "\n                        Re: Attach multiple files to 3D PDF\n                    ", "solution": ["'-----Attach step & CSV file-----\nStepFile = ThisDoc.Path & \"\\KSE\" & \"\\Step\\\" & StepFileName\nCSVFile = CSVFolder & CSVFileName\n\nDim AttachedFiles = New String(){StepFile,CSVFile}\n\noOptions.Value(\"AttachedFiles\") = AttachedFiles"], "author": "Frank-Oosterwaa"},
{"created at": [], "solution Title": "\n                        Re: UserCoordinateSystems.Add() produce unspecified error\n                    ", "solution": [], "author": "t_hascj"},
{"created at": [], "solution Title": "\n                        Re: Inventor Batch Program\n                    ", "solution": [], "author": "I_Forge_KC"},
{"created at": [], "solution Title": "\n                        Re: Change iPart member on a drawing - possible?\n                    ", "solution": ["Dim oView As DrawingView\noView = ActiveSheet.View(\"VIEW1\").View\nDim doc as AssemblyDocument\ndoc = ThisDrawing.ModelDocument\nmember = doc.ComponentDefinition.iAssemblyMember.ParentFactory.DefaultRow.MemberName\n'MessageBox.Show(member, \"Title\")\noView.ActiveMemberName = member "], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Add Dimension user parameter for GAUGE\n                    ", "solution": ["Dim oDoc As DrawingDocument = ThisDrawing.Document\nDim oSSet As SelectSet = oDoc.SelectSet\nIf oSSet.Count <> 1 Then\n    MsgBox(\"Select only one dimension!\")\nElse", "    obj = oSSet.Item(1)\n    If TypeOf obj Is GeneralDimension Then\n        Dim oDim As GeneralDimension = obj\n        Dim oDimensionText As DimensionText = oDim.Text\n        MsgBox(oDimensionText.FormattedText)", "        'oDimensionText.FormattedText = oDimensionText.FormattedText & \"new stuff here\"", "    End If", "End If", "Beep", "Sub Gauge_Dim_Style()\n\n  Dim oDoc As DrawingDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim oSSet As SelectSet\n  Set oSSet = oDoc.SelectSet\n  \n  'reference to the selected view\n  Dim oView As DrawingView\n  Set oView = oSSet.Item(1)\n  \n  'get the part name from the view\n  Dim oPartName As String\n  oPartName = oView.ReferencedDocumentDescriptor.FullDocumentName\n  \n  'reference to the selected dimension\n  Dim oDim As LinearGeneralDimension\n  Set oDim = oSSet.Item(2)\n  \n  'refrence to the DimensionText object\n  Dim oDimensionText As DimensionText\n  Set oDimensionText = oDim.Text\n\n  'reference to the style manager\n  Dim oStylesMgr As DrawingStylesManager\n  Set oStylesMgr = oDoc.StylesManager\n  \n  'get the reference to the target dimension style (by name)\n  Dim oNewStyle As DimensionStyle\n  Set oNewStyle = oStylesMgr.DimensionStyles.Item(\"Decimal - 3 Place\")\n  oDim.Style = oNewStyle\n  \n  'change text\n  oDimensionText.FormattedText = \"<Parameter Resolved='True' ComponentIdentifier='\" & oPartName & \"' Name='GAUGE' Precision='0'>1</Parameter>\" & \" GA (<DimensionValue/>)\"\n  Beep\n\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Control View Label Visibility from API\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Flat Pattern VBA Editor\n                    ", "solution": ["oBaseViewOptions.Add(\"SheetMetalFoldedModel\", False)", "Call", " oBaseViewOptions.Add(\"SheetMetalFoldedModel\", False)", "oBaseViewOptions.Add \"SheetMetalFoldedModel\", False"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: VBA macro to set an assembly BOM Structure Purchased\n                    ", "solution": ["Sub Purchased()\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = oAsmDoc.ComponentDefinition", "    Set ", "oAsmDef", ".BOMStructure = kPurchasedBOMStructure", "End Sub", "Sub Purchased()\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = oAsmDoc.ComponentDefinition\n    MsgBox oAsmDef.BOMStructure\n    oAsmDef.BOMStructure = 51973 'kPurchasedBOMStructure\nEnd Sub", "Sub Purchased()\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisDocument 'ThisApplication.ActiveDocument\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = oAsmDoc.ComponentDefinition\n    MsgBox oAsmDef.BOMStructure\n    oAsmDef.BOMStructure = 51973 'kPurchasedBOMStructure\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: DXF Positioning\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: If statement returns true and false\n                    ", "solution": ["Private Sub getParentView(oView As DrawingView, ByRef oReturnView As DrawingView)\n    ' Check if View is top level\n    If oView.ParentView Is Nothing Then\n    \n        ' Return original view\n        Set oReturnView = oView\n        Exit Sub\n    ' If oView has a parent view\n    Else\n        ' Recurse up to parent view\n        getParentView oView.ParentView, oReturnView\n    End If\nEnd Sub"], "author": "tdant"},
{"created at": [], "solution Title": "\n                        Re: Rectangular Pattern - Part - iLogic\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: iLogic in iAssemblies, iparts\n                    ", "solution": ["Sub Main()\n\t\n\tDim length As Double\n\tlength = InputBox(\"Enter the length of beam\", \"Length input\", \" \")\n\tLength = length\n\tParameter(\"Beam1:1\", \"Length\") = Length\n\tDim compOcc = Component.InventorComponent(\"Beam1:1\")\n\tcompOcc.Edit()\n\tInventorVb.DocumentUpdate()\n\tcompOcc.ExitEdit(ExitTypeenum.kExitToTop )\n\tParameter(\"Beam2:1\", \"Length\") = Length\n\tDim compOcc1 = Component.InventorComponent(\"Beam2:1\")\n\tcompOcc1.Edit()\n\tInventorVb.DocumentUpdate()\n\tcompOcc1.ExitEdit(ExitTypeenum.kExitToTop)\n\tInventorVb.DocumentUpdate()\n\t\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Add justified leader note with iLogic\n                    ", "solution": ["    oLeaderNote.HorizontalJustification = 19969\n\n    oLeaderNote.VerticalJustification = 25601"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Customize User Commands - Create Icon\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: title block link to parameters is influenced by LOD?\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Drawing view events, on create new sheet\n                    ", "solution": ["Private WithEvents oUINewDrawingView As UserInputEvents\n\n\nPublic Sub Activate(ByVal addInSiteObject123 As Inventor.ApplicationAddInSite, ByVal firstTime As Boolean) Implements Inventor.ApplicationAddInServer.Activate\noUINewDrawingView = m_inventorApplication.ApplicationEvents\nend sub\n\nPrivate Sub UINewDrawingView_OnActivateCommand(CommandName As String, Context As Inventor.NameValueMap) Handles oUINewDrawingView.OnActivateCommand\n            'MsgBox(CommandName)\n            If CommandName = \"DrawingNewSheetCtxCmd\" Then\n'Your code here\nend if\nend sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: PdfAddin Option \"Launch_Viewer\" = True or = false: Not set in opti\n                    ", "solution": ["'iLogic\nThisDoc.Launch(\"C:\\Filename.pdf\")", "'vb.net\nProcess.Start(\"C:\\Filename.pdf\")", "'vba", "Shell ", "\"C:\\Filename.pdf\"", "PDFAddIn = oInvApp.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\n", "AND NOT\n\nPDFAddIn = oInvApp.ApplicationAddIns.ItemById(\"{0AC6FD95-2F4D-42CE-8BE0-8AEA580399E4}\")"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Setting parameter exposed as property via VB.NET\n                    ", "solution": [], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: Degrees of Freedom - Macro\n                    ", "solution": ["Public Sub ComponentsWithDegreesOfFreedom()\n        Dim oActiveAssDoc As AssemblyDocument\n        Set oActiveAssDoc = ThisApplication.ActiveDocument\n        \n        Dim oTranslationCount As Long\n        Dim oTranslationVector As ObjectsEnumerator\n        Dim oRotationCount As Long\n        Dim oRotationVector As ObjectsEnumerator\n        Dim oCenterPoint As Point\n\n        Dim oComponentOccurence As ComponentOccurrence\n\n        For Each oComponentOccurence In oActiveAssDoc.ComponentDefinition.Occurrences\n            oComponentOccurence.GetDegreesOfFreedom oTranslationCount, oTranslationVector, oRotationCount, oRotationVector, oCenterPoint\n            \n            MsgBox oTranslationCount\n            MsgBox oTranslationVector.Count\n            MsgBox oRotationCount\n            MsgBox oRotationVector.Count\n            MsgBox oCenterPoint.x\n            MsgBox oCenterPoint.Y\n            MsgBox oCenterPoint.Z", "\n            'Optional ground components\n            If oComponentOccurence.Grounded = False Then\n                    oComponentOccurence.Grounded = True\n            End If\n        Next\n    End Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Macro/ add in to show override dimensions in sketch?\n                    ", "solution": ["'-------------Start Of ilogic ------------------------------------------------\n' Set a reference to the active document.\nDim oDoc As DrawingDocument\noDoc = ThisApplication.ActiveDocument\n\n'Define the drawing dims collection\nDim oDrawingDims As DrawingDimension\n\n'Dim oColor As Inventor.Color\nDim oColor As Color\n\n'Prompt user to choose highlight / un-highlight\nDim booleanParam as Object\nbooleanParam = InputRadioBox(\"Select an Option\", _\n\"Hightlight Overrides\", \"Un-Hightlight Overrides\", True, Title := \"iLogic\")\n\n'Loop through all dimensions and set colors\nFor Each oDrawingDims In oDoc.ActiveSheet.DrawingDimensions\n   If booleanParam = True Then\n   'set color to magenta\n   oColor = ThisApplication.TransientObjects.CreateColor(255, 0, 255)\n   Else\n   'set color to black\n   oColor = ThisApplication.TransientObjects.CreateColor(0, 0, 0)\n   oColor.ColorSourceType = ColorSourceTypeEnum.kLayerColorSource\n   End If\n  \n   If oDrawingDims.HideValue = True _\n   Or oDrawingDims.ModelValueOverridden = True Then\n   oDrawingDims.Text.Color = oColor\n   Else\n   End If\nNext\n'-------------End of ilogic ------------------------------------------------", "Public Sub Dimensions()\nRuniLogic (\"", "Your iLogic code", ".txt\") 'replace the red text with the name of your external rule\nEnd Sub\n\nPublic Sub RuniLogic(ByVal RuleName As String)\nDim iLogicAuto As Object\nDim oDoc As Document\nSet oDoc = ThisApplication.ActiveDocument\nIf oDoc Is Nothing Then\nMsgBox \"Missing Inventor Document\"\nExit Sub\nEnd If\nSet iLogicAuto = GetiLogicAddin(ThisApplication)\nIf (iLogicAuto Is Nothing) Then Exit Sub\niLogicAuto.RunExternalRule oDoc, RuleName\nEnd Sub\nPublic Function GetiLogicAddin(oApplication As Inventor.Application) As Object\nDim addIn As ApplicationAddIn\nOn Error GoTo NotFound\nSet addIn = oApplication.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\nIf (addIn Is Nothing) Then Exit Function\naddIn.Activate\nSet GetiLogicAddin = addIn.Automation\nExit Function\nNotFound:\nEnd Function"], "author": "Jesper_S"},
{"created at": [], "solution Title": "\n                        Re: ilogic _ SAVE PDF TO ACTIVE FOLDER\n                    ", "solution": ["oDataMedium.FileName = ThisDoc.Path & ", "\"\\\" &", " ThisDoc.FileName & \".pdf\""], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: dwf file\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Create Assembly from Excel List\n                    ", "solution": [], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: File name not showing for .ipn files?\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: CommandDefinitions Property not available in C# but is available in VB.Net\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: Rectangular Pattern of Feature in Part - C# or .NET Example\n                    ", "solution": ["#region CREATE PATTERN\n            ObjectCollection oObjColl = _invApp.TransientObjects.CreateObjectCollection();\n            oObjColl.Add(oExtrude);\n            RectangularPatternFeatureDefinition oRecFeatDef = oCompDef.Features.RectangularPatternFeatures.CreateDefinition(oObjColl, oCompDef.WorkAxes[1], true, 5, 3.8, PatternSpacingTypeEnum.kDefault);\n            RectangularPatternFeature oRecFeat = oCompDef.Features.RectangularPatternFeatures.AddByDefinition(oRecFeatDef);         \n#endregion"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Need Help to Identify the WorkAxis of Parent Hole feature of Circular Patter\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Section Arrows & View Label Styles\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: iPart Table SheetMetalRule\n                    ", "solution": [], "author": "meck"},
{"created at": [], "solution Title": "\n                        Re: wordApp = Interaction.CreateObject(\"Word.Application\")\n                    ", "solution": ["Dim wordApp as Object\nwordApp = CreateObject(\"Word.Application\")"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: how to count circles?\n                    ", "solution": ["Public Sub CircleCount()\n    If ThisApplication.ActiveEditDocument Is Nothing Then\n        MsgBox (\"No active document, exiting.\")\n        Exit Sub\n    Else\n        If ThisApplication.ActiveEditDocument.DocumentType = kPartDocumentObject Then\n            If ThisApplication.ActiveEditDocument.ComponentDefinition.Type = kSheetMetalComponentDefinitionObject Then\n                Dim InvDoc As Document\n                Set InvDoc = ThisApplication.ActiveEditDocument\n                If InvDoc.ComponentDefinition.HasFlatPattern = True Then\n                    Dim FP As FlatPattern\n                    Set FP = InvDoc.ComponentDefinition.FlatPattern\n                    Dim D As Double\n                    Dim CA As Variant\n                    Dim CircleEdges As Collection\n                    Set CircleEdges = New Collection\n                    For Each Edge In FP.TopFace.Edges\n                        If Edge.GeometryType = kCircleCurve Then\n                            D = Round(1000000 * Edge.Geometry.Radius) / 1000000\n                            D = 10 * 2 * D 'diameter rounded. in mm units\n                            n = 0\n                            For i = 1 To CircleEdges.Count\n                                CA = CircleEdges.Item(i)\n                                If CA(1) = D Then\n                                    CA(0) = CA(0) + 1\n                                    n = CA(0)\n                                    CircleEdges.Remove (i)\n                                    CircleEdges.Add CA\n                                    Exit For\n                                End If\n                            Next\n                            If n = 0 Then\n                                CircleEdges.Add Array(1, D, 3.141592654 * D)\n                            End If\n                        End If\n                    Next\n                    If CircleEdges.Count > 0 Then\n                        Dim Strng As String\n                        Dim TL As Double\n                        Strng = \"\"\n                        TL = 0\n                        For i = 1 To CircleEdges.Count\n                            TL = TL + CircleEdges.Item(i)(0) * CircleEdges.Item(i)(2)\n                            Strng = Strng & CStr(CircleEdges.Item(i)(0)) & \"x Diameter=\" & CStr(CircleEdges.Item(i)(1)) & \"mm; Circumference=\" & CStr(CircleEdges.Item(i)(2)) & \"mm\" & vbNewLine\n                        Next\n                        MsgBox (Strng & vbNewLine & \"Total Cut Length=\" & CStr(TL) & \"mm\")\n                    Else\n                        MsgBox (\"No circular edges found.\")\n                    End If\n                Else\n                    MsgBox (\"Active document has no flat pattern, exiting.\")\n                End If\n            Else\n                MsgBox (\"Active document is not a sheetmetal part, exiting.\")\n                Exit Sub\n            End If\n        Else\n            MsgBox (\"Active document is not a part document, exiting.\")\n            Exit Sub\n        End If\n    End If\nEnd Sub"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: iLogic - how to pass custom property to parts and subassemblies\n                    ", "solution": ["Sub Main Drawing_Number()\n    DrawNo=iProperties.Value(\"Project\", \"Part Number\")\n\n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n\n    Call SetChildrenDrawingNumber(oDoc, DrawNo)   ", "End Sub ", "Sub ", "SetChildrenDrawingNumber(oDoc as Document, DrawNo AS String)", "    If oDoc.ReferencedDocuments.Count > 0 Then", "        For Each oSubDoc in oDoc.ReferencedDocuments", "             If oSubDoc.DocumentType = DocumentTypeEnum.kAsssemblyDocumentObject", "                  oThisDwgNumber = oSubDoc.PropertySets(\"Inventor User Defined Properties\")(\"Drawing Number\").Value", "                  Call ", "SetChildrenDrawingNumber(oSubDoc, oThisDwgNumber)", "             Else", "                  Try", "                      oSubDoc.PropertySets(\"Inventor User Defined Properties\")(\"Drawing Number\").Value = DrawNo", "                  Catch", "                      oSubDoc.PropertySets(\"Inventor User Defined Properties\").Add(DrawNo, \"Drawing Number)", "                  End try", "              End if", "         Next", "     End if", "End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Write BOM number and Quantity to parts\n                    ", "solution": ["doc = ThisDoc.Document\nDim oAssyDef As AssemblyComponentDefinition = doc.ComponentDefinition\nDim oBOM As BOM = oAssyDef.BOM\n\noBOM.PartsOnlyViewEnabled = True\n\nDim oBOMView As BOMView = oBOM.BOMViews.Item(\"Parts Only\")\n\nDim oBOMRow As BOMRow\n", "Dim oSkippedDocs As String", "oSkippedDocs = \"Non-Modifiable Docs that were SKIPPED: \" & vblf &", "\nFor Each oBOMRow In oBOMView.BOMRows\n    'Set a reference to the primary ComponentDefinition of the row\n    Dim oCompDef As ComponentDefinition\n    oCompDef = oBOMRow.ComponentDefinitions.Item(1)\n    Dim CompFullDocumentName As String = oCompDef.Document.FullDocumentName", "    Dim CompFileNameOnly As String", "    Dim index As Integer = CompFullDocumentName.lastindexof(\"\\\")", "    CompFileNameOnly = CompFullDocumentName.substring(index+1)", "    'MessageBox.Show(CompFileNameOnly)", "    ", "If oCompDef.Document.IsModifiable = True Then", "\n\n        Dim Qty As String\n        Qty = oBOMRow.ItemQuantity\n    \n        iProperties.Value(CompFileNameOnly, \"Custom\", \"BOMQTY\") = Qty", "    ", "Else", "        oSkippedDocs = oSkippedDocs & \" - \" & CompFileNameOnly & vblf", "    End if", "Next\u00a0", "MsgBox(oSkippedDocs)\u00a0"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: making a collection of all sub-assemblies\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Inventor VBA - Select faces or edges within a spatial range\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Rotate created sketch TextBox\n                    ", "solution": ["PlanarSketch planarSketch... // is a selected sketch\nSketchLine sketchLine = planarSketch.SketchLines[1];\n\nTextBox sketchText  = planarSketch.TextBoxes.AddFitted(Application.TransientObjects.CreatePoint2d(), \">\");\nsketchText.Style.FontSize = 60;\n \n// the important step!\nsketchText.ShowBoundaries = true; // this will create the boundery geometry!!!\nObjectCollection rotationCollection = Application.TransientObjects.CreateObjectCollection();\nforeach (var item in SketchLineText.BoundaryGeometry) {\n    rotationCollection.Add(item);\n}\n\ndouble angle = 45 * 180 / Math.PI; // form degree to radient\nplanarSketch.RotateSketchObjects(rotationCollection, Application.TransientObjects.CreatePoint2d(), angle);\n\n"], "author": "s.wollner"},
{"created at": [], "solution Title": "\n                        Re: Normal of circular edge\n                    ", "solution": [], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Exporting to STL under high resolution\n                    ", "solution": ["oOptions.Value(\"Resolution\") = 0"], "author": "t_hascj"},
{"created at": [], "solution Title": "\n                        Re: Add LeaderNote to Dimension using the API\n                    ", "solution": ["private static void AddUniqueHoleCountsToDrawingView(Sheet drawingSheet, DrawingView baseView)\n        {\n            try\n            {\n                GeneralDimensions genDims = drawingSheet.DrawingDimensions.GeneralDimensions;\n                LeaderNotes leaderNotes = drawingSheet.DrawingNotes.LeaderNotes;\n                double initialSpacing = 2;\n                double spacingLeft = 0;\n                double spacingRight = 0;\n\n                foreach (LinearGeneralDimension item in UniqueYDimensions)\n                {\n                    ObjectCollection leaderPoints = RadialHoles.m_InventorApp.TransientObjects.CreateObjectCollection();\n                    dynamic dimLine = item.DimensionLine;\n\n                    Point2d dimLineStart = (Point2d)dimLine.StartPoint;\n                    Point2d dimLineEnd = (Point2d)dimLine.EndPoint;\n\n                    Point2d leaderNoteElbow = null;\n                    Point2d leaderNotePosn = null;\n                    GeometryIntent leaderIntent = null;\n                    Point2d viewCentre = baseView.Center;\n                    if (dimLineStart.X < viewCentre.X)\n                    {\n                        if (spacingLeft == 0)\n                        {\n                            leaderNoteElbow = TransGeom.CreatePoint2d(dimLineStart.X, dimLineStart.Y - initialSpacing);\n                            leaderNotePosn = TransGeom.CreatePoint2d(leaderNoteElbow.X + 2, leaderNoteElbow.Y);\n                            spacingLeft += 1;\n                        }\n                        else\n                        {\n                            leaderNoteElbow = TransGeom.CreatePoint2d(dimLineStart.X, dimLineStart.Y - initialSpacing - spacingLeft);\n                            leaderNotePosn = TransGeom.CreatePoint2d(leaderNoteElbow.X + 2, leaderNoteElbow.Y);\n                            spacingLeft += 1;\n                        }\n                        leaderPoints.Add(leaderNotePosn);\n                        leaderPoints.Add(leaderNoteElbow);\n                        leaderIntent = drawingSheet.CreateGeometryIntent(item, dimLineStart);\n                        leaderPoints.Add(leaderIntent);\n                    }\n                    else\n                    {\n                        if (spacingRight == 0)\n                        {\n                            leaderNoteElbow = TransGeom.CreatePoint2d(dimLineStart.X, dimLineStart.Y - initialSpacing);\n                            leaderNotePosn = TransGeom.CreatePoint2d(leaderNoteElbow.X - 2, leaderNoteElbow.Y);\n                            spacingRight += 1;\n                        }\n                        else\n                        {\n                            leaderNoteElbow = TransGeom.CreatePoint2d(dimLineStart.X, dimLineStart.Y - initialSpacing - spacingRight);\n                            leaderNotePosn = TransGeom.CreatePoint2d(leaderNoteElbow.X - 2, leaderNoteElbow.Y);\n                            spacingRight += 1;\n                        }\n                        leaderPoints.Add(leaderNotePosn);\n                        leaderPoints.Add(leaderNoteElbow);\n                        leaderIntent = drawingSheet.CreateGeometryIntent(item, dimLineStart);\n                        leaderPoints.Add(leaderIntent);\n                    }\n                    AttributeSet dimAttSet = item.AttributeSets[1];\n                    Inventor.Attribute numHoles = dimAttSet[\"UniqueHoleCount\"];\n                    Inventor.Attribute holeSize = dimAttSet[\"UniqueHoleSize\"];\n                    //AttributeSet dimAttSet = ;\n                    LeaderNote newLeader = leaderNotes.Add(leaderPoints, numHoles.Value + \" HOLES \u00d8\" + holeSize.Value);\n\n                }\n            }\n            catch (Exception ex)\n            {\n                log.Error(ex.Message, ex);\n            }"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Frame generator - features in frame members don't update when changing membe\n                    ", "solution": [], "author": "Jon.Dean"},
{"created at": [], "solution Title": "\n                        Re: Development: Looking for VBA example of an sidebar addin\n                    ", "solution": ["Sub DockableWindow()\n    Dim oUserInterfaceMgr As UserInterfaceManager\n    Set oUserInterfaceMgr = ThisApplication.UserInterfaceManager\n\n    ' Create a new dockable window\n    Dim oWindow As DockableWindow\n    Set oWindow = oUserInterfaceMgr.DockableWindows.Add(\"SampleClientId\", \"TestWindowInternalName\", \"Test Window\")\n\n    ' Get the hwnd of the dialog to be added as a child\n    ' CHANGE THIS VALUE!\n    Dim hwnd As Long\n    hwnd = 4851096\n\n    ' Add the dialog as a child to the dockable window\n    Call oWindow.AddChild(hwnd)\n\n    ' Don't allow docking to top and bottom\n    oWindow.DisabledDockingStates = kDockTop + kDockBottom\n\n    ' Make the window visible\n    oWindow.Visible = True\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: How to PROGRAMATICALLY make exported WorkFeatures invisible in the assembly\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Exporting multi-sheet IDW to dxf (ilogic)\n                    ", "solution": ["Dim oDocument As DrawingDocument  \noDocument = ThisApplication.ActiveDocument  \n\noPath = ThisDoc.Path\noFileName = ThisDoc.FileName(False) 'without extension\noFolder = oPath & \"\\\" & oFileName\n\n'Check for the DXF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n\nDim DXFAddIn As TranslatorAddIn  \nDXFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC4-122E-11D5-8E91-0010B541CD80}\")  \n  \nDim oContext As TranslationContext  \noContext = ThisApplication.TransientObjects.CreateTranslationContext  \noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism  \n\nDim oOptions As NameValueMap  \noOptions = ThisApplication.TransientObjects.CreateNameValueMap  \n\n'The below line might give issues depending on inventor version. Check forums if you are encountering issues.\nIf DXFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n    Dim strIniFile As String  \n    strIniFile = \"C:\\CAD_2007.ini\"  \n    oOptions.Value(\"Export_Acad_IniFile\") = strIniFile  \nEnd If  \n\nDim oDataMedium As DataMedium  \noDataMedium = ThisApplication.TransientObjects.CreateDataMedium  \n\nDim oSheetName As String\n\nFor Each oSheet In oDocument.Sheets\n\toSheet.Activate\n    oSheetName = oSheet.Name.Split(\":\")(0)\n    oDataMedium.FileName = oFolder & \"\\\" & oSheetName & \".dxf\"\n\tMsgBox(oDataMedium.FileName)\n    DXFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nNext\u00a0"], "author": "MechMachineMan"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: how to convert  cad format (like step, igs ) to inventor files using macros\n                    ", "solution": [], "author": "pineapple.law19"},
{"created at": [], "solution Title": "\n                        Re: iProperties from part to assembly\n                    ", "solution": ["Dim doc = ThisDoc.Document\n\nIf doc.SelectSet.Count = 1 Then\n\tDim occ = doc.SelectSet.Item(1)\n\tDim name As String = iProperties.Value(occ.Name, \"Custom\", \"Name of custom iProperty\")\n\tMessageBox.Show(name, \"Title\")\t\nElse\n\tMessageBox.Show(\"Part is not selected\", \"iLogic\")\nEnd If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Creat List of idw Layers using iLogic\n                    ", "solution": [" ", "Dim", " ", "LayerCollection", " ", "As", " ", "LayersEnumerator", " = ", "thisdoc", ".", "Document", ".", "StylesManager", ".", "Layers", "\n\n        ", "Dim", " ", "Layer", " ", "As", " ", "Layer", "\n\n        ", "'loop through LayerCollection", "\n        ", "For", " ", "Each", " ", "Layer", " ", "In", " ", "LayerCollection", "\n            ", "'assumption If DWG is in the name then alway the first 3 letters!", "\n            ", "Dim", " ", "layerName", " ", "As", " ", "String", " = ", "Layer", ".", "Name", "\n            ", "Dim", " ", "first3Letters", " ", "As", " ", "String", " = ", "Strings", ".", "Left", "(", "layerName", ", 3)\n            ", "If", " ", "first3Letters", " = ", "\"DWG\"", " ", "Then", "\n                ", "'change color", "\n                ", "'Color Black", "\n                ", "Dim", " ", "oColor", " ", "As", " ", "Color", " = ", "Layer", ".", "Color", "\n                ", "oColor", ".", "Red", " = 0\n                ", "oColor", ".", "Green", " = 0\n                ", "oColor", ".", "Blue", " = 0\n                ", "Layer", ".", "Color", " = ", "oColor", "\n            ", "End", " ", "If", "\n        ", "Next"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Trigger iLogic rule based on the value of a custom iProperty\n                    ", "solution": ["Try \n\tIf iProperties.Value(\"Custom\", \"Process\") = \"CNC\" Then\n\t\tiLogicVb.RunRule(\"Name of Rule to create IGS file\")\n\tEnd If\nCatch \n\tMessageBox.Show(\"'\" + \"Process\" + \"'\" + \" iProperty does not exist\", \"iLogic\")\nEnd Try\t"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Error during saving drawing containing iLogic\n                    ", "solution": ["errfound = false", "ActiveSheet = ThisDrawing.Sheet(\"Sheet:3\") ", "Dim int as Integer", "int = Parameter(\"400-02CW1-47-D2-SS.iam\", \"X_FLOORLEG_1\")", "MsgBox(int & vblf & vblf & \"It would appear the parameter is intended for the assembly, instead of the drawing as your forum code has it written\")", "Try", " If int=0 Then", " ActiveSheet.View(\"VIEW 1\").View.Suppressed=True", " ActiveSheet.View(\"VIEW 1A\").View.Suppressed=True", " Else ", " ActiveSheet.View(\"VIEW 1\").View.Suppressed=False", " ActiveSheet.View(\"VIEW 1A\").View.Suppressed=False", " End If", "Catch", " MsgBox(\"Error found with view names!\")", " errfound = True", "End try", "If errfound = False", " MsgBox(\"Rule ran without error!\")", "End if"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to give associative to two drawing objects(Like Notes and symbols)using\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Reg : Inventor MBD APIs\n                    ", "solution": [], "author": "t_remal"},
{"created at": [], "solution Title": "\n                        Re: Change Thumbnail background for Content Center generated parts\n                    ", "solution": ["ThisServer.ColorSchemes.Item(\"Presentation\").Activate\nThisServer.ColorSchemes.BackgroundType = BackgroundTypeEnum.kOneColorBackgroundType"], "author": "Colbj\u00f8rn"},
{"created at": [], "solution Title": "\n                        Re: Constraining an assembly to an assembly with VBA\n                    ", "solution": ["        ", "oLeftJamb", " ", "=", " ", "placeAsm", "(", "\"", "leftJamb", "\"", ", ", "\"", "drJamb", "\"", ", ", "oAsmCompDef", ", ", "oTG", ", ", "oMatrix", ")", "\n        ", "configureJambAsm", "(", "oLeftJamb", ", ", "\"", "left", "\"", ", ", "doorDims", ")", "\n", "'", "        'Get the plane from the selected part.", "\n        ", "addMate", "(", "oLeftJamb", ", ", "\"", "doorPlane", "\"", ", ", "\"", "leftDoor", "\"", ", ", "\"", "flush", "\"", ", ", "0", ", ", "oAsmCompDef", ")", "\n        ", "addMate", "(", "oLeftJamb", ", ", "\"", "rearPlane", "\"", ", ", "\"", "frontdoor", "\"", ", ", "\"", "flush", "\"", ", ", "0", ", ", "oAsmCompDef", ")", "\n        ", "addMate", "(", "oLeftJamb", ", ", "\"", "leftJambFF", "\"", ", ", "\"", "FF", "\"", ", ", "\"", "mate", "\"", ", ", "0", ", ", "oAsmCompDef", ")", "\n", "Sub", " ", "addMate", "(", "part", " ", "As", " ", "ComponentOccurrence", ", ", "planeName", " ", "As", " ", "String", ", ", "assyPlane", " ", "As", " ", "String", ", ", "mate", " ", "As", " ", "String", ", ", "_", "\n            ", "offset", " ", "As", " ", "Double", ", ", "oAsmCompDef", " ", "as", " ", "AssemblyComponentDefinition", ")", "\n        \n    ", "Dim", " ", "oPartPlane", " ", "As", " ", "WorkPlane", "\n    ", "Dim", " ", "pProxyplane", " ", "As", " ", "WorkPlaneProxy", "\n    ", "Dim", " ", "asmPlane", " ", "As", " ", "WorkPlane", "\n                        \n    ", "oPartPlane", " ", "=", "  ", "part", ".", "Definition", ".", "WorkPlanes", ".", "Item", "(", "planeName", ")", " \n    ", "part", ".", "CreateGeometryProxy", "(", "oPartPlane", ", ", "pProxyPlane", ")", "\n    ", "pProxyPlane", ".", "Visible", "()", " ", "=", " ", "False", "\n    ", "asmPlane", " ", "=", " ", "oASMCompDef", ".", "WorkPlanes", ".", "Item", "(", "assyPlane", ")", " \n    \n    ", "If", " ", "mate", " ", "=", " ", "\"", "flush", "\"", "\n        ", "oConstraint", " ", "=", " ", "oAsmCompDef", ".", "Constraints", ".", "AddFlushConstraint", "(", "pProxyPlane", ", ", "asmPlane", ", ", "offset", ")", "\n    ", "Else", " ", "If", " ", "mate", " ", "=", " ", "\"", "mate", "\"", "\n        ", "'", "oConstraint = oAsmCompDef.Constraints.AddFlushConstraint(pLJFrPlane, oFrontPlane, 0)", "\n        ", "oConstraint", " ", "=", " ", "oAsmCompDef", ".", "Constraints", ".", "AddMateConstraint", "(", "pProxyPlane", ", ", "asmPlane", ", ", "offset", ")", "\n    ", "End", " ", "If", "                \n                        \n", "End Sub", "         ", "'", "addMate", "\n\n"], "author": "kejlong"},
{"created at": [], "solution Title": "\n                        Re: iLogic - error when running code  (Exception from HRESULT: 0x80004005 (E_FAI\n                    ", "solution": ["'Set a reference to the active part document", "\n", "Dim", " ", "oDoc", " ", "As", " ", "PartDocument", "\n", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n    \n", "Dim", " ", "oDef", " ", "As", " ", "PartComponentDefinition", "\n", "oDef", " = ", "oDoc", ".", "ComponentDefinition", "\n\t\n", "oDoc", ".", "Update", "\n\t\n\n", "Dim", " ", "oparams", " ", "As", " ", "Parameters", "\n", "Dim", " ", "oparam", " ", "As", " ", "Parameter", "\n", "oparams", " = ", "oDoc", ".", "ComponentDefinition", ".", "Parameters", "\n", "Dim", " ", "exists", " ", "As", " ", "Boolean", "\n", "exists", " = ", "False", "\n\n", "'Find out if parameter exists, if not it will create this parameter in the table", "\n", "For", " ", "Each", " ", "oparam", " ", "In", " ", "oparams", "\n\t", "If", " ", "oparam", ".", "Name", " = ", "\"MAX_Y\"", " ", "Then", " ", "exists", " = ", "True", "\n\t", "If", " ", "oparam", ".", "Name", " = ", "\"MAX_Z\"", " ", "Then", " ", "exists", " = ", "True", "\n\t", "If", " ", "oparam", ".", "Name", " = ", "\"MAX_X\"", " ", "Then", " ", "exists", " = ", "True", "\n", "Next", "\n\n", "'Change the value if the parameter exists otherwise add the parameter\t", "\n", "If", " ", "exists", " ", "Then", "\n\t", "oparams", ".", "Item", "(", "\"MAX_Y\"", ").", "Value", " = ", "Measure", ".", "ExtentsWidth", "\n", "Else", "\n\t", "oparams", ".", "UserParameters", ".", "AddByValue", "(", "\"MAX_Y\"", ",  ", "Measure", ".", "ExtentsWidth", ",  11266)\n", "End", " ", "If", "\n\t\n", "If", " ", "exists", " ", "Then", "\n\t", "oparams", ".", "Item", "(", "\"MAX_X\"", ").", "Value", " = ", "Measure", ".", "ExtentsLength", "        \n", "Else", "\n\t", "oparams", ".", "UserParameters", ".", "AddByValue", "(", "\"MAX_X\"", ", ", "Measure", ".", "ExtentsLength", ",  11266)\n", "End", " ", "If", "\n\t\n", "If", " ", "exists", " ", "Then", "\n\t", "oparams", ".", "Item", "(", "\"MAX_Z\"", ").", "Value", " = ", "Measure", ".", "ExtentsHeight", "        \n", "Else", "\n\t", "oparams", ".", "UserParameters", ".", "AddByValue", "(", "\"MAX_Z\"", ", ", "Measure", ".", "ExtentsHeight", ",  11266)\n", "End", " ", "If", "\t\n\n\n", "'Dim param As Parameter", "\n", "'param = Parameter.Param(\"MAX_Y\") ", "\n", "Parameter", ".", "Param", "(", "\"MAX_Y\"", ").", "ExposedAsProperty", " = ", "True", "\n", "Parameter", ".", "Param", "(", "\"MAX_Y\"", ").", "CustomPropertyFormat", ".", "Precision", " = ", "Inventor", ".", "CustomPropertyPrecisionEnum", ".", "kZeroDecimalPlacePrecision", "\n", "If", " (", "Parameter", ".", "Param", "(", "\"MAX_Y\"", ").", "CustomPropertyFormat", ".", "PropertyType", " <> ", "Inventor", ".", "CustomPropertyTypeEnum", ".", "kNumberPropertyType", ")\n\t", "Parameter", ".", "Param", "(", "\"MAX_Y\"", ").", "CustomPropertyFormat", ".", "ShowTrailingZeros", " = ", "True", " \n\t", "Parameter", ".", "Param", "(", "\"MAX_Y\"", ").", "CustomPropertyFormat", ".", "ShowLeadingZeros", " = ", "False", " \n\t", "Parameter", ".", "Param", "(", "\"MAX_Y\"", ").", "CustomPropertyFormat", ".", "ShowUnitsString", " = ", "False", " \n", "End", " ", "If", "\n\n", "'param =Parameter.Param(\"MAX_Z\") ", "\n", "Parameter", ".", "Param", "(", "\"MAX_Z\"", ").", "ExposedAsProperty", " = ", "True", "\n", "Parameter", ".", "Param", "(", "\"MAX_Z\"", ").", "CustomPropertyFormat", ".", "Precision", " = ", "Inventor", ".", "CustomPropertyPrecisionEnum", ".", "kZeroDecimalPlacePrecision", "  \n", "If", " (", "Parameter", ".", "Param", "(", "\"MAX_Y\"", ").", "CustomPropertyFormat", ".", "PropertyType", " <> ", "Inventor", ".", "CustomPropertyTypeEnum", ".", "kNumberPropertyType", ")\n\t", "Parameter", ".", "Param", "(", "\"MAX_Z\"", ").", "CustomPropertyFormat", ".", "ShowTrailingZeros", " = ", "True", "\n\t", "Parameter", ".", "Param", "(", "\"MAX_Z\"", ").", "CustomPropertyFormat", ".", "ShowLeadingZeros", " = ", "False", " \n\t", "Parameter", ".", "Param", "(", "\"MAX_Z\"", ").", "CustomPropertyFormat", ".", "ShowUnitsString", " = ", "False", " \n", "End", " ", "If", "\n\n", "'param =Parameter.Param(\"MAX_X\") ", "\n", "Parameter", ".", "Param", "(", "\"MAX_X\"", ").", "ExposedAsProperty", " = ", "True", "\n", "Parameter", ".", "Param", "(", "\"MAX_X\"", ").", "CustomPropertyFormat", ".", "Precision", " = ", "Inventor", ".", "CustomPropertyPrecisionEnum", ".", "kZeroDecimalPlacePrecision", "  \n", "If", " (", "Parameter", ".", "Param", "(", "\"MAX_Y\"", ").", "CustomPropertyFormat", ".", "PropertyType", " <> ", "Inventor", ".", "CustomPropertyTypeEnum", ".", "kNumberPropertyType", ")\n\t", "Parameter", ".", "Param", "(", "\"MAX_X\"", ").", "CustomPropertyFormat", ".", "ShowTrailingZeros", " = ", "True", "\n\t", "Parameter", ".", "Param", "(", "\"MAX_X\"", ").", "CustomPropertyFormat", ".", "ShowLeadingZeros", " = ", "False", " \n\t", "Parameter", ".", "Param", "(", "\"MAX_X\"", ").", "CustomPropertyFormat", ".", "ShowUnitsString", " = ", "False", " \n", "End", " ", "If", "\n\n", "oDoc", ".", "Update", "\n"], "author": "t_hascj"},
{"created at": [], "solution Title": "\n                        Re: PatternElements.Item().Suppressed=True Help needed...How do I stop the error\n                    ", "solution": [], "author": "D0UGLAS"},
{"created at": [], "solution Title": "\n                        Re: Insert parts automated\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: AddRectangularPattern Fails using an Occurrence Axis as the ColumnEntity\n                    ", "solution": ["Private Sub patternTEST()\n    Dim oAssyDoc As AssemblyDocument: Set oAssyDoc = ThisApplication.ActiveDocument\n    Dim oCDef As AssemblyComponentDefinition: Set oCDef = oAssyDoc.ComponentDefinition\n    Dim objCol As ObjectCollection: Set objCol = ThisApplication.TransientObjects.CreateObjectCollection\n    Dim oOcc As ComponentOccurrence: Set oOcc = ThisApplication.CommandManager.Pick(kAssemblyOccurrenceFilter, \"Pick Occ\")\n    Call objCol.Add(oOcc)\n    Dim oOccDoc As Document: Set oOccDoc = oOcc.Definition.Document\n    Dim oAxis As WorkAxis: Set oAxis = oOccDoc.ComponentDefinition.WorkAxes.Item(1) 'X Axis\n    Dim oAxisProxy As WorkAxisProxy: Call oOcc.CreateGeometryProxy(oAxis, oAxisProxy)\n    Dim oPattern As RectangularOccurrencePattern: Set oPattern = oCDef.OccurrencePatterns.AddRectangularPattern(objCol, oAxisProxy, True, 144.25, 3)\nEnd Sub"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Delete Specific sketches by name with Macro\n                    ", "solution": [], "author": "noah"},
{"created at": [], "solution Title": "\n                        Re: Available API commands\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Trying to get Rev Level from idw and print to text file\n                    ", "solution": ["idwRev = oDrawDoc.PropertySets.Item(\"Summary Information\").Item(\"Revision Number\").Value", "oAppend.WriteLine(idwname + Char(9) + idwREV)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Brpwser Pane with Assembly Components and referenced drawings\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: How to enable  \u201cAccept successful blends\u201d using .NET API\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Templates\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Trying to write to an embedded excel file using iLogic\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic Save pdf/dwg to folder above active folder\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Controlling Arrowheads on Drawing Dimensions with VBA\n                    ", "solution": ["Sub Main()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.Sheets.Item(1)\n            \n    Dim oDimension As DrawingDimension\n    For Each oDimension In oSheet.DrawingDimensions\n        If oDimension.ModelValue <= (10 * 2.54) Then\n            oDimension.ArrowheadsInside = False\n        Else\n            oDimension.ArrowheadsInside = True\n        End If\n    Next\n    Call oSheet.Update\n    Call oDoc.Update\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Import part into assembly using ilogic\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Project Geometry from Assembly Sketch to Part Sketch\n                    ", "solution": ["' Set a reference to the assembly component definition.\n    Dim oAsmCompDef As AssemblyComponentDefinition = ThisServer.ActiveDocument.ComponentDefinition\n    Dim oOcc2 As ComponentOccurrence= oAsmCompDef.Occurrences.ItemByName(\"Platta:1\")\n\n    ' Get GrundSkiss\n    Dim oSketch1 As PlanarSketch = oAsmCompDef.Sketches(\"GrundSkiss\")\n\t\n\t'Get TopSketch in Platta\n\tDim oSketch2 As PlanarSketch= oOcc2.Definition.Sketches(\"TopSketch\")\n\n    Call oSketch1.CopyContentsTo(oSketch2)"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Using Rules to adjust dimensions\n                    ", "solution": ["If S1=2 Then \nd87=19.1\nd86=152\nd88=78\nd85=92.1\nd89=63\nd104=60.3\n\nEnd If\n\nIf S1=4 Then \nd87=23.9\nd86=229\nd88=135\nd85=157.2\nd89=76\nd104=114.3\n\nEnd If"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Batch PDF Export from assembly not working\n                    ", "solution": ["oPath = ThisDoc.Path\noPDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\noOptions.Value(\"All_Color_AS_Black\") = 0\noOptions.Value(\"Remove_Line_Weights\") = 0\noOptions.Value(\"Vector_Resolution\") = 400\noOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\noOptions.Value(\"Custom_Begin_Sheet\") = 1\noOptions.Value(\"Custom_End_Sheet\") = 1\n\noASMName = \"ha\"\noRevNum = \"01\"\n\noFolder = oPath & \"\\\" & oAsmName & \"-Rev_\" & oRevNum & \"-PF\" & \"\\\" & oAsmName & \"-Rev_\" & oRevNum & \"-PDF\"\n\nIf Not System.IO.Directory.Exists(oFolder) Then\n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n'- - - - - - - - - - - - -\n\n'- - - - - - - - - - - - -Top Level Drawing - - - - - - - - - - - -\noAsmDrawing = ThisDoc.ChangeExtension(\".dwg\")\n'oAsmDrawingDoc = ThisApplication.Documents.Open(oAsmDrawing, True)\noAsmDrawingDoc = ThisApplication.ActiveDocument\n\n'NEW SECTION TO HANDLE ALL CASES\nIf RIGHT(oAsmDrawingDoc.FullFileName, 4) <> \".idw\" Then\n\toAsmDrawingName = oAsmDrawingDoc.DisplayName & \".\"\nElse\n\toAsmDrawingName = Left(oAsmDrawingDoc.DisplayName, Len(oAsmDrawingDoc.DisplayName) -3)\t \nEnd If\n'END OF NEW SECTION TO HANDLE ALL CASES\n\noDataMedium.FileName = oFolder & \"\\\" & oAsmDrawingName & \"pdf\"\n\n\n MsgBox(oAsmDrawingName & vbLf & oDataMedium.FileName)\n 'if windows is set to hide file extensions, oAsmDrawing name becomes a shorted version of the display name\n 'If it is set to show, it becomes the display name with a \".\" following it.\n \n 'The common practice I have seen is to shorten the display name by 4 to remove the \".\" and then to change the oDataMedium.Filename to have \".pdf\"\n 'This isn't necessary. And it will still produce drawings of the wrong name if the file extension setting is not correct.\n \n 'You could always modify the code to check whether or not it has a file extension and change the name accordingly before export to make the code work\n ' in all situations without having to change computer settings.\n\nCall oPDFAddIn.SaveCopyAs(oAsmDrawingDoc, oContext, oOptions, oDataMedium)"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How can I turn off the welds in iLogic 2018 ?\n                    ", "solution": ["a.ComponentDefinition.Occurrences.Item(1).Visible = True"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Replace dll\n                    ", "solution": [], "author": "w.pepping"},
{"created at": [], "solution Title": "\n                        Re: Problem with Attribute Sets\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Simple UNDO rule\n                    ", "solution": ["Dim oCommandMgr As CommandManager \noCommandMgr = ThisApplication.CommandManager \n\n' Get control definition for the line command. \nDim oControlDef As ControlDefinition \n oControlDef = oCommandMgr.ControlDefinitions.Item( _ \n                                             \"AppUndoCmd\")  \n' Execute the command. \nCall oControlDef.Execute"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Mark up .idw with ilogic\n                    ", "solution": [], "author": "jletcher"},
{"created at": [], "solution Title": "\n                        Re: Haggard VBA code to count bends and add time to iproperty\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: automatically create a second sheet processing\n                    ", "solution": ["Sub CreateFlatPatternView()\n' Set a reference to the drawing document.\n' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument\nSet oDrawDoc = ThisApplication.ActiveDocument\n'Set a reference to the active sheet.\nDim oSheet As Sheet\nSet oSheet = oDrawDoc.ActiveSheet\nDim tmpView As DrawingView\nFor Each tmpView In oSheet.DrawingViews\nIf tmpView.Name = \"LASER\" Then\nMsgBox (\"Ansicht LASER existiert bereits. Code wird verlassen.\")\nExit Sub\nEnd If\nNext\n' Create a new NameValueMap object\nDim oBaseViewOptions As NameValueMap\nSet oBaseViewOptions = ThisApplication.TransientObjects.CreateNameValueMap\n' Set the options to use when creating the base view.\nCall oBaseViewOptions.Add(\"SheetMetalFoldedModel\", False)\n' Open the sheet metal document invisibly\nDim oModel As Document\nSet oModel = oSheet.DrawingViews.Item(1).ReferencedDocumentDescriptor.ReferencedDocument 'ThisApplication.Documents.Open(\"C:\\temp\\SheetMetal.ipt\", False)\n' Create the placement point object.\nDim oPoint As Point2d\nSet oPoint = ThisApplication.TransientGeometry.CreatePoint2d(oSheet.Width + 10, oSheet.Height / 2)\n' Create a base view.\nDim oBaseView As DrawingView\nSet oBaseView = oSheet.DrawingViews.AddBaseView(oModel, oPoint, 1, _\nkDefaultViewOrientation, kHiddenLineRemovedDrawingViewStyle, _\n, , oBaseViewOptions)\noBaseView.Name = \"LASER\"\nEnd Sub"], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: To Switch Drawing Standard in a Multi-Sheet drawing\n                    ", "solution": ["Sub Main()\t\t'SetObjectDefaultsStyle() \n    Dim oDoc As DrawingDocument \n    oDoc = ThisApplication.ActiveDocument \n\tDim oSheet As Sheet\n\toSheet = ThisDoc.Document.ActiveSheet\n\tDim oSheets As sheets\n\toSheets = oDoc.sheets\n\t\n    On Error Resume Next \n    \n    Dim oCurrentSheet As Sheet\n\toCurrentSheet = ThisDoc.Document.ActiveSheet\n\toCurrentSheet.Activate\n\toCurrentSheet.Update\n\n\tOn Error Resume Next \n\t\t\n\tIf oSheet.Size = DrawingSheetSizeEnum.kADrawingSheetSize Then\n    kStandardName = \"STD A-Size\" \n    kObjDefaultsName = \"OD SIZE-A\" \n\tElse If oSheet.Size = DrawingSheetSizeEnum.kBDrawingSheetSize Then\n    kStandardName = \"STD B-Size\" \n    kObjDefaultsName = \"OD SIZE-B\"\n\tElse If oSheet.Size = DrawingSheetSizeEnum.kDDrawingSheetSize Then\n    kStandardName = \"STD D-Size\" \n    kObjDefaultsName = \"OD SIZE-D\"\n\tElse\n\tMessageBox.Show(\"Message: \" & \"DRAWING SIZE NOT FOUND!\", \"Title\")\n    End If\n\t\n    Dim oStylesMgr As DrawingStylesManager \n  \toStylesMgr = oDoc.StylesManager \n    Dim oStandard As DrawingStandardStyle \n    oStandard = oStylesMgr.StandardStyles.Item(kStandardName) \n    \n    If oStandard Is Nothing Then\n\t\toStandard = oStylesMgr.StandardStyles.Item(1).Copy(kStandardName) \n    End If \n    \n    ' create object defaults \n    Dim oObjDefaults As ObjectDefaultsStyle \n\t\toObjDefaults = oStylesMgr.ObjectDefaultsStyles.Item(kObjDefaultsName) \n    \n    If oObjDefaults Is Nothing Then\n\t\toObjDefaults = oStylesMgr.ObjectDefaultsStyles.Item(1).Copy(kObjDefaultsName) \n    End If \n    \n    oStandard.ActiveObjectDefaults = oObjDefaults \n   ' activate standard \n    oStylesMgr.ActiveStandardStyle = oStandard\n\t\nEnd Sub\n\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Code not working in 2018\n                    ", "solution": ["C:\\Users\\engineer\\Desktop\\Inventor 2018 code\\625 Temps\\###.idw"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: To Model Title iProperty\n                    ", "solution": ["\u00a0oTitle = \"<Br/><StyleOverride Bold='false' Underline='false'><Property Document='model' PropertySet='Inventor Summary Information' Property='Title' FormatID='{F29F85E0-4FF9-1068-AB91-08002B27B3D9}' PropertyID='2'>Title</Property></StyleOverride>\""], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Get Inventor's macros directory location programatically (VBA)\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Change Section View Direction iLogic\n                    ", "solution": ["Dim oDoc As DrawingDocument\noDoc = ThisApplication.ActiveDocument\n\nDim oView As SectionDrawingView\n'expects the 2nd view on the sheet to be a section view\noView = oDoc.ActiveSheet.DrawingViews.Item(2)\n\n'flip the section view direction\noView.ReverseDirection"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Run rule with macro but with arguments\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: ilogic form help - drop down box\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: HoleThreadNotes.Add does not work position text as intended!\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Save then Check In PDF\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Add If and Then to this drawing sheet naming iLogic Code\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Design Assistant & OLE links\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic to look for missing balloons\n                    ", "solution": ["If Not oRow.Ballooned And oRow.Item(2).Value > ", "\"0\"", " Then"], "author": "waynehelley"},
{"created at": [], "solution Title": "\n                        Re: Inventor Workspace in Panel visual studio\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: ilogic to change subassembly iProperty description\n                    ", "solution": ["Sub Main()\n\tDim oDoc As Document\n\toDoc = ThisApplication.ActiveDocument\n\n    Dim oTransMgr As TransactionManager\n\toTransMgr = ThisApplication.TransactionManager\n\toTrans = oTransMgr.StartTransaction(oDoc, \"Rule - Append Description\")\n\t\n\tDim oAsmDef As AssemblyComponentDefinition\n\toAsmDef = oDoc.ComponentDefinition\n   \n\n\tDim oSubDoc As Document   \n\tDim oOccName As String\n\tDim pos As Integer\n\tDim cName As String\n\tDim oDescripProp As Inventor.Property\n\t\n\tFor Each oSubDoc In oDoc.AllReferencedDocuments\n\t\tTry\n\t\t\tIf oSubDoc.isModifiable = True\n\t\t\t\toOccSet = oAsmDef.Occurrences.AllReferencedOccurrences(oSubDoc)\n\t\t\t\tIf oOccSet.Count <> 0 Then\n\t\t\t\t\toOccName = oOccSet.Item(1).Name\n\t\t\t\t\tpos = InStrRev(oOccName, \":\", - 1) - 1\n\t\t\t\t\t\n\t\t\t\t\tIf pos = - 1 Then\n\t\t\t\t\t\tcName = oOccName\n\t\t\t\t\tElse\n\t\t\t\t\t\tcName = Left(oOccName, pos)\n\t\t\t\t\tEnd If\n\t\t\t\t\t\n\t\t\t\t\toDescripProp = oSubDoc.PropertySets(\"Design Tracking Properties\")(\"Description\")\n\t\t\t\t\t\n\t\t\t\t\toDescripProp.Value = oDescripProp.Value & \" \" & cName\n\t\t\t\tElse\n\t\t\t\t\tMsgBox(\"Referenced Doc (likely a derived part source) not found: \" & vbLf & vbLf & oSubDoc.FullFileName & vbLf & vbLf & \"Description for this file not modified.\")\n\t\t\t\tEnd If\n\t\t\tEnd If\n\t\tCatch\n\t\t\tMsgBox(\"Error with \" & oSubDoc.FullFileName)\n\t\t\toTrans.Abort\n\t\t\tExit Sub\n\t\tEnd Try\n\tNext\n\t\n\toTrans.End\nEnd Sub", "Sub Main()\n\tDim oDoc As Document\n\toDoc = ThisApplication.ActiveDocument\n\n    Dim oTransMgr As TransactionManager\n\toTransMgr = ThisApplication.TransactionManager\n\toTrans = oTransMgr.StartTransaction(oDoc, \"Rule - Append Description\")\n\t\n\tDim oAsmDef As AssemblyComponentDefinition\n\toAsmDef = oDoc.ComponentDefinition\n   \n\n\tDim oSubDoc As Document   \n\tDim oOccName As String\n\tDim pos As Integer\n\tDim cName As String\n\tDim oDescripProp As Inventor.Property\n\t\n'\tFor Each oSubDoc In oDoc.AllReferencedDocuments\n", "        For Each oSubDoc in oDoc.ReferencedDocuments", "\n\t\tTry\n\t\t\tIf oSubDoc.isModifiable = True\n\t\t\t\toOccSet = oAsmDef.Occurrences.AllReferencedOccurrences(oSubDoc)\n\t\t\t\tIf oOccSet.Count <> 0 Then\n\t\t\t\t\toOccName = oOccSet.Item(1).Name\n\t\t\t\t\tpos = InStrRev(oOccName, \":\", - 1) - 1\n\t\t\t\t\t\n\t\t\t\t\tIf pos = - 1 Then\n\t\t\t\t\t\tcName = oOccName\n\t\t\t\t\tElse\n\t\t\t\t\t\tcName = Left(oOccName, pos)\n\t\t\t\t\tEnd If\n\t\t\t\t\t\n\t\t\t\t\toDescripProp = oSubDoc.PropertySets(\"Design Tracking Properties\")(\"Description\")\n\t\t\t\t\t\n\t\t\t\t\toDescripProp.Value = oDescripProp.Value & \" \" & cName\n\t\t\t\tElse\n\t\t\t\t\tMsgBox(\"Referenced Doc (likely a derived part source) not found: \" & vbLf & vbLf & oSubDoc.FullFileName & vbLf & vbLf & \"Description for this file not modified.\")\n\t\t\t\tEnd If\n\t\t\tEnd If\n\t\tCatch\n\t\t\tMsgBox(\"Error with \" & oSubDoc.FullFileName)\n\t\t\toTrans.Abort\n\t\t\tExit Sub\n\t\tEnd Try\n\tNext\n\t\n\toTrans.End\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iAssembly and iParts in iLogic\n                    ", "solution": ["doc = ThisDoc.Document\ncompDef = doc.ComponentDefinition\nfactory = compDef.iAssemblyFactory\ntable = factory.TableRows 'or factory.TableColumns if that works better\ntableRow = table.Item(1) 'row 1\ntableCell = tableRow.Item(2) 'column 2\nMessageBox.Show(tableCell.Value, \"Title\")\ntableCell.Value = \"Your Data Here\"\ntableCell = tableRow.Item(2) 'You shouldn't need this line but _ \n'I got an error if I just tried to display the cell right after _\n'I changed the cell... it changed just didn't want to display message\nMessageBox.Show(tableCell.Value, \"Title\")"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Problem with Inventor Apprentice\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Convert AutoCAD Mechanical 3D solids into .Ipt solids with sketches\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Location Setting: Prompt For Filename\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Assign surface body to layer\n                    ", "solution": ["Dim", " ", "doc", " ", "As", " ", "DrawingDocument", " \n", "doc", " = ", "ThisDoc", ".", "Document", " \n\n", "Dim", " ", "oDC", " ", "As", " ", "DrawingCurve", "\n", "Dim", " ", "oDCS", " ", "As", " ", "DrawingCurveSegment", " \n\n", "For", " ", "Each", " ", "oDC", " ", "In", " ", "doc", ".", "Sheets", "(1).", "DrawingViews", "(1).", "DrawingCurves", " \n\t", "For", " ", "Each", " ", "oDCS", " ", "In", " ", "oDC", ".", "Segments", " \n\t\t", "If", " ", "Not", " ", "oDCS", ".", "Parent", ".", "ModelGeometry", ".", "Parent", ".", "IsSolid", " ", "Then", " \n\t\t\t", "oDCS", ".", "Layer", " = ", "doc", ".", "StylesManager", ".", "Layers", ".", "Item", "(2)\n\t\t", "End", " ", "If", " \n\t", "Next", " \n", "Next", " "], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Using ilogic to check scales are the same on a sheet.\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument \nDim oSheet As Sheet\nDim oCurrentSheet As Sheet\nDim oSheets As Sheets\nDim oView As DrawingView\nDim oViews As DrawingViews\nDim oScale As Double\nDim oFView As String\n\n'get the current drawing\noDrawDoc = ThisDoc.Document\n'get the active sheet\noCurrentSheet = oDrawDoc.ActiveSheet\n'get the sheets collection\noSheets = oDrawDoc.Sheets\n'look at each sheet\nFor Each oSheet In oSheets\n\toFlag = True 'set flag to default value \n\toSheet.Activate 'activate the sheet\n\toViews = oSheet.DrawingViews 'get the views collection\n\toFView = oSheet.DrawingViews(1).Name 'adds the NAME of the first view in sheet to oFView\n\toScale = ActiveSheet.View(oFView).Scale 'sets the SCALE of the first view to OScale\n\t'look at each view\n\tFor Each oView In oViews\n\t\t'compare view scale to 1st view scale\n\t\tIf oView.Scale <> oScale Then\n\t\t\toFlag = False 'trip the flag\n\t\tEnd If\n\tNext\n\t'alert user if flag is tripped (indicating differing scales)\n\tIf oFlag = False Then\t\n\t\tMessageBox.Show(\"Some drawing views on \" & _\n\t\toSheet.Name & \" are not the same scale\", \"Check Scales\")\n\tEnd If\nNext\n\n'set original sheet as active\noCurrentSheet.Activate"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic search each sketched symbol\n                    ", "solution": ["' Set the value for the first sketched symbol' on the current sheet\nDim oSS As SketchedSymbol\n'oSS = ActiveSheet.Sheet.SketchedSymbols(1)\n\nFor each oSS in ActiveSheet.Sheet.SketchedSymbols\n\nDim oTB As TextBox\nFor Each oTB In oSS.Definition.Sketch.TextBoxes\n  If oTB.Text = \"<REQ'D>\" Then\n    Call oSS.SetPromptResultText(oTB, \"\")\n    End If\n  If oTB.Text = \"QTY\" Then\n    Call oSS.SetPromptResultText(oTB, \"\")\n  End If\n   If oTB.Text = \"<QTY>\" Then\n    Call oSS.SetPromptResultText(oTB, \"\")\n  End If\nNext\nNext"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Sum of a Custom iProperty Without Adding the Suppressed Components\n                    ", "solution": ["Sub Main()\n    ThisApplication.[_LibraryDocumentModifiable] = True\n    Dim openDoc As Document\n    openDoc = ThisDoc.Document\n    Call SetInitialMSRPValues(openDoc)\n    Call SumMSRP(openDoc)\n    ", "ThisApplication.[_LibraryDocumentModifiable] = False\n", "End Sub\n\nSub SetInitialMSRPValues(openDoc As Document)\n    Dim docFile As Document\n    For Each docFile In openDoc.AllReferencedDocuments\n        Dim propertyName1 As String = \"MSRP\" \n        oCustomPropertySet = docFile.PropertySets.Item(\"Inventor User Defined Properties\")\n        Try  \n            oProp = oCustomPropertySet.Item(propertyName1)\n        Catch\n            oCustomPropertySet.Add(0, propertyName1)\n        End Try\n    Next\nEnd Sub\n\nSub SumMSRP(openDoc As Document)\n\n    iProperties.Value(\"Custom\", \"MSRP\") = 0\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    oAsmCompDef = openDoc.ComponentDefinition\n\n    Dim oOccurrence As ComponentOccurrence\n    For Each oOccurrence In oAsmCompDef.Occurrences\n\tIf oOccurrence.Suppressed = True\n        MsgBox(oOccurrence.Name & \" is suppressed. Excluding from MRSP!\")\n    Else\t\t\t\t\n\t    If Not TypeOf oOccurrence.Definition Is VirtualComponentDefinition Then\t            \n        \txNumber = iProperties.Value(\"Custom\", \"MSRP\") \n        \tyNumber = iProperties.Value(oOccurrence.Name, \"Custom\", \"MSRP\")\n        \tsumNumber = xNumber + yNumber\n        \tiProperties.Value(\"Custom\", \"MSRP\") = Round (sumNumber,2)\n        \tMSRP = sumNumber\t             \n        End If 'Virtual Component\n\tEnd If 'Suppressed\n    Next\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Want to export DWG + PDF after converting inches to mm\n                    ", "solution": ["Public Sub UpdateRevisionTableStyle()\n\n'check if the active document is a drawing document\n If ThisApplication.ActiveDocumentType = kDrawingDocumentObject Then\nDim oIDW As DrawingDocument\nSet oIDW = ThisApplication.ActiveDocument\n \nDim oIDWStyles As Inventor.DrawingStylesManager\nSet oIDWStyles = oIDW.StylesManager\n\n'Debug.Print oIDWStyles.DimensionStyle\nMsgBox oIDWStyles.DimensionStyles.Item(\"BE_DIMENSION\").LinearUnits\n\noIDWStyles.DimensionStyles.Item(\"YOUR DIM STYLE\").LinearUnits = kInchLengthUnits\n'YOUR CODE HERE\noIDWStyles.DimensionStyles.Item(\"YOUR DIM STYLE\").LinearUnits= kMillimeterLengthUnits \n\n Else\n\n End If\n End Sub", "Dim oDrawDoc As DrawingDocument \nDim oSheet As Sheet\n\n'get the current drawing\noDrawDoc = ThisDoc.Document\n'get the active sheet\noSheet = oDrawDoc.ActiveSheet\n\n' Set a reference to the first general dimension in the collection.\nDim oGeneralDim As GeneralDimension\noGeneralDim = oSheet.DrawingDimensions.GeneralDimensions.Item(1)\n\n' Set a reference to the dimension style of that dimension.\nDim oDimStyle As DimensionStyle\noDimStyle = oGeneralDim.Style\n\n' Change units property of the dimension style to mm\n' This will modify all dimensions that use this style.\noDimStyle.LinearUnits = UnitsTypeEnum.kMillimeterLengthUnits \n\t\nMessageBox.Show(\"EXPORT DXF CODE HERE\", \"iLogic\")\n\t\n' Change units property of the dimension style back to inches\n' This will modify all dimensions that use this style.\noDimStyle.LinearUnits = UnitsTypeEnum.kInchLengthUnits \n"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Could not change a part multi-value parameter from Assembly using ilogic\n                    ", "solution": ["' set a reference to the assembly component definintion.' This assumes an assembly document is open.\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n'Iterate through all of the occurrences\nDim oOccurrence As ComponentOccurrence\nFor Each oOccurrence In oAsmCompDef.Occurrences\n'check for and skip virtual components'(in case a virtual component trips things up)\nIf Not TypeOf oOccurrence.Definition Is VirtualComponentDefinition Then\nParameter.Quiet = True\nParameter(oOccurrence.Name, \"CABLE_TRAY_VISI\") = \"OFF\"", "iLogicVb.UpdateWhenDone = True", "Else\nEnd If\nNext", "' set a reference to the assembly component definintion.' This assumes an assembly document is open.\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n'Iterate through all of the occurrences\nDim oOccurrence As ComponentOccurrence\nFor Each oOccurrence In oAsmCompDef.Occurrences\n'check for and skip virtual components'(in case a virtual component trips things up)\nIf Not TypeOf oOccurrence.Definition Is VirtualComponentDefinition Then\nComponent.IsActive(oOccurrence.Name) = False\nElse\nEnd If\nNext"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Replace symbol from Template\n                    ", "solution": ["Public Sub main()\n Dim a As Application\n  a = ThisApplication \nDim b As DrawingDocument \n b = a.ActiveDocument \nDim temp As DrawingDocument \ntemp = a.Documents.Open(\"C:\\Vault\\Projects\\Temp.dwg\", False)' This needs to be your template drawing. \nDim sks As SketchedSymbolDefinition\nsks = temp.SketchedSymbolDefinitions.Item(1) \n'MsgBox (sks.Name) \nFor Each sks In temp.SketchedSymbolDefinitions\n Call sks.CopyTo(b, True) \nNext\n End Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: PRINT PDF AND VAULT\n                    ", "solution": ["oDrawDoc", ".", "Close", "(true)"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Personalizar el centro de contenido con Perfiles nuevos\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Export Inventor Model to AutoCad\n                    ", "solution": ["Public Sub Main()\n    ' Get the DWG translator Add-In.\n    Dim DWGAddIn As TranslatorAddIn\n    DWGAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\")\n\n    'Set a reference to the active document (the document to be published).\n    Dim oDocument As Document\n    oDocument = ThisApplication.ActiveDocument\n\n    Dim oContext As TranslationContext\n    oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = kFileBrowseIOMechanism\n\n    ' Create a NameValueMap object\n    Dim oOptions As NameValueMap\n    oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n    ' Create a DataMedium object\n    Dim oDataMedium As DataMedium\n    oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n    ' Check whether the translator has 'SaveCopyAs' options\n    If DWGAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\n        Dim strIniFile As String\n        strIniFile = \"C:\\tempDWGOut.ini\"\n        ' Create the name-value that specifies the ini file to use.\n        oOptions.Value(\"Export_Acad_IniFile\") = strIniFile\n    End If\n\n    'Set the destination file name\n    oDataMedium.FileName = \"c:\\tempdwgout.dwg\"\n\n    'Publish document.\n    Call DWGAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Filter data excel with ilogic\n                    ", "solution": ["AddVbRule \"clsconfig\"\n\nSub Main()\n\titrigger = sModeloBomba\n\n\tDim oExcel as New clsconfig\n\tDim Archivo As String = oExcel.FicheroExcel \n\tDim Hoja As String = oExcel.HojaBD\n\t\n\tCall ListadoElementos(Archivo, Hoja, sModeloBomba)\n\nEnd Sub\n\n\nSub ListadoElementos (ArchivoExcel as String, HojaDatos As String, ModeloBomba As String)\n\tDim ListaModelos as New ArrayList\n\tDim Filtro As New ArrayList\n\t\n\tGoExcel.Open(ArchivoExcel, HojaDatos)\n\t\n\tFor fila = 1 To 200\n\t\t\tDim UltimaReferencia As String\u00a0=\u00a0GoExcel.CellValue(\"A\"\u00a0&\u00a0fila\u00a0+\u00a01)\n\t\t\tDim UltimoModelo As String = \u00a0GoExcel.CellValue(\"B\"\u00a0&\u00a0fila +\u00a01)\n\t\t\tListaModelos.add (UltimaReferencia & \",\" &   UltimoModelo)\n\tNext\n\t\t\n\tFor Each i In ListaModelos\n\t\t\tDim cadena As String = i\n\t\t\tDim modelo () = cadena.split(\",\")\n\t\t\tIf  String.equals (modelo(1), ModeloBomba.toUpper) Then\n\t\t\t\tfiltro.add(modelo(0))\n\t\t\tEnd If\n\tNext\n\t\n\tMultiValue.List(\"ReferenciasBombas\") = filtro\n\n\t'myMatDescription = InputListBox(\"Select from the list\", listaModelos, listaModelos.Item(0), \"iLogic\", \"Available Materials\")\n\n\nEnd Sub", "' clsConfig\n\n'Utiliza una hoja de excel como base de informacion\n\nPublic Class clsConfig\n\t' Excel\n\tPublic FicheroExcel As String\n\tPublic HojaBD As String\n\tPublic HojaDPL As String\n\tPublic HojaPico As String\n\tPublic HojaSD As String\n\n \tSub Main\n\t\n\tEnd Sub\n \n\tPublic Sub New()\n\t\t'Dim Ruta As String = ThisDoc.Path\n\t\tFicheroExcel = \"N:\\PROY EXT\\DELINEACI\u00d3N\\INVENTOR\\CFG INV2012\\CONFIGURACION ENTORNO\\Reglas\\Gestor\\Bombas Wilo.xlsx\"\n\t\t\n\t\t\n\t\t' Base de Datos\n\t\tHojaBD = \"BD\"\n\t\tHojaDPL = \"DPL\"\n\t\tHojaPico = \"Pico\"\n\t\tHojaSD = \"SD\"\n\t\t\n\tEnd Sub\n\n\t\nEnd Class"], "author": "jplujan"},
{"created at": [], "solution Title": "\n                        Re: Putting Object Occurence in a table/Parts List\n                    ", "solution": ["Sub Main()\n\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = oDoc.ActiveSheet.DrawingViews.Item(1).ReferencedDocumentDescriptor.ReferencedDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    Set oDef = oAsmDoc.ComponentDefinition\n        \n    Dim sensorCnt As Integer\n    Dim oContents() As String\n    Dim IsInteger As Boolean\n    Dim LArray() As String\n    Dim occ As ComponentOccurrence\n    For Each occ In oDef.Occurrences\n        \n        LArray = Split(occ.Name, \":\")\n        \n        IsInteger = ConvertToInteger(LArray(1))\n        \n        If IsInteger = False Then\n            sensorCnt = sensorCnt + 1\n        End If\n    Next\n    \n    If sensorCnt > 0 Then\n        sensorCnt = sensorCnt * 2\n        ReDim oContents(sensorCnt - 1) As String\n        Dim i As Integer\n        i = 0\n        For Each occ In oDef.Occurrences\n            LArray = Split(occ.Name, \":\")\n            IsInteger = ConvertToInteger(LArray(1))\n            If IsInteger = False Then\n                oContents(i) = LArray(0)\n                oContents(i + 1) = LArray(1)\n                i = i + 2\n            End If\n        Next\n    End If\n    \n    ' Set a reference to the active sheet.\n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    \n    ' Set the column titles\n    Dim oTitles(1 To 2) As String\n    oTitles(1) = \"Part Number\"\n    oTitles(2) = \"Sensor Description\"\n    \n    \n    ' Set the column widths (defaults to the column title width if not specified)\n    Dim oColumnWidths(1 To 2) As Double\n    oColumnWidths(1) = 4.5\n    oColumnWidths(2) = 5.5\n    \n    oDoc.StylesManager.ActiveStandardStyle.ActiveObjectDefaults.TableStyle.HeadingGap = 0.1\n    \n    ' Create the custom table\n    Dim oCustomTable As CustomTable\n    Set oCustomTable = oSheet.CustomTables.Add(\"Input Locations & Descriptions\", ThisApplication.TransientGeometry.CreatePoint2d(45, 15), _\n                                        2, sensorCnt / 2, oTitles, oContents, oColumnWidths)\n    \n    ' Change the 3rd column to be left justified.\n    oCustomTable.Columns.Item(1).ValueHorizontalJustification = kAlignTextLeft\n    oCustomTable.Columns.Item(2).ValueHorizontalJustification = kAlignTextLeft\n\n    ' Create a table format object\n    Dim oFormat As TableFormat\n    Set oFormat = oSheet.CustomTables.CreateTableFormat\n\n    ' Set inside line color to red.\n    oFormat.InsideLineColor = ThisApplication.TransientObjects.CreateColor(255, 0, 0)\n    \n    ' Set outside line weight.\n    oFormat.OutsideLineWeight = 0.05\n    \n    ' Modify the table formats\n    oCustomTable.OverrideFormat = oFormat\n    \n\n    \nEnd Sub\n\nFunction ConvertToInteger(v1 As String) As Boolean\n    On Error GoTo 100:\n     Dim i As Integer\n     i = CInt(v1)\n     ConvertToInteger = True\n     Exit Function\n100:\n     ConvertToInteger = False\nEnd Function\n\n\n", "Sub Main()\n\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = oDoc.ActiveSheet.DrawingViews.Item(1).ReferencedDocumentDescriptor.ReferencedDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    Set oDef = oAsmDoc.ComponentDefinition\n        \n    Dim sensorCnt As Integer\n    Dim oContents() As String\n    Dim IsInteger As Boolean\n    Dim LArray() As String\n    Dim occ As ComponentOccurrence\n    ", "For Each occ In oDef.AllLeafOccurrences", "        On Error Resume Next", "        LArray = Split(occ.Name, \":\")\n        \n        IsInteger = ConvertToInteger(LArray(1))\n        \n        If IsInteger = False Then\n            sensorCnt = sensorCnt + 1\n        End If\n    Next\n    \n    If sensorCnt > 0 Then\n        sensorCnt = sensorCnt * 2\n        ReDim oContents(sensorCnt - 1) As String\n        Dim i As Integer\n        i = 0\n        For Each occ In oDef.Occurrences\n            LArray = Split(occ.Name, \":\")\n            IsInteger = ConvertToInteger(LArray(1))\n            If IsInteger = False Then\n                oContents(i) = LArray(0)\n                oContents(i + 1) = LArray(1)\n                i = i + 2\n            End If\n        Next\n    End If\n    \n    ' Set a reference to the active sheet.\n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    \n    ' Set the column titles\n    Dim oTitles(1 To 2) As String\n    oTitles(1) = \"Part Number\"\n    oTitles(2) = \"Sensor Description\"\n    \n    \n    ' Set the column widths (defaults to the column title width if not specified)\n    Dim oColumnWidths(1 To 2) As Double\n    oColumnWidths(1) = 4.5\n    oColumnWidths(2) = 5.5\n    \n    oDoc.StylesManager.ActiveStandardStyle.ActiveObjectDefaults.TableStyle.HeadingGap = 0.1\n    \n    ' Create the custom table\n    Dim oCustomTable As CustomTable\n    Set oCustomTable = oSheet.CustomTables.Add(\"Input Locations & Descriptions\", ThisApplication.TransientGeometry.CreatePoint2d(45, 15), _\n                                        2, sensorCnt / 2, oTitles, oContents, oColumnWidths)\n    \n    ' Change the 3rd column to be left justified.\n    oCustomTable.Columns.Item(1).ValueHorizontalJustification = kAlignTextLeft\n    oCustomTable.Columns.Item(2).ValueHorizontalJustification = kAlignTextLeft\n\n    ' Create a table format object\n    Dim oFormat As TableFormat\n    Set oFormat = oSheet.CustomTables.CreateTableFormat\n\n    ' Set inside line color to red.\n    oFormat.InsideLineColor = ThisApplication.TransientObjects.CreateColor(255, 0, 0)\n    \n    ' Set outside line weight.\n    oFormat.OutsideLineWeight = 0.05\n    \n    ' Modify the table formats\n    oCustomTable.OverrideFormat = oFormat\n    \n\n    \nEnd Sub\n\nFunction ConvertToInteger(v1 As String) As Boolean\n    On Error GoTo 100:\n     Dim i As Integer\n     i = CInt(v1)\n     ConvertToInteger = True\n     Exit Function\n100:\n     ConvertToInteger = False\nEnd Function\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic Trigger on save - Chicken and the egg!\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: ilogic batch pdf from assembly\n                    ", "solution": ["Sub Main()\n\tDim oAsmDoc As AssemblyDocument\n\toAsmDoc = ThisApplication.ActiveDocument\n\toAsmName = Left(oAsmDoc.DisplayName, Len(oAsmDoc.DisplayName) - 4)\n\t\n\n\t'check that the active document is an assembly file\n\tIf ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\n\tMessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\n\tExit Sub\n\tEnd If\n\t'get user input\n\tIf MessageBox.Show ( _\n\t\"This will create a PDF file for all of the asembly components that have drawings files.\" _\n\t& vbLf & \"This rule expects that the drawing file shares the same name and location as the component.\" _\n\t& vbLf & \" \" _\n\t& vbLf & \"Are you sure you want to create PDF Drawings for all of the assembly components?\" _\n\t& vbLf & \"This could take a while.\", \"iLogic - Batch Output PDFs \",MessageBoxButtons.YesNo) = vbNo Then\n\tExit Sub\n\tEnd If\n\tDim PDFAddIn As TranslatorAddIn\n\tDim oContext As TranslationContext\n\tDim oOptions As NameValueMap\n\tDim oDataMedium As DataMedium\n\tCall ConfigurePDFAddinSettings(PDFAddIn, oContext, oOptions, oDataMedium)\n\t\n\toPath = ThisDoc.Path\n\toFolder = oPath & \"\\\" & oAsmName & \" PDF Files\\\"\n\toPath = System.IO.Directory.GetParent(oPath).FullName \t\t\n\t\n\tIf System.IO.Directory.Exists(oFolder) = False Then\n\t\tSystem.IO.Directory.CreateDirectory(oFolder)\n\tEnd If\n\t'- - - - - - - - - - - - -Component Drawings - - - - - - - - - - - -'look at the files referenced by the assembly\n\tDim oRefDoc As Document\n\tDim fileName As String \n\t' For Each oRefDoc In oRefDocs = oAsmDoc.AllReferencedDocuments\n\tFor Each oRefDoc In oAsmDoc.AllReferencedDocuments\n\t\toFileName = Left(oRefDoc.DisplayName, Len(oRefDoc.DisplayName) - 3)\t\t\n\t\t\n\t\tFor Each fileName In System.IO.Directory.GetFiles(oPath, \"*.idw\",System.IO.SearchOption.AllDirectories)\n\t\t\tIf fileName.EndsWith(oFileName + \"idw\") = True Then\n\t\t\t\tDim oDrawDoc As DrawingDocument\n\t\t\t\toDrawDoc = ThisApplication.Documents.Open(fileName, True)\n\t\t\t\tOn Error Resume Next\n\t\t\t\toDataMedium.FileName = oFolder & \"\\\" & oFileName & \"pdf\"\n\t\t\t\tCall PDFAddIn.SaveCopyAs(oDrawDoc, oContext, oOptions, oDataMedium)\n\t\t\t\toDrawDoc.Close\n\t\t\t\tOn Error GoTo 0\n\t\t\tEnd If\n\t\tNext\t\t\n\tNext\n\t'- - - - - - - - - - - - -\n\t'- - - - - - - - - - - - -Top Level Drawing - - - - - - - - - - - -\n\tDim oAsmDrawingName As String = ThisDoc.FileName(False) 'without extension\t\n\n\tFor Each fileName In System.IO.Directory.GetFiles(oPath, \"*.idw\", System.IO.SearchOption.AllDirectories)\t\n\n\t\tIf fileName.EndsWith(oAsmDrawingName + \".idw\") = True Then\n\t\t\tDim oAsmDrawingDoc As DrawingDocument\n\t\t\toAsmDrawingDoc = ThisApplication.Documents.Open(fileName, True)\t\t\t\t\n\t\t\tOn Error Resume Next\n\t\t\toDataMedium.FileName = oFolder & oAsmDrawingName & \".pdf\"\t\t\n\n\t\t\tCall PDFAddIn.SaveCopyAs(oAsmDrawingDoc, oContext, oOptions, oDataMedium)\n\t\t\toAsmDrawingDoc.Close\n\t\t\tOn Error GoTo 0\n\t\tEnd If\n\tNext\t\n\tMessageBox.Show(\"New Files Created in: \" & vbLf & oFolder, \"iLogic\")\n\tShell(\"explorer.exe \" & oFolder,vbNormalFocus)\nEnd Sub\n\nSub ConfigurePDFAddinSettings(ByRef PDFAddIn As TranslatorAddIn, ByRef oContext As TranslationContext, ByRef oOptions As NameValueMap, ByRef oDataMedium As DataMedium)\n\toPath = ThisDoc.Path\n\tPDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\toContext = ThisApplication.TransientObjects.CreateTranslationContext\n\toContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n\toOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\toOptions.Value(\"All_Color_AS_Black\") = 1\n\toOptions.Value(\"Remove_Line_Weights\") = 0\n\toOptions.Value(\"Vector_Resolution\") = 400\n\toOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\n\toOptions.Value(\"Custom_Begin_Sheet\") = 1\n\toOptions.Value(\"Custom_End_Sheet\") = 1\n\toDataMedium = ThisApplication.TransientObjects.CreateDataMedium\nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Betreff: Euler Angles to Quaternion Conversion\n                    ", "solution": ["public static Quaternion ToQ (Vector3 v)\n{\n    return ToQ (v.y, v.x, v.z);\n}\n\npublic static Quaternion ToQ (float yaw, float pitch, float roll)\n{\n    yaw *= Mathf.Deg2Rad;\n    pitch *= Mathf.Deg2Rad;\n    roll *= Mathf.Deg2Rad;\n    float rollOver2 = roll * 0.5f;\n    float sinRollOver2 = (float)Math.Sin ((double)rollOver2);\n    float cosRollOver2 = (float)Math.Cos ((double)rollOver2);\n    float pitchOver2 = pitch * 0.5f;\n    float sinPitchOver2 = (float)Math.Sin ((double)pitchOver2);\n    float cosPitchOver2 = (float)Math.Cos ((double)pitchOver2);\n    float yawOver2 = yaw * 0.5f;\n    float sinYawOver2 = (float)Math.Sin ((double)yawOver2);\n    float cosYawOver2 = (float)Math.Cos ((double)yawOver2);\n    Quaternion result;\n    result.w = cosYawOver2 * cosPitchOver2 * cosRollOver2 + sinYawOver2 * sinPitchOver2 * sinRollOver2;\n    result.x = cosYawOver2 * sinPitchOver2 * cosRollOver2 + sinYawOver2 * cosPitchOver2 * sinRollOver2;\n    result.y = sinYawOver2 * cosPitchOver2 * cosRollOver2 - cosYawOver2 * sinPitchOver2 * sinRollOver2;\n    result.z = cosYawOver2 * cosPitchOver2 * sinRollOver2 - sinYawOver2 * sinPitchOver2 * cosRollOver2;\n\n    return result;\n}\n\npublic static Vector3 FromQ2 (Quaternion q1)\n{\n    float sqw = q1.w * q1.w;\n    float sqx = q1.x * q1.x;\n    float sqy = q1.y * q1.y;\n    float sqz = q1.z * q1.z;\n    float unit = sqx + sqy + sqz + sqw; // if normalised is one, otherwise is correction factor\n    float test = q1.x * q1.w - q1.y * q1.z;\n    Vector3 v;\n\n    if (test>0.4995f*unit) { // singularity at north pole\n        v.y = 2f * Mathf.Atan2 (q1.y, q1.x);\n        v.x = Mathf.PI / 2;\n        v.z = 0;\n        return NormalizeAngles (v * Mathf.Rad2Deg);\n    }\n    if (test<-0.4995f*unit) { // singularity at south pole\n        v.y = -2f * Mathf.Atan2 (q1.y, q1.x);\n        v.x = -Mathf.PI / 2;\n        v.z = 0;\n        return NormalizeAngles (v * Mathf.Rad2Deg);\n    }\n    Quaternion q = new Quaternion (q1.w, q1.z, q1.x, q1.y);\n    v.y = (float)Math.Atan2 (2f * q.x * q.w + 2f * q.y * q.z, 1 - 2f * (q.z * q.z + q.w * q.w));     // Yaw\n    v.x = (float)Math.Asin (2f * (q.x * q.z - q.w * q.y));                             // Pitch\n    v.z = (float)Math.Atan2 (2f * q.x * q.y + 2f * q.z * q.w, 1 - 2f * (q.y * q.y + q.z * q.z));      // Roll\n    return NormalizeAngles (v * Mathf.Rad2Deg);\n}\n\nstatic Vector3 NormalizeAngles (Vector3 angles)\n{\n    angles.x = NormalizeAngle (angles.x);\n    angles.y = NormalizeAngle (angles.y);\n    angles.z = NormalizeAngle (angles.z);\n    return angles;\n}\n\nstatic float NormalizeAngle (float angle)\n{\n    while (angle>360)\n        angle -= 360;\n    while (angle<0)\n        angle += 360;\n    return angle;\n}"], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: Exception at Application.CommandManager.CreateInteractionEvents method\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Custom table, with check off list\n                    ", "solution": [], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Features that won't surppress\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: How do i find out when our licence ends\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Has anyone utilized the AutoDesk Developer Network DevTV?\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Select lines by Layer Ilogic\n                    ", "solution": ["Public Sub l()", "Dim a As Application", "Set a = ThisApplication", "Dim b As DrawingDocument", "Set b = a.ActiveDocument", "Dim s As Sheet", "Set s = b.Sheets.Item(1)", "Dim v As DrawingView", "Set v = s.DrawingViews.Item(1)", "Dim sl As DrawingCurve", "Dim sg As DrawingCurveSegment", "For Each sl In v.DrawingCurves", "For Each sg In sl.Segments", "Dim lay As Layer", "Set lay = b.StylesManager.Layers.Item(\"YOUR LAYER NAME TO BE REPLACE WITH\")", "If sg.Layer.Name = \"", "YOUR LAYER NAME TO BE REPLACE", "\" Then", "sg.Layer = lay", "End If", "Next", "Next", "End Sub", "Public Sub Main()\n\nDim a As Application\na = ThisApplication\n\nDim b As DrawingDocument\nb = a.ActiveDocument\n\nDim s As Sheet\ns = b.Sheets.Item(1)\n\nDim v As DrawingView\nv = s.DrawingViews.Item(1)\n\nDim sl As DrawingCurve\nDim sg As DrawingCurveSegment\n\nFor Each sl In v.DrawingCurves\n\nFor Each sg In sl.Segments\n\nDim lay As Layer\nlay = b.StylesManager.Layers.Item(\"YOUR LAYER NAME TO BE REPLACE WITH\")\n\nIf sg.Layer.Name = \"YOUR LAYER NAME TO BE REPLACE\" Then\n\nsg.Layer = lay\n\nEnd If\n\nNext\nNext\n\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Export JT with annotation\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: coordinate system points\n                    ", "solution": [], "author": "NBertino7PRXH"},
{"created at": [], "solution Title": "\n                        Re: write ipt to iam using ilogic rule\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Skeleton Modeling: Need to Select Sketches from within Window\n                    ", "solution": ["Sub Main()\nDim oDoc As Document\noDoc = ThisDoc.Document    \n\nDim oVisibility As New ArrayList\t\noVisibility.add(\"ON - ALL SKECHES\")\t\t\t'0-ok\t\noVisibility.add(\"OFF - ALL SKECHES\")\t\t'1-ok\noVisibility.add(\"ON - SELECTED SKECHES\")\t'2-ok\n\noVisibility_IP = InputListBox(\"SELECT FROM ABOVE!\", oVisibility, oVisibility.Item(0), \"SELECT\", \"VISIBILITY CONTROL\")\n'oInput = InputRadioBox(\"SELECT:\", _\n' \"Turn ON - All\", _\n' \"Turn OFF - ALL\", \"False\", \"VISIBILITY CONTROL\")\nSelect Case oVisibility_IP\nCase oVisibility(0)\t   \t\n\toVisibility_On()\nCase oVisibility(1)\t   \t\n\toVisibility_Off()\nCase oVisibility(2)\t   \t\n\toVisibility_SelectedSketches()\nEnd Select\n\nFor Each oWorkPlane In oDoc.ComponentDefinition.WorkPlanes\nIf oWorkPlane.Name = \"XY Plane\" Then oWorkPlane.Visible = False\nIf oWorkPlane.Name = \"XZ Plane\" Then oWorkPlane.Visible = False\nIf oWorkPlane.Name = \"YZ Plane\" Then oWorkPlane.Visible = False\nNext\n\niLogicVb.UpdateWhenDone = True\nEnd Sub\n\nSub oVisibility_On()\nDim oDoc As Document\noDoc = ThisDoc.Document          \n    For Each oSketch In oDoc.ComponentDefinition.Sketches\n    oSketch.Visible = True\n    oSketch.DimensionsVisible = False\n    Next\nEnd Sub\n\nSub oVisibility_Off()\nDim oDoc As Document\noDoc = ThisDoc.Document          \n    For Each oSketch In oDoc.ComponentDefinition.Sketches\n    oSketch.Visible = False\n    oSketch.DimensionsVisible = False\n    Next\nEnd Sub\n\nSub oVisibility_SelectedSketches()\n\nDim obj As Object\nDim oSketch As Inventor.PlanarSketch\n\nWhile True\n\tobj = ThisApplication.CommandManager.Pick(\n\t\tSelectionFilterEnum.kSketchDefaultFilter, \n\t\t\"Select a sketch to hide\")\n\t\tOn Error Resume Next\n\t\toSketch = obj.Parent \n\t\toSketch.Visible = False \n\t' If nothing gets selected then we're done\t\n\tIf IsNothing(obj) Then Exit While\t \nEnd While\n\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Referencing custom iProperties created by Frame Generator\n                    ", "solution": ["    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n\n        If oApp.Documents.Count < 1 Then\n            Exit Sub\n        End If\n\n        Dim oDoc As Inventor.Document = oApp.ActiveDocument\n\n        Dim oCustomiProps As Inventor.PropertySet = oDoc.PropertySets.Item(\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\")\n\n        For Each oCustProp As Inventor.Property In oCustomiProps\n\n            'MessageBox.Show(oCustProp.PropId & \":\" & oCustProp.Value.ToString & vbCrLf & oCustProp.Name & \":\" & oCustProp.Value.ToString)\n\n            MessageBox.Show(oCustProp.", "DisplayName", " & \" :  \" & oCustProp.Value.ToString)\n\n        Next\n\n\n    End Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Ilogic - get hole diameter value from part within an assembly\n                    ", "solution": ["    ' Get a feature selection from the user\n    Dim oObject As Object\n    oObject = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartFeatureFilter, \"Pick a feature\")\n\n    MsgBox(\"Picked: \" & oObject.Name)\n' if extrusion, the radius is:\n  MsgBox(oObject.sidefaces.item(1).geometry.radius)"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Error When Trying To Place Drawing View\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Inspection dim\n                    ", "solution": ["  Dim Label As String\n  Dim Rate As String\n \n  For Each oDrawingDim In oSheet.DrawingDimensions\n \n   If ODrawingDim.IsInspectionDimension = True\n     oDrawingDim.GetInspectionDimensionData(kNoInspectionBorder, Label, Rate)\n     MessageBox.Show(Label, \"Label Value\")  'Label should contain desired string value\n\n End If\n"], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: Use value from paramter list\n                    ", "solution": ["If", " ", "Sliderail_Type", " = ", "\"1.5 Galvanized\"", " ", "Then", "\n", "Feature", ".", "Color", "(", "\"Revolution - Sliderail - Up\"", ") = ", "\"Galvanized\"", "\n", "Feature", ".", "Color", "(", "\"Revolution - Sliderail - Down\"", ") = ", "\"Galvanized\"", "\n", "'USE VALUE 48.3 FROM Parameter \"Sliderail_Diameter\"", "\n", "Sliderail_Diameter", " = 48.3 \n", "ElseIf", " ", "Sliderail_Type", " = ", "\"1.5 Stainless\"", " ", "Then", "\n", "Feature", ".", "Color", "(", "\"Revolution - Sliderail - Up\"", ") = ", "\"Steel - Polished\"", "\n", "Feature", ".", "Color", "(", "\"Revolution - Sliderail - Down\"", ") = ", "\"Steel - Polished\"", "\n", "'USE VALUE 48.3 FROM Parameter \"Sliderail_Diameter\"", "\n", "Sliderail_Diameter", " = 48.3 \n", "ElseIf", " ", "Sliderail_Type", " = ", "\"1.5 Plastic\"", " ", "Then", "\n", "Feature", ".", "Color", "(", "\"Revolution - Sliderail - Up\"", ") = ", "\"Smooth - Red\"", "\n", "Feature", ".", "Color", "(", "\"Revolution - Sliderail - Down\"", ") = ", "\"Smooth - Red\"", "\n", "'USE VALUE 48.3 FROM Parameter \"Sliderail_Diameter\"", "\n", "Sliderail_Diameter", " = 48.3 \n", "ElseIf", " ", "Sliderail_Type", " = ", "\"2.0 Galvanized\"", " ", "Then", "\n", "Feature", ".", "Color", "(", "\"Revolution - Sliderail - Up\"", ") = ", "\"Galvanized\"", "\n", "Feature", ".", "Color", "(", "\"Revolution - Sliderail - Down\"", ") = ", "\"Galvanized\"", "\n", "'USE VALUE 60.3 FROM Parameter \"Sliderail_Diameter\"", "\n", "Sliderail_Diameter", " = 60.3\n", "ElseIf", " ", "Sliderail_Type", " = ", "\"2.0 Plastic\"", " ", "Then", "\n", "Feature", ".", "Color", "(", "\"Revolution - Sliderail - Up\"", ") = ", "\"Smooth - Red\"", "\n", "Feature", ".", "Color", "(", "\"Revolution - Sliderail - Down\"", ") = ", "\"Smooth - Red\"", "\n", "'USE VALUE 60.3 FROM Parameter \"Sliderail_Diameter\"", "\n", "Sliderail_Diameter", " = 60.3\n", "End", " ", "If", "\n\n\n", "iLogicVb", ".", "UpdateWhenDone", " = ", "True"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: iLogic: sketched symbol >> suppress prompt\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Programming Language Suggestions\n                    ", "solution": [], "author": "pineapple.law19"},
{"created at": [], "solution Title": "\n                        Re: HOW TO CREATE LINE BASE ON DRAWINGCURVE OR DRAWINGVIEW POSITION\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Flat pattern export to new part\n                    ", "solution": [], "author": "dean.morrison"},
{"created at": [], "solution Title": "\n                        Re: Changing dimension defaults\n                    ", "solution": [], "author": "kelly.young"},
{"created at": [], "solution Title": "\n                        Re: Access to iProperties in Assembly Files by VBA\n                    ", "solution": [" Dim openDoc As Document\n Set openDoc = ThisApplication.ActiveDocument    ", "\n Dim docFile As Document    \n Set docFile = openDoc.ReferencedDocuments(1) 'first found referenced file, it's \"iam\" file\n", " MsgBox docFile.FullFileName ' show first found \"iam\" file path and name \n    \n Set invDesignInfo = docFile.PropertySets.Item(\"Design Tracking Properties\") 'get the part number property", " Dim invProperty As Property", " Set invProperty = invDesignInfo.Item(\"Part Number\")", " MsgBox \"Part number: \" & invProperty.Value 'show \"Part Number\" property of \"iam\" file", "\n"], "author": "marek.czyzewski"},
{"created at": [], "solution Title": "\n                        Re: converting between part and assembly ilogic\n                    ", "solution": ["Imports Inventor.UnitsTypeEnum \n \n'Dim oDoc As Inventor.PartDocument = Nothing\n\n\nIf ThisDoc.Document.DocumentType = kPartDocumentObject Then\n\tMsgBox (\"part\")\nDim oPartDoc As PartDocument\noPartDoc = ThisDoc.Document\nDim oPartCompDef As Inventor.PartComponentDefinition\noPartCompDef = oPartDoc.ComponentDefinition\nMsgBox (\"part\")\nDim oParams As Parameters\noParams=oPartCompDef.Parameters\nDim oUserParams As UserParameters\noUserParams=oParams.UserParameters\nDim oAwesomeParameter As Parameter\nTry\notester = oUserParams.Item(\"MANUFACTURER\")\nCatch\noInsulationType=oUserParams.AddByValue(\"MANUFACTURER\", \"None\", kTextUnits)\nMultiValue.SetList(\"MANUFACTURER\", \"Georg Fischer\", \"Plastic Fabricator\", \"Steel Fabricator\", \"Prochem\", \"LCS1\", \"Grundfos\", \"durapipe\", \"GRP Fabricator\", \"Tank Manufacturer\", \"Kiosk Manufacturer\", \"Custom\")\nEnd Try\n\nTry\notester2 = oUserParams.Item(\"Custom\")\nCatch\noInsulationType=oUserParams.AddByValue(\"Custom\", \"Enter Custom Manufacturer\", kTextUnits)\nEnd Try\n\nEnd If\n'Parameter.Param(\"MANUFACTURER\").ExposedAsProperty = False\n'Parameter.Param(\"MANUFACTURER\").IsKey = True\n'Parameter.Param(\"Custom\").ExposedAsProperty = False\n'Parameter.Param(\"Custom\").IsKey = True\n'iProperties.Value(\"Custom\", \"L_Part_Number\")=\"\"\n'iProperties.Value(\"Custom\", \"MANUFACTURER\")=\"\"\n\nIf ThisDoc.Document.DocumentType =  kAssemblyDocumentObject Then\nDim oAssDoc As Inventor.AssemblyDocument\noAssDoc = ThisDoc.Document\n\nDim oAssCompDef As AssemblyComponentDefinition\noAssCompDef = oAssDoc.ComponentDefinition\nMsgBox (\"assembly\")\n\n\nDim oParams As Parameters\noParams=oAssCompDef.Parameters\nDim oUserParams As UserParameters\noUserParams=oParams.UserParameters\nDim oAwesomeParameter As Parameter\nTry\notester = oUserParams.Item(\"MANUFACTURER\")\nCatch\noInsulationType=oUserParams.AddByValue(\"MANUFACTURER\", \"None\", kTextUnits)\nMultiValue.SetList(\"MANUFACTURER\", \"Georg Fischer\", \"Plastic Fabricator\", \"Steel Fabricator\", \"Prochem\", \"LCS1\", \"Grundfos\", \"durapipe\", \"GRP Fabricator\", \"Tank Manufacturer\", \"Kiosk Manufacturer\", \"Custom\")\nEnd Try\n\nTry\notester2 = oUserParams.Item(\"Custom\")\nCatch\noInsulationType=oUserParams.AddByValue(\"Custom\", \"Enter Custom Manufacturer\", kTextUnits)\nEnd Try\n\nEnd If\n\nParameter.Param(\"MANUFACTURER\").ExposedAsProperty = False\nParameter.Param(\"MANUFACTURER\").IsKey = True\nParameter.Param(\"Custom\").ExposedAsProperty = False\nParameter.Param(\"Custom\").IsKey = True\niProperties.Value(\"Custom\", \"L_Part_Number\")=\"\"\niProperties.Value(\"Custom\", \"MANUFACTURER\")=\"\""], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: VBA Edit BOM\n                    ", "solution": ["Sub CleanWireBOM()\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    Dim oBom As BOM\n    Set oBom = asmDoc.ComponentDefinition.BOM\n    oBom.StructuredViewEnabled = True\n    oBom.StructuredViewFirstLevelOnly = False\n    Dim oBOMView As BOMView\n    Set oBOMView = oBom.BOMViews(2)\n    \n    Dim compDef As ComponentDefinition\n    Dim doc As Document\n    Dim row As BOMRow\n    Dim prop As Property\n    For Each row In oBOMView.BOMRows\n        Set compDef = row.ComponentDefinitions(1)\n        Set doc = compDef.Document\n        If compDef.Type = kVirtualComponentDefinitionObject Then\n            Set prop = compDef.PropertySets(\"Design Tracking Properties\")(\"Part Number\")\n        Else\n            Set prop = doc.PropertySets(\"Design Tracking Properties\")(\"Part Number\")\n        End If\n        \n        If doc.IsModifiable Then\n            If prop.Value <> \"\" Then prop.Value = Split(prop.Value, \".\")(0)\n        End If\n    Next\nEnd Sub"], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Betreff: IMPORTING POINTS FROM EXCEL TO INVENTOR\n                    ", "solution": [], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: Content Centre Customisation\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Sync IPN iproperties with IAM/IPT (stock number, title in example)\n                    ", "solution": ["Public Sub iProperties_IPN()", " Dim oDoc As Inventor.Document", " Set oDoc = ThisApplication.ActiveDocument 'Get current document", " Dim oModel As Inventor.Document", " Set oModel = oDoc.ReferencedDocuments.Item(1) 'Get first inserted doc", " ", " Dim oPropsetsDoc As PropertySets", " Set oPropsetsDoc = oDoc.PropertySets", " Dim oPropSetDoc As PropertySet", " Set oPropSetDoc = oPropsetsDoc.Item(\"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\")", " ", " Dim oStockNumberDoc As Property", " Set oStockNumberDoc = oPropSetDoc.Item(\"Stock Number\")", " ", " Dim oPropsetsModel As PropertySets", " Set oPropsetsModel = oModel.PropertySets", " Dim oPropSetModel As PropertySet", " Set oPropSetModel = oPropsetsModel.Item(\"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\")", " ", " Dim oStockNumberModel As Property", " Set oStockNumberModel = oPropSetModel.Item(\"Stock Number\")", " ", " oStockNumberDoc.Value = oStockNumberModel.Value", " ", " Set oPropSetDoc = oPropsetsDoc.Item(\"{F29F85E0-4FF9-1068-AB91-08002B27B3D9}\")", " Set oTitleDoc = oPropSetDoc.Item(\"Title\")", " Set oPropSetModel = oPropsetsModel.Item(\"{F29F85E0-4FF9-1068-AB91-08002B27B3D9}\")", " Set oTitleModel = oPropSetModel.Item(\"Title\")", " ", " oTitleDoc.Value = oTitleModel.Value", " ", " 'MsgBox (oStockNumberDoc.Value)", " 'MsgBox (oTitleDoc.Value)", " ", " 'MsgBox (oStockNumberModel.Value)", " 'MsgBox (oTitleModel.Value)", "End Sub"], "author": "Zierath_CAD"},
{"created at": [], "solution Title": "\n                        Re: Find parts with custom iProperty and suppress them\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: combining text and parameter in ilogic\n                    ", "solution": ["If Standard=1 Then\niProperties.Value(\"Custom\",\"Size\")=Size_2.Value  & GoExcel.CurrentRowValue(\"A_1\")\nElseIf Standard=2 Then\niProperties.Value(\"Custom\",\"Size\")=Size_2.Value  & GoExcel.CurrentRowValue(\"B_1\")\nEnd If", "If Standard=1 Then\niProperties.Value(\"Custom\",\"Size\")= Parameter.Param(\"Size_2\").Value & GoExcel.CurrentRowValue(\"A_1\")\nElseIf Standard=2 Then\niProperties.Value(\"Custom\",\"Size\")= Parameter.Param(\"Size_2\").Value & GoExcel.CurrentRowValue(\"B_1\")\nEnd If"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Sheet Name (number) Hide Page Prefix Zero\n                    ", "solution": [], "author": "tdant"},
{"created at": [], "solution Title": "\n                        Re: Error In iLogic\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: boolean with text\n                    ", "solution": ["boolean1 = True\nboolean2 = False\nMsgBox (Typ)\nIf Parameter.Param(\"Typ\").Value = \"left\" Then\nParameter.Param(\"Typ_1\").Value = boolean1\nElse\nParameter.Param(\"Typ_1\").Value = Boolean2\nEnd If\n\n\nIf Parameter.Param(\"Typ\").Value = \"right\" Then\nParameter.Param(\"Typ_2\").Value = boolean1\nElse\nParameter.Param(\"Typ_2\").Value = Boolean2\nEnd If\n\nIf Parameter.Param(\"Typ\").Value = \"middle\" Then\nParameter.Param(\"Typ_3\").Value = boolean1\nElse\nParameter.Param(\"Typ_3\").Value = Boolean2\nEnd If"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic to measure lenght by UCS origin\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: File Dialog set initial directory not working\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Flat Extents Precision Format\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Dimension defined as VBA function\n                    ", "solution": [], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: need an iLogic code to sum up a common length parameter\n                    ", "solution": ["Dim", " ", "total", " ", "As", " ", "Double", " = 0\n", "Dim", " ", "adoc", " ", "As", " ", "AssemblyDocument", " = ", "ThisDoc", ".", "Document", "\n\n", "For", " ", "Each", " ", "occ", " ", "As", " ", "ComponentOccurrence", " ", "In", " ", "adoc", ".", "ComponentDefinition", ".", "Occurrences", "\n        ", "Dim", " ", "val", " ", "As", " ", "Double", "\n        ", "Try", "\n               ", "val", " = ", "Parameter", "(", "occ", ".", "Name", ", ", "\"length\"", ")\n               ", "total", " = ", "total", " + ", "val", "\n        ", "Catch", "\n        ", "End", " ", "Try", "\n", "Next", " ", "occ", "\n\n", "MessageBox", ".", "Show", "(", "\"Total length: \"", " & ", "total", ")\n\n\n"], "author": "Jon.Balgley"},
{"created at": [], "solution Title": "\n                        Re: Autodesk Inventor Interop reference older version\n                    ", "solution": [], "author": "pineapple.law19"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: PackAndGo iLogic not defined\n                    ", "solution": [], "author": "Jake_M."},
{"created at": [], "solution Title": "\n                        Re: Making hotkey to run ilogic rule(s)\n                    ", "solution": ["Sub vbatoilog()\n\nDim iLogicAuto As Object\nSet iLogicAuto = GetiLogicAddin(ThisApplication)\nIf (iLogicAuto Is Nothing) Then Exit Sub\n\nDim doc As Document\nSet doc = ThisApplication.ActiveDocument\n\nDim ruleName As String\nruleName = \"AssBOM\"\nDim rule As Object\nSet rule = iLogicAuto.GetRule(doc, \"AssBOM\")\nIf (rule Is Nothing) Then\n  Call MsgBox(\"No rule named \" & ruleName & \" was found in the document.\")\n  Exit Sub\nEnd If\n\nDim i As Integer\ni = iLogicAuto.RunRuleDirect(rule)\n\nEnd Sub\n\n\nFunction GetiLogicAddin(oApplication As Inventor.Application) As Object\n", "Dim Addins As ApplicationAddIns\nSet Addins = oApplication.ApplicationAddIns", "Dim addIn As ApplicationAddIn\nOn Error GoTo NotFound\nSet addIn = oApplication.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\n\nIf (addIn Is Nothing) Then Exit Function\n\naddIn.Activate\nSet GetiLogicAddin = addIn.Automation\nExit Function\nNotFound:\nEnd Function"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: goexcel.find what if value not found\n                    ", "solution": ["i", " = ", "GoExcel", ".", "FindRow", "(", "\"C:\\Vault\\Designs\\Inventor\\Inventor Support Files\\PS_Prop.xlsx\"", ", ", "\"A36\"", ", ", "\"RM Thickness\"", ", ", "\"=\"", ", ", "Parameter", "(", "\"RMThk\"", ")) \n\n", "If", " ", "i", " = -1 ", "Then", "\n\t", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Stock Number\"", ") = ", "\" \"", "\n\t", "MessageBox", ".", "Show", "(", "\"No R# is Assigned for Selected Material\"", ", ", "\"No R#\"", ", ", "MessageBoxButtons", ".", "OK", ")\n", "Else", " \n\t", "iProperties", ".", "Value", "(", "\"Project\"", ", ", "\"Stock Number\"", ") = ", "GoExcel", ".", "CurrentRowValue", "(", "\"Stock Number\"", ")\n\t", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"RM Type\"", ") = ", "GoExcel", ".", "CurrentRowValue", "(", "\"RM Type\"", ")\n", "End", " ", "If"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Exclude components using iLogic?\n                    ", "solution": ["Rod50 = Component.InventorComponent(\"ROD_50\")\nRod50.Excluded = True", "Component.InventorComponent(\"<Your part name>\").Excluded = True"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: application option screen in inventor 2014\n                    ", "solution": [], "author": "shukite"},
{"created at": [], "solution Title": "\n                        Re: How to execute Addin\n                    ", "solution": ["Imports Inventor\nImports System.Runtime.InteropServices\nImports Microsoft.Win32\nImports Microsoft.VisualBasic.Compatibility.VB6\n\nNamespace InventorAddIn1\n    <ProgIdAttribute(\"InventorAddIn1.StandardAddInServer\"),\n    GuidAttribute(\"96dccdbb-dabe-4a88-95bf-c292d8b41f9f\")>\n    Public Class StandardAddInServer\n        Implements Inventor.ApplicationAddInServer\n\n        Private WithEvents m_uiEvents As UserInterfaceEvents\n        Private WithEvents m_sampleButton As ButtonDefinition\n\n#Region \"ApplicationAddInServer Members\"\n\n        ' This method is called by Inventor when it loads the AddIn. The AddInSiteObject provides access  \n        ' to the Inventor Application object. The FirstTime flag indicates if the AddIn is loaded for\n        ' the first time. However, with the introduction of the ribbon this argument is always true.\n        Public Sub Activate(ByVal addInSiteObject As Inventor.ApplicationAddInSite, ByVal firstTime As Boolean) Implements Inventor.ApplicationAddInServer.Activate\n            ' Initialize AddIn members.\n            g_inventorApplication = addInSiteObject.Application\n\n            ' Connect to the user-interface events to handle a ribbon reset.\n            m_uiEvents = g_inventorApplication.UserInterfaceManager.UserInterfaceEvents\n\n            ' TODO: Add button definitions.\n\n            ' Sample to illustrate creating a button definition.\n            Dim largeIcon As Inventor.IPictureDisp = IconToIPicture(New System.Drawing.Icon(My.Resources.YourSmallImage, 32, 32))\n            Dim smallIcon As Inventor.IPictureDisp = IconToIPicture(New System.Drawing.Icon(My.Resources.YourSmallImage, 16, 16))\n            Dim controlDefs As Inventor.ControlDefinitions = g_inventorApplication.CommandManager.ControlDefinitions\n            m_sampleButton = controlDefs.AddButtonDefinition(\"Command Name\", \"Internal Name\", CommandTypesEnum.kShapeEditCmdType, AddInClientID)\n\n            ' Add to the user interface, if it's the first time.\n            If firstTime Then\n                AddToUserInterface()\n            End If\n        End Sub\n\n        ' This method is called by Inventor when the AddIn is unloaded. The AddIn will be\n        ' unloaded either manually by the user or when the Inventor session is terminated.\n        Public Sub Deactivate() Implements Inventor.ApplicationAddInServer.Deactivate\n\n            ' TODO:  Add ApplicationAddInServer.Deactivate implementation\n\n            ' Release objects.\n            m_uiEvents = Nothing\n            g_inventorApplication = Nothing\n\n            System.GC.Collect()\n            System.GC.WaitForPendingFinalizers()\n        End Sub\n\n        ' This property is provided to allow the AddIn to expose an API of its own to other \n        ' programs. Typically, this  would be done by implementing the AddIn's API\n        ' interface in a class and returning that class object through this property.\n        Public ReadOnly Property Automation() As Object Implements Inventor.ApplicationAddInServer.Automation\n            Get\n                Return Nothing\n            End Get\n        End Property\n\n        ' Note:this method is now obsolete, you should use the \n        ' ControlDefinition functionality for implementing commands.\n        Public Sub ExecuteCommand(ByVal commandID As Integer) Implements Inventor.ApplicationAddInServer.ExecuteCommand\n        End Sub\n\n#End Region\n\n#Region \"User interface definition\"\n        ' Sub where the user-interface creation is done.  This is called when\n        ' the add-in loaded and also if the user interface is reset.\n        Private Sub AddToUserInterface()\n            ' This is where you'll add code to add buttons to the ribbon.\n\n            '** Sample to illustrate creating a button on a new panel of the Tools tab of the Part ribbon.\n\n            '' Get the part ribbon.\n            Dim partRibbon As Ribbon = g_inventorApplication.UserInterfaceManager.Ribbons.Item(\"Part\")\n\n            '' Get the \"Tools\" tab.\n            Dim toolsTab As RibbonTab = partRibbon.RibbonTabs.Item(\"id_TabTools\")\n\n            '' Create a new panel.\n            Dim customPanel As RibbonPanel = toolsTab.RibbonPanels.Add(\"Sample\", \"MysSample\", AddInClientID)\n\n            '' Add a button.\n            customPanel.CommandControls.AddButton(m_sampleButton)\n        End Sub\n\n        Private Sub m_uiEvents_OnResetRibbonInterface(Context As NameValueMap) Handles m_uiEvents.OnResetRibbonInterface\n            ' The ribbon was reset, so add back the add-ins user-interface.\n            AddToUserInterface()\n        End Sub\n\n        ' Sample handler for the button.\n        Private Sub m_sampleButton_OnExecute(Context As NameValueMap) Handles m_sampleButton.OnExecute\n            MsgBox(\"Button was clicked.\")\n        End Sub\n#End Region\n\n    End Class\nEnd Namespace\n\n\nPublic Module Globals\n    ' Inventor application object.\n    Public g_inventorApplication As Inventor.Application\n\n#Region \"Function to get the add-in client ID.\"\n    ' This function uses reflection to get the GuidAttribute associated with the add-in.\n    Public Function AddInClientID() As String\n        Dim guid As String = \"\"\n        Try\n            Dim t As Type = GetType(InventorAddIn1.StandardAddInServer)\n            Dim customAttributes() As Object = t.GetCustomAttributes(GetType(GuidAttribute), False)\n            Dim guidAttribute As GuidAttribute = CType(customAttributes(0), GuidAttribute)\n            guid = \"{\" + guidAttribute.Value.ToString() + \"}\"\n        Catch\n        End Try\n\n        Return guid\n    End Function\n#End Region\n\n#Region \"hWnd Wrapper Class\"\n    ' This class is used to wrap a Win32 hWnd as a .Net IWind32Window class.\n    ' This is primarily used for parenting a dialog to the Inventor window.\n    '\n    ' For example:\n    ' myForm.Show(New WindowWrapper(g_inventorApplication.MainFrameHWND))\n    '\n    Public Class WindowWrapper\n        Implements System.Windows.Forms.IWin32Window\n        Public Sub New(ByVal handle As IntPtr)\n            _hwnd = handle\n        End Sub\n\n        Public ReadOnly Property Handle() As IntPtr _\n          Implements System.Windows.Forms.IWin32Window.Handle\n            Get\n                Return _hwnd\n            End Get\n        End Property\n\n        Private _hwnd As IntPtr\n    End Class\n#End Region\n\n#Region \"Image Converter\"\n\n#End Region\n\nEnd Module"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: [VB.Net] Subassembly parts suppression based on suppression state\n                    ", "solution": ["Sub", " ", "Main", "()", "\n", "Sub", " ", "updateElementsSuppression", "\n", "Dim", " ", "assDoc", " ", "As", " ", "AssemblyDocument", " ", "=", " ", "ThisDoc", ".", "Document", "\n\n", "If", " ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "2", ")", ".", "Definition", ".", "Document", ".", "LevelOfDetailName", " ", "=", " ", "\"", "Master", "\"", " ", "Then", "\n        ", "MsgBox", "(", "\"", "This logic only works if subassembly 2 is not set to Master Level of Detail", "\"", ")", "\n         ", "Exit Sub", "\n", "End", " ", "If", "\n\n", "If", " ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "1", ")", ".", "Suppressed", "=", "False", " ", "Then", "\n\n    ", "Dim", " ", "subAssDoc1", " ", "As", " ", "AssemblyDocument", " ", "=", " ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "1", ")", ".", "Definition", ".", "Document", "\n    ", "Dim", " ", "noOfComponentsInSubAssembly1", " ", "As", " ", "Integer", " ", "=", " ", "subAssDoc1", ".", "ComponentDefinition", ".", "Occurrences", ".", "Count", "\n\n    ", "For", " ", "i", " ", "=", " ", "1", " ", "To", " ", "noOfComponentsInSubAssembly1", "\n        ", "If", " ", "subAssDoc1", ".", "ComponentDefinition", ".", "Occurrences", "(", "i", ")", ".", "Suppressed", " ", "Then", "\n            ", "If", " ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "2", ")", ".", "Suppressed", "=", "False", " ", "Then", "\n            ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "2", ")", ".", "Definition", ".", "Document", ".", "ComponentDefinition", ".", "Occurrences", "(", "i", ")", ".", "Suppress", "()", "\n            ", "End", " ", "If", "\n            ", "If", " ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "3", ")", ".", "Suppressed", "=", "False", " ", "Then", "\n            ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "3", ")", ".", "Definition", ".", "Document", ".", "ComponentDefinition", ".", "Occurrences", "(", "i", ")", ".", "Suppress", "()", "\n            ", "End", " ", "If", "\n            ", "If", " ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "4", ")", ".", "Suppressed", "=", "False", " ", "Then", "\n            ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "4", ")", ".", "Definition", ".", "Document", ".", "ComponentDefinition", ".", "Occurrences", "(", "i", ")", ".", "Suppress", "()", "\n            ", "End", " ", "If", "\n        ", "Else", "\n            ", "If", " ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "2", ")", ".", "Suppressed", "=", "False", " ", "Then", "\n            ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "2", ")", ".", "Definition", ".", "Document", ".", "ComponentDefinition", ".", "Occurrences", "(", "i", ")", ".", "Unsuppress", "()", "\n            ", "End", " ", "If", "\n            ", "If", " ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "3", ")", ".", "Suppressed", "=", "False", " ", "Then", "\n            ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "3", ")", ".", "Definition", ".", "Document", ".", "ComponentDefinition", ".", "Occurrences", "(", "i", ")", ".", "Unsuppress", "()", "\n            ", "End", " ", "If", "\n            ", "If", " ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "4", ")", ".", "Suppressed", "=", "False", " ", "Then", "\n            ", "assDoc", ".", "ComponentDefinition", ".", "Occurrences", "(", "4", ")", ".", "Definition", ".", "Document", ".", "ComponentDefinition", ".", "Occurrences", "(", "i", ")", ".", "Unsuppress", "()", "\n            ", "End", " ", "If", "\n        ", "End", " ", "If", "\n\n    ", "Next", "\n\n", "End", " ", "If", "\n\n", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n\n", "End Sub"], "author": "matroosoft"},
{"created at": [], "solution Title": "\n                        Re: Export to DWG with filename based on sheetname\n                    ", "solution": ["' Get the DWG translator Add-In.\nDim DWGAddIn As TranslatorAddIn\nDWGAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\")\n\n'Set a reference to the active document (the document to be published).\nDim oDocument As Document\noDocument = ThisApplication.ActiveDocument\n\nDim oContext As TranslationContext\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = kFileBrowseIOMechanism\n'oContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n\n' Create a NameValueMap object\nDim oOptions As NameValueMap\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n' Create a DataMedium object\nDim oDataMedium As DataMedium\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n' Check whether the translator has 'SaveCopyAs' options\nIf DWGAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\nDim strIniFile As String\nstrIniFile = \"C:\\Autodesk 2018\\Configuration 2018\\DWGconfiguration2018.ini\"\n' Create the name-value that specifies the ini file to use.\noOptions.Value(\"Export_Acad_IniFile\") = strIniFile\nEnd If\n\n\noPath = ThisDoc.Path\noFolder = oPath & \"\\DWG\"\n\n'Check for the DWG folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n\n'Define the drawing \nDim oDrawing As DrawingDocument\noDrawing = ThisDoc.Document\n\nDim oSheet As Sheet\nDim lPos As Long\nDim rPos As Long\nDim sLen As Long\nDim sSheetName As String\nDim iSheetNumber As Integer\n\n'step through each drawing sheet\nFor Each oSheet In oDrawing.Sheets", "Call oSheet.Activate()", "\n\n'find the seperator in the sheet name:number\nlPos = InStr(oSheet.Name, \":\")\n'find the number of characters in the sheet name\nsLen = Len(oSheet.Name)\n'find the sheet name\nsSheetName = Left(oSheet.Name, lPos -1)\n'find the sheet number\nsSheetNumber = Right(oSheet.Name, sLen -lPos)\n\nDim oDesc1 As String\nDim oDesc2 As String\nDim oDesc3 As String\nDim oDescription As String\noDesc1 = iProperties.Value(\"Custom\", \"DrawingTitle_Line1\") \noDesc2 = iProperties.Value(\"Custom\", \"DrawingTitle_Line2\") \noDesc3 = iProperties.Value(\"Custom\", \"DrawingTitle_Line3\") \n\nIf (oDesc1 = Nothing And oDesc2 = Nothing And oDesc3 = Nothing) Then\noDescription = \"\"\nElse If (oDesc1 <> Nothing And oDesc2 = Nothing And oDesc3 = Nothing) Then\noDescription = \" \" & oDesc1\nElse If (oDesc1 = Nothing And oDesc2 <> Nothing And oDesc3 = Nothing) Then\noDescription = \" \" & oDesc2\nElse If (oDesc1 = Nothing And oDesc2 = Nothing And oDesc3 <> Nothing) Then\noDescription = \" \" & oDesc3\nElse If (oDesc1 <> Nothing And oDesc2 <> Nothing And oDesc3 = Nothing) Then\noDescription = \" \" & oDesc1 & \" \" & oDesc2\nElse If (oDesc1 = Nothing And oDesc2 <> Nothing And oDesc3 <> Nothing) Then\noDescription = \" \" & oDesc2 & \" \" & oDesc3\nElse If (oDesc1 <> Nothing And oDesc2 <> Nothing And oDesc3 <> Nothing) Then\noDescription = \" \" & oDesc1 & \" \" & oDesc2 & \" \" & oDesc3\nEnd If\n\nIf sSheetName = \"-\" Then\noFileName = iProperties.Value(\"Custom\", \"DrawingNumber\") & \"-R\" & iProperties.Value(\"Custom\", \"Revision\")\nElse\noFileName = iProperties.Value(\"Custom\", \"DrawingNumber\") & \"-\" & sSheetName & \"-R\" & iProperties.Value(\"Custom\", \"Revision\")\nEnd If\n\n'Set the PDF target file name\noDataMedium.FileName = oFolder & \"\\\" & oFileName & oDescription &  \".dwg\"\n\n'Publish document.\nCall DWGAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n\nNext\n'------end of iLogic-------"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Mass print from assembly using ilogic\n                    ", "solution": ["'", " This is print all the associated idws of an assembly to PDF.  This is similar to the \"Print all Ref idw\" macro functionality, but", "'", " it is now converted into a iLogic rule. This assumes that the idw is teh same file name as the part or the assembly.", "'", "There are a few changes to the orginal Macro:", "'", " 1. Now have an option to print in color or B/W.", "'", " 2. The ilogic code also prints the top level assembly.", "'", " ----------------------------------------------------------------Kirk Arthur 8/30/2016", "\n\n", "'", "check that the active document is an assembly file", "\n", "If", " ", "ThisApplication", ".", "ActiveDocument", ".", "DocumentType", " ", "<>", " ", "kAssemblyDocumentObject", " ", "Then", "\n", "MessageBox", ".", "Show", "(", "\"", "Please run this rule from the assembly file.", "\"", ", ", "\"", "iLogic", "\"", ")", "\n", "Exit Sub", "\n", "End", " ", "If", "\n\n", "'", "define the active document as an assembly file", "\n", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", "\n", "oAsmDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "oAsmName", " ", "=", " ", "Left", "(", "oAsmDoc", ".", "DisplayName", ", ", "Len", "(", "oAsmDoc", ".", "DisplayName", ")", " ", "-", "4", ")", "\n\n", "'", "get user input", "\n", "RUsure", " ", "=", " ", "MessageBox", ".", "Show", " ", "(", " ", "_", "\n", "\"", "This will create a PDF file for all of the assembly components that have", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "drawings files. This rule expects that the drawing file shares the same", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", " name and location as the component.", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "Make sure the file extensions are set to Visible in Windows Explorer.", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "This could take a while.  Are you sure you want to do this?", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"\"", ", ", "\"", "iLogic  - Batch Output PDFs ", "\"", ",", "MessageBoxButtons", ".", "YesNo", ")", "\n\n", "If", " ", "RUsure", " ", "=", " ", "vbNo", " ", "Then", "\n", "Return", "\n", "Else", "\n", "End", " ", "If", "\n\n", "'", "- - - - - - - - - - - - -PDF setup - - - - - - - - - - - -", "\n\n    ", "If", " ", "ThisApplication", ".", "ActiveDocument", ".", "DocumentType", " ", "<>", " ", "kAssemblyDocumentObject", " ", "Then", "\n        ", "MsgBox", " ", "(", "\"", "This is NOT an assembly document!", "\"", ")", "\n        ", "Exit Sub", "\n    ", "End", " ", "If", "\n\n    ", "Dim", " ", "oPrintMgr", " ", "As", " ", "PrintManager", "\n    ", "oPrintMgr", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "PrintManager", "\n    ", "If", " ", "MsgBox", "(", "\"", "Using Printer ", "\"", " ", "&", " ", "oPrintMgr", ".", "Printer", " ", "&", " ", "\"", ", Best Fit, 11x17 paper, Landscape Mode.", "\"", " ", "_", "\n    ", "&", " ", "vbLf", " ", "&", " ", "\"", " ", "\"", " ", "_", "\n    ", "&", " ", "vbLf", " ", "&", " ", "\"", " Do you want to continue?", "\"", " ", "_", "    ,", "vbYesNo", " ", "+", " ", "vbQuestion", ",", "\"", "System Printer Settings ", "\"", ")", " ", "=", " ", "vbNo", " ", "Then", "\n        ", "Exit Sub", "\n    ", "End", " ", "If", "\n\n    ", "Dim", " ", "oDrgPrintMgr", " ", "As", " ", "DrawingPrintManager", "\n    ", "'", "MsgBox (\"Using Printer \" & oPrintMgr.Printer & \", Best Fit, 11x17 paper, Landscape Mode.\")", "\n    ", "dirPath", " ", "=", " ", "Left", "(", "oAsmDoc", ".", "FullFileName", ", ", "Len", "(", "oAsmDoc", ".", "FullFileName", ")", " ", "-", " ", "Len", "(", "oAsmDoc", ".", "DisplayName", "))", "\n    \n", "'", " ----Determine if the prints should be in color or B/W ------", "\n    ", "oColorAsBlack", "=", "\"", "False", "\"", "\n    ", "RUsure", " ", "=", " ", "MessageBox", ".", "Show", " ", "(", " ", "\"", "Do you want to print this in COLOR?", "\"", "&", " ", "vbLf", " ", "&", " ", "\"\"", ", ", "\"", "Color or B/W Prints", "\"", ",", "MessageBoxButtons", ".", "YesNo", ")", "\n    ", "If", " ", "RUsure", " ", "=", " ", "vbNo", " ", "Then", "\n    ", "oColorAsBlack", "=", "\"", "True", "\"", "\n    ", "'", "Return", "\n    ", "Else", "\n    ", "End", " ", "If", "\n\n    ", "Dim", " ", "oRefDocs", " ", "As", " ", "DocumentsEnumerator", "\n    ", "oRefDocs", " ", "=", " ", "oAsmDoc", ".", "AllReferencedDocuments", "\n    ", "Dim", " ", "oRefDoc", " ", "As", " ", "Document", "\n    ", "numFiles", " ", "=", " ", "0", "\n", "'", "'End If", "\n\n", "'", "get PDF target folder path", "\n", "oFolder", " ", "=", " ", "oPath", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oAsmName", " ", "&", " ", "\"", " PDF Files", "\"", "\n\n", "'", "Check for the PDF folder and create it if it does not exist", "'", "If Not System.IO.Directory.Exists(oFolder) Then", "\n    ", "'", "System.IO.Directory.CreateDirectory(oFolder)", "'", "End If", "\n\n", "'", "- - - - - - - - - - - - -Component Drawings - - - - - - - - - - - -", "'", "look at the files referenced by the assembly", "\n", "For", " ", "Each", " ", "oRefDoc", " ", "In", " ", "oRefDocs", "\n        ", "idwPathName", " ", "=", " ", "Left", "(", "oRefDoc", ".", "FullDocumentName", ", ", "Len", "(", "oRefDoc", ".", "FullDocumentName", ")", " ", "-", " ", "3", ")", " ", "&", " ", "\"", "idw", "\"", "\n        ", "If", " ", "(", "System", ".", "IO", ".", "File", ".", "Exists", "(", "idwPathName", "))", " ", "Then", "\n            ", "numFiles", " ", "=", " ", "numFiles", " ", "+", " ", "1", "\n            ", "'", "If numFiles = 10 Then Exit Sub", "\n        ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n            ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "idwPathName", ", ", "True", ")", "\n            ", "oDrawDoc", ".", "Activate", "\n            ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n            ", "oDrgPrintMgr", " ", "=", " ", "oDrawDoc", ".", "PrintManager", "\n            ", "oDrgPrintMgr", ".", "AllColorsAsBlack", " ", "=", " ", "oColorAsBlack", "\n            ", "oDrgPrintMgr", ".", "ScaleMode", " ", "=", " ", "kPrintBestFitScale", "\n            ", "oPrintMgr", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "PrintManager", "\n\n            ", "'", " Printer setup, default printer", "\n            ", "'", "oPrintMgr.ColorMode = kPrintDefaultColorMode ' Set to default. Uses printer settings", "\n            ", "oPrintMgr", ".", "PrintRange", " ", "=", " ", "kPrintAllSheets", " ", "'", "Prints all sheets in the idw.", "\n            ", "oPrintMgr", ".", "NumberOfCopies", " ", "=", " ", "1", " ", "'", " Set to print one copies.", "\n            ", "oPrintMgr", ".", "Orientation", " ", "=", " ", "kLandscapeOrientation", " ", "'", " Set to print using landscape orientation.", "\n            ", "oPrintMgr", ".", "PaperSize", " ", "=", " ", "kPaperSizeTabloid", " ", "'", "Set the paper size.", "\n            ", "oPrintMgr", ".", "SubmitPrint", " ", "'", " Submit the print.", "\n            ", "oDrawDoc", ".", "Close", " ", "(", "True", ")", "\n        ", "End", " ", "If", "\n        \n ", "Next", "\n        ", "'", "MsgBox (\"There are \" & numFiles & \" sent to printer.\")", "\n\n", "'", "- - - - - - - - - - - - -", "\n\n", "'", "- - - - - - - - - - - - -Top Level Drawing - - - - - - - - - - - -", "\n\n", "oAsmDrawing", " ", "=", " ", "ThisDoc", ".", "ChangeExtension", "(", "\"", ".idw", "\"", ")", "\n", "If", " ", "(", "System", ".", "IO", ".", "File", ".", "Exists", "(", "oAsmDrawing", "))", " ", "Then", "\n", "oAsmDrawingDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oAsmDrawing", ", ", "True", ")", "\n", "oAsmDrawingName", " ", "=", " ", "Left", "(", "oAsmDrawingDoc", ".", "DisplayName", ", ", "Len", "(", "oAsmDrawingDoc", ".", "DisplayName", ")", " ", "-", "3", ")", "\n\n", "'", "write out the PDF for the Top Level Assembly Drawing file", "\n            \n            ", "oAsmDrawDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oAsmDrawing", ", ", "True", ")", "\n            ", "oAsmDrawDoc", ".", "Activate", "\n            ", "oDrgPrintMgr", " ", "=", " ", "oAsmDrawDoc", ".", "PrintManager", "\n            ", "oDrgPrintMgr", ".", "AllColorsAsBlack", " ", "=", " ", "oColorAsBlack", "\n            ", "oDrgPrintMgr", ".", "ScaleMode", " ", "=", " ", "kPrintBestFitScale", "\n            ", "oPrintMgr", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "PrintManager", "\n           ", "'", " Printer setup, default printer", "\n            ", "'", "oPrintMgr.ColorMode = kPrintDefaultColorMode ' Set to default. Uses printer settings", "\n            ", "oPrintMgr", ".", "PrintRange", " ", "=", " ", "kPrintAllSheets", " ", "'", "Prints all sheets in the idw.", "\n            ", "oPrintMgr", ".", "NumberOfCopies", " ", "=", " ", "1", " ", "'", " Set to print one copies.", "\n            ", "oPrintMgr", ".", "Orientation", " ", "=", " ", "kLandscapeOrientation", " ", "'", " Set to print using landscape orientation.", "\n            ", "oPrintMgr", ".", "PaperSize", " ", "=", " ", "kPaperSizeTabloid", " ", "'", "Set the paper size.", "\n            ", "oPrintMgr", ".", "SubmitPrint", " ", "'", " Submit the print.", "\n            ", "oAsmDrawDoc", ".", "Close", " ", "(", "True", ")", "\n  ", "numFiles", " ", "=", " ", "numFiles", " ", "+", " ", "1", "\n  \n  ", "Else", "\n      ", "MessageBox", ".", "Show", " ", "(", "\"", " No IDW of the Top level file found!", "\"", " ", "_", "\n    ", "&", " ", "vbLf", " ", "&", " ", "\"", " ", "\"", " ", "_", "\n    ", "&", " ", "vbLf", " ", "&", " ", "\"", "There were ", "\"", " ", "&", " ", "numFiles", " ", "&", " ", "\"", " files sent to the printer.", "\"", ",", "\"", " Job Complete ", "\"", ")", "\n  ", "Return", "\n  ", "End", " ", "If", "\n\n", "'", "- - - - - - - - - - - - -", "\n\n", "MessageBox", ".", "Show", " ", "(", "\"", "There were ", "\"", " ", "&", " ", "numFiles", " ", "&", " ", "\"", " files sent to the printer.", "\"", ",", "\"", " Job Complete ", "\"", ")", "\n\n", "'", "MessageBox.Show(\"New Files Created in: \" & vbLf & idwpathname, \"iLogic\")", "'", "open the folder where the new ffiles are saved", "'", "Shell(\"explorer.exe \" & oFolder,vbNormalFocus)"], "author": "SteffanRJ"},
{"created at": [], "solution Title": "\n                        Re: ilogic Could a Multivalue list b shared in several options for component rep\n                    ", "solution": ["MultiValue.List(\"Device1PN\") = GoExcel.CellValues(\"Path\\Example.xlsx\", \"Sheet1\", \"A1\", \"A35\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Get mouse position using iLogic\n                    ", "solution": ["Sub Main()\n Dim oInteraction  As InteractionEvents \n oInteraction = ThisApplication.CommandManager.CreateInteractionEvents\n\n Dim oMouse As MouseEvents\n oMouse = oInteraction.MouseEvents\n  AddHandler oMouse.OnMouseClick  ,AddressOf oMouse_OnMouseDown \n\n  oInteraction.Start\n\n \nEnd Sub\n\nSub oMouse_OnMouseDown(Button As MouseButtonEnum, ShiftKeys As ShiftStateEnum, ModelPosition As Point, ViewPosition As Point2d, View As Inventor.View)\n  \n  MessageBox.Show(ModelPosition.X & \" in cm\", \"X\")\n  MessageBox.Show(ModelPosition.Y & \" in cm\", \"Y\")\n  \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: VBA FOR RUNNING EXTERNAL RULES USING THE FILE LOCATION OF THE RULE\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Create workpoint on assembly geometry\n                    ", "solution": ["Public Sub MatePointConstraint()\n    ' Set a reference to the assembly component definintion.\n    Dim a As Application\nSet a = ThisApplication\nDim b As AssemblyDocument\nSet b = a.ActiveDocument\n\nDim c As AssemblyComponentDefinition\nSet c = b.ComponentDefinition\nDim p As Point\n\nDim w As WorkPoint\n\nSet p = ThisApplication.TransientGeometry.CreatePoint(0, 0, 0)\nSet w = b.ComponentDefinition.WorkPoints.AddFixed(p, False)\n\nDim oObject As Object\nDim cmd As CommandManager\nSet cmd = ThisApplication.CommandManager\n\nSet oObject = cmd.Pick(kAllPointEntities, \"Pick a feature\")\n\n    \n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n    ' Set a reference to the select set.\n    Dim oSelectSet As SelectSet\n    Set oSelectSet = ThisApplication.ActiveDocument.SelectSet\n\n    ' Get the two entities from the select set.\n    Dim oBrepEnt1 As WorkPoint\n    Dim oBrepEnt2 As Object\n    Set oBrepEnt1 = w\n    Set oBrepEnt2 = oObject\n\n    ' Create the insert constraint between the parts.\n    Dim oMate As MateConstraint\n    Set oMate = oAsmCompDef.Constraints.AddMateConstraint(oBrepEnt1, oBrepEnt2, 0)\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Get path of parent folder\n                    ", "solution": ["Dim a As New System.IO.DirectoryInfo(\"D:\\Test\\Old\")\n        a.GetDirectories()\n        MsgBox(a.Parent.Name)", "Dim fio As New System.IO.FileInfo(\"", "c:\\folder1\\folder 2\\file.asd", "\") \n        MsgBox(fio.DirectoryName)\n        Dim a As New System.IO.DirectoryInfo(fio.DirectoryName) \n        a.GetDirectories()\n        MsgBox(a.Parent.Name)"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Get attributes values from Sketched Symbol\n                    ", "solution": ["Public Sub f()\n\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n    Dim oSheet As Sheet\n    Set oSheet = oDrawDoc.activesheet\n    Dim oSketchedSymbol As SketchedSymbol\n    \n    For Each oSketchedSymbol In oSheet.SketchedSymbols\n\n          On Error Resume Next\nMsgBox oSketchedSymbol.GetResultText(oSketchedSymbol.Definition.Sketch.TextBoxes.Item(1))\nNext\nEnd Sub", "oSketchedSymbol", ".SetPromptResultText(oSketchedSymbol.Definition.Sketch.TextBoxes.Item(1),\"YOUR VALUE\")"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: execute ILogic for all open documents\n                    ", "solution": ["Public Sub Internal_iLogic()\n\nDim addIn As ApplicationAddIn\nDim addIns As ApplicationAddIns\nSet addIns = ThisApplication.ApplicationAddIns\n    For Each addIn In addIns\n        If InStr(addIn.DisplayName, \"iLogic\") > 0 Then\n                        addIn.Activate\n            Dim iLogicAuto As Object\n            Set iLogicAuto = addIn.Automation\n            Exit For\n        End If\n    Next\n\n \n  Dim oDoc As Document\nFor Each oDoc In ThisApplication.Documents.VisibleDocuments\n\n  'Set oDoc = ThisApplication.ActiveDocument\n  If oDoc Is Nothing Then\n    MsgBox \"Missing Inventor Document\"\n    Exit Sub\n  End If\n \niLogicAuto.RunRule oDoc, \"Test\" 'for internal rule\n'iLogicAuto.RunExternalRule oDoc, \"Test\" 'for external rule\n'oDoc.Activate\nNext\nEnd Sub\n\n\u00a0"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Non-Integer values in QTY field on Assembly BOM\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: MultiValue\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: VBA macro file on a shared drive?\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Update properties ilogic rule is much slower than others.\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: change shapes in content center from equal to unequal with out loosing const\n                    ", "solution": [], "author": "gw"},
{"created at": [], "solution Title": "\n                        Re: automatically show scale to views when not standard scale\n                    ", "solution": ["On", " ", "Error", " ", "Resume", " ", "Next", "\n", "Dim", " ", "d", " ", "As", " ", "DrawingDocument", "\n", "a", " = ", "Len", "(", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"FIRSTVIEWSCALE\"", "))\n", "b", " = ", "a", " - 4\n", "c", " = ", "Right", "(", "iProperties", ".", "Value", "(", "\"Custom\"", ", ", "\"FIRSTVIEWSCALE\"", "), ", "b", ")\n", "f", " = 1 / ", "c", "\n\n ", "d", " = ", "ThisApplication", ".", "ActiveDocument", "\n ", "Dim", " ", "s", " ", "As", " ", "Sheet", "\n ", "s", " = ", "d", ".", "Sheets", ".", "Item", "(1)\n\n", "Dim", " ", "v", " ", "As", " ", "Inventor", ".", "DrawingView", " ", "'Set v = s.DrawingViews.Item(1)", "\n", "For", " ", "Each", " ", "v", " ", "In", " ", "s", ".", "DrawingViews", "\n", "Dim", " ", "l", " ", "As", " ", "DrawingViewLabel", "\n ", "l", " = ", "v", ".", "Label", "\n", "If", " ", "Not", " ", "v", ".", "Scale", " = ", "f", " ", "Then", "\n", "v", ".", "ShowLabel", " = ", "True", "\n", "End", " ", "If", "\n", "If", " ", "v", ".", "Scale", " = ", "f", " ", "Then", "\n\t", "v", ".", "ShowLabel", " = ", "False", "\n", "End", " ", "If", "\n", "Next", "SyntaxEditor Code Snippet", "Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", ":  ", "oDoc", " = ", "ThisDoc", ".", "Document", "\n", "oModelDoc", " = ", "ThisDoc", ".", "ModelDocument", "\n\n", "Dim", " ", "oSheets", " ", "As", " ", "Sheets", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "Dim", " ", "oViews", " ", "As", " ", "DrawingViews", "\n", "Dim", " ", "oView", " ", "As", " ", "DrawingView", "\n\n", "ViewLetter", " = ", "New", " ", "String", "(){", "\"A\"", ",", "\"B\"", ",", "\"C\"", ",", "\"D\"", ",", "\"E\"", ",", "\"F\"", ",", "\"G\"", ",", "\"H\"", ",", "\"I\"", ",", "\"J\"", ",", "\"K\"", ",", "\"L\"", ",", "\"M\"", ",", "\"N\"", ",", "\"O\"", ",", "\"P\"", ",", "\"Q\"", ",", "\"R\"", ",", "\"S\"", ",", "\"T\"", ",", "\"U\"", ",", "\"V\"", ",", "\"X\"", ",", "\"W\"", ",", "\"Y\"", ",", "\"Z\"", "}\n", "Dim", " ", "ViewCount", " = 0\n\n", "oSheets", " = ", "oDoc", ".", "Sheets", "\n\n", "Dim", " ", "view_asso_draft", " = 10506\n", "Dim", " ", "view_auxillary", " = 10499\n", "Dim", " ", "view_custom", " = 10498\n", "Dim", " ", "view_default", " = 10497\n", "Dim", " ", "view_detail", " = 10502\n", "Dim", " ", "view_draft", " = 10505\n", "Dim", " ", "view_OLE", " = 10500\n", "Dim", " ", "view_overlay", " = 10507\n", "Dim", " ", "view_projected", " = 10504\n", "Dim", " ", "view_section", " = 10503\n", "Dim", " ", "view_standard", " = 10501\n\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oSheets", "\n", "oViews", " = ", "oSheet", ".", "DrawingViews", "\n    ", "For", " ", "Each", " ", "oView", " ", "In", " ", "oViews", "\n                \n", "'If Len (oView.Name) < 2", "\n       ", "If", " ", "oView", ".", "ShowLabel", " = ", "False", " _ ", "'======= OM VYN EJ \u00c4R SYNLIG ELLER ==================================", "\n\t         ", "Or", " ", "oView", ".", "Name", ".", "Contains", "(", "\"view\"", ") ", "Or", " ", "oView", ".", "Name", ".", "Contains", "(", "\"VIEW\"", ") ", "Then", " ", "'=== Om vyn inneh\u00e5ller \"view\" visas EJ label. == ", "\n\t\t\t ", "oView", ".", "Name", " = ", "\" \"", "\n\t\t\t ", "oView", ".", "ShowLabel", " = ", "False", " ", "'Set label as unvisible.", "\n\t\t\t ", "Else", "\n\t\t\t ", "oView", ".", "ShowLabel", " = ", "True", " ", "'=========== ANNARS VISAS DET SOM ST\u00c5R.===============================", "\n            ", "'rename as the next character in the ViewCount array", "\n            ", "'oView.Name = \" \" 'ViewLetter(ViewCount)", "\n            ", "'ViewCount = ViewCount + 1", "\n\t\t\t ", "End", " ", "If", "\n\t\t\t\n        ", "'check view types ", "\n        ", "If", " ", "oView", ".", "ViewType", " = ", "view_detail", " ", "Then", "\n\t\t", "oView", ".", "ShowLabel", " = ", "True", "\n            ", "'rename as the next character in the ViewCount array", "\n\t\t\t", "If", " ", "Len", " (", "oView", ".", "Name", ") < 3 ", "Then", " ", "'======= \u00c4NDRAR BARA DE DETALJVYER D\u00c4R NAMNET BEST\u00c5R AV MAX 2 TECKEN ", "\n            \t", "oView", ".", "Name", " = ", "ViewLetter", "(", "ViewCount", ")\n            \t", "ViewCount", " = ", "ViewCount", " + 1\n            \t", "End", " ", "If", "\n\t\t\t\t\n        ", "Else", " ", "If", " ", "oView", ".", "ViewType", " = ", "view_section", " ", "Then", "\n\t\t", "oView", ".", "ShowLabel", " = ", "True", "\n\t\t\t", "If", " ", "Len", " (", "oView", ".", "Name", ") < 3 ", "Then", " ", "'======= \u00c4NDRAR BARA DE SECTIONVYER D\u00c4R NAMNET BEST\u00c5R AV MAX 2 TECKEN ", "\n            ", "'rename as the next character in the ViewCount array", "\n            ", "oView", ".", "Name", " = ", "ViewLetter", "(", "ViewCount", ")\n            ", "ViewCount", " = ", "ViewCount", " + 1\n            ", "End", " ", "If", "\n\t\t", "End", " ", "If", "\n    ", "Next", "\n", "Next", "\n", "End", " ", "If"], "author": "autodeskpelinde"},
{"created at": [], "solution Title": "\n                        Re: Unable to create flat pattern\n                    ", "solution": [], "author": "hjalte79"},
{"created at": [], "solution Title": "\n                        Re: UserInputEvents or SelectEvents? For OnSelect handling\n                    ", "solution": ["    Private Sub User_OnUnSelect(ByVal UnSelectedEntities As Inventor.ObjectsEnumerator,\n                                ByVal SelectionDevice As Inventor.SelectionDeviceEnum,\n                                ByVal ModelPosition As Inventor.Point,\n                                ByVal ViewPosition As Inventor.Point2d,\n                                ByVal View As Inventor.View) _\n                                Handles UserInputEvents.OnUnSelect\n\n        Debug.Print(SelectionDevice.ToString)\n        Debug.Print(UnSelectedEntities.Count)\n\n    End Sub", "kGraphicsWindowSelection\n0\nkGraphicsWindowSelection\n0"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: IPT file\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: AddBaseView giving Parameter incorrect error\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iPartMemeber.ChangeRow custom parameters\n                    ", "solution": ["Option Explicit\nOption Compare Text\n\nSub sciPartFolder()\n    \n    'debug\n    Dim dTime As Double\n    \n    'settings\n    Const sPath As String = \"\\\\MKECOMP1\\data\\Eng Docs\\Engineering Data\\Core Kits, CNC Programs\\_Closeout\\\"\n    Const sFactory As String = \"_MCI Closeout.ipt\"\n    Const sLogFilename As String = \"FixLogCloseout.xlsx\"\n    \n    'main objects\n    Dim oFactory As iPartFactory\n    Dim ohFactorySheet As WorkSheet\n    Dim ocFactoryCells As Range\n    Dim obFactoryBook As Workbook\n    Dim asTable(30000, 5) As String 'empty, thk, wid, len, membername, pn#\n    Dim R As Double\n    Dim C As Integer\n    Dim sFile As String\n    Dim oDoc As Document\n    Dim oIpart As iPartMember\n    \n    'parsing\n    Dim sThk As String\n    Dim sWid As String\n    Dim sLen As String\n    Const sDimFormat As String = \"0.00\"\n    \n    'logging\n    Dim owLogBook As Workbook\n    Dim ocLogCells As Range\n    Dim L As Integer\n    \n    'fix reference\n    Dim vComponentFolders As Variant\n    Const sComponentFolders As String = \"_Closeout,_Tooling Foam,_Closeout Structural,_Contour Balsa,_Balsa\" 'lightweight is not handled\n    Const sComponentFactories As String = \"_MCI Closeout.ipt,_Tooling Foam.ipt,_Structural Closeout.ipt,_Contour Balsa.ipt,_Balsa.ipt\"\n    Dim vComponentFactories As Variant\n    Dim sRemainder As String\n    Dim sFilename As String\n    Dim sFolderE1 As String 'folder above the filename\n    Dim F As Integer\n    Dim oDesc As DocumentDescriptor\n    \nDebug.Print \"Starting at: \" & Format(Now(), \"hh:mm:ss\")\n  \n    'Call fnPubRoutineEnter\n    ThisApplication.SilentOperation = True\n    ThisApplication.Documents.CloseAll\n    \n    'prep arrays\n    vComponentFolders = Strings.Split(sComponentFolders, \",\")\n    vComponentFactories = Strings.Split(sComponentFactories, \",\")\n    \n    'load oFactory table\n    Set oDoc = ThisApplication.Documents.Open(sPath & sFactory, False)\n    If oDoc.ComponentDefinition.IsiPartFactory = False Then Stop\n    Set oFactory = oDoc.ComponentDefinition.iPartFactory\n    Set ohFactorySheet = oFactory.ExcelWorkSheet\n    Set ocFactoryCells = ohFactorySheet.Cells\n    Set obFactoryBook = ohFactorySheet.Parent\nDebug.Print \"Opened worksheet: \" & Format(Now(), \"hh:mm:ss\")\n    For R = 1 To oFactory.TableRows.Count\n        For C = 1 To oFactory.TableColumns.Count\n            asTable(R, C) = Format(Replace(ocFactoryCells(R + 1, C), \"in\", \"\"), sDimFormat)\n        Next C\n    Next R\nDebug.Print \"Loaded worksheet: \" & Format(Now(), \"hh:mm:ss\")\n\n    'open log file\n    Set owLogBook = Workbooks.Open(\"\\\\mkecomp1\\data\\SALES FOLDER\\TRANSFER FILES\\NJT-Sales Transfer\\PROJECTS\\Engineering\\iParts\\\" & sLogFilename)\n    Set ocLogCells = owLogBook.Sheets(1).Cells\n    L = ocLogCells(dRowsMax, 1).End(xlUp).Row + 1\n    'scroll in folder to next to do\n    sFile = Dir(sPath & \"*.ipt*\")\n    Debug.Print ocLogCells(L - 1, 1).Value\n    Do Until sFile = ocLogCells(L - 1, 1).Value\n        sFile = Dir\n    Loop\n    sFile = Dir\n    \n    'start processing fresh files\n    Do Until sFile = \"\"\n        Set oDoc = ThisApplication.Documents.Open(sPath & sFile, False)\n        If oDoc.ComponentDefinition.IsiPartMember = False Then GoTo NextFile\n        Set oIpart = oDoc.ComponentDefinition.iPartMember\n        If oIpart.CustomMember = False Then GoTo NextFile\nDebug.Print oIpart.Name\n\n\n        'see if iPart needs attention. L think sometimes healthStatus might show ok when it isn't\n        If oIpart.HealthStatus = kUpToDateHealth _\n            Or oDoc.RequiresUpdate = False _\n            Or oDoc.RecentChanges = 0 Then GoTo NextFile\n          \n        'fix broken links to factory\n        If oDoc.ReferencedDocumentDescriptors(1).ReferenceMissing = True Then\n            Set oDesc = oDoc.ReferencedDocumentDescriptors(1)\n            'parse\n            sRemainder = oDesc.FullDocumentName\n            sFilename = Right(sRemainder, Len(sRemainder) - InStrRev(sRemainder, \"\\\"))\n            sRemainder = Left(sRemainder, InStrRev(sRemainder, \"\\\") - 1)\n            sFolderE1 = Right(sRemainder, Len(sRemainder) - InStrRev(sRemainder, \"\\\"))\n            sRemainder = Left(sRemainder, InStrRev(sRemainder, \"\\\") - 1)\n            If InStr(sComponentFolders, sFolderE1) = 0 Then Stop\n            For F = LBound(vComponentFolders, 1) To UBound(vComponentFolders)\n                If sFolderE1 = vComponentFolders(F) Then Exit For\n            Next F\n            sFilename = vComponentFactories(F)\n            'fix it\n            Call oDesc.ReferencedFileDescriptor.ReplaceReference( _\n                \"\\\\MKECOMP1\\data\\Eng Docs\\Engineering Data\\Core Kits, CNC Programs\\\" _\n                & sFolderE1 & \"\\\" & sFilename)\n        End If\n        \n        'see if needs to reconnect to row\n        On Error Resume Next\n        R = -1\n        R = oIpart.Row.Index 'if tables already loaded, this doesn't take time, even for parts which need updating (but are linked)\nDebug.Print \"   Got row: \" & Format(Now(), \"hh:mm:ss\")\n        On Error GoTo 0\n        If R = -1 Then\n            'data we might need / find row\n            'dims via name, can also via oDoc.PropertySets(4)(\"Thickness\")\n            sThk = Left(oIpart.Name, 4)\n            sWid = Mid(oIpart.Name, 6, InStrRev(oIpart.Name, \"x\") - 6)\n            sLen = Mid(oIpart.Name, InStrRev(oIpart.Name, \"x\") + 1, Len(oIpart.Name) - 4 - InStrRev(oIpart.Name, \"x\"))\n            'find row\n            For R = 1 To oFactory.TableRows.Count\n                If asTable(R, 1) = sThk And asTable(R, 2) = sWid Then Exit For\n            Next R\n            If asTable(R, 1) <> sThk Or asTable(R, 2) <> sWid Then Stop\n        \n            'fix?\n            Set ohFactorySheet = oFactory.ExcelWorkSheet\n            Set obFactoryBook = ohFactorySheet.Parent\nDebug.Print \"   Opened worksheet: \" & Format(Now(), \"hh:mm:ss\")\n            ohFactorySheet.Cells(R + 1, 3).Value = sLen 'negligible time\nDebug.Print \"   Edited worksheet: \" & Format(Now(), \"hh:mm:ss\")\n            obFactoryBook.Save 'do we have to??, doesn't take very long\nDebug.Print \"   Saved worksheet: \" & Format(Now(), \"hh:mm:ss\")\n            excel.Application.DisplayAlerts = False\n            Application.DisplayAlerts = False\nDebug.Print \"turned off alerts...?\"\n            obFactoryBook.Close 'this has problems with balsa factory...\n            Application.DisplayAlerts = True\n            excel.Application.DisplayAlerts = True\nDebug.Print \"turned on alerts...?\"\n            'can we do something else?\nDebug.Print \"   Closed worksheet: \" & Format(Now(), \"hh:mm:ss\")\n            Call oIpart.ChangeRow(R) '~5 sec, potentially custom parameters in this???\nDebug.Print \"   Edited iPart: \" & Format(Now(), \"hh:mm:ss\")\n        End If\n        \n        \n        'for anything that had fixes, need to update and save\n        oDoc.Update 'this is what takes a long time\nDebug.Print \"   Updated doc: \" & Format(Now(), \"hh:mm:ss\")\n        oDoc.Save 'quite quick?\nDebug.Print \"   Saved doc: \" & Format(Now(), \"hh:mm:ss\")\n\nNextFile:\n        'logging\n        'Set owLogBook = Workbooks.Open(\"\\\\mkecomp1\\data\\SALES FOLDER\\TRANSFER FILES\\NJT-Sales Transfer\\PROJECTS\\Engineering\\iParts\\\" & sLogFilename)\n        'Set ocLogCells = owLogBook.Sheets(1).Cells\n        ocLogCells(L, 1).Value = oDoc.DisplayName\n        ocLogCells(L, 2).Value = Format(Now(), \"hh:mm:ss\")\n        owLogBook.Save\n        L = L + 1\n        \n        oDoc.Close\nDebug.Print \"   Closed doc: \" & Format(Now(), \"hh:mm:ss\")\n        DoEvents\n        sFile = Dir\n    Loop\n    \n    owLogBook.Close\n    \n    Call fnPubRoutineExit\n    \nEnd Sub\n\nSub sciPartSurvey()\n    'nathan tonkinson 2/8/18\n    'to see how many components need updating\n    \n    Dim sFile As String\n    Const sPath As String = \"\\\\MKECOMP1\\data\\Eng Docs\\Engineering Data\\Core Kits, CNC Programs\\_Closeout\\\"\n    Dim oDoc As Document\n    Dim oIpart As iPartMember\n    \n    Dim oWb As Workbook\n    Dim oCells As Range\n    Dim I As Integer\n    \n    Set oWb = Workbooks.Open(\"C:\\users\\ntonkinson\\desktop\\testexcel.xlsx\")\n    Set oCells = oWb.Sheets(1).Cells\n    I = 2\n    \n    'load/fix components\n    sFile = Dir(sPath & \"*.ipt*\")\n    Do Until sFile = \"\"\n        Set oDoc = ThisApplication.Documents.Open(sPath & sFile, False)\n        If oDoc.ComponentDefinition.IsiPartMember = False Then GoTo NextFile\n        Set oIpart = oDoc.ComponentDefinition.iPartMember\n        If oIpart.CustomMember = False Then GoTo NextFile\n        If oIpart.HealthStatus = kUpToDateHealth _\n            Or oDoc.RequiresUpdate = False _\n            Or oDoc.RecentChanges = 0 Then GoTo NextFile\n               \n        oCells(I, 1).Value = oIpart.Name\n        oCells(I, 2).Value = oIpart.HealthStatus\n        oCells(I, 3).Value = oDoc.RequiresUpdate\n        oCells(I, 4).Value = oDoc.RecentChanges\n        I = I + 1\n        Debug.Print oIpart.Name\n        Call oWb.Save\n               \nNextFile:\n        oDoc.Close\n        DoEvents\n        sFile = Dir\n    Loop\n    \n    Call oWb.Save\n    Call oWb.Close\n    \nEnd Sub"], "author": "ntonkinson"},
{"created at": [], "solution Title": "\n                        Re: Custom Quantity Iproperty Inventor BOM\n                    ", "solution": [], "author": "cliff.kelly"},
{"created at": [], "solution Title": "\n                        Re: vb.net push space key in Textbox of Userform opens new file dialog in nvento\n                    ", "solution": ["   Dim oForm As New FrmStart\n                            oForm.lblTmpFileName.Text = strTFN\n                            oForm.ShowDialog() ", "' YOU USED SHOW", "\n                        Catch ex As Exception\n                            Windows.Forms.MessageBox.Show(ex.Message, \"m_AppEvents_OnNewDocument\", Windows.Forms.MessageBoxButtons.OK, Windows.Forms.MessageBoxIcon.Warning)\n                        End Try"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic fun - Changing an iProperty in each part of an assembly\n                    ", "solution": ["Sub Main()\n\n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    oDef = oDoc.ComponentDefinition\n    \n    Dim inputStr As String\n    inputStr = InputBox(\"Enter a text\")\n    \n    \n    Dim referDoc As Document\n    Dim referDisp As DocumentDescriptor\n    For Each referDisp In oDoc.ReferencedDocumentDescriptors\n        referDoc = referDisp.ReferencedDocument\n        \n        Dim customProp As PropertySet\n        customProp = referDoc.PropertySets.Item(\"User Defined Properties\")\n        \n        Dim oProp As Inventor.Property\n        For Each oProp In customProp\n            If oProp.Name = \"Drawing No\" Then\n                If oProp.Value <> \"\" Then\n                    Dim temp As String\n                    temp = Right(oProp.Value, Len(oProp.Value) - 5)\n                    \n                    result = inputStr + temp\n\t\t\t\t\t\n\t\t\t\t\tMessageBox.Show(result)\n\t\t\t\t\t\n                End If\n            End If\n        Next\n        \n        \n    Next\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic to set max dimensions as parameters with export\n                    ", "solution": ["'Set a reference to the active part document\n    Dim oDoc As PartDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As PartComponentDefinition\n    oDef = oDoc.ComponentDefinition\n\t\n\toDoc.Update\n\t\n\nDim oparams As Parameters\n    Dim oparam As Parameter\n    oparams = oDoc.ComponentDefinition.Parameters\n    Dim exists As Boolean\n    exists = False\n\n\n    'Find out if parameter exists, if not it will create this parameter in the table\n    For Each oparam In oparams\n    If oparam.Name = \"MAX_Y\" Then exists = True\n\tIf oparam.Name = \"MAX_Z\" Then exists = True\n\tIf oparam.Name = \"MAX_X\" Then exists = True\n\n\tNext\n\n    'Change the value if the parameter exists otherwise add the parameter\n\t\n\t If exists Then\n\t\t oparams.Item(\"MAX_Y\").Value = Measure.ExtentsWidth\n        \n    Else\n         oparams.UserParameters.AddByValue(\"MAX_Y\",  Measure.ExtentsWidth,  11266)\n    End If\n\t\n\t\n\t\n\t If exists Then\n\t\t oparams.Item(\"MAX_X\").Value = Measure.ExtentsLength\n        \n    Else\n         oparams.UserParameters.AddByValue(\"MAX_X\", Measure.ExtentsLength,  11266)\n    End If\n\t\n\t\n\t\n\t If exists Then\n\t\t oparams.Item(\"MAX_Z\").Value = Measure.ExtentsHeight\n        \n    Else\n        oparams.UserParameters.AddByValue(\"MAX_Z\", Measure.ExtentsHeight,  11266)\n    End If\n\t\n\n\n'Dim param As Parameter\n'param = Parameter.Param(\"MAX_Y\") \nParameter.Param(\"MAX_Y\").ExposedAsProperty = True \n\nParameter.Param(\"MAX_Y\").CustomPropertyFormat.Precision = Inventor.CustomPropertyPrecisionEnum.kThreeDecimalPlacesPrecision \nMsgBox (\"sfaf\")\nParameter.Param(\"MAX_Y\").CustomPropertyFormat.ShowTrailingZeros = True \nParameter.Param(\"MAX_Y\").CustomPropertyFormat.ShowLeadingZeros = False \nParameter.Param(\"MAX_Y\").CustomPropertyFormat.ShowUnitsString = False \n'Parameter.Param(\"MAX_Y\").CustomPropertyFormat.Units = \"mm\" \n\n'param =Parameter.Param(\"MAX_Z\") \nParameter.Param(\"MAX_Z\").ExposedAsProperty = True \n\nParameter.Param(\"MAX_Z\").CustomPropertyFormat.Precision = Inventor.CustomPropertyPrecisionEnum.kThreeDecimalPlacesPrecision \nParameter.Param(\"MAX_Z\").CustomPropertyFormat.ShowTrailingZeros = True \nParameter.Param(\"MAX_Z\").CustomPropertyFormat.ShowLeadingZeros = False \nParameter.Param(\"MAX_Z\").CustomPropertyFormat.ShowUnitsString = False \n'Parameter.Param(\"MAX_Z\").CustomPropertyFormat.Units = \"mm\" \n\n'param =Parameter.Param(\"MAX_X\") \nParameter.Param(\"MAX_X\").ExposedAsProperty = True \n\nParameter.Param(\"MAX_X\").CustomPropertyFormat.Precision = Inventor.CustomPropertyPrecisionEnum.kThreeDecimalPlacesPrecision \nParameter.Param(\"MAX_X\").CustomPropertyFormat.ShowTrailingZeros = True \nParameter.Param(\"MAX_X\").CustomPropertyFormat.ShowLeadingZeros = False \nParameter.Param(\"MAX_X\").CustomPropertyFormat.ShowUnitsString = False \n'Parameter.Param(\"MAX_X\").CustomPropertyFormat.Units = \"mm\" \n\n\toDoc.Update", "'Set a reference to the active part document\n    Dim oDoc As PartDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As PartComponentDefinition\n    oDef = oDoc.ComponentDefinition\n\t\n\toDoc.Update\n\t'MsgBox(System.math.Ceiling(6))\n\nDim oparams As Parameters\n    Dim oparam As Parameter\n    oparams = oDoc.ComponentDefinition.Parameters\n    Dim exists As Boolean\n    exists = False\n\n\n    'Find out if parameter exists, if not it will create this parameter in the table\n    For Each oparam In oparams\n    If oparam.Name = \"MAX_Y\" Then exists = True\n\tIf oparam.Name = \"MAX_Z\" Then exists = True\n\tIf oparam.Name = \"MAX_X\" Then exists = True\n\n\tNext\n\n    'Change the value if the parameter exists otherwise add the parameter\n\t\n\t", "Dim w As Decimal = Measure.ExtentsWidth\n\tDim L As Decimal = Measure.ExtentsLength\n\tDim H As Decimal = Measure.ExtentsHeight\n\tMsgBox(w)\n\tMsgBox(L)\n\tMsgBox (H)\n\tMsgBox (System.math.Ceiling(w))\n\tMsgBox (System.math.Ceiling(L))\n\tMsgBox  (System.math.Ceiling(H))", "\n\n\t If exists Then\n\t\t oparams.Item(\"MAX_Y\").Expression = System.math.Ceiling(w)\n        \n    Else\n         oparams.UserParameters.AddByExpression(\"MAX_Y\",System.math.Ceiling(w)  ,  11266)\n    End If\n\t\n\t\n\t\n\t If exists Then\n\t\t oparams.Item(\"MAX_X\").Expression = System.math.Ceiling(L)\n        \n    Else\n         oparams.UserParameters.AddByExpression(\"MAX_X\",System.math.Ceiling(L),  11266)\n    End If\n\t\n\t\n\t\n\t If exists Then\n\t\t oparams.Item(\"MAX_Z\").Expression = System.math.Ceiling(H)\n        \n    Else\n        oparams.UserParameters.AddByExpression(\"MAX_Z\", System.math.Ceiling(H),  11266)\n    End If\n\t\n\n\n'Dim param As Parameter\n'param = Parameter.Param(\"MAX_Y\") \nParameter.Param(\"MAX_Y\").ExposedAsProperty = True \n\nParameter.Param(\"MAX_Y\").CustomPropertyFormat.Precision = Inventor.CustomPropertyPrecisionEnum.kThreeDecimalPlacesPrecision \nParameter.Param(\"MAX_Y\").CustomPropertyFormat.ShowTrailingZeros = True \nParameter.Param(\"MAX_Y\").CustomPropertyFormat.ShowLeadingZeros = False \nParameter.Param(\"MAX_Y\").CustomPropertyFormat.ShowUnitsString = False \nParameter.Param(\"MAX_Y\").CustomPropertyFormat.Units = \"mm\" \n\n'param =Parameter.Param(\"MAX_Z\") \nParameter.Param(\"MAX_Z\").ExposedAsProperty = True \n\nParameter.Param(\"MAX_Z\").CustomPropertyFormat.Precision = Inventor.CustomPropertyPrecisionEnum.kThreeDecimalPlacesPrecision \nParameter.Param(\"MAX_Z\").CustomPropertyFormat.ShowTrailingZeros = True \nParameter.Param(\"MAX_Z\").CustomPropertyFormat.ShowLeadingZeros = False \nParameter.Param(\"MAX_Z\").CustomPropertyFormat.ShowUnitsString = False \nParameter.Param(\"MAX_Z\").CustomPropertyFormat.Units = \"mm\" \n\n'param =Parameter.Param(\"MAX_X\") \nParameter.Param(\"MAX_X\").ExposedAsProperty = True \n\nParameter.Param(\"MAX_X\").CustomPropertyFormat.Precision = Inventor.CustomPropertyPrecisionEnum.kThreeDecimalPlacesPrecision \nParameter.Param(\"MAX_X\").CustomPropertyFormat.ShowTrailingZeros = True \nParameter.Param(\"MAX_X\").CustomPropertyFormat.ShowLeadingZeros = False \nParameter.Param(\"MAX_X\").CustomPropertyFormat.ShowUnitsString = False \nParameter.Param(\"MAX_X\").CustomPropertyFormat.Units = \"mm\" \n\n\toDoc.Update"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: open explorer to correct folder\n                    ", "solution": ["Shell", "(", "\"", "explorer.exe ", "\"", " ", "&", " ", "oPDFPath", ", ", "vbNormalFocus", ")"], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: VBA Arrange Chain Dimension Set\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Activate Vault file number generator manually in IV for SaveAs for drawings\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Launch internal iLogic rule using macro\n                    ", "solution": ["Public Sub LaunchMyRule()\n\n  RuniLogic \"Rule9\" '<- being the name of the rule\n\nEnd Sub\n\nPublic Sub RuniLogic(ByVal RuleName As String)\n  Dim iLogicAuto As Object\n  Dim oDoc As Document\n\n  Set oDoc = ThisApplication.ActiveDocument\n  \n  If oDoc Is Nothing Then\n    MsgBox \"Missing Inventor Document\"\n    Exit Sub\n  End If\n\n  Set iLogicAuto = GetiLogicAddin(ThisApplication)\n  If (iLogicAuto Is Nothing) Then Exit Sub\n\n  iLogicAuto.RunRule oDoc, RuleName '<- name of the rule again, changed RunExternalRule to RunRule here\nEnd Sub\n\nFunction GetiLogicAddin(oApplication As Inventor.Application) As Object\n'Find the add-in you are looking for\nDim addIn As ApplicationAddIn\n", "'Set addIns = oApplication.ApplicationAddIns '<- errors out on this part", "\n\n\nOn Error GoTo NotFound\nSet addIn = oApplication.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\n\nIf (addIn Is Nothing) Then Exit Function\n\naddIn.Activate\nSet GetiLogicAddin = addIn.Automation\nExit Function\nNotFound:\nEnd Function"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Is there a table which lists the Name and DisplayName for assets?\n                    ", "solution": [], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: iLogic to to take multiple drawing files into one drawing file.\n                    ", "solution": ["Dim oDoc1 As DrawingDocument\noDoc1 = ThisApplication.ActiveDocument\n\nFor Each oDoc in ThisApplication.Documents\n\tIf oDoc IsNot oDoc1 Then\n\t\t'make sure it's a drawing\n\t\tIf oDoc.DocumentType = 12292 Then \n\t\t\tFor Each oSheet In oDoc.Sheets\n\t\t\t\toSheet.CopyTo (oDoc1)\n\t\t\tNext\n\t\t\toDoc.Close(True)\n\t\tEnd If\n\tEnd If\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic, one height limits behabior in another height\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: iLogic errors after update inventor 2018\n                    ", "solution": ["ThisApplication", ".", "[_LibraryDocumentModifiable]", " = ", "True", " ", "ThisApplication", ".", "[_LibraryDocumentModifiable]", " = ", "True"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Add a new sheet with format\n                    ", "solution": ["\u00a0", "osheet = oDrawingDoc.Sheets.AddUsingSheetFormat(oFormat, \"C:\\Vault\\Projects\\xyz.ipt\")' For you oPartDocPath.fullfilename"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Vb Net Change Thread Hole Size\n                    ", "solution": [], "author": "romeu.m.b.silva"},
{"created at": [], "solution Title": "\n                        Re: Why are there Joints in Inventor?\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Partlist sheet:2 or 3 or 4 ...\n                    ", "solution": ["Public Sub pl()\n\nDim oDoc As Inventor.DrawingDocument\nSet oDoc = ThisApplication.ActiveDocument\nDim oSheet As Inventor.Sheet\n'Set oSheet = oDoc.Sheets.Item(1) ' sheet by name\nDim oPartslist As PartsList\n\n'DocType = ThisDoc.Document.DocumentType\n    If oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then\n    \n    Exit Sub\n    End If\n\nDim oDrawDoc As DrawingDocument\nSet oDrawDoc = ThisApplication.ActiveDocument\n\nFor Each oSheet In oDrawDoc.Sheets\nMsgBox oSheet.Name\noSheet.Activate\n    If oDrawDoc.ActiveSheet.PartsLists.Count = 0 Then\n    \n    'Exit Sub\n    ElseIf oDrawDoc.ActiveSheet.PartsLists.Count > 1 Then\n    Dim oPartList As PartsList\noPartList = oDrawDoc.ActiveSheet.PartsLists.Item(1)\nDim oPartsList1 As PartsList\noPartsList1 = oDrawDoc.ActiveSheet.PartsLists.Item(1)\nDim sAuthor, sPath, sFilename, sTXTFileName As String\nDim oPropSet As PropertySet\n\nsPath = \"x:\\input\\\"\n\nDim oRefedDoc As Document\noRefedDoc = oPartList.ReferencedDocumentDescriptor.ReferencedDocument\nsAuthor = oRefedDoc.PropertySets(1)(\"Author\").Value\n    If sAuthor = \"\" Then\n\n    Exit Sub\n    End If\n\nsFilename = sAuthor & \".txt\"\nsTXTFileName = sPath & sFilename\n\n\n\noPartslist = oSheet.PartsLists(1)\nCall oPartslist.Export(sTXTFileName, PartsListFileFormatEnum.kTextFileTabDelimited)\n    End If\nNext\n\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Macro Button BMPs\n                    ", "solution": [], "author": "rogmitch"},
{"created at": [], "solution Title": "\n                        Re: Sorting Drawing Parts List using VBA\n                    ", "solution": ["Sub Main()\n    Dim oDwgDoc As Document\n    Set oDwgDoc = ThisApplication.ActiveDocument\n\n   If oDwgDoc.DocumentType <> kDrawingDocumentObject Then: MsgBox(\"Not a drawing.\" & vblf & vblf & \"Rule Aborted!\"): Exit Sub: End If\n\n   For Each oSheet in oDwgDoc.Sheets\n      For Each oPartsList on oSheet.PartsLists", "          Dim oBOMDoc As Document\n          oBOMDoc = oPartsList.ReferencedDocumentDescriptor.ReferencedDocument\n\n          Dim oBOM As BOM\n          Set oBOM = oBOMDoc.ComponentDefinition.BOM\n\n          oBOM.StructuredViewEnabled = True\n          'oBOM.StructuredViewFirstLevelOnly = False\n\n          Dim oBOMView As BOMView\n          Set oBOMView = oBOM.BOMViews.Item(\"Structured\")\n\n          Call oBOMView.Sort(\"Part Number\", True, , True, , True)\n          Call oBOMView.Renumber(1, 1)\n\n          Call oPartsList.Sort2(\"PART NUMBER\", True, , , , , , True)\n      Next\n   Next\nEnd SUb\n\n\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic to set Sheet Metal style to known component\n                    ", "solution": ["Dim SMStyleName As String = \"1\"", "Dim compOcc As ComponentOccurrence\ncompOcc = Component.InventorComponent(\"Part1:1\")\n\nDim SMStyleName As String\nSMStyleName = \"1\"\n\ncompOcc.Definition.SheetMetalStyles.Item(SMStyleName).Activate", "Component.InventorComponent(\"Part1:1\").Definition.SheetMetalStyles.Item(\"Default\").Activate"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: inventor 2016 - 2018 issues\n                    ", "solution": ["Public Sub MakeAlleFreeAndPromote()\n\n' Create a transaction. -> for 1 undo command\nDim oTransMgr As TransactionManager\nSet oTransMgr = ThisApplication.TransactionManager\nDim oTrans As Transaction\nSet oTrans = oTransMgr.StartTransaction(ThisApplication.ActiveDocument, \"MakeAlleFreeAndPromote\")\n  \n\n' check if an iwall is selected\n        Dim oDoc As AssemblyDocument\n        Set oDoc = ThisApplication.ActiveDocument\n\n        Dim oOcc As ComponentOccurrence\n        On Error Resume Next\n        Set oOcc = oDoc.SelectSet.Item(1)\n        If Err Then\n            GoTo TraverseNormally\n        End If\n        \n        If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n            If oOcc.ActiveLevelOfDetailRepresentation = \"Wall\" Then\n               oOcc.Edit\n            End If\n        End If\n\n'declare everything needed\nTraverseNormally:\n        Dim oDef As AssemblyComponentDefinition\n        Set oDef = oDoc.ComponentDefinition\n        \n        Dim oAssDoc As AssemblyDocument\n        Set oAssDoc = ThisApplication.ActiveEditObject\n        Dim oActDef As AssemblyComponentDefinition\n        Set oActDef = oAssDoc.ComponentDefinition\n        \n        Dim oPattern As OccurrencePattern\n        Dim oPatternElement As OccurrencePatternElement\n        Dim oOccurence As ComponentOccurrence\n        Dim oComponent As ComponentOccurrence\n\n\n\n\n\n        'Traverse all the patterns in the assembly:\n        For Each oPattern In oAssDoc.ComponentDefinition.OccurrencePatterns\n            'Traverse all elements in the pattern to make them independent:\n            For Each oPatternElement In oPattern.OccurrencePatternElements\n              '  On Error Resume Next\n                oPatternElement.Independent = True\n                If Err Then\n                    Err.Clear\n                    End If\n            Next oPatternElement\n        Next oPattern\n        \n        'Delete all patterns in the assembly\n        For Each oPattern In oAssDoc.ComponentDefinition.OccurrencePatterns\n            oPattern.Delete\n        Next oPattern\n        \n        'delete all suppressed\n        For Each oComponent In oAssDoc.ComponentDefinition.Occurrences\n                If oComponent.Suppressed = True Then\n                    oComponent.Delete\n                End If\n        Next oComponent\n        \n        'Unground all components\n        For Each oOccurence In oAssDoc.ComponentDefinition.Occurrences\n            If oOccurence.Grounded = True Then\n                oOccurence.Grounded = False\n            End If\n        Next oOccurence\n        \n        'Delete all iComposites\n        For Each oIcomp In oAssDoc.ComponentDefinition.iMateResults\n         '   On Error Resume Next\n            oIcomp.Delete\n            If Err Then\n            Err.Clear\n            End If\n        Next oIcomp\n        \n        'Delete all imates\n        For Each oImate In oAssDoc.ComponentDefinition.iMateDefinitions\n          '  On Error Resume Next\n            oImate.Delete\n            If Err Then\n            Err.Clear\n            End If\n        Next oImate\n        \n        'Delete all constraints\n        For Each oConstraint In oAssDoc.ComponentDefinition.Constraints\n           ' On Error Resume Next\n            oConstraint.Delete\n            If Err Then\n            Err.Clear\n            End If\n        Next oConstraint\n            \n        'Promote all frames\n\n            ' Get the top level occurrence of an assembly\n             Dim oSubAssyOcc As ComponentOccurrence\n             \n             \n            ' On Error Resume Next\n                     Set oSubAssyOcc = oDef.Occurrences.ItemByName(oDef.ActiveOccurrence.Name)\n                      'If Err Then\n                       '   MsgBox \"A subassembly must be active if you want to promote it. No Subassembly will be touched\"\n                           \n                   ' Else\n                        Dim i As Integer\n                        For i = 1 To oActDef.Occurrences.Count\n                           \n                        ' Get the 2nd level occurrence under the assembly occurrence\n                        Dim oSubOcc As ComponentOccurrenceProxy\n                        Set oSubOcc = oSubAssyOcc.SubOccurrences.Item(1)\n                        \n                        Dim oPane As BrowserPane\n                        Set oPane = oDoc.BrowserPanes.Item(\"AmBrowserArrangement\") '2017 11 05 - multilangue change\n                        \n                        ' Get the browser nodes corresponding to the two occurrences\n                        Dim oTargetNode As BrowserNode\n                        Set oTargetNode = oPane.GetBrowserNodeFromObject(oSubAssyOcc)\n                        \n                        \n                        Dim oSourceNode As BrowserNode\n                        Set oSourceNode = oPane.GetBrowserNodeFromObject(oSubOcc)\n                        \n                        \n                        ' Reorder the nodes to promote the sub-occurrence to the top level\n                        Call oPane.Reorder(oTargetNode, True, oSourceNode)\n                        \n                        Next\n                        ", "Call oSubAssyOcc.ExitEdit(kExitToParent)", "\n                        ' activate one level up\n                             ", "'Dim oCtrlDef As ControlDefinition\n                             'Set oCtrlDef = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppReturnTopCmd\")\n                             'oCtrlDef.Execute\n", "                                \n                        ' Delete the original Subassembly\n                            oSubAssyOcc.Delete\n                            oSubAssyOcc.Delete\n                      'End If\n             On Error GoTo 0\n\n    \n' End the transaction.\n    oTrans.End\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Center drawing dimensions using \"Center Dimension Text API Sample\"\n                    ", "solution": ["Sub", " ", "Main", "()", "\n        ", "'", " Set a reference to the active drawing document", "\n        ", "Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", "\n        ", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    \n        ", "'", " Set a reference to the active sheet", "\n        ", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n        ", "oSheet", " ", "=", " ", "oDoc", ".", "ActiveSheet", "\n    \n        ", "Dim", " ", "oDrawingDim", " ", "As", " ", "DrawingDimension", "\n    \n        ", "'", " Iterate over all dimensions in the drawing and", "\n        ", "'", " center them if they are linear or angular.", "        For Each oSheet in oDoc.Sheets\n    \n            ", "For", " ", "Each", " ", "oDrawingDim", " ", "In", " ", "oSheet", ".", "DrawingDimensions", "\n                ", "If", " ", "TypeOf", " ", "oDrawingDim", " ", "Is", " ", "LinearGeneralDimension", " ", "Or", "\n                ", "TypeOf", " ", "oDrawingDim", " ", "Is", " ", "AngularGeneralDimension", " ", "Then", "\n                    ", "Call", " ", "oDrawingDim", ".", "CenterText", "\n                ", "End", " ", "If", "\n            ", "Next", "        Next\n        \n    ", "End Sub"], "author": "kejlong"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Export BOM, custom lists\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Excel formatting\n                    ", "solution": ["Imports", " ", "Microsoft", ".", "Office", ".", "Interop", ".", "Excel", ".", "Constants", "\u00a0", "Imports", " ", "Microsoft", ".", "Office", ".", "Interop", ".", "Excel", "      "], "author": "chendersonCRKPU"},
{"created at": [], "solution Title": "\n                        Re: change sected parts colour in an assembley\n                    ", "solution": ["\tIf MatchFound = True Then\n\t\toAsset = oAssyDoc.Assets.Item(\"Smooth - Red\")\n\tEnd If\n\toOcc.Appearance = oAsset\nNext ", "oOcc.Appearance = oAsset\u00a0"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Show Front View (Viewcube) Using an iLogic Rule\n                    ", "solution": ["ThisApplication", ".", "CommandManager", ".", "ControlDefinitions", ".", "Item", "(", "\"AppFrontViewCmd\"", ").", "Execute"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to assign ilogic code to button\n                    ", "solution": [], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: Removing Characters From a String\n                    ", "solution": ["oStr = Split(\"N:\\Mfg-Design\\_MFG Drawings\\1420-Drag Conveyors\\TEST\\00\\Model\", \"Model\")(0)\n\noNewStr = oStr & \"Export\\AutoCad Export\\ \"\u00a0\n\nMsgBox(oNewStr)", "Public", " ", "Sub", " ", "Main", "()", "\n    ", "'", " Get the DWG translator Add-In.", "\n    ", "Dim", " ", "DWGAddIn", " ", "As", " ", "TranslatorAddIn", "\n    ", "DWGAddIn", " ", "=", " ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"", "{C24E3AC2-122E-11D5-8E91-0010B541CD80}", "\"", ")", "\n\n    ", "'", "Set a reference to the active document (the document to be published).", "\n    ", "Dim", " ", "oDocument", " ", "As", " ", "Document", "\n    ", "oDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n    ", "Dim", " ", "oContext", " ", "As", " ", "TranslationContext", "\n    ", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n    ", "oContext", ".", "Type", " ", "=", " ", "kFileBrowseIOMechanism", "\n\n    ", "'", " Create a NameValueMap object", "\n    ", "Dim", " ", "oOptions", " ", "As", " ", "NameValueMap", "\n    ", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n\n    ", "'", " Create a DataMedium object", "\n    ", "Dim", " ", "oDataMedium", " ", "As", " ", "DataMedium", "\n    ", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n\n    ", "'", " Check whether the translator has 'SaveCopyAs' options", "\n    ", "If", " ", "DWGAddIn", ".", "HasSaveCopyAsOptions", "(", "oDocument", ", ", "oContext", ", ", "oOptions", ")", " ", "Then", "\n\n        ", "Dim", " ", "strIniFile", " ", "As", " ", "String", "\n        ", "strIniFile", " ", "=", " ", "\"", "C:\\tempDWGOut.ini", "\"", "\n        ", "'", " Create the name-value that specifies the ini file to use.", "\n        ", "oOptions", ".", "Value", "(", "\"", "Export_Acad_IniFile", "\"", ")", " ", "=", " ", "strIniFile", "\n    ", "End", " ", "If", "\n    ", "'", "Set the destination file name", "\n    ", "oDataMedium", ".", "FileName", " ", "= Split(oDocument.FullFileName, \"Model\")(0)\u00a0&", " ", "\"", "\\Export\\AutoCad Export\\", "\"", " ", "&", " ", "ThisDoc", ".", "FileName", "(", "False", ")", " ", "&", "\"", ".dwg", "\"", "\n    \n", "'", "    MessageBox.Show(\"oDataMedium.FileName\", \"Title\")", "\n\n    \n    ", "'", "Publish document.", "\n    ", "Call", " ", "DWGAddIn", ".", "SaveCopyAs", "(", "oDocument", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n", "End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Import sketched symbol\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: [IV 2014] - Open part from Drawing View with part selection filter\n                    ", "solution": ["    Dim Cm As CommandManager\n    Set Cm = ThisApplication.CommandManager\n    Call Cm.PostPrivateEvent(PrivateEventTypeEnum.kFileNameEvent, sFileFullPath)\n    Dim oCtrlDef As ButtonDefinition\n    Set oCtrlDef = ThisApplication.CommandManager.ControlDefinitions.Item(\"DLxOpenComponentCmd\")\n    Call oCtrlDef.Execute"], "author": "gmassart"},
{"created at": [], "solution Title": "\n                        Re: Export Pdf with C#\n                    ", "solution": ["oOptions.Value[\"S", "heet_Range\"] = Inventor.PrintRangeEnum.kPrintSheetRange;", "TO", "oOptions.Value[\"Sheet_Range\"] = PrintRangeEnum.kPrintAllSheets;"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Fill in iProperty of parts and sub asssemblies, except \"Purchas\n                    ", "solution": ["pProject = InputBox(\"Projectnummer\", \"Projectnummer\")\n\nDim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument", "For Each oSubDoc in oAsmDoc.AllReferencedDocuments", "    If oSubDoc.IsModifiable = False Then: Continue For: End If", "    If oSubDoc.ComponentDefinition.BOMStructure <> BOMStructureEnum.", "kPurchasedBOMStructure", "        oSubDoc.PropertySets(\"Design Tracking Properties\")(\"Project\").Value = pProject", "    End if", "Next"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: External Rule executed for all components in the assembly\n                    ", "solution": ["Sub Main()\n    Dim oDoc As Document\n    oDoc = THisApplicaiton.ActiveDocument\n    \n    Call Extend_XYZ_Traverse(oDoc.ComponentDefinition.Occurrences, 0)\nEnd SUb\n\nSub Extend_XYZ_Traverse(Occurrences As ComponentOccurrences, _\n                             Level As Integer)\n    ' Iterate through all of the occurrence in this collection.  This\n    ' represents the occurrences at the top level of an assembly.\n    Dim oOcc As ComponentOccurrence\n    Dim oCustomPropSet As PropertySet\n    Dim Model_X As Double\n    Dim Model_Y As Double\n    Dim Model_Z As Double\n    \n    For Each oOcc In Occurrences\n     'If it is an Assembly go to next Level\n     If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n      Call ", "Extend_XYZ_Traverse", "(oOcc.SubOccurrences, Level + 1)\n     ElseIf oOcc.DefinitionDocumentType = kPartDocumentObject Then\n         'Get the ranges\n         Model_X = (oOcc.RangeBox.MaxPoint.x + (oOcc.RangeBox.MinPoint.x) * -1) * 10\n         Model_Y = (oOcc.RangeBox.MaxPoint.Y + (oOcc.RangeBox.MinPoint.Y) * -1) * 10\n         Model_Z = (oOcc.RangeBox.MaxPoint.Z + (oOcc.RangeBox.MinPoint.Z) * -1) * 10\n         \n         'Get the UserDefinedPropertySet\n         oCustomPropSet = oOcc.Definition.Document.PropertySets.item(4)\n         \n         If CheckPropertyExists(oCustomPropSet, \"ModelX\") Then\n          oCustomPropSet.item(\"ModelX\").Expression = Model_X\n         Else\n          Call oCustomPropSet.Add(Model_X, \"ModelX\")\n         End If\n         \n         If CheckPropertyExists(oCustomPropSet, \"ModelY\") Then\n          oCustomPropSet.item(\"ModelY\").Expression = Model_Y\n         Else\n          Call oCustomPropSet.Add(Model_Y, \"ModelY\")\n         End If\n         \n         If CheckPropertyExists(oCustomPropSet, \"ModelZ\") Then\n          oCustomPropSet.item(\"ModelZ\").Expression = Model_Z\n         Else\n          Call oCustomPropSet.Add(Model_Z, \"ModelZ\")\n         End If\n      End If\n     Next\nEnd Sub\n\nPublic Function CheckPropertyExists(oProps As PropertySet, oPropName As String) As Boolean\n CheckPropertyExists = False\n Dim oProp As Property\n For Each oProp In oProps\n    If oProp.Name = oPropName Then\n        CheckPropertyExists = True\n    End If\n Next\nEnd Function", "Sub Bounding_Box_Main()\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n    Call Bounding_Box(oAsmDoc.ComponentDefinition.Occurrences, 1)\n    \n  End Sub\n\n  Sub Bounding_Box(Occurrences As ComponentOccurrences, _\n                             Level As Integer)\n    ' Iterate through all of the occurrence in this collection.  This\n    ' represents the occurrences at the top level of an assembly.\n    Dim oOcc As ComponentOccurrence\n    Dim oCustomPropSet As PropertySet\n    Dim modX As Double\n    Dim modY As Double\n    Dim modZ As Double\n    \n    For Each oOcc In Occurrences\n     'If it is an Assembly go to next Level\n    Set oCustomPropSet = oOcc.Definition.Document.PropertySets.Item(4)\n     If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n      Call Bounding_Box(oOcc.SubOccurrences, Level + 1)\n     ElseIf oOcc.DefinitionDocumentType = kPartDocumentObject Then\n         'Get the ranges Model X, Model Y, Model Z\n         modX = (oOcc.RangeBox.MaxPoint.X + (oOcc.RangeBox.MinPoint.X) * -1) * 10\n         modY = (oOcc.RangeBox.MaxPoint.Y + (oOcc.RangeBox.MinPoint.Y) * -1) * 10\n         modZ = (oOcc.RangeBox.MaxPoint.Z + (oOcc.RangeBox.MinPoint.Z) * -1) * 10\n         \n         'Round to 0\n         modXr = Round(modX, 0)\n         modYr = Round(modY, 0)\n         modZr = Round(modZ, 0)\n         \n         \n\n'Get the UserDefinedPropertySet\n         Set oCustomPropSet = oOcc.Definition.Document.PropertySets.Item(4)\n         \n         ' For X\n         If CheckPropertyExists(oCustomPropSet, \"ModX\") Then\n          oCustomPropSet.Item(\"ModX\").Expression = modXr\n         Else\n          Call oCustomPropSet.Add(modXr, \"ModX\")\n         End If\n         \n         ' For Y\n         If CheckPropertyExists(oCustomPropSet, \"ModY\") Then\n          oCustomPropSet.Item(\"ModY\").Expression = modYr\n         Else\n          Call oCustomPropSet.Add(modYr, \"ModY\")\n         End If\n         \n        ' For Z\n          If CheckPropertyExists(oCustomPropSet, \"ModZ\") Then\n          oCustomPropSet.Item(\"ModZ\").Expression = modZr\n         Else\n          Call oCustomPropSet.Add(modZr, \"ModZ\")\n         End If\n\n'Create DIMALLLL L x W x H\n\nIf modXr >= modYr And modYr >= modZr Then\nDIMALL = modX & \"x\" & modY & \"x\" & modZ\n\nElseIf modXr >= modZr And modZr >= modYr Then\nDIMALL = modXr & \"x\" & modZr & \"x\" & modYr\n\nElseIf modYr >= modZr And modZr >= modXr Then\nDIMALL = modYr & \"x\" & modZr & \"x\" & modXr\n\nElseIf modYr > modXr And modXr > modZr Then\nDIMALL = modYr & \"x\" & modXr & \"x\" & modZr\n\nElseIf modZr > modXr And modXr > modYr Then\nDIMALL = modZr & \"x\" & modXr & \"x\" & modYr\n\nElseIf modZr > modYr And modYr > modXr Then\nDIMALL = modZr & \"x\" & modYr & \"x\" & modXr\n\nEnd If\n\n\nIf CheckPropertyExists(oCustomPropSet, \"DIMALL\") Then\n          oCustomPropSet.Item(\"DIMALL\").Expression = DIMALL\n         Else\n          Call oCustomPropSet.Add(DIMALL, \"DIMALL\")\n         End If\n\n         \n\n    End If\n     Next\nEnd Sub\n\n\nPublic Function CheckPropertyExists(oProps As PropertySet, oPropName As String) As Boolean\n CheckPropertyExists = False\n Dim oProp As Property\n For Each oProp In oProps\n    If oProp.Name = oPropName Then\n        CheckPropertyExists = True\n    End If\n Next\nEnd Function\n\n"], "author": "martin.winkler"},
{"created at": [], "solution Title": "\n                        Re: How to NOT run an \"After Open Document\" rule event trigger?\n                    ", "solution": ["Dim", " ", "oFileDlg", " ", "As", " ", "Inventor", ".", "FileDialog", " = ", "Nothing", "\n", "Call", " ", "ThisApplication", ".", "CreateFileDialog", "(", "oFileDlg", ")\n\n", "oFileDlg", ".", "InitialDirectory", " = ", "ThisDoc", ".", "WorkspacePath", "()\n\n", "Call", " ", "oFileDlg", ".", "ShowOpen", "()\n\n", "Dim", " ", "oOptions", " ", "As", " ", "NameValueMap", "\n", "oOptions", " = ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "oOptions", ".", "Add", "(", "\"FastOpen\"", ", ", "\"true\"", ")\n\n", "ThisApplication", ".", "Documents", ".", "OpenWithOptions", "(", "oFileDlg", ".", "FileName", ", ", "oOptions", ", ", "True", ")"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Open document while saving\n                    ", "solution": ["Sub", " ", "Propcheckdes", "(", "oDoc", " ", "As", " ", "Inventor", ".", "Document", ", ", "filetype", " ", "As", " ", "Integer", ")\n", "Dim", " ", "counter", " ", "As", " ", "Integer", " = 0\n", "Dim", " ", "Desc", " ", "as", " ", "String", "\n", "Dim", " ", "opened", " ", "As", " ", "Boolean", " = ", "False", "\n", "Dim", " ", "alreadyopen", " ", "As", " ", "Boolean", " = ", "False", "\n", "Desc", " = ", "iProperties", ".", "Value", "(", "\u201cProject\u201d", ", ", "\u201cDescription\u201d", ")\n", "Dim", " ", "odoc2", " ", "As", " ", "Inventor", ".", "PartDocument", "\n", "Dim", " ", "odoc3", " ", "As", " ", "Inventor", ".", "AssemblyDocument", "\n\n\n", "''see if file is already open", "\n\n\t", "For", " ", "Each", " ", "d", " ", "As", " ", "Document", " ", "In", " ", "ThisApplication", ".", "Documents", ".", "VisibleDocuments", "\n\t\t", "If", " ", "d", ".", "FullFileName", " = ", "oDoc", ".", "FullFileName", " ", "Then", "\n\t\t\t", "alreadyopen", " = ", "True", "\n\t\t", "End", " ", "If", "\n\t", "Next", "\n\n\t", "''restore active window", "\n\t", "Dim", " ", "odocactive", " ", "As", " ", "Inventor", ".", "Document", "\n\t", "odocactive", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n\t", "If", " ", "String", ".", "IsNullOrWhiteSpace", "(", "Desc", ") = ", "True", " ", "Then", "\n\t\t", "If", " ", "filetype", " = 1 ", "Then", "\n\t\t\t", "odoc3", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oDoc", ".", "FullFileName", ", ", "True", ")\n\t\t", "Else", "\n\t\t\t", "odoc2", " = ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oDoc", ".", "FullFileName", ", ", "True", ")\n\t\t", "End", " ", "If", "\n\t\t", "opened", " = ", "True", "\n\t", "End", " ", "If", "\n\n\t", "Do", " ", "Until", " ", "String", ".", "IsNullOrWhiteSpace", "(", "Desc", ") = ", "False", " ", "Or", " ", "counter", " > 0\n\t\t", "iLogicForm", ".", "ShowGlobal", "(", "\"Pflichtfelder\"", ",", "FormMode", ".", "Modal", ")\n\t\t", "Desc", " = ", "iProperties", ".", "Value", "(", "\u201cProject\u201d", ", ", "\u201cDescription\u201d", ")\n\t\t", "counter", " = ", "counter", " + 1\n\t", "Loop", "\n\n\t", "If", " ", "opened", " ", "And", " ", "Not", " ", "alreadyopen", " ", "Then", "\n\t\t", "If", " ", "filetype", " = 1 ", "Then", "\n\t\t\t", "odoc3", ".", "Close", "(", "True", ")\n\t\t", "Else", "\n\t\t\t", "odoc2", ".", "Close", "(", "True", ")\n\t\t", "End", " ", "If", "\t\n\t", "End", " ", "If", "\n\n\t", "odocactive", ".", "Activate", "\n\t\n", "End", " ", "Sub"], "author": "sharkyenergy"},
{"created at": [], "solution Title": "\n                        Re: Using quote marks in a string variable\n                    ", "solution": [], "author": "atomicZ"},
{"created at": [], "solution Title": "\n                        Re: Calling Inventor Save dialogue using iLogic\n                    ", "solution": ["' THIS RULE WILL OUTPUT THE CURRENT PART FILE INTO AN IDW DRAWING\nImports Inventor.ViewOrientationTypeEnum\nImports Inventor.DrawingViewStyleEnum\n\nDim oDrawingDoc As DrawingDocument\nDim oPartDoc As PartDocument\nDim oSheet As sheet\nDim oBaseView As DrawingView\n\n\n'DWGCreate = MsgBox(\"Would you like to create a drawing for the current configuration?\", vbYesNo, \"Export Drawing\")\n\n'If DWGCreate = vbYes Then\n\noPartDoc = ThisDoc.Document 'This statement requires that this rule will only run in part documents\n'Error trap for file name\nDWGCreate = MsgBox(\"Are you ready to export file?\", vbYesNo, \"Export Drawing\")\n\n'iLogicForm.Show(\"Drawing Export\", FormMode.Modal)\n\n'jobnumber = iProperties.Value(\"Project\", \"Project\")\n\nDim oFile As System.IO.File\nDim oWrite As System.IO.StreamWriter\nDim oFileDlg As inventor.FileDialog = Nothing'<-----------------------here is nothing\n\n\ndwg_filename = ThisDoc.FileName(False) 'First time used to see if filename is \"\"\nMessageBox.Show(\"length File Name is :- \" & Len(dwg_filename) , \"iLogic: ErrTrap 1\")\nIf Len(dwg_filename) = 0 Then\n'Need to load the save dialogue with save as switch set\noFileDlg.Filter = \"Autodesk Inventor Part Files (*.ipt)|*.ipt\"'<-----------------here you set \"nothings\" filter\nMessageBox.Show(\"File Name is :- \" & dwg_filename , \"iLogic: ErrTrap 2\")\noFileDlg.CancelError = True\nOn Error Resume Next\noFileDlg.ShowSave()\nIf Err.Number <> 0 Then\nMessageBox.Show(\"No File Saved.\", \"iLogic: Dialog Canceled\")\nElseIf oFileDlg.FileName <> \"\" Then\nMyFile = oFileDlg.FileName\n'save the file \noDrawingDoc.SaveAs(MyFile, False) 'True = Save As Copy & False = Save As\nEnd If\nEnd If\n\n\n\n\ndwg_filename = ThisDoc.FileName(False) & \".idw\" 'Redefined with extension for dialogue filter.\n'ThisDoc.Launch(dwg_filename)\nMessageBox.Show(\"File Name is :- \" & dwg_filename , \"iLogic: ErrTrap 1\")\n 'Define IDW Template File Location\n   oDrawingDoc = ThisApplication.Documents.Add(kDrawingDocumentObject, \"O:\\KS FAB\\ILOGIC RULES\\KS INVENTOR TEMPLATES\\Standard Section Templates\\DRAWING KS STANDARD SECTION.idw\", True)\n   'oDrawingDoc = ThisApplication.Documents.Add(kDrawingDocumentObject, \"\", True)\n'   oSheet = oDrawingDoc.Sheets.Item(1)\n\n'oDrawingDoc = ThisApplication.documents.Add(DocumentTypeEnum.kDrawingDocumentObject, ThisApplication.FileManager.GetTemplateFile(DocumentTypeEnum.kDrawingDocumentObject))\nMessageBox.Show(\"Template Found\" , \"iLogic: ErrTrap 2\")\n'create a file dialog box\n'Dim oFileDlg As inventor.FileDialog = Nothing\nInventorVb.Application.CreateFileDialog(oFileDlg)'<--------------move this line up ;)\n\n\n'check file type and set dialog filter\n'If oDrawingDoc.DocumentType = kPartDocumentObject Then\n'oFileDlg.Filter = \"Autodesk Inventor Part Files (*.ipt)|*.ipt\"\n'Else If oDrawingDoc.DocumentType = kAssemblyDocumentObject Then\n'oFileDlg.Filter = \"Autodesk Inventor Assembly Files (*.iam)|*.iam\"\nIf oDrawingDoc.DocumentType = kDrawingDocumentObject Then\noFileDlg.Filter = \"Autodesk Inventor Drawing Files (*.idw)|*.idw\"\n'End If\n\n\n'set the directory to open the dialog at\noFileDlg.InitialDirectory = ThisDoc.WorkspacePath()\n'set the file name string to use in the input box\noFileDlg.FileName = dwg_filename\n\n\n'work with an error created by the user backing out of the save \noFileDlg.CancelError = True\nOn Error Resume Next\n'specify the file dialog as a save dialog (rather than a open dialog)\noFileDlg.ShowSave()\n\n\n'catch an empty string in the imput\nIf Err.Number <> 0 Then\nMessageBox.Show(\"No File Saved.\", \"iLogic: Dialog Canceled\")\nElseIf oFileDlg.FileName <> \"\" Then\nMyFile = oFileDlg.FileName\n'save the file \noDrawingDoc.SaveAs(MyFile, False) 'True = Save As Copy & False = Save As\nEnd If\n\noDrawingDoc.Activate()\noSheet = oDrawingDoc.Sheets.Item(1)\n\n\nextents_length = SheetMetal.FlatExtentsLength\nextents_width = SheetMetal.FlatExtentsWidth\n'\n'If SheetMetal.FlatExtentsLength < SheetMetal.FlatExtentsWidth Then\n'extents_length = SheetMetal.FlatExtentsWidth\n'extents_width = SheetMetal.FlatExtentsLength\n'Else If SheetMetal.FlatExtentsLength > SheetMetal.FlatExtentsWidth Then\n'extents_length = SheetMetal.FlatExtentsLength\n'extents_width = SheetMetal.FlatExtentsWidth\n'End If\n\n\n'Set the View Scales\nDim DrawingViewScale As Double\nIf SheetMetal.FlatExtentsLength < 250 mm Then\nDrawingViewScale = 1/4\nElse If SheetMetal.FlatExtentsLength >= 250 mm And SheetMetal.FlatExtentsLength < 750 mm Then\nDrawingViewScale = 1/5\nElse If SheetMetal.FlatExtentsLength >= 750 mm And SheetMetal.FlatExtentsLength < 1250 mm Then\nDrawingViewScale = 1/10\nElse If SheetMetal.FlatExtentsLength >= 1250 mm And SheetMetal.FlatExtentsLength < 5000 mm Then\nDrawingViewScale = 1/20\nEnd If\n\nDim IsoViewScale As Double\nIf SheetMetal.FlatExtentsLength < 250 mm Then\nIsoViewScale = 1/2\nElse If SheetMetal.FlatExtentsLength >= 250 mm And SheetMetal.FlatExtentsLength < 750 mm Then\nIsoViewScale = 1/4\nElse If SheetMetal.FlatExtentsLength >= 750 mm And SheetMetal.FlatExtentsLength < 1250 mm Then\nIsoViewScale = 1/8\nElse If SheetMetal.FlatExtentsLength >= 1250 mm And SheetMetal.FlatExtentsLength < 5000 mm Then\nIsoViewScale = 1/10\nEnd If\n\n      ' Create a new NameValueMap object\n  Dim oBaseViewOptions As NameValueMap\n  oBaseViewOptions = ThisApplication.TransientObjects.CreateNameValueMap\n \n 'True = folded view \n 'False = flat pattern view\n  oBaseViewOptions.Add(\"SheetMetalFoldedModel\", False) \n\n'DrawingViewScale = 1/5\n'IsoViewScale = 1/5\n\n\noPoint1 = ThisApplication.TransientGeometry.CreatePoint2d(9,6)\noBaseView = oSheet.DrawingViews.AddBaseView(oPartDoc, oPoint1, DrawingViewScale, kDefaultViewOrientation, kHiddenLineRemovedDrawingViewStyle)\nMessageBox.Show(\"1 view created\", \"View\")\noPoint2 = ThisApplication.TransientGeometry.CreatePoint2d(9,15)\noTopView = oSheet.DrawingViews.AddBaseView(oPartDoc, oPoint2, DrawingViewScale, kTopViewOrientation, kHiddenLineRemovedDrawingViewStyle)\nMessageBox.Show(\"2 view created\", \"View\")\n'\n'Dim oLeftView As DrawingView\n'oPoint3 = ThisApplication.TransientGeometry.CreatePoint2d(5,5)\n'oTopView = oSheet.DrawingViews.AddProjectedView(oBaseView, oPoint3, DrawingViewStyleEnum.kFromBaseDrawingViewStyle)\n'\n'Dim oRightView As DrawingView\n'oPoint4 = ThisApplication.TransientGeometry.CreatePoint2d(30,5)\n'oTopView = oSheet.DrawingViews.AddProjectedView(oBaseView, oPoint4, DrawingViewStyleEnum.kFromBaseDrawingViewStyle)\n\nDim oIsoView As DrawingView\noPoint5 =  ThisApplication.TransientGeometry.CreatePoint2d(23, 15)\noIsoView = oSheet.DrawingViews.AddBaseView(oPartDoc, oPoint5, IsoViewScale, kIsoTopLeftViewOrientation, kShadedDrawingViewStyle)\n'oIsoView = oSheet.DrawingViews.AddProjectedView(oBaseView, oPoint5, DrawingViewStyleEnum.kShadedDrawingViewStyle)\nMessageBox.Show(\"3 view created\", \"View\")\n\n'Need to change sheet to \"DXF\"\n''oSheet = ThisDrawing.Sheet(\"DXF:2\")\noSheet = oDrawingDoc.Sheets.Item(2)\n\noPoint20 = ThisApplication.TransientGeometry.CreatePoint2d(9,15)\noFlatView = oSheet.DrawingViews.AddBaseView(oPartDoc, oPoint2, DrawingViewScale, kDefaultViewOrientation, kHiddenLineRemovedDrawingViewStyle,,, oBaseViewOptions)\n\nDim addIns As ApplicationAddIns\n\naddIns = ThisApplication.ApplicationAddIns\n\nDim addIn As ApplicationAddIn\naddIn = ThisApplication. _\nApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\n\nDim iLogic As Object\niLogic = addIn.Automation\nNoCut = InputBox(\"How many parts would you like to cut?\", \"Part Qty\", \"2\")\nPartQty = NoCut\n'Call iLogic.RunRule(oDrawingDoc, \"Layout_Views\")\n\nEnd If"], "author": "clutsa"},
{"created at": [], "solution Title": "\n                        Re: Showing a Form based upon Null or empty string property\n                    ", "solution": ["iProperties.Value(\"Project\", \"Creation Date\") = \"1/1/1601\""], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: wild-cards for selecting features to modify linework in INV dwg?\n                    ", "solution": ["Sub Main()\n\toDwgDoc = ThisApplication.ActiveDocument\n\n\tCall MoveFeatureToLayer(\"Control_Side\", \"power breaks\")\n\tCall MoveFeatureToLayer(\"Control_Side_2\", \"power breaks 2\")\n\t\nEnd Sub\n\nDim oDwgDoc As DrawingDocument\n\n\nSub MoveFeatureToLayer(oFeatureName as String, oFilterLayerName as String)\n    \n    Dim oNewLayer As Layer\n    oNewLayer = oDwgDoc.StylesManager.Layers.Item(oFilterLayerName)\n    If oNewLayer Is Nothing Then\n        Call MsgBox(\"Layer -\" & oFilterLayerName & \"- Not Found! Please fix.\" & vbLf & vbLf & \"Aborting Rule.\", , \"MacroMagic\")\n        Exit Sub\n    End If\n    \n    \n    For Each oSheet In oDwgDoc.Sheets\n        Dim oCurveColl As ObjectCollection\n        oCurveColl = ThisApplication.TransientObjects.CreateObjectCollection\n    \n        For Each oView In oSheet.DrawingViews\n            For Each oCurve In oView.DrawingCurves\n                oModelGeo = oCurve.ModelGeometry\n                \n                If oModelGeo.Type = 67119520 Then 'Variant/Object/FaceProxy\n                Else\n                        For Each oFace In oModelGeo.Faces\n                            If UCase(oFace.CreatedByFeature.Name) = UCase(oFeatureName) Then\n                                For Each oSegment In oCurve.Segments\n                                    Call oCurveColl.Add(oSegment)\n                                Next\n                            End If\n                        Next\n                End If\n            Next 'curve\n        Next 'view\n        \n        Call oSheet.ChangeLayer(oCurveColl, oNewLayer)\n        oCurveColl.Clear\n    Next 'sheet\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Using a specified drawing template when opening a DXF file\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: How to get referenced object (Occurrence) of ModelLeaderNote?\n                    ", "solution": ["Sub Main()\n\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    Dim oNotes As ModelLeaderNote\n    For Each oNotes In oDef.ModelAnnotations.ModelLeaderNotes\n        Dim oBody As SurfaceBody\n        Set oBody = oNotes.Definition.Intent.Geometry.Parent\n        \n        Dim occ As ComponentOccurrence\n        For Each occ In oDef.Occurrences.AllLeafOccurrences\n            Dim occBody As SurfaceBody\n            For Each occBody In occ.Definition.SurfaceBodies\n                If oBody Is occBody Then\n                    Debug.Print occ.Name\n                    GoTo NextIteration\n                End If\n            Next\n        Next\nNextIteration:\n    Next\n    \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: DrawingView.SetIncludeStatus     where is my centerline/centermark?\n                    ", "solution": ["    ", "Function", " ", "CreateCenterObj", "(", "Sht", " ", "As", " ", "Sheet", ", ", "dv", " ", "As", " ", "DrawingView", ", ", "occ", " ", "As", " ", "Object", ", ", "FeatureName", " ", "As", " ", "String", ")", " ", "As", " ", "Object", "\n        ", "Dim", " ", "docDesc", " ", "As", " ", "DocumentDescriptor", " ", "=", " ", "dv", ".", "ReferencedDocumentDescriptor", "\n        ", "Dim", " ", "Doctype", " ", "As", " ", "DocumentTypeEnum", " ", "=", " ", "docDesc", ".", "ReferencedDocumentType", "\n        \n        ", "'", "'get object", "\n        ", "Select", " ", "True", "\n            ", "Case", " ", "FeatureName", ".", "Contains", "(", "\"", "Plane", "\"", ")", "\n                ", "If", " ", "Doctype", " ", "=", " ", "DocumentTypeEnum", ".", "kPartDocumentObject", "\n                    ", "includeObj", " ", "=", " ", "occ", ".", "Definition", ".", "WorkPlanes", "(", "FeatureName", ")", "\n                ", "Else", "    ", "'", "'assembly, so GET PROXY OF OCCURRENCE", "\n                    ", "includeObj", " ", "=", " ", "ASI_", ".", "getWorkPlaneProxy", "(", "occ", ", ", "FeatureName", ")", "\n                ", "End", " ", "If", "\n            ", "Case", " ", "FeatureName", ".", "Contains", "(", "\"", "Axis", "\"", ")", "\n                ", "If", " ", "Doctype", " ", "=", " ", "DocumentTypeEnum", ".", "kPartDocumentObject", "\n                    ", "includeObj", " ", "=", " ", "occ", ".", "Definition", ".", "WorkAxes", "(", "FeatureName", ")", "\n                ", "Else", "    ", "'", "'assembly, so GET PROXY OF OCCURRENCE", "\n                    ", "includeObj", " ", "=", " ", "ASI_", ".", "getWorkAxisProxy", "(", "occ", ", ", "FeatureName", ")", "\n                ", "End", " ", "If", "\n            ", "Case", " ", "FeatureName", ".", "Contains", "(", "\"", "Point", "\"", ")", "\n                ", "If", " ", "Doctype", " ", "=", " ", "DocumentTypeEnum", ".", "kPartDocumentObject", "\n                    ", "includeObj", " ", "=", " ", "occ", ".", "Definition", ".", "WorkPoints", "(", "FeatureName", ")", "\n                ", "Else", "    ", "'", "'assembly, so GET PROXY OF OCCURRENCE", "\n                    ", "includeObj", " ", "=", " ", "ASI_", ".", "getWorkPointProxy", "(", "occ", ", ", "FeatureName", ")", "\n                ", "End", " ", "If", "\n        ", "End", " ", "Select", "\n        \n        ", "dv", ".", "SetIncludeStatus", "(", "includeObj", ", ", "True", ")", "\n        ", "'''", "GREAT, I made a centermark or centerline but now I have to find it...ahhhhh", "\n        \n", "        ", "'", "'Build collection of ALL centermarks and centerlines on sheet", "\n        ", "Dim", " ", "shtCenters", " ", "As", " ", "ObjectCollection", " ", "=", " ", "ThisServer", ".", "TransientObjects", ".", "CreateObjectCollection", "\n        ", "shtCenters", ".", "clear", "    ", "'", "reset just to be sure", "\n        ", "For", " ", "Each", " ", "CL", " ", "As", " ", "Centerline", " ", "In", " ", "Sht", ".", "Centerlines", "\n            ", "shtCenters", ".", "Add", "(", "CL", ")", "\n        ", "Next", "\n        ", "For", " ", "Each", " ", "CM", " ", "As", " ", "Centermark", " ", "In", " ", "Sht", ".", "Centermarks", "\n            ", "shtCenters", ".", "Add", "(", "CM", ")", "\n        ", "Next", "\n        \n        ", "'", "'remove known center objects from list of ALL centermarks and centerlines on sheet", "\n        ", "For", " ", "Each", " ", "cObjKnown", " ", "In", " ", "shtCenterObjsKnown", "\n            ", "shtCenters", ".", "RemoveByObject", "(", "cObjKnown", ")", "\n        ", "Next", "\n        ", "'", "'shtCenters.count should be 1", "\n        \n        ", "If", " ", "shtCenters", "(", "1", ")", ".", "ModelWorkFeature", " ", "Is", " ", "includeObj", " ", "And", " ", "shtCenters", ".", "count", " ", "=", " ", "1", "\n            ", "shtCenterObjsKnown", ".", "Add", "(", "shtCenters", "(", "1", "))", "    ", "'", "'add to list of known", "\n            ", "newCntr", " ", "=", " ", "shtCenters", "(", "1", ")", "    ", "'", "define as new object found", "\n        ", "End", " ", "If", "\n        \n        ", "Return", " ", "newCntr", "\n    ", "End Function", "\n"], "author": "Josh_Hunt"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2018 addin won't load automatically\n                    ", "solution": [], "author": "basnederveen"},
{"created at": [], "solution Title": "\n                        Re: Edit text in Sketched symbols\n                    ", "solution": ["Public Sub ChangeFirstTextBoxOfAllSketchedSymbolDefinitionsInDrawing()\n    If ThisApplication.ActiveDocument.DocumentType <> kDrawingDocumentObject Then Exit Sub\n    Dim oDrawDoc As DrawingDocument: Set oDrawDoc = ThisApplication.ActiveDocument\n    Dim oSheet As Sheet\n    Dim oSymbolDef As SketchedSymbolDefinition\n    \n    Dim strNewText As String: strNewText = InputBox(\"Enter New Text for Sketched Symbols.\")\n    \n    'as written, this will disregard any prompted entry textboxes and reset them to static text\n    For Each oSymbolDef In oDrawDoc.SketchedSymbolDefinitions\n'        If oSymbolDef.Name = \"STAMP\" Then\n            Dim oDrawSketch As DrawingSketch\n            Set oDrawSketch = oSymbolDef.Sketch\n            Call oSymbolDef.Edit(oDrawSketch)\n            Dim oText As TextBox\n            Set oText = oDrawSketch.TextBoxes.Item(1)\n            Dim strTextFormat As String: strTextFormat = oText.FormattedText\n            strTextFormat = Replace(strTextFormat, oText.Text, strNewText)\n            oText.FormattedText = strTextFormat\n            Call oSymbolDef.ExitEdit(True)\n'        End If\n    Next\nEnd Sub"], "author": "gniksch"},
{"created at": [], "solution Title": "\n                        Re: Inventor Progress bar\n                    ", "solution": ["Public Sub TestStatusBarProgressBar()\n    Dim iStepCount As Long\n    iStepCount = 50\n\n    ' Create a new ProgressBar object.\n    Dim oProgressBar As ProgressBar\n    Set oProgressBar = ThisApplication.CreateProgressBar(True, iStepCount, \"Test Progress\")\n\n    ' Set the message for the progress bar\n    oProgressBar.Message = \"Executing some process\"\n\n    Dim i As Long\n    For i = 1 To iStepCount\n        ' Sleep 0.2 sec to simulate some process\n        Sleep 200\n        oProgressBar.Message = \"Executing some process - \" & i\n        oProgressBar.UpdateProgress\n    Next\n\n    ' Terminate the progress bar.\n    oProgressBar.Close\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Suppress constraints from UCS\n                    ", "solution": ["Sub Main()\n\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    Dim oUCS As UserCoordinateSystem\n    Set oUCS = ThisApplication.CommandManager.Pick(kUserCoordinateSystemFilter, \"Select a UCS to supress related constraints\")\n    \n    Dim oUCSDef As ComponentDefinition\n    Set oUCSDef = oUCS.Parent\n    \n    Dim occ As ComponentOccurrence\n    For Each occ In oDef.Occurrences\n        If occ.Definition Is oUCSDef Then\n            Dim con As Object\n            For Each con In occ.Constraints\n                If con.Type = kFlushConstraintObject Then\n                    Dim oFlush As FlushConstraint\n                    Set oFlush = con\n                    Dim entOne As Object\n                    Dim entTwo As Object\n                    Set entOne = oFlush.EntityOne\n                    Set entTwo = oFlush.EntityTwo\n                    If entOne.Type = kWorkPlaneProxyObject Then\n                        If entOne.NativeObject.Name = oUCS.XYPlane.Name Then\n                            oFlush.Suppressed = True\n                            GoTo NextIteration\n                        ElseIf entOne.NativeObject.Name = oUCS.XZPlane.Name Then\n                            oFlush.Suppressed = True\n                            GoTo NextIteration\n                        ElseIf entOne.NativeObject.Name = oUCS.YZPlane.Name Then\n                            oFlush.Suppressed = True\n                            GoTo NextIteration\n                        End If\n                    End If\n                    If entTwo.Type = kWorkPlaneProxyObject Then\n                        If entTwo.NativeObject.Name = oUCS.XYPlane.Name Then\n                            oFlush.Suppressed = True\n                            GoTo NextIteration\n                        ElseIf entTwo.NativeObject.Name = oUCS.XZPlane.Name Then\n                            oFlush.Suppressed = True\n                            GoTo NextIteration\n                        ElseIf entTwo.NativeObject.Name = oUCS.YZPlane.Name Then\n                            oFlush.Suppressed = True\n                            GoTo NextIteration\n                        End If\n                    End If\n                End If\nNextIteration:\n            Next\n        End If\n    Next\nEnd Sub\n\n\n\n", "Sub Main()\n\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    Dim oUCS As UserCoordinateSystem\n    Dim occ As ComponentOccurrence\n    \n    For Each occ In oDef.Occurrences.AllLeafOccurrences\n        If occ.DefinitionDocumentType = kPartDocumentObject Then\n            Dim partDef As PartComponentDefinition\n            Set partDef = occ.Definition\n            \n            For Each oUCS In partDef.UserCoordinateSystems\n                Call SupressConstraints(oUCS, oDef, occ)\n            Next\n        ElseIf occ.DefinitionDocumentType = kAssemblyDocumentObject Then\n            Dim assDef As AssemblyComponentDefinition\n            Set assDef = occ.Definition\n            \n            For Each oUCS In assDef.UserCoordinateSystems\n                Call SupressConstraints(oUCS, oDef, occ)\n            Next\n        End If\n    Next\n    \n    For Each oUCS In oDef.UserCoordinateSystems\n        Dim con As Object\n        For Each con In oDef.Constraints\n            If con.Type = kFlushConstraintObject Then\n                Dim oFlush As FlushConstraint\n                Set oFlush = con\n                Dim entOne As Object\n                Dim entTwo As Object\n                Set entOne = oFlush.EntityOne\n                Set entTwo = oFlush.EntityTwo\n                If entOne.Type = kWorkPlaneProxyObject Then\n                    If entOne.NativeObject.Name = oUCS.XYPlane.Name Then\n                        oFlush.Suppressed = True\n                        GoTo NextIteration\n                    ElseIf entOne.NativeObject.Name = oUCS.XZPlane.Name Then\n                        oFlush.Suppressed = True\n                        GoTo NextIteration\n                    ElseIf entOne.NativeObject.Name = oUCS.YZPlane.Name Then\n                        oFlush.Suppressed = True\n                        GoTo NextIteration\n                    End If\n                End If\n                If entTwo.Type = kWorkPlaneProxyObject Then\n                    If entTwo.NativeObject.Name = oUCS.XYPlane.Name Then\n                        oFlush.Suppressed = True\n                        GoTo NextIteration\n                    ElseIf entTwo.NativeObject.Name = oUCS.XZPlane.Name Then\n                        oFlush.Suppressed = True\n                        GoTo NextIteration\n                    ElseIf entTwo.NativeObject.Name = oUCS.YZPlane.Name Then\n                        oFlush.Suppressed = True\n                        GoTo NextIteration\n                    End If\n                End If\n            End If\nNextIteration:\n        Next\n    Next\n    \nEnd Sub\n\nSub SupressConstraints(ByVal oUCS As UserCoordinateSystem, ByVal oDef As AssemblyComponentDefinition, ByVal occ As ComponentOccurrence)\n    \n    Dim con As Object\n    For Each con In occ.Constraints\n        If con.Type = kFlushConstraintObject Then\n            Dim oFlush As FlushConstraint\n            Set oFlush = con\n            Dim entOne As Object\n            Dim entTwo As Object\n            Set entOne = oFlush.EntityOne\n            Set entTwo = oFlush.EntityTwo\n            If entOne.Type = kWorkPlaneProxyObject Then\n                If entOne.NativeObject.Name = oUCS.XYPlane.Name Then\n                    oFlush.Suppressed = True\n                    GoTo NextIteration\n                ElseIf entOne.NativeObject.Name = oUCS.XZPlane.Name Then\n                    oFlush.Suppressed = True\n                    GoTo NextIteration\n                ElseIf entOne.NativeObject.Name = oUCS.YZPlane.Name Then\n                    oFlush.Suppressed = True\n                    GoTo NextIteration\n                End If\n            End If\n            If entTwo.Type = kWorkPlaneProxyObject Then\n                If entTwo.NativeObject.Name = oUCS.XYPlane.Name Then\n                    oFlush.Suppressed = True\n                    GoTo NextIteration\n                ElseIf entTwo.NativeObject.Name = oUCS.XZPlane.Name Then\n                    oFlush.Suppressed = True\n                    GoTo NextIteration\n                ElseIf entTwo.NativeObject.Name = oUCS.YZPlane.Name Then\n                    oFlush.Suppressed = True\n                    GoTo NextIteration\n                End If\n            End If\n        End If\nNextIteration:\n    Next\n        \nEnd Sub\n\n\n\n\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Convert iAssembly/iPart to normal part\n                    ", "solution": ["Dim a As Application\nSet a = ThisApplication\n\nDim b As PartDocument\nSet b = a.ActiveDocument\n\n\nDim c As iPartFactory\nSet c = b.ComponentDefinition.iPartFactory\nc.Delete"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Issue trying to push properties to subcomponents\n                    ", "solution": ["'ParamPush\n'JRK -- 17 Aug 2016\n\n'Purpose:\n'Pushes param values to any sub document that is modifiable that has a param of the same name.\n\n\nSub Main()\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n\t\n\tFor Each oParameter in oDoc.ComponentDefinition.Parameters.UserParameters\n\t\toParamName = oParameter.Name\n\t\toParamExp = oParameter.Expression\n\t\t'MsgBox(oParamName & vbLf & oParamExp)\n\t\t\t\n\t\tFor Each oSubDoc in oDoc.AllReferencedDocuments\n\t\t\tIf oSubDoc.IsModifiable = True\n\t\t\t\tTry\n\t\t\t\t\toSubDoc.ComponentDefinition.Parameters(oParamName).Expression = oParamExp\n\t\t\t\t\t\n\t\t\t\t\toStr = oStr & vbLf & oSubDoc.FullFileName & \" -- \" & oParamName\n\t\t\t\t\t'MsgBox(oParamName & \" parameter found in:\" & vbLf & oSubDoc.FullFileName)\n\t\t\t\tCatch\n\t\t\t\t\t'MsgBox(oParamName & \" NOT FOUND in:\" & vbLf & oSubDoc.FullFileName)\n\t\t\t\tEnd Try\n\t\t\t\t\n\t\t\tElse\n\t\t\t\t'Notify for non-modifiable files\n\t\t\t\t'MsgBox(oSubDoc.FullFileName & \" is not Modifiable!\")\n\t\t\tEnd If\n\t\tNext\n\tNext\n\toDoc.Update\n\tMsgBox(\"Files changed:\" & vbLf & oStr)\nEnd Sub\u00a0\u00a0"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: PRINT PDF.......need help skipping reference\n                    ", "solution": ["'check that the active document is an assembly file\nIf ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\nMessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\nExit Sub\nEnd If\n\n'define the active document as an assembly file\nDim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument\noAsmName = Left(oAsmDoc.DisplayName, Len(oAsmDoc.DisplayName) -4)\n\n'get user input\nRUsure = MessageBox.Show ( _\n\"This will create a PDF file for all of the asembly components that have drawings files.\" _\n& vbLf & \"This rule expects that the drawing file shares the same name and location as the component.\" _\n& vbLf & \" \" _\n& vbLf & \"Are you sure you want to create PDF Drawings for all of the assembly components?\" _\n& vbLf & \"This could take a while.\", \"iLogic  - Batch Output PDFs \",MessageBoxButtons.YesNo)\n\nIf RUsure = vbNo Then\nReturn\nElse\nEnd If\n\n'- - - - - - - - - - - - -PDF setup - - - - - - - - - - - -\noPath = ThisDoc.Path\nPDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\nIf PDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then\n'oOptions.Value(\"All_Color_AS_Black\") = 0\noOptions.Value(\"Remove_Line_Weights\") = 1\noOptions.Value(\"Vector_Resolution\") = 400\noOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\n'oOptions.Value(\"Custom_Begin_Sheet\") = 2'oOptions.Value(\"Custom_End_Sheet\") = 4\nEnd If\n\n'get PDF target folder path\noFolder = oPath & \"\\\" & oAsmName & \" PDF Files\"\n\n'Check for the PDF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n'- - - - - - - - - - - - -\n\n'- - - - - - - - - - - - -Component Drawings - - - - - - - - - - - -'look at the files referenced by the assembly\nDim oRefDocs As DocumentsEnumerator\noRefDocs = oAsmDoc.AllReferencedDocuments\nDim oRefDoc As Document\n\n'work the the drawing files for the referenced models'this expects that the model has a drawing of the same path and name \nFor Each oRefDoc In oRefDocs\n\t ' added\n\t If oRefDoc.ComponentDefinition.BOMStructure = BOMStructureEnum.kReferenceBOMStructure Then\n\t\t 'skip\n\t Else\n\t\t\t \n\t\nidwPathName = Left(oRefDoc.FullDocumentName, Len(oRefDoc.FullDocumentName) - 3) & \"idw\"\n'check to see that the model has a drawing of the same path and name \nIf(System.IO.File.Exists(idwPathName)) Then\n        Dim oDrawDoc As DrawingDocument\n    oDrawDoc = ThisApplication.Documents.Open(idwPathName, True)\n    oFileName = Left(oRefDoc.DisplayName, Len(oRefDoc.DisplayName) -3)\n    \n    'INSERT RULE HERE\n    \n\n    \n    \n    On Error Resume Next ' if PDF exists and is open or read only, resume next\n     'Set the PDF target file name\n    oDataMedium.FileName = oFolder & \"\\\" & oFileName & \"pdf\"\n        'Write out the PDF\n    Call PDFAddIn.SaveCopyAs(oDrawDoc, oContext, oOptions, oDataMedium)\n    \n    'close the file\n    oDrawDoc.Close(True)\n    \nElse\n'If the model has no drawing of the same path and name - do nothing\nEnd If\n\n' added\nEnd If\n\nNext\n'- - - - - - - - - - - - -\n\n'- - - - - - - - - - - - -Top Level Drawing - - - - - - - - - - - -\noAsmDrawing = ThisDoc.ChangeExtension(\".idw\")\noAsmDrawingDoc = ThisApplication.Documents.Open(oAsmDrawing, True)\noAsmDrawingName = Left(oAsmDrawingDoc.DisplayName, Len(oAsmDrawingDoc.DisplayName) -3)\n'write out the PDF for the Top Level Assembly Drawing file\nOn Error Resume Next ' if PDF exists and is open or read only, resume next\n 'Set the PDF target file name\noDataMedium.FileName = oFolder & \"\\\" & oAsmDrawingName & \"pdf\"\n'Write out the PDF\nCall PDFAddIn.SaveCopyAs(oAsmDrawingDoc, oContext, oOptions, oDataMedium)\n'Close the top level drawing\noAsmDrawingDoc.Close\n'- - - - - - - - - - - - -\n\nMessageBox.Show(\"New Files Created in: \" & vbLf & oFolder, \"iLogic\")\n'open the folder where the new ffiles are saved\nShell(\"explorer.exe \" & oFolder,vbNormalFocus)", "Sub", " ", "Main", "()", "\n", "'", "check that the active document is an assembly file", "\n", "If", " ", "ThisApplication", ".", "ActiveDocument", ".", "DocumentType", " ", "<>", " ", "kAssemblyDocumentObject", " ", "Then", "\n", "MessageBox", ".", "Show", "(", "\"", "Please run this rule from the assembly file.", "\"", ", ", "\"", "iLogic", "\"", ")", "\n", "Exit Sub", "\n", "End", " ", "If", "\n\n", "'", "define the active document as an assembly file", "\n", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", "\n", "oAsmDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "oAsmName", " ", "=", " ", "Left", "(", "oAsmDoc", ".", "DisplayName", ", ", "Len", "(", "oAsmDoc", ".", "DisplayName", ")", " ", "-", "4", ")", "\n\n", "'", "get user input", "\n", "RUsure", " ", "=", " ", "MessageBox", ".", "Show", " ", "(", " ", "_", "\n", "\"", "This will create a PDF file for all of the asembly components that have drawings files.", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "This rule expects that the drawing file shares the same name and location as the component.", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", " ", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "Are you sure you want to create PDF Drawings for all of the assembly components?", "\"", " ", "_", "\n", "&", " ", "vbLf", " ", "&", " ", "\"", "This could take a while.", "\"", ", ", "\"", "iLogic  - Batch Output PDFs ", "\"", ",", "MessageBoxButtons", ".", "YesNo", ")", "\n\n", "If", " ", "RUsure", " ", "=", " ", "vbNo", " ", "Then", "\n", "Return", "\n", "Else", "\n", "End", " ", "If", "\n\n", "'", "- - - - - - - - - - - - -PDF setup - - - - - - - - - - - -", "\n", "oPath", " ", "=", " ", "ThisDoc", ".", "Path", "\n", "PDFAddIn", " ", "=", " ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"", "{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}", "\"", ")", "\n", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " ", "=", " ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n\n", "If", " ", "PDFAddIn", ".", "HasSaveCopyAsOptions", "(", "oDataMedium", ", ", "oContext", ", ", "oOptions", ")", " ", "Then", "\n", "'", "oOptions.Value(\"All_Color_AS_Black\") = 0", "\n", "oOptions", ".", "Value", "(", "\"", "Remove_Line_Weights", "\"", ")", " ", "=", " ", "1", "\n", "oOptions", ".", "Value", "(", "\"", "Vector_Resolution", "\"", ")", " ", "=", " ", "400", "\n", "oOptions", ".", "Value", "(", "\"", "Sheet_Range", "\"", ")", " ", "=", " ", "Inventor", ".", "PrintRangeEnum", ".", "kPrintAllSheets", "\n", "'", "oOptions.Value(\"Custom_Begin_Sheet\") = 2'oOptions.Value(\"Custom_End_Sheet\") = 4", "\n", "End", " ", "If", "\n\n", "'", "get PDF target folder path", "\n", "oFolder", " ", "=", " ", "oPath", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oAsmName", " ", "&", " ", "\"", " PDF Files", "\"", "\n\n", "'", "Check for the PDF folder and create it if it does not exist", "\n", "If", " ", "Not", " ", "System", ".", "IO", ".", "Directory", ".", "Exists", "(", "oFolder", ")", " ", "Then", "\n    ", "System", ".", "IO", ".", "Directory", ".", "CreateDirectory", "(", "oFolder", ")", "\n", "End", " ", "If", "\n", "'", "- - - - - - - - - - - - -", "\n\n", "'", "- - - - - - - - - - - - -Component Drawings - - - - - - - - - - - -'look at the files referenced by the assembly", "\n", "doc", " ", "=", " ", "ThisDoc", ".", "Document", "\n    ", "Dim", " ", "oAssyDef", " ", "As", " ", "AssemblyComponentDefinition", " ", "=", " ", "doc", ".", "ComponentDefinition", "\n    ", "Dim", " ", "oBOM", " ", "As", " ", "BOM", " ", "=", " ", "oAssyDef", ".", "BOM", "\n\n    ", "oBOM", ".", "StructuredViewEnabled", " ", "=", " ", "True", "\n    ", "oBOM", ".", "StructuredViewFirstLevelOnly", " ", "=", " ", "False", "\n\n    ", "Dim", " ", "oBOMView", " ", "As", " ", "BOMView", " ", "=", " ", "oBOM", ".", "BOMViews", ".", "Item", "(", "\"", "Structured", "\"", ")", "\n\n    ", "Dim", " ", "oBOMRow", " ", "As", " ", "BOMRow", "\n    ", "Dim", " ", "oCompDef", " ", "As", " ", "ComponentDefinition", "\n\n    ", "For", " ", "Each", " ", "oBOMRow", " ", "In", " ", "oBOMView", ".", "BOMRows", "\n\n     \n       ", "If", " ", "Not", " ", "oBOMRow", ".", "ChildRows", " ", "Is", " ", "Nothing", "\n         ", "Call", " ", "RecurseBOMRow", "(", "oBOMRow", ", ", "PDFAddIn", ", ", "oFolder", ")", "\n      ", "End", " ", "If", "\n       ", "oCompDef", " ", "=", " ", "oBOMRow", ".", "ComponentDefinitions", ".", "Item", "(", "1", ")", "\n", "idwPathName", " ", "=", " ", "Left", "(", "oCompDef", ".", "Document", ".", "FullDocumentName", ", ", "Len", "(", "oCompDef", ".", "Document", ".", "FullDocumentName", ")", " ", "-", " ", "3", ")", " ", "&", " ", "\"", "idw", "\"", "\n", "'", "check to see that the model has a drawing of the same path and name ", "'", "MessageBox.Show(idwPathName)", "\n\n", "If", "(", "System", ".", "IO", ".", "File", ".", "Exists", "(", "idwPathName", "))", " ", "Then", "\n        ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n    ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "idwPathName", ", ", "True", ")", "\n    ", "oFileName", " ", "=", " ", "Left", "(", "oCompDef", ".", "Document", ".", "DisplayName", ", ", "Len", "(", "oCompDef", ".", "Document", ".", "DisplayName", ")", " ", "-", "3", ")", "\n    \n    ", "'", "INSERT RULE HERE", "\n    ", "iLogicVb", ".", "Automation", ".", "RunExternalRule", "(", "oDrawDoc", ", ", "\"", "DELETE1", "\"", ")", "\n    ", "iLogicVb", ".", "Automation", ".", "RunExternalRule", "(", "oDrawDoc", ", ", "\"", "DELETE2", "\"", ")", "\n\n    \n    \n    ", "On", " ", "Error", " ", "Resume", " ", "Next", " ", "'", " if PDF exists and is open or read only, resume next", "\n     ", "'", "Set the PDF target file name", "\n    ", "oDataMedium", ".", "FileName", " ", "=", " ", "oFolder", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oFileName", " ", "&", " ", "\"", "pdf", "\"", "\n        ", "'", "Write out the PDF", "\n    ", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oDrawDoc", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n    \n    ", "'", "close the file", "\n    ", "oDrawDoc", ".", "Close", "(", "True", ")", "\n    \n", "Else", "\n", "'", "If the model has no drawing of the same path and name - do nothing", "\n", "End", " ", "If", "\n    ", "Next", "\n\n\n\n", "'", "- - - - - - - - - - - - -", "\n", "Call", " ", "PrintTopLevel", "()", "\n", "MessageBox", ".", "Show", "(", "\"", "New Files Created in: ", "\"", " ", "&", " ", "vbLf", " ", "&", " ", "oFolder", ", ", "\"", "iLogic", "\"", ")", "\n", "'", "open the folder where the new ffiles are saved", "\n", "Shell", "(", "\"", "explorer.exe ", "\"", " ", "&", " ", "oFolder", ",", "vbNormalFocus", ")", "\n", "End Sub", "\n\n", "Sub", " ", "RecurseBOMRow", "(", "oBOMRow", " ", "As", " ", "BOMRow", ", ", "PDFAddIn", " ", "As", " ", "ApplicationAddIn", ", ", "oFolder", " ", "As", " ", "String", ")", "\n", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " ", "=", " ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n   ", "For", " ", "Each", " ", "oBOMRow", " ", "In", " ", "oBOMRow", ".", "ChildRows", "\n     ", "Dim", " ", "oCompDef", " ", "As", " ", "ComponentDefinition", "\n     ", "oCompDef", " ", "=", " ", "oBOMRow", ".", "ComponentDefinitions", ".", "Item", "(", "1", ")", "\n\n", "idwPathName", " ", "=", " ", "Left", "(", "oCompDef", ".", "Document", ".", "FullDocumentName", ", ", "Len", "(", "oCompDef", ".", "Document", ".", "FullDocumentName", ")", " ", "-", " ", "3", ")", " ", "&", " ", "\"", "idw", "\"", "\n\n", "'", "check to see that the model has a drawing of the same path and name ", "\n", "If", "(", "System", ".", "IO", ".", "File", ".", "Exists", "(", "idwPathName", "))", " ", "Then", "\n        ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n    ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "idwPathName", ", ", "True", ")", "\n    ", "oFileName", " ", "=", " ", "Left", "(", "oCompDef", ".", "Document", ".", "DisplayName", ", ", "Len", "(", "oCompDef", ".", "Document", ".", "DisplayName", ")", " ", "-", "3", ")", "\n   \n    ", "'", "INSERT RULE HERE", "\n   ", "iLogicVb", ".", "Automation", ".", "RunExternalRule", "(", "oDrawDoc", ", ", "\"", "DELETE1", "\"", ")", "\n    ", "iLogicVb", ".", "Automation", ".", "RunExternalRule", "(", "oDrawDoc", ", ", "\"", "DELETE2", "\"", ")", "\n\n    \n    \n    ", "'", "On Error Resume Next ' if PDF exists and is open or read only, resume next", "\n     ", "'", "Set the PDF target file name", "\n    ", "oDataMedium", ".", "FileName", " ", "=", " ", "oFolder", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oFileName", " ", "&", " ", "\"", "pdf", "\"", "\n        ", "'", "Write out the PDF", "\n    ", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oDrawDoc", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n    \n    ", "'", "close the file", "\n    ", "oDrawDoc", ".", "Close", "(", "True", ")", "\n    \n", "Else", "\n", "'", "If the model has no drawing of the same path and name - do nothing", "\n", "End", " ", "If", "\n     ", "If", " ", "Not", " ", "oBOMRow", ".", "ChildRows", " ", "Is", " ", "Nothing", "\n          ", "Call", " ", "RecurseBOMRow", "(", "oBOMRow", ", ", "PDFAddIn", ", ", "oFolder", ")", "\n     ", "End", " ", "If", "\n   ", "Next", "\n", "End Sub", "\n", "'", "- - - - - - - - - - - - -", "\n\n", "'", "- - - - - - - - - - - - -Top Level Drawing - - - - - - - - - - - -", "\n", "Sub", " ", "PrintTopLevel", "()", "\n", "PDFAddIn", " ", "=", " ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"", "{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}", "\"", ")", "\n", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " ", "=", " ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n\n", "oAsmDrawing", " ", "=", " ", "Left", "(", "ThisApplication", ".", "ActiveDocument", ".", "FullDocumentName", ", ", "Len", "(", "ThisApplication", ".", "ActiveDocument", ".", "FullDocumentName", ")", " ", "-", " ", "3", ")", " ", "&", " ", "\"", "idw", "\"", "\n", "oAsmDrawingDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oAsmDrawing", ", ", "True", ")", "\n", "oAsmDrawingName", " ", "=", " ", "Left", "(", "oAsmDrawingDoc", ".", "DisplayName", ", ", "Len", "(", "oAsmDrawingDoc", ".", "DisplayName", ")", " ", "-", "3", ")", "\n", "'", "write out the PDF for the Top Level Assembly Drawing file", "\n", "On", " ", "Error", " ", "Resume", " ", "Next", " ", "'", " if PDF exists and is open or read only, resume next", "\n ", "'", "Set the PDF target file name", "\n ", "'", "oFolder = \"C:\\Work\\Projects\\24000\\24373\\24373-007-7000 PDF Files\"", "\n", "oDataMedium", ".", "FileName", " ", "=", " ", "oFolder", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oAsmDrawingName", " ", "&", " ", "\"", "pdf", "\"", "\n", "'", "Write out the PDF", "\n", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oAsmDrawingDoc", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n", "'", "Close the top level drawing", "\n", "oAsmDrawingDoc", ".", "Close", "\n", "End Sub", "\n\n\n"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: more than one profile for sweep\n                    ", "solution": [], "author": "Javier.Jubierre"},
{"created at": [], "solution Title": "\n                        Re: Bend counting macro fails for unknown reason\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: ILogic Rule for Automated labels in a drawing\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: On select event not firing\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Ssynthesis Nodes not Showing Up\n                    ", "solution": [], "author": "coopjproulx"},
{"created at": [], "solution Title": "\n                        Re: Run external iLogic rule using macro\n                    ", "solution": ["Public Sub RuniLogic(ByVal RuleName As String)\n\u00a0 Dim iLogicAuto As Object\n\u00a0 Dim oDoc As Document\n\n\u00a0 Set oDoc = ThisApplication.ActiveDocument\n\u00a0 If oDoc Is Nothing Then\n\u00a0\u00a0\u00a0 MsgBox \"Missing Inventor Document\"\n\u00a0\u00a0\u00a0 Exit Sub\n\u00a0 End If\n\n\u00a0 Set iLogicAuto = GetiLogicAddin(ThisApplication)\n\u00a0 If (iLogicAuto Is Nothing) Then Exit Sub\n\n\u00a0 iLogicAuto.RunExternalRule oDoc, RuleName\nEnd Sub\n\nFunction GetiLogicAddin(oApplication As Inventor.Application) As Object\n\u00a0 Dim addIns As ApplicationAddIns\n\u00a0 Set addIns = oApplication.ApplicationAddIns\n\n\u00a0 Dim addIn As ApplicationAddIn\n\u00a0 Dim customAddIn As ApplicationAddIn\n\u00a0 For Each addIn In addIns\n\u00a0\u00a0\u00a0 If (addIn.ClassIdString = \"{3BDD8D79-2179-4B11-8A5A-257B1C0263AC}\") Then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Set customAddIn = addIn\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Exit For\n\u00a0\u00a0\u00a0 End If\n\u00a0 Next\n\u00a0 \n\u00a0 Set GetiLogicAddin = customAddIn\nEnd Function", "Sub Stl_Export_LN()\n\nIf MsgBox(\"M\u00f6chtest Du eine Plausibilitaetspr\u00fcfung?\", vbYesNo + vbQuestion) = vbYes Then\n\tRuniLogic (\"Plausibilitaetspr\u00fcfung\")\nEnd If\n\n.........\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Linking a Text Parameter from part to assembly\n                    ", "solution": ["doc = ThisDrawing.ModelDocument\n\n'Below code is to pull parameters from a document which is referenced in drawing document\nARCHITECT = Parameter(doc.DisplayName, \"ARCHITECT\") \nCUSTOMER_CONTACT = Parameter(doc.DisplayName, \"CUSTOMER_CONTACT\") \nDOOR_NO = Parameter(doc.DisplayName, \"DOOR_NO\")\nDRAWING_NO = Parameter(doc.DisplayName, \"DRAWING_NO\")\nENTRANCE = Parameter(doc.DisplayName, \"ENTRANCE\") \nFINISH = Parameter(doc.DisplayName, \"FINISH\") \nJOB = Parameter(doc.DisplayName, \"JOB\") \nLOCATION = Parameter(doc.DisplayName, \"LOCATION\")\nMAT_CEILING = Parameter(doc.DisplayName, \"MAT_CEILING\") \nMAT_ROOF = Parameter(doc.DisplayName, \"MAT_ROOF\") \nMAT_WALLS = Parameter(doc.DisplayName, \"MAT_WALLS\") \nMAT_WINGS = Parameter(doc.DisplayName, \"MAT_WINGS\")\nMODEL = Parameter(doc.DisplayName, \"MODEL\") \nORDER_NO = Parameter(doc.DisplayName, \"ORDER_NO\")\n\n'Below code is to create custom propeties in drawing document\niProperties.Value(\"Custom\", \"ARCHITECT\") = ARCHITECT\niProperties.Value(\"Custom\", \"CUSTOMER CONTACT\") = CUSTOMER_CONTACT\niProperties.Value(\"Custom\", \"DOOR NO.\") = DOOR_NO\niProperties.Value(\"Custom\", \"DRAWING NO.\") = DRAWING_NO\niProperties.Value(\"Custom\", \"ENTRANCE\") = ENTRANCE\niProperties.Value(\"Custom\", \"FINISH\") = FINISH\niProperties.Value(\"Custom\", \"JOB\") = JOB\niProperties.Value(\"Custom\", \"LOCATION\") = LOCATION\niProperties.Value(\"Custom\", \"MAT'L CEILING\") = MAT_CEILING\niProperties.Value(\"Custom\", \"MAT'L ROOF\") = MAT_ROOF\niProperties.Value(\"Custom\", \"MAT'L WALLS\") = MAT_WALLS\niProperties.Value(\"Custom\", \"MAT'L WINGS\") = MAT_WINGS\niProperties.Value(\"Custom\", \"MODEL\") = MODEL\niProperties.Value(\"Custom\", \"ORDER NO.\") = ORDER_NO\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Add param value to active idw and template\n                    ", "solution": ["Dim oSourceDoc As Document\noSourceDoc = ThisDoc.Document\nnewValue = \"\"\"*TEST2*\"\"\"\n\nDim Template As DrawingDocument\nTemplate = ThisApplication.Documents.Open(\"C:\\Users\\Desktop\\Drawing1.idw\", True)\n\nTry\n\toMValue = Template.Parameters(\"Matl\")\nCatch\n\tMsgBox(\"Error Getting MultiValue Param from Target Template Document!\")\n\tExit Sub\nEnd Try\n\n'Get and fill CURRENT array entries\nDim MyArrayList(oMValue.ExpressionList.Count - 1) As String\nMyArrayList = oMValue.ExpressionList.GetExpressionList()\n\nFor i = 0 To UBound(MyArrayList)\n\tIf Left(MyArrayList(i),1) <> Chr(34)\n\t\tMyArrayList(i) = Chr(34) & MyArrayList(i)\n\tEnd If\n\t\n\tIf Right(MyArrayList(i),1) <> Chr(34)\n\t\tMyArrayList(i) = MyArrayList(i) & Chr(34)\n\tEnd If\nNext\n\n''resize array to add new values\nReDim Preserve MyArrayList(UBound(MyArrayList) + 1)\nMyArrayList(UBound(MyArrayList)) = newvalue\n\n'Loop to double check values in my array list\nFor i = 0 To UBound(MyArrayList)\n\toStr = oStr & vbLf & MyArrayList(i)\nNext\nMsgBox(oStr)\n\n'Push the value to the MultiValue List\noMvalue.ExpressionList.SetExpressionList(MyArrayList, True, 0)\n\nTemplate.Save\n\n'' These lines below work for adding new mvalue\n'Dim MyArrayList(0) As String\n'MyArrayList(0) = \"\"\"Value\"\"\""], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: If no interference then Delete - Revit export - simplification\n                    ", "solution": ["Color_Name = \"Yellow\"\nDim doc = ThisDoc.Document\nDim oDef As Inventor.AssemblyComponentDefinition \noDef = doc.componentdefinition\n\nFor Each occ As Inventor.ComponentOccurrence In oDef.Occurrences.AllLeafOccurrences \n\tComponent.Color(occ.Name) = Color_Name\nNext", "Color_Name = \"Red\"\nDim doc = ThisDoc.Document\nDim oDef As Inventor.AssemblyComponentDefinition \noDef = doc.componentdefinition\n\nFor Each occ As Inventor.ComponentOccurrence In oDef.Occurrences.AllLeafOccurrences \n\tIf Component.Color(occ.Name) = Color_Name Then\n\t\tocc.Delete()\n\tEnd If\nNext"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Sheetmetal styles dialogue from iLogic\n                    ", "solution": [], "author": "doug.johnston"},
{"created at": [], "solution Title": "\n                        Re: How to put perimeters of a face from one part to another part using VBA?\n                    ", "solution": [], "author": "revans"},
{"created at": [], "solution Title": "\n                        Re: VBA sheet metal face not working-  wrong side of sketch\n                    ", "solution": [], "author": "kejlong"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Rula to eliminate the unattached balloons\n                    ", "solution": ["Sub Main()\n    Dim oDrawDoc As DrawingDocument\n    oDrawDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDrawDoc.ActiveSheet\n        \n    Dim oBalloon As Balloon\n    \n    For Each oBalloon In oSheet.Balloons\n        If oBalloon.Attached = False", "            oBalloon.Delete", "        End if\n    Next\nEnd Sub", "Sub", " ", "Main", "()\n    ", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n    ", "oDoc", " = ", "ThisApplication", ".", "ActiveDocument", "\n\n    ", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n    ", "oSheet", " = ", "oDoc", ".", "ActiveSheet", "\n\n\t", "If", " ", "oSheet", ".", "PartsLists", ".", "Count", " < 1 ", "Then", ": ", "Exit", " ", "Sub", ": ", "End", " ", "If", "\n\n    ", "Dim", " ", "oPartsList", " ", "As", " ", "PartsList", "\n    ", "oPartsList", " = ", "oSheet", ".", "PartsLists", "(1)\n\n\t", "Dim", " ", "i", " ", "As", " ", "Integer", "\n    ", "i", " = 1\n\t\n    ", "Do", "\n        ", "oCurRow", " = ", "oPartsList", ".", "PartsListRows", ".", "Item", "(", "i", ")\n        \n        ", "If", " ", "oCurRow", ".", "Expandable", " = ", "True", " ", "Then", "\n            ", "oCurRow", ".", "Expanded", " = ", "True", "\n        ", "End", " ", "If", "\n\t\t", "i", " = ", "i", "+1\n    ", "Loop", " ", "Until", " ", "i", " > ", "oPartsList", ".", "PartsListRows", ".", "Count", "\n", "End", " ", "Sub", "\u00a0", "Sub Main()\n    Dim oDrawDoc As DrawingDocument\n    oDrawDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDrawDoc.ActiveSheet\n        \n    Dim oBalloon As Balloon\n    \n    For Each oBalloon In oSheet.Balloons\n        If oBalloon.Attached = False", "            oBalloon.Delete", "        End if\n    Next\nEnd Sub", "Sub Main()\n    Dim oDrawDoc As DrawingDocument\n    oDrawDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n", "    'Set oSheet = oDrawDoc.ActiveSheet", "    For Each oSheet in oDrawDoc.Sheets", "\n        \n        Dim oBalloon As Balloon\n    \n        For Each oBalloon In oSheet.Balloons\n            If oBalloon.Attached = False\n                oBalloon.Delete\n            End if\n        Next", "    Next", "\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: DrawingCurve.Evaluator2D.GetPointAtParam Fails when GetParamExtents Works\n                    ", "solution": [], "author": "rfink"},
{"created at": [], "solution Title": "\n                        Re: Is it possible to half section parts via the API ?\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Creating a Parameter Equation with iLogic\n                    ", "solution": [], "author": "danny_lodge"},
{"created at": [], "solution Title": "\n                        Re: Multiple assets of the same type in a single part document\n                    ", "solution": [], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: Sketch line functionality through VBA\n                    ", "solution": ["Public Sub DrawSketchLine()\n\n    ' Check to make sure a sketch is active.\n    If Not TypeOf ThisApplication.ActiveEditObject Is Sketch Then\n        MsgBox \"A sketch must be active.\"\n        Exit Sub\n    End If\n    Dim getPoint As New Class1\n    Dim pnt As Integer\n    pnt = 0\n    Do\n        Call getPoint.Initialize(\"Click the desired location\", kLeftMouseButton)\n        pnt = pnt + 1\n    Loop While pnt > 2\nEnd Sub", "Private WithEvents oInteractionEvents  As InteractionEvents\nPrivate WithEvents oMouseEvents As MouseEvents\nPrivate m_position As Point2d\nPrivate m_button As MouseButtonEnum\nPrivate m_continue As Boolean\nPrivate oIntGraphics As InteractionGraphics\nPrivate oStartPoint As Point\nPrivate oEndPoint As Point\nPublic Sub Initialize(Prompt As String, Button As MouseButtonEnum)\n    Set m_position = Nothing\n    m_button = Button\n    Set oInteractionEvents = ThisApplication.CommandManager.CreateInteractionEvents\n    Set oMouseEvents = oInteractionEvents.MouseEvents\n    oInteractionEvents.StatusBarText = Prompt\n    oInteractionEvents.Start\n    m_continue = True\n    Do\n    DoEvents\n    Loop While m_continue\n    m_interaction.Stop\n\nEnd Sub\n\nPrivate Sub oMouseEvents_OnMouseDown(ByVal Button As MouseButtonEnum, ByVal ShiftKeys As ShiftStateEnum, ByVal ModelPosition As Point, ByVal ViewPosition As Point2d, ByVal View As View)\n    \n    If oStartPoint Is Nothing Then\n        Set oStartPoint = ModelPosition\n    Else\n        \n        Dim dY As Double\n        Dim dX As Double\n        Dim m As Double\n        dY = oStartPoint.Y - ModelPosition.Y\n        dX = oStartPoint.X - ModelPosition.X\n        m = dY / dX\n        Dim angle As Double\n        angle = Atn(m) * 180 / 3.1415\n    \n        If Abs(angle) >= 45 Then", "\t    'Draws vertical line\n            ModelPosition.X = oStartPoint.X\n            \n        ElseIf Abs(angle) <= 45 Then", "\t    'Draws horizontal line\n            ModelPosition.Y = oStartPoint.Y\n        End If\n            \n        Set oEndPoint = ModelPosition\n        \n        Dim oSketchLine As SketchLine\n        Dim oStartPoint2d As Point2d\n        Dim oEndPoint2d As Point2d\n            \n        If TypeOf ThisApplication.ActiveEditObject Is PlanarSketch Then\n            \n            Dim oSketch2d As PlanarSketch\n            Set oSketch2d = ThisApplication.ActiveEditObject\n            \n            Set oStartPoint2d = oSketch2d.ModelToSketchSpace(oStartPoint)\n            Set oEndPoint2d = oSketch2d.ModelToSketchSpace(oEndPoint)\n            \n            Set oSketchLine = oSketch2d.SketchLines.AddByTwoPoints(oStartPoint2d, oEndPoint2d)\n            \n            Dim offsetCol As ObjectCollection\n            Set offsetCol = ThisApplication.TransientObjects.CreateObjectCollection\n            offsetCol.Add oSketchLine\n            Call oSketch2d.OffsetSketchEntitiesUsingDistance(offsetCol, 2.54, True, False, True)\n            Call oSketch2d.OffsetSketchEntitiesUsingDistance(offsetCol, 2.54, False, False, True)\n                    \n        ElseIf TypeOf ThisApplication.ActiveEditObject Is DrawingSketch Then\n            \n            Dim oDrawingSketch As DrawingSketch\n            Set oDrawingSketch = ThisApplication.ActiveEditObject\n            \n            Set oStartPoint2d = oDrawingSketch.SheetToSketchSpace(ThisApplication.TransientGeometry.CreatePoint2d(oStartPoint.X, oStartPoint.Y))\n            Set oEndPoint2d = oDrawingSketch.SheetToSketchSpace(ThisApplication.TransientGeometry.CreatePoint2d(oEndPoint.X, oEndPoint.Y))\n            \n            Set oSketchLine = oDrawingSketch.SketchLines.AddByTwoPoints(oStartPoint2d, oEndPoint2d)\n            \n        End If\n        \n        Set oStartPoint = Nothing\n        Set oEndPoint = Nothing\n    End If\n    \nEnd Sub\n\nPrivate Sub oMouseEvents_OnMouseMove(ByVal Button As MouseButtonEnum, ByVal ShiftKeys As ShiftStateEnum, ByVal ModelPosition As Point, ByVal ViewPosition As Point2d, ByVal View As View)\n    \n    If Not oStartPoint Is Nothing Then\n    \n        ' Set a reference to the transient geometry object for user later.\n        Dim oTransGeom As TransientGeometry\n        Set oTransGeom = ThisApplication.TransientGeometry\n    \n        ' Create a graphics data set object.  This object contains all of the\n        ' information used to define the graphics.\n        Dim oDataSets As GraphicsDataSets\n        Set oDataSets = oIntGraphics.GraphicsDataSets\n        \n        If oDataSets.Count <> 0 Then\n            oDataSets.Item(1).Delete\n        End If\n        \n        ' Create a coordinate set.\n        Dim oCoordSet As GraphicsCoordinateSet\n        Set oCoordSet = oDataSets.CreateCoordinateSet(1)\n        \n        ' Create an array that contains coordinates\n        Dim oPointCoords(5) As Double\n        \n        oPointCoords(0) = oStartPoint.X\n        oPointCoords(1) = oStartPoint.Y\n        oPointCoords(2) = oStartPoint.Z\n        oPointCoords(3) = ModelPosition.X\n        oPointCoords(4) = ModelPosition.Y\n        oPointCoords(5) = ModelPosition.Z\n    \n        ' Assign the points into the coordinate set.\n        Call oCoordSet.PutCoordinates(oPointCoords)\n        \n        'Set preview color to red.\n        Dim oColorSet As GraphicsColorSet\n        Set oColorSet = oDataSets.CreateColorSet(1)\n        oColorSet.Add 1, 0, 255, 0\n        \n        ' Create the ClientGraphics object.\n        Dim oClientGraphics As ClientGraphics\n        Set oClientGraphics = oIntGraphics.PreviewClientGraphics\n        \n        If oClientGraphics.Count <> 0 Then\n            oClientGraphics.Item(1).Delete\n        End If\n        \n        ' Create a new graphics node within the client graphics objects.\n        Dim oLineNode As GraphicsNode\n        Set oLineNode = oClientGraphics.AddNode(1)\n        \n        ' Create a LineGraphics object within the node.\n        Dim oLineSet As LineStripGraphics\n        Set oLineSet = oLineNode.AddLineStripGraphics\n        \n        oLineSet.ColorSet = oColorSet\n        \n        ' Assign the coordinate set to the line graphics.\n        oLineSet.CoordinateSet = oCoordSet\n        \n        ThisApplication.ActiveView.Update\n        \n    End If\nEnd Sub\n\nPrivate Sub oInteractionEvents_OnTerminate()\n    ThisApplication.ActiveView.Update\nEnd Sub\n\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic collapsable section issue\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: iLogic Copy Assembly, Rename, and Place into New Assembly\n                    ", "solution": ["        ", "oRightJamb", " ", "=", " ", "placeAsm", "(", "\"", "rightJamb", "\"", ", ", "\"", "drJamb", "\"", ", ", "oAsmCompDef", ", ", "oTG", ", ", "oMatrix", ")", "\n", "Function", " ", "placeAsm", "(", "piece", " ", "As", " ", "String", ", ", "compAsm", " ", "As", " ", "String", ", ", "oAsmCompDef", " ", "as", " ", "Inventor", ".", "ComponentDefinition", ", ", "_", "\n                        ", "oTG", " ", "As", " ", "Inventor", ".", "TransientGeometry", ", ", "oMatrix", " ", "As", " ", "Inventor", ".", "Matrix", ")", "\n    ", "'", " Function opens an assembly file,  saves it as a design file places the component ", "\n    ", "'", " at the origin and returns the ComponentOccurrence", "\n\n    ", "Dim", " ", "oCompDef", " ", "As", " ", "ComponentDefinition", "\n    ", "Dim", " ", "path", " ", "As", " ", "String", " ", "=", " ", "ThisDoc", ".", "Path", "\n    ", "Dim", " ", "partDir", " ", "As", " ", "String", " ", "=", " ", "path", " ", "&", " ", "\"", "\\parts", "\"", "\n    ", "Dim", " ", "designDir", " ", "As", " ", "String", " ", "=", " ", "path", " ", "&", " ", "\"", "\\design", "\"", "\n    ", "Dim", " ", "partFile", " ", "As", " ", "String", " ", "=", " ", "partDir", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "compAsm", " ", "&", " ", "\"", ".iam", "\"", "\n    ", "Dim", " ", "pieceFile", " ", "As", " ", "String", " ", "=", " ", "designDir", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "piece", " ", "&", " ", "\"", ".iam", "\"", "\n\n     ", "'", " creat copy of new jamb assembly ", "\n    ", "Dim", " ", "oJambAsmDoc", " ", "As", " ", "AssemblyDocument", "\n    ", "Try", "\n        ", "oJambAsmDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "partFile", " ,", "False", ")", "\n    ", "Catch", "\n        ", "MessageBox", ".", "Show", "(", "\"", "Could not find ", "\"", " ", "&", " ", "partFile", ", ", "\"", "placeAsm", "\"", ")", "\n    ", "End", " ", "Try", "\n    ", "Try", "\n        ", "oJambAsmDoc", ".", "SaveAs", "(", "pieceFile", " , ", "True", ")", "\n        ", "oJambAsmDoc", ".", "Close", "\n    ", "Catch", " ", "ex", " ", "As", " ", "exception", "    \n        ", "MessageBox", ".", "Show", "(", "ex", ".", "ToString", "()", ", ", "\"", "placeAsm save", "\"", ")", "\n        ", "MessageBox", ".", "Show", "(", "pieceFile", ", ", "\"", "placeAsm", "\"", ")", "\n    ", "End", " ", "Try", "\n\n    \n    ", "'", " open new assembly, create copies of parts and replace Occ in new assembly", "\n    ", "Try", "\n        ", "oJambAsmDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "pieceFile", " ,", "False", ")", "\n    ", "Catch", "\n        ", "MessageBox", ".", "Show", "(", "\"", "Could not find ", "\"", " ", "&", " ", "pieceFile", ", ", "\"", "placeAsm open new piece", "\"", ")", "\n    ", "End", " ", "Try", "\n    \n    ", "Dim", " ", "oPartDoc", " ", "As", " ", "PartDocument", "\n    ", "Dim", " ", "newPieceFile", " ", "As", " ", "String", "\n    ", "For", " ", "Each", " ", "part", " ", "In", " ", "oJambAsmDoc", ".", "ComponentDefinition", ".", "Occurrences", "\n    ", "Try", "\n        ", "oPartDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "part", ".", "Definition", ".", "Document", ".", "FullFileName", " ,", "False", ")", "\n        ", "newPieceFile", " ", "=", " ", "designDir", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "piece", " ", "&", " ", "part", ".", "Name", " ", "&", " ", "\"", ".ipt", "\"", "\n        ", "oPartDoc", ".", "SaveAs", "(", "newPieceFile", ", ", "False", ")", "\n        ", "part", ".", "Replace", "(", "newPieceFile", ", ", "False", ")", "\n        ", "oPartDoc", ".", "Close", "\n        ", "Catch", " ", "ex", " ", "As", " ", "exception", "\n        ", "MessageBox", ".", "Show", "(", "ex", ".", "ToString", ", ", "\"", "opening Assembly PartDoc", "\"", ")", "\n    ", "End", " ", "Try", "\n        \n    ", "Next", "\n    ", "oJambAsmDoc", ".", "Save", "\n    ", "oJambAsmDoc", ".", "Close", "\n\n    ", "Dim", " ", "oOcc", " ", "=", " ", "ComponentOccurence", "\n    ", "Try", "\n        ", "oOcc", " ", "=", "  ", "oAsmCompDef", ".", "Occurrences", ".", "Add", "(", "pieceFile", ", ", "oMatrix", ")", "\n    ", "Catch", " ", "ex", " ", "As", " ", "exception", "    \n        ", "MessageBox", ".", "Show", "(", "ex", ".", "ToString", "()", ", ", "\"", "placeAsm save", "\"", ")", "\n        ", "MessageBox", ".", "Show", "(", "pieceFile", ", ", "\"", "placeAsm", "\"", ")", "\n    ", "End", " ", "Try", "\n    ", "oMatrix", ".", "SetTranslation", "(", "oTG", ".", "CreateVector", "(", "0", ",", "0", ",", "0", "))", "\n    ", "oOcc", ".", "Grounded", " ", "=", " ", "False", "\n\n    ", "Return", " ", "oOcc", "\n    \n", "End Function", "      ", "'", " placeAsm"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Get model sketch\n                    ", "solution": ["Dim oDrawingDoc As DrawingDocument\noDrawingDoc = ThisDoc.Document\n\noView = oDrawingDoc.ActiveSheet.DrawingViews(1)\n\nDim oPart As PartDocument\n\nTry\n\n    oPart = oView.ReferencedDocumentDescriptor.ReferencedDocument\nCatch\n\tMsgBox(\"Base View is not of a part!\" & vbLf & vbLf & \"Aborting Rule!\")\n\tExit Sub\nEnd Try\n\nDim oGenericComponentDefinition As ComponentDefinition\n\nTry\n    Dim oSMCD As SheetMetalComponentDefinition\n    oSMCD = oPart.ComponentDefinition\n\toGenericComponentDefinition = oSMCD.FlatPattern\nCatch\n    Dim oPartDef As PartComponentDefinition\n    oPartDef = oPart.ComponentDefinition\n    oGenericComponentDefinition = oPartDef\nEnd Try\n\n\nDim oSketch As PlanarSketch\n\nFor Each oSketch In oGenericComponentDefinition.Sketches\n\tCall oView.SetVisibility(oSketch, True)\t\nNext"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Relationship between AssemblyDocument and Document in C#\n                    ", "solution": [], "author": "waynehelley"},
{"created at": [], "solution Title": "\n                        Re: PROBLEMAS COTAS\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic Error Message\n                    ", "solution": [], "author": "Mark.Lancaster"},
{"created at": [], "solution Title": "\n                        Re: Call dll from iLogic\n                    ", "solution": [], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: Runtime Error with VBA Code\n                    ", "solution": ["Public Function GetPath() As String\n    \n    'set up the dialog\n    Dim fileDlg As FileDialog\n    \n    'create file dialog object\n    Call ThisApplication.CreateFileDialog(fileDlg)\n    \n    'define filter\n    fileDlg.Filter = \"Inventor Files ", "(*.ipt)|", "*.ipt | Assembly File (*.iam)|*.iam\"", "    ", "'OPTION SULUTION:", "    '", "fileDlg.Filter = \"Inventor Files ", "(*.iam)|", "*.iam ", "' THIS WILL FUNCTION ONLY FOR ASSEMBLIES", "\n    '", "OPTION SULUTION:", "\t\n    'define the part and assembly files filter to be the default filter\n    fileDlg.FilterIndex = 1\n    \n    'file dialog title\n    fileDlg.DialogTitle = \"Save File As\"\n    \n    'throw error when user hits cancel\n    fileDlg.CancelError = True\n    \n    'show file dialog\n    On Error Resume Next\n    fileDlg.ShowSave\n    \n    newPath = fileDlg.FileName\n    ", "MsgBox newPath ' RESULT ALWAYS *.IPT", "\n       \n       \nEnd Function"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Add folder path to idw border\n                    ", "solution": ["iProperties.Value(\"Custom\", \"Savedate\")=DateTime.Now.ToString(\"d\")"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: check export parameter box\n                    ", "solution": ["Dim", " oDoc ", "As", " PartDocument\noDoc = ThisApplication.ActiveDocument\n", "Dim", " oCompDef ", "As", " PartComponentDefinition\noCompDef = oDoc.ComponentDefinition\n\n", "'Check if parameter exist", "\n", "If", " oCompDef.Parameters.IsExpressionValid(", "\"G_W\"", ", ", "\"mm\"", ") ", "Then", "\n\t", "Dim", " oParameter ", "As", " Inventor.Parameter = oCompDef.Parameters(", "\"G_W\"", ")\n\t\n\t", "'Export parameter as iProperty", "\n\toParameter.ExposedAsProperty = ", "True", "\n\t\n\t", "'Set custom iProperty format", "\n\toParameter.CustomPropertyFormat.ShowTrailingZeros = ", "False", "\n\toParameter.CustomPropertyFormat.ShowUnitsString = ", "False", "\n", "End", " ", "If"], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: Run ilogic rule in assembly to set thickness of each parts\n                    ", "solution": [], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: Is it possible to insert a newly created part (without save) into an assembl\n                    ", "solution": [], "author": "liminma8458"},
{"created at": [], "solution Title": "\n                        Re: iFeature\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: ilogic help\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Adding sheetmetal rule to foldername\n                    ", "solution": ["oStyle", "=", "oRefDoc", ".", "ComponentDefinition", ".", "ActiveSheetMetalStyle", ".", "Name", "oFolder", " = ", "oPath", " & ", "\"\\\"", " & ", "oAsmName", " & ", "\"-Rev_\"", " & ", "oRevNum", " & ", "\"-PF\"", " & ", "\"\\\"", " & ", "oAsmName", " & ", "\"-Rev_\"", " & ", "oRevNum", " & ", "\"-DXF\"", " & ", "\"\\\"", " & ", "oStyle"], "author": "info"},
{"created at": [], "solution Title": "\n                        Re: VBA Frame Generator Copy Fun - \"can only be saved in the context of&amp\n                    ", "solution": ["Sub SaveNew(newPath)\n    \n       \n    'declare the new assembly\n    Dim newAsm As AssemblyDocument\n    Set newAsm = ThisApplication.Documents.Open(filePath, False)\n    \n    'save as on the new assembly\n    Call newAsm.SaveAs(newPath, False)\n    \n    'close the file\n    newAsm.Close\n    \n    \n    'open the newly created assembly\n    Dim asmCopy As AssemblyDocument\n    \n    Set asmCopy = ThisApplication.Documents.Open(newPath, False)\n\n    Call CopyAll(asmCopy)\n    \n    \n    \n    asmCopy.Update\n    asmCopy.Save2\n    \n    Call ReplacePartRefs(asmCopy)\n    \n    asmCopy.Close\n\nEnd Sub\n\nPrivate Sub CopyAll(nAsm As AssemblyDocument)\n\nDim fileMgr As fileManager\nSet fileMgr = ThisApplication.fileManager\n\n'in case folder or file already exists we get an error we can ignore\nOn Error Resume Next\n\nDim fileDesc As FileDescriptor\n\n    For Each fileDesc In nAsm.File.ReferencedFileDescriptors\n        \n        Dim flname As String\n        flname = fileMgr.FileSystemObject.GetFileName(fileDesc.FullFileName)\n        \n        Dim newFolPath As String\n        newFolPath = GetFolPath(nAsm.FullFileName)\n        \n        Call fileMgr.CopyFile(fileDesc.FullFileName, newFolPath & flname)\n        \n        Call fileDesc.ReplaceReference(newFolPath & flname)\n        \n        Dim fExtension As String\n        fExtension = FileExtension(fileDesc.FullFileName)\n        \n        If fExtension = \".iam\" Then\n        \n            Dim actAsm As AssemblyDocument\n            Set actAsm = ThisApplication.Documents.Open(fileDesc.FullFileName, False)\n            \n            Call CopyAll(actAsm)\n            \n            actAsm.Update\n            \n            actAsm.Save2\n            \n            actAsm.Close\n            \n            End If\n        \n        \n    Next\n    On Error GoTo 0\n    \n    \n    \nEnd Sub\n\nPrivate Sub ReplacePartRefs(nAsm As AssemblyDocument)\n    \nDim fileMgr As fileManager\nSet fileMgr = ThisApplication.fileManager\n\n'in case folder or file already exists we get an error we can ignore\nOn Error Resume Next\n\nDim fileDesc As FileDescriptor\n\n    For Each fileDesc In nAsm.File.ReferencedFileDescriptors\n        \n        Dim flname As String\n        flname = fileMgr.FileSystemObject.GetFileName(fileDesc.FullFileName)\n        \n        Dim newFolPath As String\n        newFolPath = GetFolPath(nAsm.FullFileName)\n        \n        Dim nameOnly As String\n        nameOnly = FileName(flname)\n        \n        If InStr(1, flname, \"Skin\") > 0 Then\n            \n            Dim part As PartDocument\n            Set part = ThisApplication.Documents.Open(fileDesc.FullFileName, False)\n            \n            Dim refFile As String\n            refFile = FileName(part.File.ReferencedFileDescriptors(1).FullFileName)\n            \n            Call part.File.ReferencedFileDescriptors(1).ReplaceReference(newFolPath & refFile)\n                \n            part.Update\n            part.Save2\n            part.Close\n            \n    \n        End If\n\n    Next\n    On Error GoTo 0\n\nEnd Sub\n\n\n\n' Return the path of the input filename.\nPublic Function GetFolPath(fPath) As String\n\n    ' Extract the path by getting everything up to and\n    ' including the last backslash \"\\\".\n    GetFolPath = Left$(fPath, InStrRev(fPath, \"\\\"))\n    \nEnd Function\n\n' Return the name of the file, without the path.\nPublic Function FileName(ByVal fName As String) As String\n\n    ' Extract the filename by getting everything to\n    ' the right of the last backslash.\n    FileName = Right$(fName, Len(fName) - InStrRev(fName, \"\\\"))\n               \nEnd Function\n\n' Return the extension of the input filename.\nPublic Function FileExtension(ByVal ffName As String) As String\n    ' Extract the filename by getting everthing to\n    ' the right of the last backslash.\n    Dim temp As String\n    temp = Right$(ffName, Len(ffName) - InStrRev(ffName, \"\\\"))\n\n    ' Get the base filename by getting everything to\n    ' the right of the last period \".\".\n    FileExtension = Right$(temp, Len(temp) - InStrRev(temp, \".\") + 1)\nEnd Function"], "author": "michael-peterso"},
{"created at": [], "solution Title": "\n                        Re: Select assembly constraints to rename them with VBA\n                    ", "solution": ["Dim", " ", "doc", " ", "As", " ", "AssemblyDocument", " = ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "comp", " ", "As", " ", "AssemblyComponentDefinition", " = ", "doc", ".", "ComponentDefinition", "\n", "For", " ", "Each", " ", "constrt", " ", "As", " ", "AssemblyConstraint", " ", "In", " ", "doc", ".", "SelectSet", "\n\t", "Dim", " ", "constrtType", " ", "As", " ", "String", "\n\t", "Select", " ", "Case", " ", "constrt", ".", "Type", "\n\t\t", "Case", " ", "ObjectTypeEnum", ".", "kFlushConstraintObject", "\n\t\t\t", "constrtType", " = ", "\"Flush\"", "\n\t\t", "Case", " ", "ObjectTypeEnum", ".", "kMateConstraintObject", "\n\t\t\t", "constrtType", " = ", "\"Mate\"", "\n\t\t", "Case", " ", "ObjectTypeEnum", ".", "kAngleConstraintObject", "\n\t\t\t", "constrtType", " = ", "\"Angle\"", "\n\t\t", "Case", " ", "ObjectTypeEnum", ".", "kInsertConstraintObject", "\n\t\t\t", "constrtType", " = ", "\"Insert\"", "\n\t\t", "Case", " ", "ObjectTypeEnum", ".", "kTangentConstraintObject", "\n\t\t\t", "constrtType", " = ", "\"Tangent\"", "\n\t\t", "Case", " ", "ObjectTypeEnum", ".", "kSymmetryConstraintObject", "\n\t\t\t", "constrtType", " = ", "\"Symmetry\"", "\n\t\t", "Case", " ", "Else", "\n\t\t\t", "constrtType", " = ", "\"Constraint\"", "\n\t", "End", " ", "Select", "\n\t\n\t", "constrt", ".", "Name", " = ", "constrtType", " & ", "\" (\"", " & ", "iProperties", ".", "Value", "(", "constrt", ".", "OccurrenceOne", ".", "Name", ", ", "\"Summary\"", ", ", "\"Title\"", ") _\n\t& ", "\", \"", " & ", "iProperties", ".", "Value", "(", "constrt", ".", "OccurrenceOne", ".", "Name", ", ", "\"Summary\"", ", ", "\"Title\"", ") & ", "\")\"", "\n", "Next", "\n"], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: Adding a custom drawing property\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Replacing Datum ID and View Annotation Styles\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Check if drawings needs migrating\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Insert IFeature with workplane and workpoint\n                    ", "solution": ["Public Sub Main() \n\n\tDim oPartDoc As PartDocument \n\toPartDoc = ThisApplication.ActiveDocument \n\n\tDim oPartDef As PartComponentDefinition \n\toPartDef = oPartDoc.ComponentDefinition \n\n\tDim oWorkPoint As WorkPoint \n\toWorkPoint = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kWorkPointFilter, \"Select a point to place iFeature\")  \n\t' Get the selected face to use as input for the iFeature. \n\tDim oFacePlane As WorkPlane \n\toFacePlane = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kWorkPlaneFilter, \"Select a Plane to place iFeature\") \n\n\tDim oFeatures As PartFeatures \n\toFeatures = oPartDef.Features \n\n\t' Create an iFeatureDefinition object. \n\tDim oiFeatureDef As iFeatureDefinition \n\toiFeatureDef = oFeatures.iFeatures.CreateiFeatureDefinition(\"Path of ide file\")\n\n\t' Set the input. \n\tDim oInput As iFeatureInput \n\tFor Each oInput In oiFeatureDef.iFeatureInputs \n\t\tDim oParamInput As iFeatureParameterInput \n\t\t\n\t\tSelect Case oInput.Name \n\t\tCase \"Durchmesser\" \n\t\tDim oTubeDia As iFeatureParameterInput \n\t\toTubeDia = oInput \n\t\toTubeDia.Expression = \"16 mm\" \n\n\t\tCase \"Skizzierebene1\" \n\t\tDim oPlaneInput As iFeatureSketchPlaneInput \n\t\toPlaneInput = oInput \n\t\toPlaneInput.PlaneInput = oFacePlane \n\n\t\tCase \"Referenzpunkt1\" \n\n\t\tDim oRefPoint As iFeatureEntityInput \n\t\toRefPoint = oInput \n\t\toRefPoint.Entity = oWorkPoint \n\n\t\tEnd Select \n\tNext \n\n\t' Create the iFeature. \n\tDim oiFeature As iFeature \n\toiFeature = oFeatures.iFeatures.Add(oiFeatureDef) \n\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: give drawing same description as assembly\n                    ", "solution": [], "author": "robert.vdrijst"},
{"created at": [], "solution Title": "\n                        Re: Export BOM from Assembly to Excel with options\n                    ", "solution": ["THESE ARE ALL PARTLIST OPTIONS ....... NOT TO BE USED FOR BOM...............", "' create a new NameValueMap object\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n'specify an existing template file to use For formatting colors, fonts, etc\noOptions.Value(\"Template\") = \"F:\\Hgn-SHUP\\Technische bibliotheken\\Inventor\\01 SupportFiles\\Inventor 2014\\Templates\\Template Partslist.xls\"\n\n'specify the columns to export         \noOptions.Value(\"ExportedColumns\") = \"ITEM;QTY;DESCRIPTION;PART NUMBER;MATERIAL\"\n\n'specify the start cell\noOptions.Value(\"StartingCell\") = \"A5\"\n\n'specify the XLS tab name, I used the filename of the drawing\noOptions.Value(\"TableName\") = oAsmName & \"-Rev_\" & oRevNum 'without extension\n\n'include the parts list title row\noOptions.Value(\"IncludeTitle\") = True\n\n'autofit the column width in the xls file\noOptions.Value(\"AutoFitColumnWidth\") = True\n\n\n' export the Partslist to Excel with above options\noStructuredBOMView.Export(oFolder & \"\\\" & oAsmName & \"-Rev_\" & oRevNum & \".xls\", PartsLis..................."], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Applications Options - Content Center Library Path Setting (VBA)\n                    ", "solution": ["Dim", " ", "location", " ", "As", " ", "String", "location = ", "\"G:\\Inventor 2018 CC Libraries\\\"", "\n", "ThisApplication", ".", "ContentCenterOptions", ".", "SetAccessOption ", "ContentCenterAccessOptionEnum", ".", "kInventorDesktopAccess", ", ", "location"], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: How to make exported WorkFeatures invisible in the assembly\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: SectionView Creation VB.Net\n                    ", "solution": ["Private", " ", "Sub", " ", "Erstellung_Zeichnungsdatei", "()\n\n        ", "'Variables not declared here, are declared globally", "\n        ", "oDrawDoc", " = ", "g_inventorApplication", ".", "Documents", ".", "Add", "(", "DocumentTypeEnum", ".", "kDrawingDocumentObject", ", ", "g_inventorApplication", ".", "FileManager", ".", "GetTemplateFile", "(", "DocumentTypeEnum", ".", "kDrawingDocumentObject", "))\n        ", "oSheet", " = ", "oDrawDoc", ".", "ActiveSheet", "\n        ", "oAsmDoc", " = ", "g_inventorApplication", ".", "Documents", ".", "Open", "(", "zielverzeichnis", ", ", "False", ")\n        ", "oTG", " = ", "g_inventorApplication", ".", "TransientGeometry", "\n\n        ", "Dim", " ", "oFrontView", " ", "As", " ", "DrawingView", "\n        ", "oFrontView", " = ", "oSheet", ".", "DrawingViews", ".", "AddBaseView", "(", "oAsmDoc", ", ", "oTG", ".", "CreatePoint2d", "(15, 12), 0.125, ", "ViewOrientationTypeEnum", ".", "kFrontViewOrientation", ", ", "DrawingViewStyleEnum", ".", "kHiddenLineDrawingViewStyle", ")\n\n        ", "Dim", " ", "oCompocc", " ", "As", " ", "ComponentOccurrence", "\n        ", "oCompocc", " = ", "oAsmDoc", ".", "ComponentDefinition", ".", "Occurrences", ".", "ItemByName", "(", "\"T\u00fcrrahmen:1\"", ")\n\n        ", "Dim", " ", "oWorkPoint1", " ", "As", " ", "WorkPoint", "\n        ", "Dim", " ", "oWorkPoint2", " ", "As", " ", "WorkPoint", "\n        ", "Dim", " ", "oWorkPoint1Prox", " ", "As", " ", "WorkPointProxy", "\n        ", "Dim", " ", "oWorkPoint2Prox", " ", "As", " ", "WorkPointProxy", "\n\t\t\n        ", "'are you sure you want the origin point here?", "\n\t", "'oWorkPoint1 = oCompocc.Definition.WorkPoints.Item(1)", "\n\t\t\n\t", "'assuming there are 2 workpoints besides the origin point", "\n        ", "oWorkPoint1", " = ", "oCompocc", ".", "Definition", ".", "WorkPoints", ".", "Item", "(2)\n        ", "oWorkPoint2", " = ", "oCompocc", ".", "Definition", ".", "WorkPoints", ".", "Item", "(3)\n        ", "oCompocc", ".", "CreateGeometryProxy", "(", "oWorkPoint1", ", ", "oWorkPoint1Prox", ")\n        ", "oCompocc", ".", "CreateGeometryProxy", "(", "oWorkPoint2", ", ", "oWorkPoint2Prox", ")\n\n\t", "'get the point in the drawingview representing the point from 3D space", "\n\t", "Dim", " ", "oPoint2d1", " ", "As", " ", "Point2d", " = ", "oFrontView", ".", "ModelToDrawingViewSpace", "(", "oWorkPoint1Prox", ".", "Point", ")\n\t", "Dim", " ", "oPoint2d2", " ", "As", " ", "Point2d", " = ", "oFrontView", ".", "ModelToDrawingViewSpace", "(", "oWorkPoint2Prox", ".", "Point", ")\n\t\t\n        ", "Dim", " ", "oSectionSketch", " ", "As", " ", "DrawingSketch", "\n        ", "Dim", " ", "oSectionLine", " ", "As", " ", "SketchLine", "\n        ", "Dim", " ", "oSectionView", " ", "As", " ", "SectionDrawingView", "\n\n        ", "oSectionSketch", " = ", "oFrontView", ".", "Sketches", ".", "Add", "()\n        ", "oSectionSketch", ".", "Edit", "()\n        ", "oSectionLine", " = ", "oSectionSketch", ".", "SketchLines", ".", "AddByTwoPoints", "(", "oPoint2d1", ", ", "oPoint2d2", ")\n        ", "oSectionSketch", ".", "ExitEdit", "()\n\n        ", "oSectionView", " = ", "oSheet", ".", "DrawingViews", ".", "AddSectionView", "(", "oFrontView", ", ", "oSectionSketch", ", ", "oTG", ".", "CreatePoint2d", "(34, 10), ", "DrawingViewStyleEnum", ".", "kHiddenLineRemovedDrawingViewStyle", ", ", "Nothing", ", ", "False", ")\n\n", "End", " ", "Sub", "\n"], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: Transparent background\n                    ", "solution": ["Public Sub SaveAsJPG()\n    ' Get the active view.\n    Dim oView As View\n    Set oView = ThisApplication.ActiveView\n    \n 'Create a new NameValueMap Object\n    Dim oOptions As NameValueMap\n    Set oOptions = ThisApplication.TransientObjects.CreateNameValueMap '.TransientObjects.CreateNameValueMap\n    \n    oOptions.Value(\"TransparentBackground\") = True\n\n    Call oView.SaveAsBitmapWithOptions(\"C:\\Temp\\TestB.bmp\", 0, 0, oOptions)\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Aktivate sketch after creation\n                    ", "solution": ["oSketch.edit"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: iFeature\n                    ", "solution": ["Public Sub Main()\nMsgBox \t (Parameter.Param(\"durchmesser\").expression)\nIf Parameter.Param(\"durchmesser\").Expression = \"10 mm", "Call features(\"LongPilot\", 10 mm)\nEnd If", "If Parameter.Param(\"durchmesser\").Expression = \"16 mm\" Then ", "Call features(\"LongPilot\", ", "16 mm", ") ", "End If", "'etc ", "\n\t\n\nEnd Sub\n\nPublic Sub features(Str As String , ", "Dia as string", ")\n\nDim a As Application\na = ThisApplication\nDim b As PartDocument\nb = a.ActiveDocument\nDim f As Object ' ExtrudeFeature\n'Set c = b.ComponentDefinition.Features\n\nDim i As Integer\ni = 0\nFor Each f In b.ComponentDefinition.Features\nIf InStr(f.Name, Str) > 0 Then\n\niFeature.ChangeRow(f.name, Dia)\n\ni = i + 1\nEnd If\n\nNext\nMsgBox (f.name)\nMsgBox (i)\nEnd Sub", "Public Sub Main()\n\n    Dim oPartDoc As PartDocument\n    oPartDoc = ThisApplication.ActiveDocument\n          \n    Dim oPartDef As PartComponentDefinition\n    oPartDef = oPartDoc.ComponentDefinition\n    \n    Dim oFeatures As PartFeatures\n    oFeatures = oPartDef.Features\n    \n    Dim i10Cnt As Integer\n    Dim i12Cnt As Integer\n    Dim i16Cnt As Integer\n    Dim i18Cnt As Integer\n    \n    Dim oiFeature As iFeature\n    For Each oiFeature In oFeatures.iFeatures\n        If InStr(oiFeature.Name, \"LongPilot\") > 0 Then\n            If oiFeature.Parameters.Item(8).Expression = \"10 mm\" Then\n                i10Cnt = i10Cnt + 1\n            ElseIf oiFeature.Parameters.Item(8).Expression = \"12 mm\" Then\n                i12Cnt = i12Cnt + 1\n            ElseIf oiFeature.Parameters.Item(8).Expression = \"16 mm\" Then\n                i16Cnt = i16Cnt + 1\n            ElseIf oiFeature.Parameters.Item(8).Expression = \"18 mm\" Then\n                i18Cnt = i18Cnt + 1\n            End If\n        End If\n    Next\n    \n    Dim i As Integer\n    If i10Cnt > 0 Then\n        For i = 1 To i10Cnt\n            For Each oiFeature In oFeatures.iFeatures\n                If InStr(oiFeature.Name, \"LongPilot\") > 0 Then\n                    If oiFeature.Parameters.Item(8).Expression = \"10 mm\" Then\n                        If oiFeature.Name = \"LongPilot Dia 10 mm :\" & i - 1 Then\n                             GoTo NextIteration10\n                        End If\n                        If Not InStr(oiFeature.Name, \"LongPilot Dia 10 mm :\") > 0 Then\n                            oiFeature.Name = \"LongPilot Dia 10 mm :\" & i-1\n                            GoTo NextIteration10\n                        End If\n                    End If\n                End If\n            Next\nNextIteration10:\n        Next\n    End If\n    If i12Cnt > 0 Then\n        For i = 1 To i12Cnt\n            For Each oiFeature In oFeatures.iFeatures\n                If InStr(oiFeature.Name, \"LongPilot\") > 0 Then\n                    If oiFeature.Parameters.Item(8).Expression = \"12 mm\" Then\n                        If oiFeature.Name = \"LongPilot Dia 12 mm :\" & i -1 Then\n                             GoTo NextIteration12\n                        End If\n                        If Not InStr(oiFeature.Name, \"LongPilot Dia 12 mm :\") > 0 Then\n                            oiFeature.Name = \"LongPilot Dia 12 mm :\" & i -1\n                            GoTo NextIteration12\n                        End If\n                    End If\n                End If\n            Next\nNextIteration12:\n        Next\n    End If\n    If i16Cnt > 0 Then\n        For i = 1 To i16Cnt\n            For Each oiFeature In oFeatures.iFeatures\n                If InStr(oiFeature.Name, \"LongPilot\") > 0 Then\n                    If oiFeature.Parameters.Item(8).Expression = \"16 mm\" Then\n                        If oiFeature.Name = \"LongPilot Dia 16 mm :\" & i -1Then\n                             GoTo NextIteration16\n                        End If\n                        If Not InStr(oiFeature.Name, \"LongPilot Dia 16 mm :\") > 0 Then\n                            oiFeature.Name = \"LongPilot Dia 16 mm :\" & i -1\n                            GoTo NextIteration16\n                        End If\n                    End If\n                End If\n            Next\nNextIteration16:\n        Next\n    End If\n    If i18Cnt > 0 Then\n        For i = 1 To i18Cnt\n            For Each oiFeature In oFeatures.iFeatures\n                If InStr(oiFeature.Name, \"LongPilot\") > 0 Then\n                    If oiFeature.Parameters.Item(8).Expression = \"18 mm\" Then\n                        If oiFeature.Name = \"LongPilot Dia 18 mm :\" & i - 1 Then\n                             GoTo NextIteration18\n                        End If\n                        If Not InStr(oiFeature.Name, \"LongPilot Dia 18 mm :\") > 0 Then\n                            oiFeature.Name = \"LongPilot Dia 18 mm :\" & i - 1\n                            GoTo NextIteration18\n                        End If\n                    End If\n                End If\n            Next\nNextIteration18:\n        Next\n    End If\n\nEnd Sub"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Has ilogic solution-derived component.\n                    ", "solution": [], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: VBA crashing randomly while pushing Parameters\n                    ", "solution": [], "author": "Stefanchapman"},
{"created at": [], "solution Title": "\n                        Re: ilogic auto save pdf\n                    ", "solution": ["oPath = ThisDoc.Path\noFileName = ThisDoc.FileName(False) 'without extension\noRevNum = iProperties.Value(\"project\", \"revision number\")\noPDFAddIn = ThisApplication.ApplicationAddIns.ItemById _\n(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\noDocument = ThisApplication.ActiveDocument\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium \n\n\n", "If oPDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then", "\noOptions.Value(\"All_Color_AS_Black\") = 0\noOptions.Value(\"Remove_Line_Weights\") = 1\noOptions.Value(\"Vector_Resolution\") = 400\noOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\n'oOptions.Value(\"Custom_Begin_Sheet\") = 2'oOptions.Value(\"Custom_End_Sheet\") = 4\nEnd If \n\n\n'get PDF target folder path\noFolder = \"k:\\dwg\\pdf\\\"\n\n\n'Check for the PDF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n\n\n 'Set the PDF target file name\noDataMedium.FileName = oFolder & \"\\\" & oFileName & _\n\" rev\" & oRevNum & \".pdf\" \n\n\n'Publish document\noPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium) \n'------end of iLogic-------"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to change Item number in BOM via API\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: mirroring an  iPart in iAssembly\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: Find BOMRow Parent Row object\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Importing DWG with Blocks into SketchBlockDefinitions\n                    ", "solution": ["private const int WM_LBUTTONDOWN = 0x0201;\nprivate const int WM_LBUTTONUP = 0x0202;\nThread m_pushFinishButtonThread;\npublic bool m_bWorkerRunning = true;\n\n[DllImport(\"user32.dll\")]\npublic static extern int SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);\n[DllImport(\"User32.dll\")]\npublic static extern IntPtr FindWindow(String lpClassName, String lpWindowName);\n[DllImport(\"user32.dll\", SetLastError = true)]\npublic static extern IntPtr FindWindowEx(IntPtr parentHandle, IntPtr childAfter, string className, string windowTitle);\n\npublic void pushFinishButtonThread()\n{\n    do\n    {\n        IntPtr hwnd;\n        IntPtr hwndChild = IntPtr.Zero;\n        \n        // find the import dialogs main window (my window name is german, so you have to adapt for every language you need to support)\n        string strWindowTitle = \"Importoptionen f\u00fcr Layer und Objekte\";        \n        hwnd = FindWindow(null, strWindowTitle);\n        \n        // the next lines are only if you have to support multiple languages...\n        if (hwnd == IntPtr.Zero)\n        {\n            strWindowTitle = \"english window name\";\n            hwnd = FindWindow(null, strWindowTitle);\n        }\n        if (hwnd == IntPtr.Zero)\n        {\n            strWindowTitle = \"french window name\";\n            hwnd = FindWindow(null, strWindowTitle);\n        }\n        if (hwnd == IntPtr.Zero)\n        {\n            strWindowTitle = \"italian window name\";\n            hwnd = FindWindow(null, strWindowTitle);\n        }\n\n        // only go here if we have found the dialog window\n        if (hwnd != IntPtr.Zero)\n        {\n            //Get a handle for the \"Finish button\" button\n            hwndChild = FindWindowEx(hwnd, IntPtr.Zero, \"Button\", \"Fertig stellen\");\n            if (hwndChild == IntPtr.Zero)\n            {\n                hwndChild = FindWindowEx(hwnd, IntPtr.Zero, \"Button\", \"english finish button text\");\n            }\n            if (hwndChild == IntPtr.Zero)\n            {\n                hwndChild = FindWindowEx(hwnd, IntPtr.Zero, \"Button\", \"french finish button text\");\n            }\n            if (hwndChild == IntPtr.Zero)\n            {\n                hwndChild = FindWindowEx(hwnd, IntPtr.Zero, \"Button\", \"italian finish button text\");\n            }            \n\n            if (hwndChild == IntPtr.Zero)\n            {\n                m_Logger.log(LogFileManager.eReason.kInfo, \"could not find Finish button\");                        \n            }\n            else\n            {\n                // do a 'button press'\n                SendMessage(hwndChild, WM_LBUTTONDOWN, IntPtr.Zero, IntPtr.Zero);\n                SendMessage(hwndChild, WM_LBUTTONUP, IntPtr.Zero, IntPtr.Zero);\n                SendMessage(hwndChild, WM_LBUTTONDOWN, IntPtr.Zero, IntPtr.Zero);\n                SendMessage(hwndChild, WM_LBUTTONUP, IntPtr.Zero, IntPtr.Zero);                \n                m_Logger.log(LogFileManager.eReason.kInfo, \"pushFinishButtonThread finished it's job\");\n                return;\n            }            \n        }\n        // wait a bit\n        Thread.Sleep(50);\n        // repeat when dialog window not found\n    } while (m_bWorkerRunning == true);\n    m_Logger.log(LogFileManager.eReason.kInfo, \"pushFinishButtonThread finished without cancel\");\n}        \n\nvoid ImportIntoSketchBlock(...)\n{\n    ...\n    PlanarSketch sketch = skeltonDoc.ComponentDefinition.Sketches.Add(skeltonDoc.ComponentDefinition.WorkPlanes[1]);\n\n    \n    //strIniFile = @\"C:\\Users\\user\\AppData\\Local\\Temp\\dwgoacad210.ini\";\n    string strIniFile = this.createDWGExportIni(m_inventorApplication, null);   \n\n    try\n    {\n        sketch.Edit();\n        // create the Thread function\n        m_pushFinishButtonThread = new Thread(pushFinishButtonThread);      \n        // start the Thread function\n        m_pushFinishButtonThread.Start();\n        m_inventorApplication.CommandManager.PostPrivateEvent(PrivateEventTypeEnum.kFileNameEvent, strBlockDwgFileName);\n        \n        m_inventorApplication.CommandManager.ControlDefinitions[\"SketchInsertAutoCADFileCmd\"].Execute();        \n    }\n    catch (Exception ex) {; }\n    finally\n    {\n        // Stop Thread\n        m_bWorkerRunning = false;\n        Thread.Sleep(500);\n        m_pushFinishButtonThread.Abort();\n        sketch.ExitEdit();\n        //setDwgTranslatorLastUsedIniFile(strOldIniFile);\n        System.IO.File.Delete(strIniFile);\n    }\n}\n\n"], "author": "lstyra"},
{"created at": [], "solution Title": "\n                        Re: How to start Inventor with VB.NET in a different language?\n                    ", "solution": ["Process.Start(\"C:\\Program Files\\Autodesk\\Inventor 2016\\Bin\\Inventor.exe\", \" /language=FRA\")", "Threading.Thread.Sleep(1000) ", "'Give Inventor some time to start-up", "_invApp = Marshal.GetActiveObject(\"Inventor.Application\")"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: partlist style\n                    ", "solution": ["Sub Main()\n    \n    Dim oDrawingDoc As DrawingDocument\n    Set oDrawingDoc = ThisApplication.ActiveDocument\n    \n    Dim oReferDoc As Document\n    For Each oReferDoc In oDrawingDoc.ReferencedDocuments\n        If oReferDoc.DocumentSubType.DocumentSubTypeID = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n            MsgBox (\"Referenced document is sheet metal document\")\n        End If\n    Next\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Need Help updating template and old drawings ilogic\n                    ", "solution": ["Option Explicit\n\nSub Main\n\nDim oTargetDoc, oSourceDoc As DrawingDocument\nDim oTBdef As TitleBlockDefinition\nDim oTBdefs As TitleBlockDefinitions\nDim oBorderDef As BorderDefinition\nDim oBorderDefs As BorderDefinitions\nDim oSymbol As SketchedSymbolDefinition\nDim oSymbols As SketchedSymbolDefinitions\nDim oPrompt As String\n\nIf ThisDoc.Document.DocumentType <> kDrawingDocumentObject Then\n\tMsgBox(\"This rule may only be run on drawing documents!\",vbOKOnly,\"Update Titleblocks\")\n\tExit Sub\nEnd If\n\noTargetDoc = ThisDrawing.Document\n\noPrompt = MsgBox(\"Update Titleblocks and Styles?\",vbYesNo,\"Update Titleblocks\")\nSelect Case oPrompt\nCase vbNo\n\tExit Sub\nCase vbYes\n\toSourceDoc = ThisApplication.Documents.Open(\"C:\\_Vault\\Inventor Templates\\Standard.idw\", False)\n\toTargetDoc.StylesManager.ActiveStandardStyle.UpdateFromGlobal\nEnd Select\n\noTBdefs = oSourceDoc.TitleBlockDefinitions\noBorderDefs = oSourceDoc.BorderDefinitions\noSymbols = oSourceDoc.SketchedSymbolDefinitions\n\nFor Each oTBdef In oTBdefs\n\tTry\n\t\tIf oTBdef.Name <> \"ANSI - Large\" Then\n\t\t\toTBdef.CopyTo(oTargetDoc, True)\n\t\tEnd If\n\tCatch\n\t\tMsgBox(\"Unknown error in copy title block for \" & Chr(34) & oTBdef.Name & Chr(34),vbOKOnly,\"Error\")\n\tEnd Try\nNext\nFor Each oBorderDef In oBorderDefs\n\tTry\n\t\tIf oBorderDef.Name <> \"Default Border\" Then\n\t\t\toBorderDef.CopyTo(oTargetDoc, True)\n\t\tEnd If\n\tCatch\n\t\tMsgBox(\"Unknown error in copy border definition for \" & Chr(34) & oBorderDef.Name & Chr(34),vbOKOnly,\"Error\")\n\tEnd Try\nNext\nFor Each oSymbol In oSymbols\n\tTry\n\t\toSymbol.CopyTo(oTargetDoc, True)\n\tCatch\n\t\tMsgBox(\"Unknown error in copy sketched symbol for \" & Chr(34) & oSymbol.Name & Chr(34),vbOKOnly,\"Error\")\n\tEnd Try\nNext\n\n", "oSourceDoc.Close()", "\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic to Name Drawing Sheet as Sheet Number\n                    ", "solution": ["Dim", " ", "oSheets", " ", "As", " ", "Sheets", " ", "=", " ", "ThisDrawing", ".", "Document", ".", "sheets", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "Dim", " ", "SheetNumber", " ", "As", " ", "String", " \n\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oSheets", "\n    ", "oSheet", ".", "activate", "\n    ", "oModel", " ", "=", " ", "IO", ".", "Path", ".", "GetFileName", "(", "ActiveSheet", ".", "View", "(", "\"", "ISO", "\"", ")", ".", "ModelDocument", ".", "FullFileName", ")", "\n\n    ", "'", "MessageBox.Show(oModel)", "\n    ", "oDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n    ", "MessageBox", ".", "Show", " ", "(", "Mid", "(", "oDoc", ".", "ActiveSheet", ".", "Name", ", ", "InStr", "(", "1", ", ", "oDoc", ".", "ActiveSheet", ".", "Name", ", ", "\"", ":", "\"", ")", " ", "+", " ", "1", "))", "\n    ", "SheetNumber", "  ", "=", " ", "Mid", "(", "oDoc", ".", "ActiveSheet", ".", "Name", ", ", "InStr", "(", "1", ", ", "oDoc", ".", "ActiveSheet", ".", "Name", ", ", "\"", ":", "\"", ")", " ", "+", " ", "1", ")", "\n    \n    ", "partnum", " ", "=", " ", "iProperties", ".", "Value", "(", "oModel", ", ", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", "\n    ", "MessageBox", ".", "Show", " ", "(", "partnum", " ", ")", "\n    ", "'", "MessageBox.Show(partnum)", "\n    ", "ActiveSheet", ".", "Sheet", ".", "Name", " ", "=", " ", "partnum", " ", "+", " ", "\"", "-", "\"", " ", "+", " ", "SheetNumber", "\n", "Next"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Not Matching If Test\n                    ", "solution": ["MessageBox.Show(Parameter(\"Thickness\"), \"Param Value\")\n\nDim oVal As Double = Parameter(\"Thickness\")\nDim oStyle As String = vbNullString\nSelect Case Math.Round(oVal, 4)\nCase .125:\t\toStyle = \".125 .125 Rad\"\nCase .5:\t\toStyle = \"1/2\" & \"\"\"\" & \" .2366 Rad\"\nCase .25:\t\toStyle = \"1/4\" & \"\"\"\" & \" .1719 Rad\"\nCase .1046:\t\toStyle = \"12 Ga .0781 Rad\"\nCase .1345:\t\toStyle = \"10 Ga .125 Rad\"\nCase .0747:\t\toStyle = \"14 Ga .0781 Rad\"\nCase .1875:\t\toStyle = \"3/16\" & \"\"\"\" & \" .125 Rad\"\nCase .375:\t\toStyle = \"3/8\" & \"\"\"\" & \" .1719 Rad\"\nCase .3125:\t\toStyle = \"5/16\" & \"\"\"\" & \" .0781 Rad\"\nCase Else:\tExit Sub\nEnd Select\n\nSheetMetal.SetActiveStyle(oStyle)\nMessageBox.Show(SheetMetal.GetActiveStyle, \"Title\")"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Flat Pattern to DXF\n                    ", "solution": ["Sub FlatPatternDXF()\n\n'config\n    'Change values located here to change output.\n    Dim strPath As String\n    strPath = \"C:\\Users\\Public\\Documents\\\"  'Must end with a \"\\\"\n    \n    Dim sOut As String\n    sOut = \"FLAT PATTERN DXF?AcadVersion=2000\" _\n    + \"&OuterProfileLayer=OUTER_PROF&OuterProfileLayerColor=0;0;0\" _\n    + \"&InteriorProfilesLayer=INNER_PROFS&InteriorProfilesLayerColor=0;0;0\" _\n    + \"&FeatureProfileLayer=FEATURE&FeatureProfileLayerColor=0;0;0\" _\n    + \"&BendUpLayer=BEND_UP&BendUpLayerColor=0;255;0&BendUpLayerLineType=37634\" _\n    + \"&BendDownLayer=BEND_DOWN&BendDownLayerColor=0;255;0&BendDownLayerLineType=37634\" _\n'/config\n\n    Dim oPartDoc As Document\n    Set oPartDoc = ThisApplication.ActiveDocument\n    \n    Dim oFlatPattern As FlatPattern\n    \n'Pre-processing check:\n    ' The Active document must be a Sheet metal Part with a flat pattern\n    If oPartDoc.DocumentType <> kPartDocumentObject Then\n        MsgBox \"The Active document must be a 'Part'\"\n        Exit Sub\n    Else\n        If oPartDoc.SubType <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n            MsgBox \"The Active document must be a 'Sheet Metal Part'\"\n            Exit Sub\n        Else\n            Set oFlatPattern = oPartDoc.ComponentDefinition.FlatPattern\n            If oFlatPattern Is Nothing Then\n                MsgBox \"Please create the flat pattern\"\n                Exit Sub\n            End If\n        End If\n    End If\n    \n'Processing:\n    Dim oDataIO As DataIO\n    Set oDataIO = oPartDoc.ComponentDefinition.DataIO\n    \n    Dim strPartNum As String\n    strPartNum = oPartDoc.PropertySets(\"Design Tracking Properties\").Item(\"Part Number\").Value\n\n    Dim strRev As String\n    strRev = oPartDoc.PropertySets(\"Inventor Summary Information\").Item(\"Revision Number\").Value\n    \n    Dim oDXFfileNAME As String\n    oDXFfileNAME = strPath & strPartNum & \"-R\" & strRev & \".dxf\"\n    \n    Call oDataIO.WriteDataToFile(sOut, oDXFfileNAME)\n\n    'Toggle this on/off to open output folder during output.\n    Call Shell(\"explorer.exe\" & \" \" & strPath, vbNormalFocus)\n\nEnd Sub\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Rename Positional Representations\n                    ", "solution": ["Dim oDoc As Inventor.Document = ThisApplication.ActiveDocument\nDim oCD As ComponentDefinition = oDoc.ComponentDefinition\nDim oPR As PositionalRepresentation = oCD.RepresentationsManager.PositionalRepresentations(\"", "OldName", "\")\noPR.Name = \"", "NewName", "\""], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How to do a SplitFaces with VB / Api?\n                    ", "solution": ["Private Sub CreateSplitHole()\n    Dim oDoc As Inventor.PartDocument = _inventorApplication.ActiveDocument\n    Dim oCD As PartComponentDefinition = oDoc.ComponentDefinition\n    Dim oSketch As PlanarSketch = oCD.Sketches(2)\n    Dim oTO As TransientObjects = _inventorApplication.TransientObjects\n    Dim OC As ObjectCollection = oTO.CreateObjectCollection\n    Dim oWSFace As WorkSurface = oCD.WorkSurfaces(1)\n    Dim oSurfBody As SurfaceBody = oWSFace.SurfaceBodies(1)\n    Dim oFace As Face = oSurfBody.Faces(1)\n    OC.Add(oFace)\n    Dim oPath As Object = Nothing\n    For Each oSE As Object In oSketch.SketchEntities\n        If oSE.Construction Then Continue For\n        If oSE.Type = ObjectTypeEnum.kSketchPointObject Then Continue For\n        oPath = oCD.Features.CreatePath(oSE)\n        Exit For\n    Next\n    If oPath Is Nothing Then Exit Sub\n    Dim oSplitFeatures As SplitFeatures = oCD.Features.SplitFeatures\n    Dim oSplit As SplitFeature = oSplitFeatures.SplitFaces(oPath, False, OC)\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Initial Scale View = scale factor ilogic help\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", ": ", "oDoc", " ", "=", " ", "oApp", ".", "ActiveDocument", "\n\n", "Dim", " ", "oSheets", " ", "As", " ", "Sheets", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "Dim", " ", "oViews", " ", "As", " ", "DrawingViews", "\n", "Dim", " ", "oView", " ", "As", " ", "DrawingView", "\n\n", "oSheets", " ", "=", " ", "oDoc", ".", "Sheets", "\n\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oSheets", "\n", "oViews", " ", "=", " ", "oSheet", ".", "DrawingViews", "\n    ", "For", " ", "Each", " ", "oView", " ", "In", " ", "oViews", "\n        ", "Select", " ", "Case", " ", "ActiveSheet", ".", "View", "(", "oView", ".", "Name", ")", ".", "ScaleString", "\n            ", "Case", " ", "\"", "1.5 = 12-0", "\"", "\n                  ", "oSF", " ", "=", " ", "\"", "8", "\"", "\n            ", "Case", " ", "\"", "1 : 1", "\"", "\n                  ", "oSF", " ", "=", " ", "\"", "1", "\"", "\n            ", "Case", " ", "\"", "1 1/2\"\" = 1'-0\"\"", "\" '(this works!!)", "\n                  ", "oSF", " ", "=", " ", "\"", "xx", "\"", "\n            ", "Case", " ", "\"", "3 = 1'-0", "\"", "\n               ", "oSF", " ", "=", " ", "\"", "16", "\"", "\n            ", "Case", " ", "Else", "\n            ", "oSF", " ", "=", " ", "\"", "???", "\"", "\n        ", "End", " ", "Select", "\n    ", "Next", "\n", "Next"], "author": "Joel.Manrique"},
{"created at": [], "solution Title": "\n                        Re: How to add folder shortcuts to Export/Save As menu in my workspace\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: ilogic occurrence name\n                    ", "solution": [], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: iLogic not accepting print settings\n                    ", "solution": ["oDrgPrintMgr.PrintRange = 14082 'Print all Sheets of the Drawing\noDrgPrintMgr.Scalemode = 13825  'Full Scale mode\noDrgPrintMgr.SubmitPrint"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Run an iLogic rule from a form\n                    ", "solution": ["'Do the things before showing the form\n\n'Then\n\niLogicForm.Show(\"MyForm\")"], "author": "JoAntt"},
{"created at": [], "solution Title": "\n                        Re: Add and delete general note on all sheets\n                    ", "solution": ["Sub Main()\n\tCall AddNote()\n\tCall PrintPDF()\n\tCall DeleteNote()\nEnd Sub\n\n\nSub AddNote()\n\tDim invApp As Inventor.Application\n\tinvApp = ThisApplication\n\t\n\tDim oDrawDoc As Document\n\toDrawDoc = invApp.ActiveEditDocument\n\t\n\tDim oTG As Inventor.TransientGeometry = invApp.TransientGeometry\n\t\n\tFor Each oSheet In oDrawDoc.Sheets\n\t\n\t\toNote = oSheet.DrawingNotes.GeneralNotes.AddFitted(oTG.CreatePoint2d(oSheet.Width - 3.5, 4.5), \"Text\" & vbCrLf & \"Other Text\")\n\t\t\n\t\tWith oNote\n\t\t\t.Rotation = 0.785398 'radianti\n\t\t\t.LineSpacing = 0.6\n\t\t\t.HorizontalJustification = Inventor.HorizontalTextAlignmentEnum.kAlignTextCenter\n\t\t\t.VerticalJustification = Inventor.VerticalTextAlignmentEnum.kAlignTextMiddle\n\t\tEnd With\n\t\toDrawDoc.Update()\n\tNext\n End Sub\n \n Sub PrintPdf()\n \tMsgBox(\"Code for printing goes here instead!\")\n End Sub\n \n Sub DeleteNote()\n \tDim invApp As Inventor.Application\n\tinvApp = ThisApplication\n\t\n\tDim oDrawDoc As Document\n\toDrawDoc = invApp.ActiveEditDocument\n\t\t\n\tFor Each oSheet In oDrawDoc.Sheets\n\t\tFor Each oGeneralNote In oSheet.DrawingNotes.GeneralNotes\n\t\t\tIf oGeneralNote.Rotation = 0.785398\n\t\t\t\toGeneralNote.Delete\n\t\t\tEnd If\n\t\tNext\n\tNext\n End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: ApplicationEvents  OnSaveDocument OnOpenDocument\n                    ", "solution": ["'Namespace TheNameSpace\n\t'Public Class StandardAddInServer\n\t\tPrivate WithEvents m_FileUIEvents As Inventor.FileUIEvents\n\t\t'Public Sub Activate\n\t\t\tm_FileUIEvents = m_inventorApplication.FileUIEvents\n\t\t\tAddHandler m_inventorApplication.FileUIEvents.OnFileSaveAsDialog, AddressOf m_FileUIEvents_OnFileSaveAsDialog\n\t\t'End sub\n\t\t\tPrivate Sub m_FileUIEvents_OnFileSaveAsDialog(ByRef FileTypes() As String, SaveCopyAs As Boolean,\n\t\t\tParentHWND As Integer, ByRef FileName As String, Context As Inventor.NameValueMap,\n\t\t\t\tByRef HandlingCode As Inventor.HandlingCodeEnum)\n\t\t\t\tHandlingCode = HandlingCodeEnum.kEventHandled\n\t\t\t\tMsgBox(\"I am the new Save As Dialog!\")\n\t\t\tEnd Sub\n\t'End Class\n'End Namespace"], "author": "JoAntt"},
{"created at": [], "solution Title": "\n                        Re: Run AppStyleLibraryManagerCmd\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Closing a modeless form if the 'parent' part document is closed\n                    ", "solution": [], "author": "rogmitch"},
{"created at": [], "solution Title": "\n                        Re: Creating a 3D Skecth Arc through a Three WorkPoints\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Creating a Constraint in iLogic\n                    ", "solution": ["Dim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\nDim compOcc1 As ComponentOccurrence = Component.InventorComponent(\"Cube:1\")\nDim compOcc2 As ComponentOccurrence = Component.InventorComponent(\"Cube_2:1\")\nDim oPoint1 As WorkPoint\noPoint1 = compOcc1.Definition.WorkPoints(\"Work Point1\")\nDim oPoint2 As WorkPoint\noPoint2 = compOcc2.Definition.WorkPoints(\"Work Point1\")\n\nDim oproxyPoint1 As WorkPointProxy\ncompOcc1.CreateGeometryProxy(oPoint1, oproxyPoint1)\nDim oproxyPoint2 As WorkPointProxy\ncompOcc2.CreateGeometryProxy(oPoint2, oproxyPoint2)\n\nDim oConstraint As MateConstraint\noConstraint = oAsmCompDef.Constraints.AddMateConstraint(oproxyPoint1, oproxyPoint2, 0)\n\n\nDim oAxis1 As WorkAxis\noAxis1 = compOcc1.Definition.WorkAxes(\"Work Axis1\")\nDim oWorkPlane As WorkPlane\noWorkPlane = compOcc2.Definition.WorkPlanes(\"Work Plane1\")\n\nDim oproxyAxis1 As WorkAxisProxy = Nothing\ncompOcc1.CreateGeometryProxy(oAxis1, oproxyAxis1)\n\nDim oproxyWorkPlane As WorkPlaneProxy = Nothing\ncompOcc2.CreateGeometryProxy(oWorkPlane, oproxyWorkPlane)\n\nDim oAConstraint As MateConstraint\noAConstraint = oAsmCompDef.Constraints.AddMateConstraint(oproxyAxis1, oproxyWorkPlane, 0)"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Inventor defaults.xml  - Collect machine user name on open .\n                    ", "solution": ["WSHnet", " ", "=", " ", "CreateObject", "(", "\"", "WScript.Network", "\"", ")", "\n", "UserName", " ", "=", " ", "WSHnet", ".", "UserName", "\n", "UserDomain", " ", "=", " ", "WSHnet", ".", "UserDomain", "\n", "objUser", " ", "=", " ", "GetObject", "(", "\"", "WinNT://", "\"", " ", "&", " ", "UserDomain", " ", "&", " ", "\"", "/", "\"", " ", "&", " ", "UserName", " ", "&", " ", "\"", ",user", "\"", ")", "\n", "'", "get user name", "\n", "UserFullName", " ", "=", " ", "objUser", ".", "FullName", "\n", "ThisApplication", ".", "GeneralOptions", ".", "UserName", " ", "=", " ", "UserFullName"], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: issue while making section view with iLogic\n                    ", "solution": [], "author": "Reza.Deabae"},
{"created at": [], "solution Title": "\n                        Re: ViewOrientationFromBase question\n                    ", "solution": ["Sub Main()\n    'Get the active document\n    Dim oDoc As Document = ThisApplication.ActiveDocument\n    'Exit if the document isn't drawing\n    If oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\n    \n    'Get the correct sheet\n    Dim oSheet As Sheet = oDoc.ActiveSheet\n    \n    'Exit if the sheet have no views\n    If oSheet.DrawingViews.Count = 0 Then Exit Sub\n    \n    'Get the selection from user\n    Dim oSelect As Object = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingViewFilter, \"Pick a view\")\n    \n    'Exit if nothing is selected\n    If oSelect Is Nothing Then Exit Sub\n    \n    'Get the view\n    Dim oView As DrawingView = oSelect\n    \n    'Get the first document from the view\n    Dim oModel As Document = oDoc.ReferencedDocuments.Item(1)\n    \n    'Exit if the referenced document isn't sheet metal\n    If oModel.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Exit Sub\n    \n    'Get the view position\n    Dim oPosition As Point2d = oView.Position\n    'Get the view size\n    Dim oSpace As Double = oView.Width\n    'Offset the position\n    oPosition.X = oPosition.X + oSpace\n    'Get the view scale\n    Dim oScale As Double = oView.Scale\n    \n    'Set the view style\n    Dim oViewStyle As DrawingViewStyleEnum = oView.ViewStyle\n    \n    'Set the orientation\n    Dim oOrientation As ViewOrientationTypeEnum = oView.Camera.ViewOrientationType\n    Dim NewOrientation As ViewOrientationTypeEnum = TurnRight(oOrientation)\n    \n    'Add the new view\n    Dim oView2 As DrawingView\n    If NewOrientation = ViewOrientationTypeEnum.kArbitraryViewOrientation Then\n        oView2 = oSheet.DrawingViews.AddBaseView(oModel, oPosition, oScale, NewOrientation, oViewStyle, , oView.Camera)\n    Else\n        oView2 = oSheet.DrawingViews.AddBaseView(oModel, oPosition, oScale, NewOrientation, oViewStyle)\n    End If\nEnd Sub\n\nPrivate Function TurnRight(oOrientation As ViewOrientationTypeEnum) As ViewOrientationTypeEnum\n     Dim NOR As ViewOrientationTypeEnum\n     Select Case oOrientation\n     Case ViewOrientationTypeEnum.kFrontViewOrientation:    NOR = ViewOrientationTypeEnum.kLeftViewOrientation\n     Case ViewOrientationTypeEnum.kBackViewOrientation:     NOR = ViewOrientationTypeEnum.kRightViewOrientation\n     Case ViewOrientationTypeEnum.kTopViewOrientation:      NOR = ViewOrientationTypeEnum.kFrontViewOrientation\n     Case ViewOrientationTypeEnum.kBottomViewOrientation:   NOR = ViewOrientationTypeEnum.kBackViewOrientation\n     Case ViewOrientationTypeEnum.kLeftViewOrientation:     NOR = ViewOrientationTypeEnum.kBackViewOrientation\n     Case ViewOrientationTypeEnum.kRightViewOrientation:    NOR = ViewOrientationTypeEnum.kFrontViewOrientation\n     Case Else: NOR = oOrientation\n     End Select\n     Return NOR\nEnd Function"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Convert sheetmetal folded to flat pattern on drawing\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\nFor Each oSheet As Sheet In oDoc.Sheets\n     If oSheet.DrawingViews.Count = 0 Then Continue For\n     For Each oView As DrawingView In oSheet.DrawingViews\n          Dim oModel As Document = oView.ReferencedDocumentDescriptor.ReferencedDocument\n          If oModel.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Continue For\n          Dim oOptions As NameValueMap = ThisApplication.TransientObjects.CreateNameValueMap\n          oOptions.Add(\"SheetMetalFoldedModel\", False)\n          Dim oPoint As Point2D = oView.Position\n          Dim oViewStyle As DrawingViewStyleEnum = oView.ViewStyle\n          Dim oScale As Double = oView.Scale\n          Dim oOri As ViewOrientationTypeEnum = ViewOrientationTypeEnum.kDefaultViewOrientation\n          oSheet.DrawingViews.AddBaseView(oModel, oPoint, oScale, oOri, oViewStyle, , , oOptions)\n          oView.Delete()\n     Next\nNext", "Dim oDoc As Document = ThisApplication.ActiveDocument\nIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\n\nDim oView As DrawingView\nDim oSSet As SelectSet = ThisDoc.Document.SelectSet\nIf oSSet.count = 0 Then\n\tMessageBox.Show(\"Select view(s)\", \"Attention!\")\nExit Sub\nEnd If\n\nFor Each oSheet As Sheet In oDoc.Sheets\n     If oSheet.DrawingViews.Count = 0 Then Continue For\n     For Each oView In oSSet\n          Dim oModel As Document = oView.ReferencedDocumentDescriptor.ReferencedDocument\n          If oModel.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Continue For\n          Dim oOptions As NameValueMap = ThisApplication.TransientObjects.CreateNameValueMap\n          oOptions.Add(\"SheetMetalFoldedModel\", False)\n          Dim oPoint As Point2D = oView.Position\n          Dim oViewStyle As DrawingViewStyleEnum = oView.ViewStyle\n          Dim oScale As Double = oView.Scale\n          Dim oOri As ViewOrientationTypeEnum = ViewOrientationTypeEnum.kDefaultViewOrientation\n          oSheet.DrawingViews.AddBaseView(oModel, oPoint, oScale, oOri, oViewStyle, , , oOptions)\n          oView.Delete()\n     Next\nNext", "Dim oDoc As Document = ThisApplication.ActiveDocument\nIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\n\nDim oView As DrawingView\nDim oSSet As SelectSet = ThisDoc.Document.SelectSet\nIf oSSet.count = 0 Then\n     MessageBox.Show(\"Select view(s)\", \"Attention!\")\n     Exit Sub\nEnd If\n\nDim oSheet As Sheet = oDoc.ActiveSheet\nIf oSheet.DrawingViews.Count = 0 Then Continue For\nFor Each oView In oSSet\n     Dim oModel As Document = oView.ReferencedDocumentDescriptor.ReferencedDocument\n     If oModel.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Continue For\n     Dim oOptions As NameValueMap = ThisApplication.TransientObjects.CreateNameValueMap\n     oOptions.Add(\"SheetMetalFoldedModel\", False)\n     Dim oPoint As Point2D = oView.Position\n     Dim oViewStyle As DrawingViewStyleEnum = oView.ViewStyle\n     Dim oScale As Double = oView.Scale\n     Dim oOri As ViewOrientationTypeEnum = ViewOrientationTypeEnum.kDefaultViewOrientation\n     oSheet.DrawingViews.AddBaseView(oModel, oPoint, oScale, oOri, oViewStyle, , , oOptions)\n     oView.Delete()\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Connect to AutoCAD within iLogic\n                    ", "solution": ["AddReference \"Autodesk.AutoCAD.Interop\"\nAddReference \"Autodesk.AutoCAD.Interop.Common\"\n\nImports Autodesk.AutoCAD.Interop.Common\nImports Autodesk.AutoCAD.Interop\n\nSub Main\nDim oAcadApp As AcadApplication\noAcadApp = CreateObject(\"AutoCAD.Application\")\n'If AutoCAD is already running use GetObject\n'oAcadApp = GetObject(,\"AutoCAD.Application\")\noAcadApp.Visible = True\n\nDim myBlockRef As AcadBlockReference\nDim oAcadCircl as AcadCircle\n\nMessageBox.Show(oAcadApp.Caption, \"Title\")\n\nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Loock veiw in drawing\n                    ", "solution": [], "author": "Thomas_Savage"},
{"created at": [], "solution Title": "\n                        Re: PDF overwrite Yes/No\n                    ", "solution": ["Function PrintSheet(sheetPath As String, sheetName As String  )\n    \n    ' Get the PDF translator Add-In.\n    Dim PDFAddIn As TranslatorAddIn\n    PDFAddIn = ThisApplication.ApplicationAddIns.ItemById _\n                            (\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\n    'Set a reference to the active document (the document to be published).\n    Dim oDocument As Document\n    oDocument = ThisApplication.ActiveDocument\n     Dim oContext As TranslationContext\n    oContext =  ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = kFileBrowseIOMechanism\n    'Create a NameValueMap object\n    Dim oOptions As NameValueMap \n     oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n    ' Create a DataMedium object\n    Dim oDataMedium As DataMedium\n    oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n    ' Check whether the translator has 'SaveCopyAs' options\n    If PDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n        \n        ' Options for drawings...\n        'oOptions.Value(\"Launch_Viewer\") = launchviewer\n        oOptions.Value(\"All_Color_AS_Black\") = 1\n        'oOptions.Value(\"Sheet_Range\") = ThisApplication.PrintRangeEnum.kPrintAllSheets\n        oOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintCurrentSheet\n        \n        'oOptions.Value(\"Remove_Line_Weights\") = 0\n        'oOptions.Value(\"Vector_Resolution\") = 400\n        \n        'oOptions.Value(\"Custom_Begin_Sheet\") = 2\n        'oOptions.Value(\"Custom_End_Sheet\") = 4\n    End If\n    'get PDF target folder path\n    \n     'Set the PDF target file name\n    \n    oDataMedium.FileName = sheetPath & \"\\\" & sheetName \n    'Publish document.\n    If  System.IO.File.Exists( sheetPath & \"\\\" & sheetName ) Then", "        resp = MsgBox(\"Overwrite?\" & vblf & \"Yes = Overwrite old file\" & vblf & \"No = Create New Appended File\", vbYesNo, \"PDF Rule\")\n        If resp = vbYes", "            System.IO.File.Delete( sheetPath & \"\\\" & sheetName )\n            MessageBox.Show(\"Earlier PDF deleted! \", \"Inventor\")", "        Else ", "            sheetName = sheetName + \"0\"", "            PrintSheet(sheetPath As String, sheetName As String) ", "            'Exit here to prevent it from being saved again", "            Exit Function", "        End if", " End If ", " PDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)", "End Function"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Get feature in Flat pattern by name with iLogic\n                    ", "solution": ["Dim FeatureName As String = \"", "TheSearchedFeatureName", "\" 'E.g. \"Extrusion1\"\nDim oDoc As Document = ThisApplication.ActiveDocument\nIf oDoc.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Exit Sub\nDim oSMCD As Inventor.SheetMetalComponentDefinition = oDoc.ComponentDefinition\nIf Not oSMCD.HasFlatPattern Then Exit Sub\nDim oFTS As FlatPatternFeatures = oSMCD.FlatPattern.Features\nIf oFTS.Count = 0 Then Exit Sub\nDim MyFT As PartFeature = Nothing\nFor Each oFT As PartFeature In oFTS\n    If oFT.Name = FeatureName Then\n        MyFT = oFT\n        Exit For\n    End If\nNext\nIf Not MyFT Is Nothing Then MsgBox(\"The feature (\" & FeatureName & \") exists!\")"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Inventor Fails to load properly when opened by vba\n                    ", "solution": ["oInvApp = GetObject / CreateObject / Create Instance\n\nDo Until oInvApp.Ready = True\n\u00a0 \u00a0 System.Threading.Threads.Sleep(10)\nLoop"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Textbox Prompt Emtry Formatted Text\n                    ", "solution": ["    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n        'WB added\n        Dim m_InventorApp As Inventor.Application = Nothing '= AddinGlobal.InventorApp '<- this gives me the Application \n        Try\n            m_InventorApp = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n        Catch ex As Exception\n        End Try\n\n        Dim oTitleBlockED As TitleBlock\n        oTitleBlockED = m_InventorApp.ActiveDocument.ActiveSheet.TitleBlock\n\n        Dim dctPromptedEntries As Dictionary(Of String, TextBox)\n        dctPromptedEntries = GetPrompEntries(m_InventorApp)\n\n        ' Dim strTubePattern As String = \"Triangular\"\n        Dim strTubePattern As String = \"Square\"\n        Dim strFormattedText As String\n\n        If UCase(strTubePattern) = \"TRIANGULAR\" Then\n            setTextBoxValues(dctPromptedEntries.Item(\"TRIANGULAR\"), \"TRIANGULAR\", oTitleBlockED)\n            strFormattedText = dctPromptedEntries.Item(\"SQUARE\").FormattedText\n            strFormattedText = Replace(strFormattedText, \"<Prompt\", \"<StyleOverride Strikethrough='False'><Prompt\")\n            strFormattedText = Replace(strFormattedText, \"</Prompt>\", \"</Prompt></StyleOverride>\")\n            dctPromptedEntries.Item(\"TRIANGULAR\").FormattedText = strFormattedText\n\n        ElseIf UCase(strTubePattern) = \"SQUARE\" Then\n            setTextBoxValues(dctPromptedEntries.Item(\"SQUARE\"), \"SQUARE\", oTitleBlockED)\n            strFormattedText = dctPromptedEntries.Item(\"SQUARE\").FormattedText\n            ' strFormattedText = Replace(strFormattedText, \"<Prompt\", \"<StyleOverride Strikethrough='False'><Prompt\")\n            'WB added - wanted to see the strike through in the text (worked ok)\n            strFormattedText = Replace(strFormattedText, \"<Prompt\", \"<StyleOverride Strikethrough='True'><Prompt\")\n            strFormattedText = Replace(strFormattedText, \"</Prompt>\", \"</Prompt></StyleOverride>\")\n            'WB added \n            Dim oTitleBlockDef As TitleBlockDefinition\n            oTitleBlockDef = m_InventorApp.ActiveDocument.TitleBlockDefinitions(\"Heat Exchanger\")\n            Dim oSketch As DrawingSketch = Nothing\n            'Edit the TitleBlockDefinition, passing in a DrawingSketch that will be instantiated\n            Call oTitleBlockDef.Edit(oSketch)\n\n            Dim oTextBox As TextBox\n            'WB commented\n            ' oTextBox = dctPromptedEntries.Item(\"SQUARE\")\n            'WB added for each \n            'Go through the TextBoxes in in the Sketch being edited\n            For Each oTextBox In oSketch.TextBoxes\n                'Debug.Print(oTextBox.Text)\n                If oTextBox.Text.Contains(\"SQUARE\") Then\n                    'This works without error for me (TextBox is from DrawingSketch being edited)\n                    oTextBox.FormattedText = strFormattedText\n                    Exit For\n                End If\n                'WB commented\n                'dctPromptedEntries.Item(\"SQUARE\").FormattedText = strFormattedText\n            Next oTextBox\n\n            oTitleBlockDef.ExitEdit(True)\n\n        End If\n    End Sub\n\n    Private Function GetPrompEntries(m_InventorApp As Inventor.Application) As Dictionary(Of String, TextBox)\n        Dim otextboxes As TextBoxes\n        Dim oTextBox As TextBox\n\n        Dim dctPromptEntries As New Dictionary(Of String, TextBox)\n\n        Dim oActiveDocument As DrawingDocument\n        oActiveDocument = m_InventorApp.ActiveDocument\n\n        Dim oTitleBlock As TitleBlock\n        oTitleBlock = oActiveDocument.ActiveSheet.TitleBlock\n\n        Dim strValue As String\n\n        If Not oTitleBlock Is Nothing Then\n\n            otextboxes = oTitleBlock.Definition.Sketch.TextBoxes\n\n            For Each oTextBox In otextboxes\n                strValue = Trim(oTextBox.Text)\n\n                If InStr(UCase(oTextBox.FormattedText), \"</PROMPT>\") <> 0 Then\n                    If Not dctPromptEntries.ContainsKey(strValue) Then\n                        dctPromptEntries.Add(strValue, oTextBox)\n                    End If\n                ElseIf UCase(strValue) = \"ELLIP\" Or UCase(strValue) = \"FLAT\" Or UCase(strValue) = \"DISH\" _\n                    Or UCase(strValue) = \"CONIC\" Or UCase(strValue) = \"HEMISPH\" Then\n                    If Not dctPromptEntries.ContainsKey(strValue) Then\n                        dctPromptEntries.Add(strValue, oTextBox)\n                    End If\n                End If\n            Next\n        End If\n\n        Return dctPromptEntries\n    End Function\n\n\n    Public Sub setTextBoxValues(ByVal oTextbox As TextBox, strValue As String, oTitleBlockED As TitleBlock)\n        oTitleBlockED.SetPromptResultText(oTextbox, strValue)\n    End Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: How to move circle to another position on sketch using VBA\n                    ", "solution": [], "author": "dean.morrison"},
{"created at": [], "solution Title": "\n                        Re: i want to delete all  Revision clouds in  idw sheet via vab\n                    ", "solution": ["Dim oDrawing As DrawingDocument\noDrawing = ThisApplication.ActiveDocument\n\nDim oSheets As Sheets\noSheets = oDrawing.Sheets\n\nFor i=1 To oSheets.Count\n\tDim oSketch As DrawingSketch\n\t\tFor Each oSketch In oSheets.Item(i).Sketches\n\t\t\tIf oSketch.Name.Contains(\"RevisionCloud\") = True Then\n\t\t\t\toSketch.Delete\n\t\t\tElse\n\t\t\tEnd If\n\t\tNext\nNext"], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: Run multiple rules and keep selection active\n                    ", "solution": ["'Start of rule", "Dim oDoc As Document = ThisApplication.ActiveDocument\nDim oSelection As SelectSet = oDoc.SelectSet\nIf oSelection Is Nothing Then Exit Sub\nDim oItems As ObjectsEnumerator = ThisApplication.TransientObjects.CreateObjectCollection\nFor Each Item As Object In oSelection\n\tIf Not TypeOf(Item) Is DrawingView Then Continue For ", "'DrawingViews only", "\n\toItems.Add(Item)\nNext\n\n\n", "' The code from your rule here", "\n\n\noDoc.SelectSet.SelectMultiple(oItems)", "'End of rule"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2014\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: retrieve/modify value of text in border\n                    ", "solution": [], "author": "^_^clovis^_^"},
{"created at": [], "solution Title": "\n                        Re: Duplicate User Content Center Library\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Transfering iProperties from drawing into model\n                    ", "solution": ["If", " ", "(", "ThisDrawing", ".", "ModelDocument", " ", "Is", " ", "Nothing", ")", " ", "Then", " ", "Return", "\n\n", "modelName", " ", "=", " ", "IO", ".", "Path", ".", "GetFileName", "(", "ThisDrawing", ".", "ModelDocument", ".", "FullFileName", ")", "\n\n", "'", "read the values from the Custom iProperties in the part file", "\n\n", "'", "and apply them to the Custom iProperties with the same name in the drawing", "\n\n", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", "=", "iProperties", ".", "Value", "(", "modelName", ", ", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", "\n\n", "iProperties", ".", "Value", "(", "\"", "Summary", "\"", ", ", "\"", "Company", "\"", ")", "=", "iProperties", ".", "Value", "(", "modelName", ", ", "\"", "Summary", "\"", ", ", "\"", "Company", "\"", ")", "\n\n", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Project", "\"", ")", "=", "iProperties", ".", "Value", "(", "modelName", ", ", "\"", "Project", "\"", ", ", "\"", "Project", "\"", ")", "\n\n", "iProperties", ".", "Value", "(", "\"", "Summary", "\"", ", ", "\"", "Title", "\"", ")", "=", "iProperties", ".", "Value", "(", "modelName", ", ", "\"", "Summary", "\"", ", ", "\"", "Title", "\"", ")", "\n\n", "'", " Set a reference to the drawing document.", "'", " This assumes a drawing document is active.", "\n", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "'", " Set a reference to the active sheet.", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", "\n\n", "'", "Get the name Of the first model in the drawing", "\n", "modelName", " ", "=", " ", "IO", ".", "Path", ".", "GetFileName", "(", "ThisDrawing", ".", "ModelDocument", ".", "FullFileName", ")", "\n\n", "iProperties", ".", "Value", "(", "modelName", ", ", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", "=", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", "\n\n", "iProperties", ".", "Value", "(", "modelName", ", ", "\"", "Summary", "\"", ", ", "\"", "Company", "\"", ")", "=", "iProperties", ".", "Value", "(", "\"", "Summary", "\"", ", ", "\"", "Company", "\"", ")", "\n\n", "iProperties", ".", "Value", "(", "modelName", ", ", "\"", "Project", "\"", ", ", "\"", "Project", "\"", ")", "=", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Project", "\"", ")", "\n\n", "iProperties", ".", "Value", "(", "modelName", ", ", "\"", "Summary", "\"", ", ", "\"", "Title", "\"", ")", "=", "iProperties", ".", "Value", "(", "\"", "Summary", "\"", ", ", "\"", "Title", "\"", ")", "\n\n", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True"], "author": "Jesper_S"},
{"created at": [], "solution Title": "\n                        Re: Exception from HRESULT: 0x80070057 (E_INVALIDARG)\n                    ", "solution": ["Dim oModel As Document = oView.ReferencedDocumentDescriptor.ReferencedDocument\nDim oPropsets As PropertySets = oModel.PropertySets\nDim oPropSetA As PropertySet = oPropsets.Item(\"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\") 'Project\nDim oPropSetB As PropertySet = oPropsets.Item(\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\") 'User\nDim iA As String = oPropSetA.Item(\"Part Number\").Expression\nDim iB As String = oPropSetB.Item(\"TEKST PLAAT\").Expression\nDim iC As String = oPropSetB.Item(\"DIKTE\").Expression\nDim iD As String = oPropSetB.Item(\"MATERIAL\").Expression\nDim iE As String = oPropSetB.Item(\"PartQty\").Expression\nMsgBox(iA & vbnewline & iB & vbnewline & iC & vbnewline & iD & vbnewline & iE)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic to Add Component to Assembly Based on Custom iProp\n                    ", "solution": ["Sub Main()\n     Dim oDoc As Document = ThisApplication.ActiveDocument\n     If oDoc.DocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then Exit Sub\n     NewAsm = ThisApplication.Documents.Open(\"", "TemplatePath", "\", False)\n     SetUpMatrix()\n     SearchAssy(oDoc)", "     NewAsm.SaveAs(\"", "NewAssyLocation", "\", False)", "     NewAsm.Close()\nEnd Sub\n\nPrivate NewAsm As Document\nPrivate oMatrix As Matrix\n\nPrivate Sub SearchAssy(oDoc As AssemblyDocument)\n     Dim oOcs As ComponentOccurrences = oDoc.ComponentDefinition.Occurrences\n     If oOcs.Count = 0 Then Exit Sub\n     For Each oOcc As ComponentOccurrence In oOcs", "          If CheckiPro(oOcc) Then AddDoc(oOcc.Definition.Document)\n          If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n               SearchAssy(oOcc.Definition.Document)\n          End If\n     Next\nEnd Sub\n\nPrivate Function CheckiPro(oOcc As ComponentOccurrence) As Boolean\n     Dim R As Boolean = False\n     Try\n          Dim oCNC As String = oOcc.Definition.Document.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"CNC\").Expression\n          If oCNC = \"CNC\" Then R = True\n     Catch\n     End Try\n     Return R\nEnd Function\n\nPrivate Sub SetUpMatrix()\n     Dim oTG As TransientGeometry = ThisApplication.TransientGeometry\n     oMatrix = oTG.CreateMatrix\n     Call oMatrix.SetToRotation(3.14159265358979 / 4, oTG.CreateVector(0, 0, 1), oTG.CreatePoint(0, 0, 0))\n     Call oMatrix.SetTranslation(oTG.CreateVector(1, 2, 1), True)\nEnd Sub\n\nPrivate Sub AddDoc(oDoc As Document)\n     Dim FName As String = oDoc.FullFileName\n     NewAsm.ComponentDefinition.Occurrences.Add(FName, oMatrix)\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Close invisible drawing\n                    ", "solution": [], "author": "valeriopittavin"},
{"created at": [], "solution Title": "\n                        Re: Graphical line missing in drawing\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Part Quantities Per Assembly\n                    ", "solution": ["Private oLogStr As String\n\nSub Main()\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oACD As AssemblyComponentDefinition\n    Set oACD = oDoc.ComponentDefinition\n    \n    Dim oBOM As BOM\n    Set oBOM = oACD.BOM\n    \n    Dim oPartsBOM As BOMView\n    Dim oStructBOM As BOMView\n    \n    With oBOM\n        .StructuredViewEnabled = True\n        .StructuredViewFirstLevelOnly = False\n        .StructuredViewDelimiter = \".\"\n        Set oStructBOM = .BOMViews(\"Structured\")\n    End With\n    \n    Call PurgeNewiProps(oDoc)\n    Call AddAncestryViaStruct(oDoc, oStructBOM)\n    Call AddTotalQTY(oDoc)\n\n    MsgBox (\"Rule complete!\" & vbLf & vbLf & \"Custom Properties Used: _AncestryStr & _TotalQTY\" & vbLf & vbLf & \"Files with issues: \" & vbLf & oLogStr)\n    \nEnd Sub\n\nSub PurgeNewiProps(oDoc)\n    For Each oSubDoc In oDoc.AllReferencedDocuments\n        If oSubDoc.IsModifiable = True Then\n            On Error Resume Next\n                oSubDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"_AncestryStr\").Value = \"\"\n                oSubDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"_TotalQTY\").Value = \"\"\n        End If\n    Next\nEnd Sub\n\nSub AddAncestryViaStruct(oGADoc As Document, oStructBOM As BOMView)\n    Dim oRow As BOMRow\n    For Each oRow In oStructBOM.BOMRows\n        Call AddAncestryToRow(oRow, oGADoc.PropertySets(\"Design Tracking Properties\")(\"Part Number\").Value, \"1\")\n    Next\nEnd Sub\n\nSub AddAncestryToChildren(oRow As BOMRow, oParentQTY As String)\n    If oRow.ComponentDefinitions.Item(1).Type = ObjectTypeEnum.kVirtualComponentDefinitionObject Then\n        Exit Sub\n    End If\n   \n    Dim oPN As String\n    oPN = oRow.ComponentDefinitions.Item(1).Document.PropertySets(\"Design Tracking Properties\")(\"Part Number\").Value\n    \n    Dim oPQTY As String\n    oPQTY = oRow.TotalQuantity * CInt(oParentQTY)\n    \n    Dim oCRow As BOMRow\n    For Each oCRow In oRow.ChildRows\n        If oCRow.ComponentDefinitions.Item(1).Type <> ObjectTypeEnum.kVirtualComponentDefinitionObject Then\n            Call AddAncestryToRow(oCRow, oPN, oPQTY)\n        End If\n    Next\nEnd Sub\n\nSub AddAncestryToRow(oCRow As BOMRow, oPN As String, oParentQTY As String)\n    Dim oAncestryString As String\n    Dim oSubDoc As Document\n    Dim oQTY As String", "    Dim oiQTY As Integer\n    \n    Set oSubDoc = oCRow.ComponentDefinitions(1).Document\n    If oSubDoc.IsModifiable = True Then\n        On Error Resume Next\n            oAncestryString = oSubDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"_AncestryStr\").Value\n        If Err.Number <> 0 Then\n            Call oSubDoc.PropertySets(\"Inventor User Defined Properties\").Add(\"\", \"_AncestryStr\")\n            oAncestryString = \"\"\n        End If\n        \n        oQTY = oCRow.TotalQuantity", "        On Error Resume Next", "            oiQTY = CINT(oQTY)", "            ", "            If Err.Number <> 0 Then", "                  MsgBox(\"Error: A BOM row uses length or a parameter rather than an integer quantity. This rule is not cut out for that.\" & vblf & vblf & _", "                         \"Please revise Base QTY of that part then re-run this rule.\")\n            End if", "        On Error GoTo 0", "\n        For j = 1 To oParentQTY\n            oAncestryString = AppendAncestryString(oAncestryString, oPN, oQTY)\n        Next\n        \n        oSubDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"_AncestryStr\").Value = oAncestryString\n     Else\n         oLogStr = oLogStr & vbLf & \"NO ANCESTRY ADDED FOR: \" & oSubDoc.PropertySets(\"Design Tracking Properties\")(\"Part Number\").Value\n     End If\n\n    If Not oCRow.ChildRows Is Nothing Then\n        Call AddAncestryToChildren(oCRow, oParentQTY)\n    End If\nEnd Sub\n\nFunction AppendAncestryString(oAncestryString As String, oPN As String, oQTY As String) As String\n      pos = InStr(oAncestryString, oPN)\n      If pos = 0 Then\n          If Len(oAncestryString) = 0 Then\n               oAncestryString = oPN & \"(\" & oQTY & \")\"\n          Else\n               oAncestryString = oAncestryString & \", \" & oPN & \"(\" & oQTY & \")\"\n          End If\n      Else\n      \n            openpos = InStr(pos, oAncestryString, \"(\")\n            closepos = InStr(openpos, oAncestryString, \")\")\n            xpos = InStr(openpos, oAncestryString, \"x\", vbTextCompare)\n\n            If xpos = 0 Or xpos > closepos Or xpos < openpos Then\n                oAncestryString = Left(oAncestryString, openpos) & \"2 X \" & Right(oAncestryString, Len(oAncestryString) - openpos)\n            Else\n                oOldQTYx = Trim(Mid(oAncestryString, openpos + 1, xpos - 1 - openpos))\n                oNewQTYX = CInt(oOldQTYx) + 1\n                oAncestryString = Left(oAncestryString, openpos) & oNewQTYX & Right(oAncestryString, Len(oAncestryString) - xpos + 2)\n            End If\n      End If\n      \n      AppendAncestryString = oAncestryString\nEnd Function\n\nSub AddTotalQTY(oDoc)\n    Dim oSubDoc As Document\n    For Each oSubDoc In oDoc.AllReferencedDocuments\n        If oSubDoc.IsModifiable = True Then\n        \n            oTotalQTY = GetTotalFromAncestry(oSubDoc.PropertySets(\"Inventor User Defined Properties\")(\"_AncestryStr\").Value)\n                  \n            On Error Resume Next\n                oSubDoc.PropertySets(\"Inventor User Defined Properties\").Item(\"_TotalQTY\").Value = oTotalQTY\n            If Err.Number <> 0 Then\n                Call oSubDoc.PropertySets(\"Inventor User Defined Properties\").Add(oTotalQTY, \"_TotalQTY\")\n            End If\n        Else\n            oLogStr = oLogStr & vbLf & \"NO QTY ADDED: \" & oSubDoc.PropertySets(\"Design Tracking Properties\")(\"Part Number\").Value\n        End If\n    Next\nEnd Sub\n\nFunction GetTotalFromAncestry(oStr As String) As Integer\n    Dim openpos As Integer\n    openpos = 1\n    \n    Dim multiplier As Integer\n    Dim qty As Integer\n    Dim runningtotal As Integer\n    \n    Do Until oStr = \"\"\n        openpos = InStr(1, oStr, \"(\")\n        closepos = InStr(openpos, oStr, \")\")\n        xpos = InStr(openpos, oStr, \"x\", vbTextCompare)\n        \n        If xpos = 0 Or xpos > closepos Or xpos < openpos Then\n            thistotal = Trim(Mid(oStr, openpos + 1, closepos - openpos - 1))\n        Else\n            multiplier = Trim(Mid(oStr, openpos + 1, xpos - 1 - openpos))\n            qty = Trim(Mid(oStr, xpos + 1, closepos - 1 - xpos))\n            thistotal = multiplier * qty\n            \n        End If\n        runningtotal = runningtotal + thistotal\n        oStr = Right(oStr, Len(oStr) - closepos)\n    Loop\n    GetTotalFromAncestry = runningtotal\nEnd Function"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to use AppFileExportPDFCmd from the command manager?\n                    ", "solution": ["Dim oDoc As DrawingDocument = ThisApplication.ActiveDocument\nDim sFName As String = oDoc.FullFileName\nDim sNewName As String = ", "Microsoft.VisualBasic.Left(sFName, Len(sFName) - 4) & \".pdf\"", "\nDim oPDFAddIn As ApplicationAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\nDim oContext As TranslationContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\nDim oOptions As NameValueMap = ThisApplication.TransientObjects.CreateNameValueMap\nDim oDataMedium As DataMedium = ThisApplication.TransientObjects.CreateDataMedium\noDataMedium.FileName = sNewName\nTry\n     oPDFAddIn.SaveCopyAs(oDoc, oContext, oOptions, oDataMedium)\nCatch\n     MsgBox(\"Can't save the PDF!\", \"Error\")\nEnd Try"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic Save Copy As dxf flat pattern from idw\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument ", "'Get active document", "\nIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub ", "'Drawings only", "\nFor Each oModel As Document In oDoc.ReferencedDocuments ", "'Loop through all referenced documents", "     ", "'Sheet metal parts only", "\n     If oModel.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Continue For\n     Dim oSMCD As SheetMetalComponentDefinition = oModel.ComponentDefinition\n     If Not oSMCD.HasFlatPattern Then ", "'If it doesn't have a flat patter, create one (unfold the model)", "\n          oSMCD.Unfold()\n          oSMCD.FlatPattern.ExitEdit()\n     End If\n     Dim FName As String = oModel.FullFileName ", "'Get the document's path and name", "\n     FName = Microsoft.VisualBasic.Left(FName, Len(FName) - 4) & \".dxf\"\n     Dim sOut As String = \"FLAT PATTERN DXF?AcadVersion=R12\" ", "'Export settings", "\n     Try\n          oSMCD.DataIO.WriteDataToFile(sOut, FName) ", "'Export", "\n     Catch\n     End Try\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Need som starting guideance to offset page numbering on IDW sheets\n                    ", "solution": [], "author": "fce"},
{"created at": [], "solution Title": "\n                        Re: Sketch Naming (very large skeleton modelling)- Customizable Naming Structure\n                    ", "solution": [" 'Set a reference to the part component definition.\noDoc = ThisApplication.ActiveDocument\nDim oDef As PartComponentDefinition\noDef = oDoc.ComponentDefinition\n\n'Create a variable to each type of Part feature\nDim oExtrude As ExtrudeFeature\nDim oSketch As PlanarSketch\nDim oWorkPlane As WorkPlane\n\n'Rename Extrudes\nDim ExtrudeCount As Integer = -8\nFor Each oExtrude In oDef.Features.ExtrudeFeatures\n\tExtrudeCount = ExtrudeCount + 8\n\toExtrude.Name = \"X\" & ExtrudeCount.ToString(\"0000\")\nNext\n\n'Rename Sketches\nDim SketchCount As Integer = -8\nFor Each oSketch In oDef.Sketches\n\tSketchCount = SketchCount + 8\n\toSketch.Name = \"SK\" & SketchCount.ToString(\"0000\")\nNext\n\n'Rename Work Planes\nDim WorkPlaneCount As Integer = -8\nFor Each oWorkPlane In oDef.WorkPlanes\n\tIf Not oWorkPlane.Name = \"YZ Plane\" And Not oWorkPlane.Name = \"XZ Plane\" And Not oWorkPlane.Name = \"XY Plane\" Then\n\t\tWorkPlaneCount = WorkPlaneCount + 8\n\t\toWorkPlane.Name = \"WP\" & WorkPlaneCount.ToString(\"0000\")\n\tEnd If\nNext"], "author": "DRoam"},
{"created at": [], "solution Title": "\n                        Re: Edit - Change Prompted Entry using VB.Net\n                    ", "solution": ["        'Project Block Prompted Entries\n        Dim oSymbolDef As SketchedSymbolDefinition\n        oSymbolDef = oDoc.SketchedSymbolDefinitions.Item(\"Project Block\")\n\n        For Each ", "oSketchedSymbol", " In ", "oDoc.ActveSheet.SketchedSymbols", "\n\n            If ", "oSketchedSymbol", ".Name = \"Project Block\" Then\n                Dim oTB As TextBox\n                For Each oTB In ", "oSymbolDef", ".Sketch.TextBoxes\n                    If oTB.Text = \"<PROJECT TITLE>\" Then\n                        MsgBox(\"Works to this point\")\n                        ", "oSketchedSymbol", ".SetPromptResultText(oTB, \"My Project Title\")\n                    End If\n                Next\n\n            End If\n        Next"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: coincident sketch constraint\n                    ", "solution": ["Call oSectionLine.StartSketchPoint.Merge(oSectionLine2.StartSketchPoint)"], "author": "dg2405"},
{"created at": [], "solution Title": "\n                        Re: Create flat pattern - assembly context\n                    ", "solution": ["'Create flat Pattern\n\nDim openDoc As Document\nopenDoc = ThisApplication.activedocument\nDim docFile As Document\n'Is a Assembly?\nIf openDoc.DocumentType = 12291 Then\n\n\tFor Each docFile In openDoc.AllReferencedDocuments\n\t\t'Is a Sheet Metal File?\n\t\tIf docFile.SubType.Equals _\n\t\t(\"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\") Then\n\t\t\t'if yes, have flat pattern?\n\t\t\tDim smComp As SheetMetalComponentDefinition \n\t\t\tsmComp = docFile.ComponentDefinition\n\t\n\t\t\t'If Not, create it!!\n\t\t\tIf smComp.HasFlatPattern = False Then\n\t\t\t\t\tsmComp.Unfold()\n\t\t\t\t\tsmComp.FlatPattern.ExitEdit()\n\t\t\t\t\tdocFile.Save ()   \n\t\t\t\t\tdocFile.Close\n\t\t\tEnd If\n\t\tEnd If\n\tNext\nEnd If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Set lists not updating in a form until you close the form and go back into i\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: AssemblyOptions EnableAssemblyExpress not accepting False in iLogic\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Add Custom Properties Sheet metal extends - Assembly contex\n                    ", "solution": ["Dim", " ", "openDoc", " ", "As", " ", "Document", "\n", "openDoc", " ", "=", " ", "ThisApplication", ".", "activedocument", "\n", "Dim", " ", "docFile", " ", "As", " ", "Document", "\n", "'", "Is Assembly?", "\n", "If", " ", "openDoc", ".", "DocumentType", " ", "=", " ", "12291", " ", "Then", "\n\n    ", "For", " ", "Each", " ", "docFile", " ", "In", " ", "openDoc", ".", "AllReferencedDocuments", "\n        ", "'", "Is Sheet Metal File? (assuming it has FP already)", "\n        ", "If", " ", "docFile", ".", "SubType", ".", "Equals", "(", "\"", "{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}", "\"", ")", " ", "Then", "\n    \n                ", "'", "if yes, Assuming it has a Flat Pattern deffined", "\n            ", "Dim", " ", "smComp", " ", "As", " ", "SheetMetalComponentDefinition", " \n            ", "smComp", " ", "=", " ", "docFile", ".", "ComponentDefinition", "\n            \n            ", "If", " ", "smComp", ".", "HasFlatPattern", " ", "=", " ", "True", " ", "Then", "\n                    \n                    ", "'", "CREATE With and Length as user properties (NOT WORKING)", "\n                        ", "Dim", " ", "Prop_Length", " ", "As", " ", "String", "\n                        ", "Dim", " ", "Prop_With", " ", "As", " ", "String", "\n                        ", "   'ThisDoc.Document is accessing the active assembly document rather than iterating through docFile with you.", "   'The fix: replace ", "ThisDoc.Document", " in this case with ", "docFile", "\n                        ", "oCustomPropertySet", " ", "=", " ", "ThisDoc.Document", ".", "PropertySets", ".", "Item", " ", "_", "\n                    ", "(", "\"", "Inventor User Defined Properties", "\"", ")", "\n                        \n                        ", "oCustomPropertySet", ".", "Add", "(", "\"", "Custom", "\"", ", ", "Prop_Length", ")", "\n                        ", "oCustomPropertySet", ".", "Add", "(", "\"", "Custom", "\"", ", ", "Prop_With", ")", "\n           ", "' oCustomPropertySet is already a fully defined object (as you have worked your way down to it with the previous call we fixed.", "'The fix: just delete docFile. from this line.                 \n                    ", "'", "Adds Flat Pattern extends (Length and With) as a custom propertie (ready to use in a Part List Column) (NOT WORKING)", "\n                        ", "docFile.", "oCustomPropertySet", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", ".", "Item", "(", "\"", "Custom", "\"", ", ", "\"", "Length", "\"", ")", ".", "Value", " ", "=", " ", "\"", "=<Sheet Metal Length>", "\"", "\n                        ", "docFile.", "oCustomPropertySet", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", ".", "Item", "(", "\"", "Custom", "\"", ", ", "\"", "Width", "\"", ")", ".", "Value", " ", "=", " ", "\"", "=<Sheet Metal Width>", "\"", "\n                    ", "'", "THIS LINE IS TO ABLE THE Thickness PARAMETER TO GET READY TO EXPORT IN EACH SHEET METAL PART    (WORKING)            ", "\n                        ", "docFile", ".", "ComponentDefinition", ".", "Parameters", "(", "\"", "Thickness", "\"", ")", ".", "ExposedAsProperty", " ", "=", " ", "True", " \n                    \n            ", "Else", "    \n                ", "MessageBox", ".", "Show", "(", "\"", "No Flat Pattern Info ", "\"", ", ", "\"", "INFO!", "\"", ",", "MessageBoxButtons", ".", "OK", ",", "MessageBoxIcon", ".", "Exclamation", ")", "        \n            ", "End", " ", "If", "    \n        ", "Else", "\n            ", "MessageBox", ".", "Show", "(", "\"", "Not a SM Part", "\"", ", ", "\"", "INFO!", "\"", ",", "MessageBoxButtons", ".", "OK", ",", "MessageBoxIcon", ".", "Exclamation", ")", "\n        ", "End", " ", "If", "\n    ", "Next", "\n\n", "Else", "\n", "MessageBox", ".", "Show", "(", "\"", "This is not an Assembly", "\"", ", ", "\"", "File Type Mismatch!", "\"", ",", "MessageBoxButtons", ".", "OK", ",", "MessageBoxIcon", ".", "Exclamation", ")", "\n", "End", " ", "If"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Check if a custom Propertie exist before Add\n                    ", "solution": ["    On Error Resume Next\n oCustomPropertySet.Item( \"Comprimento\").Value = \"=<Sheet Metal Length>\"\n    If Err.Number <> 0 Then\n        ' Failed to get the property, which means it doesn't exist\n        ' so we'll create it.\n        oCustomPropertySet.Add( \"Comprimento\").Value = \"=<Sheet Metal Length>\"\n    End If"], "author": "asiteur"},
{"created at": [], "solution Title": "\n                        Re: iLogic create dimension in drawing\n                    ", "solution": ["Sub", " ", "AddLinearDimension", "()", "\n                    \n        ", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", " ", "=", " ", "ThisDoc", ".", "Document", ".", "ActiveSheet", "\n        ", "Dim", " ", "oView", " ", "As", " ", "DrawingView", " ", "=", " ", "ActiveSheet", ".", "View", "(", "\"", "Test", "\"", ")", ".", "View", "\n        ", "Dim", " ", "oDoc", " ", "As", " ", "Document", " ", "=", " ", "oView", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", "\n        \n        \n        ", "Dim", " ", "oGeomIntent1", " ", "As", " ", "Inventor", ".", "GeometryIntent", "\n        ", "Dim", " ", "oGeomIntent2", " ", "As", " ", "Inventor", ".", "GeometryIntent", "\n\n        ", "Dim", " ", "oWP1", " ", "As", " ", "Inventor", ".", "WorkPoint", " ", "=", " ", "oDoc", ".", "ComponentDefinition", ".", "WorkPoints", ".", "Item", "(", "\"", "WP_1", "\"", ")", "\n        ", "Dim", " ", "oWP2", " ", "As", " ", "Inventor", ".", "WorkPoint", " ", "=", " ", "oDoc", ".", "ComponentDefinition", ".", "WorkPoints", ".", "Item", "(", "\"", "WP_2", "\"", ")", "\n        \n        ", "oView", ".", "SetIncludeStatus", "(", "oWP1", ", ", "True", ")", "\n        ", "oView", ".", "SetIncludeStatus", "(", "oWP2", ", ", "True", ")", "\n\n        ", "Dim", " ", "oCenterMark1", " ", "As", " ", "Inventor", ".", "Centermark", "\n        ", "Dim", " ", "oCenterMark2", " ", "As", " ", "Inventor", ".", "Centermark", "\n        ", "Dim", " ", "oCenterMark", " ", "As", " ", "Inventor", ".", "Centermark", "\n\n        ", "For", " ", "Each", " ", "oCenterMark", " ", "In", " ", "oSheet", ".", "Centermarks", "\n\n            ", "If", " ", "oCenterMark", ".", "Attached", " ", "Then", "\n                ", "If", " ", "oCenterMark", ".", "AttachedEntity", " ", "Is", " ", "oWP1", " ", "Then", "\n                \n                    ", "oCenterMark1", " ", "=", " ", "oCenterMark", "\n                ", "End", " ", "If", "\n                ", "If", " ", "oCenterMark", ".", "AttachedEntity", " ", "Is", " ", "oWP2", " ", "Then", "\n                    ", "oCenterMark2", " ", "=", " ", "oCenterMark", "\n                    \n                ", "End", " ", "If", "\n            ", "End", " ", "If", "\n        ", "Next", "\n        \n\n        ", "oGeomIntent1", " ", "=", " ", "oSheet", ".", "CreateGeometryIntent", "(", "oCenterMark1", ", ", "kPoint2dIntent", ")", "\n        ", "oGeomIntent2", " ", "=", " ", "oSheet", ".", "CreateGeometryIntent", "(", "oCenterMark2", ", ", "kPoint2dIntent", ")", "\n        \n\n        ", "oCenterMark1", ".", "Visible", " ", "=", " ", "False", "\n        ", "oCenterMark2", ".", "Visible", " ", "=", " ", "False", "\n\n\n        \n        ", "Dim", " ", "textPoint", " ", "As", " ", "Inventor", ".", "Point2d", " ", "=", " ", "ThisServer", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "100", ",", "100", ")", "\n        ", "Dim", " ", "oDim", " ", "as", " ", "GeneralDimension", " ", "=", " ", "oSheet", ".", "DrawingDimensions", ".", "GeneralDimensions", ".", "AddLinear", "(", "textPoint", ", ", "oGeomIntent1", ", ", "oGeomIntent2", ", ", "DimensionTypeEnum", ".", "kVerticalDimensionType", ")", "\n\n    ", "End Sub"], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: What controls which screen a form will pop up on?\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Vbnet addin custom prop\n                    ", "solution": [], "author": "JoAntt"},
{"created at": [], "solution Title": "\n                        Re: DoBoolean fails on 300+ in a for loop\n                    ", "solution": ["Sub main()\n    Dim oPart As PartDocument\n    Set oPart = ThisApplication.ActiveDocument\n  \n    Dim BaseBody As SurfaceBody\n    Set BaseBody = oPart.ComponentDefinition.SurfaceBodies.Item(1)\n  \n    Dim oTransientBRep As TransientBRep\n    Set oTransientBRep = ThisApplication.TransientBRep\n  \n    Dim oBody1 As SurfaceBody\n    Set oBody1 = oTransientBRep.Copy(BaseBody)\n  \n    Dim oPos As Matrix\n    Set oPos = ThisApplication.TransientGeometry.CreateMatrix\n    'Call oPos.SetTranslation(ThisApplication.TransientGeometry.CreateVector(0, 0, 0))\n    \n    Dim n As Double\n    n = 900\n  \n    Dim nsub As Double\n    nsub = 250\n  \n    Dim nBodies As Double\n    nBodies = -Int(-n / nsub)\n  \n    Dim bodyCollection As ObjectCollection\n    Set bodyCollection = ThisApplication.TransientObjects.CreateObjectCollection\n  \n    For i = 1 To nBodies\n        Dim oBody As SurfaceBody\n        Set oBody = oTransientBRep.Copy(BaseBody)\n        Call bodyCollection.Add(oBody)\n    Next\n    \n    Dim oStep As Double\n    oStep = 0#\n    Dim oAngle As Double\n    oAngle = 0#\n    \n    For i = 1 To nBodies - 1\n        For ii = 1 To nsub\n            Dim oBody2 As SurfaceBody\n            Set oBody2 = oTransientBRep.Copy(BaseBody)\n  \n            oStep = oStep + 0.01\n            oAngle = oAngle + 2 * 3.14159 / 3600\n    \n            Call oPos.SetToRotation(oAngle, ThisApplication.TransientGeometry.CreateVector(0, 0, 1), ThisApplication.TransientGeometry.CreatePoint(2.5, 0, 0))\n            Call oPos.SetTranslation(ThisApplication.TransientGeometry.CreateVector(0, oStep, 0))\n            Call oTransientBRep.Transform(oBody2, oPos)\n            Call oTransientBRep.DoBoolean(bodyCollection.Item(i), oBody2, kBooleanTypeUnion)\n        Next\n        'Call oPart.ComponentDefinition.Features.NonParametricBaseFeatures.Add(bodyCollection.Item(i))\n    Next\n  \n    If n / nsub < nBodies Then\n        For i = 1 To n - (nBodies - 1) * nsub\n            Dim oBody3 As SurfaceBody\n            Set oBody3 = oTransientBRep.Copy(BaseBody)\n  \n            oStep = oStep + 0.01\n            oAngle = oAngle + 2 * 3.14159 / 3600\n    \n            Call oPos.SetToRotation(oAngle, ThisApplication.TransientGeometry.CreateVector(0, 0, 1), ThisApplication.TransientGeometry.CreatePoint(2.5, 0, 0))\n            Call oPos.SetTranslation(ThisApplication.TransientGeometry.CreateVector(0, oStep, 0))\n            Call oTransientBRep.Transform(oBody3, oPos)\n            Call oTransientBRep.DoBoolean(bodyCollection.Item(nBodies), oBody3, kBooleanTypeUnion)\n        Next\n    'Call oPart.ComponentDefinition.Features.NonParametricBaseFeatures.Add(bodyCollection.Item(nBodies))\n    End If\n  \n    For i = 2 To nBodies\n        Call oTransientBRep.DoBoolean(bodyCollection.Item(1), bodyCollection.Item(i), kBooleanTypeUnion)\n    Next\n  \n    Call oPart.ComponentDefinition.Features.NonParametricBaseFeatures.Add(bodyCollection.Item(1))\nEnd Sub"], "author": "elmar.stoeger"},
{"created at": [], "solution Title": "\n                        Re: VBA code to select an assembly occurrence by its occurence name\n                    ", "solution": [], "author": "shastu"},
{"created at": [], "solution Title": "\n                        Re: Missing Microsoft Office 15.0 Object Library\n                    ", "solution": [], "author": "rcolon9E4ZX"},
{"created at": [], "solution Title": "\n                        Re: VBA make simple part completely from VBA.\n                    ", "solution": [], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: Extruding sketch\n                    ", "solution": ["Public Sub DrawBlockWithPocket()\n    ", "' Create a new part document, using the default part template.", "\n    Dim oPartDoc As PartDocument\n    Set oPartDoc = ThisApplication.Documents.Add(kPartDocumentObject, _\n                ThisApplication.FileManager.GetTemplateFile(kPartDocumentObject))\n                    \n    ", "' Set a reference to the component definition.", "\n    Dim oCompDef As PartComponentDefinition\n    Set oCompDef = oPartDoc.ComponentDefinition\n    \n    ", "' Create a new sketch on the X-Y work plane.  Since it's being created on", "\n    ", "' one of the base workplanes we know the orientation it will be created in", "\n    ", "' and don't need to worry about controlling it.  Because of this we also", "\n    ", "' know the origin of the sketch plane will be at (0,0,0) in model space.", "\n    Dim oSketch As PlanarSketch\n    Set oSketch = oCompDef.Sketches.Add(oCompDef.WorkPlanes(3))\n    \n    ", "' Set a reference to the transient geometry object.", "\n    Dim oTransGeom As TransientGeometry\n    Set oTransGeom = ThisApplication.TransientGeometry\n    \n    ", "' Draw a 4cm x 3cm rectangle with the corner at (0,0)", "\n    Dim oRectangleLines As SketchEntitiesEnumerator\n    Set oRectangleLines = oSketch.SketchLines.AddAsTwoPointRectangle( _\n                                oTransGeom.CreatePoint2d(0, 0), _\n                                oTransGeom.CreatePoint2d(4, 3))\n\n    ", "' Create a profile.", "\n    Dim oProfile As Profile\n    Set oProfile = oSketch.Profiles.AddForSolid\n    \n    ", "' Create a base extrusion 1cm thick.", "\n    Dim oExtrudeDef As ExtrudeDefinition\n    Set oExtrudeDef = oCompDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, kJoinOperation)\n    Call oExtrudeDef.SetDistanceExtent(1, kNegativeExtentDirection)\n    Dim oExtrude As ExtrudeFeature\n    Set oExtrude = oCompDef.Features.ExtrudeFeatures.Add(oExtrudeDef)\n                        \n    ", "' Get the top face of the extrusion to use for creating the new sketch.", "\n    Dim oFrontFace As Face\n    Set oFrontFace = oExtrude.StartFaces.Item(1)\n    \n    ", "' Create a new sketch on this face, but use the method that allows you to", "\n    ", "' control the orientation and orgin of the new sketch.", "\n    Set oSketch = oCompDef.Sketches.AddWithOrientation(oFrontFace, _\n                    oCompDef.WorkAxes.Item(1), True, True, oCompDef.WorkPoints(1))\n                    \n    ", "' Determine where in sketch space the point (0.5,0.5,0) is.", "\n    Dim oCorner As Point2d\n    Set oCorner = oSketch.ModelToSketchSpace(oTransGeom.CreatePoint(0.5, 0.5, 0))\n   \n    ", "' Create the interior 3cm x 2cm rectangle for the pocket.", "\n    Set oRectangleLines = oSketch.SketchLines.AddAsTwoPointRectangle( _\n                oCorner, oTransGeom.CreatePoint2d(oCorner.X + 3, oCorner.Y + 2))\n                \n    ", "' Create a profile.", "\n    Set oProfile = oSketch.Profiles.AddForSolid\n    \n    ", "' Create a pocket .25 cm deep.", "\n    Set oExtrudeDef = oCompDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, kCutOperation)\n    Call oExtrudeDef.SetDistanceExtent(0.25, kNegativeExtentDirection)\n    Set oExtrude = oCompDef.Features.ExtrudeFeatures.Add(oExtrudeDef)\nEnd Sub"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Replaceing a Derived assy in a part file\n                    ", "solution": ["Dim Position As Integer = 1\nDim NewFile As String = \"New File Path\"\nDim oFD As Inventor.FileDescriptor = oDoc.File.ReferencedFileDescriptors(Position)\noFD.ReplaceReference(NewFile)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic to Call Up a List of Values for a Sketch Symbol Text Field\n                    ", "solution": ["'define the drawing\nDim oDoc As DrawingDocument\n  oDoc = ThisApplication.ActiveDocument\n  \nDim oSheet As Sheet\n  oSheet = oDoc.ActiveSheet\n  \nDim oSymbols As SketchedSymbols\n  oSymbols = oSheet.SketchedSymbols\n  \nDim oValueList As New ArrayList\n\toValueList.add(\"Monday\")\n\toValueList.add(\"Tuesday\")\n\toValueList.add(\"Wednesday\")\n\toValueList.add(\"Thursday\")\n\toValueList.add(\"Friday\")\n\toValueList.add(\"Saturday\")\n\toValueList.add(\"Sunday\")\n\t\nDim oValue As String\n\t'get user input\n\toValue = InputListBox(\"Select one.\", _\n\toValueList, \"Monday\", \"iLogic\", \"Avalaible selections\")\n\n\n'find the symbol that contains the\n'specified prompt\nDim oSymbol As SketchedSymbol\nFor Each oSymbol In oSymbols\n\toTextBoxes = oSymbol.Definition.Sketch.TextBoxes\n\tFor Each oTextBox In oSymbol.Definition.Sketch.TextBoxes\n        If oTextBox.Text = \"<Symbol Prompt 001>\" Then  \n\t\t\t'set the prompted entry value\n\t\t\tCall oSymbol.SetPromptResultText(oTextBox, oValue)                    \n        End If\n    Next\nNext\n\n", "Dim oSSet As SelectSet = ThisDoc.Document.SelectSet\nIf oSSet.count = 0 Then\n    MessageBox.Show(\"Nothing Selected\", \"iLogic\")\n\tExit Sub\nElseIf oSSet.count > 1 Then\n\tMessageBox.Show(\"Can not continue, more than one object selected\", \"iLogic\")\n\tExit Sub\nEnd If\n\nDim oSymbol As SketchedSymbol\n\nTry \n\toSymbol = oSSet.item(1)\nCatch\n\tMessageBox.Show(\"Selected object is not a sketched symbol.\", \"iLogic\")\n\tExit Sub\nEnd Try\n  \nDim oValueList As New ArrayList\n\toValueList.add(\"Monday\")\n\toValueList.add(\"Tuesday\")\n\toValueList.add(\"Wednesday\")\n\toValueList.add(\"Thursday\")\n\toValueList.add(\"Friday\")\n\toValueList.add(\"Saturday\")\n\toValueList.add(\"Sunday\")\n\t\nDim oValue As String\n\t'get user input\n\toValue = InputListBox(\"Select one.\", _\n\toValueList, \"Monday\", \"iLogic\", \"Avalaible selections\")\n\n\noTextBoxes = oSymbol.Definition.Sketch.TextBoxes\nFor Each oTextBox In oSymbol.Definition.Sketch.TextBoxes\n    If oTextBox.Text = \"<Symbol Prompt 001>\" Then  \n\t\t'set the prompted entry value\n\t\tCall oSymbol.SetPromptResultText(oTextBox, oValue)                    \n    End If\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic execute rule in part from assemblie\n                    ", "solution": ["Dim", " oOccurrence ", "As", " ComponentOccurrence", "\u00a0\u00a0 \u00a0", "Dim", " oName ", "As", " ", "String", "\u00a0\u00a0 \u00a0oName = oOccurrence.Name"], "author": "fabiorcferreira"},
{"created at": [], "solution Title": "\n                        Re: Reading an Object Model\n                    ", "solution": ["Property -> PropertySet -> (PropertySets) -> Document -> (Documents) -> Application", "ThisApplication.ActiveDocument.PropertySets(\"Design Tracking Properties\").Item(\"Description\").Value", "Dim oDoc As Document\noDoc = ThisApplication.ActiveDocument\n\nDim oDTPProperties As PropertySet\noDTPProperties = oDoc.PropertySets(\"Design Tracking Properties\")\n\nDim oiPropDescription As String\noiPropDescription = oDTPProperties.Item(\"Description\").Value\n\n'To call a different design tracking property at the same time would be as easy as adding\n\nDim oiPropStockNumber As String\noiPropStockNumber  = oDTPProperties.Item(\"Stock Number\").Value", "MsgBox(oiPropDescription & vblf & oiPropStockNumber)", "MsgBox(ThisApplication.ActiveDocument.PropertySets(\"Design Tracking Properties\").Item(\"Description\").Value & vblf & _\nThisApplication.ActiveDocument.PropertySets(\"Design Tracking Properties\").Item(\"Stock Number\").Value)"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Circular pattern of parts in assembly\n                    ", "solution": ["Dim objCollection As ObjectCollection", "Set objCollection = oApp.TransientObjects.CreateObjectCollection  ", "Call", " objCollection.Add(oOcc(0))", "Call ", "objCollection.Add(oOcc(1))"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: What Inventor service pack am i running\n                    ", "solution": [], "author": "matthew.d"},
{"created at": [], "solution Title": "\n                        Re: Changing Scale In Isometric View\n                    ", "solution": ["If IsoView.ScaleFromBase = True Then\n   IsoView.ScaleFromBase = False\nEndIf\n\nIsoView.Scale = 0.5"], "author": "psaarloos"},
{"created at": [], "solution Title": "\n                        Re: Get a BOM Structure value from the file reference instead of a selection set\n                    ", "solution": ["Sub FileRefs()\n\n   Dim oAsmDoc As AssemblyDocument\n   Set oAsmDoc = ThisApplication.ActiveDocument\n    \n   Dim oAsmCompDef As AssemblyComponentDefinition\n   Set oAsmCompDef = oAsmDoc.ComponentDefinition\n\n   Dim oOcc As ComponentOccurrence\n   Dim oRefDoc As Document\n\n   For Each oRefDoc In oAsmDoc.AllReferencedDocuments\n       MsgBox oRefDoc.DisplayName\n       Set oPropSet = oRefDoc.PropertySets(\"{F29F85E0-4FF9-1068-AB91-08002B27B3D9}\")\n       Set oProp = oPropSet.Item(\"Comments\")\n       \n       If oProp.Value = \"\" Then GoTo Skip:\n\n       For Each oOcc in oAsmCompDef.Occurrences.AllReferencedOccurrences(oRefDoc)\n            If oOcc.BOMStructure = BOMStructureEnum.kReferenceBOMStructure Then\n                 MsgBox (oOcc.Name & \": Reference\")\n            Else\n                 MsgBox (oOcc.Name & \": Normal\")\n            End If\n       Next\nSkip:\n    Next\n       \nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Get name of current ilogic rule\n                    ", "solution": ["oiLogicInterfaces = addin.iLogicInterfaces", "Sub", " ", "Main", "()", "\n    ", "Dim", " ", "iLogic", " ", "As", " ", "Object", "\n    ", "iLogic", " ", "=", " ", "GetiLogicAddin", "(", "ThisApplication", ")", "\n    \n    ", "If", " ", "(", "iLogic", " ", "Is", " ", "Nothing", ")", " ", "Then", " ", "Exit Sub", "\n\n    ", "Dim", " ", "doc", " ", "As", " ", "Document", "\n    ", "doc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    \n    ", "Dim", " ", "i", " ", "As", " ", "Integer", "\n    \n    ", "'", "MsgBox(iLogic.Interfaces.iLogicRule.Name)", "\n", "End Sub", "\n\n", "Function", " ", "GetiLogicAddin", "(", "oApplication", " ", "As", " ", "Inventor", ".", "Application", ")", " ", "As", " ", "Object", "\n    ", "addIns", " ", "=", " ", "oApplication", ".", "ApplicationAddIns", "\n    ", "Dim", " ", "addIn", " ", "As", " ", "ApplicationAddIn", "\n    \n    ", "'", "On Error Goto NotFound", "\n    \n    ", "addIn", " ", "=", " ", "oApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"", "{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}", "\"", ")", "\n    \n    ", "If", " ", "(", "addIn", " ", "Is", " ", "Nothing", ")", " ", "Then", " ", "Exit Function", "\n    \n    ", "addIn", ".", "Activate", "\n    ", "MsgBox", "(", "addin", ".", "Description", ")", "\n    ", "MsgBox", "(", "addIn", ".", "Interfaces", ".", "iLogicRule", ".", "Name", ")", "\n    \n    ", "Return", " ", "addIn", "\n    ", "Exit Function", "\n    ", "NotFound", ":\n", "End Function"], "author": "jwterminator1"},
{"created at": [], "solution Title": "\n                        Re: Inventor Environments Ribbon for Frame analysis\n                    ", "solution": [], "author": "Binga"},
{"created at": [], "solution Title": "\n                        Re: VBA Place cursor away from part window\n                    ", "solution": ["Declare ", "PtrSafe", " Function SetCursorPos Lib \"user32\" _\n(ByVal x As Long, ByVal y As Long) As Long", "' Access the GetCursorPos function in user32.dll\nDeclare PtrSafe Function SetCursorPos Lib \"user32\" _\n(ByVal x As Long, ByVal y As Long) As Long\nPrivate Sub Set_Cursor_Pos()\n\n    SetCursorPos 10, 10\n\nEnd Sub"], "author": "rcolon9E4ZX"},
{"created at": [], "solution Title": "\n                        Re: Move camera to coord on drawing\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Main assembly activation via vba\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: rendering a drawing\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: iLogic -The Parameter is incorrect error\n                    ", "solution": ["For i = 220 To 230\n     If i = 230 Then Continue For\nNext", "Dim oPartFullPath As String = ThisDoc.Path\nDim oExcelFile As String = oPartFullPath & \"", "\\178150.xls", "\"\n\nGoExcel.Open(oExcelFile, \"", "Sheet1", "\")\nFor i As Integer = 3 To 6\n     Try\n          Dim oPart As String = GoExcel.CellValue(\"B\" & CStr(i)).ToString & \".ipt\"\n          Dim oTQTY As Integer = Convert.ToInt32(GoExcel.CellValue(\"A\" & CStr(i)))\n          Dim oPath As String = oPartFullPath & \"\\\" & oPart\n          Dim xDoc As Document = ThisApplication.Documents.Open(oPath, True) ", "'False = open invisible", "\n          iProperties.Value(\"Custom\", \"TQTY\") = oTQTY\n          InventorVb.DocumentUpdate()\n          xDoc.Save\n          xDoc.Close(True)\n          ", "MessageBox.Show(i, \"Number of Passes Completed\")", "\n     Catch\n     End Try\nNext\nGoExcel.Close(True)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic API Documentation\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: part size not updating when I try to change part size from idw file\n                    ", "solution": ["If DBI_TYPE = \"", "A_Inlet", "\" Then\n    ", "'...", "\nElseIf DBI_TYPE = \"", "D_Inlet", "\" Then\n    ", "'...", "\nEnd If\n\nParameter(\"", "DBI_CONCRETE.iam", "\", \"", "Box_length", "\") = Parameter(\"", "Box_Length", "\")\n", "'..."], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: open drawing, apply ilogic (print pdf) then close\n                    ", "solution": ["SheetSizeEnum = ThisApplication.ActiveEditDocument.ActiveSheet.Size \n\nIf SheetSizeEnum = 9987 Then\ndrawingsize = \"A\"\nElse If SheetSizeEnum = 9988 Then\ndrawingsize = \"B\"\nElse If SheetSizeEnum = 9989 Then\ndrawingsize = \"C\"\nElse If SheetSizeEnum = 9990 Then\ndrawingsize = \"D\"\nElse If SheetSizeEnum = 9991 Then\ndrawingsize = \"E\"\nElse If SheetSizeEnum = 9992 Then\ndrawingsize = \"F\"\nElse\ndrawingsize = \"\"\nEnd If", "Sub Main()\n\n'autoupdate plotstamp\nDim oTrans As Transaction\noTrans = ThisApplication.TransactionManager.StartTransaction( _\nThisApplication.ActiveEditDocument, \"plot date\")\n\nDim odrawdoc As DrawingDocument\nodrawdoc = ThisApplication.ActiveEditDocument\ncustomPropertySet = odrawdoc.PropertySets.Item(\"Inventor User Defined Properties\")\nTry\n      oProp = customPropertySet.Item(\"Plotdatestamp\")\nCatch\n      oProp = customPropertySet.Add(\"\", \"Plotdatestamp\")\nEnd Try\n\nDim PlotTime As String\nPlotTime = Now.ToShortTimeString\n\noProp.Value = PlotTime\n\nTry\n      oProp = customPropertySet.Item(\"Plottimestamp\")\nCatch\n      oProp = customPropertySet.Add(\"\", \"Plottimestamp\")\nEnd Try\n\nDim PlotDate As Date\nPlotDate = Now\n\noProp.Value = PlotDate\n\nodrawdoc.Update\n\n'.... rest of the code here..."], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic Code Not correct updating feature\n                    ", "solution": [], "author": "RNDinov8r"},
{"created at": [], "solution Title": "\n                        Re: Screenshot for Inventor (02/2010) - Buried in the Lab?\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Create new part in Assembly with a specifice Template using iLogic\n                    ", "solution": [], "author": "robert.vdrijst"},
{"created at": [], "solution Title": "\n                        Re: Error by placing partlist on drawing\n                    ", "solution": [], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: Unique view names?\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Ilogic request - iproperty from 2nd model in sketch symbol\n                    ", "solution": ["'define symbol to look for\noSymbolName = \"MySymbolName\"\n\n'get referene to active document (drawing)\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nFor Each oView In oDrawDoc.ActiveSheet.DrawingViews\n\t'get model reference (path and name)\n\toMDoc = IO.Path.GetFileName(ActiveSheet.View(oView.Name).ModelDocument.FullFileName)\n\t'split off just the name\n\toSplit = Split(oMDoc,\"\\\")\n\t'check if name is like format\n\toNameCheck = oSplit(UBound(oSplit)) Like \"####-##9####.*\"\t\n\tIf oNameCheck = True Then\n\t\t'Iterate through each symbol in the active sheet\n\t\tFor Each oSymbol In oDrawDoc.ActiveSheet.SketchedSymbols \n\t\t\t'check against named symbol\n\t\t\tIf oSymbol.Name = oSymbolName Then\n\t\t\t\t'get iproperty value\n\t\t\t\toSummary = iProperties.Value(oMDoc, \"Summary\", \"Subject\")\n\t\t\t\t'set value of each textbox in symbole (assumes only one exists)\n\t\t\t\tFor Each oTextBox In oSymbol.Definition.Sketch.TextBoxes\n\t\t\t\t\tCall oSymbol.SetPromptResultText(oTextBox, oSummary)\n\t\t\t\tNext\n\t\t\tEnd If\n\t\tNext\t\n\tEnd If\nNext\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Master Assy Qty for SubAssy and Parts at the Drawing Level\n                    ", "solution": [], "author": "timothy.berg"},
{"created at": [], "solution Title": "\n                        Re: File Dialog Initial Directory stuck on workspace\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Delete bolted connections - explode holes\n                    ", "solution": ["Sub ExplodeClientFeature()\n\n    Dim oPartDoc As PartDocument\n    Set oPartDoc = ThisApplication.ActiveDocument\n    \n    'get client feature\n    Dim oCF As ClientFeature\n    Set oCF = oPartDoc.ComponentDefinition.Features.ClientFeatures.Item(1)\n    \n    'delete elements in client feature\n    Dim oCFElements As ClientFeatureElements\n    Set oCFElements = oCF.Definition.ClientFeatureElements\n    \n    Dim nCount As Integer\n    nCount = oCFElements.count\n    \n    Dim i As Integer\n    For i = nCount To 1 Step -1\n        Call oCFElements.Item(i).Delete\n    Next\n    \n    'delete client feature\n    Call oCF.Delete\n\nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: BOMView.Renumber\n                    ", "solution": ["' Set a reference to the assembly document.\n' This assumes an assembly document is active.\nDim oDoc As AssemblyDocument\noDoc = ThisApplication.ActiveDocument\n\n' Set a reference to the BOM\nDim oBOM As BOM\noBOM = oDoc.ComponentDefinition.BOM\n\toBOM.StructuredViewFirstLevelOnly = False\n\toBOM.StructuredViewEnabled = True\n\tDim oStructuredBOMView As BOMView\n    oStructuredBOMView = oBOM.BOMViews.Item(\"Structured\")\nCall oStructuredBOMView.Sort(\"Stock Number\",True)\nCall oStructuredBOMView.Renumber(1, 1)\nMessageBox.Show(\"Done\", \"Sort BOM\")"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Supress iLogic error message when running VBA\n                    ", "solution": [], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: Inventor hole-feature-dialog\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: GetVectorData return wrong coordinates\n                    ", "solution": ["\tDim mapp As Inventor.Application\n        mapp = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n        Dim assydoc As AssemblyDocument\n        assydoc = mapp.ActiveDocument\n        Dim m_UOM As UnitsOfMeasure\n        m_UOM = mapp.UnitsOfMeasure\n        Dim basetransform As Matrix\n        Dim tmpX As String\n        Dim tmpY As String\n        Dim tmpZ As String\n        Dim coords(2) As Double\n\n        Dim occ As ComponentOccurrence = assydoc.SelectSet\n        basetransform = occ.Transformation\n        basetransform.Translation.GetVectorData(coords)\n\n        tmpX = m_UOM.GetPreciseStringFromValue(coords(0), ", "UnitsTypeEnum.kMillimeterLengthUnits", ")\n        tmpY = m_UOM.GetPreciseStringFromValue(coords(1), ", "UnitsTypeEnum.kMillimeterLengthUnits", ")\n        tmpZ = m_UOM.GetPreciseStringFromValue(coords(2), ", "UnitsTypeEnum.kMillimeterLengthUnits", ")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How to change parameter in .ipt file using VBA code in excel\n                    ", "solution": ["Public Sub ChangeParam()\n    Dim startedInventor As Boolean\n    startedInventor = False\n    \n    ' Try connecting to a running instance of Inventor.\n    Dim invApp As Inventor.Application\n    On Error Resume Next\n    Set invApp = GetObject(, \"Inventor.Application\")\n        \n    If Err.Number <> 0 Then\n        Err.Clear\n        \n        ' Attempt to start Inventor, which will start it invisibly.\n        Set invApp = CreateObject(\"Inventor.Application\")\n        If Err.Number <> 0 Then\n            MsgBox \"Could not start Inventor\"\n            Exit Sub\n        End If\n        \n        ' Set the flag to indicate Inventor was started\n        ' by this program so we know to shut it down.\n        startedInventor = True\n    End If\n    On Error GoTo 0\n    \n    ' Open the document and open it invisibly.\n    Dim partDoc As PartDocument\n    Set partDoc = invApp.Documents.Open(ThisWorkbook.Path & \"\\ParamTest.ipt\", False)\n\n    ' Get the value from the Excel sheet.\n    Dim sheet As Excel.Worksheet\n    Set sheet = ThisWorkbook.ActiveSheet\n    Dim newValue As String\n    newValue = sheet.Cells(1, 1)\n    \n    ' Get the parameter to change.\n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n    Dim param As Inventor.Parameter\n    Set param = partDef.Parameters.Item(\"Length\")\n\n    ' Set the parameter expression.\n    param.Expression = newValue\n\n    ' Update the document to force it to rebuilt.\n    partDoc.Update\n\n    ' Save and close the document.\n    partDoc.Save\n    partDoc.Close\n\n    ' Shut down Inventor if it was started.\n    If startedInventor Then\n        invApp.Quit\n    End If\n    \n    MsgBox \"Finished.\"\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic to \"Find Sketch in Browser\"\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nDim oCD As ComponentDefinition = oDoc.ComponentDefinition\nDim oSketch As Sketch = oCD.Sketches.Item(\"", "MySketchName", "\")", "If oSketch Is Nothing Then Exit Sub\noSketch.Edit()\n", "Try", "\n    'Do something with the sketch", "\nCatch", "End Try\noSketch.ExitEdit()", "Dim oDoc As Document = ThisApplication.ActiveDocument\nDim oCD As ComponentDefinition = oDoc.ComponentDefinition\nDim oSketch As Sketch = oCD.Sketches.Item(\"", "MySketchName", "\")", "If oSketch Is Nothing Then Exit Sub", "oDoc.SelectSet.Select(oSketch)", "Dim oDoc As Document = ThisApplication.ActiveDocument\nDim oCD As ComponentDefinition = oDoc.ComponentDefinition\nDim oSketch As Sketch\nDim oFindSketch As String\n\n100:\noFindSketch = \"SK-00000, example. Type sketch name.\" \noFindSketch = InputBox(\"Prompt\", \"Title\", oFindSketch, MessageBoxButtons.YesNoCancel)\n\nFor Each oSketch In oDoc.ComponentDefinition.Sketches\n\t\tIf Not oFindSketch = oSketch.Name Then \n\t\tCounter = 0\n\t\tElse\n\t\tCounter = 1\n\t\toSketch = oCD.Sketches.Item(oFindSketch)\n\t\tExit For\n\t\tEnd If\nNext\n\t\nIf Counter = 0 Then\t\t\t'Not OK\n\toInfo = MessageBox.Show(\"The sketch name typed in is \" & \"NOT VALID.\" _\n\t& vbLf & \"Do you want to retry?\", \"Title\", MessageBoxButtons.YesNo)\n\tIf oInfo = vbYes Then\n\t\tGoto 100:\n\tElse If oInfo = vbNo Then\n\t'Do noting\n\tEnd If\nElse If Counter = 1 Then\t'OK\n\toDoc.SelectSet.Select(oSketch)\nEnd If\n\n"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Count Assemblies\n                    ", "solution": ["Public Sub Main()\n    Dim oAssyDoc As Inventor.AssemblyDocument = ThisApplication.ActiveDocument\n    Dim oCcurrences As ComponentOccurrences = oAssyDoc.ComponentDefinition.Occurrences\n    CountAssemblyOccurences(oCcurrences)\n    Dim Result As String = vbNullString\n    For Each Item As CT In Counter\n        Result = Result & Item.Count & \"x \" & Item.Name & vbNewLine\n    Next\n    MsgBox(Result)\nEnd Sub\n\nPrivate Structure CT\n    Public ReadOnly Property IsEmpty As Boolean\n        Get\n            Return Name = vbNullString\n        End Get\n    End Property\n    Public Name As String\n    Public Count As Integer\nEnd Structure\n\nPrivate Counter(0) As CT\n\nPrivate Sub CountAssemblyOccurences(ByVal oOccurrences As ComponentOccurrences)\n    For Each oOcc As ComponentOccurrence In oOccurrences\n        If oOcc.DefinitionDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n            AddCount(oOcc.Name)\n            CountAssemblyOccurences(oOcc.SubOccurrences)\n        End If\n    Next\nEnd Sub\n\nPrivate Sub AddCount(AssyName)\n    Dim iLP As Integer = InStrRev(AssyName, \":\")\n    Dim oName As String = Left(AssyName, iLP - 1)\n    Dim Item As Integer = -1\n    For i As Integer = 0 To Counter.Length - 1\n        If Counter(i).Name = oName Then\n            Item = i\n            Exit For\n        End If\n    Next", "    If", " ", "Counter", "(", "0", ")", ".", "IsEmpty", " ", "Then", " ", "Item", " ", "=", " ", "0", "    If Item = -1 Then\n        Item = Counter.Length\n        ReDim Preserve Counter(Item)\n    End If\n    If Counter(Item).IsEmpty Then\n        Counter(Item).Name = oName\n        Counter(Item).Count = 1\n    Else\n        Counter(Item).Count = Counter(Item).Count + 1\n    End If\nEnd Sub", "Result = ", "Result", " & Item.", "Name", " & \"", " x", "\" & Item.", "Count", " & ", "vbNewLine"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: square footage\n                    ", "solution": ["GoExcel.CellValue(\"filename.xls\", \"Sheet1\", \"A2\")=d0", "iLogicVb.Automation.ParametersXmlSave(ThisDoc.Document, \"path\\filename.xml\")"], "author": "asiteur"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Material error\n                    ", "solution": ["Try ", "strMaterial", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Material", "\"", ")", "\n        ", "iProperties", ".", "Material", "(", "docFName", ")", " ", "=", " ", "strMaterial", "Catch ex As Exception", "MessageBox.Show(\"No encuentro la pieza: \" +Right(docFile.FullFileName, Len(docFile.FullFileName) - FNamePos), Right(docFile.FullFileName, Len(docFile.FullFileName) - FNamePos))", "End Try", "\n"], "author": "asiteur"},
{"created at": [], "solution Title": "\n                        Re: Accept 'Do you want to use resolved file' message\n                    ", "solution": [], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule to control solid body feature visibility\n                    ", "solution": [], "author": "kennyj"},
{"created at": [], "solution Title": "\n                        Re: Delete stress simulation via API?\n                    ", "solution": [], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: Sort Sheets in IDW\n                    ", "solution": ["Sub Main\n\n\tDim drawingDoc As DrawingDocument = ThisDoc.Document\n\tDim sheet As Sheet = Nothing\n\tDim sheetsList As New List(Of Sheet)\n\tDim browserPane As BrowserPane = drawingDoc.BrowserPanes.Item(\"Model\")\n\n\tFor Each sheet In drawingDoc.Sheets\n\t\tsheetsList.Add(sheet)\n\tNext\n\t\n\tsheetsList.Sort(AddressOf Comparer)\n\t\n\tFor Each sheet In sheetsList\n\t\tDim sheetNode As BrowserNode = browserPane.GetBrowserNodeFromObject(sheet)\n\t\tDim bottomNode As BrowserNode = browserPane.TopNode.BrowserNodes.Item(browserPane.TopNode.BrowserNodes.Count)\n\t\tbrowserPane.Reorder(bottomNode, False, sheetNode)\n\tNext\n\t\nEnd Sub\n\nPrivate Function Comparer(x As Sheet, y As Sheet) As Integer\n\tReturn String.Compare(x.Name,y.Name)\nEnd Function"], "author": "J-SHould"},
{"created at": [], "solution Title": "\n                        Re: iFactory Part using iLogic\n                    ", "solution": [], "author": "Learning2Code"},
{"created at": [], "solution Title": "\n                        Re: Bug in iLogic:  Coordinates for Start/EndPoints in a Drawing View\n                    ", "solution": [], "author": "larry.daubenspe"},
{"created at": [], "solution Title": "\n                        Re: Search VBA Solution for Rotate at Angle\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Pack and Go API\n                    ", "solution": ["Imports Inventor\n\nPublic Class Form1\n\n    Private inventorApplication As Inventor.Application\n\n    Public Sub New()\n\n        ' This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        ' Add any initialization after the InitializeComponent() call.\n        Dim inventorRunning As Boolean = GetInventorApplication()\n        'If Not inventorRunning Then\n        If inventorRunning = False Then\n            MsgBox(\"Inventor isn't running\" & vbCr & \"Launch Inventor and restart this application\" & vbCr & vbCr, MsgBoxStyle.Critical, \"Cadac Group\")\n        End If\n\n    End Sub\n\n    Private Function GetInventorApplication() As Boolean\n\n        Try\n            inventorApplication = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n        Catch ex As Exception\n            Return False\n        End Try\n\n        Return True\n\n    End Function\n\n    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click\n        Dim oPacknGoComp As New PackAndGoLib.PackAndGoComponent\n\n        Dim oPacknGo As PackAndGoLib.PackAndGo\n        oPacknGo = oPacknGoComp.CreatePackAndGo(\"C:\\Workspace\\NXTdimVault\\Documents\\Projects\\P00002\\WG1E0001199.iam\", \"C:\\PacknGo\\Test2\")\n\n        ' Set the design project. This defaults to the current active project.\n        oPacknGo.ProjectFile = inventorApplication.DesignProjectManager.ActiveDesignProject.FullFileName\n\n        Dim sRefFiles = New String() {}\n        Dim sMissFiles = New Object\n\n        ' Set the options\n        oPacknGo.SkipLibraries = False\n        oPacknGo.SkipStyles = True\n        oPacknGo.SkipTemplates = True\n        oPacknGo.CollectWorkgroups = False\n        oPacknGo.KeepFolderHierarchy = True\n        oPacknGo.IncludeLinkedFiles = True\n\n        ' Get the referenced files\n        oPacknGo.SearchForReferencedFiles(sRefFiles, sMissFiles)\n\n        ' Add the referenced files for package\n        oPacknGo.AddFilesToPackage(sRefFiles)\n\n        ' Start the pack and go to create the package\n        oPacknGo.CreatePackage()\n    End Sub\n\nEnd Class"], "author": "psaarloos"},
{"created at": [], "solution Title": "\n                        Re: Inventor (2017) Sheet Metal Base Face?\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: recognizing occurrence as a Content Center\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Cannot Access FileManager from Excel VBA\n                    ", "solution": ["Set InvApp = GetObject(\"\", \"Inventor.Application\")"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Batch insert Sheet Metal Thickness into Description\n                    ", "solution": ["' Define the open document", "\nDim aDoc As Document = ThisApplication.ActiveDocument\nIf aDoc Is Nothing Then Exit Sub\n", "' Look at all of the files referenced in the open document", "\nFor Each oDoc As Inventor.Document In aDoc.AllReferencedDocuments\n\t", "' Look at the sheet metal parts only", "\n\tIf oDoc.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Continue For\n\tDim oCD As PartComponentDefinition = oDoc.ComponentDefinition\n\t", "' Format the file name. I don't realy see why would you need it here, so I'll comment it out", "\n\t", "'Dim FNP As Integer = InStrRev(oDoc.FullFileName, \"\\\", -1)\n\t'Dim FName As String = Microsoft.VisualBasic.Mid(oDoc.FullFileName, FNamePos + 1)", "\n\tDim oParam As Inventor.Parameter = oCD.Parameters.Item(\"Thickness\")\n\tIf oParam Is Nothing Then Continue For\n\toParam.ExposedAsProperty = True\n\tDim cFormat As CustomPropertyFormat = oParam.CustomPropertyFormat\n\tcFormat.PropertyType = CustomPropertyTypeEnum.kTextPropertyType\n\tcFormat.Units = \"in\"\n\tDim oDescription As Inventor.Property = oDoc.PropertySets(\"Design Tracking Properties\").Item(\"Description\")\n\toDescription.Value = \"=<Thickness> PL\"\n\t", "' Update the document", "\n\toDoc.Update()\nNext", "' Rebuild to update the display", "\naDoc.Rebuild()"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Determine if drawing is from part or sheetmetal\n                    ", "solution": ["' Define the open document", "\nDim aDoc As Document = ThisApplication.ActiveDocument\nIf aDoc Is Nothing Then Exit Sub\n", "' Look at all of the files referenced in the open document", "\nFor Each oDoc As Inventor.Document In aDoc.AllReferencedDocuments\n\tDim FName As String = oDoc.FullFileName\n\tIf oDoc.DocumentSubType.DocumentSubTypeID = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n\t\tMsgBox(FName & vbnewline & \"is a sheetmetal part.\")\n\tElseIf oDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n\t\tMsgBox(FName & vbnewline & \"is a normal part.\")\n\tEnd If\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic to verify multiple measurements\n                    ", "solution": ["Sub Main()\n\t", "' Here I'm adding all measurements using the new sub routine called \"AddMeasurement\"", "\n\tAddMeasurement(\"Work Plane22\", \"Work Plane12\") ", "' Left rail and single rail", "\n\tAddMeasurement(\"Work Plane23\", \"Work Plane13\") ", "' Right rail and single rail", "\n\tAddMeasurement(\"Work Plane22\", \"Work Plane20\") ", "' Left rail and double rail", "\n\tAddMeasurement(\"Work Plane23\", \"Work Plane21\") ", "' Right rail and double rail", "\n\tAddMeasurement(\"Work Plane13\", \"Work Plane20\") ", "' Single rail and double rail", "\n\tDim HoneyCombMin As Double = 230 ", "' Definine the value for comparison", "\n\t", "' Here I'm defining a text variable with no value", "\n\tDim MOL As String = vbnullstring\n\t", "' Loop throught all measurements stored in the \"MyDist\" variable array", "\n\tFor i = 0 To MyDist.Lenght - 1 'Go through each measurement\n\t\t", "' If the value in the array is bigger or equal to HoneyCombMin skipp this value", "\n\t\tIf MyDist(i) >= HoneyCombMin Then Continue For\n\t\t", "' If the variable \"MOL\" isn't empty add a new row to it, so the new value goes there", "\n\t\tIf MOL <> vbnullstring Then MOL = MOL & vbnewline\n\t\t", "' Add the value to the \"MOL\" variable along with some text", "\n\t\tMOL = MOL & \"Value Nr.\" & i + 1 & \" (\" & MyDist(i) & \") is less than \" & HoneyCombMin\n\tNext\n\t", "' If the \"MOL\" variable is not empty show a message with it's content", "\n\tIf MOL <> vbnullstring Then MsgBox(MOL) ", "'Show the results (if any)", "\nEnd Sub\n", "' The definition of \"MyDist\" variable of the type \"Double\" = number with decimals", "' The zero defines this variable as array with one \"slot\", as the counting starts from zero", "\nPrivate MyDist(0) As Double 'Local variable to store the measurements\n", "' The definition of the sub routine \"AddMeasurement\".", "' In the brackets are required input values.", "' \"As String\" means the accepted values must be text", "\nPrivate Sub AddMeasurement(WorkPlaneA As String, WorkPlaneB As String)\n\t", "' If the variable \"MyDist\" is not empty we need to add another \"slot\"", "\n\tIf Not MyDist(MyDist.Lenght - 1) = Nothing Then\n\t\t", "' Since the lenght is 1 and the counting starts from 0, the value will grow by 1", "\n\t\tReDim Preserve MyDist(MyDist.Lenght)\n\tEnd If\n\t", "' Store the measurement in the last slot. Number of slots - 1 (counting starts from zero)", "\n\tMyDist(MyDist.Lenght - 1) = Measure.MinimumDistance(WorkPlaneA, WorkPlaneB)\nEnd Sub ", "' The end of the sub routine"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: i want to change part list width of all collumns in idw via vba\n                    ", "solution": ["Sub Change_PartLists_Width()\nDim oDoc As Document\nSet oDoc = ThisApplication.ActiveDocument\nIf oDoc.DocumentType <> kDrawingDocumentObject Then\n    MsgBox \"The Selected document is not a drawing document please select a drawing document and continue\", vbOKOnly, \"Edit Revision Table  Column Width:\"\n    Exit Sub\nEnd If\nDim oSheet As Sheet\nFor Each oSheet In oDoc.Sheets\n    oSheet.Activate\n    Dim oPartsList As PartsList\n    For Each oPartsList In oSheet.PartsLists\n        Dim oColumn As PartsListColumn\n        For Each oColumn In oPartsList.PartsListColumns\n            Dim oWidth As Double\n            Dim oColumnName As String\n            oColumnName = oColumn.Title\n            ", "' Specify your columns here, one row per column", "\n            Select Case oColumnName\n            Case \"Rev.\":                 oWidth = ", "0.8", "\n            Case \"Cpy Rev\":              oWidth = ", "1.2", "\n            Case \"Status\":               oWidth = ", "1.8", "\n            Case \"Rev. Date\":            oWidth = ", "1.8", "\n            Case \"Revision Description\": oWidth = ", "4.4", "\n            Case \"Issued by\":            oWidth = ", "2", "\n            Case \"Reviewed by\":          oWidth = ", "2", "\n            Case \"Appr. ENG\":            oWidth = ", "2", "\n            Case \"Appr. PMT/OPS\":        oWidth = ", "2", "\n            Case \"Part. Accept.\":        oWidth = ", "2", "\n            ", "Case Else:                   oWidth = 0\n            ", "End Select", "\n            If oWidth > 0 Then oColumn.Width = oWidth", "\n        Next oColumn\n    Next oPartsList\nNext oSheet\nEnd Sub\n"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How to tackle this Idea?\n                    ", "solution": ["'Get the active document", "\nDim oDoc As Document = ThisApplication.ActiveDocument\n", "'Exit if the document isn't drawing", "\nIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\n", "'Get the first sheet", "\nDim oSheet As Sheet = oDoc.Sheets.Item(1)\n", "'Exit if the sheet have no views", "\nIf oSheet.DrawingViews.Count = 0 Then Exit Sub\n", "'Get the first view", "\nDim oView As DrawingView = oSheet.DrawingViews.Item(1)\n", "'Get the first document from the view", "\nDim oModel As Document = oDoc.ReferencedDocuments.Item(1)\n", "'Exit if the referenced document isn't sheet metal", "\nIf oModel.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Exit Sub\n", "'Get the view position", "\nDim oPosition As Point2d = oView.Position\n", "'Get the view size", "\nDim oSpace As Double = oView.Width\n", "'Offset the position", "\noPosition.X = oPosition.X + oSpace\n", "'Get the view scale", "\nDim oScale As Double = oView.Scale\n", "'Set the orientation", "\nDim oOrientation As ViewOrientationTypeEnum = ViewOrientationTypeEnum.kRightViewOrientation\n", "'Set the view style", "\nDim oViewStyle As DrawingViewStyleEnum = oView.ViewStyle\n", "'Add the new view", "\noSheet.DrawingViews.AddBaseView(oModel, oPosition, oScale, oOrientation, oViewStyle)", "'Get the active document", "\nDim oDoc As Document = ThisApplication.ActiveDocument\n", "'Exit if the document isn't drawing", "\nIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\n", "'Get the first sheet", "\nDim oSheet As Sheet = oDoc.Sheets.Item(1)\n", "'Exit if the sheet have no views", "\nIf oSheet.DrawingViews.Count = 0 Then Exit Sub\n", "'Get the selection from user", "\nDim oSelect As Object = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingViewFilter, \"Pick a view\")\n", "'Exit if nothing is selected", "If oSelect Is Nothing Then Exit Sub\n", "'Get the view", "\nDim oView As DrawingView = oSelect\n", "'Get the first document from the view", "\nDim oModel As Document = oDoc.ReferencedDocuments.Item(1)\n", "'Exit if the referenced document isn't sheet metal", "\nIf oModel.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Exit Sub\n", "'Get the view position", "\nDim oPosition As Point2d = oView.Position\n", "'Get the view size", "\nDim oSpace As Double = oView.Width\n", "'Offset the position", "\noPosition.X = oPosition.X + oSpace\n", "'Get the view scale", "\nDim oScale As Double = oView.Scale\n", "'Set the orientation", "\nDim oOrientation As ViewOrientationTypeEnum = ViewOrientationTypeEnum.kRightViewOrientation\n", "'Set the view style", "\nDim oViewStyle As DrawingViewStyleEnum = oView.ViewStyle\n", "'Add the new view", "\noSheet.DrawingViews.AddBaseView(oModel, oPosition, oScale, oOrientation, oViewStyle)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: I want to lock all my view Representations via vba\n                    ", "solution": ["Public Sub LockViewRep()\n\nDim oDoc As AssemblyDocument\nSet oDoc = ThisApplication.ActiveDocument\n\nDim oRepMgr As RepresentationsManager\nSet oRepMgr = oDoc.ComponentDefinition.RepresentationsManager\n\nDim oViewReps As DesignViewRepresentations\nSet oViewReps = oRepMgr.DesignViewRepresentations\n\nDim oViewRep As DesignViewRepresentation\nFor Each oViewRep In oViewReps\n    On Error Resume Next\n    oViewRep.Locked = True\nNext\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: VB Not My Thing\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: ilogic remove unresolved OLE links\n                    ", "solution": ["Sub Main()\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n\t\n\tFor Each oOLEFileRef In oDoc.ReferencedOLEFileDescriptors\n\t\toOLEFileRef.BrowserVisible = True\n\tNext\n\t\n\tFor Each oSubDoc As Document In oDoc.AllReferencedDocuments\n\t\tIf oSubDoc.ReferencedOLEFileDescriptors.Count > 0\n\t\t\tOpenAndMakeOLEVisible(oSubDoc)\n\t\tEnd If\n\tNext\n\t\n\tMsgBox(\"Rule Complete!\",,\"iLogic\")\nEnd Sub\n\nSub OpenAndMakeOLEVisible(oDoc As Document)\n", "        'This boolean can be changed in case you want all files with OLE refs open.\n\tDim oOpenOnlyMissing As Boolean = True", "\n\toVisiDoc = ThisApplication.Documents.Open(oDoc.FullFileName,False)\n\n\tFor Each oOLEFileRef In oVisiDoc.ReferencedOLEFileDescriptors\n\t\toOLEFileRef.BrowserVisible = True\n\n\t\tIf oOLEFileRef.ReferenceStatus <> ReferenceStatusEnum.kMissingReference And oOpenOnlyMissing = True\n\t\t\toVisiDoc.ReleaseReference\n\t\tElse\n\t\t\tThisApplication.Documents.Open(oVisiDoc.FullFileName,True)\n\t\tEnd If\n\tNext\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: LifeCycle Event Editor not working with Vault 2017\n                    ", "solution": [], "author": "tolgay.hickiran"},
{"created at": [], "solution Title": "\n                        Re: ModelPosition to point in sketch\n                    ", "solution": [], "author": "Brett.G"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule creating custom iProperties\n                    ", "solution": ["Dim FinishRU As String = UCase(FinishR)\nIf FinishRU... ...Or (FinishRU.Contains (\"RAL\") And Not FinishRU.Contains(\"NATURAL\")) Or...", "Dim PlateR As String = vbNullString\nDim PaintR As String = vbNullString\n\nIf FinishR = \"Clear Zinc Plate Per ASTM B633 TYPEIII,Zn/Fe8\" Then PlateR = \"X\"\n", "Dim FinishRU As String = UCase(FinishR)", "Select Case True", "Case FinishRU.Contains(\"POWDER\"):                                  PaintR = \"X\"\nCase FinishRU.Contains(\"COAT\"):                                    PaintR = \"X\"\nCase FinishRU.Contains(\"RAL\") And Not FinishRU.Contains(\"NORMAL\"): PaintR = \"X\"\nEnd Select\n\niProperties.Value(\"Custom\", \"Plate\") = PlateR\niProperties.Value(\"Custom\", \"Paint\") = PaintR"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Rubberbanding\n                    ", "solution": [], "author": "kennyj"},
{"created at": [], "solution Title": "\n                        Re: Batch edit iProperty based on excel table?\n                    ", "solution": ["'set the target document \noDoc = ThisApplication.ActiveEditDocument\n\n'example: \"C:\\TEMP\\9876543210.ipt\"\nsPathAndName = oDoc.FullFileName\n\n'split into an array\noSplit = Split(sPathAndName,\"\\\") \n'example: \"C:\\TEMP\\9876543210.ipt\"\n'\toSplit(0) = C:\n'\toSplit(1) = TEMP\n'\toSplit(2) = 9876543210.ipt\"  <-- this is the Ubound for this example\n\n'get the upper bound of the array\nsNameWithExtension = oSplit(UBound(oSplit)) \n\n'get length of string\n'example: 9876543210.ipt\" , would return 14\niNameLength = Len(sNameWithExtension)\n\n'remove last four chars, which is the extension ( example: .ipt )\nsName = Left(sNameWithExtension, iNameLength - 4) \n\n'compare excel data\nIf GoExcel.FindRow(\"C:\\TEMP\\Test.xlsx\", \"Sheet1\", \"Name\", \"=\", sName)\n\n\t' Get a reference to the PropertySets\n\t' we're really only using Design Tracking Properties in this case though\n\tDim oPropSet1 As PropertySet\n\toPropSet1 = oDoc.PropertySets.Item(\"Inventor Summary Information\")\n\tDim oPropSet2 As PropertySet\n\toPropSet2 = oDoc.PropertySets.Item(\"Design Tracking Properties\")\n\tDim oPropSet3 As PropertySet\n\toPropSet3 = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n\t'set value to excel data\n\toPropSet2.Item(\"Description\").Value = GoExcel.CurrentRowValue(\"Desc\")\nEnd If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: The challenge for the iLogic\n                    ", "solution": ["Dim lDia As Double = ", "5", "    ", "'Later we'll set this value from the user's input", "\nDim sDia As Double = ", "0.7", "  ", "'Later we'll set this value from the user's input", "\nDim aStep As Double = ", "0.2", " ", "'Later we'll set this value from the user's input", "\nDim CircleCount As Integer = Math.Floor((lDia - sDia) / aStep) + 1\nFor i = 1 To CircleCount\n     Dim aDia As Double = lDia - ((i - 1) * aStep)\n     If i = CircleCount Then aDia = sDia\n     ", "'Here we're gonna use the variable \"aDia\" as the diameter for each circle", "\nNext\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Update style from Library\n                    ", "solution": ["public void UpdateStyle(Inventor.Application invApp) {\n\ttry {\n\t\tAssemblyDocument oAsmDoc = (AssemblyDocument)invApp.ActiveDocument;\n\n\t\tforeach (Document oDoc in oAsmDoc.AllReferencedDocuments) {\n\n\t\t\tPartDocument oPartDoc = (PartDocument)oDoc;\n\n\t\t\tMaterial oMat = oPartDoc.ComponentDefinition.Material;\n\n\t\t\tif (!oMat.UpToDate) {\n\t\t\t\toPartDoc.ComponentDefinition.Material.UpdateFromGlobal();\n\t\t\t}\n\t\t}\n\n\t\tMessageBox.Show(\"OK\");\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(ex.Message);\n\t}\n}"], "author": "marcelo.zattera"},
{"created at": [], "solution Title": "\n                        Re: VBA Hide/Disable Inventor Window while running program\n                    ", "solution": ["Dim oApp As Inventor.Application", "oApp.ScreenUpdating = False\noApp.Visible = False", "oApp.ScreenUpdating = False\noApp.Visible = False\nOn Error GoTo ErrorHandler\n     ", "'Your code here", "\nErrorHandler:\noApp.Visible = True\noApp.ScreenUpdating = True", "oApp.ActiveView.Update"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Creating a multi value parameter in all parts within an assembly iLogic\n                    ", "solution": ["' instead of:  MultiValue.SetList(\"WORKSHOP_CATEGORY\", \"CARCASSING\", \"COMPONENTS\")\nDim valueList() As String = {\"\"\"CARCASSING\"\"\", \"\"\"COMPONENTS\"\"\"}\noParam.ExpressionList.SetExpressionList(valueList)"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic to update iProperties Description\n                    ", "solution": ["iProperties.Value(\"Project\", \"Description\") = \"\" 'clears the value\n'MessageBox.Show(iProperties.Value(\"Custom\", \"emptytest\")) 'check if the value is actually empty from a textbox\n\nDim i As Integer\ni = 0\nDim a As New ArrayList\na.add(d0)\na.add(d1)\na.add(iProperties.Value(\"Custom\", \"emptytest\"))\n'MsgBox a.item(1)\nMessageBox.Show(a.Item(i) & \": was found!\", \"iLogic\")\n'Dim a(1 To 2) As String\n'a(1) = d0\n'a(2) = d1\n\nFor i = 0 To 2\nIf i = 0 Then\n\tIf String.IsNullOrWhiteSpace(a.item(i)) = False Then\n\tiProperties.Value(\"Project\", \"Description\") = a.item(i)\n\tElse If iProperties.Value(\"Project\", \"Description\") = \"\"\n\tEnd If\nElse \n\tIf String.IsNullOrWhiteSpace(iProperties.Value(\"Project\", \"Description\")) = False\n\t\tIf String.IsNullOrWhiteSpace(a.item(i)) = False Then\n\t\tiProperties.Value(\"Project\", \"Description\") = iProperties.Value(\"Project\", \"Description\") & \" , \" & a.Item(i)\n\t\tElse iProperties.Value(\"Project\", \"Description\") =iProperties.Value(\"Project\", \"Description\")\n\t\tEnd If\n\tEnd If\n\t\n'iProperties.Value(\"Project\", \"Description\") = iProperties.Value(\"Project\", \"Description\") & \" , \" & a.Item(i)\nEnd If\nNext\n"], "author": "tolgay.hickiran"},
{"created at": [], "solution Title": "\n                        Re: How to categorize user created parameters\n                    ", "solution": [" ", "Sub", " ", "Main", "()", "\n\n", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", " ", "=", " ", "ThisDoc", ".", "Document", "\n\n", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", " ", "=", " ", "Nothing", "\n\n", "oAsmCompDef", " ", "=", " ", "oAsmDoc", ".", "ComponentDefinition", "\n\n", "Dim", " ", "oCustomParamGroup", " ", "As", " ", "CustomParameterGroup", " ", "=", " ", "Nothing", "\n\n", "Try", "\n\n", "oCustomParamGroup", " ", "=", " ", "oAsmCompDef", ".", "Parameters", ".", "CustomParameterGroups", ".", "Add", "(", "\"", "Category name", "\"", ", ", "\"", "Category name", "\"", ")", "\n\n", "Catch", " ", "ex", " ", "As", " ", "Exception", "\n", "'", "it probably already exists", "\n", "oCustomParamGroup", " ", "=", " ", "oAsmCompDef", ".", "Parameters", ".", "CustomParameterGroups", "(", "\"", "Category name", "\"", ")", "\n", "End", " ", "Try", "\n\n", "'", "enter existing parameter name, and copy the line for more parameters", "\n\n", "Dim", " ", "oExistingParam", " ", "As", " ", "Inventor", ".", "Parameter", " ", "=", " ", "GetExistingParam", "(", "oAsmDoc", ", ", "\"", "Length", "\"", ")", "\n", "'", "add parameter", "\n", "oCustomParamGroup", ".", "Add", "(", "oExistingParam", ")", "\n\n", "Dim", " ", "oExistingParam1", " ", "As", " ", "Inventor", ".", "Parameter", " ", "=", " ", "GetExistingParam", "(", "oAsmDoc", ", ", "\"", "Width", "\"", ")", "\n", "'", "add parameter", "\n", "oCustomParamGroup", ".", "Add", "(", "oExistingParam1", ")", "\n\n ", "End Sub", "\n\n \n\n", "Private", " ", "Function", " ", "GetExistingParam", "(", "ByVal", " ", "oAssydoc", " ", "As", " ", "Inventor", ".", "AssemblyDocument", ", ", "oParamName", " ", "As", " ", "String", ")", " ", "As", " ", "Inventor", ".", "Parameter", "\n\n", "Dim", " ", "oParam", " ", "As", " ", "Inventor", ".", "Parameter", " ", "=", " ", "Nothing", "\n\n", "For", " ", "Each", " ", "oParam", " ", "In", " ", "oAssydoc", ".", "ComponentDefinition", ".", "Parameters", "\n\n", "If", " ", "oParam", ".", "Name", " ", "=", " ", "oParamName", " ", "Then", "\n\n", "Return", " ", "oParam", "\n\n", "End", " ", "If", "\n\n", "Next", "\n\n", "Return", " ", "Nothing", "\n\n", "End Function", "\n"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Sheet Names\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: iLogic trim centerline at countour option\n                    ", "solution": [], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: iLogic to Export BOM from Assembly to an excel template\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Quick Add-In, 2014 to 2016 Migration needed?\n                    ", "solution": [], "author": "ebuckner"},
{"created at": [], "solution Title": "\n                        Re: API - Accessing material asset values\n                    ", "solution": ["            If oValue.ValueType = AssetValueTypeEnum.kAssetValueTypeString Then\n                Dim oStringAssetValue As StringAssetValue\n                oStringAssetValue = oValue\n                Debug.Print(oValue.Name & \": \" & oStringAssetValue.Value)\n            End If"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: iLogic Error in Part Rule if Paramert in Assembly is changed\n                    ", "solution": ["s = ", "switch_1 ", "'This serves as a trigger. No need to set the generic \"a parameter changed\" trigger", "Dim oDoc As Document = ThisApplication.ActiveDocument\nDim oOccs As ComponentOccurrences = oDoc.ComponentDefinition.Occurrences\nDim oSubDoc As Document\nFor Each oOcc As ComponentOccurrence In oOccs\n     Dim oName As String = oOcc.Name\n     Dim iFP As Integer = InStrRev(oName, \":\", -1)\n     If iFP > 1 Then oName = Left(oName, iFP - 1)\n     If oName = \"", "Part_1", "\" Then\n          oSubDoc = oOcc.Definition.Document\n          Exit For\n     End If\nNext\nIf oSubDoc Is Nothing Then Exit Sub\nDim oParams As Parameters = oSubDoc.ComponentDefinition.Parameters\nDim oParam As Parameter = oParams.UserParameters.Item(\"", "switch_1", "\")\noParam.Value = Parameter(\"", "switch_1", "\")"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: CreateInstance is not loading Vault add-in\n                    ", "solution": [" Try\n                invApp = Marshal.GetActiveObject(\"Inventor.Application\")\n            Catch ex As Exception\n                Try\n                    Dim invAppType As Type = GetTypeFromProgID(\"Inventor.Application\")\n                    invApp = CreateInstance(invAppType)\n                    For Each addIn As ApplicationAddIn In invApp.ApplicationAddIns\n                        Try\n                            If addIn.LoadBehavior = AddInLoadBehaviorEnum.kLoadImmediately Then\n                                addIn.Activate()\n                            End If\n                        Catch exAddIn As Exception\n                            'skip it\n                        End Try\n                    Next\n                    invApp.Visible = True\n                    invAppWasStarted = True\n                Catch ex2 As Exception\n                    MsgBox(\"Unable to get or start Inventor\" & vbCr & ex2.ToString, MsgBoxStyle.SystemModal)\n                End Try\n            End Try\n        End If\n        Try\n            Dim dcountTest As Integer = invApp.Documents.Count\n        Catch ex As Exception\n            invApp = Nothing\n            GetInventorApplication()\n        End Try\n        Return invApp"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Creating a tapered  cutout using vba\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: MultiValue Text Parameter iPart\n                    ", "solution": ["'Get an array of your parameter values. Change Test to your parameter.\nDim sChoices() As String = Parameter.Param(\"Test\").ExpressionList.GetExpressionList\n'Show a list box with your choices, using the first one as default. Change the text as you like.\nDim sResponse As String = InputListBox(\"Choose.\",  sChoices, \n    sChoices(0), Title := \"Make your choice.\", ListName := \"Choices\")\n'Now use sResponse string to iterate your results.\n\nSelect Case sResponse\n    Case \"B1\"\n        'Do stuff\n    Case \"B2\"\n        'Do stuff\n    Case Else\n        'If nothing else fits.\nEnd Select"], "author": "wood.isbell"},
{"created at": [], "solution Title": "\n                        Re: Need some Ilogic help\n                    ", "solution": ["round(151.625/20)*20", "Result", "=", " ", "Multiple", "*", "(", "Math", ".", "round", "(", "Height", "/", "Multiple", "))"], "author": "cgriff100"},
{"created at": [], "solution Title": "\n                        Re: iLogic Parameter value is wrong\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Best way to check extrusion direction\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Using the Content Center though a VB.NET add-in\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: How could i stretch ribbon menu?\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: iLogic Inventor Drawing Save As\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: BUG REPORT | 2017 API Help\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Tolerance\n                    ", "solution": ["Dim drawDoc As DrawingDocument = ThisDoc.Document\n\nDim drawDim As DrawingDimension\ndrawDim = drawDoc.ActiveSheet.DrawingDimensions.Item(1)\n\nIf drawDim.ModelValue > 5 Then\n    drawDim.Tolerance.SetToDeviation(0.2, 0.1)\nElse\n    drawDim.Tolerance.SetToDeviation(0.15, 0.075)\nEnd If\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic to check if Flat Pattern view is active\n                    ", "solution": ["oDoc = ThisApplication.ActiveEditDocument\n\n'make sure this is a sheet metal file\nIf oDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n\t\n\t'check for flat pattern\n\tDim oCompDef As SheetMetalComponentDefinition\n\toCompDef = oDoc.ComponentDefinition\n\t\n\tIf oCompDef.HasFlatPattern = False Then\n\t\tTry \n\t\t\t'create flat pattern\n\t\t\toCompDef.Unfold \n\t\tCatch\n\t\t\tReturn 'exit rule\n\t\tEnd Try\n\tElse 'if flat pattern exists\n\t\tTry\n\t\t\t'edit flat pattern\n\t\t\toCompDef.FlatPattern.Edit \n\t\tCatch\n\t\t\tReturn 'exit rule\n\t\tEnd Try\n\tEnd If\n\n\t'now we know we have a flatpattern\n\t'and it is active for edits\n\tTry\t\t\t\t\n\t' do something here\n\t' then flip back to folded model\t\n\toCompDef.FlatPattern.ExitEdit\t\n\tCatch\n\n\tEnd Try\n\nEnd If\n\n\n\n", "If oCompDef.HasFlatPattern = False Then _CreatedFP = True\n\n'Capture Extents (these will switch the active view to the Flat Pattern if and only if it doesn't already exist)\nEX=SheetMetal.FlatExtentsLength\nEY=SheetMetal.FlatExtentsWidth\n\n'Do stuff with EX and EY\n\nIf _CreatedFP = True Then oCompDef.FlatPattern.ExitEdit()"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Sketch symbol rounding values\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Get Document object from full file path\n                    ", "solution": ["On Error Resume next\n    oDoc = ThisApplication.Documents.ItemByName(strFilePath)\n    If Err.Number <> 0 Then\n        oDoc = ThisApplication.Documents.Open(strFilePath, False)\n        _DocOpened = True\n    End if\nOn Error GoTo 0\n\n\n'Do stuff\n\nIf _DocOpened = True\n    oDoc.Close\nEnd if"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: add button for VBA macro to custom ribbon panel\n                    ", "solution": [], "author": "ruthsteed"},
{"created at": [], "solution Title": "\n                        Re: oTG.CreatePoint2d HELP\n                    ", "solution": ["        Dim oInvApp As Application\n        oInvApp = ThisApplication\n\n        ' Set reference to the Inventor application transient geometry\n        Dim oTG As TransientGeometry\n        oTG = oInvApp.TransientGeometry\n\n        Dim oPoint1 As Point2d\n        oPoint1 = oTG.CreatePoint2d(ActiveSheet.Width - 5)"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: CreateImageWithOptions method\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Measure angle between hole and origin-plane (YZ or XZ)\n                    ", "solution": ["Sub Main()\n\nDim oDoc As Document\nSet oDoc = ThisApplication.ActiveDocument\n\nDim f As Face\nSet f = ThisApplication.CommandManager.Pick(kPartFaceCylindricalFilter, \"Select hole to measure angle\")\n\nDim axis As WorkAxis\nDim plane As WorkPlane\n\nIf oDoc.DocumentType = kPartDocumentObject Then\nDim partDoc As PartDocument\nSet partDoc = oDoc\n\nSet plane = partDoc.ComponentDefinition.WorkPlanes.Item(2)\n\nSet axis = partDoc.ComponentDefinition.WorkAxes.AddByRevolvedFace(f)\n\nCall MeasureAngle(axis, plane)\n\nElseIf oDoc.DocumentType = kAssemblyDocumentObject Then\nDim assyDoc As AssemblyDocument\nSet assyDoc = oDoc\n\nSet plane = assyDoc.ComponentDefinition.WorkPlanes(2)\n\nSet axis = assyDoc.ComponentDefinition.WorkAxes.AddByRevolvedFace(f)\n\nCall MeasureAngle(axis, plane)\nEnd If\n\naxis.Delete\n\nEnd Sub\n\nSub MeasureAngle(axis As WorkAxis, plane As WorkPlane)\n\nDim tools As MeasureTools\nSet tools = ThisApplication.MeasureTools\n\nDim a As Double\n'Angle in rad\na = tools.GetAngle(axis, plane)\n\n'Angle in deg\na = (a * 180) / 3.14\n\nMsgBox (\"Angle : \" & Format(a, 0#) & \" in deg\")\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How to verify if part is derived\n                    ", "solution": ["PartDocument.ComponentDefinition.ReferenceComponents.DerivedPartComponents.Item(1).ReferencedDocumentDescriptor.ReferenceMissing", "PartDocument.ComponentDefinition.ReferenceComponents.DerivedPartComponents.Item(1).SuppressLinkToFile", "PartDocument.ComponentDefinition.ReferenceComponents.DerivedPartComponents.Item(1).LinkedToFile"], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: Using a Radio Box to Open Specific Excel Sheets\n                    ", "solution": ["Sub Main()\n\tDim xlApp As Object\n\tDim xlwb As Object\n\tDim xlws As Object\n\tDim xlFileName As String\n\tDim xlSheetName As String\n\tDim resp As Boolean\n\t\n\txlFileName = \"C:\\Users\\Owner\\Desktop\\TEST.xlsx\"\n\t\n\tresp = InputRadioBox(\"Choose the Operation to perform to this part\", \"Contour\", \"Waterjet\", True, Title := \"CNC Type\")\n\t\t\n\tIf resp = True 'ie; contour was selected\n\t\txlSheetName = \"CONTOUR\"\n\tElse\n\t\txlSheetName = \"WATERJET\"\n\tEnd If\n\t\n\txlApp = GetObject(\"\", \"Excel.Application\")\n\txlApp.Visible = True\n\t\n\txlwb = xlApp.Workbooks.Open(xlFileName)\n\tTry\n\t\txlws = xlwb.Worksheets(xlSheetName)\n\t\txlws.Activate\n\n\t\tAppActivate(\"Microsoft Excel\")\n\tCatch\n\t\tMsgBox(\"Sheet of the name \" & vbLf & xlSheetName & vbLf & \"not found!\" & vbLf & vbLf & \"Aborting!\",, \"MechMachineMan iLogic\")\n\tEnd Try\n\t\n\txlwb = Nothing\n\txlApp = Nothing\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Auto-detect View Overlap on IDW\n                    ", "solution": ["Sub Main()\nDim oDoc As Document = ThisApplication.ActiveDocument\nIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\nDim oSheet As Sheet = oDoc.ActiveSheet\nDim oTG As TransientGeometry = ThisApplication.TransientGeometry\nFor Each AView As DrawingView In oSheet.DrawingViews\n    Dim SP1 As Point2d = AView.Position\n    SP1 = oTG.CreatePoint2d(SP1.X - (AView.Width * 0.5), SP1.Y - (AView.Height * 0.5))\n    Dim EP1 As Point2d = oTG.CreatePoint2d(SP1.X + AView.Width, SP1.Y + AView.Height)\n    For Each BView As DrawingView In oSheet.DrawingViews\n        If AView Is BView Then Continue For\n        If CheckCH(AView.Name, BView.Name) Then Continue For\n        AddCH(AView.Name, BView.Name)\n        Dim SP2 As Point2d = BView.Position\n        SP2 = oTG.CreatePoint2d(SP2.X - (BView.Width * 0.5), SP2.Y - (BView.Height * 0.5))\n        Dim EP2 As Point2d = oTG.CreatePoint2d(SP2.X + BView.Width, SP2.Y + BView.Height)\n        Dim DoOverlap As Boolean = CalcOverlap(SP1, EP1, SP2, EP2)\n        If DoOverlap Then\n            MsgBox(\"", "Save yourself, there's an overlap present!", "\")\n        End If\n    Next\nNext\nEnd Sub\n\nPrivate CH(0,1) As String ", "'Calculation History, so we don't match two views twice", "\n\nPrivate Function CalcOverlap(SP1 As Point2d, EP1 As Point2d, SP2 As Point2d, EP2 As Point2d) As Boolean\n    If SP1.X < SP2.X Then ", "'A is on left", "\n        If EP1.X < SP2.X Then Return False\n        If EP1.Y > EP2.Y Then ", "'A is on top", "            If SP1.Y < EP2.Y Then Return True\n        Else\n            If EP1.Y > SP2.Y Then Return True", "        End If\n    Else\n        If EP2.X < SP1.X Then Return False\n        If EP1.Y > EP2.Y Then ", "'A is on top", "\n            If SP1.Y < EP2.Y Then Return True\n        Else\n            If EP1.Y > SP2.Y Then Return True\n        End If\n    End If\n    Return False\nEnd Function\n\nPrivate Function CheckCH(AName As String, BName As String) As Boolean\n    For i = 0 To CInt((Ch.Length / 2)) - 1\n        If CH(i,0) = AName And CH(i, 1) = BName Then Return True\n        If CH(i,0) = BName And CH(i, 1) = AName Then Return True\n    Next\n    Return False\nEnd Function\n\nPrivate Sub AddCH(AName As String, BName As String)\n    Dim i As Integer = CInt((Ch.Length / 2))\n    If CH(i - 1, 0) = vbNullString And CH(i - 1, 0) = vbNullString Then\n        i = i - 1\n    Else\n        ReDim Preserve CH(i, 1)\n    End If\n    CH(i, 0) = AName\n    CH(i, 1) = BName\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Inventor Automatic Feature Rename\n                    ", "solution": [], "author": "mudmanrv"},
{"created at": [], "solution Title": "\n                        Re: Is There A More Efficient Way To Create A Shipping Crate Generator?\n                    ", "solution": [], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Invisible (Sheetmetal) parameters in ReferenceParameters collection?\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Strange macro problem randomly appears. Copy path to clipboard\n                    ", "solution": [], "author": "BennyDS"},
{"created at": [], "solution Title": "\n                        Re: Copy all Custom iProperties\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Appearance settings are not saved\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Thread.xls modification doesn't reflect within Inventor\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Inventor drawing\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Physical properties updating in assembly\n                    ", "solution": [], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: ilogic save as part number\n                    ", "solution": ["Dim oFolder As String = \"", "C:\\Inventor STP", "\" ", "'The target folder for export", "\nIf Not System.IO.Directory.Exists(oFolder) Then System.IO.Directory.CreateDirectory(oFolder)\n\nIf ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\n    MessageBox.Show(\"Please run this rule from an assembly file.\", \"iLogic\")\n    Exit Sub\nEnd If\n\n", "'Define the active document as an assembly file", "\nDim oAsmDoc As AssemblyDocument = ThisApplication.ActiveDocument\nDim oAsmPN As String = oAsmDoc.PropertySets(\"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\").ItemByPropId(5).Value\n\n", "'Get user input", "\nDim RUsure As DialogResult = MessageBox.Show (\"This will create a STEP file for all components.\" _\n& vbLf & \" \" _\n& vbLf & \"Are you sure you want to create STEP Drawings for all of the assembly components?\" _\n& vbLf & \"This could take a while.\", \"iLogic - Batch Output STEPs \", MessageBoxButtons.YesNo)\nIf RUsure <> vbYes Then Exit Sub\n\noAsmDoc.SaveAs(oFolder & \"\\\" & oAsmPN & \".stp\", True) ", "'Export the Assembly", "\n\n", "'Look at the files referenced by the assembly and work the referenced models", "\nFor Each oRefDoc As Document In oAsmDoc.AllReferencedDocuments  \n    If oRefDoc.ComponentDefinition.BOMStructure <> BOMStructureEnum.kNormalBOMStructure Then Continue For\n    Dim oModelPN As String =  oRefDoc.PropertySets(\"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\").ItemByPropId(5).Value\n    Try  \t\n       \toRefDoc.SaveAs(oFolder & \"\\\" & oModelPN & \".stp\", True)\n    Catch ex As Exception\n       \tMessageBox.Show(\"Error processing \" & oCurFileName & vbNewLine & ex.Message, \"ilogic\")\n    End Try\nNext\n\n", "'Show the folder", "\nMessageBox.Show(\"New Files Created in: \" & vbLf & oFolder, \"iLogic\")\n", "'Open the folder containing the new files", "\nShell(\"explorer.exe \" & oFolder,vbNormalFocus) "], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: GoExcel: Could not match the column title: \"E_Height\"\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Cant delete or rename parametertable\n                    ", "solution": [], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: Determine Largest and second largest Parameter Values\n                    ", "solution": ["\tDim sizes As New List(Of Double)\n\t\t\tsizes.Add(Parameter(\"ZDIM\"))\n\t\t\tsizes.Add(Parameter(\"XDIM\"))\n\t\t\tsizes.Add(Parameter(\"YDIM\"))\n\t\t\tsizes.Sort()\n\t\t\tParameter(\"HEIGHT\") = sizes(2)\n\t\t\tParameter(\"WIDTH\") = sizes(1)\n\t\t\tParameter(\"LENGTH\") = sizes(0)"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Reaching all material data from Apprentice Server\n                    ", "solution": ["Dim apprentice As New ApprenticeServerComponent \nDim doc As ApprenticeServerDocument\u00a0 = apprentice.Open(\"C:\\Temp\\Part1.ipt\")\u00a0 \n\nDim oPropSet As PropertySet = doc.PropertySets.Item(\"Design Tracking Properties\")\n\nDim sMats As String = oPropSet.Item(\"Material\").Value"], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: iLogic Auto Text Call Out for each part View, Code Help\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\nFor Each oSheet As Inventor.Sheet In oDoc.Sheets\n    If oSheet.DrawingViews.Count = 0 Then Continue For\n    For Each oView As DrawingView In oSheet.DrawingViews\n        Dim oModelFileName As String = oView.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\n        Dim oPartList As PartsList\n        If oDoc.ActiveSheet.PartsLists.Count > 0 Then\n            oPartList = oDoc.ActiveSheet.PartsLists.Item(1)\n        Else\n            For Each oSheet_B In oDoc.Sheets\n                If oSheet_B.PartsLists.Count = 0 Then Continue For\n                oPartList = oSheet_B.PartsLists.Item(1)\n            Next\n        End If\n        If oPartList Is Nothing Then Continue For\n        For Each oRow As PartsListRow In oPartList.PartsListRows\n            Dim oRowFileName As String = oRow.ReferencedFiles.Item(1).FullFileName\n            If UCase(oModelFileName) <> UCase(oRowFileName) Then Continue For\n            Dim Title As String = iProperties.Value(\"Summary\", \"Title\")\n            Dim oItemValue As String = oRow.Item(\"Part Number\").Value\n            Dim oItemMaterial As String = oRow.Item(\"Material\").Value\n            Dim oItemQTY As String = oRow.Item(\"QTY\").Value\n            Dim oStringName As String = \"<StyleOverride Bold='True' FontSize='0.32'>\" & Title & \"-\" & oItemValue & \" </StyleOverride>\"\n            Dim oStringMaterial As String = \"<Br/><StyleOverride FontSize='0.305'>\" & oItemMaterial & \" </StyleOverride>\"\n            Dim oStringItem As String = \"<Br/><StyleOverride FontSize='0.305'>\" & \" QTY: \" & oItemQTY & \" </StyleOverride>\"\n            oView.ShowLabel = True\n            oView.Label.FormattedText = oStringName & oStringMaterial & oStringItem\n        Next\n    Next\nNext\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Change Sheet Metal Unfold Rule with ILogic\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Adding Occurence Error\n                    ", "solution": ["Public Sub Place_Part(sFilePath As String)\n    Dim oApp As Application = ThisApplication\n    Dim oDoc As Document = oApp.ActiveDocument\n    If oDoc.DocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then Exit Sub\n    Dim oOccs As ComponentOccurrences = oDoc.ComponentDefinition.Occurrences\n    \n    If CompExist(oOccs, sFilePath) Then\n        Dim ans As MsgBoxResult = MsgBox(\"Component already exists within assembly. Place component anyway?\", vbYesNo)\n        If ans <> vbYes Then Exit Sub\n    End If\n    \n    Dim oTG As TransientGeometry = oApp.TransientGeometry\n    Dim oMatrix As Matrix = oTG.CreateMatrix\n    Call oMatrix.SetToRotation(3.14159265358979 / 4, oTG.CreateVector(0, 0, 1), oTG.CreatePoint(0, 0, 0))\n    Call oMatrix.SetTranslation(oTG.CreateVector(1, 2, 1), True)\n    Call oOccs.Add(sFilePath, oMatrix)\nEnd Sub\n\nFunction CompExist(ByRef oOccs As ComponentOccurrences, sFilePath As String) As Boolean\n    For Each oOcc As ComponentOccurrence In oOccs\n        Dim sOccFilePath = oOcc.Definition.Document.FullFileName\n        If sOccFilePath = sFilePath Then Return True\n    Next\n    Return False\nEnd Function"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: ilogic turn sketch visibillity  on or off in subassembly\n                    ", "solution": [], "author": "Zierath_CAD"},
{"created at": [], "solution Title": "\n                        Re: export two part lists table to excel on two tabs using template\n                    ", "solution": ["    Dim oDOc As DrawingDocument\n    oDOc = ThisApplication.ActiveDocument\n\n\tDim oSheet As Sheet\n \toSheet = oDOc.Sheets.Item(1)\n\n\tDim oPartList As PartsList\n \toPartList = oSheet.PartsLists.Item(1)\n\n\tDim oOptions As NameValueMap\n\toOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n\toOptions.Value(\"Template\") = \"C:\\Temp\\Template.xls\"\n\t\n\tDim name As String = oDOc.DisplayName.Replace(\".idw\", \"\")\n\n\tCall oPartList.Export(\"C:\\Temp\\\" & name & \".xls\", PartsListFileFormatEnum.kMicrosoftExcel, oOptions)\n\n\tDim oPartList1 As PartsList\n        oPartList1 = oSheet.PartsLists.Item(2)\n \n    Call oPartList1.Export(\"C:\\Temp\\\" & name & \".xls\", PartsListFileFormatEnum.kMicrosoftExcel)\n\t\n\t\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Creating a .addin file as per DevTools Sample\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: using iLogic to read latest revision date\n                    ", "solution": ["Dim", " ", "oDoc", " ", "as", " ", "Document", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "editDoc", " ", "As", " ", "Document", "\n", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", " ", "=", " ", "oDoc", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", "\n", "editDoc", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", ".", "DrawingViews", "(", "1", ")", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", "\n", "Dim", " ", "invDesignInfo", " ", "As", " ", "PropertySet", "\n", "invDesignInfo", " ", "=", " ", "editDoc", ".", "PropertySets", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", "\n", "Dim", " ", "invPartNumberProperty", " ", "As", " ", "Inventor", ".", "Property", "\n", "invPartNumberProperty", " ", "=", " ", "invDesignInfo", ".", "Item", "(", "\"", "Part Number", "\"", ")", "\n", "invSummaryInfo", " ", "=", " ", "oDoc", ".", "PropertySets", ".", "Item", "(", "\"", "Inventor Summary Information", "\"", ")", "\n", "invRevNumberProperty", " ", "=", " ", "invsummaryInfo", ".", "Item", "(", "\"", "Revision Number", "\"", ")", "\n", "Dim", " ", "oPropSets", " ", "As", " ", "PropertySets", " \n", "oPropSets", " ", "=", " ", "oDoc", ".", "PropertySets", " \n", "Dim", " ", "oPropSet", " ", "As", " ", "PropertySet", " \n", "oPropSet", " ", "=", " ", "oPropSets", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", "\n\n\n", "Dim", " ", "RevDate", " ", "As", " ", "Date", " \n\n\n", "Dim", " ", "MyDwgRev", " ", "As", " ", "String", "\n", "MyDwgRev", " ", "=", " ", "invRevNumberProperty", ".", "Value", "\n", "If", " ", "MyDwgRev", " ", ">", " ", "0", "\n    ", "Dim", " ", "oTable", " ", "As", " ", "RevisionTable", " ", "=", " ", "oSheet", ".", "RevisionTables", ".", "Item", "(", "1", ")", "\n    ", "'", "total number of revision rows", "\n    ", "Dim", " ", "N", " ", "As", " ", "Integer", " ", "=", " ", "oTable", ".", "RevisionTableRows", ".", "Count", "\n    ", "'", "the last row in the table", "\n    ", "Dim", " ", "oRow", " ", "As", " ", "RevisionTableRow", " ", "=", " ", "oTable", ".", "RevisionTableRows", ".", "Item", "(", "N", ")", "\n    ", "RevDate", " ", "=", " ", "oRow", ".", "Item", "(", "3", ")", ".", "Text", " \n    ", "Else", "\n    ", "RevDate", " ", "=", " ", "oPropSets", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", ".", "Item", "(", "\"", "Engr Date Approved", "\"", ")", ".", "Value", "\n", "End", " ", "If", "\n", "'\n", "MessageBox", ".", "Show", "(", "RevDate", ", ", "\"", "Title", "\"", ")"], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: Part Rule to Run while Edit in Place at Assembly Level\n                    ", "solution": ["Sub Main()\nDim oDoc As Object = ThisApplication.ActiveEditObject\nIf Not TypeOf oDoc Is PartDocument Then Exit Sub\n\nDim oUP As UserParameters = oDoc.ComponentDefinition.Parameters.UserParameters\nDim oUP1 As UserParameter = oUP.AddByValue(\"CMF_COORD_X\", 0, UnitsTypeEnum.kFootLengthUnits)\nDim oUP2 As UserParameter = oUP.AddByValue(\"CMF_COORD_Y\", 0, UnitsTypeEnum.kFootLengthUnits)\nDim oUP3 As UserParameter = oUP.AddByValue(\"CMF_COORD_Z\", 0, UnitsTypeEnum.kFootLengthUnits)\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: sort parameter values\n                    ", "solution": ["Dim", " ", "MyArrayList", "(", "3", ")", " ", "As", " ", "Double", "\n", "MyArrayList", "(", "0", ")", " ", "=", " ", "43", "\n", "MyArrayList", "(", "1", ")", " ", "=", " ", "33", "\n", "MyArrayList", "(", "2", ")", " ", "=", " ", "6", "\n", "MyArrayList", "(", "3", ")", " ", "=", " ", "7", "\n\n", "Array", ".", "Sort", "(", "MyArrayList", ")", "\n", "For", " ", "Each", " ", "Str", " ", "As", " ", "Double", " ", "In", " ", "MyArrayList", "\n    ", "MsgBox", "(", "Str", ")", "\n", "Next", " "], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Error after saving with new file name in Ilogic\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: VBA Sheet Size doesnt work\n                    ", "solution": ["Dim", " ", "oSheets", " ", "As", " ", "Sheet", "\n", "Dim", " ", "oDrawingDoc", " ", "As", " ", "DrawingDocument", "\n ", "oDrawingDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n ", "oSheets", " ", "=", " ", "oDrawingDoc", ".", "ActiveSheet", "\n\n", "oSheets", ".", "Size", " ", "=", " ", "DrawingSheetSizeEnum", ".", "kCustomDrawingSheetSize", "\n\n", "oSheets", ".", "Width", " ", "=", " ", "250", " \n", "oSheets", ".", "Height", " ", "=", " ", "160"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Alter model value on multiple drawing sheets\n                    ", "solution": ["Dim oSheets As Sheets = ThisDoc.Document.Sheets\nFor Each oSheet In oSheets\n    Dim oView As DrawingView = oSheet.DrawingViews(1)\n    Dim oRefDoc As Inventor.Document = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\t\n    ", "'Define the property sets and get the material property", "\n    Dim oCustomSet As PropertySet = oRefDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n    Dim oDesignSet As PropertySet = oRefDoc.PropertySets.Item(\"Design Tracking Properties\")\n    Dim sMat As String = oDesignSet.Item(\"Material\").Expression\n\t\n    ", "'Look for the custom property and add it if not found", "\n    Dim oProp As Inventor.Property\n    Try\n        oProp = oCustomSet.Item(\"MATERIAL\")\n    Catch\n        oProp = oCustomSet.Add(\"\", \"MATERIAL\")\n    End Try\n\n    ", "'Set the value of the custom iProperty", "\n    oProp.Expression = sMat\nNext\n\niLogicVb.UpdateWhenDone = True"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Create Viewing by VBA\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Get first element of pattern\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: automate code\n                    ", "solution": ["s = Distance_To_Center\n\nDim MyList(3) As Double\nMyList(0) = X_Afstand_1_Ruit\nMyList(1) = X_Afstand_2_Ruit\nMyList(2) = X_Afstand_3_Ruit\nMyList(3) = X_Afstand_4_Ruit\n\nArray.Sort(MyList)\nMessageBox.Show(MyList(1), \"Co\ufffdrdinate left\")\nMessageBox.Show(MyList(2), \"Co\ufffdrdinate right\")\n", "'Don't repeat calculations, pre-calculate them", "Dim G As Double = (Binnen_diameter_Ruit / 2) + Laagdikte_Ruit\nDim I As Double = Abs(MyList(1)) / G\nDim J As Double = (Asin(I) * 180) / PI\nDim M As Double = Abs(MyList(2)) / G\nDim N As Double = (Asin(M) * 180) / PI", "'The mess that used to be here was your (current) problem", "'Formate your formulas to be HUMAN readable", "'In formulas: shorter =/= better", "Dim Q As Double = Nothing\nIf (MyList(2) < 0) And (MyList(1) < 0) Then", "    Q = J - N", "ElseIf (MyList(2) > 0) And (MyList(1) > 0) Then", "    Q = N - J\nElseIf (MyList(2) < 0) And (MyList(1) > 0) Then", "    Q = J + N\nEnd If\n\nMessageBox.Show(Q, \"angle\") "], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2017 API\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Running iLogic rule from Vb.net\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Activate project by using vba\n                    ", "solution": ["Sub ActivateProject()\n    Dim oProjMgr As DesignProjectManager\n    Set oProjMgr = ThisApplication.DesignProjectManager\n    \n    Dim oProj As DesignProjects\n    Set oProj = oProjMgr.DesignProjects\n    \n    Dim strProjects As String\n    Dim oPro As DesignProject\n    \n    For Each oPro In oProj\n    strProjects = strProjects & vbCrLf & oPro.Name\n    Next\n    \n    MsgBox LTrim(strProjects) & vbcrlf & \"You have \" & oProj.Count & \"project(s)\", vbOKOnly, \"Projects\"\n    \n    Dim x As String\n    x = InputBox(\"Type Project name to activate\")\n    \n    Dim oPr As DesignProject\n    Set oPr = oProj.ItemByName(x)\n    oPr.Activate\n    \n    MsgBox \"Project activated\" \nEnd Sub", "Private Sub btnOk_Click()\n            \n    Dim oProjMgr As DesignProjectManager\n    Set oProjMgr = ThisApplication.DesignProjectManager\n    \n    Dim oProj As DesignProjects\n    Set oProj = oProjMgr.DesignProjects\n    \n    Dim oPr As DesignProject\n    Set oPr = oProj.ItemByName(cboProjects.SelText)\n    oPr.Activate\n    \n    MsgBox \"Project activated\"\nEnd Sub\n\n\nPrivate Sub UserForm_Activate()\n    \n    Dim oProjMgr As DesignProjectManager\n    Set oProjMgr = ThisApplication.DesignProjectManager\n    \n    Dim oProj As DesignProjects\n    Set oProj = oProjMgr.DesignProjects\n    \n    Dim oPro As DesignProject\n    \n    For Each oPro In oProj\n        cboProjects.AddItem (oPro.Name)\n    Next\n    \n    lblProjects.Caption = \"You have \" & oProj.Count & \"project(s)\"\nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Export Sheet Metal Flat Pattern to DWG with options.\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "PartDocument", "\n", "oDoc", "=", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "oCompDef", "=", "oDoc", ".", "ComponentDefinition", "\n", "Dim", " ", "oDataIO", " ", "As", " ", "DataIO", "\n", "oDataIO", "=", "oDoc", ".", "ComponentDefinition", ".", "DataIO", "\n", "If", " ", "oCompDef", ".", "HasFlatPattern", "=", "False", " ", "Then", "\n", "oCompDef", ".", "Unfold", "\n", "Else", "\n", "oCompDef", ".", "FlatPattern", ".", "Edit", "\n", "End", " ", "If", "\n", "Dim", " ", "sOut", " ", "As", " ", "String", "\n", "sOut", "=", "\"", "FLAT PATTERN DWG?AcadVersion=2000", "\"", " ", "_", "\n", "+", "\"", "&InvisibleLayers=IV_TANGENT;IV_TOOL_CENTER;IV_TOOL_CENTER_DOWN;IV_ARC_CENTERS;IV_ALTREP_FRONT;IV_ALTREP_BACK;IV_UNCONSUMED_SKETCHES;IV_ROLL_TANGENT;IV_ROLL", "\"", " ", "_", "\n", "+", "\"", "&SimplifySplines=True", "\"", " ", "_", "\n", "+", "\"", "&LINEAR TOLERANCE=0.010", "\"", " ", "_", "\n", "+", "\"", "&MergeProfilesIntoPolyline=True", "\"", " ", "_", "\n", "+", "\"", "&RebaseGeometry=False", "\"", " ", "_", "\n", "+", "\"", "&TrimCenterlines=True", "\"", "\n", "Dim", " ", "sFname", " ", "As", " ", "String", "\n", "sFname", "=", "oDoc", ".", "FullFileName", "\n", "sFname", "=", "Left", "$", "(", "sFname", ",", "Len", "(", "sFname", ")", "-", "3", ")", "&", "\"", "dwg", "\"", "\n", "oCompDef", ".", "DataIO", ".", "WriteDataToFile", "(", "sOut", ",", "sFname", ")"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: iLogic color control features\n                    ", "solution": [], "author": "frank"},
{"created at": [], "solution Title": "\n                        Re: 10 mm steps\n                    ", "solution": ["s = length\nDim oVal As Double = Parameter(\"length\")\nIf (oVal Mod 10) = 0 Then Exit Sub\nMsgBox(\"Parameter 'length' must be a multiple of 10.\" & vblf & \"Current value: \" & oVal )"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Copy Derived Custom iProperties (Pt 2) - Check for Existing\n                    ", "solution": ["Dim oDerived As Inventor.Document = ThisApplication.ActiveDocument\nIf oDerived.ReferencedDocuments.Count = 0 Then Exit Sub\n\nDim oReferenced As Inventor.Document = oDerived.ReferencedDocuments(1)\n\nDim oDerProps As PropertySet = oDerived.PropertySets.Item(\"Inventor User Defined Properties\")\nDim oRefProps As PropertySet = oReferenced.PropertySets.Item(\"Inventor User Defined Properties\")\n\nDim oProList() As String = {\"", "CMF_DESGINATION", "\", \"", "OTHER_iPRO", "\"} ", "'Use \"*\" to copy all iPros", "\nFor Each oRefPro As Inventor.Property In oRefProps\n    Dim oSkip As Boolean = True\n    For Each ProName As String In oProList\n        If Ucase(ProName) <> Ucase(oRefPro.Name) And ProName <> \"*\" Then Continue For\n        oSkip = False\n        Exit For\n    Next\n    If oSkip Then Continue For\n    Dim oDerPro As Inventor.Property\n    Try\n        oDerPro = oDerProps(oRefPro.Name)\n    Catch\n        oDerPro = oDerProps.Add(\"\", oRefPro.Name)\n    End Try\n    oDerPro.Value = oRefPro.Value\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: ilogic loop\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Create Solid bodies from lumps\n                    ", "solution": ["Public Sub CreateIndividualBodies()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    ' Have the body to break apart selected and make sure it has multiple \"lumps\".\n    Dim selectedBody As SurfaceBody\n    Set selectedBody = ThisApplication.CommandManager.Pick(kPartBodyFilter, \"Select the body\")\n    \n    If selectedBody.FaceShells.count < 2 Then\n        MsgBox \"The selected body should have more than one \"\"Lump\"\".\"\n        Exit Sub\n    End If\n    \n    ' Create a collection to store the individual bodies.\n    Dim transBodies As ObjectCollection\n    Set transBodies = ThisApplication.TransientObjects.CreateObjectCollection\n        \n    Dim features As PartFeatures\n    Set features = partDoc.ComponentDefinition.features\n    \n    ' Iterate over each of the shells in the selected body.\n    Dim i As Integer\n    For i = 1 To selectedBody.FaceShells.count\n        Dim currentShell As FaceShell\n        Set currentShell = selectedBody.FaceShells.Item(i)\n        \n        ' Collect all of the faces in the body that are NOT in the current shell.\n        Dim shell As FaceShell\n        Dim facesToDelete As ObjectCollection\n        Set facesToDelete = ThisApplication.TransientObjects.CreateFaceCollection\n        For Each shell In selectedBody.FaceShells\n            If Not shell Is currentShell Then\n                Dim fc As Face\n                For Each fc In shell.faces\n                    Call facesToDelete.Add(fc)\n                Next\n            End If\n        Next\n        \n        ' Start a transaction and delete the faces.\n        Dim tran As Transaction\n        Set tran = ThisApplication.TransactionManager.StartTransaction(ThisApplication.ActiveDocument, \"Temp\")\n        Call features.DeleteFaceFeatures.Add(facesToDelete)\n        \n        ' Copy the body in the current state where only the current shell is part of it.\n        Call transBodies.Add(ThisApplication.TransientBRep.Copy(selectedBody))\n        \n        ' Abort the transaction.\n        tran.Abort\n    Next\n    \n    ' Create a base feature for each of the bodies.\n    Set tran = ThisApplication.TransactionManager.StartTransaction(ThisApplication.ActiveDocument, \"Break Lumps\")\n    Dim body As SurfaceBody\n    For Each body In transBodies\n        Dim baseFeature As NonParametricBaseFeature\n        Set baseFeature = features.NonParametricBaseFeatures.Add(body)\n    Next\n    \n    ' Turn off the visibility of the original body.\n    selectedBody.Visible = False\n    \n    ' End the transaction.\n    tran.End\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How to access part parameter in an assembly using VB.net\n                    ", "solution": ["oOcc.Edit() 'Edit the part file in the assembly\n                        Dim oPDoc As Inventor.Document\n                        oPDoc = _invApp.ActiveEditDocument\n\n                        Dim allParams As Parameters = oPDoc.ComponentDefinition.Parameters\n                        oParas = allParams.UserParameters\n\noOcc.ExitEdit(ExitTypeEnum.kExitToParent) 'Exist editing after finish", "oUserParams = oOcc.Definition.Parameters.UserParameters"], "author": "bwang-tecoustic"},
{"created at": [], "solution Title": "\n                        Re: inventor parameter update delay\n                    ", "solution": ["MessageBox", ".", "Show", "(", "Y_Afstand_1_Cil", ", ", "\"", "Co\u00f6rdinaat Y1", "\"", ")", "        \n", "MessageBox", ".", "Show", "(", "Y_Afstand_2_Cil", ", ", "\"", "Co\u00f6rdinaat Y2", "\"", ")", "    "], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Create workpoint from 3 planes\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: WorkPoint in arbitrary position in an assembly file?\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Cannot connect to inventor with API\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Betreff: Force Model Browser to update with new geometry\n                    ", "solution": ["public static void Button1_Execute()\n        {\n            log.Info(\"Radial Holes button was clicked!\");\n            Transaction trans = RadialHoles.m_InventorApp.TransactionManager.StartTransaction(RadialHoles.m_InventorApp.ActiveDocument, \"Radial Holes\");\n            reporter.UpdateStatusBar(\"Hello from the first button extension!\");\n            try\n            {\n                GetExcelData();\n                if (selectedAFaceAnAxisAndPlane())\n                {\n                    checkForAndClearExistingAttributes();\n                    createSketchForPoints();\n                    createSketchPointsFromList();\n                    createGeomForHolePositions();\n                    createHolesFromDefinitions();\n                    updateBrowserPane();\n                    \n                    //createWorkAxesForHolePoints();\n                }\n                \n            }\n            catch (Exception ex)\n            {\n                trans.Abort();\n                log.Error(ex.Message);\n                NullAllTheThings();\n            }\n            finally\n            {\n                trans.End();\n                \n                if(reporter != null)\n                {\n                    partDoc.Update();\n                    RadialHoles.m_InventorApp.ActiveView.Update();\n                    NullAllTheThings();\n                }\n                log.Info(\"Radial Holes completed.\");\n            }\n\n            \n        }"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: How to Hide components in a particular instance of a pattern using ilogic?\n                    ", "solution": [], "author": "sharathsb721"},
{"created at": [], "solution Title": "\n                        Re: [API] - Remove details from Revit Features\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: iLogic, multiple virtual component creation.\n                    ", "solution": ["Sub", " ", "Main", "\n    ", "Dim", " ", "valName", " ", "As", " ", "String", " \n    ", "Dim", " ", "oDoc", " ", "As", " ", "Document", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    ", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", " ", "=", " ", "oDoc", ".", "ComponentDefinition", "\n    ", "Dim", " ", "oTG", " ", "As", " ", "TransientGeometry", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", "\n    ", "Dim", " ", "oMatrix", " ", "As", " ", "Matrix", " ", "=", " ", "oTG", ".", "CreateMatrix", "\n    ", "Call", " ", "oMatrix", ".", "SetTranslation", "(", "oTG", ".", "CreateVector", "(", "0", ", ", "0", ", ", "0", "))", "\n    \n    ", "valName", "=", " ", "InputBox", "(", "\"", "ENTER SERIAL NUMBER", "\"", ", ", "\"", "SERIAL #", "\"", ", ", "\"\"", ")", "\n        \n    \n    ", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", "\n    ", "oOcc", " ", "=", " ", "oAsmCompDef", ".", "Occurrences", ".", "AddVirtual", "(", "valName", " ", "&", " ", "\"", " APPROVAL DWG", "\"", ", ", "oMatrix", ")", "\n    ", "oOcc", " ", "=", " ", "oAsmCompDef", ".", "Occurrences", ".", "AddVirtual", "(", "valName", " ", "&", " ", "\"", " KIT LIST", "\"", ", ", "oMatrix", ")", "\n    ", "oOcc", " ", "=", " ", "oAsmCompDef", ".", "Occurrences", ".", "AddVirtual", "(", "valName", " ", "&", " ", "\"", " WORK ORDER", "\"", ", ", "oMatrix", ")", "\n    ", "oOcc", " ", "=", " ", "oAsmCompDef", ".", "Occurrences", ".", "AddVirtual", "(", "valName", " ", "&", " ", "\"", " MANUAL", "\"", ", ", "oMatrix", ")", "\n    ", "oOcc", " ", "=", " ", "oAsmCompDef", ".", "Occurrences", ".", "AddVirtual", "(", "valName", " ", "&", " ", "\"", " REQ MEDIA", "\"", ", ", "oMatrix", ")", "\n", "End Sub"], "author": "msobalvarro"},
{"created at": [], "solution Title": "\n                        Re: Custom Browser: Selected object is unselected when editing iProperty\n                    ", "solution": ["If oSelection Is Nothing Then Exit Sub 'Nothing is selected, so quit", "Dim oItems As ObjectsEnumerator = ThisApplication.TransientObjects.CreateObjectCollection", "    Private Sub tbSubject_LostFocus(sender As Object, e As EventArgs) Handles tbSubject.LostFocus\n\n        ' Write the title to the document property\n        If tbSubject.Text <> _DisplayDocument.Subject Then\n\n            ' Get the selected items to be able to reselect them after\n            ' changes to the property is made.\n            Dim oSelectedItems As ObjectCollection = SelectSetCollection(_DisplayDocument.ReferencedDocument)\n\n            ' Update the subject property value\n            _DisplayDocument.Subject = tbSubject.Text\n\n            ' Update the document description\n            UpdateDescription()\n\n            ' Reselect the items if there were any selected, if there \n            ' were none selected the objectcollection Is nothing.\n            If Not oSelectedItems Is Nothing Then\n                _DisplayDocument.ReferencedDocument.SelectSet.SelectMultiple(oSelectedItems)\n            End If\n\n        End If\n\n    End Sub\n\n    Private Function SelectSetCollection(ByVal oDoc As Document) As ObjectCollection\n\n        ' Get the current document select set\n        Dim oSelectSet As SelectSet = oDoc.SelectSet\n\n        ' Check if there are are objects selected\n        If oSelectSet.Count = 0 Then\n\n            ' Return a null value\n            SelectSetCollection = Nothing\n\n        Else\n\n            ' Create a new object collection to store the selected objects\n            Dim oSelectedItems As ObjectCollection = _InvApp.TransientObjects.CreateObjectCollection\n\n            ' Loop the select set to add the items into the selection\n            For Each oSelectedItem As Object In oSelectSet\n\n                ' Add the item to the list\n                oSelectedItems.Add(oSelectedItem)\n\n            Next\n\n            ' Return the selected items\n            SelectSetCollection = oSelectedItems\n\n        End If\n\n    End Function"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: variable\n                    ", "solution": ["Sub Main()\n    ", "'This Sub will execute when your rule starts", "\n    A = 10\n    ShowValue(A)\n    A = GetNewValue(A, 10)\n    ShowValue(A)\nEnd Sub\n\nPrivate A As Integer\n\nPrivate Sub ShowValue(B As Integer)\n    MsgBox(CStr(B))\nEnd Sub\n\nPrivate Function GetNewValue(B As Integer, Addition As Integer) As Integer\n    Return (B + Addition)\nEnd Funtion"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How to change iProperties in multiple .idw files at the same time?\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: iLogic/api rule for subassembly constraints\n                    ", "solution": ["    Dim oAssyDoc As AssemblyDocument\n    oAssyDoc = ThisApplication.ActiveDocument\n\n    Dim oAssyDef As AssemblyComponentDefinition\n    oAssyDef = oAssyDoc.ComponentDefinition\n\n    'Plane need to be selected from the list \"L1_PLANE, L2_PLANE ..... L10_PLANE\"\n    Dim selectedPlane As WorkPlane\n    selectedPlane = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kWorkPlaneFilter, \"Select a plane to constraint\")\n\n    Dim oM As Matrix = ThisApplication.TransientGeometry.CreateMatrix()\n\n    Dim occ As ComponentOccurrence\n    occ = oAssyDef.Occurrences.Add(\"Path of subassembly\", oM)\n\n    Dim occDef As AssemblyComponentDefinition\n    occDef = occ.Definition\n\n    Dim subAssemblyPlane As WorkPlane\n    subAssemblyPlane = occDef.WorkPlanes.Item(2)\n\n    Dim planeProxy As WorkPlaneProxy\n    occ.CreateGeometryProxy(subAssemblyPlane, planeProxy)\n\n    Call oAssyDef.Constraints.AddMateConstraint(planeProxy, selectedPlane, \"0 in\")"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Need some macro help\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Need help to change layer of sketch entities using DrawingCurve Method\n                    ", "solution": ["Dim oDoc As DrawingDocument = ThisApplication.ActiveDocument\nDim oActiveSheet As Sheet = oDoc.ActiveSheet\nDim oView As DrawingView = oActiveSheet.DrawingViews(1)\nDim oRefDoc As AssemblyDocument = oView.ReferencedDocumentDescriptor.ReferencedDocument\nDim oAssDef As AssemblyComponentDefinition = oRefDoc.ComponentDefinition\nDim oOcc As ComponentOccurrence = oAssDef.Occurrences(1)\nDim oPart As PartDocument = oOcc.Definition.Document\nDim oDef As PartComponentDefinition = oPart.ComponentDefinition\n\nDim oSketch As PlanarSketch = oDef.Sketches(\"", "SK MTG Holes", "\")\nIf oSketch Is Nothing Then Exit Sub\nDim oProxy As PlanarSketchProxy\noOcc.CreateGeometryProxy(oSketch, oProxy)\nDim oTO As TransientObjects = ThisApplication.TransientObjects\nDim oColl As ObjectCollection = oTO.CreateObjectCollection()\n\nDim oCurves As DrawingCurvesEnumerator = oView.DrawingCurves(oProxy)\nFor Each oCurve As DrawingCurve In oCurves\n    For Each oSegment As DrawingCurveSegment In oCurve.Segments\n        oColl.Add(oSegment)\n    Next\nNext\n\nDim oLayer As Layer = oDoc.StylesManager.Layers.Item(\"", "COUNTERSINK1.0POLY_8(913)", "\")\nCall oView.Parent.ChangeLayer(oColl, oLayer)", "\tDim oDoc As DrawingDocument = ThisApplication.ActiveDocument\n\tDim oActiveSheet As Sheet = oDoc.ActiveSheet\n\tDim oView As DrawingView = oActiveSheet.DrawingViews(1)\n\tDim oRefDoc As AssemblyDocument = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\tDim oAssDef As AssemblyComponentDefinition = oRefDoc.ComponentDefinition\n\tDim oOcc As ComponentOccurrence = oAssDef.Occurrences(1)\n\tDim oPart As PartDocument = oOcc.Definition.Document\n\tDim oDef As PartComponentDefinition = oPart.ComponentDefinition\n\t\n\tDim oSketchName", "()", " As String = {\"SK MTG HOles\", \"SK Box MTG Holes\", \"SK Seal Mill\"}\n\tDim oLayerName", "()", " As String = {\"COUNTERSINK1.0POLY_8(913)\", \"DRILL1.0POLY.1562BIT(839)\", \"MILL.125BIT.8125DEEP(466)\"}\n", "\tIf oSketchName.Length <> oLayerName.Length Then", "\t\tMsgBox(\"The arrays must have the same length.\")", "\t\tExit Sub", "\tEnd If", "\tFor ", "i As Integer", " ", "= 0 To ", "(oSketchName.Length - 1)", "\n\t\tDim oSketch As PlanarSketch = oDef.Sketches(oSketchName", "(i)", ")\n\t\tIf oSketch Is Nothing Then ", "Continue For", "\n\t\tDim oProxy As PlanarSketchProxy\n\t\toOcc.CreateGeometryProxy(oSketch, oProxy)\n\t\tDim oTO As TransientObjects = ThisApplication.TransientObjects\n\t\tDim oColl As ObjectCollection = oTO.CreateObjectCollection()\n\t\t\n\t\tDim oCurves As DrawingCurvesEnumerator = oView.DrawingCurves(oProxy)\n\t\tFor Each oCurve As DrawingCurve In oCurves\n\t\t\tFor Each oSegment As DrawingCurveSegment In oCurve.Segments\n\t\t\t\toColl.Add(oSegment)\n\t\t\tNext\n\t\tNext\n\t\t\n\t\tDim oLayer As Layer = oDoc.StylesManager.Layers.Item(oLayerName", "(i)", ")\n\t\t", "If oLayer Is Nothing Then Continue For", "\n\t\tCall oView.Parent.ChangeLayer(oColl, oLayer)\n\tNext", "\tDim oDoc As DrawingDocument = ThisApplication.ActiveDocument\n\tDim oActiveSheet As Sheet = oDoc.ActiveSheet\n\tDim oView As DrawingView = oActiveSheet.DrawingViews(1)\n\tDim oRefDoc As AssemblyDocument = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\tDim oAssDef As AssemblyComponentDefinition = oRefDoc.ComponentDefinition\n\tDim oOcc As ComponentOccurrence = oAssDef.Occurrences(1)\n\tDim oPart As PartDocument = oOcc.Definition.Document\n\tDim oDef As PartComponentDefinition = oPart.ComponentDefinition\n\t\n\t", "For Each oSketch As PlanarSketch In oDef.Sketches\n\t\tDim oLayerName As String = vbNullString\n\t\tSelect Case oSketch.Name\n\t\tCase \"SK MTG HOles\":\t\toLayerName = \"COUNTERSINK1.0POLY_8(913)\"\n\t\tCase \"SK Box MTG Holes\":\toLayerName = \"DRILL1.0POLY.1562BIT(839)\"\n\t\tCase \"SK Seal Mill\":\t\toLayerName = \"MILL.125BIT.8125DEEP(466)\"\n\t\tCase Else:\t\t\tContinue For\n\t\tEnd Select", "\n\t\tDim oProxy As PlanarSketchProxy\n\t\toOcc.CreateGeometryProxy(oSketch, oProxy)\n\t\tDim oTO As TransientObjects = ThisApplication.TransientObjects\n\t\tDim oColl As ObjectCollection = oTO.CreateObjectCollection()\n\t\t\n\t\tDim oCurves As DrawingCurvesEnumerator = oView.DrawingCurves(oProxy)\n\t\tFor Each oCurve As DrawingCurve In oCurves\n\t\t\tFor Each oSegment As DrawingCurveSegment In oCurve.Segments\n\t\t\t\toColl.Add(oSegment)\n\t\t\tNext\n\t\tNext\n\t\t\n\t\tDim oLayer As Layer = oDoc.StylesManager.Layers.Item(oLayerName)\n\t\t", "If oLayer Is Nothing Then Continue For", "\n\t\tCall oView.Parent.ChangeLayer(oColl, oLayer)\n\tNext", "AddReference \"System.XML.dll\"\nAddReference \"System.Data.dll\"\nSub Main()\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n\tIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\n\tDim oActiveSheet As Sheet = oDoc.ActiveSheet\n\tDim oView As DrawingView = oActiveSheet.DrawingViews(1)\n\tDim oRefDoc As AssemblyDocument = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\tDim oAssDef As AssemblyComponentDefinition = oRefDoc.ComponentDefinition\n\tDim oOcc As ComponentOccurrence = oAssDef.Occurrences(1)\n\tDim oPart As PartDocument = oOcc.Definition.Document\n\tDim oDef As PartComponentDefinition = oPart.ComponentDefinition\n\t\n\tAddDT()\n\n\tFor Each oSketch As PlanarSketch In oDef.Sketches\n\t\tDim oLayerName As String = GetLayerName(oSketch.Name)\n\t\tIf oLayerName = vbNullString Then Continue For\n\t\tDim oProxy As PlanarSketchProxy\n\t\toOcc.CreateGeometryProxy(oSketch, oProxy)\n\t\tDim oTO As TransientObjects = ThisApplication.TransientObjects\n\t\tDim oColl As ObjectCollection = oTO.CreateObjectCollection()\n\t\t\t\n\t\tDim oCurves As DrawingCurvesEnumerator = oView.DrawingCurves(oProxy)\n\t\tFor Each oCurve As DrawingCurve In oCurves\n\t\t\tFor Each oSegment As DrawingCurveSegment In oCurve.Segments\n\t\t\t\toColl.Add(oSegment)\n\t\t\tNext\n\t\tNext\n\t\t\n\t\tDim oLayer As Layer = oDoc.StylesManager.Layers.Item(oLayerName)\n\t\tIf oLayer Is Nothing Then Continue For\n\t\tCall oView.Parent.ChangeLayer(oColl, oLayer)\n\tNext\nEnd Sub\n\nPrivate DT As System.Data.DataTable\n\nSub AddDT()\n\tDT = New System.Data.DataTable\n\tDT.Columns.Add(\"Sketch\", GetType(String))\n\tDT.Columns.Add(\"Layer\", GetType(String))\n\tGoExcel.Open(\"", "Sketch Layer Names.xlsx", "\")\n\tFor rowNumber = 2 To 10000\n\t\tDim S As String = GoExcel.CellValue(\"A\" & rowNumber)\n\t\tDim L As String = GoExcel.CellValue(\"B\" & rowNumber)\n\t\tIf S = vbNullString Then Exit For\n\t\tDT.Rows.Add(S, L)\n\tNext\nEnd Sub\n\nFunction GetLayerName(oSketchName As String) As String\n\tIf DT Is Nothing Then Return vbNullString\n\tIf DT.Rows.Count = 0 Then Return vbNullString\n\tDim oRow() As System.Data.DataRow = DT.Select(\"Sketch = '\" & oSketchName & \"'\")\n\tIf oRow.Length = 0 Then Return vbNullString\n\tReturn oRow(0)(\"Layer\").ToString\nEnd Function", "AddReference \"System.XML.dll\"\nAddReference \"System.Data.dll\"\nSub Main()\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n\tIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\n\tDim oActiveSheet As Sheet = oDoc.ActiveSheet\n\tDim oView As DrawingView = oActiveSheet.DrawingViews(1)\n\tDim oRefDoc As AssemblyDocument = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\tDim oAssDef As AssemblyComponentDefinition = oRefDoc.ComponentDefinition\n\tDim oOcc As ComponentOccurrence = oAssDef.Occurrences(1)\n\tDim oPart As PartDocument = oOcc.Definition.Document\n\tDim oDef As PartComponentDefinition = oPart.ComponentDefinition\n\t\n\tAddDT()\n\n\tFor Each oSketch As PlanarSketch In oDef.Sketches\n\t\tDim oSketchName As String = oSketch.Name\n\t\tDim FNP As Integer = InStrRev(oSketchName, \"-\", -1)\n\t\tIf FNP = 0 Then Continue For ", "'Catch non-present \"-\"", "\n\t\tIf FNP = Len(oSketchName) Then Continue For ", "'Catch \"-\" at the end", "\n\t\toSketchName = Mid(oSketchName, FNP + 1)", "\t\tIf Not IsNumeric(oSketchName) Then Continue For ", "'Check if it's a number", "\t\tDim oLayerName As String = GetLayerName(oSketchName)\n\t\tIf oLayerName = vbNullString Then Continue For\n\t\tDim oProxy As PlanarSketchProxy\n\t\toOcc.CreateGeometryProxy(oSketch, oProxy)\n\t\tDim oTO As TransientObjects = ThisApplication.TransientObjects\n\t\tDim oColl As ObjectCollection = oTO.CreateObjectCollection()\n\t\t\t\n\t\tDim oCurves As DrawingCurvesEnumerator = oView.DrawingCurves(oProxy)\n\t\tFor Each oCurve As DrawingCurve In oCurves\n\t\t\tFor Each oSegment As DrawingCurveSegment In oCurve.Segments\n\t\t\t\toColl.Add(oSegment)\n\t\t\tNext\n\t\tNext\n\t\t\n\t\tDim oLayer As Layer = oDoc.StylesManager.Layers.Item(oLayerName)\n\t\tIf oLayer Is Nothing Then Continue For\n\t\tCall oView.Parent.ChangeLayer(oColl, oLayer)\n\tNext\nEnd Sub\n\nPrivate DT As System.Data.DataTable\n\nSub AddDT()\n\tDT = New System.Data.DataTable\n\tDT.Columns.Add(\"Sketch\", GetType(String))\n\tDT.Columns.Add(\"Layer\", GetType(String))\n\tGoExcel.Open(\"MasterLayerList.xlsx\")\n\tFor rowNumber = 2 To 10000\n\t\tDim S As String = GoExcel.CellValue(\"A\" & rowNumber)\n\t\tDim L As String = GoExcel.CellValue(\"B\" & rowNumber)\n\t\tIf S = vbNullString Then Exit For\n\t\tDT.Rows.Add(S, L)\n\tNext\nEnd Sub\n\nFunction GetLayerName(oSketchName As String) As String\n\tIf DT Is Nothing Then Return vbNullString\n\tIf DT.Rows.Count = 0 Then Return vbNullString\n\tDim oRow() As System.Data.DataRow = DT.Select(\"Sketch = '\" & oSketchName & \"'\")\n\tIf oRow.Length = 0 Then Return vbNullString\n\tReturn oRow(0)(\"Layer\").ToString\nEnd Function", "AddReference \"System.XML.dll\"\nAddReference \"System.Data.dll\"\nSub Main()\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n\tIf oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then Exit Sub\n\tDim oActiveSheet As Sheet = oDoc.ActiveSheet\n\t\n\tAddDT()\n\t\n\tFor Each oView As DrawingView In oActiveSheet.DrawingViews\t\n\t\tDim oRefDoc As Document = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\t\tDim oCD As ComponentDefinition = oRefDoc.ComponentDefinition\n\t\tDim IsAssy As Boolean = (oRefDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject)\n\t\tIf Not IsAssy Then\n\t\t\tWork_a_File(oDoc, oView, Nothing, oCD)\n\t\tElse\n\t\t\tIf oCD.Occurrences.Count = 0 Then Continue For\n\t\t\tFor Each oOcc As ComponentOccurrence In oCD.Occurrences\n\t\t\t\toRefDoc = oOcc.Definition.Document\n\t\t\t\tIf oRefDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then Continue For\n\t\t\t\toCD = oRefDoc.ComponentDefinition\n\t\t\t\tWork_a_File(oDoc, oView, oOcc, oCD)\n\t\t\tNext\n\t\tEnd If\n\tNext\nEnd Sub\n\nPrivate Sub Work_a_File(oDoc As Document, oView As DrawingView, oOcc As ComponentOccurrence, oCD As ComponentDefinition)\n\tFor Each oSketch As PlanarSketch In oCD.Sketches\n\t\tDim oSketchName As String = oSketch.Name\n\t\tDim FNP As String = InStrRev(oSketchName, \"-\", -1)\n\t\tIf FNP = 0 Then Continue For 'Catch non-present \"-\"\n\t\tIf FNP = Len(oSketchName) Then Continue For 'Catch \"-\" at the end\n\t\toSketchName = Mid(oSketchName, FNP + 1)\n\t\tIf Not IsNumeric(oSketchName) Then Continue For 'Check if it's a number\n\t\tDim oLayerName As String = GetLayerName(oSketchName)\n\t\tIf oLayerName = vbNullString Then Continue For\n\t\tDim oTO As TransientObjects = ThisApplication.TransientObjects\n\t\tDim oColl As ObjectCollection = oTO.CreateObjectCollection()\n\t\tDim oCurves As DrawingCurvesEnumerator\n\t\tIf oOcc IsNot Nothing Then\n\t\t\tDim oProxy As PlanarSketchProxy\n\t\t\toOcc.CreateGeometryProxy(oSketch, oProxy)\n\t\t\toCurves = oView.DrawingCurves(oProxy)\n\t\tElse\n\t\t\toCurves = oView.DrawingCurves(oSketch)\n\t\tEnd If\n\t\tFor Each oCurve As DrawingCurve In oCurves\n\t\t\tFor Each oSegment As DrawingCurveSegment In oCurve.Segments\n\t\t\t\toColl.Add(oSegment)\n\t\t\tNext\n\t\tNext\n\t\n\t\tDim oLayer As Layer = oDoc.StylesManager.Layers.Item(oLayerName)\n\t\tIf oLayer Is Nothing Then Continue For\n\t\tCall oView.Parent.ChangeLayer(oColl, oLayer)\n\tNext\nEnd Sub\n\nPrivate DT As System.Data.DataTable\n\nSub AddDT()\n\tDT = New System.Data.DataTable\n\tDT.Columns.Add(\"Sketch\", GetType(String))\n\tDT.Columns.Add(\"Layer\", GetType(String))\n\tGoExcel.Open(\"MasterLayerList.xlsx\")\n\tFor rowNumber = 2 To 10000\n\t\tDim S As String = GoExcel.CellValue(\"A\" & rowNumber)\n\t\tDim L As String = GoExcel.CellValue(\"B\" & rowNumber)\n\t\tIf S = vbNullString Then Exit For\n\t\tDT.Rows.Add(S, L)\n\tNext\nEnd Sub\n\nFunction GetLayerName(oSketchName As String) As String\n\tIf DT Is Nothing Then Return vbNullString\n\tIf DT.Rows.Count = 0 Then Return vbNullString\n\tDim oRow() As System.Data.DataRow = DT.Select(\"Sketch = '\" & oSketchName & \"'\")\n\tIf oRow.Length = 0 Then Return vbNullString\n\tReturn oRow(0)(\"Layer\").ToString\nEnd Function\u00a0\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: ILOGIC / VBA: rename default plans\n                    ", "solution": ["For Each oWorkPlane In ThisDoc.Document.ComponentDefinition.WorkPlanes\n\tSelect Case oWorkPlane.Name \n\t\tCase \"YZ Plane - RIGHT\", \"XZ Plane - TOP\", \"XY Plane - FRONT\"\n\t\t\toWorkPlane.Visible = False\n\t\tCase \"YZ Plane\"\n\t\t\toWorkPlane.Name = \"YZ Plane - RIGHT\"\n\t\tCase \"XZ Plane\"\n\t\t\toWorkPlane.Name = \"XZ Plane - TOP\"\n\t\tCase \"XY Plane\"\n\t\t\toWorkPlane.Name = \"XY Plane - FRONT\"\n\t\tCase Else\n\t\t\t'MessageBox.Show(\"Planos n\u00e3o encontrados\", \"Planos\")\n\tEnd Select\nNext"], "author": "Marco_Cruz"},
{"created at": [], "solution Title": "\n                        Re: Wait while user selects browsernodes in drawing\n                    ", "solution": ["Imports System.Collections.Generic\n\nPublic Class frmLayerSynchronisation\n    Private selectedLayerName As String = \"\"\n\n    Public Sub New()\n        ' This call is required by the designer.\n        InitializeComponent()\n\n        Me.Text = \"Layers\"\n        Me.Top = 0\n        Me.Left = 0\n        Me.Width = 200\n        Me.Height = 50\n\n        'define quantity of needed radiobuttons for all specific GREEFA layers and create them\n        Dim aPanel As New UserControl\n        aPanel.Top = 0\n        aPanel.Left = 0\n        aPanel.Width = 200\n        aPanel.Height = 200\n        Me.Controls.Add(aPanel)\n\n        Dim radioButtonCounter As Integer = 0\n\n        Dim oINVdwg As Inventor.DrawingDocument = m_inventorApplication.ActiveDocument\n        Dim lastRadioButtonTop As Integer = 0\n\n        For Each oLayer As Inventor.Layer In oINVdwg.StylesManager.Layers\n            If oLayer.Name.Contains(\"GREEFA\") Or oLayer.Name = \"0\" Then\n                Dim aRadioButton As New RadioButton\n                aRadioButton.Text = oLayer.Name\n                Dim aINVColor As Inventor.Color = oLayer.Color\n                aRadioButton.ForeColor = Color.Black\n                If oLayer.Name.Contains(\"GREEFA\") Then aRadioButton.BackColor = Color.FromArgb(aINVColor.Red, aINVColor.Green, aINVColor.Blue)\n                aRadioButton.Left = 5\n                aRadioButton.Top = radioButtonCounter * 20\n                aRadioButton.Width = 200\n                aPanel.Controls.Add(aRadioButton)\n                AddHandler aRadioButton.Click, AddressOf RadioButton_Clicked\n\n                radioButtonCounter = radioButtonCounter + 1\n                lastRadioButtonTop = aRadioButton.Top\n                Me.Height = Me.Height + 20\n            End If\n        Next\n\n        'add a command button\n        Dim aCommandButton As New Button\n        With aCommandButton\n            .Text = \"OK\"\n            .Left = 100\n            .Top = lastRadioButtonTop + 30\n            .Width = 75\n            aPanel.Controls.Add(aCommandButton)\n            AddHandler aCommandButton.Click, AddressOf Button_Clicked\n            Me.Height = Me.Height + 20\n        End With\n\n\n        'collapse browser van 1e view en 1e assembly\n        Dim oINVDrawingDoc As Inventor.DrawingDocument = m_inventorApplication.ActiveDocument\n        Dim oTopBrowserNode As Inventor.BrowserNode\n        oTopBrowserNode = oINVDrawingDoc.BrowserPanes.ActivePane.TopNode\n        Dim oBladBrowserNode As Inventor.BrowserNode = oTopBrowserNode.BrowserNodes(\"Blad:1\")\n\n        For Each oViewBrowserNode As Inventor.BrowserNode In oBladBrowserNode.BrowserNodes\n            If oViewBrowserNode.FullPath.Contains(\"VIEW\") Then\n                For Each oAsmBrowserNode As Inventor.BrowserNode In oViewBrowserNode.BrowserNodes\n                    Dim oAsmBrowserNodeDefinition As Inventor.BrowserNodeDefinition = oAsmBrowserNode.BrowserNodeDefinition\n                    If oAsmBrowserNodeDefinition.Label = (Replace(oTopBrowserNode.FullPath, \"dwg\", \"iam\")) Then\n                        oAsmBrowserNode.Expanded = True\n                        GoTo ENDFOR\n                    End If\n                Next\n            End If\n        Next\nENDFOR:\n    End Sub\n\n    Private Sub RadioButton_Clicked(sender As Object, e As EventArgs)\n        Dim oRadiobutton As RadioButton = sender\n\n        selectedLayerName = oRadiobutton.Text\n    End Sub\n\n    Private Sub Button_Clicked(sender As Object, e As EventArgs)\n        Dim oObjectCollection As Inventor.ObjectCollection = m_inventorApplication.TransientObjects.CreateObjectCollection\n        Dim oINVDrawingDoc As Inventor.DrawingDocument = m_inventorApplication.ActiveDocument\n\n        'voer uit\n        Dim oComponentOccurrencesEnumerator As Inventor.ComponentOccurrencesEnumerator = Nothing\n\n        'loop door 1e view en assembly om de geselecteerde items vast te leggen\n        Dim oTopBrowserNode As Inventor.BrowserNode\n        oTopBrowserNode = oINVDrawingDoc.BrowserPanes.ActivePane.TopNode\n        Dim oBladBrowserNode As Inventor.BrowserNode = oTopBrowserNode.BrowserNodes(\"Blad:1\")\n        Dim assemblyName As String = (Replace(oTopBrowserNode.FullPath, \"dwg\", \"iam\"))\n\n        'Dim oBladBrowserNode As Inventor.BrowserNode = oTopBrowserNode.BrowserNodes(\"Blad:1\")\n        Dim oListOfSelectedBrowserNodeNames As New List(Of String)\n\n        For Each oViewBrowserNode As Inventor.BrowserNode In oBladBrowserNode.BrowserNodes\n            'select first view\n            If oViewBrowserNode.FullPath.Contains(\"VIEW\") Then\n                Dim oFirstViewBrowserNode As Inventor.BrowserNode = oViewBrowserNode\n                For Each oAsmBrowserNode As Inventor.BrowserNode In oFirstViewBrowserNode.BrowserNodes\n                    Dim oAsmBrowserNodeDefinition As Inventor.BrowserNodeDefinition = oAsmBrowserNode.BrowserNodeDefinition\n                    If oAsmBrowserNodeDefinition.Label = assemblyName Then\n                        'get selected browsernodes\n                        oObjectCollection = GetAllDrawingCurvesOfSelectedBrowserNodes(oAsmBrowserNode, oObjectCollection)\n                        Exit For\n                    End If\n                Next\n            End If\n        Next\n\n        Dim oSheet As Inventor.Sheet = oINVDrawingDoc.ActiveSheet\n        Dim oLayer As Inventor.Layer = oINVDrawingDoc.StylesManager.Layers.Item(selectedLayerName)\n        'change layer for curves collection\n        Call oSheet.ChangeLayer(oObjectCollection, oLayer)\n        oSheet.Update()\n\n        Me.Close()\n\n    End Sub\n\n    Private Function GetAllDrawingCurvesOfSelectedBrowserNodes(ByVal oStartBrowserNode As Inventor.BrowserNode, ByVal oObjectCollection As Inventor.ObjectCollection) As Inventor.ObjectCollection\n        Dim oINVDrawingDoc As Inventor.DrawingDocument = m_inventorApplication.ActiveDocument\n        Dim oSheet As Inventor.Sheet = oINVDrawingDoc.ActiveSheet\n\n        'loop through browsernodes of startBrowserNode\n        For Each oBrowserNode As Inventor.BrowserNode In oStartBrowserNode.BrowserNodes\n            Try\n                Dim oNativeObj As Object = oBrowserNode.NativeObject\n                'Check if browsernode is of type ComponentOccurrence\n                If TypeName(oNativeObj) = \"ComponentOccurrence\" Then\n                    'check if browsernode is selected\n                    If oBrowserNode.Selected = True Then\n                        Try\n                            'loop through all drawingviews to get all teh drawingcurves to change layer\n                            For Each oDrawView As Inventor.DrawingView In oSheet.DrawingViews\n                                'check if drawingView is not shaded\n                                If oDrawView.ViewStyle <> Inventor.DrawingViewStyleEnum.kShadedDrawingViewStyle Then\n                                    Dim oCurveEnum As Inventor.DrawingCurvesEnumerator = Nothing\n                                    Try\n                                        'get all the drawingcurves of selected browsernode in this drawingview\n                                        oCurveEnum = oDrawView.DrawingCurves(oNativeObj)\n                                    Catch\n                                        Try\n                                            'nested part occurrence requires another approach\n                                            Dim oParentCompOcc As Inventor.ComponentOccurrence = oStartBrowserNode.NativeObject\n                                            Dim oCompOccProxy As Object = Nothing\n                                            Call oParentCompOcc.CreateGeometryProxy(oNativeObj, oCompOccProxy)\n                                            oCurveEnum = oDrawView.DrawingCurves(oCompOccProxy)\n                                        Catch\n\n                                        End Try\n                                    End Try\n\n                                    'add segments to collection to be moved to required layer\n                                    For Each oCurve As Inventor.DrawingCurve In oCurveEnum\n                                        For Each oSegment As Inventor.DrawingCurveSegment In oCurve.Segments\n                                            Call oObjectCollection.Add(oSegment)\n                                        Next\n                                    Next\n                                End If\n                            Next\n                        Catch ex As Exception\n\n                        End Try\n\n                    Else    'check SubBrowserNodes\n                        Call GetAllDrawingCurvesOfSelectedBrowserNodes(oBrowserNode, oObjectCollection)\n                    End If\n                End If\n            Catch ex As Exception\n\n            End Try\n        Next\n\n        Return oObjectCollection\n    End Function\n\nEnd Class"], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: Where to send an API documentation error report?\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How to search for a component in an assembly  with a keyword using ilogic\n                    ", "solution": [], "author": "sharathsb721"},
{"created at": [], "solution Title": "\n                        Re: Problem with GoExcel.FindRow\n                    ", "solution": ["Sub Main()\nDim oExcelPath As String = \"", "\\\\192.168.7.10\\dessins$\\Inventor\\iLogic\\Liste_materiau.xlsx", "\"\nIf Not System.IO.File.Exists(oExcelPath) Then\n\tMessageBox.Show(\"Can't access the Excel file.\", \"Inaccessible file\")\n\tExit Sub\nEnd If\nDim oExcelSheet As String = \"Feuil1\"\nDim oDoc As Document = ThisApplication.ActiveDocument\n", "'Run juste si c'est un .ipt", "\nIf oDoc.DocumentType <> kPartDocumentObject Then Exit Sub\nDim propName As String = \"Description_Materiau\"\nDim propValue As String = \"Description Materiau\"\n", "'Get a reference to the PropertySets\n'We're really only using Design Tracking Properties in this case though", "\nDim oPropSet1 As PropertySet = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\nDim oPropSet2 As PropertySet = oDoc.PropertySets.Item(\"Design Tracking Properties\")\nDim oPropSet3 As PropertySet = oDoc.PropertySets.Item(\"Inventor Summary Information\")\nDim oProp As Inventor.Property\nTry\n\toProp = oPropSet1(propName)\nCatch\n\toProp = oPropSet1.Add(\"\", propName)\nEnd Try\noProp.Value = propValue\n\nDim SN As String = oPropSet2.Item(\"Stock Number\").Value\nIf SN = vbNullString Then\n\tMessageBox.Show(\"Le num\ufffdro de mat\ufffdriel n'est pas entr\ufffd\", \"Stock Number non-entr\ufffd\")\n\tExit Sub\nEnd If\n\n", "'Start Excel", "\nStartExcel(oExcelPath)\nIf oWS Is Nothing Then Exit Sub\n\n", "'Get the column ID", "\nDim ColumnID As Integer = GetColumnID(\"Stock_Number\")\nIf ColumnID = 0 Then\n\tMessageBox.Show(\"Column 'Stock_Number' was not found\", \"Wrong column name\")\n\tStopExcel()\n\tExit Sub\nEnd If\n\n", "'Get the Excel row", "\nDim RowID As Integer = GetRowID(ColumnID, SN)\nColumnID = GetColumnID(propName)\nIf RowID > 0 And ColumnID > 0 Then\n\t", "'Get value from the Excel cell", "\n\toProp.Value = GetRowValue(ColumnID, RowID)\nElse\n\tMessageBox.Show(\"Le num\ufffdro de mat\ufffdriel n'existe pas dans la liste Excel. Ajouter le num\ufffdro de mat\ufffdriel dans la liste ainsi que sa description et r\ufffdessayer.\", \"Description non-trouv\ufffde\")\nEnd If\n\n", "'Stop Excel", "\nStopExcel()\nEnd Sub\n\nPrivate oExcel As Object = Nothing\nPrivate oWB As Object = Nothing\nPrivate oWS As Object = Nothing\n\nSub StartExcel(oExcelPath As String)\n\tTry\n\t\toExcel = CreateObject(\"Excel.Application\")\n\t\toWB = oExcel.Workbooks.Open(oExcelPath)\n\t\toWS = oWB.Sheets(1)\n\t\toExcel.Visible = False\n\t\toExcel.DisplayAlerts = False\n\t\toWS.Activate\n\tCatch\n\t\tStopExcel()\n\tEnd Try\nEnd Sub\n\nSub StopExcel()\n\tOn Error Resume Next\n\toWB.Close (True)\n\toExcel.Quit()\nEnd Sub\n\nFunction GetColumnID(oValue As String) As Integer\n\tIf oWS Is Nothing Then Return 0\n\tDim ID As Integer = 1\n\tTry\n\tWhile True\n\t\tDim CV As String = oWS.Cells(1, ID).Value\n\t\tIf CV = oValue Then Exit While\n\t\tIf CV = vbNullString Then\n\t\t\tID = 0\n\t\t\tExit While\n\t\tEnd If\n\t\tID = ID + 1\n\tEnd While\n\tCatch\n\tEnd Try\n\tReturn ID\nEnd Function\n\nFunction GetRowID(ColumnID As Integer, oValue As String) As Integer\n\tIf oWS Is Nothing Then Return 0\n\tDim ID As Integer = 1\n\tTry\n\tWhile True\n\t\tDim CV As String = oWS.Cells(ID, ColumnID ).Value\n\t\tIf CV = oValue Then Exit While\n\t\tIf CV = vbNullString Then\n\t\t\tID = 0\n\t\t\tExit While\n\t\tEnd If\n\t\tID = ID + 1\n\tEnd While\n\tCatch\n\tEnd Try\n\tReturn ID\nEnd Function\n\nFunction GetRowValue(ColumnID As Integer, RowID As String) As String\n\tIf oWS Is Nothing Then Return vbNullString\n\tDim ID As String = vbNullString\n\tTry\n\t\tID = oWS.Cells(RowID, ColumnID ).Value\n\tCatch\n\tEnd Try\n\tReturn ID\nEnd Function"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: rename or saveas?\n                    ", "solution": ["Sub Main()\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n\tDim oFD As FileDialog\n\tCall ThisApplication.CreateFileDialog(oFD)\n\toFD.Filter = \"Inventor Files (*.idw;*.iam;*.ipt)|*.idw;*.iam;*.ipt\"\n\toFD.FilterIndex = 1\n\toFD.DialogTitle = \"Select folder and new filename for new drawing / assembly / file.\"\n\toFD.InitialDirectory = oDoc.FullFileName\n\toFD.ShowSave()\n\tDim oNewName As String = oFD.FileName\n\tIf oNewName = vbNullString Then Exit Sub\n\tDim FNP As Integer = InStrRev(oNewName, \".\", -1)\n\tIf FNP > 0 And FNP > Len(oNewName) - 4 Then\n\t\toNewName = Left(oNewName, FNP)\n\tElse\n\t\toNewName = oNewName & \".\"\n\tEnd If\n\tIf oDoc.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then\n\t\tFromDrawing(oDoc, oNewName)\n\tElse\n\t\tFromPart(oDoc, oNewName)\n\tEnd If\nEnd Sub\n\nSub FromDrawing(oDoc As DrawingDocument, oNewName As String)\n\tDim oSheet As Sheet = oDoc.Sheets.Item(1)\n\tDim pNewName As String = vbNullString\n\tIf oSheet.DrawingViews.Count > 0 Then\n\t\tDim oView As DrawingView = oSheet.DrawingViews.Item(1)\n\t\tDim pDoc As Document = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\t\tpNewName = SavePart(pDoc, oNewName)\n\t\tpDoc.Close(True)\n\tEnd If\n\tSaveDrawing(oDoc, oNewName, pNewName)\nEnd Sub\n\nSub FromPart(oDoc As Document, oNewName As String)\n\tDim OldName As String = oDoc.FullFileName\n\tDim pNewName As String = SavePart(oDoc, oNewName)\n\tDim FNP As Integer = InStrRev(OldName, \".\", -1)\n\tOldName = Left(OldName, FNP) & \"idw\"\n\tDim pDoc As DrawingDocument = ThisApplication.Documents.Open(OldName, True)\n\tSaveDrawing(pDoc, oNewName, pNewName)\nEnd Sub\n\nFunction SavePart(oDoc As Document, oNewName As String) As String\n\tDim Ext As String = GetExt(oDoc)\n\tIf Ext = vbNullString Then Return vbNullString\n\tDim NewName As String = oNewName & Ext\n\toDoc.SaveAs(NewName, True)\n\tReturn NewName\nEnd Function\n\nSub SaveDrawing(oDoc As DrawingDocument, oNewName As String, pNewName As String)\n\tDim NewName As String = oNewName & \"idw\"\n\toDoc.SaveAs(NewName, False)\n\toDoc.Close(True)\n\tIf pNewName = vbNullString Then Exit Sub\n\tDim nDoc As DrawingDocument = ThisApplication.Documents.Open(NewName, True)\n\tDim oRefFile As Inventor.FileDescriptor = nDoc.File.ReferencedFileDescriptors(1)\n\tTry\n\t\toRefFile.ReplaceReference(pNewName)\n\tCatch\n\tEnd Try\n\tnDoc.Save()\nEnd Sub\n\nFunction GetExt(oDoc As Document) As String\n\tSelect Case oDoc.DocumentType\n\tCase DocumentTypeEnum.kPartDocumentObject:\tReturn \"ipt\"\n\tCase DocumentTypeEnum.kAssemblyDocumentObject:\tReturn \"iam\"\n\tEnd Select\n\tReturn vbNullString\nEnd Function", "Dim oDrawingDoc as DrawingDocument\noDrawingDoc = ThisApplication.ActiveDocument\n\nDim NewPath As String = \"C:\\Temp\\\"\n\nDim NewName As String = \"NewMaster\"\n\nDim currentFile As String = ThisDoc.PathAndFileName(False)\n\nDim assyDoc as AssemblyDocument\nassyDoc = ThisApplication.Documents.Open(currentFile & \".iam\")\n\nassyDoc.SaveAs(NewPath & NewName & \".iam\",False)\n\nassyDoc.Close()\n\noDrawingDoc.SaveAs(NewPath & NewName & \".idw\",False)\n\nDim oFD As FileDescriptor\noFD = oDrawingDoc.ReferencedFileDescriptors(1).DocumentDescriptor.ReferencedFileDescriptor\noFD.ReplaceReference(NewPath & NewName & \".iam\")\n\noDrawingDoc.Update()"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to change name in browser tree\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\noDoc.DisplayName = \"\""], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to auto-resize plans\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nFor Each W As WorkPlane In oDoc.ComponentDefinition.WorkPlanes\n\tW.AutoResize = True\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Run ilogic rule from another rule\n                    ", "solution": ["iLogicVb", ".", "RunExternalRule", "(", "\"", "ruleFileName", "\"", ")", "iLogicVb", ".", "RunExternalRule", "(", "\"", "PartA:1", "\"", ", ", "\"", "ruleFileName", "\"", ")"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Raise window\n                    ", "solution": ["Dim oComps As Inventor.ObjectCollection = ThisApplication.TransientObjects.CreateObjectCollection\nWhile True\n\tDim oComp As Object = ThisApplication.CommandManager.Pick(Inventor.SelectionFilterEnum.kSketchPointFilter, \"Select some points.\")\n\t", "' If nothing gets selected we're done", " here", "\n\tIf IsNothing(oComp) Then Exit While\n\toComps.Add(oComp)\nEnd While\nIf oComps.Count = 0 Then Exit Sub", "'List through the points", "\nFor Each oSP As SketchPoint In oComps\n\t", "'Do something with the point", "\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Get drawingcurves from nested part in drawingview gives error\n                    ", "solution": ["   Private Function GetAllDrawingCurvesOfSelectedBrowserNodes(ByVal oStartBrowserNode As Inventor.BrowserNode, ByVal oObjectCollection As Inventor.ObjectCollection) As Inventor.ObjectCollection\n        Dim oINVDrawingDoc As Inventor.DrawingDocument = m_inventorApplication.ActiveDocument\n        Dim oSheet As Inventor.Sheet = oINVDrawingDoc.ActiveSheet\n\n        'loop through browsernodes of startBrowserNode\n        For Each oBrowserNode As Inventor.BrowserNode In oStartBrowserNode.BrowserNodes\n            Try\n                Dim oNativeObj As Object = oBrowserNode.NativeObject\n                'Check if browsernode is of type ComponentOccurrence\n                If TypeName(oNativeObj) = \"ComponentOccurrence\" Then\n                    'check if browsernode is selected\n                    If oBrowserNode.Selected = True Then\n                        Try\n                            'loop through all drawingviews to get all teh drawingcurves to change layer\n                            For Each oDrawView As Inventor.DrawingView In oSheet.DrawingViews\n                                'check if drawingView is not shaded\n                                If oDrawView.ViewStyle <> Inventor.DrawingViewStyleEnum.kShadedDrawingViewStyle Then\n                                    Dim oCurveEnum As Inventor.DrawingCurvesEnumerator = Nothing\n                                    Try\n                                        'get all the drawingcurves of selected browsernode in this drawingview\n                                        oCurveEnum = oDrawView.DrawingCurves(oNativeObj)\n                                    Catch\n                                        Try\n                                            ", "'nested part occurrence requires another approach\n                                            Dim oParentCompOcc As Inventor.ComponentOccurrence = oStartBrowserNode.NativeObject\n                                            Dim oCompOccProxy As Object = Nothing\n                                            Call oParentCompOcc.CreateGeometryProxy(oNativeObj, oCompOccProxy)\n                                            oCurveEnum = oDrawView.DrawingCurves(oCompOccProxy)", "\n                                        Catch\n\n                                        End Try\n                                    End Try\n\n                                    'add segments to collection to be moved to required layer\n                                    For Each oCurve As Inventor.DrawingCurve In oCurveEnum\n                                        For Each oSegment As Inventor.DrawingCurveSegment In oCurve.Segments\n                                            Call oObjectCollection.Add(oSegment)\n                                        Next\n                                    Next\n                                End If\n                            Next\n                        Catch ex As Exception\n\n                        End Try\n\n                    Else    'check SubBrowserNodes\n                        Call GetAllDrawingCurvesOfSelectedBrowserNodes(oBrowserNode, oObjectCollection)\n                    End If\n                End If\n            Catch ex As Exception\n\n            End Try\n        Next\n\n        Return oObjectCollection\n    End Function"], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to create browser tree folders (ONLY IF NOT EXIST)\n                    ", "solution": ["Dim oFN() As String = {\"", "NewFolder", "\", \"", "OldFolder", "\", \"", "AnotherFolder", "\"}\nDim oDoc As Document = ThisApplication.ActiveDocument\nDim oPane As BrowserPane = oDoc.BrowserPanes.ActivePane\nFor Each oFolderName As String In oFN\n\tDim oFolder As BrowserFolder = Nothing\n\tTry\n\t\toFolder = oPane.TopNode.BrowserFolders(oFolderName)\n\tCatch\n\t\toFolder = oPane.AddBrowserFolder(oFolderName, Nothing)\n\tEnd Try\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Copy Surface to right position in other part\n                    ", "solution": ["Sub Main()\n    Dim oAssemblyDoc As AssemblyDocument = ThisApplication.ActiveDocument\n\n    Dim oAssemblyDef As AssemblyComponentDefinition = oAssemblyDoc.ComponentDefinition\n\n\n    Dim CopyToOcc As ComponentOccurrence = Component.InventorComponent(\"CopyToOcc\")\n    Dim CopyToOccDef As PartComponentDefinition = CopyToOcc.Definition\n\t\n\t\n    Dim CopyFromOcc1 As ComponentOccurrence = Component.InventorComponent(\"CopyFromOcc1\")\n    Dim CopyFromOcc1Def As PartComponentDefinition = CopyFromOcc1.Definition    \n\n    Dim CopyFromOcc2 As ComponentOccurrence = Component.InventorComponent(\"CopyFromOcc2\")\n    Dim CopyFromOcc2Def As PartComponentDefinition = CopyFromOcc2.Definition\n    \t\n    Dim oSourceBody As SurfaceBody = CopyFromOcc1Def.Worksurfaces.Item(1).Surfacebodies(1)\n    Dim oSurfaceproxy As SurfaceBodyProxy\n    CopyFromOcc1.CreateGeometryProxy(oSourceBody, oSurfaceproxy)\n\t\n    Dim oSourceBody1 As SurfaceBody = CopyFromOcc2Def.Worksurfaces.Item(1).Surfacebodies(1)\n    Dim oSurfaceproxy1 As SurfaceBodyProxy\n    CopyFromOcc2.CreateGeometryProxy(oSourceBody1, oSurfaceproxy1)\t\n\n    Dim oBody1 As SurfaceBody\n    oBody1 = ThisApplication.TransientBRep.Copy(oSourceBody)\n\n    ThisApplication.TransientBRep.Transform(oBody1, oSurfaceproxy.ContainingOccurrence.Transformation)\n\n    Dim trans1 As Matrix\n    trans1 = CopyToOcc.Transformation\n\n    trans1.Invert()\n\n    ThisApplication.TransientBRep.Transform(oBody1, trans1)\n\n    Dim oBody2 As SurfaceBody\n    oBody2 = ThisApplication.TransientBRep.Copy(oSourceBody1)\n\n    ThisApplication.TransientBRep.Transform(oBody2, oSurfaceproxy1.ContainingOccurrence.Transformation)\n\n    Dim trans2 As Matrix\n    trans2 = CopyToOcc.Transformation\n\n    trans2.Invert()\n\t\n    ThisApplication.TransientBRep.Transform(oBody2, trans2)\n\t\n    CreateBaseFeature(CopyToOccDef, CopyToOcc, oBody1)\n\n    CreateBaseFeature(CopyToOccDef, CopyToOcc, oBody2)\n\t\n    oAssemblyDoc.Update\n   \nEnd Sub\n\t\nSub CreateBaseFeature(ByVal targetDef As PartComponentDefinition, ByVal targetOcc As ComponentOccurrence, ByVal body As SurfaceBody)\n\n        Dim nonPrmFeatures As NonParametricBaseFeatures\n        nonPrmFeatures = targetDef.Features.NonParametricBaseFeatures\n\n        Dim featureDef As NonParametricBaseFeatureDefinition\n        featureDef = nonPrmFeatures.CreateDefinition\n\n        Dim transObjs As TransientObjects\n        transObjs = ThisApplication.TransientObjects\n\n        Dim col As ObjectCollection\n        col = transObjs.CreateObjectCollection\n        col.Add(body)\n\n        featureDef.BRepEntities = col\n        featureDef.OutputType = BaseFeatureOutputTypeEnum.kSurfaceOutputType\n        featureDef.TargetOccurrence = targetOcc\n        featureDef.IsAssociative = False\n\n        Dim baseFeature As NonParametricBaseFeature\n        baseFeature = nonPrmFeatures.AddByDefinition(featureDef)\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic and the Save Command\n                    ", "solution": ["ThisApplication.CommandManager.StartCommand(CommandIDEnum.kFileSaveCommand)", "System.Runtime.InteropServices.COMException (0x80004005): Unspecified error (Exception from HRESULT: 0x80004005 (E_FAIL))\n   at System.RuntimeType.ForwardCallToInvokeMember(String memberName, BindingFlags flags, Object target, Int32[] aWrapperTypes, MessageData& msgData)\n   at Inventor._DocumentClass.Save()\n   at Autodesk.iLogic.Exec.AppDomExec.ExecRuleInAssembly(Assembly assem)\n   at iLogic.RuleEvalContainer.ExecRuleEval(String execRule)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Incorrect SubType for a sheet metal part.\n                    ", "solution": [], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: iLogic, run rule on completion of form\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: iLogic to add multiple blank lines between Vendors on the parts list.\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument = ThisApplication.ActiveDocument\nDim oPartList As PartsList = oDrawDoc.ActiveSheet.PartsLists.Item(1)\nDim i As Long = 1\nOn Error Resume Next\n\tFor i = 1 To 500 'arbirary number as PartsListRows.count() won't reset\n\t\toCell  = oPartList.PartsListRows.Item(i).Item(\"PART NUMBER\")\n\t\t'if the part number is blank then it's not a real BOM item\n\t\tIf oCell.Value = \"\" Then\n\t\t\t'skip\n\t\tElse\n\t\t\toPartList.PartsListRows.Add(i, False)\n\t\t\toPartList.PartsListRows.Add(i, False)\n\t\t\toPartList.PartsListRows.Add(i, False)\n\t\tEnd If\n\tNext\noPartList.Renumber\noPartList.SaveItemOverridesToBOM", "Public", " ", "Sub", " ", "Main", "()", "\n    ", "Dim", " ", "trans", " ", "as", " ", "transaction", " ", "=", " ", "ThisApplication", ".", "TransactionManager", ".", "StartTransaction", "(", "ThisApplication", ".", "ActiveDocument", ",", "\"", "Add Blank Rows", "\"", ")", "\n    ", "Try", "\n        ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n        ", "Dim", " ", "oPartList", " ", "As", " ", "PartsList", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", "\n        ", "oPartList", ".", "Sort", "(", "\"", "VENDOR", "\"", ",", "True", ",", "\"", "PART NUMBER", "\"", ",", "True", ")", "\n        ", "Dim", " ", "i", " ", "As", " ", "Long", " ", "=", " ", "1", "\n        ", "For", " ", "i", " ", "=", " ", "1", " ", "To", " ", "500", " \n            ", "Dim", " ", "thisCell", " ", "As", " ", "PartsListCell", " ", "=", " ", "oPartList", ".", "PartsListRows", ".", "Item", "(", "i", ")", ".", "Item", "(", "\"", "VENDOR", "\"", ")", "\n            ", "If", " ", "Not", " ", "thisCell", ".", "Value", " ", "=", " ", "\"\"", " ", "Then", "\n                ", "Dim", " ", "nextrowint", " ", "As", " ", "Integer", " ", "=", " ", "i", " ", "+", " ", "1", "\n                ", "If", " ", "nextrowint", " ", ">", " ", "oPartList", ".", "PartsListRows", ".", "Count", " ", "Then", " ", "Exit", " ", "For", "\n                ", "Dim", " ", "nextCell", " ", "As", " ", "PartsListCell", " ", "=", " ", "oPartList", ".", "PartsListRows", ".", "Item", "(", "nextrowint", ")", ".", "Item", "(", "\"", "VENDOR", "\"", ")", "\n                ", "If", " ", "Not", " ", "thisCell", ".", "Value", " ", "=", " ", "nextCell", ".", "Value", " ", "Then", "\n                    ", "oPartList", ".", "PartsListRows", ".", "Add", "(", "i", ", ", "False", ")", "\n                    ", "oPartList", ".", "PartsListRows", ".", "Add", "(", "i", ", ", "False", ")", "\n                    ", "oPartList", ".", "PartsListRows", ".", "Add", "(", "i", ", ", "False", ")", "\n                ", "End", " ", "If", "\n            ", "End", " ", "If", "\n        ", "Next", "\n        ", "oPartList", ".", "Renumber", "\n        ", "oPartList", ".", "SaveItemOverridesToBOM", "\n    ", "Catch", "\n        ", "trans", ".", "Abort", "()", "\n    ", "Finally", "\n        ", "trans", ".", "End", "()", "\n    ", "End", " ", "Try", "\n", "End Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Export Flatpattern to DXF from Assembly. Filenaming.\n                    ", "solution": ["'Define the active document as an assembly file", "\nDim oDoc As Document = ThisApplication.ActiveDocument\n\n", "'Check that the active document is an assembly file", "\nIf oDoc.DocumentType <> kAssemblyDocumentObject Then\n\tMessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\n\tExit Sub\nEnd If\n\n", "'Get user input", "\nRUsure = MessageBox.Show ( _\n\"This will create a DXF file for all of the asembly components that are sheet metal.\" _\n& vbLf & \"This rule expects that the part file is saved.\" _\n& vbLf & \" \" _\n& vbLf & \"Are you sure you want to create DXF for all of the assembly components?\" _\n& vbLf & \"This could take a while.\", \"iLogic  - Batch Output DXFs \", MessageBoxButtons.YesNo)\n\nIf RUsure <> vbYes Then Exit Sub\n\nDim oAsmName As String = Left(oDoc.DisplayName, Len(oDoc.DisplayName) - 4)\nDim oPath As String = ThisDoc.Path\n\n", "'Get the DXF target folder path", "\nDim oFolder As String = oPath & \"\\\" & oAsmName & \" DXF Files\"\n\n", "'Check for the DXF folder and create it if it does not exist", "\nIf Not System.IO.Directory.Exists(oFolder) Then\n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n\n", "'- - - - - - - - - - - - -Component  - - - - - - - - - - - -", "\n\nDim oBOM As BOM = oDoc.ComponentDefinition.BOM\noBOM.StructuredViewEnabled = True", "Dim oBOMView As BOMView = oBOM.BOMViews.Item", "(oBOM.BOMViews.Count)", "\nFor Each oRow As BOMRow In oBOMView.BOMRows\n", "Try", "\n\tDim oCD As ComponentDefinition = oRow.ComponentDefinitions.Item(1)\n\tDim iDoc As Document = oCD.Document\n\t", "'SheetMetal parts only", "\n\tIf iDoc.SubType <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Continue For\n\tDim iName As String = iDoc.FullFileName\n\n\t", "'Check that model is saved", "\n\tIf iName = vbNullString Then Continue For\n\tiDoc = ThisApplication.Documents.Open(iName)\n\toCD = iDoc.ComponentDefinition\n\t\n\tDim oItem As String = oRow.ItemNumber\n\tTry\n\t\tIf Not oCD.HasFlatPattern Then\n\t\t\toCD.Unfold()\n\t\tElse\n\t\t\toCD.FlatPattern.Edit()\n\t\tEnd If\n\t\tDim sOut As String = \"FLAT PATTERN DXF?AcadVersion=2004&OuterProfileLayer=IV_OUTER_PROFILE\"\n\t\toCD.DataIO.WriteDataToFile(sOut, ", "oFolder & \"\\\" & oAsmName & \"-\" & oItem & \".dxf\"", ")\n\t\toCD.FlatPattern.ExitEdit()\n\tCatch ex As Exception\n\t\tMsgBox(ex.Message)\n\tEnd Try\n\tiDoc.Close(True)\n", "Catch\nEnd Try", "\nNext", "Dim oDoc As AssemblyDocument\noDoc = ThisApplication.ActiveDocument\n", "\n'Check that the active document is an assembly file\nIf oDoc.DocumentType <> kAssemblyDocumentObject Then\n\tMessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\n\tExit Sub\nEnd If\n\n'Get user input\nRUsure = MessageBox.Show ( _\n\"This will create a DXF file for all of the asembly components that are sheet metal.\" _\n& vbLf & \"This rule expects that the part file is saved.\" _\n& vbLf & \" \" _\n& vbLf & \"Are you sure you want to create DXF for all of the assembly components?\" _\n& vbLf & \"This could take a while.\", \"iLogic  - Batch Output DXFs \", MessageBoxButtons.YesNo)\n\nIf RUsure <> vbYes Then Exit Sub\n\nDim oAsmName As String = Left(oDoc.DisplayName, Len(oDoc.DisplayName) - 4)\nDim oPath As String = ThisDoc.Path\n\n'Get the DXF target folder path\nDim oFolder As String = oPath & \"\\\" & oAsmName & \" DXF Files\"\n\n'Check for the DXF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n\n'- - - - - - - - - - - - -Component  - - - - - - - - - - - -\n'MessageBox.Show(\"Test\", \"My iLogic Dialog\", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1)\n", "Dim oBOM As BOM", "\n'MessageBox.Show(\"Test\", \"My iLogic Dialog\", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1)\n", "oBOM = oDoc.ComponentDefinition.BOM", "\n'MessageBox.Show(\"Test\", \"My iLogic Dialog\", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1)\n\noBOM.StructuredViewEnabled = True\nDim oBOMView As BOMView = oBOM.BOMViews.Item(oBOM.BOMViews.Count)\nFor Each oRow As BOMRow In oBOMView.BOMRows\nTry\n\tDim oCD As ComponentDefinition = oRow.ComponentDefinitions.Item(1)\n\tDim iDoc As Document = oCD.Document\n\t'SheetMetal parts only\n\tIf iDoc.SubType <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Continue For\n\tDim iName As String = iDoc.FullFileName\n\n\t'Check that model is saved\n\tIf iName = vbNullString Then Continue For\n\tiDoc = ThisApplication.Documents.Open(iName)\n\toCD = iDoc.ComponentDefinition\n\t\n\tDim oItem As String = oRow.ItemNumber\n\tTry\n\t\tIf Not oCD.HasFlatPattern Then\n\t\t\toCD.Unfold()\n\t\tElse\n\t\t\toCD.FlatPattern.Edit()\n\t\tEnd If\n\t\tDim sOut As String = \"FLAT PATTERN DXF?AcadVersion=2004&OuterProfileLayer=IV_OUTER_PROFILE\"\n\t\toCD.DataIO.WriteDataToFile(sOut, oFolder & \"\\\" & oAsmName & \"-\" & oItem & \".dxf\")\n\t\toCD.FlatPattern.ExitEdit()\n\tCatch ex As Exception\n\t\tMsgBox(ex.Message)\n\tEnd Try\n\tiDoc.Close(True)\nCatch\nEnd Try\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic add user params and linked custom iprops to assembly parts\n                    ", "solution": ["Sub Main()\n", "'Get the active assembly", "\nDim aDoc As AssemblyDocument = ThisApplication.ActiveDocument\n\n", "'Iterate thru each referenced document", "\nFor Each oDoc As Document In aDoc.AllReferencedDocuments\n\tIf oDoc.DocumentType <> KPartDocumentObject Then Continue For\n\tDim ISSM As Boolean = False\n\tIf oDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then ISSM = True\n\tDim oUserParams As UserParameters = oDoc.ComponentDefinition.Parameters.UserParameters\n\t\n\t", "'Remove all parameter formatting", "\n\tFor Each oParameter As UserParameter In oUserParams\n\t\toParameter.ExposedAsProperty = False\n\t\toParameter.IsKey = False\n\tNext\n\t\n\t", "'Define custom property collection", "\n\tDim oPropSet As PropertySet = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n\tParameter.UpdateAfterChange = True\n\tIf ISSM Then\n\t\tGetProperty(oPropSet, \"S_L\").Expression = \"=<Sheet Metal Length>\"\n\t\tGetProperty(oPropSet, \"S_W\").Expression = \"=<Sheet Metal Width>\"\n\t\tGetProperty(oPropSet, \"S_H\").Expression = \"=<Sheet Metal Thickness>\"\n\tElse\n\t\tAddParameter(oUserParams, \"G_L\")\n\t\tAddParameter(oUserParams, \"G_W\")\n\t\tAddParameter(oUserParams, \"G_H\")\n\t\t\n\t\tGetProperty(oPropSet, \"S_L\").Expression = \"=<G_L>\"\n\t\tGetProperty(oPropSet, \"S_W\").Expression = \"=<G_W>\"\n\t\tGetProperty(oPropSet, \"S_H\").Expression = \"=<G_H>\"\n\tEnd If\n\t\n\t", "'Update the file", "\n\tiLogicVb.UpdateWhenDone = True\nNext\nEnd Sub\n\nFunction GetProperty(oPropset As PropertySet, iProName As String) As Inventor.Property\n\tDim iPro As Inventor.Property\n\tTry\n\t\t", "'Attempt to get the iProperty from the document", "\n\t\tiPro = oPropSet.Item(iProName)\n\tCatch\n\t\t", "'Assume error means not found, so create it", "\n\t\tiPro = oPropSet.Add(\"\", iProName)\n\tEnd Try\n\tReturn iPro\nEnd Function\n\nSub AddParameter(oUserParams As UserParameters, oParaName As String)\n\tTry\n\t\tt = oUserParams.Item(oParaName)\n\tCatch\n\t\t", "'If the parameter was not found, create it", "\n\t\tDim newParam As UserParameter = oUserParams.AddByExpression(oParaName, \"0\", UnitsTypeEnum.kMillimeterLengthUnits)\n\t\tnewParam.ExposedAsProperty = False ", "'Flag for export", "\n\t\tnewParam.IsKey = False\n\t\tDim oFormat As CustomPropertyFormat = newParam.CustomPropertyFormat ", "'This line is needed to enable the following formatting", "\n\t\tIf oFormat Is Nothing Then Exit Sub", "\t\toFormat.PropertyType=Inventor.CustomPropertyTypeEn", "um.kTextPropertyType\n\t\toFormat.Precision=Inventor.CustomPropertyPrecision", "Enum.kZeroDecimalPlacePrecision ", "'Set one decimal place", "\n\t\toFormat.ShowUnitsString = False\n\t\toFormat.ShowtrailingZeros = False\n\tEnd Try\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: BOM - Select all\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: API Start a drawing clean, without running ilogic or prompted entries\n                    ", "solution": ["m_inventorApplication.SilentOperation = True", "Try", "\n", "'<Your code here>", "\n", "Catch", "End Try\nm_inventorApplication.SilentOperation = False"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic and grabbing a value from excel matrix\n                    ", "solution": ["If", " ", "Shape", " ", "=", " ", "\"", "Rectangular Tube", "\"", " ", "Then", "\n        ", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "C:\\ENGINEERING\\ilogic\\Shape_Generator_Raw_Material_Specs.xlsx", "\"", ", ", "\"", "Rectangular_tube", "\"", ", ", "\"", "Matl", "\"", ", ", "\"", "=", "\"", ", ", "Material", ", ", "\"", "Shape_Size", "\"", ", ", "\"", "=", "\"", ", ", "Shape_Size", ")", "\n\n        ", "Matl_Description", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Matl_Description", "\"", ")", "\n        ", "M_Number", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "M_Number", "\"", ")", "\n\n", "'", "        If Matl_Description = vbNullString Then Matl_Description = \"Contact Engineering for Material\"", "\n'", "        If M_Number = vbNullString Then M_Number = \"Contact Engineering for Material\"        ", "\n\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Mat'l Description)", "\"", ")", " ", "=", " ", "Matl_Description", "\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Reference M#)", "\"", ")", " ", "=", " ", "M_Number", "\n        \n        ", "InventorVb", ".", "DocumentUpdate", "()", "\n\n\n\n\n\n\n    ", "Else", " ", "If", " ", "Shape", " ", "=", " ", "\"", "Square Tube", "\"", " ", "Then", "\n        ", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "C:\\ENGINEERING\\ilogic\\Shape_Generator_Raw_Material_Specs.xlsx", "\"", ", ", "\"", "Square_tube", "\"", ", ", "\"", "Matl", "\"", ", ", "\"", "=", "\"", ", ", "Material", ", ", "\"", "Shape_Size", "\"", ", ", "\"", "=", "\"", ", ", "Shape_Size", ")", "\n\n        ", "Matl_Description", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Matl_Description", "\"", ")", "\n        ", "M_Number", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "M_Number", "\"", ")", "\n\n", "'", "        If Matl_Description = vbNullString Then Matl_Description = \"Contact Engineering for Material\"", "\n'", "        If M_Number = vbNullString Then M_Number = \"Contact Engineering for Material\"", "\n\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Mat'l Description)", "\"", ")", " ", "=", " ", "Matl_Description", "\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Reference M#)", "\"", ")", " ", "=", " ", "M_Number", "\n\n        ", "InventorVb", ".", "DocumentUpdate", "()", "\n\n\n\n\n\n\n\n    ", "Else", " ", "If", " ", "Shape", " ", "=", " ", "\"", "Plates", "\"", " ", "Then", "\n        ", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "C:\\ENGINEERING\\ilogic\\Shape_Generator_Raw_Material_Specs.xlsx", "\"", ", ", "\"", "Plates", "\"", ", ", "\"", "Matl", "\"", ", ", "\"", "=", "\"", ", ", "Material", ", ", "\"", "Shape_Size", "\"", ", ", "\"", "=", "\"", ", ", "Shape_Size", ")", "\n\n        ", "Matl_Description", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Matl_Description", "\"", ")", "\n        ", "M_Number", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "M_Number", "\"", ")", "\n\n", "'", "        If Matl_Description = vbNullString Then Matl_Description = \"Contact Engineering for Material\"", "\n'", "        If M_Number = vbNullString Then M_Number = \"Contact Engineering for Material\"", "\n\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Mat'l Description)", "\"", ")", " ", "=", " ", "Matl_Description", "\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Reference M#)", "\"", ")", " ", "=", " ", "M_Number", "\n\n        ", "InventorVb", ".", "DocumentUpdate", "()", "\n\n\n\n\n\n    ", "Else", " ", "If", " ", "Shape", " ", "=", " ", "\"", "Flat Bar", "\"", " ", "Then", "\n        ", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "C:\\ENGINEERING\\ilogic\\Shape_Generator_Raw_Material_Specs.xlsx", "\"", ", ", "\"", "Flat Bar", "\"", ", ", "\"", "Matl", "\"", ", ", "\"", "=", "\"", ", ", "Material", ", ", "\"", "Shape_Size", "\"", ", ", "\"", "=", "\"", ", ", "Shape_Size", ")", "\n\n        ", "Matl_Description", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Matl_Description", "\"", ")", "\n        ", "M_Number", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "M_Number", "\"", ")", "\n\n", "'", "        If Matl_Description = vbNullString Then Matl_Description = \"Contact Engineering for Material\"", "\n'", "        If M_Number = vbNullString Then M_Number = \"Contact Engineering for Material\"", "\n\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Mat'l Description)", "\"", ")", " ", "=", " ", "Matl_Description", "\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Reference M#)", "\"", ")", " ", "=", " ", "M_Number", "\n\n        ", "InventorVb", ".", "DocumentUpdate", "()", "\n        \n        \n        \n        \n        \n    ", "Else", " ", "If", " ", "Shape", " ", "=", " ", "\"", "Mechanical Tube", "\"", " ", "Then", "\n        ", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "C:\\ENGINEERING\\ilogic\\Shape_Generator_Raw_Material_Specs.xlsx", "\"", ", ", "\"", "Mechanical_tube", "\"", ", ", "\"", "Matl", "\"", ", ", "\"", "=", "\"", ", ", "Material", ", ", "\"", "Shape_Size", "\"", ", ", "\"", "=", "\"", ", ", "Shape_Size", ")", "\n\n        ", "Matl_Description", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Matl_Description", "\"", ")", "\n        ", "M_Number", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "M_Number", "\"", ")", "\n\n", "'", "        If Matl_Description = vbNullString Then Matl_Description = \"Contact Engineering for Material\"", "\n'", "        If M_Number = vbNullString Then M_Number = \"Contact Engineering for Material\"", "\n\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Mat'l Description)", "\"", ")", " ", "=", " ", "Matl_Description", "\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Reference M#)", "\"", ")", " ", "=", " ", "M_Number", "\n\n        ", "InventorVb", ".", "DocumentUpdate", "()", "    \n\n        \n\n        \n", "Else", " ", "If", " ", "Shape", " ", "=", " ", "\"", "Round Bar", "\"", " ", "Then", "\n        ", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "C:\\ENGINEERING\\ilogic\\Shape_Generator_Raw_Material_Specs.xlsx", "\"", ", ", "\"", "Round_bar", "\"", ", ", "\"", "Matl", "\"", ", ", "\"", "=", "\"", ", ", "Material", ", ", "\"", "Shape_Size", "\"", ", ", "\"", "=", "\"", ", ", "Shape_Size", ")", "\n\n        ", "Matl_Description", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Matl_Description", "\"", ")", "\n        ", "M_Number", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "M_Number", "\"", ")", "\n\n", "'", "        If Matl_Description = vbNullString Then Matl_Description = \"Contact Engineering for Material\"", "\n'", "        If M_Number = vbNullString Then M_Number = \"Contact Engineering for Material\"", "\n\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Mat'l Description)", "\"", ")", " ", "=", " ", "Matl_Description", "\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Reference M#)", "\"", ")", " ", "=", " ", "M_Number", "\n\n        ", "InventorVb", ".", "DocumentUpdate", "()", "    \n        \n        \n        \n        \n        \n", "Else", " ", "If", " ", "Shape", " ", "=", " ", "\"", "Hex", "\"", " ", "Then", "\n        ", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "C:\\ENGINEERING\\ilogic\\Shape_Generator_Raw_Material_Specs.xlsx", "\"", ", ", "\"", "Hex_bar", "\"", ", ", "\"", "Matl", "\"", ", ", "\"", "=", "\"", ", ", "Material", ", ", "\"", "Shape_Size", "\"", ", ", "\"", "=", "\"", ", ", "Shape_Size", ")", "\n\n        ", "Matl_Description", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Matl_Description", "\"", ")", "\n        ", "M_Number", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "M_Number", "\"", ")", "\n\n", "'", "        If Matl_Description = vbNullString Then Matl_Description = \"Contact Engineering for Material\"", "\n'", "        If M_Number = vbNullString Then M_Number = \"Contact Engineering for Material\"", "\n\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Mat'l Description)", "\"", ")", " ", "=", " ", "Matl_Description", "\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Reference M#)", "\"", ")", " ", "=", " ", "M_Number", "\n\n        ", "InventorVb", ".", "DocumentUpdate", "()", "        \n                \n        \n\n\n\n", "Else", " ", "If", " ", "Shape", " ", "=", " ", "\"", "Channel", "\"", " ", "Then", "\n        ", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "C:\\ENGINEERING\\ilogic\\Shape_Generator_Raw_Material_Specs.xlsx", "\"", ", ", "\"", "Channel", "\"", ", ", "\"", "Matl", "\"", ", ", "\"", "=", "\"", ", ", "Material", ", ", "\"", "Shape_Size", "\"", ", ", "\"", "=", "\"", ", ", "Shape_Size", ")", "\n\n        ", "Matl_Description", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Matl_Description", "\"", ")", "\n        ", "M_Number", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "M_Number", "\"", ")", "\n\n", "'", "        If Matl_Description = vbNullString Then Matl_Description = \"Contact Engineering for Material\"", "\n'", "        If M_Number = vbNullString Then M_Number = \"Contact Engineering for Material\"", "\n\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Mat'l Description)", "\"", ")", " ", "=", " ", "Matl_Description", "\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Reference M#)", "\"", ")", " ", "=", " ", "M_Number", "\n\n        ", "InventorVb", ".", "DocumentUpdate", "()", "    \n        \n        \n        \n\n", "Else", " ", "If", " ", "Shape", " ", "=", " ", "\"", "Angle", "\"", " ", "Then", "\n        ", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "C:\\ENGINEERING\\ilogic\\Shape_Generator_Raw_Material_Specs.xlsx", "\"", ", ", "\"", "Angle", "\"", ", ", "\"", "Matl", "\"", ", ", "\"", "=", "\"", ", ", "Material", ", ", "\"", "Shape_Size", "\"", ", ", "\"", "=", "\"", ", ", "Shape_Size", ")", "\n\n        ", "Matl_Description", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Matl_Description", "\"", ")", "\n        ", "M_Number", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "M_Number", "\"", ")", "\n\n", "'", "        If Matl_Description = vbNullString Then Matl_Description = \"Contact Engineering for Material\"", "\n'", "        If M_Number = vbNullString Then M_Number = \"Contact Engineering for Material\"", "\n\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Mat'l Description)", "\"", ")", " ", "=", " ", "Matl_Description", "\n        ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "(Reference M#)", "\"", ")", " ", "=", " ", "M_Number", "\n\n        ", "InventorVb", ".", "DocumentUpdate", "()", "    \n        \n\n\n\n\n", "End", " ", "If"], "author": "steveh"},
{"created at": [], "solution Title": "\n                        Re: Patterning a Feature across the mid plane\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nDim oPartDef As ComponentDefinition = oDoc.ComponentDefinition\nDim oCol As ObjectCollection = ThisApplication.TransientObjects.CreateObjectCollection\noCol.Add(oPartDef.Features(\"Extrusion1\"))\n\n", "Dim AxeA As WorkAxis = oPartDef.WorkAxes(\"X Axis\")\nDim AxeB As WorkAxis = oPartDef.WorkAxes(\"Y Axis\")", "\n\n", "Dim", " ", "oRecPat ", "As RectangularPatternFeature", " = oPartDef.Features.RectangularPatternFeatures.Add(_\noCol, ", "AxeA", ", False, 98, 1, ", "PatternSpacingTypeEnum.", "kDefault, , ", "AxeB", ", True, 1, 1, _\n", "PatternSpacingTypeEnum.", "kDefault, , ", "PatternComputeTypeEnum.", "kIdenticalCompute, ", "PatternOrientationEnum.", "kIdentical)\n\noRecPat.Definition.XDirectionMidPlanePattern = True"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Delete suppressed features rule, works but is erroring out.\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nDim oCD As ComponentDefinition = oDoc.ComponentDefinition\nFor Each oFeature As PartFeature In oCD.Features\n\tTry\n\t\tIf Not oFeature.Suppressed Then Continue For\n\t\toFeature.Delete()\n\tCatch\n\tEnd Try\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: VBA Error help\n                    ", "solution": ["Sub Main()\n    ' Set a reference to the assembly document.\n    ' This assumes an assembly document is active.\n    Dim oDoc As AssemblyDocument = ThisApplication.ActiveDocument\n\n    Dim FirstLevelOnly As Boolean\n    If MsgBox(\"First level only?\", vbYesNo) = vbYes Then\n        FirstLevelOnly = True\n    Else\n        FirstLevelOnly = False\n    End If\n    \n    ' Set a reference to the BOM\n    Dim oBOM As BOM = oDoc.ComponentDefinition.BOM\n    \n    ' Set whether first level only or all levels.\n    oBOM.StructuredViewFirstLevelOnly = FirstLevelOnly\n    \n    ' Make sure that the structured view is enabled.\n    oBOM.StructuredViewEnabled = True\n    \n    'Set a reference to the \"Structured\" BOMView\n    Dim oBOMView As BOMView = oBOM.BOMViews.Item(\"Structured\")\n\n    'Initialize the tab for ItemNumber\n    Dim ItemTab As Long = -3\n    QueryBOMRowProperties(oBOMView.BOMRows, ItemTab)\nEnd Sub\n\nPrivate Sub QueryBOMRowProperties(oBOMRows As BOMRowsEnumerator, ItemTab As Long)\n    ItemTab = ItemTab + 3\n    ' Iterate through the contents of the BOM Rows.\n    For i As Long = 1 To oBOMRows.Count\n        ' Get the current row.\n        Dim oRow As BOMRow = oBOMRows.Item(i)\n\n        'Set a reference to the primary ComponentDefinition of the row\n        Dim oCompDef As ComponentDefinition = oRow.ComponentDefinitions.Item(1)\n\n        Dim oPartNumProperty As Property\n        Dim oDescripProperty As Property\n\n        If TypeOf oCompDef Is VirtualComponentDefinition Then\n            'Get the file property that contains the \"Part Number\"\n            'The file property is obtained from the virtual component definition\n            oPartNumProperty = oCompDef.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\")\n\n            'Get the file property that contains the \"Description\"\n            oDescripProperty = oCompDef.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\")\n        Else\n            'Get the file property that contains the \"Part Number\"\n            'The file property is obtained from the parent\n            'document of the associated ComponentDefinition.\n            oPartNumProperty = oCompDef.Document.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\")\n\n            'Get the file property that contains the \"Description\"\n            oDescripProperty = oCompDef.Document.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\")\n            \n            'Recursively iterate child rows if present.\n            If Not oRow.ChildRows Is Nothing Then\n                QueryBOMRowProperties(oRow.ChildRows, ItemTab)\n            End If\n        End If\n    Next\n    ItemTab = ItemTab - 3\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Trouble with iRule to export the top face of the flat pattern to a DXF\n                    ", "solution": ["oPath = ThisDoc.Path\noRevNum = iProperties.Value(\"Project\", \"Revision Number\")\nPARTNUMBER = iProperties.Value(\"Project\", \"Part Number\")\n\n'get DXF target folder path\noFolder = oPath\n\nDim oDoc As PartDocument\noDoc = ThisDoc.Document\n\nDim oCompDef As SheetMetalComponentDefinition\noCompDef = oDoc.ComponentDefinition\n\nIf oCompDef.HasFlatPattern = False Then\noCompDef.Unfold\n\nElse\noCompDef.FlatPattern.Edit\nEnd If\n\n'DXF FlatPattern\nDim sOut As String\nIf ExportInner = True Then\noPath = ThisDoc.Path\nsOut = \"FLAT PATTERN DWG?AcadVersion=2000&OuterProfileLayer=Burn&InteriorProfilesLayer=Burn&InvisibleLayers=IV_UNCONSUMEND_SKETCHES;IV_ALTREP_BACK;IV_ALTREP_FRONT;IV_ARC_CENTERS;IV_ARC_CENTERS;IV_TANGENT;IV_BEND;IV_BEND_DOWN;IV_FEATURE_PROFILES_DOWN;IV_FEATURE_PROFILES;&SplineTolerance Double 0.01\"\n\nElse\nsOut = \"FLAT PATTERN DWG?AcadVersion=2000&OuterProfileLayer=Burn&InteriorProfilesLayer=Burn&InvisibleLayers=IV_UNCONSUMEND_SKETCHES;IV_ALTREP_BACK;IV_ALTREP_FRONT;IV_ARC_CENTERS;IV_ARC_CENTERS;IV_TANGENT;IV_BEND;IV_BEND_DOWN;IV_FEATURE_PROFILES_DOWN;IV_FEATURE_PROFILES;&SplineTolerance Double 0.01\"\n\nEnd If\n\n\n'Check for the DXF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\nSystem.IO.Directory.CreateDirectory(oFolder)\nEnd If\n\n'Get document's full file name\nDim sFname As String\nsFname = ThisDoc.FileName(False) 'without extension\n\n'The file format will depend on the extension'Set file name extension to \".DXF\"\n\n'Filename without Revision Number\nsFname = oPath & \"\\DXF\\\" & PARTNUMBER & \".dxf\"\n\n'Filename with Revision Number\n'sFname = oPath & \"\\DXF\\\" & PARTNUMBER & \"_\" & oRevNum & \".dxf\"\n\noCompDef.DataIO.WriteDataToFile (sOut, sFname)\n\n'Close FlatPattern View\noCompDef.FlatPattern.ExitEdit()"], "author": "p.crawford"},
{"created at": [], "solution Title": "\n                        Re: Copy View from a file\n                    ", "solution": ["Dim InvApplication As Inventor.Application =\n\u00a0\u00a0\u00a0 ' System.Runtime.InteropServices.Marshal.\n\u00a0\u00a0\u00a0 '\u00a0 GetActiveObject(\"Inventor.Application\")\n\nDim sPath As String = \"C:/My Folder/ MyDrawing.idw\"\n\nDim oIDW As Inventor.DrawingDocument =\u00a0InvApplication.Documents.Open(sPath, False)", "oIDW.Close\noIDW = nothing"], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: invisible sketch on sheet\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Change occurrence names in assembly\n                    ", "solution": ["Else\n    Dim NOR As Integer = NumberOfRoofs\n    ChangeName(oOccs, \"Roof_First\", \"Roof 1\")\n    ChangeName(oOccs, \"Roof_Last\", \"Roof \" & NOR)\n    For i As Integer = 2 To NOR - 1\n        ChangeName(oOccs, \"Roof_Middle\" & ", "i", ", \"Roof \" & ", "i", ")\n    Next\nEnd If"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Save  pdf or dwf to My Documents iLogic\n                    ", "solution": ["Dim docFolder As String = My.Computer.FileSystem.SpecialDirectories.MyDocuments\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: how to stop my dimension line breaks\n                    ", "solution": [], "author": "mslosar"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Comparing File Name to Part Number\n                    ", "solution": ["oDoc = ThisDoc.FileName(False)\nPartNumber = iProperties.Value(\"Project\", \"Part Number\")\n\nIf oDoc = PartNumber Then\n\tReturn\nElse\n\tTry \n\t\toProp = iProperties.Value(\"Custom\", \"NotFileName\")\n\t\tReturn\n\tReturn\n\tCatch\n\t\ti = MessageBox.Show(\"Tree Name\",\"My iLogic Dialog\",MessageBoxButtons.YesNo,MessageBoxIcon.Hand ,MessageBoxDefaultButton.Button1)\n\t\tIf i = MsgBoxResult.Yes Then\n\t\t\tiProperties.Value(\"Project\", \"Part Number\") = oDoc\n\t\tElseIf i = MsgBoxResult.No Then\n\t\t\tiProperties.Value(\"Custom\", \"NotFileName\") = \"No\"\n\t\tEnd If\n\tEnd Try\nEnd If\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Run VBA from Inventor addin?!\n                    ", "solution": ["    For Each oProject As Inventor.InventorVBAProject In ", "m_InventorApp", ".VBAProjects\n        If oProject.Name <> \"", "ApplicationProject", "\" Then Continue For\n        Dim oComp As Inventor.InventorVBAComponent = oProject.InventorVBAComponents(\"", "Module1", "\")\n        Dim oMember As Inventor.InventorVBAMember = oComp.InventorVBAMembers(\"", "MyFunction", "\")\n        Try\n            oMember.Execute()\n        Catch\n        End Try\n    Next", "Public Sub MyFunction()\n    ", "'Code", "\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Silent operation and ilogic\n                    ", "solution": ["iLogicVb.Automation.RulesOnEventsEnabled = False\n\n' Create the new document.\n\niLogicVb.Automation.RulesOnEventsEnabled = True"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2018 - Entitlement API Changes?\n                    ", "solution": ["Imports Autodesk.WebServices", "Dim webServiceMgr As CWebServicesManager\nwebServiceMgr = New CWebServicesManager()\n\nDim isWebServiceInitialized As Boolean\nisWebServiceInitialized = webServiceMgr.Initialize()\n\nIf isWebServiceInitialized = True Then\n", "    Dim userId As String = \"\"\n    webServiceMgr.GetUserId(userId)\n\n    Dim userName As String = \"\"\n    webServiceMgr.GetLoginUserName(userName)\n", "End If", "using Autodesk.WebServices;", "CWebServicesManager mgr = new CWebServicesManager();\nbool isInitialize = mgr.Initialize();\n\nif (isInitialize == true", "{\n     string userId = \"\";\n     mgr.GetUserId(ref userId);\n\n     string username = \"\";\n     mgr.GetLoginUserName(ref username);\n}"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic check if part exists in assembly using its name\n                    ", "solution": ["Dim oDoc As AssemblyDocument = ThisDoc.Document\n\nDim oComps As ComponentOccurrences = oDoc.ComponentDefinition.Occurrences\n\n", "Dim PartExists As Boolean = False", "\nFor Each oComp As ComponentOccurrence In oComps\n\tIf oComp.Name.Contains(\"P1\") Then\n\t\t", "PartExists = True\n\t\tExit For", "\n\tEnd If\nNext\n\nMsgBox(PartExists)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Can't find Workpoint first time 2017\n                    ", "solution": [], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: iLogicVB problem\n                    ", "solution": ["Dim addinGUID As String = \"{3BDD8D79-2179-4B11-8A5A-257B1C0263AC}\"\n", "Dim addin As Inventor.ApplicationAddIn", "addin = m_inventorApplication.ApplicationAddIns.ItemById(addinGUID)\n\nIf addin IsNot Nothing Then\n   ", "   addin.Activate()\n\n   Dim oilogic As Autodesk.iLogic.Automation.iLogicAutomation\n   oilogic = addin.Automation\n\n   oilogic.RulesOnEventsEnabled = False", "\nEnd If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Use iLogic to Change Units of a Parameter\n                    ", "solution": [], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re: AddByPlaneAndOffset used in an assembly\n                    ", "solution": ["bool CreateSketchOffsetFromXYPlaneInAsm (CComPtr<AssemblyComponentDefinition>& pAsmCompDef,  // where the sketch will be added\n                                         CComPtr<PlanarSketch>& pNewSketch,     // The sketch created, an output\n                                         const double kOffsetMm,\n                                         const wchar_t* const pszSketchName)    // Name of the newly created sketch\n{\n    // Get PlanarSketches, the list of sketches\n    CComPtr<PlanarSketches> pSketches = nullptr ;\n    HRESULT hRes = pAsmCompDef->get_Sketches(&pSketches);\n    if (FAILED(hRes) || (pSketches == nullptr)) {\n        ShowCOMError (hRes,L\"CXYPOSIA, get_Sketches failed\") ;\n        return false ;\n    }\n\n    // Get standard default WorkPlanes, probably 3 only initially in the list\n    CComPtr<WorkPlanes> pWorkPlanes = nullptr ;\n    hRes = pAsmCompDef->get_WorkPlanes(&pWorkPlanes);\n    if (FAILED(hRes) || (pWorkPlanes == nullptr)) {\n        ShowCOMError (hRes,L\"CXYPOSIA, get_WorkPlanes failed\") ;\n        return false ;\n    }\n\n    // Get hold of one of the WorkPlanes. Valid indices are 1L 2L 3L for standard workplanes\n    CComPtr<WorkPlane> pXYWorkPlane = nullptr ;\n    hRes = pWorkPlanes->get_Item(_variant_t(3L, VT_I4),&pXYWorkPlane);\n    if (FAILED(hRes) || (pXYWorkPlane == nullptr)) {\n        ShowCOMError (hRes,L\"CXYPOSIA, get_Item (workplane) failed\") ;\n        return false ;\n    }\n\n    CComPtr<TransientGeometry> pTransGeom = theApp.GetTransGeomPtr () ;    \n    CComPtr<Point> pOrigin = nullptr ;\n    hRes = pTransGeom->CreatePoint (0,0,0,&pOrigin);\n\n    CComPtr<UnitVector> UnitXVector ;\n    pTransGeom->CreateUnitVector (1.0,0,0,&UnitXVector) ;\n\n    CComPtr<UnitVector> UnitYVector ;\n    pTransGeom->CreateUnitVector (0.0,1.0,0,&UnitYVector) ;\n\n    // Internally Inventor always uses cm, so convert...\n    const double kOffsetInCm = kOffsetMm/10.0 ;\n    pOrigin->PutZ (kOffsetInCm) ;\n    CComPtr<WorkPlane> pOffsetWorkPlane ;\n    hRes = pWorkPlanes->AddFixed(pOrigin,UnitXVector,UnitYVector,VARIANT_FALSE,&pOffsetWorkPlane) ;\n    if (pOffsetWorkPlane == nullptr) { \n        gLogger.Printf (ekErrMsg,L\"CXYPOSIA, Could not AddFixed\") ;\n        return false ;\n    }\n\n    // Now actually create a sketch and get a pointer to it in one go...    \n    hRes = pSketches->Add (_variant_t((IDispatch *)pOffsetWorkPlane),\n                           VARIANT_FALSE,\n                           &pNewSketch);\n    if (FAILED(hRes)) {\n        ShowCOMError (hRes,L\"CXYPOSIA, AddSketch failed\") ;\n        return false ;\n    }\n\n    pNewSketch->put_Name (BSTR(pszSketchName)) ;\n\n    return true ;\n}\n"], "author": "oransen"},
{"created at": [], "solution Title": "\n                        Re: VBA not working randomly with IPT files on my computer only\n                    ", "solution": ["Dim doc = ThisApplication.ActiveDocument\n\nDim oCD As ComponentDefinition\nIf doc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n  Dim assemDoc As AssemblyDocument = doc\n  oCD = assemDoc.ComponentDefinition\nElseIf doc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n  Dim partDoc As PartDocument = doc\n  oCD = partDoc.ComponentDefinition\nEnd If\n\nactBomStrucInt = oCD.BOMStructure\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: If / Then Math Equation in iLogic\n                    ", "solution": ["Sub Main()\n    MsgBox(ConvertToKennyjFormat(25.142857)& vbLf & _\n\t       ConvertToKennyjFormat(25) & vbLf & _\n\t\t   ConvertToKennyjFormat(25.2235) & vbLf & _\n\t\t   ConvertToKennyjFormat(25.0))\nEnd Sub\n\nFunction ConvertToKennyjFormat(oNum) As String\n    Dim SplitArr() As String\n    SplitArr = Split(oNum, \".\")\n    \n    If SplitArr.Length > 2 Then\n       MsgBox(\"Weird number!\")\n       Return \"False\"\n    ElseIf SplitArr.Length = 2\n\t    If SplitArr(1) <> 0 Then\n       \t\tReturn SplitArr(0) & \" + \" & Round(CDbl(\".\" & SplitArr(1))*84) & Chr(34)\n\t\tElse\n\t\t\tReturn SplitArr(0)\n\t\tEnd If\n\tElse\n\t\tReturn SplitArr(0)\n    End If\nEnd Function"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Batch export PDF and STEP with custom iProperties as name\n                    ", "solution": ["Sub Main()\n\tDim oDoc As Inventor.Document\n\n\tFor Each oDoc In ThisApplication.Documents.VisibleDocuments\n\t\tIf Not (oDoc.documenttype = kDrawingDocumentObject) Then Continue For\n\t\t\t'oSourceFolder = System.IO.Path.GetDirectoryName(oDoc.FullFileName)\n\t\n\t\toPN = oDoc.PropertySets(\"Design Tracking Properties\")(\"Part Number\").Value\n\t\n\t\tIf oPN <> \"\" Then\n\t\t\toShortName = oPN\n\t\tElse\n\t\t\toShortName = System.IO.Path.GetFileNameWithoutExtension(oDoc.FullFileName)\n\t\tEnd If  \n\t\t\n\t\t'get PDF target folder path\n\t\toFolder = \"C:\\InventorExport\\\" & \"Batch\"\n\t\t\t\n\t\t'Check for the PDF folder and create it if it does not exist\n\t\tIf Not System.IO.Directory.Exists(oFolder) Then\n\t\t\tSystem.IO.Directory.CreateDirectory(oFolder)\n\t\tEnd If\n\t\t\n\t\tCall CreatePDF(oDoc, oFolder & \"\\\" & oShortName)\n\t\tCall CreateSTEP(oDoc.Sheets(1).DrawingViews(1).ReferencedDocumentDescriptor.ReferencedDocument, oFolder & \"\\\" & oShortName)\n\t\t\n\t\tProcess.Start(oFolder)\n\t\t'MessageBox.Show(\"PDF(s) and STEP(s) exported to: \" & oFolder , \"iLogic\") \n\tNext oDoc\n\nEnd Sub\n\nSub CreatePDF(oModelDoc As Document, oOutputName As String)   \n    oPDFAddIn = ThisApplication.ApplicationAddIns.ItemById _\n    (\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n    oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n    oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n    oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n    \n    If oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then\n\t\t'oOptions.Value(\"All_Color_AS_Black\") = 0\n\t\t'oOptions.Value(\"Remove_Line_Weights\") = 0\n\t\toOptions.Value(\"Vector_Resolution\") = 400\n\t\toOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\n\t\t'oOptions.Value(\"Custom_Begin_Sheet\") = 2\n\t\t'oOptions.Value(\"Custom_End_Sheet\") = 4\n    End If\n      \n    'Set the PDF target file name\n    oDataMedium.FileName = oOutputName & \".pdf\"\n    \n    'Publish document\n    oPDFAddIn.SaveCopyAs(oModeldoc, oContext, oOptions, oDataMedium)\n\nEnd Sub\n\nSub CreateSTEP(oModelDoc As Document, oOutputName As String)\n\n\tDim oSTEPTranslator As TranslatorAddIn\n\toSTEPTranslator = ThisApplication.ApplicationAddIns.ItemById(\"{90AF7F40-0C01-11D5-8E83-0010B541CD80}\")\n\t\n\tDim oSTEPContext As TranslationContext\n\toSTEPContext = ThisApplication.TransientObjects.CreateTranslationContext\n\t\n\tDim oSTEPOptions As NameValueMap\n\toSTEPOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\t\n\tIf oSTEPTranslator.HasSaveCopyAsOptions(oModelDoc, oSTEPContext, oSTEPOptions) Then\n\t\t' Set application protocol.\n\t\t' 2 = AP 203 - Configuration Controlled Design\n\t\t' 3 = AP 214 - Automotive Design\n\t\toSTEPOptions.Value(\"ApplicationProtocolType\") = 3\n\t\t' Other options...\n\t\t'oSTEPOptions.Value(\"Author\") = \"\"\n\t\t'oSTEPOptions.Value(\"Authorization\") = \"\"\n\t\t'oSTEPOptions.Value(\"Description\") = \"\"\n\t\t'oSTEPOptions.Value(\"Organization\") = \"\"\n\t\toSTEPContext.Type = kFileBrowseIOMechanism\n\t\t\n\t\tDim oData As DataMedium\n\t\toData = ThisApplication.TransientObjects.CreateDataMedium\n\t\toData.FileName = oOutputName & \".stp\"\n\t\t\n\t\t'Publish document    \n\t\toSTEPTranslator.SaveCopyAs(oModelDoc, oSTEPContext, oSTEPOptions, oData)\n\tEnd If\n\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Getting thumbnail from Active Document to show in PictureBox VB.Net\n                    ", "solution": ["Imports Inventor \nImports Microsoft.VisualBasic\n\nPublic Class Form1  \n   Private Sub Button1_Click(ByVal sender As System.Object, _ \n                ByVal e As System.EventArgs) Handles Button1.Click  \n      ' Create an instance of Apprentice.  \n      Dim apprentice As New ApprenticeServerComponent \n\n      ' Open a document.  \n      Dim doc As ApprenticeServerDocument  \n      doc = apprentice.Open(\"C:\\Temp\\Part1.ipt\")  \n\n      ' Get the Summary Information property set.  \n      Dim summaryInfo As PropertySet  \n      summaryInfo = doc.PropertySets.Item( _ \n                                    \"Inventor Summary Information\")  \n\n      ' Get the thumbnail property.  \n      Dim thumbProp As Inventor.Property  \n      thumbProp = summaryInfo.Item(\"Thumbnail\")  \n\n      ' Get the thumbnail image.  \n      Dim thumbnail As stdole.IPictureDisp  \n      thumbnail = thumbProp.Value  \n\n      ' Convert the IPictureDisp object to an Image.  \n      Dim img As Image = _ \n                    Compatibility.VB6.IPictureDispToImage(thumbnail) \n\n      ' Display the image in the picture box.  \n      PictureBox1.Image = img  \n   End Sub \nEnd Class"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: I need to get full file path from iProperties using property sets. VB.Net\n                    ", "solution": ["Dim oCompDef As ComponentDefinition\noCompDef = oRow.ComponentDefinitions.Item(1)\n\nDim oBOMRowDoc As Document\noBOMRowDoc = oCompDef.Document\n\nDim oFileName As String\noFileName = oBOMRowDoc.FullFileName"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic access to Custom Part information from a drawing file\n                    ", "solution": ["Dim", " ", "oDrawDoc", " ", "As", " ", "drawingdocument", " ", "=", " ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", " ", "=", " ", "Nothing", "\n        ", "Dim", " ", "sSheetName", " ", "As", " ", "String", " ", "=", " ", "Nothing", "\n\n        ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDrawDoc", ".", "Sheets", " ", "'", "do the operation for each sheet", "\n        \n        ", "Dim", " ", "oDrawingView", " ", "As", " ", "drawingview", " ", "=", " ", "Nothing", "\n        ", "For", " ", "Each", " ", "oDrawingview", " ", "In", " ", "oSheet", ".", "drawingviews", "\n        \n            ", "Dim", " ", "ComponentDocName", " ", "As", " ", "String", " ", "=", "  ", "oDrawingView", ".", "ReferencedDocumentDescriptor", ".", "FullDocumentName", "\n            \n            ", "Dim", " ", "ComponentDoc", " ", "As", " ", "Document", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "ComponentDocName", ", ", "True", ")", " ", "'", "False means it will open invisible ", "\n             \n            ", "'", "get the properties", "\n            ", "Dim", " ", "ComponentDocPropName", " ", "As", " ", "String", " ", "=", " ", "ComponentDoc", ".", "PropertySets", "(", "4", ")", ".", "Item", "(", "\"", "NAME", "\"", ")", ".", "Value", "  ", "'", "4 = custom", "\n             ", "MessageBox", ".", "Show", "(", "ComponentDocPropName", ", ", "\"", " Part NAME", "\"", ")", " ", "'", " Getting information from drawing not the part.", "\n            \n            ", "Dim", " ", "ComponentDocPropPartNumber", " ", "As", " ", "String", " ", "=", " ", "ComponentDoc", ".", "PropertySets", "(", "3", ")", ".", "Item", "(", "\"", "Part Number", "\"", ")", ".", "Value", "  ", "'", "3 = standard", "\n             ", "MessageBox", ".", "Show", "(", "ComponentDocPropPartNumber", ", ", "\"", "Part Number", "\"", ")", " ", "'", " Getting information from drawing not the part.", "\n            \n            ", "'", "write to a text file (https://msdn.microsoft.com/en-us/library/system.io.file.appendtext(v=vs.110).aspx)", "\n             ", "Dim", " ", "path", " ", "As", " ", "String", " ", "=", " ", "\"", "c:\\temp\\test2.txt", "\"", "\n\n                ", "'", " This text is added only once to the file. ", "\n                ", "If", " ", "Not", " ", "System", ".", "IO", ".", "File", ".", "Exists", "(", "path", ")", " ", "Then", "\n                    ", "'", " Create a file to write to.", "\n                    ", "Using", " ", "sw", " ", "As", " ", "System", ".", "IO", ".", "StreamWriter", " ", "=", " ", "System", ".", "IO", ".", "File", ".", "CreateText", "(", "path", ")", "\n                        ", "sw", ".", "WriteLine", "(", "ComponentDocPropName", " ", "&", " ", "\"", ",", "\"", " ", "&", " ", "ComponentDocPropPartNumber", ")", "\n                        ", "'", "sw.WriteLine(\"And\")", "\n                    ", "End", " ", "Using", "\n                ", "End", " ", "If", "\n\n                ", "'", " This text is always added, making the file longer over time ", "\n                ", "'", " if it is not deleted.", "\n                ", "Using", " ", "sw", " ", "As", " ", "System", ".", "IO", ".", "StreamWriter", " ", "=", " ", "System", ".", "IO", ".", "File", ".", "AppendText", "(", "path", ")", "\n                    ", "sw", ".", "WriteLine", "(", "ComponentDocPropName", " ", "&", " ", "\"", ",", "\"", " ", "&", " ", "ComponentDocPropPartNumber", ")", "\n                    ", "'", "sw.WriteLine(\"is Extra\")", "\n                ", "End", " ", "Using", "\n                    \n            ", "'", "close the document", "\n            ", "ComponentDoc", ".", "Close", "(", "True", ")", " ", "'", "true = skip save", "\n        \n        ", "Next", "\n                  \n", "Next", "        ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", " ", "=", " ", "ThisDoc", ".", "Document", "\n        \n        ", "For", " ", "Each", " ", "oRefdoc", " ", "As", " ", "Document", " ", "In", " ", "oDrawDoc", ".", "ReferencedDocuments", "\n            ", "MsgBox", "(", "oRefdoc", ".", "DisplayName", ")", "\n\n            ", "'", "put your code here", "\n\n        ", "Next"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Add-in loads but clicking the button doesn't do a thing\n                    ", "solution": [], "author": "Snivek"},
{"created at": [], "solution Title": "\n                        Re: parameters to be linked within Excel\n                    ", "solution": ["Sub Main()\n\t\n\tDim docFolder As String = My.Computer.FileSystem.SpecialDirectories.MyDocuments\n\t\n\tDim m1Value As String\n\tDim m2Value As String\n\t\n\tIf ThisDoc.FileName(False) = \"U21\" Then\n\t\n\t\tFindRowValue(docFolder, \"U21\", \"C\", m1Value)\n\t\tFindRowValue(docFolder, \"U21\", \"F\", m2Value)\n\t\t\n\t\tIf m1Value = \"\"  OrElse m2Value = \"\" Then\n\t\t\tMessageBox.Show(\"File name or parameters not found\", \"Inventor\")\n\t\tElse\n\t\t\tParameter(\"m1\") = m1Value\n\t\t\tParameter(\"m2\") = m2Value\n\t\tEnd If\n\t\n\tElse If ThisDoc.FileName(False) = \"U22\" Then\n\t\n\t\tFindRowValue(docFolder, \"U22\", \"C\", m1Value)\n\t\tFindRowValue(docFolder, \"U22\", \"F\", m2Value)\n\t\t\n\t\tIf m1Value = \"\"   OrElse  m2Value = \"\" Then\n\t\t\tMessageBox.Show(\"File name or parameters not found\", \"Inventor\")\n\t\tElse\n\t\t\tParameter(\"m1\") = m1Value\n\t\t\tParameter(\"m2\") = m2Value\n\t\tEnd If\n\t\n\tElse If ThisDoc.FileName(False) = \"U23\" Then\n\t\n\t\tFindRowValue(docFolder, \"U23\", \"C\", m1Value)\n\t\tFindRowValue(docFolder, \"U23\", \"F\", m2Value)\n\t\t\n\t\tIf m1Value = \"\"   OrElse  m2Value = \"\" Then\n\t\t\tMessageBox.Show(\"File name or parameters not found\", \"Inventor\")\n\t\tElse\n\t\t\tParameter(\"m1\") = m1Value\n\t\t\tParameter(\"m2\") = m2Value\n\t\tEnd If\t\n\t\n\tEnd If \n\t\n\tInventorVb.DocumentUpdate()\n\t\n\tThisApplication.ActiveView.Fit()\n\nEnd Sub\n\nSub FindRowValue(ByVal path As String, ByVal cellName As String, ByVal cell as String, ByRef value As String)\n\n\tvalue = \"\"\n\t\n\tFor rowcell = 2 To 50\n\t\n\t\tIf GoExcel.CellValue(path & \"\\Master.xlsx\", \"Sheet1\", \"A\" & rowcell) = cellName Then\t\n\t\t\t\t\n\t\t\tvalue = GoExcel.CellValue(cell & rowcell)\n\t\t\n\t\tEnd If\n\t\n\tNext\n\nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic to Access Material Information\n                    ", "solution": [" ", "Dim", " ", "oPartDoc", " ", "As", " ", "Inventor", ".", "PartDocument", " ", "=", " ", "ThisDoc", ".", "Document", "\n  ", "Dim", " ", "oRawMatNo", " ", "As", " ", "String", " ", "=", " ", "oPartDoc", ".", "ActiveMaterial", ".", "Item", "(", "\"", "physmat_Comments", "\"", ")", ".", "Value", "\n  ", "MsgBox", "(", "oRawMatNo", ")", "\n  ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Stock Number", "\"", ")", " ", "=", " ", "oRawMatNo"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: LineGraphics.LineWeight capped to 4 px\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How to add prompted text at 12,3,6 and 9 o'clock to Balloons.\n                    ", "solution": ["Sub Main()\n\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n\n    Dim oBalloon As Balloon\n    Set oBalloon = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingBalloonFilter, \"Select a balloon\")\n\n    Dim oStyle As BalloonStyle\n    For Each oStyle In oDrawDoc.StylesManager.BalloonStyles\n    \n    If oStyle.Name = \"Balloon Qty\" Then\n        Set oStyle = oDrawDoc.StylesManager.BalloonStyles.Item(\"Balloon Qty\")\n    End If\n    \n    Next\n    \n    If oStyle Is Nothing Then\n        Set oStyle = oDrawDoc.StylesManager.BalloonStyles.Item(1).Copy(\"Balloon Qty\")\n    End If\n\n    oStyle.BalloonType = BalloonTypeEnum.kCircularWithOneEntryBalloonType\n\n    oStyle.Properties = \"PartsListProperty='45575'\"\n\n    oBalloon.Style = oStyle\n\n    Dim strQty As String\n    strQty = oBalloon.BalloonValueSets.Item(1).Value\n    strQty = strQty & \"X\"\n\n    oBalloon.Style = oDrawDoc.StylesManager.BalloonStyles.Item(1)\n\n    oBalloon.SetBalloonType (BalloonTypeEnum.kCircularWithOneEntryBalloonType)\n\n    Call oStyle.Delete\n\n    Dim txtPt3o As Point2d\n    Set txtPt3o = ThisApplication.TransientGeometry.CreatePoint2d(oBalloon.Position.X, oBalloon.Position.Y)\n    txtPt3o.X = txtPt3o.X + oBalloon.Style.BalloonDiameter / 2\n    txtPt3o.Y = txtPt3o.Y + oDrawDoc.StylesManager.TextStyles.Item(1).FontSize / 2\n\n    Dim oText3o As Inventor.GeneralNote\n    Set oText3o = oDrawDoc.Sheets.Item(1).DrawingNotes.GeneralNotes.AddFitted(txtPt3o, strQty)\n\n    Dim txtPt9o As Point2d\n    Set txtPt9o = ThisApplication.TransientGeometry.CreatePoint2d(oBalloon.Position.X, oBalloon.Position.Y)\n    txtPt9o.X = (txtPt9o.X - (oBalloon.Style.BalloonDiameter / 2)) - (oDrawDoc.StylesManager.TextStyles.Item(1).WidthScale * 0.6)\n    txtPt9o.Y = txtPt9o.Y + oDrawDoc.StylesManager.TextStyles.Item(1).FontSize / 2\n\n    Dim oText9o As Inventor.GeneralNote\n    Set oText9o = oDrawDoc.Sheets.Item(1).DrawingNotes.GeneralNotes.AddFitted(txtPt9o, strQty)\n\nEnd Sub\n\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic Event-Driven Rule: The Specified path, file name, or both are too lon\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: AssociativeDraftView what is it good for?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Get Content Centre Shape with iLogic\n                    ", "solution": ["            ", "'", "Test for parameters", "\n            ", "Try", "\n            ", "parametro", " ", "=", " ", "Parameter", "(", "oPart", ", ", "\"", "G_NG", "\"", ")", "\n            ", "G_NG", " ", "=", " ", "1", "\n            ", "Catch", "\n            ", "G_NG", " ", "=", " ", "0", "\n            ", "End", " ", "Try", "\n            \n            ", "Try", "\n            ", "parametro", " ", "=", " ", "Parameter", "(", "oPart", ", ", "\"", "G_T", "\"", ")", "\n            ", "G_T", " ", "=", " ", "1", "\n            ", "Catch", "\n            ", "G_T", " ", "=", " ", "0", "\n            ", "End", " ", "Try", "\n            \n            ", "Try", "\n            ", "parametro", " ", "=", " ", "Parameter", "(", "oPart", ", ", "\"", "G_W", "\"", ")", "\n            ", "G_W", " ", "=", " ", "1", "\n            ", "Catch", "\n            ", "G_W", " ", "=", " ", "0", "\n            ", "End", " ", "Try", "\n            \n            ", "Try", "\n            ", "parametro", " ", "=", " ", "Parameter", "(", "oPart", ", ", "\"", "G_ER", "\"", ")", "\n            ", "G_ER", " ", "=", " ", "1", "\n            ", "Catch", "\n            ", "G_ER", " ", "=", " ", "0", "\n            ", "End", " ", "Try", "\n            \n            ", "Try", "\n            ", "parametro", " ", "=", " ", "Parameter", "(", "oPart", ", ", "\"", "G_T1", "\"", ")", "\n            ", "G_T1", " ", "=", " ", "1", "\n            ", "Catch", "\n            ", "G_T1", " ", "=", " ", "0", "\n            ", "End", " ", "Try", "\n            \n            ", "'", "Compare to expected parameters", "\n            ", "If", " ", "G_NG", " ", "=", " ", "1", " ", "Then", "\n            ", "AutoType", " ", "=", " ", "\"", "PFC", "\"", "\n            ", "ElseIf", " ", "G_T1", " ", "=", " ", "0", " ", "And", " ", "G_W", " ", "=", " ", "1", " ", "And", " ", "G_ER", " ", "=", " ", "0", " ", "And", " ", "G_T", " ", "=", " ", "1", " ", "Then", "\n            ", "AutoType", " ", "=", " ", "\"", "RHS", "\"", "\n            ", "ElseIf", " ", "G_T", " ", "=", " ", "1", " ", "And", " ", "G_W", " ", "=", " ", "0", " ", "Then", "\n            ", "AutoType", " ", "=", " ", "\"", "CHS", "\"", "\n            ", "ElseIf", " ", "G_T", " ", "=", " ", "0", " ", "And", " ", "G_W", " ", "=", " ", "0", " ", "Then", "\n            ", "AutoType", " ", "=", " ", "\"", "RD BAR", "\"", "    \n            ", "ElseIf", " ", "G_T1", " ", "=", " ", "1", " ", "And", " ", "G_NG", " ", "=", " ", "0", " ", "Then", "\n            ", "AutoType", " ", "=", " ", "\"", "UC", "\"", "\n            ", "ElseIf", " ", "G_ER", " ", "=", " ", "1", " ", "Then", "\n            ", "AutoType", " ", "=", " ", "\"", "RSA", "\"", "\n            ", "ElseIf", " ", "G_W", " ", "=", " ", "1", " ", "And", " ", "G_T", " ", "=", " ", "0", " ", "Then", "\n            ", "AutoType", " ", "=", " ", "\"", "F BAR", "\"", "\n            ", "Else", "\n            ", "AutoType", " ", "=", " ", "\"\"", "\n            ", "End", " ", "If"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Flipping component pattern in assemblies with iLogic\n                    ", "solution": [], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re: Bending Mild Steel A 36\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: custom iProperties creation\n                    ", "solution": ["    Dim oDoc As PartDocument\n    oDoc = ThisApplication.ActiveDocument        \n\n    Dim oPropSets As PropertySet\n    oPropSets = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n    Dim isPartNumber As Boolean = False\n    Dim isQty As Boolean = False\n    Dim isUOM As Boolean = False\n\n    For Each oProp As Inventor.Property In oPropSets\n        If oProp.DisplayName = \"MaterialPartNumber\" Then\n            isPartNumber = True\n        ElseIf oProp.DisplayName = \"MaterialQty\" Then\n            isQty = True\n        ElseIf oProp.DisplayName = \"MaterialUOM\" Then\n            isUOM = True\n        End If\n    Next\n\t", "    If isPartNumber = False Then\n\tiProperties.Value(\"Custom\", \"MaterialPartNumber\") = \"PartNumber\"\n    End If \n\t\n    If isQty = False Then\n\tiProperties.Value(\"Custom\", \"MaterialQty\") = \"Qty\"\n    End If\n\t\n    If isUOM = False Then\n\tiProperties.Value(\"Custom\", \"MaterialUOM\") = \"UOM\"\n    End If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Prevent rule running in assembly\n                    ", "solution": ["Sub Main()\n    ", "'Check if open document is sheetmetal\n    '---------------------------------------------------------------------------------------------", "\n    Dim oDoc As ", "Document", " = ThisApplication.ActiveDocument\n    If oDoc.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Exit Sub\n    \n    ", "'Check if open sheetmetal document has flatpattern view\n    '---------------------------------------------------------------------------------------------", "\n    Dim oSMD As ComponentDefinition = oDoc.ComponentDefinition\n    If Not oSMD.HasFlatPattern Then Exit Sub\n    Dim oFlat As FlatPattern = oSMD.FlatPattern\n    \n    ", "'Check if feature \"BendMarkerHoles\" exists\n    '---------------------------------------------------------------------------------------------", "\n    Dim FeatureName As String = \"", "BendMarkerHoles", "\"\n    \n    Dim oFTS As FlatPatternFeatures = oFlat.Features\n    If oFTS.Count > 0 Then\n        For Each oFT As PartFeature In oFTS\n            If oFT.Name <> FeatureName Then Continue For\n            Try\n                oFT.Delete()\n            Catch\n            End Try\n            Exit For\n        Next\n    End If\n    BendMarker(oFlat)\nEnd Sub    \n    \nSub BendMarker(oFlat As FlatPattern)\n    Dim oEdges As Edges\n    Dim oHoleCenters As Object = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    ", "'Flatpattern sketch -------------------------------------------------------------------------", "\n    Dim oSketch As PlanarSketch = oFlat.Sketches.Add(oFlat.TopFace, False)\n    oSketch.Edit()\n    \n    ", "'Detect bend down ---------------------------------------------------------------------------", "\n    oEdges = oFlat.GetEdgesOfType(64005, True)\n    WorkEdges(oHoleCenters, oSketch, oEdges)\n    \n    ", "'Detect bend up -----------------------------------------------------------------------------", "\n    oEdges = oFlat.GetEdgesOfType(64004, True)\n    WorkEdges(oHoleCenters, oSketch, oEdges)\n    \n    Call oFlat.Features.HoleFeatures.AddDrilledByThroughAllExtent(oHoleCenters, 0.1, kPositiveExtentDirection)\n    \n    Try\n        Dim oHoleFeat As HoleFeature = oFlat.Features.HoleFeatures.Item(1)\n        oHoleFeat.Name = \"", "BendMarkerHoles", "\"\n    Catch\n    End Try\n    \n    oSketch.ExitEdit()\n    oSketch.Name = \"", "MarkedBends", "\"\nEnd Sub\n\nSub WorkEdges(ByRef oHoleCenters As Object, ByRef oSketch As PlanarSketch, oEdges As Edges)", "    Dim oTG As TransientGeometry = ThisApplication.TransientGeometry\n    For Each oEdge As Edge In oEdges\n        Dim oEnt As SketchEntity = oSketch.AddByProjectingEntity(oEdge)\n    \n        Dim P As Point2d = oEnt.StartSketchPoint.Geometry\n        Dim oSP As SketchPoint = oSketch.SketchPoints.Add(oTG.CreatePoint2d(P.X, P.Y), True)\n        oHoleCenters.Add (oSP)\n        \n        P = oEnt.EndSketchPoint.Geometry\n        Dim oEP As SketchPoint = oSketch.SketchPoints.Add(oTG.CreatePoint2d(P.X, P.Y), True)\n        oHoleCenters.Add (oEP)\n    Next\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Part-Aligned Extents\n                    ", "solution": ["        ", "For", " ", "Each", " ", "sb", " ", "In", " ", "oCompDef", ".", "SurfaceBodies", "\n            ", "If", " ", "oRB", " ", "Is", " ", "Nothing", " ", "Then", "\n                ", "oRB", " ", "=", " ", "sb", ".", "RangeBox", ".", "Copy", "\n            ", "Else", "\n                ", "oRB", ".", "Extend", "(", "sb", ".", "RangeBox", ".", "MinPoint", ")", "\n                ", "oRB", ".", "Extend", "(", "sb", ".", "RangeBox", ".", "MaxPoint", ")", "\n            ", "End", " ", "If", "\n        ", "Next"], "author": "jmfowler1996"},
{"created at": [], "solution Title": "\n                        Re: iLogic supress all constraints\n                    ", "solution": ["Dim oAssDoc As AssemblyDocument\noAssDoc = ThisApplication.ActiveDocument\nDim oConstraint As AssemblyConstraint\nFor Each oConstraint In oAssDoc.ComponentDefinition.Constraints\n\toConstraint.Suppressed = True\nNext ", "Dim oAssDoc As AssemblyDocument\noAssDoc = ThisApplication.ActiveDocument\nDim oConstraint As AssemblyConstraint\nFor Each oConstraint In oAssDoc.ComponentDefinition.Constraints\n\toConstraint.Suppressed = False\nNext \n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2018 custom Add-In\n                    ", "solution": ["Dim partRibbon As Ribbon = g_inventorApplication.UserInterfaceManager.Ribbons.Item(\"Assembly|Part|ZeroDoc\")", "Dim partRibbon As Ribbon = g_inventorApplication.UserInterfaceManager.Ribbons.Item(\"Part\")", "Dim AssyRibbon as Ribbon = g_inventorApplication.UserInterfaceManager.Ribbons.Item(\"Assembly\")", "'' Create a new panel.\n            Dim customPanel As RibbonPanel = toolsTab.RibbonPanels.Add(\"Sample\", \"MysSample\", AddInClientID)\n\n            '' Add a button.\n            ", "m_sampleButton", ".CommandControls.AddButton(m_sampleButton)Should be", "'' Create a new panel.\n            Dim customPanel As RibbonPanel = toolsTab.RibbonPanels.Add(\"Sample\", \"MysSample\", AddInClientID)\n\n            '' Add a button.\n            ", "customPanel", ".CommandControls.AddButton(m_sampleButton)", "'' Get the part ribbon.\n            Dim ", "partRibbon", " As Ribbon = g_inventorApplication.UserInterfaceManager.Ribbons.Item(\"", "Assembly", "\")", " If firstTime Then\n                AddToUserInterface()\n  End If", "' If firstTime Then\n                AddToUserInterface()\n' End If"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Set the offset of component to zero and ground them\n                    ", "solution": ["Dim tr As TransientGeometry\ntr = ThisApplication.TransientGeometry\n\nDim entity = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAssemblyOccurrenceFilter, \"Select Component:\")\n\nIf (Not entity Is Nothing) And _\n(TypeOf entity Is ComponentOccurrence) Then\n  If Not entity.Suppressed Then\n   \t \t\tCall entity.SetTransformWithoutConstraints( _\n    \t  \ttr.CreateMatrix())\n   \t \t\tentity.Grounded = True\n\tEnd If\nEnd If\n"], "author": "Ezekiel12"},
{"created at": [], "solution Title": "\n                        Re: Check if titleblockdefinition exists\n                    ", "solution": ["Function TBExists(oTBName) As Boolean\n     Exists = False\n     For Each oTB in oDrawDoc.TitleBlockDefinitions\n               If oTB.Name = oTBName Then\n                        Exists = True\n               End if\n      Next\n      Return Exists\nEnd Function"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Application Options, File Tab, Texture folder - change the path using the AP\n                    ", "solution": ["ThisApplication.FileOptions.TexturePath = \"Folder path\""], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: To share declarations between sub\n                    ", "solution": ["'This Is one way, you pass the variable To the Sub\nSub Main()\noDoc = ThisDoc.Document\noSketchesVisible(odoc)\noRqdSketchesVisible(odoc)\nEnd Sub\n\nSub oSketchesVisible(odoc as document)\n'oDoc = ThisDoc.Document\nFor Each oSketch In oDoc.ComponentDefinition.Sketches \noSketch.Visible = True \noSketch.DimensionsVisible = False \nNext\nEnd Sub\n\nSub oRqdSketchesVisible(odoc as document) \noSketches = ThisApplication.ActiveDocument.ComponentDefinition.Sketches \n\t'oDoc = ThisDoc.Document oSketchName = InputBox(\"Prompt\", \"Title\", \"Type Sketch Name\") \n\tFor Each oSketch In oDoc.ComponentDefinition.Sketches \n\t\tIf oSketch.Name = oSketchName Then\n\t\toSketch.Visible = True\n\t\toSketch.DimensionsVisible = False \n\t\t\tFor Each oSketchBlock In oSketch.SketchBlocks \n\t\t\tiPos = InStr(oSketchBlock.Name, \":\") \n\t\t\tsBlockName = Left(oSketchBlock.Name, iPos-1) \n\t\t\t'oSketchBlock.Visible = False\n\t\t\toSketchBlock.Visible = True \n\t\t\tNext\n\t\tElse\n\t\toSketch.Visible = False \n\t\toSketch.DimensionsVisible = False\n\t\tEnd If\n\tNext\nEnd Sub "], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Ilogic and disappearing dimensions in the drawing\n                    ", "solution": [], "author": "pawel3050"},
{"created at": [], "solution Title": "\n                        Re: Porting from 2015 to 2018\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: need to replace base component in shrinkwrap file\n                    ", "solution": [], "author": "JarFu"},
{"created at": [], "solution Title": "\n                        Re: Create a workplane tangent to a curved surface with API\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Prompted name change when placing parts in an assembly\n                    ", "solution": ["oDoc.DisplayName = \"\""], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Automated Centerlines (API)\n                    ", "solution": ["Public Sub CenterLineTest()\n    Dim drawDoc As DrawingDocument\n    Set drawDoc = ThisApplication.ActiveDocument\n    \n    Dim topView As DrawingView\n    Dim sectionView As DrawingView\n    Set topView = drawDoc.ActiveSheet.DrawingViews.Item(1)\n    Set sectionView = drawDoc.ActiveSheet.DrawingViews.Item(2)\n    \n    Dim settings As AutomatedCenterlineSettings\n    Set settings = drawDoc.DrawingSettings.AutomatedCenterlineSettings\n    \n    settings.ApplyToCylinders = True\n    settings.ProjectionParallelAxis = True\n    Call topView.SetAutomatedCenterlineSettings(settings)\n    Call sectionView.SetAutomatedCenterlineSettings(settings)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic to create Message Box with image\n                    ", "solution": ["Imports System\nAddReference \"System.Drawing.dll\"\nImports System.Windows.Forms\n\nSub Main()\n\tCreateForm(\"MyForm\")\n\tMF.ShowDialog()\n\t", "MsgBox(\"ComboBox one value: \" & CB(0).Text & vbNewLine & \"ComboBox two value: \" & CB(1).Text & _\n\tvbNewLine & \"TextBox one value: \" & TB(0).Text)", "\nEnd Sub\n\nPrivate MF As Form\nPublic CB(0) As ComboBox\nPublic TB(0) As TextBox\nPublic PB(0) As PictureBox\n\nPrivate Sub CreateForm(Optional Name As String = vbNullString)\n\tMF = New Form\n\tMF.Text = Name\n\tMF.AutoScaleMode = AutoScaleMode.None\n\tMF.Size = New Drawing.Size(", "300, 300", ") 'Width, Heigth\n\tMF.MinimumSize = MF.Size\n\tMF.MaximumSize = MF.Size\n\tMF.Font = New Drawing.Font(MF.Font.FontFamily, 10)\n\tMF.MaximizeBox = False\n\tMF.MinimizeBox = False\n\tMF.ShowIcon = False\n\tMF.SizeGripStyle = SizeGripStyle.Hide\n\tMF.StartPosition = FormStartPosition.CenterScreen\n\t\n\t", "AddLabel(5, 5, \"Parameter One\")\n\tAddLabel(5, 40, \"Parameter Two\")\n\tAddCB(120, 5, {\"Option one\", \"Option two\"}, 150)\n\tAddCB(120, 40, {\"Option three\", \"Option four\"}, 150)\n\tAddTB(120, 75, \"sometext\", 150)", "\n\t", "AddPB(20, 120, Drawing.Image.FromFile(\"C:\\Path\\01.jpg\"))", "\n\t\n\tAddExitButton()\nEnd Sub\n\nPrivate Sub AddLabel(PosX As Integer, PosY As Integer, Caption As String, Optional Width As Integer = 100)\n\tDim LC As Integer = MF.Controls.Count + 1\n\tDim L1 As New Label\n\tL1.Name = \"L\" & LC\n\tL1.Location = New Drawing.Point(PosX, PosY)\n\tL1.Text = Caption\n\tL1.Width = Width\n\tMF.Controls.Add(L1)\nEnd Sub\n\nPrivate Sub AddTB(PosX As Integer, PosY As Integer, Optional Caption As String = vbNullString, Optional Width As Integer = 100)\n\tDim LC As Integer = TB.Length - 1\n\tIf Not TB(LC) Is Nothing Then\n\t\tLC = LC + 1\n\t\tReDim Preserve TB(LC)\n\tEnd If\n\tTB(LC) = New TextBox\n\tTB(LC).Location = New Drawing.Point(PosX, PosY)\n\tTB(LC).Name = \"TB\" & LC\n\tTB(LC).Text = Caption\n\tTB(LC).Width = Width\n\tMF.Controls.Add(TB(LC))\nEnd Sub\n\nPrivate Sub AddCB(PosX As Integer, PosY As Integer, Values() As String, Optional Width As Integer = 100)\n\tDim LC As Integer = CB.Length - 1\n\tIf Not CB(LC) Is Nothing Then\n\t\tLC = LC + 1\n\t\tReDim Preserve CB(LC)\n\tEnd If\n\tCB(LC) = New ComboBox\n\tCB(LC).Location = New Drawing.Point(PosX, PosY)\n\tCB(LC).Name = \"CB\" & LC\n\tCB(LC).Width = Width\n\tFor Each Value As String In Values\n\t\tCB(LC).Items.Add(Value)\n\tNext\n\tMF.Controls.Add(CB(LC))\nEnd Sub\n\nPrivate Sub AddPB(PosX As Integer, PosY As Integer, Pic As Drawing.Image)\n\tIf Pic Is Nothing Then Exit Sub\n\tDim LC As Integer = PB.Length - 1\n\tIf Not PB(LC) Is Nothing Then\n\t\tLC = LC + 1\n\t\tReDim Preserve PB(LC)\n\tEnd If\n\tPB(LC) = New PictureBox\n\tPB(LC).Location = New Drawing.Point(PosX, PosY)\n\tPB(LC).Name = \"PB\" & LC\n\tPB(LC).Width = Pic.Width\n\tPB(LC).Height = Pic.Height\n\tPB(LC).Image = Pic\n\tMF.Controls.Add(PB(LC))\nEnd Sub\n\nPrivate Sub AddButton(PosX As Integer, PosY As Integer, Caption As String)\n\tDim LC As Integer = MF.Controls.Count + 1\n\tDim BT As New Button\n\tBT.Name = \"BT\" & LC\n\tBT.Location = New Drawing.Point(PosX, PosY)\n\tBT.Text = Caption\n\tMF.Controls.Add(BT)\nEnd Sub\n\nPrivate Sub AddExitButton()\n\tDim BT As New Button\n\tBT.Name = \"BT_Exit\"\n\tDim PosX As Integer = MF.Width - (BT.Width * 1.3)\n\tDim PosY As Integer = MF.Height - (BT.Height * 3)\n\tBT.Location = New Drawing.Point(PosX, PosY)\n\tBT.Text = \"OK\"\n\tMF.Controls.Add(BT)\n\tAddHandler BT.Click, AddressOf Me.ExitButtonClick\nEnd Sub\n\nPrivate Sub ExitButtonClick()\n\tMF.Close()\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2017 Addin Templates\n                    ", "solution": ["msiexec /", "a", " \"C:\\Users\\Public\\Documents\\Autodesk\\Inventor 2017\\SDK\\developertools.msi\" /qb TARGETDIR=\"C:\\Users\\Gus\\Desktop\\DT\""], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic Sheet Size as External Rule\n                    ", "solution": [], "author": "pr33d2"},
{"created at": [], "solution Title": "\n                        Re: ArrayList Strings\n                    ", "solution": ["\"PLATE S/S .25\" &  Chr(34) & \"X48\" &  Chr(34)"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Adding HoleThreadNote to correct side of Hole Feature\n                    ", "solution": [], "author": "LishuangLu"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2011 - Confusion with millimeters and centimeters\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Custom iProperties for drawing template\n                    ", "solution": ["option explicit", "Public Sub CreateIProps()\n\n    Dim invApp As Inventor.Application: Set invApp = ThisApplication\n    \n    If invApp.ActiveDocumentType = kNoDocument Then Exit Sub\n    Dim oDoc As Inventor.Document: Set oDoc = invApp.ActiveDocument\n\n    Dim Col As New Collection\n    Col.Add Array(\"iProp1\", \"first string\"), \"iProp1\"\n    Col.Add Array(\"iProp2\", \"second string\"), \"iProp2\"\n    Col.Add Array(\"iProp3\", \"third string\"), \"iProp3\"\n    \n    Dim i As Variant\n    Dim oPropSet As PropertySet: Set oPropSet = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n    Dim oProp As Property\n    \n    For Each i In Col\n        'Debug.Print i(0) & i(1)\n        \n        On Error Resume Next\n        Set oProp = oPropSet.Item(CStr(i(0)))\n        If Err.Number <> 0 Then  'Not Found so create the property and populate with value.\n            oPropSet.Add i(1), i(0)\n        Else                     'Found so just populate\n            oPropSet.Item(CStr(i(0))).value = i(1)\n        End If\n        On Error GoTo 0\n    Next\n\nEnd Sub"], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: Excel Data Link using R1C1 method\n                    ", "solution": ["xlApp", " ", "=", " ", "GetObject", "(", ",", "\"", "Excel.Application", "\"", ")", "\n\n", "excelWorkbook", " ", "=", " ", "xlApp", ".", "Workbooks", ".", "Open", "(", "XLSLookup", ")", "\n\n", "excelSheet", " ", "=", " ", "excelWorkbook", ".", "Worksheets", "(", "\"", "SAP HISTORY", "\"", ")", ".", "activate", "\n\n", "oRow", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "XLSLookup", ", ", "\"", "SAP HISTORY", "\"", ", ", "\"", "Part Number", "\"", ", ", "\"", "=", "\"", ", ", "AssyPartNum", ")", "\n    \n", "'", "MsgBox(oRow)", "\n\n", "oCol", " ", "=", " ", "3", "\n    \n", "If", " ", "oRow", " ", "=", " ", "\"", "-1", "\"", " ", "Then", "\n    \n    ", "oRow", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "XLSLookup", ", ", "\"", "SAP HISTORY", "\"", ", ", "\"", "Part Number", "\"", ", ", "\"", "=", "\"", ", ", "\"", "END OF LIST", "\"", ")", "\n    \n    ", "'", "MsgBox(oRow)", "\n    \n    ", "xlApp", ".", "activeworkbook", ".", "ActiveSheet", ".", "cells", "(", "oRow", ",", "1", ")", ".", "Value", " ", "=", " ", "AssyPartNum", "\n    \n    ", "xlApp", ".", "activeworkbook", ".", "ActiveSheet", ".", "cells", "(", "oRow", ",", "2", ")", ".", "Value", " ", "=", " ", "AssyDesc", "\n    \n    ", "xlApp", ".", "activeworkbook", ".", "ActiveSheet", ".", "cells", "(", "oRow", ",", "3", ")", ".", "Value", " ", "=", " ", "AssyVendor", "\n    \n    ", "xlApp", ".", "activeworkbook", ".", "ActiveSheet", ".", "cells", "(", "oRow", ",", "4", ")", ".", "Value", " ", "=", " ", "SAPNO", "\n    \n    ", "xlApp", ".", "activeworkbook", ".", "ActiveSheet", ".", "cells", "(", "oRow", ",", "5", ")", ".", "Value", " ", "=", " ", "\"", "END OF ROW", "\"", "\n    \n    ", "xlApp", ".", "activeworkbook", ".", "ActiveSheet", ".", "cells", "((", "oRow", "+", "1", ")", ",", "1", ")", ".", "Value", " ", "=", " ", "\"", "END OF LIST", "\"", "\n    \n    ", "Else", "\n    \n    ", "Do", " ", "Until", " ", "oCell", " ", "=", " ", "\"", "END OF ROW", "\"", "\n    \n        ", "oCol", " ", "=", " ", "oCol", " ", "+", " ", "1", "\n    \n        ", "oCell", " ", "=", " ", "xlApp", ".", "activeworkbook", ".", "ActiveSheet", ".", "cells", "(", "oRow", ",", "oCol", ")", ".", "Value", "\n    \n        ", "'", "MsgBox(oCell)", "\n        \n        ", "If", " ", "oCol", " ", "=", " ", "15", " ", "Then", " ", "Return", "\n        \n    ", "Loop", "\n    \n    ", "xlApp", ".", "activeworkbook", ".", "ActiveSheet", ".", "cells", "(", "oRow", ",", "oCol", ")", ".", "Value", " ", "=", " ", "SAPNO", "\n    \n    \n    ", "xlApp", ".", "activeworkbook", ".", "ActiveSheet", ".", "cells", "(", "oRow", ",", "(", "oCol", "+", "1", "))", ".", "Value", " ", "=", " ", "\"", "END OF ROW", "\"", "\n    \n    \n\n    \n", "End", " ", "If", "\n\n", "']", "\n\n    ", "excelworkbook", ".", "Save", "\n    ", "excelworkbook", ".", "Close"], "author": "DRLTKSE"},
{"created at": [], "solution Title": "\n                        Re: Export BOM Assemblies\n                    ", "solution": ["Imports", " ", "System", ".", "Windows", ".", "Forms", "\n", "Imports", " ", "System", ".", "IO", "\n\n", "Public", " ", "Sub", " ", "Main", "\n    ", "Dim", " ", "oPath", " ", "As", " ", "String", "\n    \n    ", "'", " Search for the folder", "\n    ", "Dim", " ", "Dialog", " ", "=", " ", "New", " ", "FolderBrowserDialog", "()", "\n    ", "Dialog", ".", "ShowNewFolderButton", " ", "=", " ", "True", "\n    ", "Dialog", ".", "Description", " ", "=", " ", "\"", "Jef_E Bom's export tool", "\"", "\n\n    ", "'", " Show dialog box", "\n    ", "If", " ", "DialogResult", ".", "OK", " ", "=", " ", "Dialog", ".", "ShowDialog", "()", " ", "Then", "\n        ", "'", " User clicked 'ok' on dialog box - capture the export path", "\n        ", "oPath", " ", "=", " ", "Dialog", ".", "SelectedPath", " ", "&", " ", "\"", "\\", "\"", "\n        ", "Dim", " ", "Dirs", "()", " ", "As", " ", "String", " ", "=", " ", "Directory", ".", "GetDirectories", "(", "oPath", ")", "\n        \n        ", "For", " ", "Each", " ", "item", " ", "In", " ", "Dirs", "\n            ", "ExportToExcel", "(", "item", ")", "\n        ", "Next", "\n    ", "Else", "\n        ", "'", " User clicked 'cancel' on dialog box - exit", "\n        ", "Return", "\n    ", "End", " ", "If", "\n", "MessageBox", ".", "Show", "(", "\"", "Export is ready!!", "\"", ", ", "\"", "Title", "\"", ")", "\n\n\n", "End Sub", "\n\n", "Sub", " ", "ExportToExcel", "(", "oPath", " ", "As", " ", "String", ")", "\n    ", "'", " Make a reference to a directory.", "\n    ", "Dim", " ", "oDirectoryInfo", " ", "As", " ", "New", " ", "DirectoryInfo", "(", "oPath", ")", "\n    \n    ", "'", " Get a reference to each file in that directory.", "\n    ", "Dim", " ", "oFileArray", " ", "As", " ", "FileInfo", "()", " ", "=", " ", "oDirectoryInfo", ".", "GetFiles", "()", "\n    \n    ", "'", " Display the names of the files.", "\n    ", "Dim", " ", "oFileInfo", " ", "As", " ", "FileInfo", "\n    \n    ", "'", " Loop through all files in the directory (not in the sub directories.)", "\n    ", "For", " ", "Each", " ", "oFileInfo", " ", "In", " ", "oFileArray", "\n\n        ", "If", " ", "oFileInfo", ".", "Name", ".", "contains", "(", "\"", ".iam", "\"", ")", " ", "Then", "\n        \n            ", "'", " Open the file", "\n            ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oFileInfo", ".", "FullName", ", ", "True", ")", " \n            \n            ", "'", " Export the BOM", "\n            \n            ", "'", " Set a reference to the assembly document.", "\n            ", "'", " This assumes an assembly document is active.", "\n            ", "Dim", " ", "oDoc", " ", "As", " ", "AssemblyDocument", "\n            ", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n            \n            ", "'", " Set a reference to the BOM", "\n            ", "Dim", " ", "oBOM", " ", "As", " ", "BOM", "\n            ", "oBOM", " ", "=", " ", "oDoc", ".", "ComponentDefinition", ".", "BOM", "\n            \n            ", "'", " Set the structured view to 'all levels'", "\n            ", "oBOM", ".", "StructuredViewFirstLevelOnly", " ", "=", " ", "False", "\n        \n            ", "'", " Make sure that the structured view is enabled.", "\n            ", "oBOM", ".", "StructuredViewEnabled", " ", "=", " ", "True", "\n        \n            ", "'", " Set a reference to the \"Structured\" BOMView", "\n            ", "Dim", " ", "oStructuredBOMView", " ", "As", " ", "BOMView", "\n            ", "oStructuredBOMView", " ", "=", " ", "oBOM", ".", "BOMViews", ".", "Item", "(", "\"", "Structured", "\"", ")", "\n            \n            ", "Dim", " ", "oExcelPath", " ", "As", " ", "String", "\n            ", "oExcelPath", " ", "=", " ", "oPath", " ", "&", " ", "System", ".", "IO", ".", "Path", ".", "GetFileNameWithoutExtension", "(", "oDoc", ".", "FullFileName", ")", "&", " ", "\"", ".xls", "\"", "\n            \n            ", "'", " Export the BOM view to an Excel file", "\n            ", "oStructuredBOMView", ".", "Export", "(", "oExcelPath", ", ", "kMicrosoftExcelFormat", ")", "\n            \n            ", "'", " Close the document", "\n            ", "oDoc", ".", "Close", "\n        \n        ", "End", " ", "If", "\n    ", "Next", "\n", "End Sub"], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: How to highlight or colour static value in partlist?\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Hiding parts using an excel spreadsheet\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Change selection mode in assembly via API\n                    ", "solution": [], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Change same parameter of different occurences to different values\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic - Error setting occurence Appearance ( color )\n                    ", "solution": ["For Each oOccurrence  As ComponentOccurrence  In oAsmCompDef.Occurrences.AllReferencedOccurrences(oAsmCompDef)  \t\n"], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: 2018 broke my rule\n                    ", "solution": ["If oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then\noOptions.Value(\"All_Color_AS_Black\") = 1\noOptions.Value(\"Remove_Line_Weights\") = 1\noOptions.Value(\"Vector_Resolution\") = 400\noOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintSheetRange\nEnd If", "oOptions.Value(\"All_Color_AS_Black\") = 1\noOptions.Value(\"Remove_Line_Weights\") = 1\noOptions.Value(\"Vector_Resolution\") = 400\noOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Inventor & Inventor Professional\n                    ", "solution": [], "author": "jeffrey.sin"},
{"created at": [], "solution Title": "\n                        Betreff: insert ifeature with ilogic\n                    ", "solution": [], "author": "LishuangLu"},
{"created at": [], "solution Title": "\n                        Re: Sketch on Flat Pattern Issue\n                    ", "solution": ["'[ edit these variables as needed\nsSketchName = \"Flat Pattern Sketch\"\nsHoleName = \"Locator Holes\"\noOffset = 0.100 in'defines offset from edge of flat pattern\noDiameter = 0.125 in 'defines hole diameter\n']\t\n\n'  a reference to the active document.\nDim oPartDoc As PartDocument\noPartDoc = ThisApplication.ActiveDocument\n\n'verify document type is sheet metal\nIf oPartDoc.ComponentDefinition.Type <> 150995200 Then\n\tMessageBox.Show(\"File is not a sheet metal part.\", \"iLogic\")\n\tExit Sub\nEnd If\n\nDim oCompDef As SheetMetalComponentDefinition\noCompDef = oPartDoc.ComponentDefinition\n\n' Check to make sure a flat pattern is open.\nIf Not TypeOf ThisApplication.ActiveEditObject Is FlatPattern Then\n\tTry\n\t\tIf oCompDef.HasFlatPattern = False Then\n\t\t\toCompDef.Unfold\n\t\tElse\n\t\t\toCompDef.FlatPattern.Edit\n\t\tEnd If\n\tCatch\n\t\tMessageBox.Show(\"Error editting the flat pattern.\", \"iLogic\")\n\n\tEnd Try\nEnd If\n\n'  a reference to the active flat pattern.\nDim oFlatPattern As FlatPattern\noFlatPattern = ThisApplication.ActiveEditObject\n\n'clean up existing holes\nDim oHole As HoleFeature\nFor Each oHole In oFlatPattern.Features.HoleFeatures\n\toHole.Delete\nNext\n \nDim oFace As Face\n'oFace = oFlatPattern.BottomFace\noFace = oFlatPattern.TopFace\n\nDim oSketch As PlanarSketch\n\n'clean up existing sketch\nFor Each oSketch In oFlatPattern.Sketches\n\tIf oSketch.Name = sSketchName Then\n\t\toSketch.Delete\n\tEnd If\nNext\n\n' Create a new sketch.  The second argument specifies to include/not include\n' the edges of the face in the sketch.\noSketch = oFlatPattern.Sketches.Add(oFace, False)\n\n' Change the name.\noSketch.Name = sSketchName\n\n' Create a new object collection for the hole center points.\noHoleCenters = ThisApplication.TransientObjects.CreateObjectCollection\n\nDim oTG As TransientGeometry\noTG = ThisApplication.TransientGeometry\t\n\t\nDim oPoint As Point2d\nDim oEdge As Edge\n\n\nDim oEdges As Edges\n\n' Get all Bend UP edges\n'where true = top face\noEdges = _\noFlatPattern.GetEdgesOfType( _\nFlatPatternEdgeTypeEnum.kBendUpFlatPatternEdge, True) 'true = top face\n\nFor Each oEdge In oEdges\n    ", "Dim line As SketchLine = oSketch.AddByProjectingEntity(oEdge)\n    oHoleCenters.Add(oSketch.SketchPoints.Add(line.StartSketchPoint.Geometry, True))\n\n    oHoleCenters.Add(oSketch.SketchPoints.Add(line.EndSketchPoint.Geometry, True))\n\n    line.Delete()\n", "Next\n\n' Get all Bend Down edges\n'where true = top face\noEdges = _\noFlatPattern.GetEdgesOfType( _\nFlatPatternEdgeTypeEnum.kBendDownFlatPatternEdge, True) \n\nFor Each oEdge In oEdges\n    ", "Dim line As SketchLine = oSketch.AddByProjectingEntity(oEdge)\n    oHoleCenters.Add(oSketch.SketchPoints.Add(line.StartSketchPoint.Geometry, True))\n\n    oHoleCenters.Add(oSketch.SketchPoints.Add(line.EndSketchPoint.Geometry, True))\n\n    line.Delete()", "\nNext", "Sub Main\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim Sheet As Inventor.Sheet\nDim oView As DrawingView\nDim oAutoCenterLines As AutomatedCenterlineSettings\nDim oNameList As New ArrayList\noNameList.Clear\n\nDim oCurrentSheet  As Sheet\noCurrentSheet = oDrawDoc.ActiveSheet\n\n'iterate through the sheets\nFor Each oSheet In oDrawDoc.Sheets\n\toSheet.Activate\n\t'iterate through the views\n\tFor Each oView In oSheet.DrawingViews\n\t\toModDoc = ActiveSheet.View(oView.Name).ModelDocument\n\t\t\t\n\t\t'determine if the model is a sheet metal part\n\t\tIf oModDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then \n\t\t\n\t\t\t'check if list contains name\n\t\t\t'indicating it's already been processed\n\t\t\tIf oNameList.Contains(oModDoc.FullFileName) Then \n\t\t\t\t'do nothing\n\t\t\tElse\n\t\t\t\t'add to list\n\t\t\t\toNameList.Add(oModDoc.FullFileName)\n\t\t\t\t'process flat pattern\n\t\t\t\tCall FlattPattern_sub(oModDoc.FullFileName)\n\t\t\t\n\t\t\tEnd If\n\t\t\t\n\t\t\t'set automatic center line settings\n\t\t\toView.GetAutomatedCenterlineSettings(oAutoCenterLines)\n\t\t\t\toAutoCenterLines.ApplyToHoles = True\n\t\t\t\toAutoCenterLines.ApplyToPunches = True\n\t\t\t\t\n\t\t\t'get automatic center lines\t\n\t\t\toView.SetAutomatedCenterlineSettings(oAutoCenterLines)\t\t\t\t\n\t\t\t\n\t\tEnd If\n\tNext\nNext\n\noCurrentSheet.Activate\n\nEnd Sub\n\nSub FlattPattern_sub(oDoc As String)\n'[ edit these variables as needed\nsSketchName = \"Flat Pattern Sketch\"\nsHoleName = \"Locator Holes\"\noOffset = 0.1 'defines offset from edge of flat pattern\noDiameter = 0.125 'defines hole diameter\n']\t\n\n'open the sheet metal part file\noPartDoc = ThisApplication.Documents.Open(oDoc, True) \n\n\n'verify document type is sheet metal\nIf oPartDoc.ComponentDefinition.Type <> 150995200 Then\n\tMessageBox.Show(\"File is not a sheet metal part.\", \"iLogic\")\n\tExit Sub\nEnd If\n\nDim oCompDef As SheetMetalComponentDefinition\noCompDef = oPartDoc.ComponentDefinition\n\n' Check to make sure a flat pattern is open.\nIf Not TypeOf ThisApplication.ActiveEditObject Is FlatPattern Then\n\tTry\n\t\tIf oCompDef.HasFlatPattern = False Then\n\t\t\toCompDef.Unfold\n\t\tElse\n\t\t\toCompDef.FlatPattern.Edit\n\t\tEnd If\n\tCatch\n\t\tMessageBox.Show(\"Error editting the flat pattern.\", \"iLogic\")\n\n\tEnd Try\nEnd If\n\n'  a reference to the active flat pattern.\nDim oFlatPattern As FlatPattern\noFlatPattern = ThisApplication.ActiveEditObject\n\n'clean up existing holes\nDim oHole As HoleFeature\nFor Each oHole In oFlatPattern.Features.HoleFeatures\n\toHole.Delete\nNext\n \nDim oFace As Face\noFace = oFlatPattern.TopFace\n\nDim oSketch As PlanarSketch\n\n'clean up existing sketch\nFor Each oSketch In oFlatPattern.Sketches\n\tIf oSketch.Name = sSketchName Then\n\t\toSketch.Delete\n\tEnd If\nNext\n\n' Create a new sketch.  \n' the Second argument specifies To include/Not include\n' the edges of the face in the sketch.\noSketch = oFlatPattern.Sketches.Add(oFace, False)\n\n' Change the name.\noSketch.Name = sSketchName\n\t\n'Dim oPoint As Point2d\nDim oSketchPoint As SketchPoint\noOffset = oOffset * 2.5400013716 'converts cm to inches\n\nDim oEdges As Edges\n\n' Create a new object collection for the hole center points.\noHoleCenters = ThisApplication.TransientObjects.CreateObjectCollection\n\n' Get all Bend UP edges\n'where true = top face\noEdges = _\noFlatPattern.GetEdgesOfType( _\nFlatPatternEdgeTypeEnum.kBendUpFlatPatternEdge, True) \n\n'process the Bend Edges\nCall Create_SketchPoints(oSketch, oEdges, oHoleCenters, oOffset)\n\n' Get all Bend Down edges\n'where true = top face\noEdges = _\noFlatPattern.GetEdgesOfType( _\nFlatPatternEdgeTypeEnum.kBendDownFlatPatternEdge, True) \n\n'process the Bend Edges\nCall Create_SketchPoints(oSketch, oEdges, oHoleCenters, oOffset )\n\n' Create the hole feature\noHole =  oFlatPattern.Features.HoleFeatures.AddDrilledByThroughAllExtent( _\n\t\toHoleCenters, oDiameter * 2.5400013716 , kPositiveExtentDirection)\n\noHole.Name = sHoleName\n\noCompDef.FlatPattern.ExitEdit\noPartDoc.Save\noPartDoc.Close\nEnd Sub\n\nSub Create_SketchPoints _\n(oSketch As Sketch, oEdges As Edges, _\noHoleCenters As ObjectCollection, oOffset As Double)\n\n    ' Set a reference to the transient geometry object.\n    Dim oTransGeom As TransientGeometry\n    oTransGeom = ThisApplication.TransientGeometry\n\n\nFor Each oEdge In oEdges\n\n\t'create line\n    Dim skLine As SketchLine \n\tskLine = oSketch.AddByProjectingEntity(oEdge)\n\t\n\tDim oLineSegment1 As LineSegment2d\n\toLineSegment1 = skLine.Geometry\n\t\n    Dim startPt As Point2d\n    startPt = skLine.StartSketchPoint.Geometry\t\n\t\n    Dim endPt As Point2d\n    endPt = skLine.EndSketchPoint.Geometry\t\n\t\n    Dim startSkPt As SketchPoint\n    Dim endSkPt As SketchPoint\n\t\n\tDim oInterSectPoint As Point2d\n    Dim oCircle As SketchCircle\t\t\n\n'start point\n\t'create circle\n    oCircle = oSketch.SketchCircles.AddByCenterRadius(startPt, oOffset)\n\t\n\t'find intersection of circle and line\n\toInterSectPoint = oLineSegment1.IntersectWithCurve(oCircle.Geometry).Item(1)\n\t'create point for hole\n\tstartSkPt = oSketch.SketchPoints.Add(oInterSectPoint, True)\n\t\n\t'constrain geometry\n\toCircle.Construction = True\n\toSketch.DimensionConstraints.AddDiameter (oCircle, startPt ) \n\toSketch.GeometricConstraints.AddCoincident(startSkPt, skLine)\n\toSketch.GeometricConstraints.AddCoincident(startSkPt, oCircle)\n\toSketch.GeometricConstraints.AddCoincident _\n\t(skLine.StartSketchPoint, oCircle.CenterSketchPoint)\t\n\t\n\t'add to hole center collection\n\toHoleCenters.Add(startSkPt)\n\t\n'end point\n\t'create circle\n    oCircle = oSketch.SketchCircles.AddByCenterRadius(endPt, oOffset)\n\t\n\t'find intersection of circle and line\n\toInterSectPoint = oLineSegment1.IntersectWithCurve(oCircle.Geometry).Item(1)\n\tendSkPt = oSketch.SketchPoints.Add(oInterSectPoint, True)\n\t\n\t'constrain geometry\n\toCircle.Construction = True\n\toSketch.DimensionConstraints.AddDiameter (oCircle, endPt ) \n\toSketch.GeometricConstraints.AddCoincident(endSkPt, skLine)\n\toSketch.GeometricConstraints.AddCoincident(endSkPt, oCircle)\n\toSketch.GeometricConstraints.AddCoincident _\n\t(skLine.EndSketchPoint, oCircle.CenterSketchPoint)\n\t\n    'add to hole center collection\n    oHoleCenters.Add(endSkPt)    \n\nNext\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Dockable window problem in Inventor 2018\n                    ", "solution": ["Sub DockableWindow()\n    Dim oUserInterfaceMgr As UserInterfaceManager\n    Set oUserInterfaceMgr = ThisApplication.UserInterfaceManager\n\n    ' Create a new dockable window\n    Dim oWindow As DockableWindow\n    Set oWindow = oUserInterfaceMgr.DockableWindows.Add(\"SampleClientId\", \"TestWindowInternalName\", \"Test Window\")\n\n    ' Get the hwnd of the dialog to be added as a child\n    ' CHANGE THIS VALUE!\n    Dim hwnd As Long\n    hwnd = 4851096\n\n    ' Add the dialog as a child to the dockable window\n    Call oWindow.AddChild(hwnd)\n\n    ' Don't allow docking to top and bottom\n    oWindow.DisabledDockingStates = kDockTop + kDockBottom\n\n    ' Make the window visible\n    oWindow.Visible = True\nEnd Sub\n"], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: OnSave event, which one starts first...\n                    ", "solution": [], "author": "u.buschler"},
{"created at": [], "solution Title": "\n                        Re: copy sketched symbols with folders\n                    ", "solution": ["'Starting Structure:\n'|-Sketch Symbols\n'  |- Triangle\n'  |- Square\n'  |- Ellipse\n\n'Ending Structure:\n'|-Sketch Symbols\n'  |- Combo\n'     |- Ellipse\n'     |- Sharps\n'        |- Triangle\n'        |- Square\n      \nSub Main()\n\tCall AddItemsToFolder(\"Sharps\", \"Triangle\", \"Square\")\n\tCall SortDwgResourcesFolder\n\tCall AddItemsToFolder(\"Combo\", \"Sharps\", \"Ellipse\")\n\tCall SortDwgResourcesFolder\nEnd Sub\n\nSub AddItemsToFolder(oFolderTitle As String, ByVal ParamArray oSketchedSymbolNameArray As String())\n\n\tDim oPane As BrowserPane\n\tDim oNode As BrowserNode\n\tDim oTopNode As BrowserNode\n\tDim oDwgResourcesFolder As BrowserNode\n\tDim oSketchedSymbolsFolder As BrowserNode\n\tDim oOccurrenceNodes1 As ObjectCollection\n\t\n\toOccurrenceNodes1 = ThisApplication.TransientObjects.CreateObjectCollection\n\toPane = ThisApplication.ActiveDocument.BrowserPanes(\"Model\")\n\n\toDwgResourcesFolder = oPane.TopNode.BrowserNodes.Item(\"Drawing Resources\")\n\toSketchedSymbolsFolder = oDwgResourcesFolder.BrowserNodes.Item(4)\n\t\n\tFor Each oNode In oSketchedSymbolsFolder.BrowserNodes\n\t\toNodeName = Right(oNode.FullPath, Len(oNode.FullPath) - InStrRev(oNode.FullPath, \":\", -1))\n\t\t\n\t\tFor Each oSketchSymbolName In oSketchedSymbolNameArray\n\t\t\tIf oNodeName = oSketchSymbolName\n\t\t\t\toOccurrenceNodes1.Add(oNode)\n\t\t\tEnd If\n\t\tNext\n\t\t\n\tNext\n\t\n\toPane.AddBrowserFolder(oFolderTitle, oOccurrenceNodes1)\nEnd Sub\n\nSub SortDwgResourcesFolder()\n\n\tThisApplication.ActiveDocument.BrowserPanes(\"Model\").TopNode.BrowserNodes.Item(\"Drawing Resources\").BrowserNodes.Item(4).DoSelect\n\t\n\tDim oCommandMgr As CommandManager\n\toCommandMgr = ThisApplication.CommandManager\n\t\n\tDim oControlDef1 As ControlDefinition\n\toControlDef1 = oCommandMgr.ControlDefinitions.Item(\"DrawingResourceSort\")\n\toControlDef1.Execute\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Error rebuild when we using external excel file\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic - Assign Preset Hole Tolerance from a Table\n                    ", "solution": ["Sub Main()\n\n\tDim oDoc As Document\n\t\toDoc = ThisApplication.ActiveEditDocument\n\tDim i As Integer\n\ti = 1\n\toSS = oDoc.SelectSet\n\tFeatureCount = oSS.count ' Store the total number of selected features\n\t\n\tDim oHoleColl As New Collection\n\t\n\tSelect Case FeatureCount\n\t\tCase <1\n\t\t\tq = MessageBox.Show(\"You must select at least one hole.\", \"iLogic Error\", MessageBoxButtons.OK, MessageBoxIcon.asterisk, MessageBoxDefaultButton.Button1)\n\t\t\tExit Sub\n\t\tCase >1\n\t\t\tDim HoleFeatureCount As Integer\n\t\t\tFor Each oItem in oSS\n\t\t\t\tIf oItem.Type = 83912192 'kHoleFeatureObject\n\t\t\t\t\toHoleColl.Add(oItem)\n\t\t\t\t\tHoleFeatureCount = HoleFeatureCount + 1\n\t\t\t\tEnd If\n\t\t\tNext\n\t\t\tx = MessageBox.Show(HoleFeatureCount & \" Holes in the Current Selection.  \", \"My iLogic Dialog\", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1)\n\t\tCase = 1\n\t\t\tIf oSS.Item(1).Type = 83912192 'kHoleFeatureObject\n\t\t\t\toHoleColl.Add(oSS.Item(1))\n\t\t\tElse\n\t\t\t\tMsgBox(\"Object selected is not a hole\")\n\t\t\t\tExit Sub\n\t\t\tEnd If\n\tEnd Select\n\t\n\tDim OriginalUnits as Integer\n\tOriginalUnits = oDoc.unitsofmeasure.LengthUnits \n\tIf oDoc.unitsofmeasure.LengthUnits <> 11272 Then oDoc.unitsofmeasure.LengthUnits = 11272\n\n'Process Here\t\n\tCall ProcessHoleTolerances(oDoc, oHoleColl)\n\t\n\toDoc.Rebuild()\n\toDoc.Update\n\t'ThisApplication.CommandManager.ControlDefinitions.Item(\"AppUpdateMassPropertiesCmd\").Execute\n\toDoc.unitsofmeasure.LengthUnits = OriginalUnits\n\t\n\tq = MessageBox.Show(HoleModCount & \" hole(s) were updated\", \"iLogic Complete!\", MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button1)\n\t\nEnd Sub\n\nPrivate HoleModCount As Integer = 0\n\nSub ProcessHoleTolerances(oDoc As Document, oHoleFeatureColl As Collection)\n\n\tDim oDef As PartComponentDefinition\n\toDef = oDoc.ComponentDefinition\n\n\tFor Each CurrentHole As HoleFeature In oHoleFeatureColl ' Run on SELECTED Holes\n\t\tIf CurrentHole.Tapped <> True ' Cancel if a tapped hole\n\t\t\toDiamParam = CurrentHole.HoleDiameter\n\t\t\tCurrDiam = oDiamParam.Value / 2.54\n\t\t\toTol = oDiamParam.Tolerance\n\t\t\t\n\t\t\tSelect Case CurrentHole.HoleType\n\t\t\t\t'kCounterBoreHole 21507 Hole Is counterbored. \n\t\t\t\t'kCounterSinkHole 21506 Hole Is countersunk. \n\t\t\t\t'kDrilledHole 21505 Hole Is drilled (no countersink Or counterboring). \n\t\t\t\t'kSpotFaceHole 21508 Hole Is spotfaced. \n\t\t\t\t\n\t\t\t\tCase 21505 'Hole Is drilled (no countersink Or counterboring)\n\t\t\t\t\tSelect Case CurrDiam\n\t\t\t\t\t\tCase < 0.062\n\t\t\t\t\t\t\toTol.SetToDeviation(\"0.003 in\", \"-0.001 in\")\n\t\t\t\t\t\tCase <= 0.250\n\t\t\t\t\t\t\toTol.SetToDeviation(\"0.010 in\", \"-0.004 in\")\n\t\t\t\t\t\tCase <=.500\t\n\t\t\t\t\t\t\toTol.SetToDeviation(\"0.012 in\", \"-0.004 in\")\n\t\t\t\t\tEnd Select\t\n\n'\t\t\t\t\t\tIf CurrDiam > 0.50001 And CurrDiam <= 0.750 Then oTol(i).SetToDeviation(\"0.016 in\", \"-0.006 in\")\n'\t\t\t\t\t\tIf CurrDiam > 0.75001 And CurrDiam <= 1.000 Then oTol(i).SetToDeviation(\"0.020 in\", \"-0.006 in\")\n'\t\t\t\t\t\tIf CurrDiam > 1.00000 Then oTol(i).SetToDeviation(\"0.020 in\", \"-0.010 in\")\n\t\t\t\t\tHoleModCount = HoleModCount + 1\t\t\t\t\n\t\t\t\tCase 21507 'Hole Is counterbored\n\t\t\t\t\n\t\t\t\t\tIf CurrDiam < 0.062 Then oTol(i).SetToDeviation(\"0.003 in\", \"-0.001 in\")\n\t\t\t\t\tIf CurrDiam > 0.06201 And CurrDiam <= 0.250 Then oTol(i).SetToDeviation(\"0.010 in\", \"-0.004 in\")\n\t\t\t\t\tIf CurrDiam > 0.25001 And CurrDiam <= 0.500 Then oTol(i).SetToDeviation(\"0.012 in\", \"-0.004 in\")\n\t\t\t\t\tIf CurrDiam > 0.50001 And CurrDiam <= 0.750 Then oTol(i).SetToDeviation(\"0.016 in\", \"-0.006 in\")\n\t\t\t\t\tIf CurrDiam > 0.75001 And CurrDiam <= 1.000 Then oTol(i).SetToDeviation(\"0.020 in\", \"-0.006 in\")\n\t\t\t\t\tIf CurrDiam > 1.00000 Then oTol(i).SetToDeviation(\"0.020 in\", \"-0.010 in\")\n\t\t\t\t\t\n\t\t\t\t\t'Set a tolerance for the counterbore depth\n\t\t\t\t\tDim oCBDepParam As Parameter\n\t\t\t\t\tDim CurrCBoreDep\n\t\t\t\t\tDim oCboreDepTol(i) As tolerance\n\t\t\t\t\t\n\t\t\t\t\toCBDepParam = CurrentHole.CBoreDepth\n\t\t\t\t\tCurrCBoreDep = oCBDepParam.Value\n\t\t\t\t\toCBDepParam.Tolerance.SetTodeviation(\"0.010 in\", \"0 in\")\n\t\n\t\t\t\t\t'For the Countebore\n\t\t\t\t\tDim oDiamCboreParam As Parameter\n\t\t\t\t\tDim CurrDiamCbore\n\t\t\t\t\tDim oTolCbore As Tolerance\n\t\t\t\t\t\n\t\t\t\t\toDiamCboreParam = CurrentHole.CboreDiameter\n\t\t\t\t\tCurrDiamCbore = oDiamCboreParam.Value / 2.54\n\t\t\t\t\toTolCbore= oDiamCboreParam.Tolerance\n\t\t\t\t\t\n\t\t\t\t\tSelect Case CurrDiamCbore\n\t\t\t\t\t\tCase < 0.062\n\t\t\t\t\t\t\toTolCbore.SetToDeviation(\"0.003 in\", \"-0.001 in\")\n\t\t\t\t\t\tCase <= .250\n\t\t\t\t\t\tCase <= .500\n\t\t\t\t\t\tCase <= .750\n\t\t\t\t\t\tCase <= 1\n\t\t\t\t\tEnd Select\n'\t\t\t\t\tIf CurrDiamCbore < 0.062 Then oTolCbore.SetToDeviation(\"0.003 in\", \"-0.001 in\")\n'\t\t\t\t\tIf CurrDiamCbore > 0.06201 And CurrDiamCbore <= 0.250 Then oTolCbore(i).SetToDeviation(\"0.010 in\", \"-0.004 in\")\n'\t\t\t\t\tIf CurrDiamCbore > 0.25001 And CurrDiamCbore <= 0.500 Then oTolCbore(i).SetToDeviation(\"0.012 in\", \"-0.004 in\")\n'\t\t\t\t\tIf CurrDiamCbore > 0.50001 And CurrDiamCbore <= 0.750 Then oTolCbore(i).SetToDeviation(\"0.016 in\", \"-0.006 in\")\n'\t\t\t\t\tIf CurrDiamCbore > 0.75001 And CurrDiamCbore <= 1.000 Then oTolCbore(i).SetToDeviation(\"0.020 in\", \"-0.006 in\")\n'\t\t\t\t\tIf CurrDiamCbore > 1.00000 Then oTolCbore(i).SetToDeviation(\"0.020 in\", \"-0.010 in\")\n\t\t\t\t\t\n\t\t\t\t\tHoleModCount = HoleModCount + 1\n\t\t\t\t\t\n\t\t\t\tCase 21506 ' Hole Is countersunk\n\t\t\t\t\tSelect Case CurrDiam\n\t\t\t\t\t\tCase < 0.062\n\t\t\t\t\t\t\toTol.SetToDeviation(\"0.003 in\", \"-0.001 in\")\n\t\t\t\t\t\tCase <= .250\n\t\t\t\t\t\tCase <= .500\n\t\t\t\t\t\tCase <= .750\n\t\t\t\t\t\tCase <= 1\n\t\t\t\t\tEnd Select\n\t\t\t\t\t\n'\t\t\t\t\tIf CurrDiam < 0.062 Then oTol(i).SetToDeviation(\"0.003 in\", \"-0.001 in\")\n'\t\t\t\t\tIf CurrDiam > 0.06201 And CurrDiam <= 0.250 Then oTol(i).SetToDeviation(\"0.010 in\", \"-0.004 in\")\n'\t\t\t\t\tIf CurrDiam > 0.25001 And CurrDiam <= 0.500 Then oTol(i).SetToDeviation(\"0.012 in\", \"-0.004 in\")\n'\t\t\t\t\tIf CurrDiam > 0.50001 And CurrDiam <= 0.750 Then oTol(i).SetToDeviation(\"0.016 in\", \"-0.006 in\")\n'\t\t\t\t\tIf CurrDiam > 0.75001 And CurrDiam <= 1.000 Then oTol(i).SetToDeviation(\"0.020 in\", \"-0.006 in\")\n'\t\t\t\t\tIf CurrDiam > 1.00000 Then oTol(i).SetToDeviation(\"0.020 in\", \"-0.010 in\")\n\t\t\t\t\tHoleModCount = HoleModCount + 1\t\t\t\t\n\t\t\t\t    Case Else", "                                        MsgBox(\"Hole type not found!\")", "                                End Select\n\t\t\tEnd If\t\t\n\tNext CurrentHole ' Next Feature\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Custom Asset/Material Library\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Troubles with Sheet Metal Defaults (SheetMetalStylesCMD) in VBA\n                    ", "solution": ["    Dim oPartToSheetMetal As ControlDefinition\n    Set oPartToSheetMetal = ThisApplication.CommandManager.ControlDefinitions.Item(\"PartConvertToSheetMetalCmd\")\n    Dim oCMD As ControlDefinition\n    Set oCMD = ThisApplication.CommandManager.ControlDefinitions(\"SheetMetalStylesCmd\")\n\n    If odoc.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then 'If the part is different from sheet metal type, then set to sheet metal\n         \n         oPartToSheetMetal.Execute2 (True) 'Convert to Sheet metal. This activates the Sheet Metal Defaults, and waits for user input.\n          \n         oCMD.Execute 'Open Sheet Metal Defaults (this interupts the \"Select Base Face\" user input)\n        \n         Dim cancleCmd As ControlDefinition\n         Set cancleCmd = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppContextual_CancelCmd\")\n         cancleCmd.Execute\n         \n    End If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Parameter(\"Part Name.ipt\", \"ParamName\") API equivalent\n                    ", "solution": ["' Custom Parameter(\"Part Name.ipt\", \"ParamName\") replacement\n\nFunction GetParameter(oPartName, oParamName) As String\n   On Error Resume Next\n \n   For Each oDoc in ThisApplication.Documents\n       If oDoc.FullFileName Like \"*\" & oPartName Then\n           Exit For\n       End if\n    Next\n", "    oUOM = oDoc.UnitsOfMeasure     ", "\n    oParam = oDoc.ComponentDefinition.Parameters.Item(oParamName)\n    ", "    oParamUnits = oParam.Units", "    oParamVal = oParam.Value", "    oParamVal = oUOM.ConvertUnits(oParamVal, \"in\", oParam.Units)", "\n    Return oParamVal\nEnd Function"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic Integers Driven to Custom iProperties Incorrectly\n                    ", "solution": [], "author": "bob.holland"},
{"created at": [], "solution Title": "\n                        Betreff: Reorder Hole types\n                    ", "solution": [], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: Running inventor VBA module & ilogic from excel\n                    ", "solution": [], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: Help with try and catch, ilogic to update parts length when part is changed.\n                    ", "solution": ["Try", "\n    ", "Parameter", "(", "\"", "B_L", "\"", ") = dmx", "\n", "Catch", "\n    param = ", "userParams", ".", "AddByExpression", "(", "\"", "B_L", "\"", ", ", "dmx", ", ", "UnitsTypeEnum", ".", "kInchLengthUnits", ")", "    ", "param.ExposedAsProperty = True", "    param.CustomPropertyFormat.Units = \"in\"", "    param.CustomPropertyFormat.Precision = Inventor.CustomPropertyPrecisionEnum.kThreeDecimalPlacesPrecision", "    param.CustomPropertyFormat.ShowTrailingZeros = False", "    param.CustomPropertyFormat.ShowUnitsString = False", "    param.CustomPropertyFormat.ShowUnitsString = False", "\u00a0\u00a0\n", "End", " ", "Try"], "author": "richard.joseph."},
{"created at": [], "solution Title": "\n                        Re: Stop iPart.FindRow From Changing Subassembly?\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic to hide plans (recursive)\n                    ", "solution": ["Sub Main ()\t\n\tSelect Case ThisApplication.ActiveDocument.DocumentType\n\t\tCase kPartDocumentObject 'Part = kAssemblyDocumentObject = 12290\n\t\t\tDim oPartDoc as PartDocument\n\t\t\toPartDoc = ThisApplication.ActiveDocument\n\t\t\tPlanes_Visibilty(oPartDoc.ComponentDefinition)\n\t\tCase kAssemblyDocumentObject 'Assembly = kAssemblyDocumentObject = 12291\n\t\t\tDim oAsmDoc As AssemblyDocument\n\t\t\toAsmDoc = ThisApplication.ActiveDocument\t\t\t\n\t\t\tPlanes_Visibilty(oAsmDoc.ComponentDefinition)\n\t\t\tDim oDoc As Document\n\t\t\tFor Each oDoc In oAsmDoc.AllReferencedDocuments\n\t\t\t\tPlanes_Visibilty(oDoc.ComponentDefinition)\n\t\t\tNext\n\t\tCase kDrawingDocumentObject 'Drawing = kDrawingDocumentObject = 12292\n\tEnd Select\nEnd Sub\n\nSub Planes_Visibilty (ByVal oDef As ComponentDefinition)\n\n\tFor Each oWorkPlane In oDef.WorkPlanes\t\n\n\t\tSelect Case oWorkPlane.Name\n\t\t\tCase \"YZ Plane - RIGHT\", \"XZ Plane - TOP\", \"XY Plane - FRONT\"\n\t\t\tCase \"YZ Plane\"\n\t\t\t\toWorkPlane.Name = \"YZ Plane - RIGHT\"\n\t\t\tCase \"XZ Plane\"\n\t\t\t\toWorkPlane.Name = \"XZ Plane - TOP\"\n\t\t\tCase \"XY Plane\"\n\t\t\t\toWorkPlane.Name = \"XY Plane - FRONT\"\n\t\t\tCase Else\n\t\t\t\t'MessageBox.Show(\"Planos n\u00e3o encontrados\", \"Planos\")\n\t\tEnd Select\n\t\toWorkPlane.Visible = False\n\tNext\n\t\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: How to create a copy of Positional Representation with iLogic\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Misstake\n                    ", "solution": ["'-------------Start of ilogic ------------------------------------------------\n'get the path and name of the drawing file\npath_and_name = ThisDoc.PathAndFileName(False) ' without extension\n\n\n'define oDoc\noDoc = ThisDoc.Document\n\n\n'specify the drawing sheet", "Try\n    oSheet = oDoc.Sheets(\"Blatt:1\") ' sheet by name\n'oSheet = oDoc.Sheets(1) ' first sheet", "Catch", "    MsgBox(\"Error Accessing Sheet!\")", "End Try\n\nTry\n    ' say there is a Partslist on the sheet.\n   oPartslist = oSheet.PartsLists(1)", "Catch", "   MsgBox(\"Error Accessing PartsList!\")", "End Try\n      \n' create a new NameValueMap object\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n\n'specify an existing template file \n'to use For formatting colors, fonts, etc\noOptions.Value(\"Template\") = \"c:\\temp\\_Vorlage.xls\"\n  \n'specify the columns to export          \noOptions.Value(\"ExportedColumns\") = \"POS;ANZ;MENGE;EINH;BENENNUNG;ARTIKEL NR.;ABMESSUNG/DIN\"\n  \n'specify the start cell\noOptions.Value(\"StartingCell\") = \"A10\"\n  \n'specify the XLS tab name\n'here the file name is used \noOptions.Value(\"TableName\") = ThisDoc.FileName(False) 'without extension\n\n\n'choose to include the parts list title row\n'in this example \"Ye Old List of Parts\" is written to the StartingCell \noOptions.Value(\"IncludeTitle\") = False          \n\n\n'choose to autofit the column width in the xls file\noOptions.Value(\"AutoFitColumnWidth\") = True\n", "Try      \n   ' export the Partslist to Excel with options\n   oPartslist.Export(path_and_name & \".xls\", _\n   PartsListFileFormatEnum.kMicrosoftExcel, oOptions)  ", "Catch", "   MsgBox(\"Error with parameters in PartsList.Export method!\")", "End try\n\n\n'-------------End of ilogic ------------------------------------------------"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Building my first Add-in problem 1\n                    ", "solution": ["Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click\n    ", "' Get the active document.", "\n    Dim oDoc As Document = _invApp.ActiveDocument\n    ", "' Get the user defined (custom) property set.", "\n    Dim oProSet As PropertySet = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n    ", "' Declare some variables that will contain the various values and set values for the variables.", "\n    Dim strProv As String = \"AGREGAR PROVEEDOR\"\n    Dim strTel As String = \"AGREGAR TELEFONO\"\n    Dim strMail As String = \"AGREGAR CORREO ELECTRONICO\"\n    Dim strTe As String = \"AGREGAR TIEMPO DE ENTREGA\"\n    ", "' Create the properties.", "\n    Dim invProperty As Inventor.Property\n    invProperty = oProSet.Add(strProv, \"PROVEEDOR\")\n    invProperty = oProSet.Add(strTel, \"TELEFONO\")\n    invProperty = oProSet.Add(strMail, \"CORREO\")\n    invProperty = oProSet.Add(strTe, \"T.E\")\nEnd Sub", "oProSet.Add(strProv, \"PROVEEDOR\")", "Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click\n    ", "' Get the active document.", "\n    Dim oDoc As Document = _invApp.ActiveDocument\n    ", "' Get the user defined (custom) property set.", "\n    Dim oProSet As PropertySet = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n    ", "' Declare some variables that will contain the various values and set values for the variables.", "\n    Dim strProv As String = \"AGREGAR PROVEEDOR\"\n    Dim strTel As String = \"AGREGAR TELEFONO\"\n    Dim strMail As String = \"AGREGAR CORREO ELECTRONICO\"\n    Dim strTe As String = \"AGREGAR TIEMPO DE ENTREGA\"\n    ", "' Create the properties.", "\n    GetProperty(oProSet, \"PROVEEDOR\", strProv)\n    GetProperty(oProSet, \"TELEFONO\", strTel)\n    GetProperty(oProSet, \"CORREO\", strMail)\n    GetProperty(oProSet, \"T.E\", strTe)\nEnd Sub", "Private Function GetProperty(oProSet As PropertySet, sName As String, Optional sValue As String = \"\") As Inventor.Property", "    Dim iPro As Inventor.Property", "    Try", "        iPro = oProSet(sName)", "    Catch", "        iPro = oProSet.Add(sValue, sName)", "    End Try", "    Return iPro", "End Function"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Frame Generator section sizes available.\n                    ", "solution": [], "author": "j.romo"},
{"created at": [], "solution Title": "\n                        Re: Opening Newly saved file with vba with randomly generated file name\n                    ", "solution": [], "author": "philip.G"},
{"created at": [], "solution Title": "\n                        Re: using Transcripts for macros\n                    ", "solution": ["ThisDoc", ".", "Document", ".", "SaveAs", "(", "ThisDoc", ".", "ChangeExtension", "(", "\"", ".dxf", "\"", ")", ", ", "True", ")"], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: Show userform\n                    ", "solution": [], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: flat pattern export to dxf\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic move bodies\n                    ", "solution": ["Sub Main()\n\n    Dim oDoc As PartDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    If oDoc Is Nothing Then\n        MsgBox(\"No part document!\" & vbCrLf & \"Please open a part with solids in it for this sample to run.\", vbCritical, \"Autodesk Inventor\")\n        Exit Sub\n    End If\n    \n    Dim oCompDef As PartComponentDefinition\n    oCompDef = oDoc.ComponentDefinition\n    \n    If oCompDef.SurfaceBodies.Count = 0 Then\n        MsgBox(\"No solids to move!\" & vbCrLf & \"Please open a part with solids in it for this sample to run.\", vbCritical, \"Autodesk Inventor\")\n        Exit Sub\n    End If\n    \n    Dim oBodies As ObjectCollection\n    oBodies = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    ' Specify a body to move.\n    oBodies.Add(oCompDef.SurfaceBodies(1))\n    \n    ' Create a MoveFeatureDefinition.\n    Dim oMoveDef As MoveDefinition\n    oMoveDef = oCompDef.Features.MoveFeatures.CreateMoveDefinition(oBodies)\n    \n\toRangeBox = oBodies.Item(1).RangeBox\n\t\n\toMidX = (oRangeBox.MaxPoint.X + oRangeBox.MinPoint.X)/2\n\toMidY = (oRangeBox.MaxPoint.Y + oRangeBox.MinPoint.Y)/2\n\toMidZ = (oRangeBox.MaxPoint.Z + oRangeBox.MinPoint.Z)/2\n    ' the move operations onto the bodies.\n    Dim oFreeDrag As FreeDragMoveOperation\n    oFreeDrag = oMoveDef.AddFreeDrag(-1*oMidX, -1*oMidY, -1*oMidZ)\n    \n    'Dim oMoveAlongRay As MoveAlongRayMoveOperation\n    'oMoveAlongRay = oMoveDef.AddMoveAlongRay(oCompDef.WorkAxes(2), True, 2)\n    \n    'Dim oRotateAboutAxis As RotateAboutLineMoveOperation\n    'oRotateAboutAxis = oMoveDef.AddRotateAboutAxis(oCompDef.WorkAxes(3), True, 0.5)\n    \n    ' Create the move feature.\n    Dim oMoveFeature As MoveFeature\n    oMoveFeature = oCompDef.Features.MoveFeatures.Add(oMoveDef)\nEnd Sub", "Sub Main()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    If oDoc Is Nothing Then\n        MsgBox \"No part document!\" & vbCrLf & \"Please open a part with solids in it for this sample to run.\", vbCritical, \"Autodesk Inventor\"\n        Exit Sub\n    End If\n    \n    Dim oCompDef As PartComponentDefinition\n    Set oCompDef = oDoc.ComponentDefinition\n    \n    If oCompDef.SurfaceBodies.Count = 0 Then\n        MsgBox \"No solids to move!\" & vbCrLf & \"Please open a part with solids in it for this sample to run.\", vbCritical, \"Autodesk Inventor\"\n        Exit Sub\n    End If\n    \n    Dim oBodies As ObjectCollection\n    Set oBodies = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    ' Specify a body to move.\n    oBodies.Add oCompDef.SurfaceBodies(1)\n    \n    Call RotatePart(oCompDef, oBodies)\n    \n    oBodies.Clear\n    oBodies.Add oCompDef.SurfaceBodies(1)\n    Call MovePart(oCompDef, oBodies)\n   \nEnd Sub\n\n\n    Sub RotatePart(ByVal oCompDef As ComponentDefinition, ByVal oBodies As ObjectCollection)\n        'http://adndevblog.typepad.com/manufacturing/2012/08/what-is-the-best-way-to-compute-a-normal-of-a-face-in-inventor-api.html\n        ' Create a MoveFeatureDefinition.\n        Dim oMoveDef As MoveDefinition\n        Set oMoveDef = oCompDef.Features.MoveFeatures.CreateMoveDefinition(oBodies)\n        \n        Dim Face1 As Face\n        Dim Face2 As Face\n    \n        Dim boolFace1IsPlane As Boolean\n        boolFace1IsPlane = False\n        \n        Do\n           Set Face1 = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartFaceFilter, \"Pick FACE to align with XY Plane (FRONT)\")\n           If (TypeOf Face1.Geometry Is Plane) Then\n               boolFace1IsPlane = True\n           End If\n        Loop Until boolFace1IsPlane\n    \n        Dim oFace1Normal As Vector\n        Set oFace1Normal = ThisApplication.TransientGeometry.CreateVector()\n        Set oFace1Normal = GetFaceNormal(Face1)\n    \n        Dim boolFace2IsPlane As Boolean\n        boolFace2IsPlane = False\n        Dim boolPlanesat90 As Boolean\n        boolPlanesat90 = False\n        \n        Dim oFace2Normal As Vector\n        Set oFace2Normal = ThisApplication.TransientGeometry.CreateVector()\n    \n        Do\n            boolFace2IsPlane = False\n            Do\n               Set Face2 = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartFaceFilter, \"Pick FACE to align with XZ Plane (TOP)\")\n               If (TypeOf Face2.Geometry Is Plane) Then\n                   boolFace1IsPlane = True\n               End If\n            Loop Until boolFace1IsPlane\n    \n            Set oFace2Normal = GetFaceNormal(Face2)\n    \n            'Perpindicular vectors have dot product of zero.\n            'Need to handle round of errors in doing the large vectors maths\n            If VBA.Round(oFace1Normal.DotProduct(oFace2Normal), 8) = 0 Then\n                boolPlanesat90 = True\n            End If\n    \n        Loop Until boolPlanesat90\n    \n        Dim oYZPlane As WorkPlane\n        Dim oXZPlane As WorkPlane\n        Dim oXYPlane As WorkPlane\n        Set oYZPlane = oCompDef.WorkPlanes.Item(1)\n        Set oXZPlane = oCompDef.WorkPlanes.Item(2)\n        Set oXYPlane = oCompDef.WorkPlanes.Item(3)\n        \n        Dim oXAxis As WorkAxis\n        Set oXAxis = oCompDef.WorkAxes(1)\n        Dim oYAxis As WorkAxis\n        Set oYAxis = oCompDef.WorkAxes(2)\n        Dim oZAxis As WorkAxis\n        Set oZAxis = oCompDef.WorkAxes(3)\n        \n       'Perform first rotation to align with coord system\n       Dim oRotationAngle As Double\n       oRotationAngle = GetRotationAngleAboutAxisToPlane(oFace1Normal, oXAxis, oXYPlane)\n        'oRotationAngle = GetRotationAngleAboutAxisToPlane(ThisApplication.TransientGeometry.CreateVector(oFace1Normal.X, oFace1Normal.Y, oFace1Normal.Z), oXAxis, oXYPlane)\n        \n        Dim oRotateAboutAxis As RotateAboutLineMoveOperation\n        Set oRotateAboutAxis = oMoveDef.AddRotateAboutAxis(oXAxis, True, oRotationAngle)\n        \n            Dim oRes1Vector As Vector\n            Set oRes1Vector = ThisApplication.TransientGeometry.CreateVector()\n            Set oRes1Vector = RotateVectorAboutAnotherVector(oRotationAngle, oFace1Normal, ThisApplication.TransientGeometry.CreateVector(oXAxis.Line.Direction.X, oXAxis.Line.Direction.Y, oXAxis.Line.Direction.Z))\n            \n            Dim oRes1UpVector As Vector\n            Set oRes1UpVector = ThisApplication.TransientGeometry.CreateVector()\n            Set oRes1UpVector = RotateVectorAboutAnotherVector(oRotationAngle, oFace2Normal, ThisApplication.TransientGeometry.CreateVector(oXAxis.Line.Direction.X, oXAxis.Line.Direction.Y, oXAxis.Line.Direction.Z))\n        \n       'Perform 2nd rotation to align with coord system\n        'oRotationAngle = GetRotationAngleAboutAxisToPlane(oFace1Normal, oYAxis, oXYPlane)\n        oRotationAngle = GetRotationAngleAboutAxisToPlane(oRes1Vector, oYAxis, oXYPlane)\n        Set oRotateAboutAxis = oMoveDef.AddRotateAboutAxis(oYAxis, True, oRotationAngle)\n            \n            Dim oRes2UpVector As Vector\n            Set oRes2UpVector = ThisApplication.TransientGeometry.CreateVector()\n            Set oRes2UpVector = RotateVectorAboutAnotherVector(oRotationAngle, oRes1UpVector, ThisApplication.TransientGeometry.CreateVector(oYAxis.Line.Direction.X, oYAxis.Line.Direction.Y, oYAxis.Line.Direction.Z))\n       'Perform 3rd rotation to get Upvector oriented properly.\n        oRotationAngle = GetRotationAngleAboutAxisToPlane(oRes2UpVector, oZAxis, oXZPlane)\n        Set oRotateAboutAxis = oMoveDef.AddRotateAboutAxis(oZAxis, True, oRotationAngle)\n        \n        Dim oMoveFeature As MoveFeature\n        Set oMoveFeature = oCompDef.Features.MoveFeatures.Add(oMoveDef)\n    End Sub\n\n        Function GetFaceNormal(ByVal oFace As Object) As Vector\n            Dim oNormal As Vector\n            Dim Params(1 To 2) As Double\n            Dim Normals(1 To 3) As Double\n    \n            Params(1) = 0\n            Params(2) = 0\n            If TypeOf oFace Is WorkPlane Then\n                Call oFace.Plane.Evaluator.GetNormal(Params, Normals)\n                Set oNormal = ThisApplication.TransientGeometry.CreateVector(Normals(1), Normals(2), Normals(3))\n            Else\n                If (TypeOf oFace.Geometry Is Plane) Then\n                    'Dim oEvalFace As Face\n                    'Set oEvalFace = oFace\n                    Call oFace.Evaluator.GetNormal(Params, Normals)\n                    Set oNormal = ThisApplication.TransientGeometry.CreateVector(Normals(1), Normals(2), Normals(3))\n                End If\n            End If\n            Set GetFaceNormal = oNormal\n        End Function\n\n        Function GetRotationAngleAboutAxisToPlane(ByVal oVector As Vector, ByVal oAxis As WorkAxis, ByVal oWorkPlane As WorkPlane) As Double\n                ''http://onlinemschool.com/math/library/vector/angl/\n                'This ProjectVectorToPlane removes the 1 of the 3 components in relation to the plane.\n                'IN this case, to the YZ plane, it essentially removes the X component and scales it slightly.\n                \n                'Verified method below also works, but gives same results as the formulaic method.\n                'Dim AltProject As Vector\n                'Set AltProject = ThisApplication.TransientGeometry.CreateVector(0, oFace1Normal.Y, oFace1Normal.Z)\n                \n                'Angle is insufficient as it doesn't have a direction.\n                'Use Cross product to find the angle and direction\n                ' Length of this crossproduct is actually the area of the parallellogram of A & B\n                ' The vector gives the direction\n                'If the vectors x component is positive, it means that we need to rotate\n                'it the same direction as the x axis (ie cw), and if its negative, we rotate it the negative direction\n                \n                Dim oLineDir As Variant\n                Set oLineDir = oAxis.Line.Direction\n                'oLine.Direction (oCoords)\n                Dim oAxisVector As Vector\n                Set oAxisVector = ThisApplication.TransientGeometry.CreateVector(oLineDir.X, oLineDir.Y, oLineDir.Z)\n                \n                'oRotationAngle = AltProject.AngleTo(oYVector)\n                Dim oProjVec As Vector\n                Set oProjVec = ThisApplication.TransientGeometry.CreateVector()\n                \n                'Project to plane perpindicular to plane\n                Set oProjVec = ProjectVectorToPerpindicularPlaneOfAnAxis(oVector, oAxisVector)\n                \n                'Get the\n                Dim oWorkPlaneNormal As Vector\n                Set oWorkPlaneNormal = ThisApplication.TransientGeometry.CreateVector()\n                Set oWorkPlaneNormal = GetFaceNormal(oWorkPlane)\n            \n                Dim oCrossProductVector As Vector\n                Set oCrossProductVector = ThisApplication.TransientGeometry.CreateVector\n                Set oCrossProductVector = oWorkPlaneNormal.CrossProduct(oProjVec)\n            \n                oAngle = ArcSin(oCrossProductVector.Length / (oWorkPlaneNormal.Length * oProjVec.Length))\n                \n                rotdir = 1\n                If oAxisVector.DotProduct(oCrossProductVector) > 0 Then\n                    rotdir = -1\n                End If\n                \n                GetRotationAngleAboutAxisToPlane = rotdir * oAngle\n        End Function\n\n            Function ProjectVectorToPerpindicularPlaneOfAnAxis(ByVal oVector As Vector, ByVal oPlaneNormal As Vector) As Vector\n        \n                'https://www.maplesoft.com/support/help/maple/view.aspx?path=MathApps%2FProjectionOfVectorOntoPlane\n                'Projected vector = orig vector(term1) - (dp(u*N)/mag(n)^2)*n\n        \n                Dim oByValVector As Vector\n                Set oByValVector = ThisApplication.TransientGeometry.CreateVector(oVector.X, oVector.Y, oVector.Z)\n                \n                Dim oByValPlaneNormal As Vector\n                Set oByValPlaneNormal = ThisApplication.TransientGeometry.CreateVector(oPlaneNormal.X, oPlaneNormal.Y, oPlaneNormal.Z)\n            \n                Dim oDotproductxun As Double\n                oDotproductxun = oByValVector.DotProduct(oByValPlaneNormal)\n                \n                If oDotproductxun <> 0 Then\n                    Dim magxn As Double\n                    oMagxn = oByValPlaneNormal.Length\n            \n                    Dim oScalarComponent As Double\n                    oScalarComponent = (oDotproductxun) / (oMagxn * oMagxn)\n            \n                    Call oByValPlaneNormal.ScaleBy(oScalarComponent)\n                    Call oByValVector.SubtractVector(oByValPlaneNormal)\n                End If\n                \n                Set ProjectVectorToPerpindicularPlaneOfAnAxis = oByValVector\n            End Function\n\n            Function ArcSin(ByVal X As Double) As Double\n                'http://cuinl.tripod.com/Tips/math9.htm\n                ArcSin = Atn(X / Sqr(-X * X + 1))\n            End Function\n\n\n    Function RotateVectorAboutAnotherVector(ByVal oTheta As Double, ByVal oRotatingVector As Vector, ByVal oStationaryVector As Vector) As Vector\n        'Let A be the rotating vector\n        'Let B be the stationary vector\n        Dim oVectorA As Vector\n        Dim oVectorB As Vector\n        Set oVectorA = ThisApplication.TransientGeometry.CreateVector(oRotatingVector.X, oRotatingVector.Y, oRotatingVector.Z)\n        Set oVectorB = ThisApplication.TransientGeometry.CreateVector(oStationaryVector.X, oStationaryVector.Y, oStationaryVector.Z)\n    \n        Dim oMatrix As Matrix\n        Set oMatrix = ThisApplication.TransientGeometry.CreateMatrix\n        \n        Call oMatrix.SetToRotation(oTheta, oVectorB, ThisApplication.TransientGeometry.CreatePoint(0, 0, 0))\n\n        Call oVectorA.TransformBy(oMatrix)\n        \n        Set RotateVectorAboutAnotherVector = oVectorA\n    End Function\n\nSub MovePart(ByVal oCompDef As ComponentDefinition, ByVal oBodies As ObjectCollection)\n    Dim oMoveDef As MoveDefinition\n    Set oMoveDef = oCompDef.Features.MoveFeatures.CreateMoveDefinition(oBodies)\n    \n    Set oRangeBox = oBodies.Item(1).RangeBox\n    \n    oMidX = (oRangeBox.MaxPoint.X + oRangeBox.MinPoint.X) / 2\n    oMidY = (oRangeBox.MaxPoint.Y + oRangeBox.MinPoint.Y) / 2\n    oMidZ = (oRangeBox.MaxPoint.Z + oRangeBox.MinPoint.Z) / 2\n\n\n    Dim oFreeDrag As FreeDragMoveOperation\n    Set oFreeDrag = oMoveDef.AddFreeDrag(-1 * oMidX, -1 * oMidY, -1 * oMidZ)\n\n    Dim oMoveFeature As MoveFeature\n    Set oMoveFeature = oCompDef.Features.MoveFeatures.Add(oMoveDef)\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: VBA text box fill Properties\n                    ", "solution": ["Private Sub CommandButton2_Click()\n \n    ' Get the active document.\n    Dim doc As Document\n    Set doc = ThisApplication.ActiveDocument\n\n    ' Get the custom property set.\n    Dim customPropSet As PropertySet\n    Set customPropSet = doc.PropertySets.Item( _\n    \"Inventor User Defined Properties\")\n\n    ' Get the property named \"TELEFONO\".\n    Dim customProp As Property\n    Set customProp = customPropSet.Item(\"TELEFONO\")\n\n    ' Display the value of the iProperty.\n    'MsgBox \"TELEFONO = \" & customProp.Value\n    \n     ' Set the value of the property.\n    customProp.Value = TextBox1.Value\nEnd Sub"], "author": "j.romo"},
{"created at": [], "solution Title": "\n                        Re: get save date\n                    ", "solution": [], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: Code runs from assembly, saves all related drawings to hi res .png.. but...\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Getting Model Feature from Selected Drawing Curve - side view\n                    ", "solution": ["Sub Holes_Test()\n\n  'open drawing document and\n  'select one hole. Then run this sample.\n  \n  Dim oDrawDoc As DrawingDocument\n  Set oDrawDoc = ThisApplication.ActiveDocument\n  \n  Dim oSSet As SelectSet\n  Set oSSet = oDrawDoc.SelectSet\n  If oSSet.Count <> 1 Then\n    MsgBox \"Select one hole in a drawing\"\n    Exit Sub\n  End If\n\n  Dim oDrawingCurveSegment As DrawingCurveSegment\n  Set oDrawingCurveSegment = oSSet.Item(1)\n  \n  Dim oDrawingCurve As DrawingCurve\n  Set oDrawingCurve = oDrawingCurveSegment.Parent\n  \n  Dim oFace As Face\n  Dim oHoleFeature As HoleFeature\n  \n  If oDrawingCurve.ModelGeometry.Type = kFaceObject Then\n    \n    Set oFace = oDrawingCurve.ModelGeometry\n  \n    If oFace.CreatedByFeature.Type = ObjectTypeEnum.kHoleFeatureObject Then\n          \n      Set oHoleFeature = oFace.CreatedByFeature\n      Debug.Print \"Name = \" & oHoleFeature.Name\n      Debug.Print \"ExtendedName = \" & oHoleFeature.ExtendedName\n      Debug.Print \"ExtentType = \" & oHoleFeature.ExtentType\n\n    End If\n    \n  ElseIf oDrawingCurve.ModelGeometry.Type = kEdgeObject Then\n      \n      Dim oEdge As Edge\n      Set oEdge = oDrawingCurve.ModelGeometry\n      \n      For Each oFace In oEdge.Faces\n        If oFace.CreatedByFeature.Type = ObjectTypeEnum.kHoleFeatureObject Then\n        \n          Set oHoleFeature = oFace.CreatedByFeature\n          Debug.Print \"Name = \" & oHoleFeature.Name\n          Debug.Print \"ExtendedName = \" & oHoleFeature.ExtendedName\n          Debug.Print \"ExtentType = \" & oHoleFeature.ExtentType\n    \n        End If\n      Next\n    \n  End If\n  \nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: get date and hour in VBA to a custom param\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Appearance Asset SetColor Method\n                    ", "solution": ["Sub Main()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n\n    Dim oTG As TransientObjects\n    Set oTG = ThisApplication.TransientObjects\n\n    Dim docAsset As Assets\n    Set docAsset = oDoc.Assets\n\n    Dim appearance As Asset\n    Set appearance = docAsset.Item(\"Appearance Name\")\n    'appearance = docAsset.Add(AssetTypeEnum.kAssetTypeAppearance, \"Generic\", \"appearances\", \"New Appearance\")\n\n    Dim generic_color As ColorAssetValue\n    Set generic_color = appearance.Item(\"generic_diffuse\")\n    generic_color.Value = oTG.CreateColor(243, 35, 56)\n    generic_color.HasConnectedTexture = True\nEnd Sub"], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: iProperties Occurence Access\n                    ", "solution": ["Dim assyDoc as AssemblyDocument\nassyDoc = ThisApplication.ActiveDocument\n\nDim assyDef as AssemblycomponentDefinition\nassyDef = assyDoc.ComponentDefinition\n\nFor Each occ as ComponentOccurrence In assyDef.Occurrences\n\t\n\txOffset = Round(occ.Transformation.Translation.x * 0.0328084, 3) 'Converting from cm to ft \n\tyOffset = Round(occ.Transformation.Translation.x * 0.0328084, 3) 'Converting from cm to ft\n\tzOffset = Round(occ.Transformation.Translation.x * 0.0328084, 3) 'Converting from cm to ft\n\t\n\tMessageBox.Show(\"X = \"&xOffset &\" ft Y = \"& yOffset & \" ft Z = \"& zOffset & \" ft\", \"OffSet Distances in ft\")\n\n\t\nNext", "Parameter(\"ParameterName\") = xOffset"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Flat Pattern Size Custom iProperty\n                    ", "solution": ["Dim", " ", "openDoc", " ", "As", " ", "Document", "\n", "openDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n\n", "Dim", " ", "oDoc", " ", "As", " ", "Document", " \n\n", "If", " ", "openDoc", ".", "DocumentType", " ", "=", " ", "12291", " ", "Then", "\n\n    ", "For", " ", "Each", " ", "oDoc", " ", "In", " ", "openDoc", ".", "AllReferencedDocuments", "\n        ", "'", "Is a Sheet Metal File", "\n        ", "If", " ", "oDoc", ".", "SubType", ".", "Equals", "(", "\"", "{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}", "\"", ")", " ", "Then", "\n\n            ", "'", "Obtain max & min flat sizes of part", "\n            ", "Dim", " ", "smComp", " ", "As", " ", "SheetMetalComponentDefinition", " ", "=", " ", "oDoc", ".", "ComponentDefinition", "\n            ", "If", " ", "smComp", ".", "HasFlatPattern", " ", "Then", "\n                ", "'", "Get Units of Measure Object", "\n                ", "Dim", " ", "uom", " ", "As", " ", "UnitsOfMeasure", " ", "=", " ", "oDoc", ".", "UnitsOfmeasure", "\n                ", "'", "Get FlatPattern Dims returned as the document units", "\n                ", "Length", " ", "=", " ", "uom", ".", "ConvertUnits", "(", "smComp", ".", "FlatPattern", ".", "Length", ", ", "\"", "cm", "\"", ", ", "uom", ".", "LengthUnits", ")", "\n                ", "Width", " ", "=", " ", "uom", ".", "ConvertUnits", "(", "smComp", ".", "FlatPattern", ".", "Width", ", ", "\"", "cm", "\"", ", ", "uom", ".", "LengthUnits", ")", "\n                        \n                ", "Flt_Ptrn_Len", " ", "=", " ", "Round", "(", "Length", ",", "0", ")", " \n                ", "Flt_Ptrn_Wid", " ", "=", " ", "Round", "(", "Width", ",", "0", ")", " \n                \n                ", "Dim", " ", "propertyName", " ", "As", " ", "String", " ", "=", " ", "\"", "Blank Size", "\"", "\n                ", "Dim", " ", "propertyValue", " ", "As", " ", "String", " ", "=", " ", "Flt_Ptrn_Len", " ", "&", " ", "\"", " x ", "\"", " ", "&", " ", "Flt_Ptrn_Wid", "\n                \n                ", "customPropertySet", " ", "=", " ", "oDoc", ".", "PropertySets", ".", "Item", "(", "\"", "Inventor User Defined Properties", "\"", ")", "\n \n      ", "Try", "\n         ", "prop", " ", "=", " ", "customPropertySet", ".", "Item", "(", "propertyName", ")", "\n      ", "Catch", "\n         ", "'", " Assume error means not found", "\n         ", "customPropertySet", ".", "Add", "(", "\"\"", ", ", "propertyName", ")", "\n         ", "prop", " ", "=", " ", "customPropertySet", ".", "Item", "(", "propertyName", ")", "\n      ", "End", " ", "Try", "\n \n      ", "prop", ".", "Value", " ", "=", " ", "Flt_Ptrn_Len", " ", "&", "\"", " x ", "\"", "&", " ", "Flt_Ptrn_Wid", "\n                \n            ", "End", " ", "If", "\n        ", "End", " ", "If", "\n    ", "Next", "\n    \n", "Else", "\n       \n", "End", " ", "If"], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: Model is not Update After entering wrong value\n                    ", "solution": ["Temp_SINKLOCATION_LH", " ", "=", " ", "Parameter", "(", "\"", "COUNTERTOP:1", "\"", ", ", "\"", "SINKLOCATION_LH", "\"", ")", "\n", "Temp_SINKLOCATION_FRONT", " ", "=", " ", "Parameter", "(", "\"", "COUNTERTOP:1", "\"", ", ", "\"", "SINKLOCATION_FRONT", "\"", ")", " \n\n", "While", " ", "SINKLOCATION_LH", " ", "<", " ", "9", "\n    ", "MessageBox", ".", "Show", "(", "\"", "INCORRECT VALUE", "\"", ", ", "\"", "SINKLOCATION_LH", "\"", ")", "\n    ", "SINKLOCATION_LH", " ", "=", " ", "Temp_SINKLOCATION_LH", "\n", "End", " ", "While", "\n\n", "While", " ", "SINKLOCATION_FRONT", " ", "<", " ", "9", "\n    ", "MessageBox", ".", "Show", "(", "\"", "INCORRECT VALUE", "\"", ", ", "\"", "SINKLOCATION_FRONT", "\"", ")", "\n    ", "SINKLOCATION_FRONT", " ", "=", " ", "Temp_SINKLOCATION_FRONT", "\n", "End", " ", "While", "\n\n", "Parameter", "(", "\"", "COUNTERTOP:1", "\"", ", ", "\"", "SINKLOCATION_LH", "\"", ")", " ", "=", " ", "SINKLOCATION_LH", "\n", "Parameter", "(", "\"", "COUNTERTOP:1", "\"", ", ", "\"", "SINKLOCATION_FRONT", "\"", ")", " ", "=", " ", "SINKLOCATION_FRONT", "\n\n", "ThisDoc", ".", "Document", ".", "Rebuild", "()", "\n", "InventorVb", ".", "DocumentUpdate", "()", "\n", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", " "], "author": "b.sharanraj"},
{"created at": [], "solution Title": "\n                        Re: VB.Net - Drawing Sheet Size\n                    ", "solution": ["'default orientation\noSheet.Orientation = PageOrientationTypeEnum.kDefaultPageOrientation\n'page is oriented as a Landscape\noSheet.Orientation = PageOrientationTypeEnum.kLandscapePageOrientation\n'page is oriented as a Portrait\noSheet.Orientation = PageOrientationTypeEnum.kPortraitPageOrientation"], "author": "t_hascj"},
{"created at": [], "solution Title": "\n                        Re: Place Textbox in drawingview sketch on mouseposition\n                    ", "solution": ["Dim insertionpoint2D As Point2d = m_inventorApplication.TransientGeometry.CreatePoint2d(insertionpoint3D.X, insertionpoint3D.Y)\n'interpolate insertionpoint from sheet level to drawingview level\ninsertionpoint2D = selectedDrawingView.", "SheetToDrawingViewSpace", "(insertionpoint2D)\n'draw textbox\naTextbox = oSketch.TextBoxes.AddFitted(insertionpoint2D, number, aStyle)"], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: frame generator custom part: Inventor 2018\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic-Rule activates the first shhet in an Inventor-idw/dwg\n                    ", "solution": ["ThisApplication.ActiveDocument.Sheets(1).Activate()"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Export all Flat Patterns from iPart file to DWG with Part Number as file nam\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "PartDocument", "\n", "oDoc", "=", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "oCompDef", "=", "oDoc", ".", "ComponentDefinition", "\n", "Dim", " ", "oDataIO", " ", "As", " ", "DataIO", "\n", "oDataIO", "=", "oDoc", ".", "ComponentDefinition", ".", "DataIO", "\n", "If", " ", "oCompDef", ".", "HasFlatPattern", "=", "False", " ", "Then", "\n", "oCompDef", ".", "Unfold", "\n", "Else", "\n", "oCompDef", ".", "FlatPattern", ".", "Edit", "\n", "End", " ", "If", "\n", "Dim", " ", "sOut", " ", "As", " ", "String", "\n", "sOut", "=", "\"", "FLAT PATTERN DWG?AcadVersion=2000", "\"", " ", "_", "\n", "+", "\"", "&InvisibleLayers=IV_TANGENT;IV_TOOL_CENTER;IV_TOOL_CENTER_DOWN;IV_ARC_CENTERS;IV_ALTREP_FRONT;IV_ALTREP_BACK;IV_UNCONSUMED_SKETCHES;IV_ROLL_TANGENT;IV_ROLL", "\"", " ", "_", "\n", "+", "\"", "&SimplifySplines=True", "\"", " ", "_", "\n", "+", "\"", "&LINEAR TOLERANCE=0.010", "\"", " ", "_", "\n", "+", "\"", "&MergeProfilesIntoPolyline=True", "\"", " ", "_", "\n", "+", "\"", "&RebaseGeometry=False", "\"", " ", "_", "\n", "+", "\"", "&TrimCenterlines=True", "\"", "\n", "Dim", " ", "invPropSets", " ", "As", " ", "PropertySets", " \n", "invPropSets", "=", "oDoc", ".", "PropertySets", " \n", "Dim", " ", "invPropSet", " ", "As", " ", "PropertySet", " \n", "invPropSet", "=", "invPropSets", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", " \n", "Dim", " ", "invPartNumiProp", " ", "As", " ", "Inventor", ".", "Property", " \n", "invPartNumiProp", "=", "invPropSet", ".", "Item", "(", "\"", "Part Number", "\"", ")", "\n", "Dim", " ", "sFname", " ", "As", " ", "String", "\n", "sFname", "=", "ThisDoc", ".", "Path", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "invPartNumiProp", ".", "Value", " ", "&", " ", "\"", ".dwg", "\"", "\n", "oCompDef", ".", "DataIO", ".", "WriteDataToFile", "(", "sOut", ", ", "sFname", ")", "\n", "oCompDef", ".", "FlatPattern", ".", "ExitEdit", "sOut", "=", "\"", "FLAT PATTERN DWG?AcadVersion=2000", "\"", " ", "_", "sFname", "=", "ThisDoc", ".", "Path", " ", "&", "\"", "\\", "\"", "&", "invPartNumiProp", ".", "Value", " ", "&", "\"", ".dwg", "\"", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "oDoc", "=", "ThisDoc", ".", "Document", "\n", "Dim", " ", "docFile", " ", "As", " ", "Document", "\n", "For", " ", "Each", " ", "docFile", " ", "In", " ", "oDoc", ".", "AllReferencedDocuments", "\n", "ThisApplication", ".", "Documents", ".", "Open", "(", "docFile", ".", "FullFileName", ",", "True", ")", "\n", "Dim", " ", "partDoc", " ", "As", " ", "PartDocument", "\n", "partDoc", "=", "ThisApplication", ".", "ActiveDocument", "\n", "If", " ", "partDoc", ".", "SubType", "=", "\"", "{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}", "\"", " ", "Then", "\n", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "oCompDef", "=", "partDoc", ".", "ComponentDefinition", "\n", "Dim", " ", "oDataIO", " ", "As", " ", "DataIO", "\n", "oDataIO", "=", "oDoc", ".", "ComponentDefinition", ".", "DataIO", "\n", "If", " ", "oCompDef", ".", "HasFlatPattern", "=", "False", " ", "Then", "\n", "oCompDef", ".", "Unfold", "\n", "Else", "\n", "oCompDef", ".", "FlatPattern", ".", "Edit", "\n", "End", " ", "If", "\n", "Dim", " ", "sOut", " ", "As", " ", "String", "\n", "sOut", "=", "\"", "FLAT PATTERN DWG?AcadVersion=2000", "\"", " ", "_", "\n", "+", "\"", "&InvisibleLayers=IV_TANGENT;IV_TOOL_CENTER;IV_TOOL_CENTER_DOWN;IV_ARC_CENTERS;IV_ALTREP_FRONT;IV_ALTREP_BACK;IV_UNCONSUMED_SKETCHES;IV_ROLL_TANGENT;IV_ROLL", "\"", " ", "_", "\n", "+", "\"", "&SimplifySplines=True", "\"", " ", "_", "\n", "+", "\"", "&LINEAR TOLERANCE=0.010", "\"", " ", "_", "\n", "+", "\"", "&MergeProfilesIntoPolyline=True", "\"", " ", "_", "\n", "+", "\"", "&RebaseGeometry=False", "\"", " ", "_", "\n", "+", "\"", "&TrimCenterlines=True", "\"", "\n", "Dim", " ", "invPropSets", " ", "As", " ", "PropertySets", "\n", "invPropSets", "=", "partDoc", ".", "PropertySets", "\n", "Dim", " ", "invPropSet", " ", "As", " ", "PropertySet", "\n", "invPropSet", "=", "invPropSets", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", "\n", "Dim", " ", "invPartNumiProp", " ", "As", " ", "Inventor", ".", "Property", "\n", "invPartNumiProp", "=", "invPropSet", ".", "Item", "(", "\"", "Part Number", "\"", ")", "\n", "Dim", " ", "sFname", " ", "As", " ", "String", "\n", "sFname", "=", "ThisDoc", ".", "Path", " ", "&", "\"", "\\", "\"", "&", "invPartNumiProp", ".", "Value", " ", "&", "\"", ".dwg", "\"", "\n", "oCompDef", ".", "DataIO", ".", "WriteDataToFile", "(", "sOut", ",", "sFname", ")", "\n", "oCompDef", ".", "FlatPattern", ".", "ExitEdit", "\n", "If", " ", "partDoc", ".", "ComponentDefinition", ".", "IsiPartFactory", " ", "Or", "\n", "partDoc", ".", "ComponentDefinition", ".", "IsiPartMember", " ", "Then", "\n", "partDoc", ".", "Save", "()", "\n", "End", " ", "If", "\n", "Else", "\n", "End", " ", "If", "\n", "partDoc", ".", "Close", "\n", "Next"], "author": "philip1009"},
{"created at": [], "solution Title": "\n                        Re: Constrain all components in assembly\n                    ", "solution": ["Public Sub AlignOccurrencesWithConstraints()\nDim oAsmDoc As AssemblyDocument\nSet oAsmDoc = ThisApplication.ActiveDocument\n' Get the assembly component definition.\nDim oAsmDef As AssemblyComponentDefinition\nSet oAsmDef = oAsmDoc.ComponentDefinition\n' Get all of the leaf occurrences of the assembly.\nDim oLeafOccs As ComponentOccurrencesEnumerator\nSet oLeafOccs = oAsmDef.Occurrences.AllLeafOccurrences\n' Get the occurrences in the select set.\nDim occurrenceList As New Collection\n'Dim entity As Object\n    ' Iterate through the occurrences and print the name.\nDim oOcc As ComponentOccurrence\n'Dim occurrenceList As New Collection\n\n\nDim oAssyDoc As Inventor.AssemblyDocument\nSet oAddyDoc = ThisApplication.ActiveDocument\nDim oConstraints As AssemblyConstraints\nSet oConstraints = oAsmDef.constraints\nDim oConstraint As AssemblyConstraint\n \n\nIf MsgBox(\"Achtung, dies l\u00f6scht alle Abh\u00e4ngigkeiten! Wirklich ALLE Abh\u00e4nigkeiten l\u00f6schen?\", vbYesNo + vbQuestion) = vbYes Then\nAufheben\n\nFor Each oConstraint In oConstraints\n'MsgBox (\"HELLO\")\noConstraint.Delete\nNext\n\nFor Each oOcc In oLeafOccs\noccurrenceList.Add oOcc\n'MsgBox (\"HELLO\")\nNext\n\nIf occurrenceList.Count < 2 Then\nMsgBox \"At least two occurrences must be selected.\"\nExit Sub\nEnd If\n' This assumes the first selected occurrence is the \"base\"\n' and will constrain the base workplanes of all the other parts\n' to the base workplanes of the first part. If there are\n' constraints on the other they end up being over constrained.\n' Get the planes from the base part and create proxies for them.\nDim baseOccurrence As ComponentOccurrence\nSet baseOccurrence = occurrenceList.Item(1)\nDim BaseXY As WorkPlane\nDim BaseYZ As WorkPlane\nDim BaseXZ As WorkPlane\nCall GetPlanes(baseOccurrence, BaseXY, BaseYZ, BaseXZ)\nDim constraints As AssemblyConstraints\nSet constraints = oAsmDoc.ComponentDefinition.constraints\n' Iterate through the other occurrences\nDim i As Integer\nFor i = 2 To occurrenceList.Count\nDim thisOcc As ComponentOccurrence\nSet thisOcc = occurrenceList.Item(i)\n' Move it to the base occurrence so that if the base is\n' not fully constrained it shouldn't move when the flush\n' constraints are added.\nthisOcc.Transformation = baseOccurrence.Transformation\n' Get the planes from the occurrence\nDim occPlaneXY As WorkPlane\nDim occPlaneYZ As WorkPlane\nDim occPlaneXZ As WorkPlane\nCall GetPlanes(thisOcc, occPlaneXY, occPlaneYZ, occPlaneXZ)\n' Add the flush constraints.\nCall constraints.AddFlushConstraint(BaseXY, occPlaneXY, 0)\nCall constraints.AddFlushConstraint(BaseYZ, occPlaneYZ, 0)\nCall constraints.AddFlushConstraint(BaseXZ, occPlaneXZ, 0)\nNext\n\nGroundAndFix\n\nEnd If\n\nEnd Sub", "' Utility function used by the AlignOccurrencesWithConstraints macro.\n' Given an occurrence it returns the base work planes that are in\n' the part or assembly the occurrence references. It gets the\n' proxies for the planes since it needs the work planes in the\n' context of the assembly and not in the part or assembly document\n' where they actually exist.\nPrivate Sub GetPlanes(ByVal Occurrence As ComponentOccurrence, ByRef BaseXY As WorkPlane, ByRef BaseYZ As WorkPlane, ByRef BaseXZ As WorkPlane)\n' Get the work planes from the definition of the occurrence.\n' These will be in the context of the part or subassembly, not\n' the top-level assembly, which is what we need to return.\nSet BaseXY = Occurrence.Definition.WorkPlanes.Item(3)\nSet BaseYZ = Occurrence.Definition.WorkPlanes.Item(1)\nSet BaseXZ = Occurrence.Definition.WorkPlanes.Item(2)\n' Create proxies for these planes. This will act as the work\n' plane in the context of the top-level assembly.\nCall Occurrence.CreateGeometryProxy(BaseXY, BaseXY)\nCall Occurrence.CreateGeometryProxy(BaseYZ, BaseYZ)\nCall Occurrence.CreateGeometryProxy(BaseXZ, BaseXZ)\nEnd Sub", "Public Sub GroundAndFix()\n    Dim assemblydoc As AssemblyDocument\n    Set assemblydoc = ThisApplication.ActiveDocument\n    Dim assemblyDef As AssemblyComponentDefinition\n    Set assemblyDef = assemblydoc.ComponentDefinition\n\n    ' Create a matrix.  It is initialized as an identity matrix\n    ' which means it defines a position as the origin and aligned\n    ' with the global x, y, and z axes.\n    Dim transGeom As TransientGeometry\n    Set transGeom = ThisApplication.TransientGeometry\n    Dim baseTransform As Matrix\n    Set baseTransform = transGeom.CreateMatrix\n\n    ' Create collections to load the occurrences into.\n    Dim transObjects As TransientObjects\n    Set transObjects = ThisApplication.TransientObjects\n    Dim occList As ObjectCollection\n    Set occList = transObjects.CreateObjectCollection\n    Dim transformList As ObjectCollection\n    Set transformList = transObjects.CreateObjectCollection\n\n    ' Iterate through all of the occurrences.\n    Dim Occurrence As ComponentOccurrence\n    For Each Occurrence In assemblyDef.Occurrences\n        ' Add each occurrence to the list.\n        occList.Add Occurrence\n\n        ' Add the transform to the list.\n        transformList.Add baseTransform\n\n        ' Ground each occurrence.  This is ok to do here\n        ' because the move will ignore the ground condition.\n        Occurrence.Grounded = True\n    Next\n\n    ' Reposition all of the occurrences.  The TransformOccurrences\n    ' method was new in Inventor 2009.\n    Set assemblyDef = assemblydoc.ComponentDefinition\n    Call assemblyDef.TransformOccurrences(occList, transformList)\nEnd Sub"], "author": "Zierath_CAD"},
{"created at": [], "solution Title": "\n                        Re: The question of Create sectionView\n                    ", "solution": ["Dim oDrawingDoc As DrawingDocument\noDrawingDoc = ThisApplication.ActiveDocument \n      \nDim oSheet As Sheet\noSheet = oDrawingDoc.Sheets.Item(1)\n       \nDim oPoint1 As Point2d\noPoint1 = ThisApplication.TransientGeometry.CreatePoint2d(-1500#, -1500#)\nDim oView1 As DrawingView\noView1=oSheet.DrawingViews.Item(1)\nDim oPoint2 As Point2d\noPoint2 = ThisApplication.TransientGeometry.CreatePoint2d(1000#, 1000#)\nDim oPoint3 As Point2d\noPoint3 = ThisApplication.TransientGeometry.CreatePoint2d(-100#, 100#)\nDim oDrawingSketch As DrawingSketch\noDrawingSketch = oView1.Sketches.Add\n    \noDrawingSketch.Edit\nDim oSketchLine As SketchLine\noSketchLine = oDrawingSketch.SketchLines.AddByTwoPoints(oPoint1, _\n    oPoint2)\noDrawingSketch.ExitEdit\n\n\n Dim oView2 As SectionDrawingView\n\noView2 = oSheet.DrawingViews.AddSectionView(oView1, _\n     oDrawingSketch, oPoint3, ", "DrawingViewStyleEnum.kHiddenLineRemovedDrawingViewStyle", ",,,,,,)\n\n'oDrawingSketch.Visible = False"], "author": "Stakin"},
{"created at": [], "solution Title": "\n                        Re: Create constrain with name XY?\n                    ", "solution": ["Dim counter As Integer", "counter = 1", "...", "Call constraints.AddFlushConstraint(BaseXZ, occPlaneXZ, 0)\nDim i As Integer\ni = constrains.count - 1 ' I'm not sure if the counstraints start counting from 0 or 1, try it with and without the \" - 1\"\nconstrains(i).Name = \"Automatic:\" & counter\ncounter = counter + 1", "Dim CO As FlushConstraint", "Set CO = constraints.AddFlushConstraint(BaseXZ, occPlaneXZ, 0)\nCO.Name = \"Automatic:\" & counter"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Position a view on a sheet - random behavior issue\n                    ", "solution": ["Public Sub AutoScale()\n'Scale all views on all pages to fit nicely on the sheets\n\n'step 0. declare stuff\n  Dim oDrawDoc As DrawingDocument\n  Dim oSheet As Sheet\n  Dim oDrawView As DrawingView\n  \n  Set oDrawDoc = ThisApplication.ActiveDocument\n\n' step 2. Process all pages\n    Dim i As Integer\n    i = 3\n    For i = 3 To oDrawDoc.Sheets.Count\n        Set oSheet = oDrawDoc.Sheets.Item(i)\n        Set oDrawView = oSheet.DrawingViews.Item(1)\n        Call ProcessPages(oSheet, oDrawView)\n    Next\n\nEnd Sub\n\n\nPrivate Sub ProcessPages(ByVal oSheet As Sheet, ByVal oDrawView As DrawingView)\n' step 1 get current drawingscale\n    Dim oDrawViewScale As Double\n    oDrawViewScale = oDrawView.Scale\n\n' step 2 Determine the best scale by looking at the view widths.\n    Dim dWidthScale As Double\n    dWidthScale = (oSheet.Width - 5) / oDrawView.Width * oDrawViewScale    '5cm = distance to stay away from sides\n\n' step 3 Determine the best scale by looking at the view heights.\n    Dim dHeightScale As Double\n    dHeightScale = (oSheet.Height - 9) / oDrawView.Height * oDrawViewScale    '9cm = distance to stay away from top and bottom (including the header)\n\n' step 4 Choose the best scale\n    Dim ComputeViewScale As Double\n    If dWidthScale < dHeightScale Then\n        ComputeViewScale = dWidthScale\n    Else\n        ComputeViewScale = dHeightScale\n    End If\n\n' step 5 set the correct scale\n    oDrawView.ScaleString = ComputeViewScale\n\n'step 6 set the location of the view\n    Dim PlacementPoint As Point2d\n    'place above the center of the page (2cm)\n    \n' - - - - I changed things here  - - - - '\n' - - - - - - - -\n' - - - - - - - -\n' - - - - - - - -\n\n    Set PlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(oSheet.Width / 2 - oDrawView.Center.x, oSheet.Height / 2 - oDrawView.Center.y)\n        '-> I compensate by deducting the centerlocation of the view from the center of the page\n    oDrawView.Postion = PlacementPoint\n        '-> I now use the '.Postion\n        \n    \n' - - - - - - - -\n' - - - - - - - -\n' - - - - - - - -\n' - - - - - - - -\n' - - - - I changed things here  - - - - '\n    \n    \nEnd Sub"], "author": "chris"},
{"created at": [], "solution Title": "\n                        Re: Assembly Parameters in subparts with iLogic Rule\n                    ", "solution": ["Sub Main\n    Dim asmDoc As AssemblyDocument = ThisApplication.ActiveDocument\n    Dim oParams As UserParameters = asmDoc.ComponentDefinition.Parameters.UserParameters\n    ", "' Iterate through all of the referenced documents", "\n    For Each oParam As UserParameter In oParams\n        For Each oDoc As Document In asmDoc.AllReferencedDocuments\n            ", "' Update the components", "\n            Call UpdateParameter(oDoc, oParam) ", "'add \", True\" to update parameters", "\n        Next\n    Next \nEnd Sub\n\nSub UpdateParameter(oDoc As Document, oParam As UserParameter, Optional bUpdate As Boolean = False)\n    Dim strName As String = oParam.Name\n    ", "' Get the user parameters collection", "\n    Dim userParams As UserParameters = oDoc.ComponentDefinition.Parameters.UserParameters\n    If ParamExists(strName, userParams) Then\n        If bUpdate Then", "            Dim oTemp As UserParameter = userParams(strName)", "            oTemp.Units = oParam.Units", "            oTemp.Value = oParam.Value", "        Else", "            MsgBox(\"User parameter '\" & strName & \"' already exists in '\" & oDoc.DisplayName & \"'.\")", "        End If\n        Exit Sub\n    End If", "    userParams.AddByValue(strName, oParam.Value, oParam.Units)\nEnd Sub\n\nFunction ParamExists(strName As String, userParams As UserParameters) As Boolean\n    Dim bResult As Boolean = False", "    Try\n        Dim oTemp As UserParameter = userParams(strName)\n        bResult = True\n    Catch", "    End Try\n    Return bResult\nEnd Function\u00a0", "Dim bUpdateValues As Boolean = False ", "' True to update values", "\nDim bShowExisting As Boolean = False ", "' True to show existing parameters", "\n\nDim aDoc As AssemblyDocument = ThisApplication.ActiveDocument\nDim oParams As UserParameters = aDoc.ComponentDefinition.Parameters.UserParameters\n", "' Iterate through all of the referenced documents", "\nFor Each oParam As UserParameter In oParams\n    ", "' Update the components", "\n    For Each oDoc As Document In aDoc.AllReferencedDocuments\n        ", "' Get the user parameters collection", "\n        Dim userParams As UserParameters = oDoc.ComponentDefinition.Parameters.UserParameters\n        Dim oTemp As UserParameter\n        Try\n            oTemp = userParams(oParam.Name)\n        Catch\n            userParams.AddByValue(oParam.Name, oParam.Value, oParam.Units)\n            Exit Sub\n        End Try\n        If bUpdateValues Then\n            oTemp.Units = oParam.Units\n            oTemp.Value = oParam.Value\n        End If", "        If bShowExisting Then\n            MsgBox(\"User parameter '\" & oParam.Name & \"' already exists in '\" & oDoc.DisplayName & \"'.\")\n        End If\n    Next\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Problem running rule in Sub Assembly from top level Assembly\n                    ", "solution": ["ThisDoc", ".Document", ".ComponentDefinition", "'Trigger", "\nt = PatternDirection", "\nDim oDoc As AssemblyDocument = ThisApplication.ActiveDocument\nDim oCD As AssemblyComponentDefinition = oDoc.ComponentDefinition", "'Get the parameter", "Dim aPara As Parameter = oCD.Parameters(\"PatternDirection\")", "If aPara Is Nothing Then Exit Sub", "Dim aParaVal As Boolean = aPara.Value", "'Go through all occurrences in the top assembly", "\nFor Each oOcc As ComponentOccurrence In oCD.Occurrences", "    ", "'Check only assembly occurrences", "    If oOcc.DefinitionDocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then Continue For", "    Dim aDoc As AssemblyDocument = oOcc.Definition.Document", "    Dim aCD As AssemblyComponentDefinition = aDoc.ComponentDefinition", "    ", "'Check for present patterns", "    If aCD.OccurrencePatterns.Count = 0 Then Continue For", "    ", "'Get the patterns from the sub-assembly", "\n    Dim oOP1 As OccurrencePattern = aCD.OccurrencePatterns.Item(\"Solids Pattern\")\n    Dim oOP2 As OccurrencePattern = aCD.OccurrencePatterns.Item(\"Bounding box Pattern\")\n    If oOP1 Is Nothing Then Continue For", "    If oOP2 Is Nothing Then Continue For", "    ", "'Set the values", "\n    oOP1.ColumnEntityNaturalDirection = aParaVal\n    oOP2.ColumnEntityNaturalDirection = aParaVal", "Next"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Triggering a part rule to run fron an assembly rule.\n                    ", "solution": ["Imports", " ", "System", ".", "IO", "Sub Main()\n\n\tRename(\"DW-\" & 1 & \".iam\",\"Autodesk Inventor Part Files (*.iam)|*.iam\", \"Assembly\")\n\tRename(\"Frame-\" & 1 & \".ipt\", \"Autodesk Inventor Part Files (*.ipt)|*.ipt\", \"Part\")\n\nEnd Sub\n\nSub Rename(ByVal docName As String, ByVal filterType As String, ByVal docType As String)\n\n\t'define the active document\n\toDoc = ThisDoc.Document\n\t\n\t'create a file dialog box\n\tDim oFileDlg As inventor.FileDialog = Nothing\n\tInventorVb.Application.CreateFileDialog(oFileDlg)\n\t\n\t'set the assembly part name to = filename \n\toDoc.DisplayName = \"\"\n\t\n\t'set Part type\n\toFileDlg.Filter = filterType\n\t\n\t'set the directory to open the dialog at\n\toFileDlg.InitialDirectory = ThisDoc.WorkspacePath()\n\t\n\tDim fileName As String = docName\n\tDim fInfo As FileInfo()\n\tDim dirInfo As New DirectoryInfo(oFileDlg.InitialDirectory)\n\tfInfo = dirInfo.GetFiles()\n\t\n\tDim i As Integer = 1\n\tDim file As FileInfo\n\tReiterate:For Each file In fInfo\n\t\tIf file.Name = fileName Then\n\t\t\t\ti = i + 1\n\t\t\t\tIf docType = \"Assembly\" Then\n\t\t\t\t\tfileName = \"DW-\" & i & \".iam\"\n\t\t\t\tElse If docType = \"Part\" Then\n\t\t\t\t\tfileName = \"Frame-\" & i & \".ipt\"\n\t\t\t\tEnd If\n\t\t\t\t\n\t\t\t\tGoto Reiterate\n\t\t\tEnd If\n\t\tNext\n\t\n\t'set the file name string to use in the input box\n\toFileDlg.FileName = fileName                  \n\t\n\t'work with an error created by the user backing out of the save \n\toFileDlg.CancelError = True\n\tOn Error Resume Next\n\t\n\t'specify the file dialog as a save dialog (rather than a open dialog)\n\toFileDlg.ShowSave()\n\t\n\t\n\t'catch an empty string in the imput\n\tIf Err.Number <> 0 Then\n\tMessageBox.Show(\"No File Saved.\", \"iLogic: Dialog Canceled\")\n\tElseIf oFileDlg.FileName <> \"\" Then\n\tMyFile = oFileDlg.FileName\n\t\n\t'save the file \n\toDoc.SaveAs(MyFile, False) 'True = Save As Copy & False = Save As\n\tEnd If\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: BrowserFolder How to add a workpoint with vba?\n                    ", "solution": ["Sub AddtoBrowserFolder()\n    ' Ref to AssebmlyDocument\n    Dim oAssmDoc As AssemblyDocument\n    Set oAssmDoc = ThisApplication.ActiveDocument\n    ' Ref to activePane\n    Dim oPane As BrowserPane\n    Set oPane = oAssmDoc.BrowserPanes.ActivePane\n    'Ref to Folder 'NewFolder'\n    Dim oFolder As BrowserFolder\n    Set oFolder = oPane.TopNode.BrowserFolders(\"NewFolder\")\n    'ref to secondlast nod(Part)\n    Dim oBrowserNode As BrowserNode\n    Set oBrowserNode = oPane.TopNode.BrowserNodes.Item(oPane.TopNode.BrowserNodes.Count - 1)\n    Debug.Print oBrowserNode.FullPath\n    \n    Dim oNew As BrowserFolder\n    Dim oCol As ObjectCollection\n    Set oCol = ThisApplication.TransientObjects.CreateObjectCollection\n    oCol.Add oBrowserNode\n    \n    Set oNew = oPane.AddBrowserFolder(\"NewFolder\", oCol)\n    \n    ' Delete the redundant browser folder\n    oFolder.Delete\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Create a \"cut list\" IAM or IPT automagically\n                    ", "solution": ["Sub Main()\n\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.Documents.Add(DocumentTypeEnum.kPartDocumentObject)\n\n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n\n    Dim oSketch As PlanarSketch\n    Set oSketch = partDef.Sketches.Add(partDef.WorkPlanes.Item(2))\n\n    Dim strPt As Point2d\n    Set strPt = ThisApplication.TransientGeometry.CreatePoint2d(-1, -2)\n\n    Dim endPt As Point2d\n    Set endPt = ThisApplication.TransientGeometry.CreatePoint2d(1, 2)\n    \n    Dim oSketchLines As SketchEntitiesEnumerator\n    Set oSketchLines = oSketch.SketchLines.AddAsTwoPointRectangle(strPt, endPt)\n    \n    Dim i As Integer\n    i = 1\n    \n    Dim oSketchLine As SketchLine\n    For Each oSketchLine In oSketchLines\n        Debug.Print (\"Line \" & i & \" Start point => X = \" & oSketchLine.StartSketchPoint.Geometry3d.X & \" Y = \" & oSketchLine.StartSketchPoint.Geometry3d.Y & \" Z = \" & oSketchLine.StartSketchPoint.Geometry3d.Z)\n        Debug.Print (\"Line \" & i & \" End point => X = \" & oSketchLine.EndSketchPoint.Geometry3d.X & \" Y = \" & oSketchLine.EndSketchPoint.Geometry3d.Y & \" Z = \" & oSketchLine.EndSketchPoint.Geometry3d.Z)\n        i = i + 1\n    Next\n\n    Dim oProfile As Profile\n    Set oProfile = oSketch.Profiles.AddForSolid()\n\n    Dim oExtrudeDef As ExtrudeDefinition\n    Set oExtrudeDef = partDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kNewBodyOperation)\n    Call oExtrudeDef.SetDistanceExtent(\"0.5 mm\", PartFeatureExtentDirectionEnum.kPositiveExtentDirection)\n\n    Dim oExtrude As ExtrudeFeature\n    Set oExtrude = partDef.Features.ExtrudeFeatures.Add(oExtrudeDef)\n    \n    Set oExtrudeDef = oExtrude.Definition\n    \n    Dim oExtent As DistanceExtent\n    Set oExtent = oExtrudeDef.Extent\n        \n    Debug.Print (\"Extruded length = \" & oExtent.Distance.Expression)\n    \n    Call partDoc.SaveAs(\"C:\\Temp\\Plywood.ipt\", False)\n\n    Call partDoc.Close\n    \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic sheet parametrs without units\n                    ", "solution": ["Dim oPart As PartDocument = ThisApplication.ActiveDocument\nDim oSMDef As SheetMetalComponentDefinition = oPart.ComponentDefinition\n\nIf Not oSMDef.HasFlatPattern Then oShtCompDef.Unfold()\n\niProperties.Value(\"Custom\", \"Length\")=Round(SheetMetal.FlatExtentsLength, 1)\niProperties.Value(\"Custom\", \"Width\")=Round(SheetMetal.FlatExtentsWidth, 1)\niProperties.Value(\"Custom\", \"Description\") = \"=Sheet t.<Tlou\u0161\u0165ka> <Length>x<Width> \"\niProperties.Value(\"Project\", \"Description\") = \"=Sheet t.<Tlou\u0161\u0165ka> <Length>x<Width> \"\nParameter.Param(\"Tlou\u0161\u0165ka\").ExposedAsProperty = True\nDim smFormat As CustomPropertyFormat = Parameter.Param(\"Tlou\u0161\u0165ka\").CustomPropertyFormat\nsmFormat.ShowTrailingZeros = False\nsmFormat.ShowUnitsString = False\n\n", "'Get the thickness parameter as a value", "\nDim oThick As Double = Parameter(\"Tlou\u0161\u0165ka\").Value\n", "'Check the value and set the iProperty's value", "\nSelect Case oThick\nCase 2:   iProperties.Value(\"Project\", \"Stock Number\") = \"131000006\"\nCase 2.5: iProperties.Value(\"Project\", \"Stock Number\") = \"131000008\"\t\nCase 3:   iProperties.Value(\"Project\", \"Stock Number\") = \"131000009\"\nCase 4:   iProperties.Value(\"Project\", \"Stock Number\") = \"131000011\"\nCase 5:   iProperties.Value(\"Project\", \"Stock Number\") = \"131000013\"\nCase 6:   iProperties.Value(\"Project\", \"Stock Number\") = \"131000016\"\t\nCase 7:   iProperties.Value(\"Project\", \"Stock Number\") = \"131000018\"\nCase 8:   iProperties.Value(\"Project\", \"Stock Number\") = \"131000019\"\nCase 9:   iProperties.Value(\"Project\", \"Stock Number\") = \"131000020\"\nCase 10:  iProperties.Value(\"Project\", \"Stock Number\") = \"131000021\"\nCase 12:  iProperties.Value(\"Project\", \"Stock Number\") = \"131000022\"\nCase 14:  iProperties.Value(\"Project\", \"Stock Number\") = \"131000023\"\nCase 15:  iProperties.Value(\"Project\", \"Stock Number\") = \"131000024\"\nCase 20:  iProperties.Value(\"Project\", \"Stock Number\") = \"131000025\"\nEnd Select", "Dim oMat As String = iProperties.Value(\"Custom\", \"Material\")", "If Parameter(\"Thickness\").Value = 2 Then", "    If oMat = \"S235\" Then\n        iProperties.Value(\"Custom\", \"Stock Number\") = \"1000\"\n    End If\nEnd If"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Need help exporting .ipt to .step\n                    ", "solution": [], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Automatic Page Numbering\n                    ", "solution": ["Public Sub Main Generator()\nPublic Sub SketchTextAdd()\n\noDocument = ThisDoc.Document\nShNum  = Mid(oDocument.ActiveSheet.Name, InStr(1, oDocument.ActiveSheet.Name, \":\") + 1)\nmymultiplier = \"8\" 'Number of zones for the sheet along top and bottom edges.\nZone01 = (ShNum * mymultiplier) - 7\nZone02 = (ShNum * mymultiplier) - 6\nZone03 = (ShNum * mymultiplier) - 5\nZone04 = (ShNum * mymultiplier) - 4\nZone05 = (ShNum * mymultiplier) - 3\nZone06 = (ShNum * mymultiplier) - 2\nZone07 = (ShNum * mymultiplier) - 1\nZone08 = (ShNum * mymultiplier) - 0\n\n    Dim oDrawDoc As DrawingDocument\n\t\toDrawDoc = ThisApplication.ActiveDocument\n\n    Dim oSketch As DrawingSketch\n\t\toSketch = oDrawDoc.ActiveSheet.Sketches.Add\n\n    oSketch.Edit\n    \n    Dim oTG As TransientGeometry\n    \toTG = ThisApplication.TransientGeometry\n\n    Dim sText As String\n    sText = \"Drawing Notes\"\n    Dim oTextBox As TextBox\n    \toTextBox = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(0, 0), \"\")\n\t\t\n\tDim SF As Double\n\t\tSF = 2.5393600812595226003047232097511\n\tDim SO As Double\n\t\tSO = 2.8312570781426953567383918459796\n\t\tDim Adj1 As Double\n\t\t\tAdj1 = (-5) * SO\n\t\tDim Adj2 As Double\n\t\t\tAdj2 = .5156 * SO\n\t\t\t'Adj2 = (1/3) * SO\n\t\tDim Adj0 As Double\n\t\t\tAdj0 = Adj1 + Adj2\n\t\n\tDim X8A As Double\n\t\tX8A = 2.5 * SF\n\tDim X8F As Double\n\t\tX8F = 2.5 * SF\n\tDim YA As Double\n\t\tYA = (.08+.275) * SF\n\tDim YF As Double\n\t\tYF = (.07+27.75) * SF\n\n\toTextBox08A = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8A, YA), Zone08)\n\tX8A = X8A - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox07A = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8A, YA), Zone07)\n\tX8A = X8A - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox06A = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8A, YA), Zone06)\n\tX8A = X8A - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox05A = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8A, YA), Zone05)\n\tX8A = X8A - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox04A = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8A, YA), Zone04)\n\tX8A = X8A - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox03A = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8A, YA), Zone03)\n\tX8A = X8A - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox02A = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8A, YA), Zone02)\n\tX8A = X8A - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox01A = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8A, YA), Zone01)\n\t\n\toTextBox08F = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8F, YF), Zone08)\n\tX8F = X8F - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox07F = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8F, YF), Zone07)\n\tX8F = X8F - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox06F = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8F, YF), Zone06)\n\tX8F = X8F - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox05F = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8F, YF), Zone05)\n\tX8F = X8F - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox04F = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8F, YF), Zone04)\n\tX8F = X8F - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox03F = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8F, YF), Zone03)\n\tX8F = X8F - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox02F = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8F, YF), Zone02)\n\tX8F = X8F - (oTextBox.FittedTextHeight + Adj0)\n\t\toTextBox01F = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(X8F, YF), Zone01)\n    \n    ' Exit the sketch from the edit environment.\n    oSketch.ExitEdit\nEnd Sub"], "author": "wiseowl84"},
{"created at": [], "solution Title": "\n                        Re: Measure window keeps resizing?\n                    ", "solution": [], "author": "francesco.dinh"},
{"created at": [], "solution Title": "\n                        Re: Assembly File Size - two users, two drastically different sizes\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Moving an existing revision table to the bottom left corner on the border\n                    ", "solution": ["Sub AlignRevBox()\n\n    Set invDoc = ThisApplication.ActiveDocument\n    Set oRevTable = invDoc.ActiveSheet.RevisionTables.Item(1)\n\n    Dim RevPt As Point2d\n    Dim BorderPt As Point2d\n    Dim oTG As TransientGeometry\n\n    Set BorderPt = invDoc.ActiveSheet.Border.RangeBox.MinPoint\n\n    'Debug.Print BorderPt.X, BorderPt.Y\n    Set oTG = ThisApplication.TransientGeometry\n    Set RevPt = oTG.CreatePoint2d(BorderPt.X, BorderPt.Y + (oRevTable.RangeBox.MaxPoint.Y - oRevTable.RangeBox.MinPoint.Y))\n\n    oRevTable.Position = RevPt\n\nEnd Sub"], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: Document Settings Tapped Hole Diameter\n                    ", "solution": [], "author": "Cadkunde.nl"},
{"created at": [], "solution Title": "\n                        Re: Push iProperty Values To Another File\n                    ", "solution": ["Sub Main()\n    Dim aDoc As Document = ThisApplication.ActiveDocument\n    If aDoc.DocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then Exit Sub ", "'Assembly documents only", "\n    \n    Question = MessageBox.Show(\"Do you wish to shrinkwrap the Walkway Assembly now for use in the General Arrangement?\", \"Walkway Assembly\",MessageBoxButtons.YesNo)\n    If Question <> vbYes Then\n        Exit Sub ", "'Exit", "\n    End If\n    \n    Dim oAsmCompDef As AssemblyComponentDefinition = aDoc.ComponentDefinition\n    oAsmCompDef.RepresentationsManager.DesignViewRepresentations.Item(\"Default\").Activate\n    Dim sPartName As String = vbNullString\n    Dim sDescription As String = iProperties.Value(\"Project\", \"Description\")\n    Dim sDrawing As String = iProperties.Value(\"Custom\", \"DRAWING No.\")\n    Try\n        ", "'CREATE A NEW PART DOCUMENT THAT WILL BE THE SHRINKWRAP SUBSTITUTE", "\n        Dim oPartDoc As PartDocument = ThisApplication.Documents.Add(DocumentTypeEnum.kPartDocumentObject, , True)\n        Dim oPartDef As PartComponentDefinition = oPartDoc.ComponentDefinition\n        Dim oDerivedAssemblyDef As DerivedAssemblyDefinition = oPartDef.ReferenceComponents.DerivedAssemblyComponents.CreateDefinition(aDoc.FullDocumentName)\n        ", "'SET VARIOUS SHRINKWRAP RELATED OPTIONS", "\n        oDerivedAssemblyDef.DeriveStyle = DerivedComponentStyleEnum.kDeriveAsMultipleBodies\n        oDerivedAssemblyDef.IncludeAllTopLevelWorkFeatures = DerivedComponentOptionEnum.kDerivedExcludeAll\n        oDerivedAssemblyDef.IncludeAllTopLevelSketches = DerivedComponentOptionEnum.kDerivedExcludeAll\n        oDerivedAssemblyDef.IncludeAllTopLeveliMateDefinitions = DerivedComponentOptionEnum.kDerivedExcludeAll\n        oDerivedAssemblyDef.IncludeAllTopLevelParameters = DerivedComponentOptionEnum.kDerivedExcludeAll\n        Call oDerivedAssemblyDef.SetHolePatchingOptions(DerivedHolePatchEnum.kDerivedPatchNone)\n        Call oDerivedAssemblyDef.SetRemoveByVisibilityOptions(DerivedGeometryRemovalEnum.kDerivedRemoveNone)\n        Dim oDerivedAss As DerivedAssemblyComponent = oPartDoc.ComponentDefinition.ReferenceComponents.DerivedAssemblyComponents.Add(oDerivedAssemblyDef)\n        Call oDerivedAss.BreakLinkToFile()\n        \n        ", "'SAVE THE PART", "\n        sPartName = ThisDoc.PathAndFileName(False) & \" (SHRINKWRAPPED).ipt\"\n        ThisApplication.ActiveView.Fit()\n        ThisApplication.CommandManager.ControlDefinitions.Item(\"AppIsometricViewCmd\").Execute()\n        Call oPartDoc.SaveAs(sPartName, False)\n    Catch ex As Exception\n        MsgBox(\"Error creating ipt file:\" & vblf & ex.message)\n    End Try\n    \n    ", "'Try", "\n        If sPartName = vbNullString Then Exit Sub\n        ", "Dim oDoc As Inventor.Document = ThisApplication.Documents.Open(sPartName, True)", "\n        ", "Dim", "\u00a0oPropsets\u00a0", "As", "\u00a0PropertySets = oDoc.PropertySets", "        ", "Dim", "\u00a0oProject\u00a0", "As", "\u00a0PropertySet = oPropsets.Item(", "\"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\"", ")", "        Dim", "\u00a0oCustom\u00a0", "As", "\u00a0PropertySet = oPropsets.Item(", "\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\"", ")", "        oProject(\"Description\").Expression = sDescription", "        Dim oDrawing As Inventor.Property", "        Try", "            oDrawing = oCustom(\"DRAWING No.\")", "        Catch", "            oDrawing = oCustom.Add(\"\", \"DRAWING No.\")", "        End Try\n        oDrawing.Expression = sDrawing\n        ", "oDoc.Save()\n        oDoc.Close()", "\n    ", "'Catch\n    'End Try", "\n    \n    oAsmCompDef.RepresentationsManager.DesignViewRepresentations.Item(\"Default\").Activate\nEnd Sub\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Example code for a rectangular pattern of parts (occurrences?) in an assembl\n                    ", "solution": ["Sub Main()\n\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    Dim objColl As ObjectCollection\n    Set objColl = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    Call objColl.Add(oDef.Occurrences.Item(2))\n    \n    Dim oPattern As RectangularOccurrencePattern\n    Set oPattern = oDef.OccurrencePatterns.AddRectangularPattern(objColl, oDef.WorkAxes.Item(3), False, \"10 mm\", 3)\n    \nEnd Sub\n\n", "bool CreateYArrayOfParts (CComPtr<ComponentOccurrences> pOccurrencesList, // The occurrences in the assembly\n                          CComPtr<AssemblyComponentDefinition> pCctsAssemblyCompDef,   // def of the assembly\n                          CComPtr<ComponentOccurrence> pObjOcc,\n                          const double kDeltaYMm,\n                          const UINT ikCount) \n{\n    CComPtr<OccurrencePatterns> pOccPatterns ;\n    pOccPatterns = pCctsAssemblyCompDef->GetOccurrencePatterns();\n    if (pOccPatterns == nullptr) {\n        gLogger.Printf(ekErrMsg, \"GetOccurrencePatterns failed\");\n        return false;\n    }\n\n    CComPtr<TransientObjects> pTransientObjects = theApp.GetTransientObjectsPtr() ; \n\n    CComVariant varObjEnumerator;\n    CComPtr<ObjectCollection> pObjectCollection;\n    HRESULT hRes = pTransientObjects->CreateObjectCollection(varObjEnumerator, &pObjectCollection);\n    if (FAILED(hRes)) {\n        gLogger.Printf(ekErrMsg, \"CreateObjectCollection failed\");\n        return false;\n    }\n\n    // Add the part which is the basis to the pattern...\n    hRes = pObjectCollection->Add (pObjOcc) ;\n    if (FAILED(hRes)) {\n        gLogger.Printf(ekErrMsg, \"Add to ObjectCollection failed\");\n        return false;\n    }\n\n    // Get hold of the y axis...\n    CComPtr<WorkAxis> pYWorkAxis ;\n    GetAsmWorkAxisByName (pYWorkAxis,L\"Y Axis\",pCctsAssemblyCompDef) ;\n    if (FAILED(hRes)) {\n        gLogger.Printf(ekErrMsg, \"Could not get assembly y axis\");\n        return false;\n    }\n\n    pOccPatterns->AddRectangularPattern(pObjectCollection, \n                                        _variant_t((IDispatch *)pYWorkAxis),\n                                        VARIANT_FALSE,\n                                        CComVariant(kDeltaYMm/10.0), //ColumnOffset As Variant, \n                                        CComVariant(ikCount), // ColumnCount As Variant, \n                                        CComVariant(), // [RowEntity] As Variant, \n                                        VARIANT_TRUE, // [RowEntityNaturalDirection] As Boolean, \n                                        CComVariant(0.0),// [RowOffset] As Variant, \n                                        CComVariant(1)); //  [RowCount] As Variant)\n\n    return (hRes == S_OK) ;\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Migrating custom add-ins from 2014 to 2016\n                    ", "solution": [], "author": "woodstylee3"},
{"created at": [], "solution Title": "\n                        Re: API to add sketch to flat pattern\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nIf oDoc.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Exit Sub\nDim oCD As SheetMetalComponentDefinition = oDoc.ComponentDefinition\nIf Not oCD.HasFlatPattern() Then\n    oCD.Unfold()\nElse\n    oCD.FlatPattern.Edit()\nEnd If\nDim oFP As FlatPattern = oCD.FlatPattern\nDim oFace As Face = oFP.TopFace\nDim oSketches As PlanarSketches = oFP.Sketches\nDim oSketch As PlanarSketch = oSketches.Add(oFace, False)\noSketch.Name = \"", "MySuperSketch", "\"\noSketch.Edit()\n", "'Do something in the sketch", "\noSketch.ExitEdit()\noFP.ExitEdit()"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Connect to SQL or Microsoft Access from iLogic\n                    ", "solution": ["AddReference \"System.Data\"\nAddReference \"System.Core\"\nAddReference \"System.Xml\"\n\nImports System.Data.OleDb\nImports System.Data\nImports System.Xml\n\n\nSub Main()\n\n\tDim Table_ As String = \"EmployeeInfo\"\n\tDim query As String = \"SELECT * FROM \" & Table_\n\tDim MDBConnString_ As String = \"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\\Temp\\EmployeeInfo.accdb;Persist Security Info=False;\"\n\tDim ds As New DataSet\n\tDim cnn As OleDbConnection = New OleDbConnection(MDBConnString_)\n\tcnn.Open()\n\tDim cmd As New OleDbCommand(query, cnn)\n\tDim da As New OleDbDataAdapter(cmd)\n\tda.Fill(ds, Table_)\n\tcnn.Close()\n\tDim t1 As DataTable = ds.Tables(Table_)\n\tDim row As DataRow\n\tDim Item(2) As String\n\tFor Each row In t1.Rows\n\t\tMessageBox.Show(\"EID : \" & row(0) & \" and Employee Name : \" & row(1))\n\t\tDim NextListItem As New ListViewItem(Item)\n\t\t'ListView1.Items.Add(NextListItem)\n\tNext\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Problem with ComponentDefinition.Type\n                    ", "solution": ["If oDoc.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then ", "'Do somehting"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: GetActiveDocument\n                    ", "solution": [], "author": "jeff.andrews"},
{"created at": [], "solution Title": "\n                        Re: Sort part list by part number\n                    ", "solution": ["On Error Resume Next\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\nDim oPartsList As PartsList\noPartsList = oDrawDoc.ActiveSheet.PartsLists.Item(1)\nIf Not oPartsList Is Nothing Then \nCall oPartsList.Sort(\"Part number\",1)\noPartsList.Renumber\noPartsList.SaveItemOverridesToBOM\nEnd If"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Sort names of PositionalRepresentations and LevelOfDetailRepresentations\n                    ", "solution": ["        Dim mApp As Inventor.Application = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n\n        Dim oAsmCompDef As AssemblyComponentDefinition\n        oAsmCompDef = mApp.ActiveDocument.ComponentDefinition\n\n        Dim oRepManager As RepresentationsManager\n        oRepManager = oAsmCompDef.RepresentationsManager\n\n        Call oRepManager.PositionalRepresentations.Item(1).Activate()\n\n        If oRepManager.PositionalRepresentations.Count > 1 Then\n            Dim arrPos As New ArrayList\n            For i As Integer = oRepManager.PositionalRepresentations.Count To 2 Step -1\n                arrPos.Add(oRepManager.PositionalRepresentations.Item(i).Name)\n            Next\n            arrPos.Sort()\n            Dim j As Integer = 0\n            For i As Integer = oRepManager.PositionalRepresentations.Count To 2 Step -1\n                oRepManager.PositionalRepresentations.Item(i).Copy(arrPos.Item(j) & \"1\")\n                j = j + 1\n            Next\n            For i As Integer = oRepManager.PositionalRepresentations.Count To 2 Step -1\n                Dim str As String\n                str = oRepManager.PositionalRepresentations.Item(i).Name\n                If str.Substring(str.Length - 1) <> \"1\" Then\n                    Call oRepManager.PositionalRepresentations.Item(i).Delete()\n                End If\n            Next\n            For i As Integer = oRepManager.PositionalRepresentations.Count To 2 Step -1\n                Dim str As String\n                str = oRepManager.PositionalRepresentations.Item(i).Name\n                If str.Substring(str.Length - 1) = \"1\" Then\n                    oRepManager.PositionalRepresentations.Item(i).Name = str.Remove(str.Length - 1)\n                End If\n            Next\n\n        End If\n\n        Call oRepManager.PositionalRepresentations.Item(1).Activate()\n\n        Call oRepManager.LevelOfDetailRepresentations.Item(1).Activate()\n\n        If oRepManager.LevelOfDetailRepresentations.Count > 4 Then\n            Dim arrLOD As New ArrayList\n\n            For i As Integer = oRepManager.LevelOfDetailRepresentations.Count To 5 Step -1\n                arrLOD.Add(oRepManager.LevelOfDetailRepresentations.Item(i).Name)\n            Next\n            ' Sorts the values of the ArrayList.\n            arrLOD.Sort()\n            Dim j As Integer = 0\n            For i As Integer = oRepManager.LevelOfDetailRepresentations.Count To 5 Step -1\n                oRepManager.LevelOfDetailRepresentations.Item(i).Copy(arrLOD.Item(j) & \"1\")\n                j = j + 1\n            Next\n            For i As Integer = oRepManager.LevelOfDetailRepresentations.Count To 5 Step -1\n                Dim str As String\n                str = oRepManager.LevelOfDetailRepresentations.Item(i).Name\n                If str.Substring(str.Length - 1) <> \"1\" Then\n                    Call oRepManager.LevelOfDetailRepresentations.Item(i).Delete()\n                End If\n            Next\n            For i As Integer = oRepManager.LevelOfDetailRepresentations.Count To 5 Step -1\n                Dim str As String\n                str = oRepManager.LevelOfDetailRepresentations.Item(i).Name\n                If str.Substring(str.Length - 1) = \"1\" Then\n                    oRepManager.LevelOfDetailRepresentations.Item(i).Name = str.Remove(str.Length - 1)\n                End If\n            Next\n        End If\n\n        Call oRepManager.LevelOfDetailRepresentations.Item(1).Activate()"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Need Help with iLogic\n                    ", "solution": [], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: Titelblock - symbols\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument = ThisApplication.ActiveDocument\nDim oSheet As Sheet = oDrawDoc.ActiveSheet\n\nFor Each oSymbol As SketchedSymbol In oSheet.SketchedSymbols\n\tIf oSymbol.Name = \"My Table\" Then\n\t\tDim oPoint As Point2d = oSymbol.Position\n\t\toPoint.X = oSheet.Width \n\t\toPoint.Y = oSheet.Height \n\t\toSymbol.Position = oPoint\n\tEnd If\nNext", "Dim oDrawDoc As DrawingDocument = ThisApplication.ActiveDocument\nDim oSheet As Sheet = oDrawDoc.ActiveSheet\n\nFor Each oSymbol As SketchedSymbol In oSheet.SketchedSymbols\n\tIf oSymbol.Name = \"My Table\" Then\n\t\tDim oPoint As Point2d = oSymbol.Position\n\t\toPoint.X = 0 + 3.234 \n\t\toPoint.Y = oSheet.Height - 2.3242\n\t\toSymbol.Position = oPoint\n\tEnd If\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Export Styles and Standards to an IDW Template\n                    ", "solution": [], "author": "kleiton.narcizo"},
{"created at": [], "solution Title": "\n                        Re: Photorealistic Rendering in Inventor\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Extract the \"Inventor.Face\" or \"Inventor.FaceProxy\"objec\n                    ", "solution": ["    Public Function getFacefromiMate(occ As ComponentOccurrence, compositeiMateName As String, iMateName As String) As FaceProxy\n       \n        Dim oDoc As Document = fanOcc.ReferencedDocumentDescriptor.ReferencedDocument()\n\n\n        Dim compositeiMateDefinition As CompositeiMateDefinition = Nothing\n        For Each tCompositeiMateDefinition As CompositeiMateDefinition In oDoc.ComponentDefinition.iMateDefinitions\n            If tCompositeiMateDefinition.Name.Equals(compositeiMateName, StringComparison.InvariantCultureIgnoreCase) Then\n                compositeiMateDefinition = tCompositeiMateDefinition\n            End If\n        Next\n        If compositeiMateDefinition Is Nothing Then Throw New Exception(\"Composite iMate not found: \" + compositeiMateName)\n\n\n        Dim iMateDefinition As iMateDefinition = Nothing\n        For Each tiMateDefinition As iMateDefinition In compositeiMateDefinition\n            If tiMateDefinition.Name.Equals(iMateName, StringComparison.InvariantCultureIgnoreCase) Then\n                iMateDefinition = tiMateDefinition\n            End If\n        Next\n        If iMateDefinition Is Nothing Then Throw New Exception(\"iMate not found: \" + iMateName)\n\n\n        Dim face As Face = Nothing\n        Dim form = iMateDefinition.Entity\n        For Each tFace As Face In form.Faces\n            If tFace.SurfaceType = SurfaceTypeEnum.kPlaneSurface Then\n                face = tFace\n            End If\n        Next\n        If face Is Nothing Then Throw New Exception(\"None plane surface found\")\n\n        Dim FaceProxy As FaceProxy = Nothing\n        Call occ.CreateGeometryProxy(face, FaceProxy)\n\n\n        Return FaceProxy\n    End Function"], "author": "jelte.de.jong"},
{"created at": [], "solution Title": "\n                        Re: I CAN NOT SEE WORK PLANE, AXIS.\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: insert images excel\n                    ", "solution": ["Sub InsertPDFSample()\n    Dim oExcel As Excel.Application\n\n    On Error Resume Next\n    Set oExcel = GetObject(, \"excel.application\")\n    \n    If Err.Number <> 0 Then\n        Set oExcel = CreateObject(\"excel.application\")\n    End If\n    \n    oExcel.Visible = True\n    \n    Dim sExcelPath As String\n    sExcelPath = \"C:\\TEMP\\Test.xlsx\"\n    \n    Dim oWorkbook As Excel.Workbook\n    Set oWorkbook = oExcel.Workbooks.Open(sExcelPath)\n    \n    ' activate the first work sheet.\n    oWorkbook.Sheets(1).Activate\n    \n    ' insert the PDF at the A1 cell\n    oWorkbook.Sheets(1).Range(\"A1\").Select\n\n    ' insert as embedded object\n    oWorkbook.ActiveSheet.OLEObjects.Add(FileName:=\"C:\\Temp\\MyPDF.pdf\" _\n        , Link:=False, DisplayAsIcon:=False).Select\n    \n    ' insert as linked object\n    'ActiveSheet.OLEObjects.Add(Filename:=\"C:\\Temp\\MyPDF.pdf\" _\n        , Link:=True, DisplayAsIcon:=False).Select\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Get back to Folded Sheet Metal VBA\n                    ", "solution": ["Public Function FilePath(ByVal fullFilename As String) As String\n   FilePath = Left$(fullFilename, InStrRev(fullFilename, \"\\\"))\nEnd Function", "\nPublic Function BaseFilename(ByVal fullFilename As String) As String\n    Dim temp As String\n    Dim lentemp As String\n    Dim count As Long\n    Dim instrtemp As Long\n    instrtemp = InStrRev(fullFilename, \"\\\")\n    lentemp = Len(fullFilename)\n    count = lentemp - instrtemp\n    temp = Right$(fullFilename, count)\n    BaseFilename = Left$(temp, InStrRev(temp, \".\") - 1)\nEnd Function", "\nPublic Sub WriteSheetMetalDXF()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    Dim fullFilename As String\n    fullFilename = oDoc.fullFilename()\n\n    Dim oSheetMetalCompDef As SheetMetalComponentDefinition\n    Set oSheetMetalCompDef = oDoc.ComponentDefinition\n\n    Dim oDataIO As DataIO\n    Set oDataIO = oDoc.ComponentDefinition.DataIO\n     ' Build the string that defines the format of the DXF file.\n    Dim sOut As String\n    sOut = \"FLAT PATTERN DXF?AcadVersion=2000&OuterProfileLayer=Outer&InvisibleLayers=IV_Tangent;IV_Bend;IV_Bend_Down;IV_Bend_Up;IV_ARC_CENTERS;IV_FEATURE_PROFILES_DOWN;IV_FEATURE_PROFILES\"\n\n    Dim oThicknessParam As Parameter\n    Set oThicknessParam = oSheetMetalCompDef.Thickness\n\n    Dim oThicknessString As String\n    oThicknessString = oThicknessParam.Value * 10\n\n    Dim dxffile As String\n    dxffile = FilePath(fullFilename) & BaseFilename(fullFilename) & \"  thickness \" & oThicknessString & \"mm .dxf\"\n", "\n    oDataIO.WriteDataToFile sOut, dxffile", "    Try", "        oSheetMetalCompDef.FlatPattern.ExitEdit", "    Catch", "        MsgBox(\"Error Exitting Flat Pattern!\")", "    End try", "    MsgBox (\"DXF file has been saved to: \" & dxffile)", "End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Macro to create axis for all Hole feature with specified diameter in compone\n                    ", "solution": [], "author": "alexindya"},
{"created at": [], "solution Title": "\n                        Re: Event trigger not completing rule\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Exporting .ipt to .igs with custom filename\n                    ", "solution": ["' Get the IGES translator Add-In.\nDim oIGESTranslator As TranslatorAddIn\noIGESTranslator = ThisApplication.ApplicationAddIns.ItemById(\"{90AF7F44-0C01-11D5-8E83-0010B541CD80}\")\nDim oContext As TranslationContext\noContext = ThisApplication.TransientObjects.CreateTranslationContext\nDim oOptions As NameValueMap\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\nIf oIGESTranslator.HasSaveCopyAsOptions(ThisApplication.ActiveDocument, oContext, oOptions) Then\n   ' Set geometry type for wireframe.\n   ' 0 = Surfaces, 1 = Solids, 2 = Wireframe\n   oOptions.Value(\"GeometryType\") = 1\n   ' To set other translator values:\n   ' oOptions.Value(\"SolidFaceType\") = n\n   ' 0 = NURBS, 1 = Analytic\n   ' oOptions.Value(\"SurfaceType\") = n\n   ' 0 = 143(Bounded), 1 = 144(Trimmed)\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\nDim oData As DataMedium\noData = ThisApplication.TransientObjects.CreateDataMedium\noData.FileName = ", "ThisDoc.Path & \"\\\" &", " iProperties.Value(\"Project\", \"Part Number\") & \".igs\"\noIGESTranslator.SaveCopyAs(ThisApplication.ActiveDocument, oContext, oOptions, oData)\nEnd If"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: ilogic batch export pdf from assembly drawing\n                    ", "solution": ["Sub", " ", "Main", "()", "\n    ", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n    ", "oDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n    ", "oDocName", " ", "=", " ", "System", ".", "IO", ".", "Path", ".", "GetDirectoryName", "(", "oDoc", ".", "FullFileName", ")", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "System", ".", "IO", ".", "Path", ".", "GetFileNameWithoutExtension", "(", "oDoc", ".", "FullFileName", ")", "\n    \n    ", "If", " ", "Not", " ", "(", "oDoc", ".", "DocumentType", " ", "=", " ", "kAssemblyDocumentObject", " ", "Or", " ", "oDoc", ".", "DocumentType", " ", "=", " ", "kDrawingDocumentObject", ")", " ", "Then", "\n        ", "MessageBox", ".", "Show", "(", "\"", "Please run this rule from the assembly or drawing files.", "\"", ", ", "\"", "iLogic", "\"", ")", "\n        ", "Exit Sub", "\n    ", "End", " ", "If", "\n    \n    ", "'", "get user input", "\n    ", "If", " ", "MessageBox", ".", "Show", " ", "(", " ", "_", "\n        ", "\"", "This will create a PDF file for all of the files referenced by this document that have drawings files.", "\"", " ", "_", "\n        ", "&", " ", "vbLf", " ", "&", " ", "\"", "This rule expects that the drawing file shares the same name and location as the component.", "\"", " ", "_", "\n        ", "&", " ", "vbLf", " ", "&", " ", "\"", " ", "\"", " ", "_", "\n        ", "&", " ", "vbLf", " ", "&", " ", "\"", "Are you sure you want to create PDF Drawings for all of the referenced documents?", "\"", " ", "_", "\n        ", "&", " ", "vbLf", " ", "&", " ", "\"", "This could take a while.", "\"", ", ", "\"", "iLogic  - Batch Output PDFs ", "\"", ",", "MessageBoxButtons", ".", "YesNo", ")", " ", "=", " ", "vbNo", " ", "Then", "\n        ", "Exit Sub", "\n    ", "End", " ", "If", "\n        \n    ", "Dim", " ", "PDFAddIn", " ", "As", " ", "TranslatorAddIn", "\n    ", "Dim", " ", "oContext", " ", "As", " ", "TranslationContext", "\n    ", "Dim", " ", "oOptions", " ", "As", " ", "NameValueMap", "\n    ", "Dim", " ", "oDataMedium", " ", "As", " ", "DataMedium", "\n    \n    ", "Call", " ", "ConfigurePDFAddinSettings", "(", "PDFAddIn", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n    \n    ", "oFolder", " ", "=", " ", "oDocName", " ", "&", " ", "\"", " PDF Files", "\"", "\n    ", "If", " ", "Not", " ", "System", ".", "IO", ".", "Directory", ".", "Exists", "(", "oFolder", ")", " ", "Then", "\n        ", "System", ".", "IO", ".", "Directory", ".", "CreateDirectory", "(", "oFolder", ")", "\n    ", "End", " ", "If", "\n    \n    ", "'", "- - - - - - - - - - - - -Component Drawings - - - - - - - - - - - -", "\n    ", "Dim", " ", "oRefDoc", " ", "As", " ", "Document", "\n    ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n    \n    ", "For", " ", "Each", " ", "oRefDoc", " ", "In", " ", "oDoc", ".", "AllReferencedDocuments", "\n        ", "oBaseName", " ", "=", " ", "System", ".", "IO", ".", "Path", ".", "GetFileNameWithoutExtension", "(", "oRefDoc", ".", "FullFileName", ")", "\n        ", "oPathAndName", " ", "=", " ", "System", ".", "IO", ".", "Path", ".", "GetDirectoryName", "(", "oRefDoc", ".", "FullFileName", ")", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oBaseName", "\n        ", "If", "(", "System", ".", "IO", ".", "File", ".", "Exists", "(", "oPathAndName", " ", "&", " ", "\"", ".idw", "\"", "))", " ", "Then", "\n            ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oPathAndName", " ", "&", " ", "\"", ".idw", "\"", ", ", "True", ")", "\n            ", "oDataMedium", ".", "FileName", " ", "=", " ", "oFolder", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oBaseName", " ", "&", " ", "\"", ".pdf", "\"", "\n            ", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oDrawDoc", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n            ", "oDrawDoc", ".", "Close", "\n        ", "Else", "\n            ", "oNoDwgString", " ", "=", " ", "oNoDwgString", " ", "&", " ", "vbLf", " ", "&", " ", "idwPathName", "\n        ", "End", " ", "If", "\n    ", "Next", "\n    ", "'", "- - - - - - - - - - - - -", "\n    \n    ", "'", "- - - - - - - - - - - - -Top Level Drawing - - - - - - - - - - - -", "\n    ", "oBaseName", " ", "=", " ", "System", ".", "IO", ".", "Path", ".", "GetFileNameWithoutExtension", "(", "oDoc", ".", "FullFileName", ")", "\n    ", "oPathAndName", " ", "=", " ", "System", ".", "IO", ".", "Path", ".", "GetDirectoryName", "(", "oDoc", ".", "FullFileName", ")", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oBaseName", "\n    ", "oDataMedium", ".", "FileName", " ", "=", " ", "oFolder", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oBaseName", " ", "&", " ", "\"", ".pdf", "\"", "\n    \n    ", "If", " ", "oDoc", ".", "DocumentType", " ", "=", " ", "kAssemblyDocumentObject", " ", "Then", "\n        ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "oPathAndName", " ", "&", " ", "\"", ".idw", "\"", ", ", "True", ")", "\n        ", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oDrawDoc", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n        ", "oDrawDoc", ".", "Close", "\n    ", "ElseIf", " ", "oDoc", ".", "DocumentType", " ", "=", " ", "kDrawingDocumentObject", " ", "Then", "\n        ", "Call", " ", "PDFAddIn", ".", "SaveCopyAs", "(", "oDoc", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "    \n    ", "End", " ", "If", "\n    ", "'", "- - - - - - - - - - - - -", "\n    \n    ", "MessageBox", ".", "Show", "(", "\"", "New Files Created in: ", "\"", " ", "&", " ", "vbLf", " ", "&", " ", "oFolder", ", ", "\"", "iLogic", "\"", ")", "\n    ", "MsgBox", "(", "\"", "Files found without drawings: ", "\"", " ", "&", " ", "vbLf", " ", "&", " ", "oNoDwgString", ")", "\n    ", "Shell", "(", "\"", "explorer.exe ", "\"", " ", "&", " ", "oFolder", ",", "vbNormalFocus", ")", "\n", "End Sub", "\n\n", "Sub", " ", "ConfigurePDFAddinSettings", "(", "ByRef", " ", "PDFAddIn", " ", "As", " ", "TranslatorAddIn", ", ", "ByRef", " ", "oContext", " ", "As", " ", "TranslationContext", ", ", "ByRef", " ", "oOptions", " ", "As", " ", "NameValueMap", ", ", "ByRef", " ", "oDataMedium", " ", "As", " ", "DataMedium", ")", "\n\n    ", "PDFAddIn", " ", "=", " ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", "(", "\"", "{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}", "\"", ")", "\n    ", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n    ", "oContext", ".", "Type", " ", "=", " ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n        \n    ", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n    ", "oOptions", ".", "Value", "(", "\"", "All_Color_AS_Black", "\"", ")", " ", "=", " ", "1", "\n    ", "oOptions", ".", "Value", "(", "\"", "Remove_Line_Weights", "\"", ")", " ", "=", " ", "0", "\n    ", "oOptions", ".", "Value", "(", "\"", "Vector_Resolution", "\"", ")", " ", "=", " ", "400", "\n    ", "oOptions", ".", "Value", "(", "\"", "Sheet_Range", "\"", ")", " ", "=", " ", "Inventor", ".", "PrintRangeEnum", ".", "kPrintAllSheets", "\n    ", "oOptions", ".", "Value", "(", "\"", "Custom_Begin_Sheet", "\"", ")", " ", "=", " ", "1", "\n    ", "oOptions", ".", "Value", "(", "\"", "Custom_End_Sheet", "\"", ")", " ", "=", " ", "1", "\n\n    ", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n", "End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Replace reference on sheet and still reference to other sheet\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Edit \"Punch Center\" property of a View throgh iLogic\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: VBA Error help\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: USER FORM SPLITTER AND EMPTY SPACE\n                    ", "solution": [], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: All Referenced Documents - individual document total count\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nIf oDoc.DocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then Exit Sub\nDim oADO As Inventor.ComponentOccurrences = oDoc.ComponentDefinition.Occurrences\nDim ES As String = vbNullString\nFor Each aDoc As Document In oDoc.AllReferencedDocuments\n\tDim sFN As String = aDoc.FullFileName\n\tDim Amount As Integer = oADO.AllReferencedOccurrences(aDoc).Count\n\tDim oPropsets As PropertySets = aDoc.PropertySets\n\tDim oPropSet As PropertySet = oPropsets.Item(\"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\")\n\tDim PN As String = oPropSet(\"Part Number\").Expression\n\tIf ES <> vbNullString Then ES += vbNewLine\n\tES += PN & \" \" & CStr(Amount)\nNext\nMsgBox(ES)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Change ActiveMaterial back to \"Generic\" programmatically\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Get reference to GeometyIntent of Dimensions in Drawings\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic to return specific folder in a path\n                    ", "solution": ["'get filepath\nfilePath = ThisDoc.Path\n'separate into array by directory separator\nfilePathArray = Split(filePath, System.IO.Path.DirectorySeparatorChar)\n\n'C=0, WF=1, Designs=2, Customer=3, OrderNo=4\nfilePathOrderNo = filePathArray(4)\nfilePathCustomer = filePathArray(3)\n\niProperties.Value(\"Custom\", \"Ordrenummer\")=filePathOrderNo\niProperties.Value(\"Project\", \"Project\")=filePathCustomer"], "author": "YannickEnrico"},
{"created at": [], "solution Title": "\n                        Re: Updates for Product Design Suite Ultimate\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to exit sub, nested in for loop?\n                    ", "solution": ["Sub Main\nDim oDocPath As String = ThisDoc.Path\nDim oDoc As Document = ThisDoc.Document\nDim oCompDef As ComponentDefinition = oDoc.ComponentDefinition\n    Dim sPrtPath As String = (Left(oDocPath,InStrRev(oDocPath, \"\\\"))&\"_CNC\")\n        If Not System.IO.Directory.Exists(sPrtPath) Then \n            MessageBox.Show(\"Could not locate CNC folder for this project.\" & vbLf & vbLf & sPrtPath & vbLf, \"Error\", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation)\n            Return\n        End If\n        If oDoc.DocumentType <> kPartDocumentObject Then\n            MessageBox.Show(\"Rule can only be run from a part document.\", \"Error\", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation)\n            Exit Sub\n        End If\n        If oCompDef.IsiPartFactory Then\n\t\t\tExport2iPart(oCompDef, sPrtPath)\n        Else\n            Export2Part(sPrtPath)\n        End If\nEnd Sub\n\nPrivate Sub Export2Part (sPrtPath As String)\n\tDim sPrtNum As String = iProperties.Value(\"Project\", \"Description\")\n\t", "YesNo(sPrtNum, sPrtPath, True)", "\nEnd Sub\n\nPrivate Sub Export2iPart (oCompDef As ComponentDefinition, sPrtPath As String)\nDim oFactory As iPartFactory = oCompDef.iPartFactory\n", "     Dim boolContinue As boolean = True", "     For Each oRow As iPartTableRow In oFactory.TableRows\n        Dim sPrtNum As String = oRow.memberName\n        iPart.ChangeRow(\"\", sPrtNum)\n\t\tYesNo(sPrtNum, sPrtPath, boolContinue)", "        If boolContinue = False Then", "            Exit Sub", "        End if", "\n\tNext\nEnd Sub\n\nPrivate Sub YesNo (sPrtNum As String, sPrtPath As String,", " ByRef boolContinue As Boolean", ")\nDim sPrtFldr As String = sPrtPath & \"\\\" & sPrtNum\nDim sPrtDwg As String = sPrtFldr & \"\\\" & sPrtNum & \".dwg\"\noMSG = MessageBox.Show(\"Create CNC?\" & vbLf & vbLf & \"Part Number: \" & sPrtNum & vbLf & vbLf & sPrtDwg & vbLf, \"Export to CNC\", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)\n\tIf oMSG = vbYes Then\n\t\tIf System.IO.Directory.Exists(sPrtFldr)\n\t\t\toMSG2 = MessageBox.Show(\"Existing folder found: \" & vbLf & vbLf & sPrtFldr & vbLf & vbLf & \"Overwrite existing folder?\" & vbLf, \"Existing Folder Found\", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)\n\t\t\t\tIf oMSG2 = vbYes Then\n\t\t\t\t\tSystem.IO.Directory.CreateDirectory(sPrtFldr)\n\t\t\t\t\tDim oPrt As PartDocument = ThisApplication.ActiveDocument\n\t\t\t\t\toPrt.SaveAs(sPrtDwg, True)\n\t\t\t\tElse If oMSG2 = vbCancel Then\n\t\t\t\t\t", "boolContinue = False", "\n\t\t\t\tEnd If\n\t\tElse\n\t\t\tSystem.IO.Directory.CreateDirectory(sPrtFldr)\n\t\t\tDim oPrt As PartDocument = ThisApplication.ActiveDocument\n\t\t\toPrt.SaveAs(sPrtDwg, True)\n\t\tEnd If\n\tElse If oMSG = vbCancel Then", "            ", "boolContinue = False", "        End If", "End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to build a standalone EXE for Inventor?\n                    ", "solution": [], "author": "mschillaci"},
{"created at": [], "solution Title": "\n                        Re: Highlight Part with iLogic\n                    ", "solution": ["Dim oAsmDoc As AssemblyDocument = ThisApplication.ActiveDocument\nDim oDoc As Document\n", "Dim oACD As AssemblyComponentDefinition", "oACD = oAsmDoc.ComponentDefinition", "Dim oSS As oAsmDoc.SelectSet", "oSS.Clear", "Dim objcoll As ObjectCollection", "objcoll = ThisApplication.TransientObjects.CreateObjectCollection", "\nFor Each oDoc In oAsmDoc.AllReferencedDocuments\n    If oDoc.DocumentType = kPartDocumentObject Then    \n        \n\t\tDim oPartDoc As PartDocument = oDoc\n\t\tDim model As String = oPartDoc.DisplayName\n\t\tmodel = model & \".ipt\"\n\t\t\n\t\t'Manipulate part    \n\t\t\t\n\t\t'Highlight part in question\n", "\t\tFor Each oOcc in oACD.Occurrences.AllReferencedOccurrences(oPartDoc)", "                    objcoll.Add(oOcc)", "                Next", "                oSS.SelectMultiple(objColl)", "\t ", "\n\t\tExcelFile = \"F:\\blablabla\\Stock Parts Prices.xlsx\"\n\t\t\t\n\t\tDim CostTypeRow As Integer = GoExcel.FindRow(ExcelFile, \"Sheet1\", \"Stock Type\", \"=\", iProperties.Value(model,\"Project\", \"Stock Number\"))\n\t\tDim CostType As String\n\t\t\t\n\t\tIf CostTypeRow = -1 Then\n\t\t\tCostType = \"NULL\"\n\t\tElseIf CostTypeRow > 0 Then\n\t\t\tCostType = GoExcel.CellValue(ExcelFile, \"Sheet1\", \"C\" & CostTypeRow)\n\t\t\t'Look up cost of that part\n\t\t\tCost = GoExcel.CellValue(ExcelFile, \"Sheet1\", \"B\" & CostTypeRow)\n\t\tEnd If\n\t\t\t\t\t\t\t\t\t\n\t\tIf \tCostType = \"POUND\" Then\t\n\t\t\t\n\t\t\tmass = iProperties.Mass(model)\n\t\t\tTotalCost = Cost * mass\n\t\t\tiProperties.Value(model,\"Project\", \"Estimated Cost\") = TotalCost\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tElse If CostType = \"INCH\" Then\n\t\t\t\t\n\t\t\t\tTry\n\t\t\t\t\tlength = Parameter(model, \"B_L\")\n\t\t\t\t\tMessageBox.Show(\"Detected Length = \" & Parameter(model, \"B_L\"), model)\n\t\t\t\tCatch\n\t\t\t\t\tlength = InputBox(\"Input length of part:\", iProperties.Value(model,\"Summary\", \"Title\") & \" \" & iProperties.Value(model,\"Project\", \"Stock Number\"), \"0\")\n\t\t\t\tEnd Try\n\t\t\t\t\n\t\t\tTotalCost = length * Cost\n\t\t\tiProperties.Value(model,\"Project\", \"Estimated Cost\") = TotalCost\n\t\t\t\t\t\t\t\n\t\tEnd If\n\t\t\t\t\t\n\tElse\n\t\n\tEnd If\n\t\nNext", "\nMessageBox.Show(\"Son\", \"Done\")", "oSS.Clear", "Dim oSS As oAsmDoc.SelectSet\noSS.Clear", "Dim oSS As SelectSet", "oSS = oAsmDoc.SelectSet\noSS.Clear"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Get/Create a unit vector from face-face proxy\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Read BOM Structure in Rule\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Adjusting Camera View to Workplane\n                    ", "solution": ["Sub Adjust_Camera(oWorkPlane As WorkPlane)\n            Dim oView As View = InventorApp.ActiveView\n            Dim oCamera As Camera = oView.Camera\n            'Vector from Normal\n            Dim oNormalEye As Inventor.Vector = oWorkPlane.Plane.Normal.AsVector\n            Dim oPosPoint As Point = Nothing\n            Dim oPosVectorX As UnitVector = Nothing\n            Dim oPosVectorY As UnitVector = Nothing\n            Try\n                oWorkPlane.GetPosition(oPosPoint, oPosVectorX, oPosVectorY)\n                'set camera Target to Root Point\n                oCamera.Target = oPosPoint\n                'set camera Eye by changing oPosPoint\n                oPosPoint.TranslateBy(oNormalEye)\n                oCamera.Eye = oPosPoint\n                oCamera.UpVector = oPosVectorY\n                'apply camera settings\n                oCamera.ApplyWithoutTransition()\n            Catch ex As Exception\n                MsgBox(\"Kamera Einstellung nicht erfolgreich\", vbCritical, \"Ausrichten nach Arbeitsebene\")\n            End Try\n        End Sub"], "author": "martin.winkler"},
{"created at": [], "solution Title": "\n                        Re: Looking for sample C# addin with button added to a ribbon panel\n                    ", "solution": [], "author": "martin.winkler"},
{"created at": [], "solution Title": "\n                        Re: ilogic automactly place parts list\n                    ", "solution": ["Dim", " ", "oDrawingDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawingDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    \n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " ", "=", " ", "oDrawingDoc", ".", "ActiveSheet", "\n\n", "'", "Detect if the template has a parts list", "\n", "Try", " \n", "Dim", " ", "oPartslistCheck", " ", "As", " ", "PartsList", "\n", "oPartslistCheck", " ", "=", " ", "oSheet", ".", "PartsLists", "(", "1", ")", "\n", "partslistpresent", "=", "True", "\n", "Catch", "\n", "partslistpresent", "=", "False", "\n", "End", " ", "Try", "\n\n", "If", " ", "partslistpresent", "=", "True", "\n        \n        ", "'", "Delete the current parts list", "\n        ", "Dim", " ", "oPartsList", " ", "As", " ", "PartsList", "\n        ", "oPartsList", " ", "=", " ", "oDrawingDoc", ".", "ActiveSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", "\n        ", "oPartsList", ".", "Delete", "\n        \n", "End", " ", "If", "\n                \n    ", "'", " Set a reference to the first drawing view on", "\n    ", "'", " the sheet. This assumes the first drawing", "\n    ", "'", " view on the sheet is not a draft view.", "\n    ", "Dim", " ", "oDrawingView", " ", "As", " ", "DrawingView", "\n    ", "oDrawingView", " ", "=", " ", "oSheet", ".", "DrawingViews", "(", "1", ")", "\n    \n    ", "'", " Set a reference to the sheet's border", "\n    ", "Dim", " ", "oBorder", " ", "As", " ", "Border", "\n    ", "oBorder", " ", "=", " ", "oSheet", ".", "Border", "\n    \n    ", "Dim", " ", "oPlacementPoint", " ", "As", " ", "Point2d", "\n    \n        ", "xrev", " ", "=", " ", "oBorder", ".", "RangeBox", ".", "MaxPoint", ".", "X", "\n        ", "yrev", " ", "=", " ", "oBorder", ".", "RangeBox", ".", "MaxPoint", ".", "Y", "\n        \n        ", "oPlacementPoint", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "xrev", ", ", "yrev", ")", "\n        \n    ", "'", " Create the parts list.", "\n    ", "Dim", " ", "oPartsList1", " ", "As", " ", "PartsList", "\n    ", "oPartsList1", " ", "=", " ", "oSheet", ".", "PartsLists", ".", "Add", "(", "oDrawingView", ", ", "oPlacementPoint", ")", "\n", "oPartsLis1t", " ", "=", " ", "oDrawingDoc", ".", "ActiveSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", "\n\n\n", "oPartsList1", ".", "Sort", "(", "\"", "PART NUMBER", "\"", ")", "\n", "oPartsList1", ".", "Renumber", "\n\n", "oPartsList1", ".", "Style", ".", "UpdateFromGlobal", " \n", "'Switch style back and forth to ensure style is up-to-date    \n    ", "oPartsList1", ".", "Style", " ", "=", " ", "oDrawingDoc", ".", "StylesManager", ".", "PartsListStyles", ".", "Item", "(", "\"", "Parts List (ANSI)", "\"", ")", "\n    ", "oPartsList1", ".", "Style", " ", "=", " ", "oDrawingDoc", ".", "StylesManager", ".", "PartsListStyles", ".", "Item", "(", "\"", "Parts List (ISO)", "\"", ")", "\n\n", "InventorVb", ".", "DocumentUpdate", "()", "\n\n"], "author": "waynehelley"},
{"created at": [], "solution Title": "\n                        Re: WorkPoints AddWorkPointByPlaneAndAxis?\n                    ", "solution": ["        // Get the proxy of the axis\n        CComPtr<WorkAxisProxy> pNodeWAZProxy ;\n        ZAxisArray[1]->get_Item(2,(IDispatch**)&pNodeWAZProxy);\n\n        CComPtr<TransientGeometry> pTransGeom = theApp.GetTransGeomPtr () ;    \n\n        LinePtr pLine = pNodeWAZProxy->GetLine();\n        PointPtr pLineRoot = pLine->GetRootPoint();\n        UnitVectorPtr pLineDir = pLine->GetDirection();\n        CComPtr <Vector> pvecDir  ;\n        hRes = pLineDir->AsVector(&pvecDir);\n        if (FAILED(hRes)) {\n            gLogger.Printf(ekErrMsg, \"Could not get AsVector\");\n            return;\n        }\n\n        CComPtr <Line> pZAxis;\n        hRes = pTransGeom->CreateLine  (pLineRoot,pvecDir,&pZAxis);\n        if (FAILED(hRes)) {\n            gLogger.Printf(ekErrMsg, \"Could not CreateLine\");\n            return;\n        }\n\n        CComPtr<Point> pOrigin;\n        CComPtr<Point> p1;\n        CComPtr<Point> p2;\n\n        pTransGeom->CreatePoint(0, 0, 0, &pOrigin);\n        pTransGeom->CreatePoint(1, 0, 0, &p1);\n        pTransGeom->CreatePoint(0, 1, 0, &p2);\n\n        CComPtr<Plane> pGeomXYPlane;\n        hRes = pTransGeom->CreatePlaneByThreePoints(pOrigin, p1, p2, &pGeomXYPlane);\n        if (FAILED(hRes)) {\n            gLogger.Printf(ekErrMsg, \"Could not CreatePlane\");\n            return;\n        }\n\n        CComPtr <ObjectsEnumerator> pObjEnum;\n        hRes = pTransGeom->CurveSurfaceIntersection(pZAxis, pGeomXYPlane, 0.1, &pObjEnum);\n        if (FAILED(hRes)) {\n            gLogger.Printf(ekErrMsg, \"Could not surface intersection\");\n            return;\n        }\n\n        TRACE (\"There are %d intersections...\\n\",pObjEnum->Count);\n\n        if (pObjEnum->Count < 1) {\n            gLogger.Printf(ekErrMsg, \"No intersections found...\");\n            return;\n        }\n\n        CComPtr <Point> pIntersectionPoint;\n        hRes = pObjEnum->get_Item(1,(IDispatch**)&pIntersectionPoint);\n        if (FAILED(hRes)) {\n            gLogger.Printf(ekErrMsg, \"Could not get intersection point\");\n            return;\n        }\n\n        TRACE(\"Intersection at %.2f %.2f %.2f \\n\",\n              pIntersectionPoint->GetX(),\n              pIntersectionPoint->GetY(),\n              pIntersectionPoint->GetZ());\n\n        CComPtr<WorkPoints> pWorkPoints;\n        hRes =pAssemblyCompDef->get_WorkPoints(&pWorkPoints);\n        if (FAILED(hRes)) {\n            gLogger.Printf(ekErrMsg, \"Could not get work points\");\n            return;\n        }\n\n        CComPtr <WorkPoint> pInterWorkPoint;\n        pWorkPoints->AddFixed (pIntersectionPoint,FALSE,&pInterWorkPoint);\n        if (FAILED(hRes)) {\n            gLogger.Printf(ekErrMsg, \"AddFixed point failed\");\n            return;\n        }\n\n        CComBSTR bstrPointName(\"ZeroPoint\");\n        hRes = pInterWorkPoint->put_Name(bstrPointName);\n        if (FAILED(hRes)) {\n            gLogger.Printf(ekErrMsg, \"AddFixed point failed\");\n            return;\n        }\n"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Full Document Automatic Update iLogic\n                    ", "solution": [], "author": "nathankopilec"},
{"created at": [], "solution Title": "\n                        Re: Transformation.Translation doesn't match IProperties?\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: need helping searching thru multiple lists...\n                    ", "solution": ["Sub Main()", "    SetClassificationParam(\"MTL56\")", "End Sub", "Sub SetClassificationParam(oSearchVal As String)\n\n'oList1 will be named \"Motor list\"\nDim oList1 As New List(of String)\noList1.Add(\"MTL56\")\noList1.Add(\"MTL72\")\n\nDim oList2 As New List(of String)\noList2.Add(\"MTL23\")\noList2.Add(\"MTL24\")\n\n\nIf oList1.Contains(oSearchVal)\n    oReturnParam = \"Motor List\")\nElse if oList2.Contains(oSearchVal)\n    oReturnParam = \"Chassis List\"\nEnd if\n\nParam.Partemer(\"Classification\") = oReturnParam\n\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: PROBLEMS USING MULTIPLE ThisBOM.OverrideQuantity\n                    ", "solution": [], "author": "cameron.frederi"},
{"created at": [], "solution Title": "\n                        Betreff: ifeature for gills\n                    ", "solution": [], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: Unfold sheet metal VB\n                    ", "solution": ["Dim oDoc As Inventor.PartDocument = ThisApplication.ActiveDocument\nIf oDoc.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Exit Sub\nDim oSMCD As Inventor.SheetMetalComponentDefinition = oDoc.ComponentDefinition\nIf Not oSMCD.HasFlatPattern Then\n    oSMCD.Unfold()\n    oDoc.Update2(True)\nElse\n    oSMCD.FlatPattern.Edit()\nEnd If"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: There is no DefaultBorder object in a DrawingDocument: true or false?\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: I cant access every Edge/Face through the API, is that right?\n                    ", "solution": ["Dim myEdge as Edge\nSet myEdge = Edges(1022)"], "author": "Patrick1323"},
{"created at": [], "solution Title": "\n                        Re: Objectcollection of selected sketch entitites\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Multiple - Ole Break, Save and Close\n                    ", "solution": ["Public Sub OLEdelete_Save_Close()", "   Dim ref As ReferencedOLEFileDescriptor\n   Dim j As Integer = 1\n   For j = 1 To ThisApplication.Documents.Count\n      ThisApplication.Documents.Item(j).Activate\n      For Each ref In ThisApplication.ActiveDocument.ReferencedOLEFileDescriptors\n          ref.delete\n      Next\n      ThisApplication.ActiveDocument.Save2 (True)\n   Next\n   ThisApplication.Documents.CloseAll\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: BOM Qty\n                    ", "solution": ["Sub Main\n    If ThisDoc.Document.DocumentType <> kAssemblyDocumentObject Then MsgBox(\"Rule only valid in assembly files!\"): Exit Sub\n    If ThisDoc.Document.FullFileName = \"\" Then MsgBox(\"GA Not Saved yet!\" & vbLf & vbLf & \"Aborting!\"): Exit Sub\n    \n    Dim oGADoc As AssemblyDocument\n    oGADoc = ThisDoc.Document\n    \n    BatchQTY = InputBox(\"ENTER TOTAL QTY REQUIRED OF GA\", \"GA QTY\", \"\")\n   ", " iProperties.Value(\"Custom\", \"QTY REQUIRED\") = BatchQTY", "\n    \n    Dim oBOM As BOM\n     oBOM = oGADoc.ComponentDefinition.BOM\n\n    With oBOM\n        .PartsOnlyViewEnabled = True\n        .StructuredViewEnabled = True\n        .StructuredViewFirstLevelOnly = False\n    End With\n    \n    Call PurgeBatchQTY(oGADoc)\n    \n    Dim oBOMViewPO As BOMView = oBOM.BOMViews.Item(\"Parts Only\")\n    Call SetBatchPartQTYs(oBOMViewPO, BatchQTY)\n    \n    Dim oBOMViewStruc As BOMView = oBOM.BOMViews.Item(\"Structured\")\n    Call SetBatchAssemblyQTYs(oBOMViewStruc.BOMRows, BatchQTY)\n\nEnd Sub\n\nSub PurgeBatchQTY(oDoc As Document)\n    For Each oSubDoc in oDoc.AllReferencedDocuments\n        If oSubDoc.IsModifiable = True Then\n            iProperties.Value(System.IO.Path.GetFileName(oSubDoc.FullFileName), \"Custom\", \"QTY REQUIRED\") = 0\n        End If\n    Next\nEnd Sub\n\nSub SetBatchPartQTYs(ByVal oBOMViewPO As BOMView, ByVal BatchQTY As Integer)\n\n    For Each oBOMRowPO In oBOMViewPO.BOMRows\n        oCompDef = oBOMRowPO.ComponentDefinitions.Item(1)\n        oRowDoc = oCompDef.Document\n        \n        Dim Qty As Integer = oBOMRowPO.TotalQuantity\n        \n        If oRowDoc.IsModifiable = True Then\n            iProperties.Value(System.IO.Path.GetFileName(oRowDoc.FullFileName), \"Custom\", \"QTY REQUIRED\") = Qty * BatchQTY\n        End If\n    Next\n    \nEnd Sub\n\nPrivate Sub SetBatchAssemblyQTYs(oBOMRows As BOMRowsEnumerator, oParentQty As Integer)\n    \n    Dim oQty As Integer\n    \n    For Each oBOMRowStruct In oBOMRows\n        oCompDef = oBOMRowStruct.ComponentDefinitions.Item(1)\n        oRowDoc = oCompDef.Document\n        \n        'Single line Check + Continues:\n        If Not (TypeOf oCompDef Is AssemblyComponentDefinition And oCompDef.BOMStructure = BOMStructureEnum.kNormalBOMStructure) Then Continue For\n        If oRowDoc.IsModifiable = False Then Continue For\n        'Resume functionality\n        \n        oQty = oBOMRowStruct.ItemQuantity * oParentQty\n            \n        iProperties.Value(System.IO.Path.GetFileName(oRowDoc.FullFileName), \"Custom\", \"QTY REQUIRED\") = oQty + iProperties.Value(System.IO.Path.GetFileName(oRowDoc.FullFileName), \"Custom\", \"QTY REQUIRED\")\n            \n        If Not (oBOMRowStruct.ChildRows Is Nothing) Then\n            Call SetBatchAssemblyQTYs(oBOMRowStruct.ChildRows, oQty)\n        End If\n    Next\nEnd Sub "], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Inventor API/VBA/I-logic modify loft feature\n                    ", "solution": [], "author": "josiahmorgan"},
{"created at": [], "solution Title": "\n                        Re: Create an Array List and populate it with a known Cell Range from Excel\n                    ", "solution": ["Dim", " ", "Reference_File", " ", "As", " ", "String", "\n\n", "Reference_File", "=", " ", "\"", "E:\\Engineering Projects\\Project A\\Excel Control\\Purchased Components.xlsm", "\"", "\n\n", "Dim", " ", "Row_Start", " ", "As", " ", "Integer", " ", "=", " ", "41", "\n", "Dim", " ", "Row_End", " ", "As", " ", "Integer", " ", "=", " ", "55", "\n\n\n", "Dim", " ", "Array", " ", "As", " ", "New", " ", "ArrayList", " \n", "Array", " ", "=", " ", "GoExcel", ".", "CellValues", "(", "Reference_File", ", ", "\"", "S Series", "\"", ", ", "\"", "B", "\"", " ", "&", " ", "Row_Start", "  ,  ", "\"", "B", "\"", " ", "&", " ", "Row_End", ")", "\n\n\n\n", "MessageBox", ".", "Show", "(", "Array", ".", "item", "(", "3", ")", ", ", "\"", "Title", "\"", ") ", "\u00a0"], "author": "crojasNB2ET"},
{"created at": [], "solution Title": "\n                        Re: Placing a drawing using iLogic\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Finding a matching cell to a string, then setting a new range by using count\n                    ", "solution": ["GoExcel", ".", "Open", "(", "Excel_Reference_File", ", ", "Worksheet", " ", ")", "\n", "Dim", " ", "Row", " ", "As", " ", "Integer", "\n", "Dim", " ", "StartRow1", " ", "As", " ", "Integer", " ", "=", " ", "1", "\n", "Dim", " ", "EndRow1", " ", "As", " ", "Integer", " ", "=", " ", "100", "\n", "Dim", " ", "Row1", " ", "As", " ", "Integer", "\n", "Dim", " ", "Row2", " ", "As", " ", "Integer", "\n", "Dim", " ", "n", " ", "As", " ", "Integer", "\n\n", "For", " ", "Row1", " ", "=", " ", "StartRow1", " ", "To", " ", "EndRow1", "\n", "If", "(", "GoExcel", ".", "CellValue", "(", "\"", "A", "\"", " ", "&", " ", "Row1", "))", " ", "=", " ", "ThisFileName", " ", "Then", "\n", "'", "MessageBox.Show(\"Found Pipes on Row:\" & Row1 , \"Row Found\")", "\n", "Exit", " ", "For", "\n", "End", " ", "If", "\n", "Next", "\n\n\n", "Dim", " ", "StartRow2", " ", "As", " ", "Integer", " ", "=", " ", "Row1", " ", "+", " ", "1", "\n", "Dim", " ", "EndRow2", " ", "As", " ", "Integer", " ", "=", " ", "StartRow2", " ", "+", " ", "50", "\n", "'", "MessageBox.Show(\"Start Range : \" & StartRow2 & vbCr & \"End Range : \" & EndRow2  , \"Test\")", "\n", "For", " ", "n", " ", "=", " ", "StartRow2", " ", "To", " ", "EndRow2", "\n", "If", " ", "String", ".", "IsNullOrEmpty", "(", "GoExcel", ".", "CellValue", "(", "\"", "B", "\"", " ", "&", " ", "n", "))", " ", "Then", "\n", "Row2", " ", "=", " ", "n", " ", "-", " ", "1", "\n", "'", "MessageBox.Show(\"End of Range is : \" &  Row2 , \"Test\")", "\n", "Exit", " ", "For", "\n", "End", " ", "If", "\n", "Next"], "author": "crojasNB2ET"},
{"created at": [], "solution Title": "\n                        Re: ilogic Rule for \"update properties\"\n                    ", "solution": ["Dim updateCmd As ControlDefinition\nupdateCmd = ThisApplication.CommandManager.ControlDefinitions.Item(\"VaultPropertyWriteBack\")\nupdateCmd.Execute\n\nDim oKCmd As ControlDefinition\noKCmd = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppContextual_OKCmd\")\noKCmd.Execute"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: ilogic Rule for \"update properties\"\n                    ", "solution": ["Dim updateCmd As ControlDefinition\nupdateCmd = ThisApplication.CommandManager.ControlDefinitions.Item(\"VaultPropertyWriteBack\")\nupdateCmd.Execute\n\nDim oKCmd As ControlDefinition\noKCmd = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppContextual_OKCmd\")\noKCmd.Execute"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Betreff: I logic rule for flatpaterns\n                    ", "solution": ["oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n'get DXF target folder path\noFolder = oPath & \"\\\" & oAsmName & \" DXF Files\"\n'Check for the DXF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\nSystem.IO.Directory.CreateDirectory(oFolder)\nEnd If\n'- - - - - - - - - - - - -\n'- - - - - - - - - - - - -Component - - - - - - - - - - - -\n'look at the files referenced by the assembly\nDim oRefDocs As DocumentsEnumerator\noRefDocs = oAsmDoc.AllReferencedDocuments\nDim oRefDoc As Document\n'work the the drawing files for the referenced models\n'this expects that the model has been saved\nFor Each oRefDoc In oRefDocs\niptPathName = Left(oRefDoc.FullDocumentName, Len(oRefDoc.FullDocumentName) - 3) & \"ipt\"\n'check that model is saved\nIf(System.IO.File.Exists(iptPathName)) Then\nDim oDrawDoc As PartDocument\noDrawDoc = ThisApplication.Documents.Open(iptPathName, True)\noFileName = Left(oRefDoc.DisplayName, Len(oRefDoc.DisplayName))\nTry\n'Set the DXF target file name\n\nTry\nCustomName =iProperties.Value(oFileName, \"Custom\", \"PF_PRT_ZNR\")\nCatch\nCustomName =\"XXX\" 'Wert, wenn iPropertie PF_PRT_ZNR nicht existiert\nEnd Try\n\noDataMedium.FileName = oFolder & \"\\\" & CustomName  & \" \" & oFileName & \".dxf\"\n\nDim oCompDef As SheetMetalComponentDefinition\noCompDef = oDrawDoc.ComponentDefinition\nIf oCompDef.HasFlatPattern = False Then\noCompDef.Unfold\nElse\noCompDef.FlatPattern.Edit\nEnd If\nDim sOut As String\nsOut = \"FLAT PATTERN DXF?AcadVersion=2004&OuterProfileLayer=IV_OUTER_PR\u200bOFILE\"\noCompDef.DataIO.WriteDataToFile( sOut, oDataMedium.FileName)\n'just for check its works coretcly\n'i=MessageBox.Show(oDataMedium.FileName, \"Title\",MessageBoxButtons.OKCancel)\n'MessageBox.Show(i,\"title\",MessageBoxButtons.OK)\n'If i=2 Then\n'Exit Sub\n'End If\noCompDef.FlatPattern.ExitEdit\nCatch\nEnd Try\noDrawDoc.Close\nElse\nEnd If\nNext", "    Dim oDoc As PartDocument\n\n    oDoc = ThisApplication.ActiveDocument\n\n \n\n    Dim oCompDef As SheetMetalComponentDefinition\n\n    oCompDef = oDoc.ComponentDefinition\n\n \n\n    If oCompDef.HasFlatPattern = False Then\n\n        oCompDef.Unfold\n\n    Else\n\n        oCompDef.FlatPattern.Edit\n\n    End If\n\n \n\n    Dim sOut As String\n\n      If ExportInner = True Then\n\n          sOut = \"FLAT PATTERN DXF?AcadVersion=2004&OuterProfileLayer=IV_INTERIOR_PROFILES\"\n\n      Else\n\n      sOut = \"FLAT PATTERN DXF?AcadVersion=2004&OuterProfileLayer=IV_OUTER_PROFILE\"\n\n      End If\n\n \n\n    ' Get document's full file name\n\n    Dim sFname As String\n\n    sFname = oDoc.FullFileName\n\n \n\n    ' The file format will depend on the extension\n\n    ' Set file name extension to \".DXF\"\n\n    sFname = Left$(sFname, Len(sFname) - 3) & \"dxf\"\n\n \n\n    oCompDef.DataIO.WriteDataToFile( sOut, sFname)\n\n \n\nEnd Sub"], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: Run Rule Only When File Containing Rule Is The Active Document\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nIf oDoc.DocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then\nExit Sub\nElse", "Dim oDoc As Document = ThisApplication.ActiveDocument\nIf Not oDoc Is ThisDoc.Document Then Exit Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Counting tapped holes\n                    ", "solution": ["Sub", " ", "Main", "\n", "Dim", " ", "oApp", " ", "As", " ", "Application", "\n", "Dim", " ", "oPD", " ", "As", " ", "PartDocument", "\n", "Dim", " ", "oPCD", " ", "As", " ", "PartComponentDefinition", "\n", "Dim", " ", "oFeats", " ", "As", " ", "PartFeatures", "\n", "Dim", " ", "oHole", " ", "As", " ", "HoleFeature", "\n", "Dim", " ", "oRecPat", " ", "As", " ", "RectangularPatternFeature", "\n", "Dim", " ", "oCirPat", " ", "As", " ", "CircularPatternFeature", "\n", "Dim", " ", "oParentFeat", " ", "As", " ", "PartFeature", "\n", "Dim", " ", "oHoleInPat", " ", "As", " ", "HoleFeature", "\n", "Dim", " ", "oCheckHole", " ", "As", " ", "HoleFeature", "\n", "Dim", " ", "ObjCol1", " ", "As", " ", "ObjectCollection", "\n\n", "oApp", " = ", "ThisApplication", "\n", "oPD", " = ", "oApp", ".", "ActiveDocument", "\n", "oPCD", " = ", "oPD", ".", "ComponentDefinition", "\n", "oFeats", " = ", "oPCD", ".", "Features", "\n", "ObjCol1", " = ", "oApp", ".", "TransientObjects", ".", "CreateObjectCollection", "\n\n", "For", " ", "Each", " ", "oRecPat", " ", "In", " ", "oFeats", ".", "RectangularPatternFeatures", "\n\t", "oParentFeat", " = ", "oRecPat", ".", "ParentFeatures", ".", "Item", "(1)\n\t", "If", " ", "oParentFeat", ".", "Type", " = ", "ObjectTypeEnum", ".", "kHoleFeatureObject", " ", "Then", "\n\t\t", "oHoleInPat", " = ", "oParentFeat", "\n\t\t", "If", " ", "oHoleInPat", ".", "Tapped", " = ", "True", " ", "Then", "\n\t\t\t", "Call", " ", "ObjCol1", ".", "Add", "(", "oRecPat", ")\n\t\t", "End", " ", "If", "\n\t", "End", " ", "If", "\n", "Next", "\n\n", "For", " ", "Each", " ", "oCirPat", " ", "In", " ", "oFeats", ".", "CircularPatternFeatures", "\n\t", "oParentFeat", " = ", "oCirPat", ".", "ParentFeatures", ".", "Item", "(1)\n\t", "If", " ", "oParentFeat", ".", "Type", " = ", "ObjectTypeEnum", ".", "kHoleFeatureObject", " ", "Then", "\n\t\t", "oHoleInPat", " = ", "oParentFeat", "\n\t\t", "If", " ", "oHoleInPat", ".", "Tapped", " = ", "True", " ", "Then", "\n\t\t\t", "Call", " ", "ObjCol1", ".", "Add", "(", "oCirPat", ")\n\t\t", "End", " ", "If", "\n\t", "End", " ", "If", "\n", "Next", "\n\n", "For", " ", "Each", " ", "oHole", " ", "In", " ", "oFeats", ".", "HoleFeatures", "\n\t", "If", " ", "oHole", ".", "Tapped", " = ", "True", " ", "Then", "\n\t\t", "Call", " ", "ObjCol1", ".", "Add", "(", "oHole", ")\n\t", "End", " ", "If", "\n", "Next", "\n\n", "Dim", " ", "CountHole", " ", "As", " ", "Double", "\n", "Call", " ", "GetCount", "(", "ObjCol1", ", ", "CountHole", ")\n\n", "MsgBox", " (", "CountHole", ")\n\n", "End", " ", "Sub", "\n\n", "Sub", " ", "GetCount", "(", "ByVal", " ", "ObjCol1", " ", "As", " ", "ObjectCollection", ", ", "ByRef", " ", "CountHole", " ", "As", " ", "Double", ")\n", "For", " ", "i", " = 1 ", "To", " ", "ObjCol1", ".", "Count", "\n\t", "On", " ", "Error", " ", "Resume", " ", "Next", "\n\t", "If", " ", "ObjCol1", ".", "Item", "(", "i", ").", "Type", " = ", "ObjectTypeEnum", ".", "kHoleFeatureObject", " ", "Then", "\n\t\t", "For", " ", "Each", " ", "itemrec", " ", "In", " ", "ObjCol1", "\n\t\t\t", "If", " ", "itemrec", ".", "Type", " = ", "ObjectTypeEnum", ".", "kRectangularPatternFeatureObject", " ", "Or", " ", "itemrec", ".", "Type", " = ", "ObjectTypeEnum", ".", "kCircularPatternFeatureObject", " ", "Then", "\n\t\t\t\t", "If", " ", "ObjCol1", ".", "Item", "(", "i", ").", "Name", " = ", "itemrec", ".", "ParentFeatures", ".", "Item", "(1).", "Name", " ", "Then", "\n\t\t\t\t\t", "Call", " ", "ObjCol1", ".", "Remove", "(", "i", ")\n\t\t\t\t", "End", " ", "If", "\n\t\t\t", "End", " ", "If", "\n\t\t", "Next", "\n\t", "End", " ", "If", "\n", "Next", "\n\n", "CountHole", " = 0\n", "For", " ", "Each", " ", "Item", " ", "In", " ", "ObjCol1", "\n\t", "If", " ", "Item", ".", "Type", " = ", "ObjectTypeEnum", ".", "kRectangularPatternFeatureObject", " ", "Or", " ", "Item", ".", "Type", " = ", "ObjectTypeEnum", ".", "kCircularPatternFeatureObject", " ", "Then", "\n\t\t", "CountHole", " = ", "CountHole", " + ", "Item", ".", "PatternElements", ".", "Count", "\n\t\t", "ElseIf", " ", "Item", ".", "Type", " = ", "ObjectTypeEnum", ".", "kHoleFeatureObject", " ", "Then", "\n\t\t", "CountHole", " = ", "CountHole", " + 1\n\t", "End", " ", "If", "\n", "Next", "\n", "End", " ", "Sub"], "author": "dgreatice"},
{"created at": [], "solution Title": "\n                        Re: Color overriding via paramerter list\n                    ", "solution": ["If", " ", "Colour", " ", "=", " ", "\"", "Red", "\"", " ", "Then", "\n    ", "Component", ".", "Color", "(", "\"", "Part1:1", "\"", ")", " ", "=", " ", "\"", "Red", "\"", "\n    ", "Component", ".", "Color", "(", "\"", "Part2:1", "\"", ")", " ", "=", " ", "\"", "Red", "\"", "\n", "ElseIf", " ", "Colour", " ", "=", " ", "\"", "Blue", "\"", "\n    ", "Component", ".", "Color", "(", "\"", "Part1:1", "\"", ")", " ", "=", " ", "\"", "Blue", "\"", "\n    ", "Component", ".", "Color", "(", "\"", "Part2:1", "\"", ")", " ", "=", " ", "\"", "Blue", "\"", "\n", "End", " ", "If", "\n"], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Save As not working\n                    ", "solution": ["Sub Main()\n\tDim row As Integer = 3 'the 2nd row in excel is the template information\n\tDim CellVal As String = \"Part\"\n\t\n\tGoExcel.Open(ExcelFile, SheetName)\n\t\n\toActiveDoc = ThisDoc.Document\n\tDim path As String = oActiveDoc.Path & \"\\\"\n\t\n\tDim columnLetter As String = \"A\"\n\tCellVal = GoExcel.CellValue(columnLetter & row)\n\t\n\tDo Until CellVal = \"\"\n\t\tGeneratenewFile(CellVal) 'read the excel value\n\t\trow=row+1\n\t\tCellVal = GoExcel.CellValue(columnLetter & row)\n\tLoop\n\nEnd Sub\n\nDim oActiveDoc As Document\n\n\tSub GenerateNewFile(CellVal)\n\t\t'this function reads in the values from excel\n\t\t\n\t\ti = GoExcel.FindRow(ExcelFile, SheetName, \"Part\", \"=\", CellVal) 'find the row with the part name\n\t\t\n\t\t'get values corresponding to that part name\n\t\toActiveDoc.ComponentDefinition.Paramters(\"Width\").Expression = GoExcel.CurrentRowValue(\"Width\")\n\t\toActiveDoc.ComponentDefinition.Paramters(\"Left_Angle\").Expression = GoExcel.CurrentRowValue(\"Left Angle\")\n\t\toActiveDoc.ComponentDefinition.Paramters(\"Right_Angle\").Expression = GoExcel.CurrentRowValue(\"Right Angle\")\n\t\t\n\t\tiLogicVb.UpdateWhenDone = True\n\t\tInventorVb.DocumentUpdate()\n\t\toActiveDoc.SaveAs(NewPath & CellVal & \".ipt\", True)\n\tEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Grab similar geometry of different occurrence of same part\n                    ", "solution": ["Public Sub dupeconstraintexample()\n    Dim AC1 As AssemblyConstraint\n    Dim NewOcc1 As ComponentOccurrence\n    Dim NewOcc2 As ComponentOccurrence\n    Dim E1Proxy As Object\n    Dim E2Proxy As Object\n    Set AC1 = ThisApplication.ActiveDocument.ComponentDefinition.Constraints.Item(1) 'Insert between Occurrences.Item(1) and Item(2)\n    Set NewOcc1 = ThisApplication.ActiveDocument.ComponentDefinition.Occurrences.Item(3) 'copy of Item(1)\n    Set NewOcc2 = ThisApplication.ActiveDocument.ComponentDefinition.Occurrences.Item(4) 'copy of Item(2)\n    Call NewOcc1.CreateGeometryProxy(GetProxy(AC1.EntityOne, NewOcc1), E1Proxy)\n    Call NewOcc2.CreateGeometryProxy(GetProxy(AC1.EntityTwo, NewOcc2), E2Proxy)\n    Call ThisApplication.ActiveDocument.ComponentDefinition.Constraints.AddInsertConstraint(E1Proxy, E2Proxy, AC1.AxesOpposed, AC1.Distance.Value)\nEnd Sub\n\nPrivate Function GetProxy(ByRef Prxy As Object, ByRef ContOcc As ComponentOccurrence) As Object\n    If Prxy.ContainingOccurrence.Type = kComponentOccurrenceObject Then\n        Set Occ = ContOcc\n    Else\n        Set Occ = ContOcc.Definition.Occurrences.ItemByName(Prxy.ContainingOccurrence.Name)\n    End If\n    Call Occ.CreateGeometryProxy(Prxy.NativeObject, GetProxy)\nEnd Function"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Loop through all sheets\n                    ", "solution": ["Sub Main()\n    oDrawDoc = ThisApplication.ActiveDocument\n    oLayer = oDrawDoc.StylesManager.Layers.Item(\"test\")\n\n    For Each oSheet in oDrawDoc.Sheets\n        ProcessSheet(oSheet)\n    Next\n\n    oDrawDoc.Update\nEnd Sub\n\nDim oDrawDoc As DrawingDocument\nDim oLayer As Layer\n\nSub ProcessSheet(oSheet As Sheet)\n\n    Dim oDrawingView As DrawingView\n    Dim oDrawingSketch As DrawingSketch\n    Dim oSketchEntity As SketchEntity\n \n    For Each oDrawingView In oSheet.DrawingViews\n       For Each oDrawingSketch In oDrawingView.Sketches\n           If oDrawingSketch.Name = \"Workpiece Size\" Then\n               oDrawingSketch.Edit\n\n               For Each oSketchEntity In oDrawingSketch.SketchEntities\n                   oSketchEntity.Layer = oLayer\n               Next\n\n               oDrawingSketch.ExitEdit\n           End If\n       Next\n    Next\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: how to replace Model Reference in .idw file.\n                    ", "solution": ["Sub Test()\n    Call ReplaceFileReference(ThisDoc.Document, \"C:\\PartA.ipt\", \"C:\\PartB.ipt\")\nEnd Sub\n\nSub ReplaceFileReference(oDoc as Document, oRefToRemove As String, oRefToInclude As String)\n    For Each oFD In oDoc.File.ReferencedFileDescriptors\n        If oFD.FullFileName = oRefToRemove\n             oFD.ReplaceReference(oRefToInclude)\n        End if\n    Next\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: ilogic Rule\n                    ", "solution": ["iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "User Name", "\"", ")", " ", "=", " ", "ThisApplication", ".", "GeneralOptions", ".", "UserName"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Visual Studio Community 2017 not working\n                    ", "solution": [], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re: ilogic rule for placing the Vault-Revision table on a Inventor-drawing\n                    ", "solution": ["Dim oDrawingDoc As DrawingDocument\noDrawingDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\noSheet = oDrawingDoc.ActiveSheet\n\nDim oTablePt As Point2d\noTablePt = ThisApplication.TransientGeometry.CreatePoint2d((oSheet.Width - 17), 3)\n\nIf oSheet.RevisionTables.Count = 0 Then\n    Dim oRevTable As RevisionTable\n    oRevTable = oSheet.RevisionTables.Add(oTablePt)\n\t\nElse\n    MessageBox.Show(\"Revision Table already exist\", \"Autodesk Inventor\")\nEnd If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Linq in iLogic - missing reference?\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic-Rule to change titleblocks on drawings\n                    ", "solution": ["Dim oDoc As DrawingDocument = ThisApplication.ActiveDocument\nIf oDoc.ActiveSheet.TitleBlock.Definition.Name = \"AMT-Title-05\" Then Exit Sub\n\n", "' Get the source document.", "\nDim oSD As DrawingDocument = ThisApplication.Documents.Open(", "\"G:\\CAD\\2016\\Templates_INV\\Standard w rev table.dwg\"", ", False)\n\n", "' Get the source title block definition.", "\nDim oSTBD As TitleBlockDefinition = oSD.Sheets(1).TitleBlock.Definition\n\n", "' Get the title block definition.", "\nDim oNTBD As TitleBlockDefinition = oSTBD.CopyTo(oDoc)\n\noSD.Close()\n\n", "' Iterate through the sheets.", "\nFor Each oSheet As Sheet In oDoc.Sheets\n    Dim FNP As Integer = InStrRev(oSheet.Name, \":\", -1)\n    Dim oName As String = Left(oSheet.Name, FNP -1)\n    If oName.EndsWith(", "\"Z\"", ") Then Continue For\n    If oSheet.TitleBlock IsNot Nothing Then oSheet.TitleBlock.Delete()\n    Call oSheet.AddTitleBlock(oNTBD)\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: VBA userform to edit parameters\n                    ", "solution": ["Private Sub CommandButton1_Click()\n' Get the Parameters object.  Assumes a part or assembly document is active.\n    Dim oParameters As Parameters\n    Set oParameters = ThisApplication.ActiveDocument.ComponentDefinition.Parameters\n\n    ' Get the parameter named \"Length\".\n    Dim oParameter As Parameter\n    Set oParameter = oParameters.Item(\"Trinse_1\")\n    \n    If oParameter.Type = kDerivedParameterObject Then\n        Dim oDerivedPar As DerivedParameter\n        Set oDerivedPar = oParameter\n        oDerivedPar.ReferencedEntity.Expression = TextBox1.Text\n    Else\n        oParameter.Expression = TextBox1.Text\n    End If\n\n    ' Update the document.\n    Call ThisApplication.ActiveDocument.Update\n\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Ilogic adding custom Properties to Content center files\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Can the \"Data Format Has Changed\" prompt be suppressed?\n                    ", "solution": ["ThisApplication.SilentOperation = True\nTry\n    ", "'Your saving code here", "\nCatch\nEnd Try\nThisApplication.SilentOperation = False", "...\nCatch ex As Exception\n    MsgBox(ex.Message)\nEnd Try"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Rename work planes/axis in 2018?\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Place model position numbers in drawing view label\n                    ", "solution": ["' Set a reference to the drawing document.\n' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\n'view selection code\nDim oSSet As SelectSet = ThisDoc.Document.SelectSet\nIf oSSet.count = 0 Then\n\tMessageBox.Show(\"You must select a drawing view first\", \"iLogic\")\nExit Sub\nEnd If\n\n\n'start processsing all selections\nDim oView As DrawingView\n'Dim i As Long\n'For i = 1 To oSSet.Count\nFor Each oView In oSSet\n\t'Reference to the drawing view from the current selected object\n\t'Dim oView As DrawingView = trycast(oSSet.item(i), DrawingView)\n\t\n\tIf oView IsNot Nothing Then\n\t\t'Get the full filename Of the view model\n\t\tDim oModelFileName As String\n\t\toModelFileName = oView.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\n\t\t' Set a reference to the first parts list on the active sheet.\n\t\t' This assumes that a parts list is on the active sheet.\n\t\tDim oPartList As PartsList\n\t\t\t'try and get the parts list form the table of this sheet\n\t\t\tTry\n\t\t\t\toPartList = oDrawDoc.ActiveSheet.PartsLists.Item(1)\n\t\t\tCatch 'on error try and search all sheets for first found parts list\t\t\t\n\t\t\t\t'iterate trough each sheet\n\t\t\t\tDim i As Long\n\t\t\t\tFor i = 1 To oDrawDoc.Sheets.Count\n\t\t\t\t\tIf oDrawDoc.Sheets.Item(i).PartsLists.Count > 0 Then Exit For\n\t\t\t\tNext\t\n\t\t\t\toPartList = oDrawDoc.Sheets.Item(i).PartsLists.Item(1)\n\t\t\t\t'MessageBox.Show(\"parts list found on: \" & i, \"Title\")\n\t\t\tEnd Try\n\t\t' Iterate through the contents of the parts list.\n\t\tDim j As Long\n\t\tFor j = 1 To oPartList.PartsListRows.Count\n\t\t\t' Get the current row.\n\t\t\tDim oRow As PartsListRow\n\t\t\toRow = oPartList.PartsListRows.Item(j)\n\t\t\t'get filename of model in row\n\t\t\tDim oRowFileName As String\n\t\t\tTry ' try and get the full file name of the PL item\n   \t\t\toRowFileName = oRow.ReferencedFiles.Item(1).FullFileName\n\t\t\tCatch 'on error go to next item\n  \t\t\tContinue For\n\t\t\tEnd Try\n\t\t\t'compare the filenames\n\t\t\t'Performs a text comparison, based on a case-insensitive text sort order\n\t\t\t'If strings equal returns 0\n\t\t\tIf StrComp(oModelFileName, oRowFileName, CompareMethod.Text)=0 Then \n\t\t\t\t'Get the value of Item from the Parts List\n\t\t\t\t'Row name needs to be case sensitive or use 1 for first 2 for second etc.\n\t\t\t\toCell  = oPartList.PartsListRows.Item(j).Item(\"Item\") \n\t\t\t\t'get the value of text in cell\n\t\t\t\tDim oItemValue As String\n\t\t\t\toItemValue = oCell.Value\n\t\t\t\t\n\t\t\t\t'Show the view label\n\t\t\t\toView.ShowLabel = True\n\t\t\t\t'format the text first line\n\t\t\t\toStringItem = \"<Br/><StyleOverride Underline='False'> Item \" & oItemValue & \" ( <DrawingViewScale/> )</StyleOverride>\"\n\t\t\t\t'format the text second line\n\t\t\t\t'oStringScale = \"<Br/><StyleOverride FontSize='0.3'>(Scale <DrawingViewScale/>)</StyleOverride>\"\n\t\t\t\t\n\t\t\t\t'add to the view label\n\t\t\t\toView.Label.FormattedText =  oStringItem' & oStringScale\n\t\t\tEnd If  \n\t\tNext\n\tElse\n\t\tMessageBox.Show(\"The selected object is not a drawing view\", \"iLogic\")\n\tEnd If\nNext"], "author": "Jesper_S"},
{"created at": [], "solution Title": "\n                        Re: Measure parts\n                    ", "solution": ["'Source: https://forums.autodesk.com/t5/inventor-customization/ilogic-to-get-part-extents/td-p/6051106/page/2\n\nSub Main()\n\n\tDim oAsmDoc As AssemblyDocument = ThisApplication.ActiveDocument\n\tDim oDoc As Document\n\t\n\tFor Each oDoc In oAsmDoc.AllReferencedDocuments\n\t\tIf oDoc.DocumentType = kPartDocumentObject Then\n\t\t\tDim model As String = oDoc.FullFileName\n\t\t\tDim emodel As String = oDoc.DisplayName\n\t\t\n\t\t\teMuppet = Left(iProperties.Value(emodel,\"summary\",\"category\"),5)\n\t\t\n\t\t\tIf eMuppet =  \"Laser\" Then\n\t\t\t\txDoc = ThisApplication.Documents.Open (model,True)\n\t\t\t\txDoc.rebuild\n\t\t\t\tCall FetchSizes(xDoc, Length, Width, Thickness)\n\t\t\t\txDoc.Close\n\t\t\t\t\n\t\t\t\tiProperties.Value(emodel,\"Custom\", \"dikte\") = Thickness\n\t\t\t\tiProperties.Value(emodel,\"Custom\", \"lengte\") = Length\n\t\t\t\tiProperties.Value(emodel,\"Custom\", \"breedte\") = Width\n\t\t\tElse\n\t\t\tEnd If\n\t\tEnd If\n\tNext\nEnd Sub\n\nSub FetchSizes(oDoc As Document, ByRef Length As String, ByRef Width As String, ByRef Thickness As String)\n\tLength= 0\n\tWidth= 0\n\tThickness= 0\n\t\n\tDim uom As UnitsOfMeasure = oDoc.UnitsOfMeasure\n\tDim Units As String = uom.GetStringFromType(uom.LengthUnits)\n\t\n\tIf oDoc.SubType = \"{4D29B490-49B2-11D0-93C3-7E0706000000}\" Then\n\t\tTry\n\t\t\toDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\"\n\t\t\tboolConverted = True\n\t\tCatch\n\t\t\tReturn\n\t\tEnd Try\n\tEnd If\n\tIf oDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n\t\tDim oSMCD As SheetMetalComponentDefinition\n\t\toSMCD = oDoc.ComponentDefinition\n\t\tIf Not oSMCD.HasFlatPattern Then\n\t\t\t' Create Flatpattern If the part doesn't have one\n\t\t\toSMCD.Unfold()\n\t\t\toDoc.Update2(True)\n\t\t\toSMCD.FlatPattern.ExitEdit()\n\t\tEnd If\n\t\n\t\tDim oFPCD As ComponentDefinition = oSMCD.FlatPattern\n\t\n\t\tDim minPoint As point = oFPCD.SurfaceBodies.Item(1).RangeBox.minPoint\n\t\tDim maxPoint As point = oFPCD.SurfaceBodies.Item(1).RangeBox.maxPoint\n\t\t\n\t\tDim X As Double = uom.ConvertUnits ((maxPoint.X - minPoint.X), \"cm\", uom.LengthUnits)\n\t\tDim Y As Double = uom.ConvertUnits ((maxPoint.Y - minPoint.Y), \"cm\", uom.LengthUnits)\n\t\tDim Z As Double = uom.ConvertUnits ((maxPoint.Z - minPoint.Z), \"cm\", uom.LengthUnits)\n\t\t\n\t\tLength= MaxOfMany (X,Y,Z)\n\t\tWidth= X + Y + Z - MaxOfMany (X,Y,Z) - MinOfMany(X,Y,Z)\n\t\tThickness= MinOfMany (X,Y,Z)\n\tEnd If\n\t\n\tIf boolconverted = True  Then\n\t\tTry\n\t\t\toDoc.SubType = \"{4D29B490-49B2-11D0-93C3-7E0706000000}\"\n\t\tCatch\n\t\t\tReturn\n\t\tEnd Try\n\tEnd If\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Projecting drawing symbol points to drawing level sketch\n                    ", "solution": ["Sub projectSymbol()\n\n    Dim oDwg As DrawingDocument\n    Set oDwg = ThisApplication.ActiveDocument\n    \n    Dim oSht As Sheet\n    Set oSht = oDwg.ActiveSheet\n    \n    Dim connPt As Point2d\n    Dim insertPt As Point2d\n\n    Dim def As SketchedSymbolDefinition\n    Set def = oSht.SketchedSymbols.Item(1).Definition\n    \n    Dim pt As SketchPoint\n\n    For Each pt In def.Sketch.SketchPoints\n        If pt.ConnectionPoint = True Then\n            Set connPt = def.Sketch.SheetToSketchSpace(pt.Geometry)\n        ElseIf pt.InsertionPoint = True Then\n            Set insertPt = def.Sketch.SheetToSketchSpace(pt.Geometry)\n        End If\n    Next\n\n    Dim diffX As Double\n    diffX = connPt.X - insertPt.X\n\n    Dim diffY As Double\n    diffY = connPt.Y - insertPt.Y\n    \n    Dim symSketch As DrawingSketch\n    Dim oSketch As DrawingSketch\n    \n    Dim sketchName As String\n    sketchName = \"SymbolSketch\"\n    \n    'Get or create the symbol sketch -----\n    For Each oSketch In oSht.Sketches\n        If oSketch.Name = sketchName Then\n            Set symSketch = oSketch\n            Exit For\n        End If\n    Next\n    \n    If symSketch Is Nothing Then\n        Set symSketch = oSht.Sketches.Add\n        symSketch.Name = sketchName\n    End If\n    '------------\n    symSketch.Edit\n    \n    'add unique symbol connection points to sketch ------\n    \n    Dim inPt As Point2d\n    Set inPt = ThisApplication.TransientGeometry.CreatePoint2d(oSht.SketchedSymbols(1).Position.X, oSht.SketchedSymbols(1).Position.Y)\n    \n    Dim insertionPt As SketchEntity\n    Set insertionPt = symSketch.SketchPoints.Add(symSketch.SheetToSketchSpace(inPt))  'create the new point\n    Call symSketch.GeometricConstraints.AddGround(insertionPt) 'ground the new point\n    \n    Dim coPt As Point2d\n    Set coPt = ThisApplication.TransientGeometry.CreatePoint2d(oSht.SketchedSymbols(1).Position.X + diffX, oSht.SketchedSymbols(1).Position.Y + diffY)\n    \n    Dim connectionPt As SketchEntity\n    Set connectionPt = symSketch.SketchPoints.Add(symSketch.SheetToSketchSpace(coPt))  'create the connection point\n    Call symSketch.GeometricConstraints.AddGround(connectionPt) 'ground the connection point\n\n    symSketch.ExitEdit\n    \nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic change sheet name with parameters\n                    ", "solution": ["Dim oDoc As DrawingDocument = ThisApplication.ActiveDocument\nDim oSheets As Sheets = ThisDrawing.Document.Sheets\n\nDim Surfix As String = \"", "NOT PRINT", "\"\n\nIf Parameter(\"assemble.iam.item1\") = False Then\n    Dim oSheet As Sheet = oSheets.Item(30)\n    oSheet.Activate()\n    ", "Dim FNP As Integer = InStrRev(oSheet.Name, \":\", -1)\n    oSheet.Name = Left(oSheet.Name, FNP - 1) & Surfix", "\nElse\n    ", "'Do nothing", "\nEnd If\n\nIf Parameter(\"assemble.iam.item2\") = False Then\n    Dim oSheet As Sheet = oSheets.Item(31)\n    oSheet.Activate()\n    ", "Dim FNP As Integer = InStrRev(oSheet.Name, \":\", -1)\n    oSheet.Name = Left(oSheet.Name, FNP - 1) & Surfix", "\nElse\n    ", "'Do nothing", "\nEnd If"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Looking for ilogic code to get project file path\n                    ", "solution": [], "author": "robert.vdrijst"},
{"created at": [], "solution Title": "\n                        Re: Looping Structured bill of material skips merged rows\n                    ", "solution": ["Sub test()\n\nDim oIamDoc As AssemblyDocument\nSet oIamDoc = ThisApplication.ActiveDocument\nDim oIamCompDef As AssemblyComponentDefinition\nSet oIamCompDef = oIamDoc.ComponentDefinition\n\nDim oBom As BOM\nSet oBom = oIamCompDef.BOM\noBom.PartsOnlyViewEnabled = True\n\nDim oBomView As BOMView\nSet oBomView = oBom.BOMViews.Item(\"Structured\")\nDim oBOMRows As BOMRowsEnumerator\nSet oBOMRows = oBomView.BOMRows\nDim i As Integer\nFor i = 1 To oBOMRows.Count\nDebug.Print oBOMRows.Item(i).ComponentDefinitions.Count ' if more then one, it's merged\nDim j As Integer\nFor j = 1 To oBOMRows.Item(i).ComponentDefinitions.Count\nDebug.Print oBOMRows.Item(i).ComponentDefinitions.Item(j).Document.FullFileName\nNext j\nNext i\n        \nEnd Sub\n", " 1 \nC:\\Users\\Frederic\\Componenten\\\\Kantschaar\\Kantschaar rechts.iam\n 2 \nC:\\Users\\Frederic\\Componenten\\Kantschaar\\Kantschaar links.iam\nC:\\Users\\Frederic\\Componenten\\Kantschaar\\Kantschaar links1.iam"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Folder based on filename\n                    ", "solution": ["Sub Main()\n    strFolder = \"C:\\Users\\lelo\\AppData\\Local\\Autodesk\\Autodesk Sync\\Cloud\\lennart.losjo\\Part Drawings\\\"& ThisDoc.FileName(False)\n    oSaveNameWOExtension = GetFolder(strFolder)\t& \"\\\" & ThisDoc.FileName(False)\n\n    ThisDoc.Document.SaveAs(oSaveNameWOExtension & \".dwfx\", True)\n    ThisDoc.Document.SaveAs(oSaveNameWOExtension & \".pdf\", True)\n    ThisDoc.Document.SaveAs(oSaveNameWOExtension & \".dxf\", True)\n\nEnd Sub\n\nFunction GetFolder(ostr) As String\n    If(Not System.IO.Directory.Exists(ostr)) Then \n        System.IO.Directory.CreateDirectory(ostr) \n    End If\n    Return ostr\nEnd Function"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Title Block Copy - Equivalent to a double-click on the Drawing Resource\n                    ", "solution": ["Dim sPromptStrings(0) As String\nsPromptStrings(0) = \"\"", "Dim sPromptStrings(0 To 1) As String\nsPromptStrings(0) = \"\"\nsPromptStrings(1) = \"\"", "Set oTitleBlock = oSheet.AddTitleBlock(\"ANSI A\",, sPromptStrings)"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2018 iLogic error\n                    ", "solution": ["ThisDoc.Document.SaveAs(PDFPath & \"\\\" & ThisDoc.FileName(False) & _\n \" Rev\" & oRevNum & \" - \" & oDescrip & \".pdf\" , True)", "oDataMedium.FileName = PDFPath & \"\\\" & ThisDoc.FileName(False) & _\n \" Rev\" & oRevNum & \" - \" & oDescrip & \".pdf\"\noPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: InputBox - Cancel button not responsive\n                    ", "solution": ["'To FIX Eng. Approved Date\n100:\noEngApprovedDate = iProperties.Value(oModelDoc, \"Status\", \"Eng. Approved Date\")\niProperties.Value(\"Status\", \"Eng. Approved Date\") = oEngApprovedDate\n\noEngApprovedDate = InputBox(\"ENG. APPROVED DATE: \", \"Eng. Approved Date\", (oEngApprovedDate))\n\nIf Len(oEngApprovedDate) = 0 Then\n\tMessageBox.Show(\"Message: \" _\n\t& vbLf & \"1. HIT OK BUTTON HERE\" _\n\t& vbLf & \"2. HIT OK BUTTON IN THE NEXT DIALOG BOX AS WELL!\", \"Title\")\n\tGoto 100\nExit Sub\nElse\niProperties.Value(\"Status\", \"Eng. Approved Date\") = oEngApprovedDate\niProperties.Value(oModelDoc, \"Status\", \"Eng. Approved Date\") = oEngApprovedDate\nEnd If"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Workaround to scale sketch entities\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Loop \"internal\" parameters in a rule\n                    ", "solution": ["Dim Sum As Double\n\nFor i As Integer = 1 To 4\n\tIf Not Parameter(\"Inlet\" & i & \"Direction\") = \"Ingen vald\" Then\n\t\tSUM = SUM + Parameter(\"Inlet\" & i & \"Pattern_Num\")\n\tEnd If\nNext\t\n\niProperties.Value(\"Custom\", \"Test\") = SUM"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: how to enter text directly into minitoolbar combobox?\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Intersection point between arc and circle  (addition)\n                    ", "solution": ["                    Dim oInterPoints As ObjectsEnumerator\n                    Set oInterPoints = ThisApplication.TransientGeometry.CurveCurveIntersection(oSketchEnt1.Geometry3d, oSketchEnt2.Geometry3d, 0#)\n                    Dim i As Integer\n                    For i = 1 To oInterPoints.count\n                        Dim interPoint3d As Point\n                        Set interPoint3d = oInterPoints.Item(i)\n                        Dim interPoint As Point2d\n                        Set interPoint = oSketch.ModelToSketchSpace(interPoint3d)\n            \n                        ' Create points at the intersections to visualize their location.\n                        Dim oSketchPoi As SketchPoint\n                        Set oSketchPoi = oSketch.SketchPoints.Add(interPoint)\n                        Call oSketch.GeometricConstraints.AddCoincident(oSketchPoi, oSketchEnt1)\n                        Call oSketch.GeometricConstraints.AddCoincident(oSketchPoi, oSketchEnt2)\n                    Next"], "author": "t_remal"},
{"created at": [], "solution Title": "\n                        Re: Delete User Parameter With Ilogic\n                    ", "solution": ["Sub Main()\n    Dim oDoc As Document = ThisDoc.Document\n    Dim oCD As ComponentDefinition = oDoc.ComponentDefinition\n    ", "'Dim oParam As Parameters = oCD.Parameters", "\n    ", "Dim oParam As UserParameters = oCD.Parameters.UserParameters", "\n    \n    For Each oPara As Parameter In oParam\n        Dim oName As String = oPara.Name\n        If UCase(Left(oName, 8)) = \"", "STRINGER", "\" Then oPara.Delete\n    Next\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Inventor idw to dxf vs ACAD dxf creation\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Object based programming: Declaring classes in ilogic\n                    ", "solution": ["Public Class ZBracketBreak\n    Public pStart As Double\n    Public pLength As Double\n    Public pAnchor As Boolean\n    Public Sub New(pStart As Double, pLength As Double, pAnchor As Boolean)\n        MyClass.pStart = pStart\n        MyClass.pLength = pLength\n        MyClass.pAnchor = pAnchor\n    End Sub\nEnd Class", "Dim ZBB As New ZBracketBreak(1.1, 1.2, True)\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How Can I Simplify this Code and Retain it's Functionality?\n                    ", "solution": ["Dim oSize As Boolean\noSize = InputRadioBox(\"Select size:\", \"Letter (8.5 x 11)\", \"Tabloid (11 x 17)\", True, \"iLogic\")\n\nIf oSize = True Then\n\tSheet_Size = \"Letter (8.5 x 11)\"\nElse\n\tSheet_Size = \"Tabloid (11 x 17)\"\nEnd If\n\n'^^^ the code above is just for testing\n\nDim oCurrentNumber  As Sheet\noCurrentNumber = ThisDoc.Document.ActiveSheet\n\nFor Each oSheet In ThisDoc.Document.Sheets\t\n\toSheet.Activate\n\tIf Sheet_Size = \"Letter (8.5 x 11)\" Then\n\t\tActiveSheet.ChangeSize(\"A\", MoveBorderItems := True)\t\n\tElseIf Sheet_Size = \"Tabloid (11 x 17)\" Then\n\t\tActiveSheet.ChangeSize(\"B\", MoveBorderItems := True)\n\tEnd If\n\t\n\tiLogicVb.RunRule(\"Auto-Zoom to Extents\")\n\toSheet.Update\nNext\n\noCurrentNumber.Activate\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Use AutoCAD Block for Balloon Style\n                    ", "solution": ["Sub main()\n\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n\n    Dim oBalloon As Balloon\n    Set oBalloon = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingBalloonFilter, \"Select a balloon\")\n\n    Dim oStyle As BalloonStyle\n    Set oStyle = oDrawDoc.StylesManager.BalloonStyles.Item(\"AutoCADStyle\")\n\n    oStyle.Properties = \"FormatID='{32853F0F-3444-11d1-9E93-0060B03C1CA6}'PropertyID='5'\"\n\n    oBalloon.Style = oStyle\n\n    Dim s As String\n    s = oBalloon.BalloonValueSets.Item(1).Value\n\n    oStyle.Properties = \"PartsListProperty='45572'\"\n\n    oBalloon.Style = oStyle\n\n    Dim txtPt As Point2d\n    Set txtPt = ThisApplication.TransientGeometry.CreatePoint2d(oBalloon.Position.X, oBalloon.Position.Y)\n    txtPt.X = txtPt.X\n    txtPt.Y = txtPt.Y - oBalloon.Style.BalloonDiameter\n\n    Dim oText As Inventor.GeneralNote\n    Set oText = oDrawDoc.Sheets.Item(1).DrawingNotes.GeneralNotes.AddFitted(txtPt, s)\n\n    Set txtPt = ThisApplication.TransientGeometry.CreatePoint2d(oText.Position.X, oText.Position.Y)\n\n    Dim wide As Double\n    wide = oText.Width\n\n    txtPt.X = txtPt.X - (wide / 2)\n\n    oText.Position = txtPt\n    \nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Activate a sheet in a non visible file.\n                    ", "solution": ["Set oDoc = ThisApplication.Documents.Open(\"FullFileNamePath\", False)\n\nFor oSheetNumber = 1 To oDoc.Sheets.Count\n            Set oSheet = oDoc.Sheets(oSheetNumber)\n            oSheet.TitleBlock.Delete\nNext", "Set oDoc = ThisApplication.Documents.Open(\"FullFileNamePath\", False)\n\nFor Each oSheet in oDoc.Sheets\n       oSheet.TitleBlock.Delete\nNext"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Rotate a Sketch Text on a Face in Assembly is not working\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: derived part - change source?\n                    ", "solution": ["Dim oDoc as Document\noDoc = ThisDoc.Document\nDim oRefFile As FileDescriptor\nDim oOrigRefName As Object     \n\nFor Each oRefFile In oDoc.file.ReferencedFileDescriptors\n'get the full file path to the original internal references\noOrigRefName = oRefFile.FullFileName\n\n'present a File Selection dialog\nDim oFileDlg As inventor.FileDialog = Nothing\nInventorVb.Application.CreateFileDialog(oFileDlg)\noFileDlg.InitialDirectory = oOrigRefName\noFileDlg.CancelError = True\nOn Error Resume Next\noFileDlg.ShowOpen()\nIf Err.Number <> 0 Then\nReturn\nElseIf oFileDlg.FileName <> \"\" Then\nselectedfile = oFileDlg.FileName\nEnd if\n\n\u2018replace the reference\noRefFile.ReplaceReference (selectedfile)     \nInventorVb.DocumentUpdate()\noOrigRefName = \u201c\u201d                                        \nNext\n\niLogicVb.UpdateWhenDone = True"], "author": "Jesper_S"},
{"created at": [], "solution Title": "\n                        Re: Sheetmetal lofted flange bend notches\n                    ", "solution": [], "author": "L.R20"},
{"created at": [], "solution Title": "\n                        Re: Trying to move a RevisionCloud\n                    ", "solution": ["Public Sub MoveRevisionCloud()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.Sheets(1)\n    \n    ' Find the sketch that represents a revision cloud on the sheet.\n    Dim checkSketch As DrawingSketch\n    Dim sk As DrawingSketch\n'    For Each checkSketch In oSheet.sketches\n'        If Left(checkSketch.name, 13) = \"RevisionCloud\" Then\n'            Set sk = checkSketch\n'            Exit For\n'        End If\n'    Next\n    \n    ' Find the sketch that represents a revision cloud on a view.\n    Dim drawView As DrawingView\n    For Each drawView In oSheet.DrawingViews\n        For Each checkSketch In drawView.sketches\n            If Left(checkSketch.name, 13) = \"RevisionCloud\" Then\n                Set sk = checkSketch\n                Exit For\n            End If\n        Next\n        If Not sk Is Nothing Then\n            Exit For\n        End If\n    Next\n    \n    ' Add all of the sketch points into a collection.  All other geometry is\n    ' dependent on sketch points so they'll move if the points are moved.\n    Dim skPoint As SketchPoint\n    Dim pnts As ObjectCollection\n    Set pnts = ThisApplication.TransientObjects.CreateObjectCollection\n    For Each skPoint In sk.SketchPoints\n        Call pnts.Add(skPoint)\n    Next\n    \n    ' Force the sketch into edit mode and move the points.\n    sk.Edit\n    Call sk.MoveSketchObjects(pnts, ThisApplication.TransientGeometry.CreateVector2d(5, 2), False, False)\n    \n    ' Exit edit mode.\n    sk.ExitEdit\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Inventor crashes with iLogic rule about drawing dimension between work point\n                    ", "solution": ["Dim", " ", "oGeneralDims", " ", "as", " ", "GeneralDimensions", " ", "=", " ", "oSheet", ".", "DrawingDimensions", ".", "GeneralDimensions", "\n\n", "DimType", " ", "=", " ", "DimensionTypeEnum", ".", "kVerticalDimensionType"], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: Bolt pattern suppression failures\n                    ", "solution": [], "author": "bnwtech"},
{"created at": [], "solution Title": "\n                        Re: RGB Color Face wih VBA\n                    ", "solution": [], "author": "LishuangLu"},
{"created at": [], "solution Title": "\n                        Re: SetThroughAllExtent - hole - kLinearPlacementType\n                    ", "solution": ["Sub main()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oHole As HoleFeature\n    Set oHole = oDoc.ComponentDefinition.Features.HoleFeatures(1)\n\n    Dim oFace As Face\n    Set oFace = oHole.PlacementDefinition.Plane\n    \n    Dim dDist1 As Double, dDist2 As Double\n    Dim oLine As LineSegment\n    \n    Set oLine = oFace.Edges(2).Geometry\n    dDist1 = oLine.DistanceTo(oHole.HoleCenterPoints(1))\n    Set oLine = oFace.Edges(3).Geometry\n    dDist2 = oLine.DistanceTo(oHole.HoleCenterPoints(1))\n    \n    Dim oLHP As LinearHolePlacementDefinition\n    Set oLHP = oDoc.ComponentDefinition.Features.HoleFeatures.CreateLinearPlacementDefinition(oFace, oFace.Edges(2), dDist1, oFace.Edges(3), dDist2, oHole.HoleCenterPoints(1))\n    oHole.PlacementDefinition = oLHP\n    \n    oHole.SetThroughAllExtent kPositiveExtentDirection\n    \nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Batch create appearences (maybe with Macro or iLogic???)\n                    ", "solution": ["Sub main()\n\n    Dim name(200) As String\n    Dim red(200) As Integer\n    Dim green(200) As Integer\n    Dim blue(200) As Integer\n    \n    Dim i As Integer\n\n    For i = 1 To 200\n                \n        Call CreateAppearance(name(i), green(i), red(i), blue(i))\n                \n    Next i\n    \nEnd Sub\n\n\nSub CreateAppearance(ByVal name As String, ByVal red As Integer, ByVal green As Integer, ByVal blue As Integer)\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oTG As TransientObjects\n    Set oTG = ThisApplication.TransientObjects\n    \n    Dim docAsset As Assets\n    Set docAsset = oDoc.Assets\n\n    Dim appearance As Asset\n    Set appearance = docAsset.Add(AssetTypeEnum.kAssetTypeAppearance, \"Generic\", name & \"Appearances\", name)\n\n    Dim generic_color As ColorAssetValue\n    Set generic_color = appearance.Item(\"generic_diffuse\")\n       \n    generic_color.Value = oTG.CreateColor(red, green, blue)\n    generic_color.HasConnectedTexture = True\n    \n    Dim generic_texture As AssetTexture\n    Set generic_texture = generic_color.ConnectedTexture\n        \n    Dim generic_image_fade As FloatAssetValue\n    Set generic_image_fade = appearance.Item(\"generic_diffuse_image_fade\")\n    generic_image_fade.Value = 0.75\n    \n    Dim generic_glossiness As FloatAssetValue\n    Set generic_glossiness = appearance.Item(\"generic_glossiness\")\n    generic_glossiness.Value = 0.3\n    \n    Dim generic_highlights As BooleanAssetValue\n    Set generic_highlights = appearance.Item(\"generic_is_metal\")\n    generic_highlights.Value = False\n\nEnd Sub\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic to determine whether current part is a content center part\n                    ", "solution": ["Document.IsModifiable = Boolean"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Define face\n                    ", "solution": ["Public Sub CreateReferenceKey()\n    'Set a reference to the active document\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n\n    Dim refKeyMgr As ReferenceKeyManager\n    Set refKeyMgr = oDoc.ReferenceKeyManager\n\n    ' Create a key context (required to obtain ref keys for BRep entities)\n    Dim keyContext As Long\n    keyContext = refKeyMgr.CreateKeyContext\n    \n    Dim keyCollection As New Collection\n    Dim oFace As Face\n    \n    For Each oFace In oDoc.ComponentDefinition.SurfaceBodies(1).Faces\n\n        ' Get a reference key\n        Dim refKey() As Byte\n        Call oFace.GetReferenceKey(refKey, keyContext)\n        \n        ' Store all the ref keys\n        keyCollection.Add refKey\n    Next\n    \n    ' Save KeyContext as a byte array for future use\n    Dim ContextData() As Byte\n    Call oDoc.ReferenceKeyManager.SaveContextToArray(keyContext, ContextData)\n    \n    ' Load the saved KeyContext \n    Dim savedKeyContext As Long\n    savedKeyContext = oDoc.ReferenceKeyManager.LoadContextFromArray(ContextData)\n    \n    Dim tempKey As Variant, key() As Byte, retObj As Object\n    ' Bind back the objects\n    For Each tempKey In keyCollection\n        key = tempKey\n        Set retObj = oDoc.ReferenceKeyManager.BindKeyToObject(key, savedKeyContext)\n        oDoc.SelectSet.Select retObj\n    Next\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: running ilogic\n                    ", "solution": [], "author": "tkennedy26"},
{"created at": [], "solution Title": "\n                        Re: could not run VBA Code\n                    ", "solution": [], "author": "martin.winkler"},
{"created at": [], "solution Title": "\n                        Re: Make shorcut for two point rectangle on sketches mode.\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: converting .idw to .dwg\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic code running every 15 minutes or every 100 actions\n                    ", "solution": ["Sub Main()\n\tDim Thread1 As New System.Threading.Thread(AddressOf AutoSave)\n\tThread1.Start()\nEnd Sub\n\nSub AutoSave()\n\tDim AST As Integer = 0\n\tWhile True\n\t\tIf ThisDoc IsNot Nothing Then\n\t\t\tIf AST >= 15 Then ", "'15 minutes", "\n\t\t\t\tAST = 0\n\t\t\t\tDim SF As DialogResult = MessageBox.Show(\"Do you want to save?\", \"Autosave\", MessageBoxButtons.YesNo, MessageBoxIcon.Question)\n\t\t\t\tIf SF = vbYes And ThisDoc IsNot Nothing Then\n\t\t\t\t\tThisDoc.Save()\n\t\t\t\tEnd If\n\t\t\tElse\n\t\t\t\tAST += 1\n\t\t\tEnd If\n\t\tElse\n\t\t\tAST = 0\n\t\tEnd If\n\t\tSystem.Threading.Thread.Sleep(60000) ", "'1 minute = 60000 ms", "\n\tEnd While\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Error Message when Closing Inventor 2017\n                    ", "solution": [], "author": "flora_fang"},
{"created at": [], "solution Title": "\n                        Re: Client Graphics\n                    ", "solution": ["Sub Main()\n    \n    Dim doc As AssemblyDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim compDef As AssemblyComponentDefinition\n    Set compDef = doc.ComponentDefinition\n    \n    Dim wa As WorkAxis\n    Set wa = ThisApplication.CommandManager.Pick(kWorkAxisFilter, \"Select a work axis to draw client graphics\")\n    \n    Dim oClientGraphics As ClientGraphics\n    Dim oDataSets As GraphicsDataSets\n    \n    On Error Resume Next\n    \n    Set oClientGraphics = compDef.ClientGraphicsCollection.Item(\"TestGraphicsID\")\n    Set oDataSets = doc.GraphicsDataSetsCollection.Item(\"TestID\")\n    \n    If Err.Number = 1 Then\n    On Error GoTo 0\n        ' An existing client graphics object was successfully obtained so clean up.\n        Set oClientGraphics = compDef.ClientGraphicsCollection.Add(\"TestGraphicsID\")\n        Set oDataSets = doc.GraphicsDataSetsCollection.Add(\"TestID\")\n        ' update the display to see the results.\n        ThisApplication.ActiveView.Update\n        \n    Else\n    \n        Call oClientGraphics.Delete\n        Call oDataSets.Delete\n        Set oClientGraphics = compDef.ClientGraphicsCollection.Add(\"TestGraphicsID\")\n        Set oDataSets = doc.GraphicsDataSetsCollection.Add(\"TestID\")\n        \n    End If\n    \n    ' Create a new graphics node within the client graphics objects.\n    Dim oSurfacesNode As GraphicsNode\n    Set oSurfacesNode = oClientGraphics.AddNode(1)\n        \n    Dim coordSet As GraphicsCoordinateSet\n    Set coordSet = oDataSets.CreateCoordinateSet(1)\n    \n    Dim oColorSet As GraphicsColorSet\n    Set oColorSet = oDataSets.CreateColorSet(1)\n    \n    \n    'Call oColorSet.Add(1, 255, 0, 0) ' For red\n\n    Call oColorSet.Add(1, 0, 255, 0) 'For Green\n        \n    Dim oPointCoords(5) As Double\n    If wa.Line.Direction.X > 0 Then\n        oPointCoords(0) = wa.Line.RootPoint.X + 6\n    Else\n        oPointCoords(0) = wa.Line.RootPoint.X\n    End If\n    If wa.Line.Direction.Y > 0 Then\n        oPointCoords(1) = wa.Line.RootPoint.Y + 6\n    Else\n        oPointCoords(1) = wa.Line.RootPoint.Y\n    End If\n    If wa.Line.Direction.Z > 0 Then\n        oPointCoords(2) = wa.Line.RootPoint.Z + 6\n    Else\n        oPointCoords(2) = wa.Line.RootPoint.Z\n    End If\n    \n    oPointCoords(3) = wa.Line.RootPoint.X\n    oPointCoords(4) = wa.Line.RootPoint.Y\n    oPointCoords(5) = wa.Line.RootPoint.Z\n    \n    Call coordSet.PutCoordinates(oPointCoords)\n    \n    Dim oLine As LineGraphics\n    Set oLine = oSurfacesNode.AddLineGraphics\n            \n    oLine.CoordinateSet = coordSet\n    oLine.ColorSet = oColorSet\n    oLine.LineWeight = 2\n    \n    ThisApplication.ActiveView.Update\n        \n    \nEnd Sub", "Sub Main()\n    \n    Dim doc As AssemblyDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim compDef As AssemblyComponentDefinition\n    Set compDef = doc.ComponentDefinition\n    \n    Dim wa As WorkAxis\n    Set wa = ThisApplication.CommandManager.Pick(kWorkAxisFilter, \"Select a work axis to draw client graphics\")\n    \n    Dim oClientGraphics As ClientGraphics\n    Dim oDataSets As GraphicsDataSets\n    \n    On Error Resume Next\n    \n    Set oClientGraphics = compDef.ClientGraphicsCollection.Item(\"TestGraphicsID\")\n    Set oDataSets = doc.GraphicsDataSetsCollection.Item(\"TestID\")\n    \n    If Err.Number = 1 Then\n    On Error GoTo 0\n        ' An existing client graphics object was successfully obtained so clean up.\n        Set oClientGraphics = compDef.ClientGraphicsCollection.Add(\"TestGraphicsID\")\n        Set oDataSets = doc.GraphicsDataSetsCollection.Add(\"TestID\")\n        ' update the display to see the results.\n        ThisApplication.ActiveView.Update\n        \n    Else\n    \n        Call oClientGraphics.Delete\n        Call oDataSets.Delete\n        Set oClientGraphics = compDef.ClientGraphicsCollection.Add(\"TestGraphicsID\")\n        Set oDataSets = doc.GraphicsDataSetsCollection.Add(\"TestID\")\n        \n    End If\n    \n    ' Create a new graphics node within the client graphics objects.\n    Dim oSurfacesNode As GraphicsNode\n    Set oSurfacesNode = oClientGraphics.AddNode(1)\n        \n    Dim coordSet As GraphicsCoordinateSet\n    Set coordSet = oDataSets.CreateCoordinateSet(1)\n    \n    Dim oColorSet As GraphicsColorSet\n    Set oColorSet = oDataSets.CreateColorSet(1)\n    \n    \n    Call oColorSet.Add(1, 255, 0, 0) ' For red\n\n    'Call oColorSet.Add(1, 0, 255, 0) 'For Green\n        \n    Dim startPnt As Point\n    Dim endPnt As Point\n    Call wa.GetSize(startPnt, endPnt)\n    \n    Dim oPointCoords(5) As Double\n    oPointCoords(0) = startPnt.X\n    oPointCoords(1) = startPnt.Y\n    oPointCoords(2) = startPnt.Z\n    oPointCoords(3) = endPnt.X\n    oPointCoords(4) = endPnt.Y\n    oPointCoords(5) = endPnt.Z\n\n    \n    Call coordSet.PutCoordinates(oPointCoords)\n    \n    Dim oLine As LineGraphics\n    Set oLine = oSurfacesNode.AddLineGraphics\n            \n    oLine.CoordinateSet = coordSet\n    oLine.ColorSet = oColorSet\n    oLine.LineWeight = 2\n    \n    ThisApplication.ActiveView.Update\n    \nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: VBA -> .Net Problem with Point2D\n                    ", "solution": ["obj.Position = newPoint", "CallByName(obj, \"Position\", vbLet, newPoint)"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Replace Family Template option missing in 2018??\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: How do you convert a constraint from mate to flush with ilogic\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Save specific face of sheet metal (from assembly)\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: iLogic, save all .idw sheets to PDF\n                    ", "solution": ["Sub Main()\n    ' Get the PDF translator Add-In.\n    Dim PDFAddIn As TranslatorAddIn\n    PDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\n    'Set a reference to the active document (the document to be published).\n    Dim oDocument As Document\n    oDocument = ThisApplication.ActiveDocument\n\n    Dim oContext As TranslationContext\n    oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = kFileBrowseIOMechanism\n\n    ' Create a NameValueMap object\n    Dim oOptions As NameValueMap\n    oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n    ' Create a DataMedium object\n    Dim oDataMedium As DataMedium\n    oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n    ' Check whether the translator has 'SaveCopyAs' options\n    If PDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\n        ' Options for drawings...\n\n        oOptions.Value(\"All_Color_AS_Black\") = 0\n\n        oOptions.Value(\"Remove_Line_Weights\") = 0\n        oOptions.Value(\"Vector_Resolution\") = 400\n        oOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\n        'oOptions.Value(\"Custom_Begin_Sheet\") = 2\n        'oOptions.Value(\"Custom_End_Sheet\") = 4\n    End If\n\n    'Set the destination file name\n    oDataMedium.FileName = \"c:\\temp\\test.pdf\"\n\n    'Publish document.\n    Call PDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nEnd Sub"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Chamfer Part Feature count\n                    ", "solution": ["Sub GetChamferedEdgesCount()\n    Dim oRefDoc As PartDocument\n    Set oRefDoc = ThisApplication.ActiveDocument\n\n    ' Get the referenced document component definition\n    Dim oCD As PartComponentDefinition\n    Set oCD = oRefDoc.ComponentDefinition\n    \n    ' get the original position of End of Part node.\n    Dim oBefore As Object, oAfter As Object\n    oCD.GetEndOfPartPosition oAfter, oBefore\n    \n    ' Get the referenced document feature collection\n    Dim oFeatures As PartFeatures\n    Set oFeatures = oCD.Features\n    \n    Dim oFeature As PartFeature\n    \n    '  Get the referenced document feature count\n    Dim oFeatureCount As Integer\n    oFeatureCount = oFeatures.Count\n    \n    '  Get the referenced document hole feature collection\n    Dim oHoles As HoleFeatures\n    Set oHoles = oFeatures.HoleFeatures\n    \n    '  Get the referenced document chamfer feature collection\n    Dim oChamfers As ChamferFeatures\n    Set oChamfers = oFeatures.ChamferFeatures\n    'Dim oChamferCount As Integer = oChamfers.Count\n    oChamferCount = oChamfers.Count\n    \n    Dim oEdge As Edge\n    Dim oChamferFeature As ChamferFeature\n    For Each oChamferFeature In oChamfers\n       ' move the feature under the End of Part node to get the chamfered edges.\n       Call oChamferFeature.SetEndOfPart(True)\n       \n       MsgBox oChamferFeature.Name & \" has \" & oChamferFeature.Definition.ChamferedEdges.Count & \" chamfered edges.\"\n       \n       For Each oEdge In oChamferFeature.Definition.ChamferedEdges\n            oRefDoc.SelectSet.Select oEdge\n       Next\n       Call oChamferFeature.SetEndOfPart(False)\n    Next\n    \n   ' MsgBox (oChamferCount)\n   \n   ' restore the position of End of Part node.\n    oAfter.SetEndOfPart False\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic auto create scaled drawing from a model\n                    ", "solution": [], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re: Ilogic making a new hole\n                    ", "solution": [], "author": "s.wile"},
{"created at": [], "solution Title": "\n                        Re: Inventor \"default\" document settings\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "oDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n\n", "'", "set length units to Inch for the active document", "\n", "oDoc", ".", "unitsofmeasure", ".", "LengthUnits", " ", "=", " ", "11272", "\n\n", "'", "set angle units to Degree for the active document", "\n", "oDoc", ".", "unitsofmeasure", ".", "AngleUnits", " ", "=", " ", "11279", "\n\n", "'", "set mass units to LbMass for the active document", "\n", "oDoc", ".", "unitsofmeasure", ".", "MassUnits", " ", "=", " ", "11286"], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re: Creating new inventor file from excel vba\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: batch identifying iLogic embedded in .iam and .ipt files.\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Problem accessing Part Only View with BOMViews in iLogic Assembly\n                    ", "solution": ["Sub GetPartOnlyView()\n\nDim oDoc As AssemblyDocument\nSet oDoc = ThisApplication.ActiveDocument\nDim odef As AssemblyComponentDefinition\nSet odef = oDoc.ComponentDefinition\n\n'Get the ActiveLevelOfDetailRepresentation Name\nDim MyLOD_Name As String\nMyLOD_Name = odef.RepresentationsManager.ActiveLevelOfDetailRepresentation.Name\n\nIf Not MyLOD_Name = \"Master\" Then\n'activate master because only it can do the trick\n    Call odef.RepresentationsManager.LevelOfDetailRepresentations.Item(1).Activate\nEnd If\n\n' Set a reference to the BOM\nDim oBOM As BOM\nSet oBOM = oDoc.ComponentDefinition.BOM\n\n' Make sure that the PartOnly view is enabled.\noBOM.PartsOnlyViewEnabled = True\n\n'Set a reference to the \"Part Only\" BOMView\nDim oBOMView As BOMView\nSet oBOMView = oBOM.BOMViews.Item(\"Parts Only\")\n\n'do what you want here\n\nMsgBox oBOMView.Name\n\n'set your LOD back\nodef.RepresentationsManager.LevelOfDetailRepresentations.Item(MyLOD_Name).Activate\n\nEnd Sub"], "author": "fulvio81"},
{"created at": [], "solution Title": "\n                        Re: changing the scale of drawing view from 1/8 to 1 1/2\" = 1'-0\"\n                    ", "solution": ["'Function CreateDrawing_PlaceViews (PartNumber As String, DrawingViewScale As Double, ViewsToPlace As String, AssemblyDrawing As Boolean, ByRef oBaseView As DrawingView, ByRef oView2 As DrawingView, ByRef oView3 As DrawingView, ByRef oView4 As DrawingView)\n\nImports Inventor.ViewOrientationTypeEnum\nImports Inventor.DrawingViewStyleEnum\n\n    Dim oDrawDoc As DrawingDocument\n    Dim oPartDoc As Document\n    Dim oSheet As Sheet\n    'Dim oDrawDoc As DrawingDocument = ThisDoc.Document\n    Dim oDrawingView As DrawingView\n    'Dim oSheet As Sheet = oDrawDoc.ActiveSheet\n    Dim oPlacementPoint As Point2d\n    Dim oBorder As Border\n    Dim oPlaceX As Double\n    Dim oPlaceY As Double\n    Dim oPartsList As PartsList \n    Dim AssemblyDrawing As Boolean\n    \n    'Dim oTG As TransientGeometry\n    'Dim oPoint1 As Point2d\n    'Dim oPoint2 As Point2d\n    'Dim oPoint3 As Point2d\n\n    \n    Filename = ThisDoc.FileName(False)\n    \n\n    'If this is the Assembly View, then use this Document as reference and open Drawing Template\n    'Otherwise use the given Part Number And invisibly open the part, Use the active drawing\n    'f AssemblyDrawing = True Then\n        'oPartDoc = ThisDoc.Document\n    DocType = ThisDoc.Document.DocumentType\n    If DocType = DocumentTypeEnum.kAssemblyDocumentObject Then\n        oPartDocPath = ThisDoc.Path & \"\\\" & Filename & \".iam\"\n        oPartDoc = ThisApplication.Documents.Open(oPartDocPath, False)\n        oDrawDoc = ThisApplication.Documents.Add(kDrawingDocumentObject, \"K:\\Mech\\INVENTOR2016\\Inventor Resources\\Templates\\RAUTE_2016.dwg\", True)\n        oPLS = oDrawDoc.StylesManager.PartsListStyles.Item(\"MULTIPLE-SINGLE PARTS LIST\")\n    'Else AssemblyDrawing = False \n    Else If DocType = DocumentTypeEnum.kPartDocumentObject Then\n        oPartDocPath = ThisDoc.Path & \"\\\" & Filename & \".ipt\"\n        oPartDoc = ThisApplication.Documents.Open(oPartDocPath, False)\n    'DrawDoc = ThisApplication.ActiveDocument \n        oDrawDoc = ThisApplication.Documents.Add(kDrawingDocumentObject, \"K:\\Mech\\INVENTOR2016\\Inventor Resources\\Templates\\RAUTE_2016.dwg\", True)\n        oPLS = oDrawDoc.StylesManager.PartsListStyles.Item(\"SINGLE PART LIST\")\n    End If\n    \n'Set a reference to the sheet format\nDim oFormat As SheetFormat\nTry\noFormat = oDrawDoc.SheetFormats.Item(\"A-SIZE SHEET\")\nCatch\nMessageBox.Show(\"Error: the named sheet format might not exist.\", \"iLogic\")\nReturn\nEnd Try\n'Create a new sheet based on the sheet format using the specified model'Dim oSheet As Sheet\noSheet = oDrawDoc.Sheets.AddUsingSheetFormat(oFormat)    \n\noSheetName = \"Sheet:1\"\noSheet1 = ThisApplication.ActiveDocument.Sheets.Item(oSheetName) \noSheet1.Delete\n\n'oSheet = oDrawDoc.Sheets.Item(1)\n\noTG = ThisApplication.TransientGeometry\n    'Dim oTG As TransientGeometry'Set points in order to get wanted View (ie. if 'Y' is the same and 'X' is greater or less, you will get a Side View)\n    oPoint1 = oTG.CreatePoint2d(13, 12)\n\nDim DrawingViewScale As Double\n\n\n'Dim ViewScale2 As Double\n\n '   ViewScale1 = 1.0\n  '  ViewScale2 = 5.0\n\n  \n'RoundToFraction(DrawingViewScale, 1/32, RoundingMethod.Round)    \nDrawingViewScale = 1/8\n\n\n'Create the Base View\noBaseView = oSheet.DrawingViews.AddBaseView(oPartDoc, oPoint1, DrawingViewScale, ViewOrientationTypeEnum.kFrontViewOrientation, DrawingViewStyleEnum.kHiddenLineDrawingViewStyle, \"Master\")\n   ", "oBaseView.ScaleString = \"1 1/2\" & Chr(34) & \"=1'-0\" & Chr(34)", "   \noBorder = oSheet.Border\n\noDrawingView = oSheet.DrawingViews(1)\noPlacementPoint = oBorder.RangeBox.MaxPoint\n'oPlacementPoint = oBorder.RangeBox.MinPoint'oPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(27,0)\n\n'Create the parts list.    \nTry\noPartList = oSheet.PartsLists(1)\n\nCatch\noPartsList = oSheet.PartsLists.Add(oDrawingView, oPlacementPoint)   'oDrawingView'Set parts list To a specific layer\noPartsList.Layer = oDrawDoc.StylesManager.Layers.Item(\"Visible (ANSI)\")\n'Set parts list To a specific style'oPartsList.Style = oDrawDoc.StylesManager.PartsListStyles.Item(\"MULTIPLE-SINGLE PARTS LIST\")\noPartsList.Style = oPLS\n\n'reposition parts list to top left\noPlaceX = oBorder.RangeBox.MinPoint.X + (oPartsList.RangeBox.MaxPoint.X - oPartsList.RangeBox.MinPoint.X)\noPlaceY = oBorder.RangeBox.MaxPoint.Y\noPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(oPlaceX,oPlaceY)\noPartslist.position = oPlacementPoint\nEnd Try\n\n    auto = iLogicVb.Automation\n    auto.RunExternalRule(oDrawDoc,\"AutoFill Border\")\n'Return the Drawing Document 'Return oDrawDoc'Dim oBaseViewOptions As NameValueMap'oBaseViewOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n' Set the representations to use when creating the base view.\n ' oBaseViewOptions.Add(\"PositionalRepresentation\", \"Position1\")\n  'oBaseViewOptions.Add(\"DesignViewRepresentation\", \"View1\")\n  'oBaseViewOptions.Add(\"DesignViewAssociative\", True)'End Function\n\niProperties.Value(\"Project\", \"Project\") = iProperties.Value(oPartDoc, \"Project\", \"Project\")\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Vault Check in get restrictions\n                    ", "solution": [" private void CheckinFileEvents_GetRestrictions(object sender, CheckinFileCommandEventArgs e)\n        {\n            //add code here;\n            Autodesk.Connectivity.WebServicesTools.WebServiceCredentials CurrentCredentials =\n                        new Autodesk.Connectivity.WebServicesTools.WebServiceCredentials((IWebService)sender);\n            Autodesk.Connectivity.WebServicesTools.WebServiceManager mWsMgr = new Autodesk.Connectivity.\n                  WebServicesTools.WebServiceManager(CurrentCredentials);\n            //use the mWsMgr to retrieve all file data accessing the filemaster\n            //apply the condition to (not) restrict this particular file\n\n            e.AddRestriction(new ExtensionRestriction(\"Check In restricted\", \"Test impact on local file and Vault Browser\"));\n\n        }"], "author": "Markus.Koechl"},
{"created at": [], "solution Title": "\n                        Re: Get the center point of circular edge\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Get ipt part number in an idw file\n                    ", "solution": ["ThisApplication", ".", "ActiveDocument", ".", "Sheets", "(", "1", ")", ".", "DrawingViews", "(", "1", ")", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", ".", "PropertySets", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", ".", "Item", "(", "\"", "Part Number", "\"", ")", ".", "Value"], "author": "waynehelley"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2018 - Problem with Collection / Reusing Selection Set\n                    ", "solution": [], "author": "MattH_Work"},
{"created at": [], "solution Title": "\n                        Re: Cannot find a rule with the name \"\".\n                    ", "solution": ["Sub Main()\n\t\tDim BaseName As String\n\t\tDim BaseID As Integer\n\t\tDim BaseUse As String\n\t\tDim EndHolder As Integer = 0 'EndHolder will act as the numerical value that will be attached to the end of the property name.\n\t\tDim oCurrentDoc as Object = ThisDoc.Document\n\t\t\n\t\t'define the ilogicAutomation\n\t\tDim iLogicAuto As Object \n\t\tiLogicAuto = iLogicVb.Automation \n\t\n\t\tIf oCurrentDoc.DocumentType = 12291 'it's an assembly file\n\t\t\tFor Each docFile In oCurrentDoc.AllReferencedDocuments\n\t\t\t\tiLogicAuto.RunExternalRule(docFile, \"_DeleteTriggers\")\n\t\t\tNext docFile\n\t\tEnd If\n\t\t\n\t\tTry\n\t\t\tcustomIPropSet = oCurrentDoc.PropertySets.Item(\"iLogicEventsRules\")\n\t\tCatch\n\t\tEnd Try\n\t\tTry\n\t\t\tIf customIPropSet Is Nothing Then\n\t\t\t\tcustomIPropSet = oCurrentDoc.PropertySets.Item(\"_iLogicEventsRules\")\n\t\t\tEnd If\n\t\tCatch \n\t\tEnd Try\n\t\n\t\tTry\n\t\t\tIf customIPropSet.InternalName <> \"{2C540830-0723-455E-A8E2-891722EB4C3E}\" Then\n\t\t\t\tCall customIPropSet.Delete\n\t\t\t\tcustomIPropSet = oCurrentDoc.PropertySets.Add(\"iLogicEventsRules\", \"{2C540830-0723-455E-A8E2-891722EB4C3E}\")\n\t\t\tEnd If\n\t\tCatch \n\t\tEnd Try\n\t\n\t\tTry\n\t\t\tIf customIPropSet Is Nothing Then\n\t\t\t\tcustomIPropSet = oCurrentDoc.PropertySets.Add(\"iLogicEventsRules\", \"{2C540830-0723-455E-A8E2-891722EB4C3E}\")\n\t\t\tEnd If\n\t\tCatch \n\t\tEnd Try\n\t\n\t\tIf customIPropSet Is Nothing Then\n\t\t\t\tMsgBox(\"Unable to delete the Event Triggers property for this file!\", , \"Event Triggers Not Set\")\n\t\t\tExit Sub\n\t\tEnd If\n\t\t\t\t\t\t\n\t\tIf customIPropSet.Count > 0 Then\n\t\t'We'll make a loop! This will go through each Property (Event Trigger), 1 Property at a time\n\t\t\tFor propItemCounter = 1 To customIPropSet.Count Step 1\n\t\t\t\tTry\n\t\t\t\t\tcustomIPropSet.Item(propItemCounter).delete\n\t\t\t\tCatch\n\t\t\t\tEnd Try\n\t\t\tNext\n\t\tEnd If\t\n\tEnd Sub", "For", " ", "propItemCounter", " ", "=", " ", "customIPropSet", ".", "Count", " ", "To", " ", "1", " ", "Step", " ", "-", "1"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Create Folder for Symbols in drawings\n                    ", "solution": ["Public Sub SS_Subfolders()\n    If ThisApplication.ActiveDocument Is Nothing Then\n        Exit Sub\n    Else\n        If ThisApplication.ActiveDocument.DocumentType = kDrawingDocumentObject Then\n            Dim InvDoc As Document\n            Set InvDoc = ThisApplication.ActiveDocument\n        Else\n            Exit Sub\n        End If\n    End If\n    \n    Dim BP As BrowserPane\n    Set BP = InvDoc.BrowserPanes.Item(\"Model\")\n    Dim SS_BN As BrowserNode\n    Set SS_BN = BP.TopNode.BrowserNodes.Item(\"Drawing Resources\").BrowserNodes.Item(\"Sketch Symbols\")\n    Dim SS_Coll As ObjectCollection\n    Set SS_Coll = ThisApplication.TransientObjects.CreateObjectCollection\n    Dim i As Long\n    For i = 65 To 90\n        SS_Coll.Clear\n        For Each BrowserNode In SS_BN.BrowserNodes\n            If (BrowserNode.NativeObject.Type <> kBrowserFolderObject) And (Left(BrowserNode.BrowserNodeDefinition.Label, 1) = Chr$(i)) Then\n                SS_Coll.Add (BrowserNode)\n            End If\n        Next BrowserNode\n        If SS_Coll.Count > 0 Then\n            Set BF = BP.AddBrowserFolder(Chr$(i), SS_Coll)\n        End If\n    Next i\nEnd Sub"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Inventor Process stays running\n                    ", "solution": ["' Set reference to app ID\nDim invAppType As Type = GetTypeFromProgID(\"Inventor.Application\")\n\n' Create an instance of inventor\nInvApp = CreateInstance(invAppType)\n\n' Make inventor visible\nInvApp.Visible = True", "Process.Start(\"C:\\Program Files\\Autodesk\\Inventor 2018\\Bin\\Inventor.exe\")", "\nThread.Sleep(5000)", "Try", "\n   InvApp = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")", "Catch", "\n    Thread.Sleep(5000)\n    InvApp = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n", "End Try"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: List sketch symbols in a folder\n                    ", "solution": ["Sub List Symbols()\n\n\tDim oPane As BrowserPane\n\tDim oNode As BrowserNode\n\tDim oTopNode As BrowserNode\n\tDim oDwgResourcesFolder As BrowserNode\n\tDim oSketchedSymbolsFolder As BrowserNode\n\t\n\toPane = ThisApplication.ActiveDocument.BrowserPanes(\"Model\")\n\n\toDwgResourcesFolder = oPane.TopNode.BrowserNodes.Item(\"Drawing Resources\")\n\toSketchedSymbolsFolder = oDwgResourcesFolder.BrowserNodes.Item(4)\n\t\n\tFor Each oNode In oSketchedSymbolsFolder.BrowserNodes\n\t\toNodeName = Right(oNode.FullPath, Len(oNode.FullPath) - InStrRev(oNode.FullPath, \":\", -1))\t\n\tNext\n\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Hole Table iLogic\n                    ", "solution": ["Sub", " ", "Main", "()", "\n    ", "Dim", " ", "oHoleTable", " ", "As", " ", "HoleTable", " ", "=", " ", "ThisDoc", ".", "Document", ".", "ActiveSheet", ".", "HoleTables", "(", "1", ")", "\n    \n    ", "For", " ", "Each", " ", "oRow", " ", "In", " ", "oHoleTable", ".", "HoleTableRows", "\n        ", "oRow", ".", "HoleTag", ".", "Text", " ", "=", " ", "oRow", ".", "HoleTag", ".", "Text", ".", "Replace", "(", "\"", "T", "\"", ", ", "\"", "R", "\"", ")", "\n    ", "Next", "\n", "End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Finding specific virtual part in BOM\n                    ", "solution": ["MsgBox(oBOMRow.ComponentDefinitions(1).Type)\n\n\n'This returns 100676072.\n' As it is a type and the Type property returns a value corresponding to an ObjectTypeEnum, we look it up in the API Help.\n' It tells us this corresponds to virtual component definition", "oDef = oBomRow.ComponentDefinitions(1)\nIf oDef.Type = 100675072 'Virutal Component", "Function", "  ", "BomNumber", "(", "PartName", " ", "As", " ", "String", ", ", "Item", " ", "As", " ", "Integer", ")", "\n\n    ", "Dim", " ", "oAsm", " ", "As", " ", "AssemblyDocument", "\n    ", "Dim", " ", "oBom", " ", "As", " ", "BOM", "\n    ", "Dim", " ", "oBomRows", " ", "As", " ", "BOMRowsEnumerator", "\n    ", "Dim", " ", "oBomRow", " ", "As", " ", "BOMRow", "\n    ", "Dim", " ", "oBomView", " ", "As", " ", "BOMView", "\n    ", "Dim", " ", "oDef", " ", "As", " ", "ComponentDefinition", "\n    ", "Dim", " ", "PartNumber", " ", "As", " ", "String", "\n    \n    ", "oAsm", " ", "=", " ", "ThisDoc", ".", "Document", "\n    ", "oBom", " ", "=", " ", "oAsm", ".", "ComponentDefinition", ".", "BOM", "\n    ", "oBom", ".", "StructuredViewEnabled", " ", "=", " ", "True", "\n    ", "oBom", ".", "StructuredViewFirstLevelOnly", " ", "=", " ", "False", "\n    \n    ", "oBomView", " ", "=", " ", "oBom", ".", "BOMViews", "(", "\"", "Structured", "\"", ")", "\n    ", "oBomRows", " ", "=", " ", "oBomView", ".", "BOMRows", "\n    \n    ", "For", " ", "Each", " ", "oBomRow", " ", "In", " ", "oBomRows", "\n        ", "oDef", " ", "=", " ", "oBomRow", ".", "ComponentDefinitions", "(", "1", ")", "\n        \n        ", "If", " ", "oDef", ".", "Type", " ", "=", " ", "100675072", " ", "'", "Virutal Component", "\n            ", "PartNumber", " ", "=", " ", "oDef", ".", "PropertySets", "(", "\"", "{32853F0F-3444-11D1-9E93-0060B03C1CA6}", "\"", ")(", "\"", "Part Number", "\"", ")", ".", "Value", "\n        ", "Else", "\n            ", "PartNumber", " ", "=", " ", "oDef", ".", "Document", ".", "PropertySets", "(", "\"", "{32853F0F-3444-11D1-9E93-0060B03C1CA6}", "\"", ")(", "\"", "Part Number", "\"", ")", ".", "Value", "\n        ", "End", " ", "If", "\n        \n        ", "If", " ", "PartName", " ", "=", " ", "PartNumber", " ", "Then", " ", "oBomRow", ".", "itemNumber", " ", "=", " ", "Item", "\n    ", "Next", "    \n\n", "End Function"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to change save settings on the save tab in iProperties\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: In assembly context: set  Part Number equal to File Name\n                    ", "solution": ["Sub Main()", "    Dim oDoc As Document\n    oDoc = ThisDoc.Document\n\n    If Not oDoc.DocumentType = kAssemblyDocumentObject Then", "        MsgBox(\"Rule to be ran from assembly level only!\") \n        Exit Sub\n    End If\n\n    Dim docFile As Document\n    For Each docFile In oDoc.AllReferencedDocuments\n        ThisApplication.Documents.Open(docFile.FullFileName, True)\n                \n        Dim docName As String", "        docName = System.IO.Path.GetFileNameWithoutExtension(docFile.FullFileName)\n        \n        docFile.PropertySets(\"Design Tracking Properties\")(\"Part Number\").Value = docName\n", "        ThisApplication.SilentOperation = True\n        docFile.Close(False) ' SkipSave bool = false => Save file on close", "        ThisApplication.SilentOperation = False\nNext", "'set top level part number\niProperties.Value(\"Project\", \"Part Number\") = _\nThisDoc.FileName(False) 'False = without extension\n\n'set each component part number\nDim docFile As Document\nFor Each docFile In ThisApplication.ActiveDocument.AllReferencedDocuments\n\tdocName0 = docFile.FullFileName\n\tdocName1 = System.IO.Path.GetFileName(docName0)\n\tdocName2 = System.IO.Path.GetFileNameWithoutExtension(docName0)\n\tiProperties.Value(docName1, \"Project\", \"Part Number\") = docName2\nNext"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Disabling radial marking menu gestures and sketch semi-auto projection\n                    ", "solution": ["InventorApplicationObject => SketchOptions => AutomaticReferenceEdges = False", "InventorApplicationObject => UserInterfaceManager => ShowMarkingMenu = False"], "author": "spencer"},
{"created at": [], "solution Title": "\n                        Re: Add event handler\n                    ", "solution": ["UserInputEvents.OnActivateCommand( CommandName As String, Context As NameValueMap )"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: High RAM usage, possible memory leak?\n                    ", "solution": [], "author": "S7RM7RPR"},
{"created at": [], "solution Title": "\n                        Re: File rename popup\n                    ", "solution": ["Imports System.IO\n\n'define the active document\noDoc = ThisDoc.Document\n\n'create a file dialog box\nDim oFileDlg As inventor.FileDialog = Nothing\nInventorVb.Application.CreateFileDialog(oFileDlg)\n\n'set the assembly part name to = filename \noDoc.DisplayName = \"\"\n\n'set Part type\noFileDlg.Filter = \"Autodesk Inventor Part Files (*.ipt)|*.ipt\"\n\n'set the directory to open the dialog at\noFileDlg.InitialDirectory = ThisDoc.WorkspacePath()\n\n'Check for existing \"S-C-1-Metal\" (looking for the #)\n                 'Change the # to the next available #\n                 'Set the new filename\n\nDim fileName As String = \"S-C-\" & 1 & \"-Metal.ipt\"\nDim fInfo As FileInfo()\nDim dirInfo As New DirectoryInfo(oFileDlg.InitialDirectory)\nfInfo = dirInfo.GetFiles()\n\nDim i As Integer = 1\nDim file As FileInfo\nReiterate:\nFor Each file In fInfo\n    If file.Name = fileName Then\n            i = i + 1\n            fileName = \"S-C-\" & i & \"-Metal.ipt\"\n            Goto Reiterate\n        End If\n    Next\n\n'set the file name string to use in the input box\noFileDlg.FileName = fileName                  \n\n'work with an error created by the user backing out of the save \noFileDlg.CancelError = True\nOn Error Resume Next\n\n'specify the file dialog as a save dialog (rather than a open dialog)\noFileDlg.ShowSave()\n\n\n'catch an empty string in the imput\nIf Err.Number <> 0 Then\nMessageBox.Show(\"No File Saved.\", \"iLogic: Dialog Canceled\")\nElseIf oFileDlg.FileName <> \"\" Then\nMyFile = oFileDlg.FileName\n\n'save the file \noDoc.SaveAs(MyFile, False) 'True = Save As Copy & False = Save As\nEnd If"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Custom Material Library Appearance Information\n                    ", "solution": [], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Browser Folders and Virtual Parts - error creating the folder the second tim\n                    ", "solution": ["Sub AddToFolder (asmDoc as AssemblyDocument, fldName As String)\n\nDim oDef as AssemblyComponentDefinition = asmDoc.ComponentDefinition\n\nDim oOcc as ComponentOccurrence\n\nDim oFldr As BrowserFolder\nDim newFldr As BrowserFolder\n\nDim oNode As BrowserNode\n\nDim TempFldrName As String = \"TEMP\"\nDim i As Integer\n\n' Dim fldChk as Boolean\n\nFor i = 1 To oPane.TopNode.BrowserFolders.Count\n\tIf oPane.TopNode.BrowserFolders.Item(i).Name = fldName Then\n\t\tAddFldrContentsToCollection ( VirtPartColl , oPane.TopNode.BrowserFolders.Item(i))\n\t\toPane.TopNode.BrowserFolders.Item(i).Delete\n\t\tExit For\n\tEnd If\nNext i\n\n' Add the folder if it does not exist\n\nIf VirtPartColl.Count > 0 Then\n\tTry\n\t\toFldr = oPane.AddBrowserFolder(fldName, VirtPartColl)\n\tCatch\n\t\tNewCollection(PrefixChk)\n\t\toFldr = oPane.AddBrowserFolder(fldName, VirtPartColl)\n\tEnd Try\nEnd If\n\nExit Sub\n\nEnd Sub", "Function NewCollection(chkString as String)\n' Virtual parts should be in the top folder level\n\n' Declare oNode for conversion purposes\nDim oNode As browsernode\n\n' Clear out the collection\nVirtPartColl.Clear\n\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = asmDoc.ComponentDefinition\n\n'Iterate through all of the occurrences in the assembly\nDim asmOcc As ComponentOccurrence\nFor Each asmOcc  In oAsmCompDef.Occurrences\n\t'get name of occurence only (sees only everything left of the colon)\n\tDim oOcc As Object\n\toOcc = asmOcc.Name.Split(\"-\")(0)\n\t'look at only virtual components\n\tIf TypeOf asmOcc.Definition Is VirtualComponentDefinition Then\n\t'compare name selected from list to the existing virtual parts\n\t\tIf oOcc = chkString Then\n\t\t'delete existing virtual parts if name matches\n\t\t\toNode = oPane.GetBrowserNodeFromObject(asmOcc)\n\t\t\tVirtPartColl.Add (oNode)\n\t\tEnd If\n\tEnd If\nNext asmOcc\n\nEnd Function"], "author": "yosso22"},
{"created at": [], "solution Title": "\n                        Re: Find Assembly Components by Property with Code\n                    ", "solution": ["Sub Main()\n\tInventorVb.DocumentUpdate()\n\tiLogicVb.UpdateWhenDone = True\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n\tIf oDoc.DocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then Exit Sub\n\tDim oCD As AssemblyComponentDefinition = oDoc.ComponentDefinition\n\tSetRepresentation(oCD)\n\tIterate(oCD.Occurrences)\nEnd Sub\n\nPrivate _ViewRepre As String = \"Default\"\nPrivate _PropName As String = \"SPL_Simple\"\nPrivate _PropVal As String = \"True\"\nPrivate _PropSet As String = \"Inventor User Defined Properties\"\n\nSub SetRepresentation(oCD As AssemblyComponentDefinition)\n\tTry\n\t\tDim oVRs As DesignViewRepresentations = oCD.RepresentationsManager.DesignViewRepresentations\n\t\tDim oVR As DesignViewRepresentation = oVRs(_ViewRepre)\n\t\toVR.Activate()\n\t\toVR.HideAll()\n\tCatch\n\tEnd Try\nEnd Sub\n\nSub Iterate(oOccs As ComponentOccurrences)\n\tFor Each oOcc As ComponentOccurrence In oOccs\n\t\tTry\n\t\t\tDim isVisible As Boolean = False\n\t\t\tTry\n\t\t\t\tDim oDoc As Document = oOcc.Definition.Document\n\t\t\t\tDim oPropSet As PropertySet = oDoc.PropertySets(_PropSet)\n\t\t\t\tDim oProp As Inventor.Property = oPropSet(_PropName)\n\t\t\t\tDim oVal As String = oProp.Expression\n\t\t\t\tisVisible = (oVal = _PropVal)\n\t\t\tCatch\n\t\t\tEnd Try\n\t\t\toOcc.Visible = isVisible\n\t\t\tIf TypeOf oOcc.Definition Is AssemblyComponentDefinition Then\n\t\t\t\tIterate(oOcc.SubOccurrences)\n\t\t\tEnd If\n\t\tCatch\n\t\tEnd Try\n\tNext\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: use iLogic to turn off translucency and change colour of surface bodies\n                    ", "solution": ["oVisible = InputRadioBox(\"Select One\", \"Turn on\", \"Turn Off\", True, \"iLogic\")\n\nIf oVisible = True Then\noTranslucent = InputRadioBox(\"Select One\", \"Translucent\", \"Opaque\", True, \"iLogic\")\nEnd If\n\nDim oDoc As PartDocument\noDoc = ThisApplication.ActiveDocument\n\noColor = \"Red\"\n\nDim localAsset As Asset\n\nTry \n\tlocalAsset = oDoc.Assets.Item(oColor)\nCatch\n\n\tDim assetLib As AssetLibrary\n\tassetLib = ThisApplication.AssetLibraries.Item(\"Autodesk Appearance Library\")\n\t\n\tDim libAsset As Asset\n\tlibAsset = assetLib.AppearanceAssets.Item(oColor)\n\t\n\t' Copy the asset locally.\n\tlocalAsset = libAsset.CopyTo(ThisApplication.ActiveDocument)\n\t\nEnd Try\n\nDim oWkSurf As WorkSurface\nDim oSrfBod As SurfaceBody\n\nFor Each oWkSurf In oDoc.ComponentDefinition.WorkSurfaces\t\t\t\n\tFor Each oSrfBod In oWkSurf.SurfaceBodies   \n\t\toSrfBod.Visible = oVisible\n\t\toWkSurf.Translucent = oTranslucent\n\t\toSrfBod.Appearance = localAsset\n\tNext\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: run all rules in subassemblies and parts from top level\n                    ", "solution": ["Sub Main()\n      On Error Resume Next\n      Dim oDoc As Document = ThisApplication.ActiveDocument\n\n      oAuto = iLogicVb.Automation\n\n      Call RunAllRules(oDoc)\n\n      For Each oSubDoc in oDoc.AllReferencedDocuments\n            Call RunAllRules(oSubDoc)\n      Next\n\nEnd Sub\n\nDim oAuto As Object\n\nSub RunAllRules(oRDoc)\n\n      For Each oRule In oAuto.Rules(oRDoc)\n            oAuto.RunRule(oRDoc, oRule.Name)\n      Next\n\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Made PDF w/ REV\n                    ", "solution": ["oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Auto Reattach Balloon\n                    ", "solution": ["Call oSelectset.Select (oBalloon)\n", "Public Sub AutoReattachAnnotation()\n    \n    Dim odoc As Document\n    Set odoc = ThisApplication.ActiveDocument\n    \n    If ThisApplication.Documents.Count = 0 Then\n        MsgBox \"A document must be open\", vbExclamation\n    Else\n        If odoc.DocumentType <> kDrawingDocumentObject Then\n            MsgBox \"Must be in Drawing document\", vbExclamation\n        Else\n            Dim oDrawDoc As DrawingDocument\n            Set oDrawDoc = ThisApplication.ActiveDocument\n                           \n            Dim oSelectset As SelectSet\n            Set oSelectset = oDrawDoc.SelectSet\n            oSelectset.Clear\n            \n            Dim oBalloon As Balloon\n            Dim aantal As Integer\n            aantal = oDrawDoc.ActiveSheet.Balloons.Count\n            \n            Dim oTG As TransientObjects\n            Set oTG = ThisApplication.TransientObjects\n            Dim oBalloonCollection As ObjectCollection\n            Set oBalloonCollection = oTG.CreateObjectCollection\n                        \n            Dim i As Integer\n            For i = 1 To oDrawDoc.ActiveSheet.Balloons.Count\n                Set oBalloon = oDrawDoc.ActiveSheet.Balloons.Item(i)\n                Call oBalloonCollection.Add(oBalloon)\n            Next\n             \n            Call oSelectset.SelectMultiple(oBalloonCollection)\n            Call ThisApplication.CommandManager.ControlDefinitions.Item(\"DLxAnnoReconnectCmd\").Execute\n            oSelectset.Clear\n            \n        End If\n    End If\n    \nEnd Sub"], "author": "dominiek.vanwes"},
{"created at": [], "solution Title": "\n                        Re: VBA see if part is checked out from Vault\n                    ", "solution": ["Private Function IsFileReadOnly(sFile) As Boolean\n     ' Test to see if the Read-only attribute was assigned to the file.\n\n    If GetAttr(sFile) And vbReadOnly Then\n        IsFileReadOnly = True\n    Else\n       IsFileReadOnly = False\n    End If\n\nEnd Function"], "author": "rcolon9E4ZX"},
{"created at": [], "solution Title": "\n                        Re: Need help with this code to get the First 3 Letter of FIlename\n                    ", "solution": ["Dim", " ", "docFile", " ", "As", " ", "Document", "\n\n", "For", " ", "Each", " ", "docFile", " ", "In", " ", "oDoc", ".", "AllReferencedDocuments", "\n\n    ", "ThisApplication", ".", "Documents", ".", "Open", "(", "docFile", ".", "FullFileName", ", ", "False", ")", "\n    \n", "Dim", " ", "FNamePos", " ", "As", " ", "Long", "\n", "FNamePos", " ", "=", " ", "InStrRev", "(", "docFile", ".", "FullFileName", ", ", "\"", "\\", "\"", ", ", "-", "1", ")", "\n", "Dim", " ", "docFName", " ", "As", " ", "String", "\n", "docFName", " ", "=", " ", "Right", "(", "docFile", ".", "FullFileName", ", ", "Len", "(", "docFile", ".", "FullFileName", ")", " ", "-", " ", "FNamePos", ")", "\n\n", "'", "takes the First 3 Letter of the active filename", "\n", "Dim", " ", "Fname", " ", "As", " ", "String", "\n", "Fname", " ", "=", " ", "Left", "(", "docFName", ",", "3", ")", "\n\n\n", "'", "AssFname = Left(docFName,8)", "\n\n", "iProperties", ".", "Value", "(", "docFName", ", ", "\"", "Summary", "\"", ", ", "\"", "Category", "\"", ")", " ", "=", " ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Stock Number", "\"", ")", "\n\n\n", "If", " ", "Fname", " ", ">=", " ", "100", " ", "Then", "\n        ", "docFile", ".", "ComponentDefinition", ".", "BOMStructure", " ", "=", " ", "51973", " ", "'", "BOMStructureEnum.kPurchasedBOMStructure", "\n        ", "docFile", ".", "Update", "\n        ", "docFile", ".", "Close", "\n        ", "'", "Else ", "\n    ", "End", " ", "If", "\n", "If", " ", "Fname", " ", "<", " ", "99", " ", "Then", "\n        ", "docFile", ".", "ComponentDefinition", ".", "BOMStructure", " ", "=", " ", "51970", " ", "'", "BOMStructureEnum.kNormalBOMStructure", "\n        ", "docFile", ".", "Update", "\n        ", "docFile", ".", "Close", "    "], "author": "Joel.Manrique"},
{"created at": [], "solution Title": "\n                        Re: IF-ELSE-THEN NOT RUNNING PROPERLY-ILOGIC\n                    ", "solution": [], "author": "cameron.frederi"},
{"created at": [], "solution Title": "\n                        Re: Autodesk Inventor LT without VBA\n                    ", "solution": [], "author": "WomyxKyrie"},
{"created at": [], "solution Title": "\n                        Re: the use of \"or\" \"orelse\" function or something similar t\n                    ", "solution": ["If (docFile.FullFileName Like \"*SA-*\") OR (docFile.FullFileName Like \"*Frame00*\") Then\n    docFile.ComponentDefinition.BOMStructure = 51971 \n    docFile.Update\nEnd If"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic to get Quantity of Solid Bodies?\n                    ", "solution": ["oDoc = ThisApplication.ActiveDocument\noCount = oDoc.ComponentDefinition.SurfaceBodies.Count \niProperties.Value(\"Custom\", \"Number_of_Bodies\") = oCount\nMessageBox.Show(oCount, \"iLogic\")\n\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Revision Cell & Derived Parameter\n                    ", "solution": ["Dim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\n\nDim oDerivedPartDef As DerivedPartComponent\nSet oDerivedPartDef = oDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents(1)\n\noDerivedPartDef.Definition.Parameters.Item(\"Plate_6_Thk\").IncludeEntity = True\n\n", "oDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents(1).Definition = oDerivedPartDef"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: DXF Export Inventor 2017\n                    ", "solution": [], "author": "Dcasas50"},
{"created at": [], "solution Title": "\n                        Re: Macro to create hole feature at center of selected face\n                    ", "solution": [], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Betreff: Update replacement object\n                    ", "solution": [], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: Problem with redefine surface\n                    ", "solution": ["    Dim oAssemblyDoc As AssemblyDocument = ThisApplication.ActiveDocument\n\n    Dim oAssemblyDef As AssemblyComponentDefinition = oAssemblyDoc.ComponentDefinition\n\n    Dim oOccurrence1 As ComponentOccurrence = Component.InventorComponent(\"CopyObject2_1\")", "    Dim oPartDef1 As PartComponentDefinition = oOccurrence1.Definition\n\n    Dim oOccurrence2 As ComponentOccurrence = Component.InventorComponent(\"CopyObject1\")\n    Dim oPartDef2 As PartComponentDefinition = oOccurrence2.Definition\n\n    Dim oOccurrence3 As ComponentOccurrence = Component.InventorComponent(\"CopyObject2_2\")\n    Dim oPartDef3 As PartComponentDefinition = oOccurrence3.Definition\n    \t\n    Dim oSourceBody As SurfaceBody = oPartDef1.Worksurfaces.Item(1).Surfacebodies(1)\n    Dim oSourceBody1 As SurfaceBody = oPartDef3.Worksurfaces.Item(1).Surfacebodies(1)\n\t\n    Dim oMatrix1 As Matrix\n    oMatrix1 = oOccurrence1.Transformation\n\t\n    Dim oMatrix3 As Matrix\n    oMatrix3 = oOccurrence3.Transformation\n\n    Dim oMatrix2 As Matrix\n    oMatrix2 = oOccurrence2.Transformation\n    oMatrix2.PreMultiplyBy(oMatrix1)    \n\n    Call oPartDef2.Features.NonParametricBaseFeatures.Add(oSourceBody, oMatrix2)\n\t\n    oMatrix2 = Nothing\n    oMatrix2 = oOccurrence2.Transformation\n    oMatrix2.PreMultiplyBy(oMatrix3)\n\t\n    Call oPartDef2.Features.NonParametricBaseFeatures.Add(oSourceBody1, oMatrix2)\n\t\n    oAssemblyDoc.Update"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: iLogic - How to center drawing dimensions upon creation\n                    ", "solution": [], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Change LineType on \"Get Model Sketches\" type curves\n                    ", "solution": ["Public Sub GetSketchCurves()\n    Dim drawDoc As DrawingDocument\n    Set drawDoc = ThisApplication.ActiveDocument\n    \n    Dim drawView As DrawingView\n    Set drawView = drawDoc.ActiveSheet.DrawingViews.Item(3)\n    \n    Dim partDoc As PartDocument\n    Set partDoc = drawView.ReferencedDocumentDescriptor.ReferencedDocument\n    \n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n    Dim sk As sketch\n    Set sk = partDef.sketches.Item(\"Sketch2\")\n    \n    Dim drawCurves As DrawingCurvesEnumerator\n    Set drawCurves = drawView.DrawingCurves(sk)\n    \n    Dim drawCurve As DrawingCurve\n    For Each drawCurve In drawCurves\n        drawCurve.LineType = kDashedDoubleDottedLineType\n    Next\nEnd Sub", "Dim oAsmDoc As AssemblyDocument = oInventorApp.ActiveDocument\nDim oAsmDef As AssemblyComponentDefinition = oAsmDoc.ComponentDefinition\n\nDim wdPart As ComponentOccurrence = oAsmDef.Occurrences.Item(1)\nDim wdDef As PartComponentDefinition = wdPart.Definition\n\nDim elemSketch As PlanarSketch = wdDef.Sketches.Item(2)\nDim elemSketchProxy As PlanarSketchProxy = Nothing\nwdPart.CreateGeometryProxy(elemSketch, elemSketchProxy)\n\nDim oMainView As DrawingView = CreateView(oAsmDoc, oMainPos, viewRight, viewVisible)\n\nDim drawCurves As DrawingCurvesEnumerator\ndrawCurves = oMainView.DrawingCurves(elemSketchProxy)\n\nDim drawCurve As DrawingCurve\nFor Each drawCurve In drawCurves\n    drawCurve.LineType = LineTypeEnum.kDashedHiddenLineType\nNext"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Conversion from string to type 'Double' is not valid\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: [ILOGIC] Automatic drawing for each part in folder\n                    ", "solution": ["Imports Inventor.ViewOrientationTypeEnum\nImports Inventor.DrawingViewStyleEnum\nImports System.IO\n\nPublic Sub Main\n\ncreateDrawingsFromAssembly()\n'CreateDrawingsFromAssembly(ThisDoc.Document)\nEnd Sub\nPublic Sub createDrawingsFromAssembly()\n    ' Set reference to active document.\n    ' This assumes the active document is an assembly\n    Dim oDoc As Inventor.Document = ThisApplication.ActiveDocument\n    \n\t\n    ' Get assembly component definition\n    \n\tIf TypeOf ThisApplication.ActiveDocument is AssemblyDocument Then\n\t\tdim oAssyDoc as AssemblyDocument = oDoc\n\t\tDim oCompDef As Inventor.ComponentDefinition\n\t\toCompDef = oAssyDoc.ComponentDefinition\n\t\tDim oSubDoc As Inventor.Document\n    \t' Get all occurrences from component definition for Assembly document\n    \tDim oCompOcc As ComponentOccurrence\n    \tFor Each oCompOcc In oCompDef.Occurrences\n        \t' Check if it's child occurrence (leaf node)\n        \tIf oCompOcc.SubOccurrences.Count = 0 Then\n\t\t\t\t'PART!\n\t\t\t\toSubDoc = CType(oCompOcc.Definition.Document, Document)\n\t\t\t\tBeginCreateDrawing(oSubDoc)\n        \tElse\n\t\t\t\t'ASSEMBLY!\n            \toSubDoc = CType(oCompOcc.Definition.Document, Document)\n\t\t\t\tBeginCreateDrawing(oSubDoc)\n            \tCall processAllSubOcc(oCompOcc) ' subassembly\n        \tEnd If\n    \tNext\n\tElse If TypeOf ThisApplication.ActiveDocument is PartDocument Then\n\t\tdim partDoc as PartDocument = oDoc\n\t\tBeginCreateDrawing(partDoc)\n    End If\n\tMessageBox.Show(\"Done Creating Drawings!\",\"You lucky thing you!\")\nEnd Sub\n\nPublic Function GetRootFolder(ByVal path As String) As String\nDim filepath As String = path\nDim directoryName As String \nDim i As Integer = 0\n\nWhile i < 2\n'While filepath <> Nothing\n    directoryName = System.IO.Path.GetDirectoryName(filepath)\n\t'MessageBox.Show(directoryName, \"GetRootFolder\")\n\n    'Console.WriteLine(\"GetDirectoryName('{0}') returns '{1}'\", filepath, directoryName)\n    filepath = directoryName\n    If i = 1\n       filepath = directoryName + \"\\\"  ' this will preserve the previous path\n    End If\n    i = i + 1\nEnd While\nReturn filepath\nEnd Function\n' This function is called for processing sub assembly.  It is called recursively\n' to iterate through the entire assembly tree.\nPrivate Sub processAllSubOcc(ByVal oCompOcc As ComponentOccurrence)\n   \n    Dim oSubCompOcc As ComponentOccurrence\n    For Each oSubCompOcc In oCompOcc.SubOccurrences\n        ' Check if it's child occurrence (leaf node)\n        If oSubCompOcc.SubOccurrences.Count = 0 Then\n            'PART!\n\t\t\toSubDoc = CType(oSubCompOcc.Definition.Document, Document)\n\t\t\tBeginCreateDrawing(oSubDoc)\n        Else\n            oSubDoc = CType(oSubCompOcc.Definition.Document, Document)\n\t\t\tBeginCreateDrawing(oSubDoc)\n            Call processAllSubOcc(oSubCompOcc)\n        End If\n    Next\nEnd Sub\n\nPrivate Sub BeginCreateDrawing(ByVal oDoc as Inventor.Document)\n\t'Dim projectRootFolder= GetRootFolder(oDoc.FullFileName)\n\tDim projectRootFolder= System.IO.Path.GetDirectoryName(oDoc.FullFileName)\n\tDim tmpfile As String = System.IO.Path.GetFileNameWithoutExtension(oDoc.FullFileName)\n\tDim tmpDrawingName As String = projectRootFolder & \"\\Drgs\\\" & tmpfile & \".dwg\"\n\t'Dim tmpDrawingName As String = projectRootFolder & \"Drgs\\\" & tmpfile & \".dwg\"\n\t'MessageBox.Show(tmpDrawingName, \"tmpDrawingName\")\n\tIf Not projectRootFolder.Contains(\"Content Center Files\") Then\n    \tIf Not System.IO.File.Exists(tmpDrawingName) = True Then\n\t\t\t'make a new drawing!\n\t\t\t'MessageBox.Show(\"No existing drawing found, creating one now!\", \"Go Gadget go!\")\n\t\t\tCreateDrawing(oDoc,tmpDrawingName)\n\t\tElse\n\t\t\tDim tmpDrawDoc As DrawingDocument\n\t\t\tUpdateStatusBar(\"Opening existing drawing: \" & tmpDrawingName) \n\t\t\ttmpDrawDoc = ThisApplication.Documents.Open(tmpDrawingName, True)\n\t\t\t'MessageBox.Show(\"Existing Drawing found: \"& tmpDrawingName, \"Title\")\n\t\tEnd If\n\tEnd If\n\nEnd Sub\nPrivate Sub CreateDrawing(ByVal oDoc as Inventor.Document,ByVal DrawingName As String)\n\tUpdateStatusBar(DrawingName) \n\tDim oBaseView As DrawingView\n\tDim oView1 as DrawingView\n\tDim oView2 as DrawingView\n\tDim oView3 as DrawingView\n\tDim oView4 as DrawingView \n\n\tDim ViewScale As Double = 1/10\n\tDim NodeName() As String\n\tDim InstNum As String\n\n\t'Define dwg Template File Location\n\tDim oDrawingDoc as DrawingDocument = ThisApplication.Documents.Add(DocumentTypeEnum.kDrawingDocumentObject, \"C:\\Users\\Public\\Documents\\Autodesk\\Inventor 2017\\Templates\\APS Standard.dwg\", True)\n\tDim oSheet As sheet = oDrawingDoc.Sheets.Item(1)\n\n\t'Define 2d view bottom left corner points for four views\n\toPoint1 = ThisApplication.TransientGeometry.CreatePoint2d(11, 11) 'BASE\n\toPoint2 = ThisApplication.TransientGeometry.CreatePoint2d(28, 11) 'RIGHT\n\toPoint3 = ThisApplication.TransientGeometry.CreatePoint2d(11, 20) 'TOP\n\toPoint4 = ThisApplication.TransientGeometry.CreatePoint2d(28, 20) 'ISOMETRIC\n\t'ISOMETRIC?\n\t'view styles can be: \n\t'DrawingViewStyleEnum.kHiddenLineRemovedDrawingViewStyle\n\t'DrawingViewStyleEnum.kHiddenLineDrawingViewStyle\n\t'DrawingViewStyleEnum.kShadedDrawingViewStyle\n\t'DrawingViewStyleEnum.kShadedHiddenLineDrawingViewStyle\n\t'DrawingViewStyleEnum.kFromBaseDrawingViewStyle\n\t'\n\t\n\toBaseView = oSheet.DrawingViews.AddBaseView(oDoc,oPoint1, ViewScale,kFrontViewOrientation, DrawingViewStyleEnum.kHiddenLineRemovedDrawingViewStyle)', KTANGENTEDGESON)\n\n\toView2 = oSheet.DrawingViews.AddProjectedView(oBaseView,oPoint2, DrawingViewStyleEnum.kFromBaseDrawingViewStyle)\n\toView3 = oSheet.DrawingViews.AddProjectedView(oBaseView,oPoint3, DrawingViewStyleEnum.kFromBaseDrawingViewStyle)\n\toView4 = oSheet.DrawingViews.AddProjectedView(oBaseView,oPoint4, DrawingViewStyleEnum.kFromBaseDrawingViewStyle)\n\toDrawingDoc.SaveAs(DrawingName,False)\n\t'synchronize drawing properties to the model it's based upon:\n\t'these next lines don't work because the code needs to be run from the drawing itself!\n\t'iLogicVb.RunExternalRule(\"C:\\VAULT WORKING FOLDER\\Designs\\Synchronize iProperties between parts and drawings.iLogicVb\")\n\t'oDrawingDoc.Save()\nEnd Sub\n\n''' <summary>\n''' updates the statusbar with a string value.\n''' </summary>\n''' <param name=\"Message\"></param>\n''' <remarks></remarks>\nPrivate Sub UpdateStatusBar(ByVal Message As String)\n\tThisApplication.StatusBarText = Message\nEnd Sub\n\n''' <summary>\n''' Updates the statusbar with a percentage value\n''' </summary>\n''' <param name=\"percent\"></param>\n''' <param name=\"Message\"></param>\n''' <remarks></remarks>\nPrivate Sub UpdateStatusBar(ByVal percent As Double, ByVal Message As String)\n\tThisApplication.StatusBarText = Message + \" (\" + percent.ToString(\"P1\") + \")\"\nEnd Sub", "If Not subdoc.File.FullFileName.Contains(\"Content\") Then 'skip CC and FACILITY files", "    If Not subdoc.File.fullfilename.contains(\"FACILITY\") Then", "       updatestatusbar(percent, \"Processing: \" & System.IO.Path.GetFileNameWithoutExtension(subdoc.File.fullfilename))", "       Dim oSketchBlocks As SketchBlockDefinitions = subdoc.ComponentDefinition.SketchBlockDefinitions", "       If oSketchBlocks.Count > 0 Then", "          SetorCreateCustomiProperty(subdoc, \"SKETCHBLOCKPRESENT\", True)", "          'iProperties.Value(\"Custom\", \"SKETCHBLOCKPRESENT\") = True", "          SetorCreateCustomiProperty(subdoc, \"SKETCHBLOCKCOUNT\", oSketchBlocks.Count.ToString())", "          'iProperties.Value(\"Custom\", \"NUMSKETCHBLOCKS\") = oSketchBlocks.Count", "       End If", "    End If", "End If"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: If the base view is an isometric view in idw Titleblock scale value should b\n                    ", "solution": ["Sub DrawingViewOrientationInTitleBlock()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    \n    Dim oDrawView As DrawingView\n    Set oDrawView = oSheet.DrawingViews(1)\n    If oDrawView.Camera.UpVector.X = 1 Or oDrawView.Camera.UpVector.Y = 1 Or oDrawView.Camera.UpVector.Z = 1 Then\n        strscale = oDrawView.ScaleString\n    Else\n        strscale = \"NTS\"\n    End If\n    \n    Dim oTitleBlock As TitleBlock\n    Set oTitleBlock = oSheet.TitleBlock\n    \n    Dim oTextbox As TextBox\n    For Each oTextbox In oTitleBlock.Definition.Sketch.TextBoxes\n        If oTextbox.Text = \"Scale\" Then 'This is the name you see in the promted text dialog box\n            Call oTitleBlock.SetPromptResultText(oTextbox, strscale)\n            Exit For\n        End If\n    Next oTextbox\n    \n        \nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Creation Balloon why not picking MidPoint\n                    ", "solution": [], "author": "prakasht66"},
{"created at": [], "solution Title": "\n                        Re: Set combobox item active\n                    ", "solution": ["'***********************************************\n' Copy below code to a module \nPublic oChangeMaterial As clsChangeMaterial\n\nPublic Sub CreateComboBox()\n    ' Set a reference to the active document.\n    ' This assumes that a part document is active.\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oCommandMgr As CommandManager\n    Set oCommandMgr = ThisApplication.CommandManager\n    \n    ' Set a reference to the collection of ControlDefinitions\n    Dim oControlDefs As ControlDefinitions\n    Set oControlDefs = oCommandMgr.ControlDefinitions\n    \n    On Error Resume Next\n    ' Create a combobox definition\n    Dim oComboBoxDef As ComboBoxDefinition\n    Set oComboBoxDef = oControlDefs.Item(\"MaterialsComboBox\")\n    \n    If oComboBoxDef Is Nothing Then\n        Set oComboBoxDef = oControlDefs.AddComboBoxDefinition(\"Materials\", \"MaterialsComboBox\", kNonShapeEditCmdType, 125, , \"Materials Combo\", \"Materials\")\n        \n        ' Set a reference to the materials collection.\n        Dim oMaterials As Materials\n        Set oMaterials = oDoc.Materials\n        \n        Dim oMaterial As Material\n        \n        For Each oMaterial In oMaterials\n            ' Add material names to the combo box definition\n            oComboBoxDef.AddItem (oMaterial.Name)\n        Next\n        \n        ' Set a reference to the Part Standard toolbar\n        Dim oPartFeatureToolbar As CommandBar\n        Set oPartFeatureToolbar = ThisApplication.UserInterfaceManager.CommandBars.Item(\"PMxPartFeatureCmdBar\")\n        \n        ' Add a combo box control to the toolbar\n        Dim oComboBoxControl As CommandBarControl\n        Set oComboBoxControl = oPartFeatureToolbar.Controls.AddComboBox(oComboBoxDef,1)\n        \n        oPartFeatureToolbar.Visible = True    \n    End If\n    \n    ' Clear current selection\n    oComboBoxDef.ListIndex = 0\n  \n    Set oChangeMaterial = New clsChangeMaterial\n    oChangeMaterial.Initialize\nEnd Sub\n\n\n'*************************************************************\n' The declarations and functions below need to be copied into\n' a class module whose name is \"clsChangeMaterial\".  The name \n' can be changed but you'll need to change the declaration in\n' the calling function \"CreateComboBox\" to use the new name.\n\nOption Explicit\nPrivate WithEvents oComboBoxDef As ComboBoxDefinition\n\n\nPublic Sub Initialize()\n\n    Dim oCommandMgr As CommandManager\n    Set oCommandMgr = ThisApplication.CommandManager\n   \n    ' Set a reference to the collection of ControlDefinitions\n    Dim oControlDefs As ControlDefinitions\n    Set oControlDefs = oCommandMgr.ControlDefinitions\n    \n    ' Set a reference to the \"MaterialsComboBox\" combo box definition\n    Set oComboBoxDef = oControlDefs.Item(\"MaterialsComboBox\")\n        \nEnd Sub\n\nPrivate Sub oComboBoxDef_OnSelect(ByVal Context As NameValueMap)\n    \n    If oComboBoxDef.ListIndex = 0 Then\n        Exit Sub\n    End If\n    \n    ' Get the selected item\n    Dim oMaterialName As String\n    oMaterialName = oComboBoxDef.ListItem(oComboBoxDef.ListIndex)\n    \n    ' Set a reference to the active part document\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oPartCompDef As PartComponentDefinition\n    Set oPartCompDef = oDoc.ComponentDefinition\n    \n    ' Get the selected material\n    Dim oMaterial As Material\n    Set oMaterial = oDoc.Materials.Item(oMaterialName)\n    \n    ' Change the part material\n    oPartCompDef.Material = oMaterial\nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Re-orientate Flat Pattern\n                    ", "solution": [], "author": "dean.morrison"},
{"created at": [], "solution Title": "\n                        Re: Adding a custom property call parent.\n                    ", "solution": ["Sub Main\n\t\n\tDim oAsmCompDef As AssemblyComponentDefinition\n\toAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\t\n\t'Iterate through all of the occurrences\n\tDim oOccurrence As ComponentOccurrence\n\tFor Each oOccurrence In oAsmCompDef.Occurrences\n\t\t\n\t\tCall ProcessAllChildren(oOccurrence)\n\t\n\tNext\n\nEnd Sub\n\nPublic Sub ProcessAllChildren(ByRef oOccurrence As ComponentOccurrence) \n\n\t\t' Get the custom property set.\n    \tDim invCustomPropertySet As PropertySet\n    \tinvCustomPropertySet = oOccurrence.Definition.Document.PropertySets.Item(\"Inventor User Defined Properties\")\n\t\t\n\t\tDim invParentCustProp As Inventor.Property\n        \n\t\tTry\n\t\t\t'If this fails Parent_Name Property does not exist\n\t\t\tinvParentCustProp = invCustomPropertySet.Item(\"Parent_Name\")\n\t\t\t'MessageBox.Show(\"invParentCustProp Exists\" , oOccurrence.Name)\n\n       \tCatch\n\t\t\t' Create the property as it did not exist.\n\t\t\t'MessageBox.Show(\"invParentCustProp Does not Exist\" , oOccurrence.Name)\n\t\t\tTry\n\t\t\t\t' oOccurrence.ParentOccurrence is nothing if it is a top level occurrence\n\t\t\t\t' ParentOccurence will be the sub assembly the occurrence is in\n\t\t\t\tinvCustomPropertySet.Add(oOccurrence.ParentOccurrence.Definition.Document.DisplayName, \"Parent_Name\")\n\n\t\t\tCatch\n\t\t\t\t'This works if the occurrence is in the top level assembly\n\t\t\t\t' oOccurrence.Parent.Document.DisplayName\n\t\t\t\tinvCustomPropertySet.Add(oOccurrence.Parent.Document.DisplayName, \"Parent_Name\")\n\t\t\tEnd Try\n\n\t\t\tinvParentCustProp = invCustomPropertySet.Item(\"Parent_Name\")\n   \t\t \n\t\tEnd Try\n\t\t\n\t\t'Update the value for the custom property for this occurrence if it does not already have it\n\t\tTry\n\t\t\tDim strExistingVal As String = invParentCustProp.Value\n\t\t\tIf Not strExistingVal.Contains(oOccurrence.ParentOccurrence.Definition.Document.DisplayName) Then \n\t\t\t' Try to get the ParentOccurrence, this will fail if it is a top level occurrence\n\t\t\tinvParentCustProp.Value = strExistingVal & \" ; \" & oOccurrence.ParentOccurrence.Definition.Document.DisplayName\n\t\t\t'MessageBox.Show(\"In Try after Occurrence.ParentOccurrence.Definition.Document.DisplayName\" , oOccurrence.ParentOccurrence.Definition.Document.DisplayName)\n\t\t\tEnd If\n\t\tCatch\n\t\t\tDim strExistingVal As String = invParentCustProp.Value\n\t\t\tIf Not strExistingVal.Contains(oOccurrence.Parent.Document.DisplayName) Then\n\t\t\t'This works the top level assembly\n\t\t\tinvParentCustProp.Value =  strExistingVal & \" ; \" & oOccurrence.Parent.Document.DisplayName\n\t\t\tEnd If\n\t\tEnd Try\n\t\n\tDim oCompOcc As ComponentOccurrence\n\tDim oComponentSubOccurrences As ComponentOccurrences\n'\t\n    For Each oCompOcc In oOccurrence.SubOccurrences\n      \n        If oCompOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n           oComponentSubOccurrences = oCompOcc.SubOccurrences\n\t\t   \n\t\t   If Not oComponentSubOccurrences Is Nothing Then\n\t\t\tIf oComponentSubOccurrences.count > 0 Then\n\t\t\t\tProcessAllChildren(oCompOcc)\n\t\t\tEnd If\n           End If\n        Else\n            ProcessAllChildren(oCompOcc)\n        End If\n        \n     Next\n\nEnd Sub\n", "Sub Main\n\t\n\tDim oAsmCompDef As AssemblyComponentDefinition\n\toAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\t\n\t'Iterate through all of the occurrences\n\tDim oOccurrence As ComponentOccurrence\n\tFor Each oOccurrence In oAsmCompDef.Occurrences\n\t\t\n\t\tCall ProcessAllChildren(oOccurrence)\n\t\n\tNext\n\nEnd Sub\n\nPublic Sub ProcessAllChildren(ByRef oOccurrence As ComponentOccurrence) \n\n\t\t' Get the custom property set.\n    \tDim invCustomPropertySet As PropertySet\n    \tinvCustomPropertySet = oOccurrence.Definition.Document.PropertySets.Item(\u200b\"Inventor User Defined Properties\")\n\t\t\n\t\tDim invParentCustProp As Inventor.Property\n        \n\t\tTry\n\t\t\t'If this fails Parent_Name Property does not exist\n\t\t\tinvParentCustProp = invCustomPropertySet.Item(\"Parent_Name\")\n\t\t\t'MessageBox.Show(\"invParentCustProp Exists\" , oOccurrence.Name)\n\n       \tCatch\n\t\t\t' Create the property as it did not exist.\n\t\t\t'MessageBox.Show(\"invParentCustProp Does not Exist\" , oOccurrence.Name)\n\t\t\tTry\n\t\t\t\t' oOccurrence.ParentOccurrence is nothing if it is a top level occurrence\n\t\t\t\t' ParentOccurence will be the sub assembly the occurrence is in\n\t\t\t\tDim filename As String = System.IO.Path.GetFileNameWithoutExtension(oOccurrence.parentOccurrence.Definition.Document.Displayname)\n\t\t\t\tinvCustomPropertySet.Add(filename, \"Parent_Name\")\n\t\t\tCatch\n\t\t\t\t'This works if the occurrence is in the top level assembly\n\t\t\t\t' oOccurrence.Parent.Document.DisplayName\n\t\t\t\tDim filename As String = System.IO.Path.GetFileNameWithoutExtension(oOccurrence.Parent.Document.DisplayName)\n\t\t\t\tinvCustomPropertySet.Add(filename, \"Parent_Name\")\n\t\t\tEnd Try\n\n\t\t\tinvParentCustProp = invCustomPropertySet.Item(\"Parent_Name\")\n   \t\t \n\t\tEnd Try\n\t\t\n\t\t'Update the value for the custom property for this occurrence if it does not already have it\n\t\tTry\n\t\t\tDim strExistingVal As String = invParentCustProp.Value\n\t\t\tDim filename As String = System.IO.Path.GetFileNameWithoutExtension(oOccurrence.ParentOccurrence.Definition.Document.DisplayName)\n\t\t\tIf Not strExistingVal.Contains(filename) Then\n\t\t\t\t' Try to get the ParentOccurrence, this will fail if it is a top level occurrence\n\t\t\t\tinvParentCustProp.Value = strExistingVal & \" ; \" & filename\n\t\t\t\t'MessageBox.Show(\"In Try after Occurrence.ParentOccurrence.Definition.Document.Di\u200bsplayName\" , oOccurrence.ParentOccurrence.Definition.Document.D\u200bisplayName)\n\t\t\tEnd If\n\t\tCatch\n\t\t\tDim strExistingVal As String = invParentCustProp.Value\n\t\t\tDim filename As String = System.IO.Path.GetFileNameWithoutExtension(oOccurrence.Parent.Document.DisplayName)\n\t\t\tIf Not strExistingVal.Contains(filename) Then\n\t\t\t\t'This works the top level assembly\n\t\t\t\tinvParentCustProp.Value =  strExistingVal & \" ; \" & filename\n\t\t\tEnd If\n\t\tEnd Try\n\t\n\tDim oCompOcc As ComponentOccurrence\n\tDim oComponentSubOccurrences As ComponentOccurrences\n'\t\n    For Each oCompOcc In oOccurrence.SubOccurrences\n      \n        If oCompOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n           oComponentSubOccurrences = oCompOcc.SubOccurrences\n\t\t   \n\t\t   If Not oComponentSubOccurrences Is Nothing Then\n\t\t\tIf oComponentSubOccurrences.count > 0 Then\n\t\t\t\tProcessAllChildren(oCompOcc)\n\t\t\tEnd If\n           End If\n        Else\n            ProcessAllChildren(oCompOcc)\n        End If\n        \n     Next\nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: sum estimated cost\n                    ", "solution": ["Sub Main\n\t'- - - - - - - - - - - sum the custom iProperty - - - - - - - - - -\n\t'clear the custom property in the assembly\n\tiProperties.Value(\"Project\", \"estimated cost\") = 0\n\t'set a reference to the assembly component definintion.\n\t'This assumes an assembly document is open.\n\tDim oAsmCompDef As AssemblyComponentDefinition\n\t'oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\toAsmCompDef = ThisDoc.Document.ComponentDefinition\n\t\n\tDim oOccurrence As ComponentOccurrence\n   \t'Process the sub assemblies\t\n\tFor Each oOccurrence In oAsmCompDef.Occurrences\n\t\t'MessageBox.Show(\"For Each oOccurrence \" , \"Comp Def\")\n\t\tIf oOccurrence.DefinitionDocumentType = kAssemblyDocumentObject Then\n\t\t If Not TypeOf oOccurrence.Definition Is VirtualComponentDefinition Then\n\t\t\tauto = iLogicVb.Automation\n\t\t\tauto.RunRule(oOccurrence.Definition.Document, \"Sum_Cost_WB_3\")\n\t\t End If\t\n\t\tEnd If\n\tNext\n\t\n\t'Iterate through all of the top level occurrences for this assembly get the sum\n\tFor Each oOccurrence In oAsmCompDef.Occurrences\n\t\tTotalAllParts(oOccurrence)\n\tNext\n\t\n\tMessageBox.Show(\"Setting Estimated cost for \" & ThisDoc.Document.DisplayName & \" to: \" & sumNumber, ThisDoc.Document.DisplayName)\n\tiProperties.Value(\"Project\", \"estimated cost\") = Round (sumNumber,2)\n\nEnd Sub\n\n'Global \nPrivate sumNumber As Double = 0\n\nSub TotalAllParts(ByRef oOccurrence As ComponentOccurrence) \n\t\n\tyNumber = iProperties.Value(oOccurrence.Name, \"Project\", \"estimated cost\")\n\tMessageBox.Show(\"yNumber =  \" & yNumber, oOccurrence.Name)\n\tsumNumber = sumNumber + yNumber\n\nEnd Sub\n"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Change Text under Base View\n                    ", "solution": [], "author": "nealon.luke"},
{"created at": [], "solution Title": "\n                        Re: Can't get oDoc.DocumentType to work today.\n                    ", "solution": ["Module hiddenModule \n\n\t' ***********************************\n\t' YOU CAN IGNORE THIS TOP BIT\n\t' ***********************************\n\n\tPublic Dim ThisApplication As Object\n\t\n\t\n\t' Don't pay attention to any of this. \n\t' When you try to access the 'ThisApplication' from \n\t' a level above the Main() Sub, there are permission\n\t' issues. All I'm doing here is creating a really \n\t' makeshift bridge... \n\t\n\tSub New ()\n\t\tTry\n\t\t\tThisApplication = GetObject(, \"Inventor.Application\")\n\t\t\t'MessageBox.Show(\"ThisApplication Set\")\n\t\tCatch ex As Exception\n\t\t\tMessageBox.Show(\"Inventor must be running.\", \"Inventor.exe Error\")\n\t\tEnd Try\n\tEnd Sub \n\t\n\t' ***********************************\n\t' PAY ATTENTION TO THE BELOW\n\t' ***********************************\n\t\n\tPublic Function MyThisDoc () As Inventor.Document\n\t\tMyThisDoc = ThisApplication.ActiveDocument \n\tEnd Function \n\t\n\tPublic Function MyThisDrawing () As Inventor.DrawingDocument\n\t\tMyThisDrawing = ThisApplication.ActiveDocument  \n\tEnd Function \n\t\nEnd Module\n\nSub Main () \n\tDim oDoc As Document \n\toDoc = MyThisDoc\n\t\n\tMessageBox.Show(oDoc.DocumentType.ToString(), \"oDoc\")\n\tMessageBox.Show(MyThisDoc.DocumentType.ToString(), \"MyThisDoc\")\n\tMessageBox.Show(MyThisDrawing.DocumentType.ToString(), \"MyThisDrawing\")\n\t\nEnd Sub ", "Dim oDoc As Document\noDoc = ThisDoc.Document\n\n' While you don't have to declare your \n' string variable, technically, I still\n' did out of clarity\nDim modelFullFileName As String\n\nSelect Case oDoc.DocumentType \n\tCase = kPartDocumentObject\n  \n\t\tIf TypeOf ThisApplication.ActiveEditObject Is Sketch Then\n\t\t\tMessageBox.Show(\"You have a sketch active in a part file.\", \"iLogic\")\n\t\t\tElse\n\t\t\tMessageBox.Show(\"This is a part file.\", \"iLogic\")\n\t\tEnd If\n  \n\tCase = kAssemblyDocumentObject\n  \n\t\tIf TypeOf ThisApplication.ActiveEditObject Is Sketch Then\n\t\t\tMessageBox.Show(\"You have a sketch active in an assembly file.\", \"iLogic\")\n\t\t\tElse\n\t\t\tMessageBox.Show(\"This is an assembly file.\", \"iLogic\")\n\t\tEnd If\n  \n\tCase = kDrawingDocumentObject\n    \n\t\tdrwquestion = _\n\t\t\tMessageBox.Show(\"This is a drawing file, Do you want to open the file?\", _\n\t\t\t\"Ilogic\", _\n\t\t\tMessageBoxButtons.YesNo,MessageBoxIcon.Question)\n\t\t\n\n\t\tIf drwquestion = vbYes Then\t\n\t\t\tmodelFullFileName = ThisDoc.ModelDocument.FullFileName\n\t\t\tThisApplication.Documents.Open(modelFullFileName, True)\n\t\t\tElse \n\t\t\tMessageBox.Show(\"Nothing Opened\", \"iLogic\")\n\t\tEnd If\n  \nEnd Select "], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Autodesk Inventor 2015 Licence type problem\n                    ", "solution": [], "author": "TravisNave"},
{"created at": [], "solution Title": "\n                        Re: Add workplane by selected face\n                    ", "solution": [], "author": "risto.asikainen"},
{"created at": [], "solution Title": "\n                        Re: VBA code to place a part in an assembly\n                    ", "solution": ["Public Sub AddOccurrence()\n    ' Set a reference to the assembly component definintion.\n    ' This assumes an assembly document is open.\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n    ' Set a reference to the transient geometry object.\n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n\n    ' Create a matrix.  A new matrix is initialized with an identity matrix.\n    Dim oMatrix As Matrix\n    Set oMatrix = oTG.CreateMatrix\n\n    ' Set the rotation of the matrix for a 45 degree rotation about the Z axis.\n    Call oMatrix.SetToRotation(3.14159265358979 / 4, _\n                            oTG.CreateVector(0, 0, 1), oTG.CreatePoint(0, 0, 0))\n\n    ' Set the translation portion of the matrix so the part will be positioned\n    ' at (3,2,1).\n    Call oMatrix.SetTranslation(oTG.CreateVector(3, 2, 1))\n\n    ' Add the occurrence.\n    Dim oOcc As ComponentOccurrence\n    Set oOcc = oAsmCompDef.Occurrences.Add(\"C:\\Temp\\Part1.ipt\", oMatrix)\nEnd Sub"], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: Remove \"Autodesk A360\" tab from Inventor 2016 Ribbon\n                    ", "solution": ["Sub Test()\n    Dim oRibbon As Ribbon\n    For Each oRibbon In ThisApplication.UserInterfaceManager.Ribbons\n        Dim oTab As RibbonTab\n        Debug.Print oRibbon.InternalName\n        \n        Set oTab = oRibbon.RibbonTabs(\"id_OnlineTab\")\n        oTab.Delete\n       \n    Next\nEnd Sub", " Private Sub oUserInterfaceEvents_OnEnvironmentChange(ByVal Environment As Environment, ByVal EnvironmentState As EnvironmentStateEnum, ByVal BeforeOrAfter As EventTimingEnum, ByVal Context As NameValueMap, HandlingCode As HandlingCodeEnum)\n    \n    If BeforeOrAfter = kAfter Then\n        Dim oRibbon As Ribbon\n        Set oRibbon = ThisApplication.UserInterfaceManager.ActiveEnvironment.Ribbon\n        Dim oTab As RibbonTab\n        For Each oTab In oRibbon.RibbonTabs\n            If oTab.DisplayName = \"Autodesk A360\" Then\n                oTab.visible = False\n                Exit For\n            End If\n        Next\n    End If\nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule to export custom number of pdf sheet\n                    ", "solution": ["'iLogic rule to export PDF from Inventor Drawings\n'By Fazlur Rahaman\n\n\n'May 5, 2016", "\n\n\nImports System.Windows.Forms\n\n", "' Query user\n'------start of iLogic-------", "\nquestion = MessageBox.Show(\"You want to create PDF of this file?\", \"Question\", MessageBoxButtons.YesNo, MessageBoxIcon.Question)\n\n", "' Set condition based on answer", "\nIf question <> vbYes Then Exit Sub\n\n", "' Get current location of this file", "\nDim ExportPath As String = ThisDoc.Path\n\n", "' Check that this file has been saved and actually exists on disk", "\nIf String.IsNullOrEmpty(ExportPath) Then\n\tMsgBox(\"This file has not yet been saved and doesn't exist on disk! - please save it first\",64, \"PDF EXPORT!\")\n\tExit Sub\nEnd If\n\n", "' Define folder browse dialog", "\nDim Dialog = New FolderBrowserDialog()\n\n", "' Set options for folder browser dialog", "\nDialog.SelectedPath = ExportPath\nDialog.ShowNewFolderButton = True\nDialog.Description = \"Choose Folder for Export...\"\n\nIf DialogResult.OK = Dialog.ShowDialog() Then ", "' Show dialog box", "\n\t", "' User clicked 'ok' on dialog box - capture the export path", "\n\tExportPath = Dialog.SelectedPath & \"\\\"\nElse\n\tExit Sub ", "' User clicked 'cancel' on dialog box - exit", "\nEnd If\n\n", "Dim SheetRange As String = InputBox(\"Please enter the range of sheets you want to export.\" & vblf & _\n\"You can use these input types:\" & vblf & \"  ' 1 ' ,  ' 1-10 ' \", \"Sheet range\", \"1-10\")\nIf SheetRange = vbNullString Then Exit Sub\nDim SPL As Integer = InStr(SheetRange, \"-\")\nDim L1 As Integer\nDim L2 As Integer\nIf SPL > 0 Then\n\tL1 = Val(Left(SheetRange, SPL))\n\tL2 = Val(Mid(SheetRange, SPL + 1))\nElse\n\tL1 = Val(SheetRange)\n\tL2 = Val(SheetRange)\nEnd If", "\n\noPDFAddIn = ThisApplication.ApplicationAddIns.ItemById _\n(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\noDocument = ThisApplication.ActiveDocument\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n", "' Formate PDF Setting", "\nIf Not oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then Exit Sub\noOptions.Value(\"All_Color_AS_Black\") = 1\noOptions.Value(\"Remove_Line_Weights\") = 1\noOptions.Value(\"Vector_Resolution\") = 4800\noOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\n", "' Range of pages for publishing", "\noOptions.Value(\"Custom_Begin_Sheet\") = ", "L1", "\noOptions.Value(\"Custom_End_Sheet\") = ", "L2", "\n\nExportPath = ExportPath & \"\\\" & ThisDoc.FileName(False)\nIf iProperties.Value(\"Project\", \"Revision Number\") >= \"1\" Then\n\tExportPath = ExportPath & \" R\" & iProperties.Value(\"Project\", \"Revision Number\")\nEnd If\noDataMedium.FileName = ExportPath & \".pdf\"\n\nTry\n\t", "' Publish document", "\n\toPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n\t", "'--------------------------------------------------?--------------------------------------------------?----------------\n\t' Ask the user if he wants to open the file", "\n\tquestion2 = MessageBox.Show(\"Open PDF file?\", \"Question\",MessageBoxButtons.YesNo,MessageBoxIcon.Question)\n\tIf question2  = vbYes Then\n\t\tThisDoc.Launch(oDataMedium.FileName)\n\tEnd If\nCatch\n\tMessageBox.Show(\"PDF not created, most likely someone else has it open.\", \"No PDF for you \" & ThisApplication.GeneralOptions.UserName & \"!\")\nEnd Try"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: VBA Return project template path\n                    ", "solution": ["    Dim sPath As String\n    sPath = ThisApplication.DesignProjectManager.ActiveDesignProject.TemplatesPath\n    MsgBox (sPath)"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic Automatic Drawing view Scale Label\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument = ThisDrawing.Document\nDim oSheet As Sheet  = oDrawDoc.ActiveSheet\nDim oSheets As Sheets\nDim oView As DrawingView\nDim oViews As DrawingViews\nDim oScale As Double\nDim oViewCount As Integer = 0\n\nIf ThisDoc.ModelDocument IsNot Nothing Then\noViews = oSheet.DrawingViews\nFor Each oView In oViews\noViewCount = oViewCount +1\n\nIf oViewCount = 1 Then\nMessageBox.Show(oView.ScaleString)\n'iProperties.Value(\"Custom\", \"Scale\").Value = oView.ScaleString\nEnd If\n\nNext\n\nElse\n\n'iProperties.Value(\"Custom\", \"Scale\").Value = \"None\"\nMessageBox.Show(\"None\")\nEnd If"], "author": "SutherNe"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Pattern occurrence w/out features\n                    ", "solution": ["oParentOccs.Clear\nFor Each oOccurrenceNotPattern In oAsmCompDef.Occurrences\nIf Component.IsActive( oOccurrenceNotPattern.Name) Then\n    \n'For Each oOccurrence In oAsmCompDef.Occurrences\nIf Not TypeOf oOccurrenceNotPattern.Definition Is VirtualComponentDefinition Then\n\toParentOccs.Add(oOccurrenceNotPattern)\n\nEnd If\nEnd If\nNext\n\noRectOccPattern = oAsmCompDef.OccurrencePatterns.AddRectangularPattern _\n(oParentOccs, oYAxis, True, 2*oRowSpacing*2.54, oRowCount/2-0.5)"], "author": "yancad33"},
{"created at": [], "solution Title": "\n                        Re: Batch export PDF with PartNr and Revnr\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Code Needs Modified - Help...\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Document checksum\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: AddIn - Creating iProperty expression bug?\n                    ", "solution": [], "author": "Rasmus"},
{"created at": [], "solution Title": "\n                        Re: Get the Loop lengt from Measure tool\n                    ", "solution": [], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: Add sketch point to existing block\n                    ", "solution": ["'", " Create a reference to the part document.", "'", " This assumes a part document is active.", "\n", "Dim", " ", "partDoc", " ", "As", " ", "PartDocument", "\n ", "partDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "'", " Reuse existing sketch block.", "\n", "Dim", " ", "ActiveBlock", " ", "As", " ", "SketchBlockDefinition", "\n", "ActiveBlock", " ", "=", " ", "partDoc", ".", "ComponentDefinition", ".", "SketchBlockDefinitions", ".", "Item", "(", "\"", "Point Block", "\"", ")", "\n\n", "'", " Get a reference to the SketchPoints collection. ", "\n", "Dim", " ", "points", " ", "As", " ", "Inventor", ".", "SketchPoints", " ", "=", " ", "ActiveBlock", ".", "SketchPoints", "\n", "Dim", " ", "lines", " ", "As", " ", "Inventor", ".", "SketchLines", " ", "=", " ", "ActiveBlock", ".", "SketchLines", " \n\n", "'", " Get a reference to the transient geometry object.", "\n", "Dim", " ", "transGeom", " ", "As", " ", "TransientGeometry", "\n ", "transGeom", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", "\n \n", "'", " Create X Axis", "\n", "line1", " ", "=", " ", "lines", ".", "AddByTwoPoints", "(", "transGeom", ".", "CreatePoint2d", "(", "-", "1", ", ", "0", ")", ", ", "transGeom", ".", "CreatePoint2d", "(", "1", ", ", "0", "))"], "author": "iogurt1"},
{"created at": [], "solution Title": "\n                        Re: Creating parameters only once\n                    ", "solution": ["Public Sub CreateParameters()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    GetParam oDoc, \"Length\"", "    GetParam oDoc, \"Width\"\nEnd Sub", "Private Sub GetParam(oDoc As PartDocument, oName As String)\n    Dim uParams As UserParameters", "    Set uParams = oDoc.ComponentDefinition.Parameters.UserParameters", "    Dim param As Parameter", "    ", "On Error GoTo NotFound", "    Set param = uParams(oName)", "    Exit Sub", "NotFound:", "\n    Set param = uParams.AddByValue(oName, 3 * 2.54, kDefaultDisplayLengthUnits)\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: CustomTable, detect if split\n                    ", "solution": ["Public Sub customTableIsSlpit_UsingBrowserPaneTest()\n    Dim oDrwDoc As DrawingDocument\n    Set oDrwDoc = ThisApplication.ActiveDocument\n    \n    Debug.Print oDrwDoc.ActiveSheet.CustomTables.count\n\n    Dim oBrowserPane As BrowserPane\n    Set oBrowserPane = oDrwDoc.BrowserPanes.ActivePane\n\n    Dim oTopBrowserNode As BrowserNode\n    Set oTopBrowserNode = oBrowserPane.TopNode\n   \n    Dim oBrowserNode As BrowserNode\n    \n    For Each oBrowserNode In oTopBrowserNode.BrowserNodes\n     If oBrowserNode.BrowserNodeDefinition.Label = \"Sheet:1\" Then\n        \n        Dim oBrowserNode2 As BrowserNode\n        For Each oBrowserNode2 In oBrowserNode.BrowserNodes\n               \n          If oBrowserNode2.BrowserNodeDefinition.Label = \"Employees\" Then\n                      \n            Dim oNativeObject As Object\n            Set oNativeObject = oBrowserNode2.NativeObject\n\n            If TypeName(oNativeObject) = \"CustomTable\" Then\n                If oBrowserNode2.BrowserNodes.count > 0 Then\n                    MsgBox \"Custom Table is split\"\n                Else\n                   MsgBox \"Custom Table is NOT split\"\n                End If\n                Exit For\n            End If\n         End If ' If label = \"Employees\"\n       Next\n      End If ' If label = \"Sheet:1\"\n    Next\n       \nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: save flat pattern as DXF macro (problem: empty filename)\n                    ", "solution": [], "author": "sveenmanSLY5M"},
{"created at": [], "solution Title": "\n                        Re: Ground component in API\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: how to get macro in server\n                    ", "solution": [], "author": "martinhoos"},
{"created at": [], "solution Title": "\n                        Re: how to get filename without extention\n                    ", "solution": [], "author": "sveenmanSLY5M"},
{"created at": [], "solution Title": "\n                        Re: Unable to export 3d point co-ordinates data to excel\n                    ", "solution": ["Sub ExportArbeitspunkte()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n   \n    Dim oDef As PartComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n   \n    Dim oWorkpoints As WorkPoints\n    Dim oWP As WorkPoint\n    Dim oP As Point\n       \n    'get all workpoints in this part\n    Set oWorkpoints = oDef.WorkPoints\n    \n    'Create a new Excel instance\n    Dim oExcelApplication As Excel.Application\n    Set oExcelApplication = New Excel.Application\n\n    'create a new excel workbook\n    Dim oBook As Excel.Workbook\n    Set oBook = oExcelApplication.Workbooks.Add()\n    Dim oSheet As Excel.WorkSheet\n    Set oSheet = oBook.ActiveSheet\n   \n    Dim nRow As Integer\n    nRow = 1\n\n    'write the coordinates into separate columns, one workpoint each row\n    For Each oWP In oWorkpoints\n        Set oP = oWP.Point\n        oSheet.Cells(nRow, 1) = oP.X * 10\n        oSheet.Cells(nRow, 2) = oP.Y * 10\n        oSheet.Cells(nRow, 3) = oP.Z * 10\n        nRow = nRow + 1\n    Next\n    \n    Dim OutputFile As String\n    OutputFile = Left(ThisApplication.ActiveDocument.FullFileName, _\n    Len(ThisApplication.ActiveDocument.FullFileName) - 4) + \"_Arbeitspunkte.xls\"\n                \n    On Error Resume Next\n    oBook.SaveAs (OutputFile)\n    oBook.Close\n    Set oBook = Nothing\n    Set oSheet = Nothing\n    Set oExcelApplication = Nothing\n    \n    MsgBox \"Es wurde eine Excel Tabelle im aktuellen Verzeichnis erstellt und eine neue IPT f\u00fcr den Import ge\u00f6ffnet!\"\n            \n    'Make a new part file\n    Dim oPartDoc As PartDocument\n    Set oPartDoc = ThisApplication.Documents.Add(kPartDocumentObject, ThisApplication.FileManager.GetTemplateFile(kPartDocumentObject))\n\n    \n    \n    \nEnd Sub"], "author": "martinhoos"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Count specific part in pattern\n                    ", "solution": ["Sub Main()\n    oName = \"", "MySearchedPartName", "\" ", "'Without extension", "\n    Dim oDoc As Document = ThisApplication.ActiveDocument\n    Dim OPS As OccurrencePatternElements = oDoc.ComponentDefinition.OccurrencePatterns.Item(\"", "Pattern-1", "\").OccurrencePatternElements\n    Dim OP As OccurrencePatternElement\n    For Each OP In OPS\n        SubAsm(OP.Occurrences)\n    Next\n    MsgBox(oCount)\nEnd Sub\n\nPrivate oName As String\nPrivate oCount As Integer\n\nSub SubAsm(oOccs As ComponentOccurrencesEnumerator)\n    Dim oOcc As ComponentOccurrence\n    For Each oOcc In oOccs\n        Dim OcName As String = oOcc.Name\n        OcName = Left(OcName, InStrRev(OcName, \":\", -1) - 1)\n        If OcName = oName Then oCount = oCount + 1\n    Next\nEnd Sub\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Ilogic: Changing the visibility of dashed lines in drawing\n                    ", "solution": [], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: Size of parts in an assembly\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: BrainStorm ideas for table Creation\n                    ", "solution": [], "author": "jbaum"},
{"created at": [], "solution Title": "\n                        Re: intelligent material assign\n                    ", "solution": [], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Betreff: constrain multiple parts\n                    ", "solution": ["Public Sub ConstraintsTest4_WB_Updated()\n \n Dim m_inventorApp As Inventor.Application\n Set m_inventorApp = ThisApplication\n\n Dim oAssyDoc As AssemblyDocument\n Set oAssyDoc = m_inventorApp.ActiveDocument\n \n Dim oAssyDef As AssemblyComponentDefinition\n Set oAssyDef = oAssyDoc.ComponentDefinition\n \n ' Have the user select a circular edge on bottom of washer.\n Dim selectedWasherEdge As Edge\n Set selectedWasherEdge = m_inventorApp.CommandManager.Pick _\n (SelectionFilterEnum.kPartEdgeCircularFilter, \"Select an edge on face of washer to constrain to block\")\n\n If selectedWasherEdge Is Nothing Then\n    Exit Sub\n End If\n  \n ' The washer occurrence\n Dim washerOccurrence As ComponentOccurrence\n Set washerOccurrence = selectedWasherEdge.Parent.Parent\n \n ' get the name of the document for the washer occurrence, need it for Occurrences.Add\n Dim washerOccDocName As String\n washerOccDocName = washerOccurrence.Definition.Document.FullFileName\n\n Dim oConstraint As AssemblyConstraint\n Set oConstraint = washerOccurrence.Constraints(2)\n\n Dim boltOccurrence As ComponentOccurrence\n Set boltOccurrence = oConstraint.AffectedOccurrenceTwo\n\n Dim boltOccDocName As String\n boltOccDocName = boltOccurrence.Definition.Document.FullFileName\n\n 'Get the geometry of the washer\n Dim SelectedWasherEdgeGeometry As Inventor.Circle\n Set SelectedWasherEdgeGeometry = selectedWasherEdge.Geometry\n\n 'define insertionpoint for washer\n Dim oPointSelectedWasherForRay As Inventor.Point\n Set oPointSelectedWasherForRay = SelectedWasherEdgeGeometry.Center\n\n ' This puts the point for the ray closer to the selectedWasherEdge\n oPointSelectedWasherForRay.y = oPointSelectedWasherForRay.y - 0.3\n\n Dim oPointSelectedWasherOnEdge As Inventor.Point\n Set oPointSelectedWasherOnEdge = selectedWasherEdge.PointOnEdge\n\n Dim oSelectedWasherUnitVec As UnitVector\n Set oSelectedWasherUnitVec = ThisApplication.TransientGeometry.CreateUnitVector(oPointSelectedWasherOnEdge.x, oPointSelectedWasherOnEdge.y)\n\n Dim washerSelectedEdgeRadius As Double\n washerSelectedEdgeRadius = SelectedWasherEdgeGeometry.Radius\n \n \n 'Get the geomtry of the washer from the occurence constraint\n Dim WasherEdgeGeometry As Inventor.Circle\n Set WasherEdgeGeometry = oConstraint.EntityOne.Geometry\n\n 'define insertionpoint for washer\n Dim oPointWasherForRay As Inventor.Point\n Set oPointWasherForRay = WasherEdgeGeometry.Center\n\n ' This puts the point for the ray closer to the selectedWasherEdge\n oPointWasherForRay.y = oPointWasherForRay.y - 0.3\n\n Dim oPointWasherOnEdge As Inventor.Point\n Set oPointWasherOnEdge = oConstraint.EntityOne.PointOnEdge\n\n Dim oWasherUnitVec As UnitVector\n Set oWasherUnitVec = ThisApplication.TransientGeometry.CreateUnitVector(oPointWasherOnEdge.x, oPointWasherOnEdge.y)\n\n Dim washerEdgeRadius As Double\n washerEdgeRadius = WasherEdgeGeometry.Radius\n \n 'Get the geometry of the bolt\n Dim boltEdgeGeometry As Inventor.Circle\n Set boltEdgeGeometry = oConstraint.EntityTwo.Geometry\n\n 'define insertionpoint for bolt\n Dim oPointBoltForRay As Inventor.Point\n Set oPointBoltForRay = boltEdgeGeometry.Center\n\n ' This puts the point for the ray closer to the bolt edge\n oPointBoltForRay.y = oPointBoltForRay.y + 0.3\n\n Dim oPointBoltOnEdge As Inventor.Point\n Set oPointBoltOnEdge = oConstraint.EntityTwo.PointOnEdge\n\n Dim oBoltUnitVec As UnitVector\n Set oBoltUnitVec = ThisApplication.TransientGeometry.CreateUnitVector(oPointBoltOnEdge.x, oPointBoltOnEdge.y)\n\n Dim boltEdgeRadius As Double\n boltEdgeRadius = boltEdgeGeometry.Radius\n\n Dim blockEdge As Edge\n Set blockEdge = m_inventorApp.CommandManager.Pick(SelectionFilterEnum.kPartEdgeFilter, \"Pick a hole Edge on the block\")\n\n ' create a matrix for the washer, need it for Occurrences.Add, transform the matrix to the\n ' location of the existing washer occurrence\n Dim oWasherMat As Matrix\n Set oWasherMat = ThisApplication.TransientGeometry.CreateMatrix\n Call oWasherMat.TransformBy(washerOccurrence.Transformation)\n\n' create a matrix for the bolt, need it for Occurrences.Add, transform the matrix to the\n ' location of the existing bolt occurrence\n Dim oBoltMat As Matrix\n Set oBoltMat = ThisApplication.TransientGeometry.CreateMatrix\n Call oBoltMat.TransformBy(boltOccurrence.Transformation)\n\n\n ' Insert constraint for the first bolt\n Dim oInsert As InsertConstraint\n Set oInsert = oAssyDef.Constraints.AddInsertConstraint(selectedWasherEdge, blockEdge, True, 0)\n \n Dim oVbMsgBoxResult As VbMsgBoxResult\n oVbMsgBoxResult = MsgBox(\"add more bolts?\", vbYesNo)\n If oVbMsgBoxResult = vbNo Then\n Exit Sub\n End If\n\n Dim i As Integer\n i = 0\n\n Do While i <> 1\n \n  ' hole for the next constraint\n Set blockEdge = m_inventorApp.CommandManager.Pick(SelectionFilterEnum.kPartEdgeFilter, \"Pick a hole Edge on the block\")\n\n ' Add another washer occurrence\n Dim oNewWasherOcc As ComponentOccurrence\n Set oNewWasherOcc = oAssyDoc.ComponentDefinition.Occurrences.Add(washerOccDocName, oWasherMat)\n \n Dim objsWasherEnumerator As ObjectsEnumerator\n Dim pntsEnumerator As ObjectsEnumerator\n\n ' Using the top level assembly to find the edge\n ' this works because the new occurrences are placed\n ' in exactly the same place as the one that existed\n ' when the edge of the washer was first selected\n 'Find the edge in the washer to constrain to the bolt\n Call oAssyDef.FindUsingRay(oPointWasherForRay, oWasherUnitVec, washerEdgeRadius + 1, objsWasherEnumerator, pntsEnumerator, True)\n\n Dim objInWasher As Object\n Set objInWasher = objsWasherEnumerator(1)\n\n Dim washerEdge As Edge\n Set washerEdge = objInWasher.Edges(1)\n \n ' Find the edge of the washer that was selected\n Dim objsSelectedWasherEnumerator As ObjectsEnumerator\n Call oAssyDef.FindUsingRay(oPointSelectedWasherForRay, oSelectedWasherUnitVec, washerSelectedEdgeRadius + 1, objsSelectedWasherEnumerator, pntsEnumerator, True)\n\n Dim objInSelectedWasher As Object\n Set objInSelectedWasher = objsSelectedWasherEnumerator(1)\n\n Dim washerSelectedEdge As Edge\n Set washerSelectedEdge = objInSelectedWasher.Edges(1)\n \n  ' Add another bolt occurrence\n Dim oNewBoltOcc As ComponentOccurrence\n Set oNewBoltOcc = oAssyDoc.ComponentDefinition.Occurrences.Add(boltOccDocName, oBoltMat)\n \n Dim objsBoltEnumerator As ObjectsEnumerator\n 'Find the edge in the bolt\n Call oAssyDef.FindUsingRay(oPointBoltForRay, oBoltUnitVec, boltEdgeRadius + 0.5, objsBoltEnumerator, pntsEnumerator, True)\n \n Dim objInBolt As Object\n Set objInBolt = objsBoltEnumerator(1)\n\n Dim boltEdge As Edge\n Set boltEdge = objInBolt.Edges(1)\n \n Set oInsert = oAssyDef.Constraints.AddInsertConstraint(washerEdge, boltEdge, True, 0)\n \n ' Constraint between the selected washer edge and the edge of the hole\n Set oInsert = oAssyDef.Constraints.AddInsertConstraint(blockEdge, washerSelectedEdge, True, 0)\n\n oVbMsgBoxResult = MsgBox(\"add more bolts?\", vbYesNo)\n If oVbMsgBoxResult = vbNo Then\n i = 1\n End If\n\n Loop\n\nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Suppressed Pattern Still Causing Error\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Rule to find specific dimension in partfile\n                    ", "solution": ["' Specify searched value", "Dim oValue As Double = ", "10.4", "\nDim oDoc As Document = ThisApplication.ActiveDocument\nDim oCD As ComponentDefinition = oDoc.ComponentDefinition", "' Go throught each parameter in parameters", "\nFor Each oPara As Parameter In oCD.Parameters\n    ", "' Skip text parameters", "    If Not oPara.Units.ToString = \"Text\" Then", "        ", "' Check if the values match", "\n        If oPara.Value = oValue Then\n            ", "' Here we can do something with the parameter", "            ", "MsgBox(oPara.Name)", "\n        End If\n    End If\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Ilogic cilinder stroke\n                    ", "solution": ["If", " ", "Height", " ", "=", " ", "\"", "< 3900 mm", "\"", " ", "And", " ", "Stroke_assy", " ", "<", " ", "0", " ", "Then", "\n    ", "Stroke_assy ", "=", " ", "0", " ", "mm", "\n    ", "MessageBox", ".", "Show", "(", "\"", "Enter a value higher then 0", "\"", ", ", "\"", "Wrong value", "\"", ",", "Ok", ")", "\n    ", "MessageBox", ".", "Show", "(", "\"Value set to 0", "\"", ", ", "\"Wrong value", "\"", ",", "Ok", ")", "\n    \n\n", "ElseIf", " ", "Height", " ", "=", " ", "\"", "< 3900 mm", "\"", " ", "And", " ", "Stroke_assy", " ", ">", " ", "1600", " ", "Then", "\n    ", "Stroke_assy", " ", "=", " ", "1600", " ", "mm", "\n    ", "MessageBox", ".", "Show", "(", "\"Enter a value lower then", " 1600 mm", "\"", ", ", "\"", "Wrong value", "\"", ",", "Ok", ")", "\n    ", "MessageBox", ".", "Show", "(", "\"", "Value set to 1600 mm", "\"", ", ", "\"", "Wrong value", "\"", ",", "Ok", ")", "\n    \n\n", "ElseIf", " ", "Height", " ", "=", " ", "\"", "=> 3900 mm", "\"", " ", "And", " ", "Stroke_assy", " ", "<", " ", "0", " ", "Then", "\n    ", "Stroke_assy", " ", "=", " ", "0", " ", "mm", "\n    ", "MessageBox", ".", "Show", "(", "\"Enter a value higher then", " 0 mm\"", ", ", "\"Wrong value", "\"", ",", "Ok", ")", "\n    ", "MessageBox", ".", "Show", "(", "\"Value set to 0 mm", "\"", ", ", "\"Wrong value", "\"", ",", "Ok", ")", "\n    \n\n", "ElseIf", " ", "Height", " ", "=", " ", "\"", "=> 3900 mm", "\"", " ", "And", " ", "Stroke_assy", " ", ">", " ", "1900", " ", "Then", " \n    ", "Stroke_assy", " ", "=", " ", "1900", " ", "mm", "\n    ", "MessageBox", ".", "Show", "(", "\"", "Enter a Value lower then 1900 mm", "\"", ", ", "\"Wrong value", "\"", ",", "Ok", ")", "\n    ", "MessageBox", ".", "Show", "(", "\"", "Value set to 1900 mm", "\"", ", ", "\"", "Wrong value", "\"", ",", "Ok", ")", "\n    \n    \n", "End", " ", "If", "Parameter", "(", "\"", "24AU034:1", "\"", ", ", "\"", "Stroke", "\"", ")", " ", "=", " ", "Stroke_assy", "\n", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True"], "author": "Tniens"},
{"created at": [], "solution Title": "\n                        Re: Changing sheet sizes from US to EU with iLogic\n                    ", "solution": ["iLogicForm", ".", "Show", "(", "\"", "BOARDER SELECTER", "\"", ")", "\n\n", "'", "SETS TITLE BOX TO GROUPS OWN", "\n", "Select", " ", "Case", " ", "BOARDER", "\n", "Case", " ", "=", " ", "\"", "1", "\"", "\n", "ActiveSheet", ".", "TitleBlock", " ", "=", " ", "\"", "1", "\"", "\n", "Case", " ", "=", " ", "\"2", "\"", "\n", "ActiveSheet", ".", "TitleBlock", " ", "=", " ", "\"2", "\"", "\n", "Case", " ", "=", " ", "\"3", "\"", "\n", "ActiveSheet", ".", "TitleBlock", " ", "=", " ", "\"3", "\"", "\n", "Case", " ", "=", " ", "\"4", "\"", "\n", "ActiveSheet", ".", "TitleBlock", " ", "=", " ", "\"", "4", "\"", "\n", "End", " ", "Select", "\n", "'", "SETS BOARDER", "\n", "If", " ", "BOARDER", " ", "=", " ", "\"1", "\"", " ", "Or", " ", "BOARDER", " ", "=", " ", "\"", "2", "\"", " ", "Then", " \n", "ActiveSheet", ".", "ChangeSize", "(", "\"", "D", "\"", ", ", "MoveBorderItems", " :", "=", " ", "True", ")", "\n", "ActiveSheet", ".", "Border", " ", "=", " ", "\"", "D SIZE", "\"", "\n", "Else", "\n", "ActiveSheet", ".", "ChangeSize", "(", "\"", "A1", "\"", ", ", "MoveBorderItems", " :", "=", " ", "True", ")", "\n", "ActiveSheet", ".", "Border", " ", "=", " ", "\"", "Default Border", "\"", "\n", "End", " ", "If", "\n\u00a0"], "author": "tschaeferZNBXX"},
{"created at": [], "solution Title": "\n                        Re: get dependend parts / assemblies\n                    ", "solution": [], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: Saving parametric design\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Simulation\n                    ", "solution": ["Parameter.UpdateAfterChange = True\nWhile (Parameter(\"BendAngle\") < 90)\n    Parameter(\"BendAngle\") = Parameter(\"BendAngle\") + 1\n    System.Threading.Thread.CurrentThread.Sleep(50)\nEnd While"], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: Turn off \"Select Other\" Cursor Snapping\n                    ", "solution": [], "author": "ADSKDJW4"},
{"created at": [], "solution Title": "\n                        Re: Rule trigger removal from API\n                    ", "solution": ["Public Sub RemoveRules(rule As String)\n    Dim oDoc As Inventor.Document = InventorApplication.ActiveDocument\n    If oDoc Is Nothing Then Exit Sub\n    Dim iLogicAuto As Object = GetiLogicAddin()\n    If (iLogicAuto Is Nothing) Then Exit Sub\n    Dim rules As Object = iLogicAuto.rules(oDoc)\n    For Each rule As Object In rules\n        rule.Delete\n    Next\nEnd Sub\n\nPublic Function GetiLogicAddin() As Object\n    Dim addIn As Inventor.ApplicationAddIn\n    Try\n        addIn = InventorApplication.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\n        addIn.Activate\n        Return addIn.Automation\n    Catch\n        Return Nothing\n    End Try\nEnd Function"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: creating 3d pdf with API\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: iproperties aktualisieren auf dem File server / iProperties update on the fi\n                    ", "solution": [], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: Inventor drawing view parameters not flowing thru the template into new draw\n                    ", "solution": [], "author": "don.schaefer"},
{"created at": [], "solution Title": "\n                        Re: Create Leader on a certain Edge\n                    ", "solution": ["        ", "oEdge", " ", "=", " ", "orefdoc", ".", "ComponentDefinition", ".", "SurfaceBodies", ".", "Item", "(", "1", ")", ".", "Edges", ".", "Item", "(", "1", ")", "        ", "oDrawingCurvesEnum", " ", "=", " ", "oView", ".", "DrawingCurves", "(", "oEdge", ")", "Imports", " ", "Inventor", ".", "ObjectTypeEnum", "\n\n", "Sub", " ", "Main", "\n\n    ", "'", " Set a reference to the drawing document.", "\n    ", "'", " This assumes a drawing document is active.", "\n    ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n     ", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n    ", "'", " Set a reference to the active sheet.", "\n    ", "Dim", " ", "oActiveSheet", " ", "As", " ", "Sheet", "\n     ", "oActiveSheet", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", "\n    \n    \n    ", "Dim", " ", "orefdoc", " ", "As", " ", "PartDocument", "\n    ", "orefdoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "\"", "C:\\Users\\nbowser\\Downloads\\Part1.ipt", "\"", ", ", "False", ")", "\n    ", "Count", " ", "=", " ", "0", "\n        ", "Dim", " ", "oDrawingCurvesEnum", " ", "As", " ", "DrawingCurvesEnumerator", "\n    ", "For", " ", "i", " ", "=", " ", "1", " ", "To", " ", "100", "\n    \n        ", "Dim", " ", "oEdge", " ", "As", " ", "Edge", "\n        ", "oEdge", " ", "=", " ", "orefdoc", ".", "ComponentDefinition", ".", "SurfaceBodies", ".", "Item", "(", "1", ")", ".", "Edges", ".", "Item", "(", "i", ")", "\n            \n        ", "Dim", " ", "oView", " ", "As", " ", "DrawingView", "\n        ", "oView", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", ".", "DrawingViews", ".", "Item", "(", "1", ")", "\n        \n        ", "'", " Set a reference to the drawing curve segment.", "\n        ", "'", " This assumes that a drawing curve is selected.", "\n        ", "oDrawingCurvesEnum", " ", "=", " ", "oView", ".", "DrawingCurves", "(", "oEdge", ")", "\n        ", "EdgeCount", " ", "=", " ", "oDrawingCurvesEnum", ".", "Count", " \n        ", "If", " ", "EdgeCount", " ", ">", " ", "0", " ", "Then", "\n            ", "Exit", " ", "For", "\n        ", "End", " ", "If", "\n    ", "Next", "\n        \n    ", "Dim", " ", "oDrawingCurve", " ", "As", " ", "DrawingCurve", "\n     ", "oDrawingCurve", " ", "=", " ", "oDrawingCurvesEnum", ".", "Item", "(", "1", ")", "\n\n\n    ", "'", " Get the mid point of the selected curve", "\n    ", "'", " assuming that the selected curve is linear", "\n    ", "Dim", " ", "oMidPoint", " ", "As", " ", "Point2d", "\n     ", "oMidPoint", " ", "=", " ", "oDrawingCurve", ".", "MidPoint", "\n\n    ", "'", " Set a reference to the TransientGeometry object.", "\n    ", "Dim", " ", "oTG", " ", "As", " ", "TransientGeometry", "\n     ", "oTG", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", "\n\n    ", "Dim", " ", "oLeaderPoints", " ", "As", " ", "ObjectCollection", "\n     ", "oLeaderPoints", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateObjectCollection", "\n\n    ", "'", " Create a few leader points.", "\n     ", "oLeaderPoints", ".", "Add", "(", "oTG", ".", "CreatePoint2d", "(", "oMidPoint", ".", "X", " ", "+", " ", "10", ", ", "oMidPoint", ".", "Y", " ", "+", " ", "10", "))", "\n     ", "oLeaderPoints", ".", "Add", "(", "oTG", ".", "CreatePoint2d", "(", "oMidPoint", ".", "X", " ", "+", " ", "10", ", ", "oMidPoint", ".", "Y", " ", "+", " ", "5", "))", "\n\n    ", "'", " Create an intent and add to the leader points collection.", "\n    ", "'", " This is the geometry that the leader text will attach to.", "\n    ", "Dim", " ", "oGeometryIntent", " ", "As", " ", "GeometryIntent", "\n     ", "oGeometryIntent", " ", "=", " ", "oActiveSheet", ".", "CreateGeometryIntent", "(", "oDrawingCurve", ")", "\n\n     ", "oLeaderPoints", ".", "Add", "(", "oGeometryIntent", ")", "\n\n    ", "'", " Create text with simple string as input. Since this doesn't use", "\n    ", "'", " any text overrides, it will default to the active text style.", "\n    ", "Dim", " ", "sText", " ", "As", " ", "String", "\n    ", "sText", " ", "=", " ", "\"", "API Leader Note", "\"", "\n\n    ", "Dim", " ", "oLeaderNote", " ", "As", " ", "LeaderNote", "\n     ", "oLeaderNote", " ", "=", " ", "oActiveSheet", ".", "DrawingNotes", ".", "LeaderNotes", ".", "Add", "(", "oLeaderPoints", ", ", "sText", ")", "\n     \n    ", "'", " Insert a node.", "\n    ", "Dim", " ", "oFirstNode", " ", "As", " ", "LeaderNode", "\n     ", "oFirstNode", " ", "=", " ", "oLeaderNote", ".", "Leader", ".", "RootNode", ".", "ChildNodes", ".", "Item", "(", "1", ")", "\n\n    ", "Dim", " ", "oSecondNode", " ", "As", " ", "LeaderNode", "\n     ", "oSecondNode", " ", "=", " ", "oFirstNode", ".", "ChildNodes", ".", "Item", "(", "1", ")", "\n\n     ", "oFirstNode", ".", "InsertNode", "(", "oSecondNode", ", ", "oTG", ".", "CreatePoint2d", "(", "oMidPoint", ".", "X", " ", "+", " ", "5", ", ", "oMidPoint", ".", "Y", " ", "+", " ", "5", "))", "\n", "End Sub", "\n"], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: Output DXF Files with Desc. & Rev From and Assembly\n                    ", "solution": ["'Set the DXF target file name\n'Dim strRevison As String = oRefDoc.properties\n' Get the design tracking property set.\n'WB added next 8 lines\n\tDim invDesignInfo As PropertySet\n    invDesignInfo = oRefDoc.PropertySets.Item(\"Design Tracking Properties\")\n    \n    Dim sumInformationProps As Inventor.PropertySet\n    sumInformationProps = oRefDoc.PropertySets.Item(\"Inventor Summary Information\")\n\n    ' Get the part number property.\n    Dim invPartNumberProperty As Inventor.Property\n    Dim strDescription = invDesignInfo.Item(\"Description\")\n    Dim strRevison = sumInformationProps.Item(\"Revision Number\")\n'WB commented\n'oDataMedium.FileName = oFolder & \"\\\" & oFileName & _\n'\" Rev \" & iProperties.Value(\"Project\", \"Revision Number\") & \" \" & iProperties.Value(\"Project\", \"Description\") & \".dxf\"\n'WB added\noDataMedium.FileName = oFolder & \"\\\" & oFileName & _\n\" Rev \" & strRevison.Value & \" \" & strDescription.Value & \".dxf\""], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Nested dynamic bloks\n                    ", "solution": [], "author": "jplujan"},
{"created at": [], "solution Title": "\n                        Re: iLogic, skip CC parts in an assembly\n                    ", "solution": ["        DXF_LOC = ThisDoc.Path & \"\\DXF\\\"\n\tDim asmDoc As AssemblyDocument = ThisApplication.ActiveDocument \n\t", "' Do you need the folowing three lines here? They seems to be not used at all.", "\n\t", "Dim asmDef As AssemblyComponentDefinition \n\tasmDef = asmDoc.ComponentDefinition\n\tDim oComp As Inventor.ComponentOccurrence", "\n\t\n\tDim oDoc As Inventor.Document\n\tFor Each oDoc In asmDoc.AllReferencedDocuments\n\t\t", "If Not oDoc.DocumentSubType.DocumentSubTypeID = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Continue For", "\n\t\t oDocName = oDoc.Displayname\n\t\tIf iProperties.Value(oDocName ,\"Summary\", \"Keywords\") = \"ISM\" Then\n\t\t\tDim oCompDef As SheetMetalComponentDefinition = oDoc.ComponentDefinition\n\t\t\t", "' Ath hvort partur s\u00e9 ekki \u00f6rugglega me\u00f0 flat pattern (B\u00faa til ef ekki)", "\n\t\t\tIf Not oCompDef.HasFlatPattern Then\n\t\t\t\toCompDef.Unfold\n\t\t\t\toDoc.Save\n\t\t\t\toDoc.Close\n\t\t\tEnd If\n\t\t\t\n\t\t\tDim sOut As String = \"FLAT PATTERN DXF?\" _\n\t\t\t+ \"AcadVersion=2004\" _\n\t\t\t+ \"&OuterProfileLayer=IV_OUTER_PROFILE:Visibility=ON;LinePattern=28100;LineWeight=0,0500;Color=0,128,0;\" _\n\t\t\t+ \"&InvisibleLayers=IV_TANGENT;IV_BEND;IV_BEND_DOWN;IV_ROLL_TANGENT;IV_ARC_CENTERS\"\n\t\t\t\n\t\t\tDim sFname As String = \"\"\n\t\t\t", "                        Select Case oDocName\n\t\t\tCase \"HB132.ipt\":          sFname = HB132_DXF\n\t\t\tCase \"HB133.ipt\":          sFname = HB133_DXF\n\t\t\tCase \"IFK-YFIRSTYKKI.ipt\": sFname = IFKYST_DXF\n\t\t\tCase \"PANNA-H.ipt\":        sFname = Panna_DXF\n\t\t\tCase \"BYR\u00d0I-H.ipt\":        sFname = Byrdi_DXF\n\t\t\tCase \"Skuffa-H.ipt\":       sFname = Skuffa_DXF\n\t\t\tCase Else:                 ", "' Halda \u00e1fram", "                        End Select", "                        If sFname <> vbNullString Then", "                                oCompDef.DataIO.WriteDataToFile(sOut, DXF_LOC & sFname & \".dxf\")", "                        End If", "                End If", "        Next"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Title Block\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\n\nIf Not oDoc.DocumentType = 12292 Then\n    MessageBox.Show(\"Es muss eine IDW offen sein um den Code zu verwenden!\", \"File Type Mismatch!\")\n    Exit Sub\nEnd If\n\n", "' Look For the model referenced within the drawing. End the Rule If the drawing Is empty.", "\nIf ThisDoc.ModelDocument Is Nothing Then\n    MessageBox.Show(\"Diese Option ist in einer leeren Zeichnung unzul\u00e4ssig\", \"Export error\")\n    Exit Sub\nEnd If\n\n", "' Get the style", "\nDim oStyle As Style\nFor Each aStyle As Style In oDoc.StylesManager.PartsListStyles\n    If aStyle.Name = \"KV-Stueli_Deutsch\" Then\n        oStyle = aStyle\n        Exit For\n    End If\nNext\n\n", "' End the Rule if the Style doesn't exist", "\nIf oStyle Is Nothing Then Exit Sub", "\n", "' Go throught every sheet.", "\nDim oSheet As Sheet\nFor Each oSheet In oDoc.Sheets\n", "    oSheet.TitleBlock.Delete", "    oSheet.AddTitleBlock(\"ET-Liste Deutsch\")", "\n    ", "' Look for partlist within the sheet.", "\n    If oSheet.PartsLists(1) IsNot Nothing Then\n        ", "' Set parts list to a specific style", "\n        oSheet.PartsLists(1).Style = oStyle", "        ", "' Change the Layers", "        Dim oLayers As LayersEnumerator = oSheet.Parent.StylesManager.Layers", "        oLayers.Item(\"KV deutsch\"\u200b).Visible= True", "        oLayers.Item(\"KV englisch\"\u200b).Visible= False", "    End If", "Next"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Assign user parameter to dimension constraint\n                    ", "solution": [], "author": "acurtinT3UX6"},
{"created at": [], "solution Title": "\n                        Re: Tag Number in each purchased item in an assembly and call it in drawing\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: Create and set values for user parameters\n                    ", "solution": ["Dim openDoc As Document = ThisApplication.ActiveDocument\nDim oPartDoc As Document\n\nFor Each oPartDoc In openDoc.AllReferencedDocuments\n    Dim oDef As PartComponentDefinition = oPartDoc.ComponentDefinition\n    Dim oMyParameters as UserParameters = oDef.Parameters.UserParameters\n    Dim oParameter As UserParameter", "\n    Try\n        ", "oParameter", " = oMyParameters.Item(\"Test\")\n    Catch\n        oParameter = oMyParameters.AddByExpression(\"Test\", \"111\", UnitsTypeEnum.kMillimeterLengthUnits)\n    End Try", "\n    ", "oParameter", ".Expression = 124 ", "' Here is where the code no longer fails", "\n    ", "oParameter", ".ExposedAsProperty = True\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Sample code for Inventor Add in DLL for VB .NET\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Is it possible to change a style of BOM using iLogic?\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\n", "' Check if we're in drawing", "\nIf Not oDoc.DocumentType = 12292 Then\n    MessageBox.Show(\"Run this rule from Drawing!\", \"File Type Mismatch!\")\n    Exit Sub\nEnd If\n", "' Look For the model referenced within the drawing. End the Rule If the drawing Is empty.", "\nIf ThisDoc.ModelDocument Is Nothing Then\n    MessageBox.Show(\"There is no model in this drawing.\", \"No model.\")\n    Exit Sub\nEnd If\n\n", "' Get the according Style.", "\nDim sName As String\nIf ThisDoc.ModelDocument.DocumentType = 12291 Then\n    sName = \"", "MyStyleForAssembly", "\"\nElse\n    sName = \"", "MyStyleForPart", "\"\nEnd If\n\n", "' Get the style.", "\nDim oStyle As Style\nFor Each aStyle As Style In oDoc.StylesManager.PartsListStyles\n    If aStyle.Name = sName Then\n        oStyle = aStyle\n        Exit For\n    End If\nNext\n\n", "' End the Rule if the Style doesn't exist.", "\nIf oStyle Is Nothing Then Exit Sub\n\n", "' Go throught every sheet.", "\nDim oSheet As Sheet\nFor Each oSheet In oDoc.Sheets\n    ", "' Look for the first partlist within the sheet.", "\n    If oSheet.PartsLists(1) IsNot Nothing Then\n        ", "' Set parts list to a specific style.", "\n        oSheet.PartsLists(1).Style = oStyle\n    End If\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iProperty Value removing ending \"zero\" from the parameter\n                    ", "solution": ["iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Description", "\"", ")", " ", "=", " ", "\"", "=PIPE - <PIPEOUTERDIAMETER> x <PIPEWALLTHICKNESS>", "\""], "author": "jddickson"},
{"created at": [], "solution Title": "\n                        Re: Place component (ipt) in a assembly (iam) using VB.NET\n                    ", "solution": ["' Exit sub if the document isnt assembly", "If InventorApplication.ActiveDocument.DocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then Exit Sub", "' Specify part to be added", "Dim oFile As String = \"", "C:\\SomePath\\MyPart.ipt", "\"", "\n", "' Get curently open document", "\nDim oDoc As Inventor.AssemblyDocument = InventorApplication.ActiveDocument", "' Create Matrix", "\nDim oTG As Inventor.TransientGeometry = InventorApplication.TransientGeometry\nDim oMatrix As Inventor.Matrix = oTG.CreateMatrix\nCall oMatrix.SetToRotation(3.14159265358979 / 4, oTG.CreateVector(0, 0, 1), oTG.CreatePoint(0, 0, 0))\nCall oMatrix.SetTranslation(oTG.CreateVector(", "1, 2, 1", "), True)", "' Add the part to the assembly", "Dim oOcc As Inventor.ComponentOccurrence\noOcc = oDoc.ComponentDefinition.Occurrences.Add(oFile, oMatrix)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Explicity Call a Parameter after using Form in same rule\n                    ", "solution": ["'Revised 15.April.2016 For circle plate only", "'I believe either THIS line will work for all cases, or the 2 lines below PER REQUIRED USE\n", "Parameter.UpdateAfterChange = True", "\niLogicForm.Show (\"Raw Material Size\")\n", "'I believe this works to update WHEN & WHERE the 2 lines are called.", "RuleParametersOutput()", "InventorVb.DocumentUpdate()", "\nDim oDoc As Document = ThisDoc.Document", "\n'Need to call the parameter this way so it's pulls the value as updated in the form.\nIf ", "Parameter(\"ID\")", " = 0\n\tFeature.IsActive(\"Extrusion2\") = False\n\toDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\").Value = \"=PL. <THICKNESS> X <OD> O.D. - <MATERIAL>\"\nElse\n\tFeature.IsActive(\"Extrusion2\") = True\n\toDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\").Value = \"=PL. <THICKNESS> X <OD> O.D. X <ID> I.D. - <MATERIAL>\"\nEnd If"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: how to hide bend radius point in 3D sketch by using API?\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: creat rule in Autodesk inventor for \"flat pattern LengthxWidth In same\n                    ", "solution": ["Parameter(\"RM_Size\") = Round(SheetMetal.FlatExtentsLength, ", "1", ") _", "               & \"X\" & Round(SheetMetal.FlatExtentsWidth, ", "1", ")"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Access iLogicAddin Object Browser\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: ThickenFeatures Function\n                    ", "solution": ["Dim oFaceColl As FaceCollection\noFaceColl = ThisApplication.TransientObjects.CreateFaceCollection\noFaceColl.Add(face)\n\nCall oCompDef.Features.ThickenFeatures.Add(oFaceColl, Dist, kPositiveExtentDirection, kNewBodyOperation, False, False, False)"], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: Need Solution, Automatic exporting of  all assembly parts into STEP FILE\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: Open, rune a rule, save and close\n                    ", "solution": ["' Open known drawing document specifying full filename", "\nDim oPath As String = ThisDoc.Path", "Dim FName As String = oPath & \"", "\\FLW_24_28.idw", "\"", "' You can also set it like this if the names match:", "' FName = ThisDoc.PathAndFileName(False) & \".idw\"\nDim oDoc as DrawingDocument = ThisApplication.Documents.Open(FName, False)\n\n", "' Run rule in the drawing document", "\nauto = iLogicVb.Automation\nauto.RunRule(oDoc, \"Regel1\")\n\n", "' Select the saving folder for the DWG file\n' Save and close this drawing document", "\nDim dialog = New System.Windows.Forms.FolderBrowserDialog()\ndialog.SelectedPath = oPath\ndialog.ShowNewFolderButton = True\nIf System.Windows.Forms.DialogResult.OK = dialog.ShowDialog() Then\n    oPath = dialog.SelectedPath\n    oDoc.SaveAs (oPath & \"", "\\FLW.dwg\"", ", True)\nEnd If\noDoc.Close\n\nMessageBox.Show (\"Ihre .dwg wurde erfolgreich erstellt\", \"Fertig\")"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: VBA: Assembly component CG - in BOM\n                    ", "solution": ["Sub GetPartOccurrencesfinal()\n   'leaf occurance method to find all parts\n   \n   ' variables\n    Dim mass_conv As Double\n    Dim len_conv As Double\n    Dim vol_conv As Double\n    Dim i As Integer, j As Integer, k As Integer, l As Integer, m As Integer, n As Integer\n    Dim mass As Double, x As Double, y As Double, z As Double\n    Dim mat As String   ' Material\n    Dim desc As String ' Description\n    Dim vol As Double 'Volume\n    x = 0 'CG Loc\n    y = 0 'CG Loc\n    z = 0 'CG Loc\n    i = 1 ' mass column counter\n    j = 5 ' mass Row counter\n    k = 20 ' Small mass column counter\n    l = j ' Small row column counter\n    m = 40 ' Other mass column counter\n    n = j ' Other row column counter\n    \n    \n    \n   'convert to correct units\n   mass_conv = 2.20462 ' units come in KG convert to LBS\n   len_conv = 0.393701 ' units come in CM convert to in\n   vol_conv = 0.061024 'units come in CM^3 convert to in^3\n   \n    ' Get the active assembly.\n    Dim oAsmDoc As Document\n    Set oAsmDoc = ThisApplication.ActiveDocument\n    Dim oDoc As Document\n\n\n    ' Get the assembly component definition.\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = oAsmDoc.ComponentDefinition\n\n    ' Get all of the leaf occurrences of the assembly., finds all parts, no assemblies\n    Dim oLeafOccs As ComponentOccurrencesEnumerator\n    Set oLeafOccs = oAsmDef.Occurrences.AllLeafOccurrences\n    \n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n    'export data to excel\n  \n    Dim excel_app As Excel.Application\n    ' Create the Excel application.\n    Set excel_app = CreateObject(\"Excel.Application\")\n    ' make Excel visible.\n    excel_app.Visible = True\n    'Create new workbook\n    Call excel_app.Workbooks.Add\n\n\nWith excel_app\n        \n        .Cells(j - 4, i) = oAsmDoc.FullDocumentName\n        \n       'Main\n        .Cells(j - 3, i) = \"Mass Items\"\n        .Cells(j - 1, i) = \"Part Number\"\n        .Cells(j - 1, i + 1) = \"Description\"\n        .Cells(j - 1, i + 2) = \"Inventor Material\"\n        .Cells(j - 1, i + 3) = \"Volume\"\n        .Cells(j - 1, i + 4) = \"Inventor Mass - Not used\"\n        .Cells(j - 1, i + 5) = \"CG - X - STA\"\n        .Cells(j - 1, i + 6) = \"CG - Y - BL\"\n        .Cells(j - 1, i + 7) = \"CG - Z - WL\"\n        .Cells(j - 1, i + 8) = \"Weight Factor\"\n        .Cells(j - 1, i + 9) = \"Material\"\n        .Cells(j - 1, i + 10) = \"Density\"\n        .Cells(j - 1, i + 11) = \"Mass\"\n        .Cells(j - 1, i + 12) = \"M*STA\"\n        .Cells(j - 1, i + 13) = \"M*BL\"\n        .Cells(j - 1, i + 14) = \"M*WL\"\n        \n        ' small mass\n        \n        .Cells(l - 3, k) = \"Small Mass Items <.1 lb ea.\"\n        .Cells(l - 1, k) = \"Part Number\"\n        .Cells(l - 1, k + 1) = \"Description\"\n        .Cells(l - 1, k + 2) = \"Inventor Material\"\n        .Cells(l - 1, k + 3) = \"Volume\"\n        .Cells(l - 1, k + 4) = \"Inventor Mass - Not used\"\n        .Cells(l - 1, k + 5) = \"CG - X - STA\"\n        .Cells(l - 1, k + 6) = \"CG - Y - BL\"\n        .Cells(l - 1, k + 7) = \"CG - Z - WL\"\n        .Cells(l - 1, k + 8) = \"Weight Factor\"\n        .Cells(l - 1, k + 9) = \"Material\"\n        .Cells(l - 1, k + 10) = \"Density\"\n        .Cells(l - 1, k + 11) = \"Mass\"\n        .Cells(l - 1, k + 12) = \"M*STA\"\n        .Cells(l - 1, k + 13) = \"M*BL\"\n        .Cells(l - 1, k + 14) = \"M*WL\"\n\n        \n        ' suppressed and ref items\n        .Cells(n - 3, m) = \"Items needing attention or Ref/Suppressed items\"\n        .Cells(n - 2, m) = \"No Defined Volume/CG in Inventor\"\n        .Cells(n - 1, m) = \"Part Number\"\n        .Cells(n - 1, m + 1) = \"Description\"\n        .Cells(n - 1, m + 2) = \"Notes\"\n              End With\n    \n    '''''''''''''''''''''''''''''''''''''''\n\n    Dim theBOMStruct As BOMStructureEnum\n    Dim oOcc As ComponentOccurrence\n    For Each oOcc In oLeafOccs\n     \n        \nIf (oOcc.Suppressed = False) And (oOcc.BOMStructure = kNormalBOMStructure) Then ' if value is suppressed or reference\n        \n        ' Get the part propterties\n       \n        \n        mass = oOcc.MassProperties.mass * mass_conv\n        vol = oOcc.MassProperties.Volume * vol_conv\n    \n        \n        Dim invpartdesc As String\n        Dim invpartmat As String\n        \n        invpartdesc = oOcc.Definition.Document.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\").Value\n        invpartmat = oOcc.Definition.Document.PropertySets.Item(\"Design Tracking Properties\").Item(\"Material\").Value\n\n        \n        \n        \n        If mass > 0.00001 Then ' if really small mass set to cg to zero, usually because no value is set\n       ' Cg location\n                x = oOcc.MassProperties.CenterOfMass.x * len_conv\n                y = oOcc.MassProperties.CenterOfMass.y * len_conv\n                z = oOcc.MassProperties.CenterOfMass.z * len_conv\n      \n            Else\n                x = 0\n                y = 0\n                z = 0\n        End If\n                    If mass > 0.1 Or Left(oOcc.Name, 1) = \"A\" Then ' if small mass\n                    'normal part\n                    With excel_app\n                    .Cells(j, i) = oOcc.Name\n                    .Cells(j, i + 1) = invpartdesc\n                    .Cells(j, i + 2) = invpartmat\n                    .Cells(j, i + 3) = vol\n                    .Cells(j, i + 4) = mass\n                    .Cells(j, i + 5) = x\n                    .Cells(j, i + 6) = y\n                    .Cells(j, i + 7) = z\n                        End With\n                    \n                    j = j + 1\n                    \n                    \n                    Else\n                    ' small part\n                     With excel_app\n                    .Cells(l, k) = oOcc.Name\n                    .Cells(l, k + 1) = invpartdesc\n                    .Cells(l, k + 2) = invpartmat\n                    .Cells(l, k + 3) = vol\n                    .Cells(l, k + 4) = mass\n                    .Cells(l, k + 5) = x\n                    .Cells(l, k + 6) = y\n                    .Cells(l, k + 7) = z\n                        End With\n                    l = l + 1\n                    End If\n       \n             \n       Else\n        'if ref or suppressed list item here\n        \n        excel_app.Cells(n, m) = oOcc.Name\n        excel_app.Cells(n, m + 1) = invpartdesc\n        n = n + 1\nEnd If\n    Next\n    MsgBox \"Output Complete\"\nEnd Sub"], "author": "jonathan.wirtz"},
{"created at": [], "solution Title": "\n                        Re: UserInputEvents_OnActivateCommand regression in Inventor 2016-2017\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Inventor addin - apprentice copy design\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic - stop excel opening while running rule\n                    ", "solution": [" \n", "Sub", " ", "Main", " ", "()", "\n", "question", " ", "=", " ", "MessageBox", ".", "Show", "(", "\"", "Do you want to link the case to e2i?", "\"", " ", "&", " ", "Chr", "(", "10", ")", " ", "&", " ", "\"", "Click <No> if you want enter the case specification manually.", "\"", ", ", "\"", "iLogic Question", "\"", ",", "MessageBoxButtons", ".", "YesNo", ",", "MessageBoxIcon", ".", "Question", ")", "\n\n", "'", "set condition based on answer", "\n    ", "If", " ", "question", " ", "=", " ", "vbYes", " ", "Then", "\n        ", "'", "Set excel spreadsheet absolute file path and search for case number match(taken from Part Number iproperty)", "\n        \n", "GoExcel", ".", "TitleRow", " ", "=", " ", "3", "\n", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "F:\\Operations\\e2i\\Reports\\RPT-E2I-001 - Contracts Overview Report.xlsm", "\"", ", ", "\"", "Cases", "\"", ", ", "\"", "Case No", "\"", ", ", "\"", "=", "\"", ", ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", "))", "\n", "'", "If case number match is found in e2i", "\n", "If", " ", "i", " ", "<>", " ", "-", "1", " ", "Then", "\n", "contract_name", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Contract Description", "\"", ")", "\n", "contract_number", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Contract No", "\"", ")", "\n", "contract_case_qty", "  ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Case QTY", "\"", ")", "\n", "contract_manager", "  ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "PM", "\"", ")", "\n", "contract_technical_lead", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Technical Lead", "\"", ")", "\n", "contract_case_type", " ", "=", " ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "Case Type", "\"", ")", "\n", "Else", "\n", "'", "If case number match is not found in e2i", "\n", "contract_name", " ", "=", " ", "\"", "No matching case in e2i", "\"", "\n", "contract_number", " ", "=", " ", "\"", "No matching case in e2i", "\"", "\n", "contract_case_qty", "  ", "=", " ", "\"", "No matching case in e2i", "\"", "\n", "contract_manager", "  ", "=", " ", "\"", "No matching case in e2i", "\"", "\n", "contract_technical_lead", " ", "=", " ", "\"", "No matching case in e2i", "\"", "\n", "contract_case_type", " ", "=", " ", "\"", "No matching case in e2i", "\"", "\n", "MessageBox", ".", "Show", "(", "\"", "There is no matching case in e2i", "\"", ", ", "\"", "Title", "\"", ")", "\n\n", "End", " ", "If", "\n\n    ", "Else", " ", "If", " ", "question", " ", "=", " ", "vbNo", " ", "Then", "\n        \n    ", "End", " ", "If", "GoExcel.Save", "GoExcel.Close", "\n    ", "End Sub", "\n\n\u00a0\u00a0"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: ilogic creating folders\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nDim oPane As BrowserPane = oDoc.BrowserPanes.ActivePane\nDim oTopNode As BrowserNode = oPane.TopNode\nDim oFolder As BrowserFolder\n\nDim MyArrayList As New ArrayList\nMyArrayList.add(\"ENCLOSURE\")\nMyArrayList.add(\"FASTENERS\")\nMyArrayList.add(\"LIGHTPIPES\")\nMyArrayList.add(\"DESIGNATION\")\nMyArrayList.add(\"PCB ASSYS\")\nMyArrayList.add(\"KITS\")\nMyArrayList.add(\"PACKAGING\")\nMyArrayList.add(\"REFERENCE\")\n\nFor Each oVal In MyArrayList\n    Try\n\t    oFolder = oTopNode.BrowserFolders.Item(oVal)\n    Catch\n        oFolder = oPane.AddBrowserFolder(oVal)\n    End Try\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Adding SectionView with iLogic gives error\n                    ", "solution": ["Private Function AddSectView(ByRef oSheet As Inventor.Sheet,\n                                ByRef oView As DrawingView,\n                                ByRef SectLoc As Point2d) As SectionDrawingView\n        'calculate the sketch line\n        'get the center y value\n        Dim dYval As Double\n        dYval = oView.Center.Y\n        'add half of view height to y\n        Dim dUpperYval As Double\n        dUpperYval = dYval + (0.5 * oView.Height) + (0.5 * 2.54)\n\n        Dim dLowerYval As Double\n        dLowerYval = dYval - (0.5 * oView.Height) - (0.5 * 2.54)\n\n        Dim oPoint1 As Point2d\n        oPoint1 = _invApp.TransientGeometry.CreatePoint2d(oView.Center.X, dUpperYval)\n\n        Dim oPoint2 As Point2d\n        oPoint2 = _invApp.TransientGeometry.CreatePoint2d(oView.Center.X, dLowerYval)\n\n        'create a new sketch\n        Dim oDrawingSketch As DrawingSketch\n        oDrawingSketch = oView.Sketches.Add\n\n        Dim oSketchPoint1 As Point2d\n        oSketchPoint1 = oDrawingSketch.SheetToSketchSpace(oPoint1)\n\n        Dim oSketchPoint2 As Point2d\n        oSketchPoint2 = oDrawingSketch.SheetToSketchSpace(oPoint2)\n\n        oDrawingSketch.Edit()\n        Dim oSketchLine As SketchLine\n        oSketchLine = oDrawingSketch.SketchLines.AddByTwoPoints(oSketchPoint1, oSketchPoint2)\n        oDrawingSketch.GeometricConstraints.AddVertical(oSketchLine)\n        oDrawingSketch.ExitEdit()\n\n        Dim oSectView As SectionDrawingView\n        oSectView = oSheet.DrawingViews.AddSectionView(oView, oDrawingSketch, SectLoc, _\n                                                       DrawingViewStyleEnum.kFromBaseDrawingViewStyle, , , _\n                                                       \"A\", False, True)\n\n        Return oSectView\n    End Function", "'Add Section View\n            Dim oPlacementPt3 As Point2d\n            oPlacementPt3 = _invApp.TransientGeometry.CreatePoint2d(oPlacementPt2.X + _\n                                                                    (oSideView.Width / 2) + (2 * 2.54), _\n                                                                    oPlacementPt1.Y)\n\n            Dim oSectAA As SectionDrawingView\n\n            oSectAA = AddSectView(oSheet, oFaceView, oPlacementPt3)\n            oSectAA.ShowLabel = True\n            oLabelPt = oSectAA.Label.Position\n            oLabelPt = _invApp.TransientGeometry.CreatePoint2d(oLabelPt.X, oLabelPt.Y - (0.5 * 2.54))\n            oSectAA.Label.Position = oLabelPt"], "author": "rusmwb"},
{"created at": [], "solution Title": "\n                        Re: Open a iLogic form external\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.Documents.Open(\"C:\\SomePath\\MyPart.ipt\", False)\n\n", "'... do something with the document", "\n\noDoc.Save\noDoc.Close"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Creating Sheet-Scope Revision Table Using iLogic\n                    ", "solution": ["'add a new table\nDim oRTB As RevisionTable\noRTB = oRTBs.Add2(oLocation, False, True, True, \"A\", oRevStyle)\noRTB.Style = oRevStyle 'set the style\n\n'ensure rev block is set to write to iProperty\noRTB.UpdatePropertyToRevisionNumber = True"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Update styles doesn't work\n                    ", "solution": ["Option Explicit\n\nSub Main\n\nDim oTargetDoc, oSourceDoc As DrawingDocument\nDim oTBdef As TitleBlockDefinition\nDim oTBdefs As TitleBlockDefinitions\nDim oBorderDef As BorderDefinition\nDim oBorderDefs As BorderDefinitions\nDim oSymbol As SketchedSymbolDefinition\nDim oSymbols As SketchedSymbolDefinitions\nDim oPrompt As String\nDim oStyles As Styles\nDim oStyle As Style\n\nIf ThisDoc.Document.DocumentType <> kDrawingDocumentObject Then\n\tMsgBox(\"This rule may only be run on drawing documents!\",vbOKOnly,\"Update Titleblocks\")\n\tExit Sub\nEnd If\n\noTargetDoc = ThisDrawing.Document\n\noPrompt = MsgBox(\"Is this an approval drawing?\",vbYesNoCancel,\"Update Titleblocks\")\nSelect Case oPrompt\nCase vbNo\n\toSourceDoc = ThisApplication.Documents.Open(\"C:\\Local Working Folder\\Templates\\MPI Production Drawing.idw\", False)\nCase vbYes\n\toSourceDoc = ThisApplication.Documents.Open(\"C:\\Local Working Folder\\Templates\\MPI Approval Drawing.idw\", False)\nCase vbCancel\n\tExit Sub\nEnd Select\n\noTBdefs = oSourceDoc.TitleBlockDefinitions\noBorderDefs = oSourceDoc.BorderDefinitions\noSymbols = oSourceDoc.SketchedSymbolDefinitions\n\nFor Each oTBdef In oTBdefs\n\tTry\n\t\tIf oTBdef.Name <> \"ANSI - Large\" Then\n\t\t\toTBdef.CopyTo(oTargetDoc, True)\n\t\tEnd If\n\tCatch\n\t\tMsgBox(\"Unknown error in copy title block for \" & Chr(34) & oTBdef.Name & Chr(34),vbOKOnly,\"Error\")\n\tEnd Try\nNext\nFor Each oBorderDef In oBorderDefs\n\tTry\n\t\tIf oBorderDef.Name <> \"Default Border\" Then\n\t\t\toBorderDef.CopyTo(oTargetDoc, True)\n\t\tEnd If\n\tCatch\n\t\tMsgBox(\"Unknown error in copy border definition for \" & Chr(34) & oBorderDef.Name & Chr(34),vbOKOnly,\"Error\")\n\tEnd Try\nNext\nFor Each oSymbol In oSymbols\n\tTry\n\t\toSymbol.CopyTo(oTargetDoc, True)\n\tCatch\n\t\tMsgBox(\"Unknown error in copy sketched symbol for \" & Chr(34) & oSymbol.Name & Chr(34),vbOKOnly,\"Error\")\n\tEnd Try\nNext\n\noSourceDoc.Close()\n\noPrompt = MsgBox(\"Would you like to update styles?\",vbYesNo,\"Update Titleblocks\")\nIf oPrompt = vbYes Then\n\toStyles = oTargetDoc.StylesManager.Styles\n\tFor Each oStyle In oStyles\n\t\tIf oStyle.UpToDate = False Then\n\t\t\toStyle.UpdateFromGlobal()\n\t\tEnd If\n\tNext\nEnd If\n\nEnd Sub"], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Please Explain the VBA objects???\n                    ", "solution": [], "author": "rusmwb"},
{"created at": [], "solution Title": "\n                        Re: AddIn - Dockable window.\n                    ", "solution": ["Imports System.Runtime.InteropServices\nImports System\nImports System.Type\nImports System.Activator\nImports Microsoft.VisualBasic\nImports Inventor\nImports System.IO\nImports System.Drawing\nImports System.Collections\nImports System.ComponentModel\nImports System.Windows.Forms\nImports System.Data\n\nModule DockWindow\n    \n    Public oWindow As Inventor.DockableWindow\n    Public IsBrowserVisible As Boolean = True\n    Public DockHeight As Long = 500\n    Public dockWidth As Long = 350\n    Public DockShown As Boolean = False\n    Private InitialDockHeight As Long = 0\n    Private InitialDockWidth As Long = 0\n    Public InAction As Boolean = False\n\n    Private addInCLSIDString As String\n    Private dc As Test01\n\n    Public Sub SetDockableWindow(addInCLS As String)\n\n        Dim oUserInterfaceMgr As Inventor.UserInterfaceManager = AddinGlobal.InventorApp.UserInterfaceManager\n        Try\n            oWindow = oUserInterfaceMgr.DockableWindows.Add(addInCLS, \"AutoSheetDockWindow\", \"Auto Sheets\")\n            oWindow.AddChild(CreateChildDialog())\n            oWindow.DisabledDockingStates = DockingStateEnum.kDockTop + DockingStateEnum.kDockBottom\n            oWindow.Visible = False 'Dont show the window on loading. Set to True to show on startup\n        Catch ex As Exception\n        End Try\n    End Sub\n\n    Public Function CreateChildDialog() As Long\n\n        If Not dc Is Nothing Then\n            dc.Dispose()\n            dc = Nothing\n        End If\n\n        dc = New Test01()\n        dc.Show(New WindowWrapper(AddinGlobal.InventorApp.MainFrameHWND))\n        Return dc.Handle.ToInt64()\n    End Function\n\n    Public Sub DockVis(visible As Boolean)\n\n        Dim oUserInterfaceMgr As Inventor.UserInterfaceManager = AddinGlobal.InventorApp.UserInterfaceManager\n\n        Select Case visible\n            Case True\n                oUserInterfaceMgr.ShowBrowser = False\n                oWindow.Visible = visible\n                Select Case DockShown\n                    Case False\n                        oWindow.DockingState = DockingStateEnum.kDockLeft\n                        oWindow.SetMinimumSize(DockHeight, dockWidth)\n                        DockShown = True\n                End Select\n            Case False\n                oWindow.Visible = visible\n                oUserInterfaceMgr.ShowBrowser = IsBrowserVisible\n        End Select\n    End Sub\nEnd Module", "'Namespace autosheet\nPublic Class ButtonActions\n    Public Shared Sub Button1_Execute()\n        'TODO: add code below for the button click callback.\n\n        Dim oUserInterfaceMgr As Inventor.UserInterfaceManager = AddinGlobal.InventorApp.UserInterfaceManager\n\n        Select Case InAction\n            Case True\n                Exit Sub\n            Case False\n                DockWindow.IsBrowserVisible = oUserInterfaceMgr.ShowBrowser\n                DockWindow.DockVis(True)\n                oUserInterfaceMgr = Nothing\n                DockWindow.InAction = True\n        End Select\n    End Sub\nEnd Class", " DockWindow.InAction = False\n        DockWindow.DockVis(False)"], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: ILOGIC ADD RULE IN ASSEMBLY!\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Neep help. InputRadioButton is mocking me\n                    ", "solution": [], "author": "rusmwb"},
{"created at": [], "solution Title": "\n                        Re: Ilogic - docfile = ThisDoc. spcified file name/path\n                    ", "solution": ["Dim", " ", "SdocFile", " ", "As", " ", "String", "\n    ", "SdocFile", " ", "=", " ", "Left", "(", "docFile", ".", "FullFileName", ", ", "Len", "(", "docFile", ".", "FullFileName", ")", " ", "-", " ", "3", ")", "\n    \n    ", "SdocFile", " ", "=", " ", "SdocFile", " ", "&", " ", "\"", "iam", "\"", "\n    \n    ", "docFile", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "SdocFile", ",", "False", ")", " "], "author": "dfitting"},
{"created at": [], "solution Title": "\n                        Re: 2017 ilogic form resizing\n                    ", "solution": [], "author": "jletcher"},
{"created at": [], "solution Title": "\n                        Re: Rivet - Assembly\n                    ", "solution": ["Public Sub Sonstige_Teile_setzen()\n    \n    On Error GoTo Ende\n    \n    'Auf Bg zugreifen\n    Dim oApp As Inventor.Application\n    Set oApp = ThisApplication\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = oApp.ActiveDocument\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = oAsmDoc.ComponentDefinition\n    \n    'Linie greifen\n    Dim oNormteilKreis As EdgeProxy\n    Set oNormteilKreis = ThisApplication.CommandManager.Pick(kPartEdgeCircularFilter, \"Kreis von Normteil ausw\u00e4hlen\")\n    'Occurrence ermitteln\n    Dim oNormteilOcc As Inventor.ComponentOccurrence\n    Set oNormteilOcc = oNormteilKreis.Parent.Parent\n    \n       \n    'Kreis von Fl\u00e4che greifen\n    Dim oFl\u00e4chenKreisProxy As EdgeProxy\n    Set oFl\u00e4chenKreisProxy = ThisApplication.CommandManager.Pick(kPartEdgeCircularFilter, \"Kreis von Fl\u00e4che ausw\u00e4hlen\")\n    'Fl\u00e4che von Kreis ermitteln\n    Dim oFaceProxy As FaceProxy\n    For Each oFaceProxy In oFl\u00e4chenKreisProxy.Faces\n        If oFaceProxy.SurfaceType = kPlaneSurface Then Exit For\n    Next\n    'Bohrungsdurchmesser von Kreis\n    Dim Bohrungsdurchmesser As Double\n    Bohrungsdurchmesser = Round(oFl\u00e4chenKreisProxy.Geometry.Radius * 20, 3)\n    'Occ von Fl\u00e4che\n    Dim oFl\u00e4chenOcc As ComponentOccurrence\n    Set oFl\u00e4chenOcc = oFl\u00e4chenKreisProxy.ContainingOccurrence\n\n\n    'Check for identisch Faces\n    Dim oCircleCollection As ObjectCollection\n    Set oCircleCollection = ThisApplication.TransientObjects.CreateObjectCollection\n    Dim oOcc As ComponentOccurrence\n    For Each oOcc In oAsmCompDef.Occurrences\n        If oOcc.Name <> oFl\u00e4chenOcc.Name And oOcc.Name <> oNormteilOcc.Name Then\n            Dim oBodyProxy As SurfaceBodyProxy\n            For Each oBodyProxy In oOcc.SurfaceBodies\n                Dim oBodyFaceProxy As Face\n                For Each oBodyFaceProxy In oBodyProxy.Faces\n                    If oBodyFaceProxy.SurfaceType = kPlaneSurface Then\n                        On Error Resume Next\n                        If oApp.MeasureTools.GetAngle(oBodyFaceProxy, oFaceProxy) = 0 And oApp.MeasureTools.GetMinimumDistance(oBodyFaceProxy, oFaceProxy) = 0 Then\n                            On Error GoTo 0\n                            Dim oCircleProxy As EdgeProxy\n                            For Each oCircleProxy In oBodyFaceProxy.Edges\n                                If oCircleProxy.GeometryType = kCircleCurve Then\n                                    Call oAsmDoc.SelectSet.Select(oCircleProxy)\n                                    If Round(oCircleProxy.Geometry.Radius * 20, 3) = Bohrungsdurchmesser Then\n                                        Call oCircleCollection.Add(oCircleProxy)\n                                    End If\n                                End If\n                            Next\n                        End If\n                        On Error GoTo 0\n                    End If\n                Next\n            Next\n        End If\n    Next\n\n    \n    'Kreise z\u00e4hlen\n    Dim oCircleOnFace As Edge\n    AnzahlKreise = 0\n    For Each oCircleOnFace In oFaceProxy.Edges\n        If oCircleOnFace.GeometryType = kCircleCurve Then\n            If oCircleOnFace.Geometry.Radius * 20 = Bohrungsdurchmesser Then\n                    For i = 1 To oCircleCollection.Count\n                        If oApp.MeasureTools.GetMinimumDistance(oCircleCollection(i), oCircleOnFace) = 0 Then GoTo NextCircle\n                    Next\n                    Dim oFile As String\n                    oFile = oNormteilOcc.Definition.Document.FullFileName\n                    Dim oTG As TransientGeometry\n                    Set oTG = ThisApplication.TransientGeometry\n                    Dim oMatrix As Matrix\n                    Set oMatrix = oTG.CreateMatrix\n                    Set oNormteilOcc = oAsmCompDef.Occurrences.Add(oFile, oMatrix)\n                    Dim oNativeExpanderKreis As Edge\n                    Set oNativeExpanderKreis = oNormteilKreis.NativeObject\n                    Dim oEdge As Edge\n                    For Each oEdge In oNormteilOcc.Definition.SurfaceBodies.Item(1).Edges\n                        If oEdge Is oNativeExpanderKreis Then\n                             Exit For\n                        End If\n                    Next\n                    Dim oEdgeProxy As EdgeProxy\n                    Call oNormteilOcc.CreateGeometryProxy(oEdge, oEdgeProxy)\n                    Call oAsmCompDef.Constraints.AddInsertConstraint(oEdgeProxy, oCircleOnFace, True, 0)\n            End If\n        End If\nNextCircle:\n    Next\nEnde:\nEnd Sub", "Public oAllOccsCollection As ObjectCollection\nPublic oAllCOnstraintsCollection As ObjectCollection\nPublic Sub Teile_platzieren()\n    \n    On Error GoTo Ende\n    \n    'Auf Bg zugreifen\n    Dim oApp As Inventor.Application\n    Set oApp = ThisApplication\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = oApp.ActiveDocument\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = oAsmDoc.ComponentDefinition\n    \n    'Kreis greifen\n    Dim oNormteilKreis As EdgeProxy\n    Set oNormteilKreis = ThisApplication.CommandManager.Pick(kPartEdgeCircularFilter, \"Kreis von Normteil ausw\u00e4hlen\")\n    'Occurrence ermitteln\n    Dim oNormteilOcc As Inventor.ComponentOccurrence\n    Set oNormteilOcc = oNormteilKreis.Parent.Parent\n    \n    'Maximale Kreisfl\u00e4che ermitteln\n    Dim oMaxCircFace As Face\n    Dim myList As Object\n    Set myList = CreateObject(\"System.Collections.ArrayList\")\n    For Each oMaxCircFace In oNormteilOcc.SurfaceBodies.Item(1).Faces\n        If oMaxCircFace.SurfaceType = kCylinderSurface Then\n            myList.Add (oMaxCircFace.Geometry.Radius)\n        End If\n    Next\n    myList.Sort\n    For Each oMaxCircFace In oNormteilOcc.SurfaceBodies.Item(1).Faces\n        If oMaxCircFace.SurfaceType = kCylinderSurface Then\n            If oMaxCircFace.Geometry.Radius = myList.Item(myList.Count - 1) Then\n                Exit For\n            End If\n        End If\n    Next\n    Dim Durchmesser As Double\n    Durchmesser = Round(oMaxCircFace.Geometry.Radius * 20, 3)\n    \n    'Alle Zusammenh\u00e4ngenden Occs in Collection\n    Set oAllCOnstraintsCollection = ThisApplication.TransientObjects.CreateObjectCollection\n    Set oAllOccsCollection = ThisApplication.TransientObjects.CreateObjectCollection\n    Call oAllOccsCollection.Add(oNormteilOcc)\n    Call SearchAllOccsInOcc(oNormteilOcc, 1)\n        \n    'Kreis von Fl\u00e4che greifen\n    Dim oFl\u00e4chenKreisProxy As EdgeProxy\n    Set oFl\u00e4chenKreisProxy = ThisApplication.CommandManager.Pick(kPartEdgeCircularFilter, \"Kreis von Fl\u00e4che ausw\u00e4hlen\")\n    'Fl\u00e4che von Kreis ermitteln\n    Dim oFaceProxy As FaceProxy\n    For Each oFaceProxy In oFl\u00e4chenKreisProxy.Faces\n        If oFaceProxy.SurfaceType = kPlaneSurface Then Exit For\n    Next\n    If oFaceProxy Is Nothing Then Exit Sub\n    'Bohrungsdurchmesser von Kreis\n    Dim Bohrungsdurchmesser As Double\n    Bohrungsdurchmesser = Round(oFl\u00e4chenKreisProxy.Geometry.Radius * 20, 3)\n    'Occ von Fl\u00e4che\n    Dim oFl\u00e4chenOcc As ComponentOccurrence\n    Set oFl\u00e4chenOcc = oFl\u00e4chenKreisProxy.ContainingOccurrence\n    \n    'Alle Edges der Constraints in Collection schreiben\n    Dim oConstraintEdgesColection As ObjectCollection\n    Set oConstraintEdgesColection = ThisApplication.TransientObjects.CreateObjectCollection\n    For Each oConstraint In oFl\u00e4chenOcc.Constraints\n        If oConstraint.Type = kInsertConstraintObject Then\n            If Round(oConstraint.EntityOne.Geometry.Radius * 20, 3) = Bohrungsdurchmesser _\n            Or Round(oConstraint.EntityTwo.Geometry.Radius * 20, 3) = Bohrungsdurchmesser Then\n                Call oConstraintEdgesColection.Add(oConstraint.EntityOne)\n                Call oConstraintEdgesColection.Add(oConstraint.EntityTwo)\n            End If\n        End If\n    Next\n    \n    'Kreise z\u00e4hlen\n    Dim oCircleOnFaceProxy As EdgeProxy\n    AnzahlKreise = 0\n    For Each oCircleOnFaceProxy In oFaceProxy.Edges\n        For i = 1 To oConstraintEdgesColection.Count\n            If oConstraintEdgesColection(i) Is oCircleOnFaceProxy Then\n                GoTo NextCircle\n            End If\n        Next\n        ' Occurrence count originally\n        Dim occCount As Integer\n        occCount = oAsmCompDef.Occurrences.Count\n        If oCircleOnFaceProxy.GeometryType = kCircleCurve Then\n            If Round(oCircleOnFaceProxy.Geometry.Radius * 20, 3) = Bohrungsdurchmesser Then\n                Call oAsmDoc.SelectSet.SelectMultiple(oAllOccsCollection)\n                ThisApplication.CommandManager.ControlDefinitions.Item(\"AppCopyCmd\").Execute\n                ThisApplication.CommandManager.ControlDefinitions.Item(\"AppPasteCmd\").Execute\n                \n                'New originOcc ermitteln\n                Dim found As Boolean\n                found = False\n                For i = occCount + 1 To oAsmCompDef.Occurrences.Count\n                    If oAsmCompDef.Occurrences(i).Definition.Document.PropertySets(\"Design Tracking Properties\").Item(\"Part Number\").value _\n                    = oNormteilOcc.Definition.Document.PropertySets(\"Design Tracking Properties\").Item(\"Part Number\").value Then\n                        Dim oNewNormteilOcc As ComponentOccurrence\n                        Set oNewNormteilOcc = oAsmCompDef.Occurrences(i)\n                    End If\n                Next\n                \n                Dim oNativeExpanderKreis As Edge\n                Set oNativeExpanderKreis = oNormteilKreis.NativeObject\n                For Each oEdge In oNewNormteilOcc.Definition.SurfaceBodies.Item(1).Edges\n                    If oEdge Is oNativeExpanderKreis Then\n                         Exit For\n                    End If\n                Next\n                Dim oEdgeProxy As EdgeProxy\n                Call oNewNormteilOcc.CreateGeometryProxy(oEdge, oEdgeProxy)\n                If Durchmesser <= Round(oCircleOnFaceProxy.Geometry.Radius * 20, 3) Then\n                    Call oAsmCompDef.Constraints.AddInsertConstraint(oEdgeProxy, oCircleOnFaceProxy, False, 0)\n                Else\n                    Call oAsmCompDef.Constraints.AddInsertConstraint(oEdgeProxy, oCircleOnFaceProxy, True, 0)\n                End If\n            End If\n        End If\nNextCircle:\n    Next\nEnde:\nEnd Sub\nPublic Function SearchAllOccsInOcc(Occurrence As ComponentOccurrence, Level As Integer)\n    Dim oConstraint As AssemblyConstraint\n    For Each oConstraint In Occurrence.Constraints\n        Dim ConstraintVorhanden As Boolean\n        ConstraintVorhanden = False\n        For i = 1 To oAllCOnstraintsCollection.Count\n            If oConstraint Is oAllCOnstraintsCollection(i) Then\n                ConstraintVorhanden = True\n                Exit For\n            End If\n        Next\n        Call oAllCOnstraintsCollection.Add(oConstraint)\n        Dim oOcc As ComponentOccurrence\n        Set oOcc = oConstraint.AffectedOccurrenceOne\n        Call oAllOccsCollection.Add(oConstraint.AffectedOccurrenceOne)\n        If ConstraintVorhanden = False Then Call SearchAllOccsInOcc(oOcc, 1)\n        '------------------------------------------------\n        Set oOcc = oConstraint.AffectedOccurrenceTwo\n        Call oAllOccsCollection.Add(oConstraint.AffectedOccurrenceTwo)\n        If ConstraintVorhanden = False Then Call SearchAllOccsInOcc(oOcc, 1)\n    Next\nEnd Function"], "author": "dg2405"},
{"created at": [], "solution Title": "\n                        Re: Create Workplane (Normal to Axis Through Point)\n                    ", "solution": ["Dim oPartCompDef As PartComponentDefinition\nSet oPartCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n        \nDim oAxis As WorkAxis\nSet oAxis = oPartCompDef.WorkAxes(1)\n\nDim oPoint As WorkPoint\nSet oPoint = oPartCompDef.WorkPoints(1)\n\nDim oPlane As WorkPlane\nSet oPlane = oPartCompDef.WorkPlanes.AddByNormalToCurve(oAxis, oPoint, False)"], "author": "dano0310"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2016 Add In\n                    ", "solution": [], "author": "Stryder33345"},
{"created at": [], "solution Title": "\n                        Re: Importing an NX assembly and parts\n                    ", "solution": ["\u00a0", "Friend Class ButtonOneCmd\n    Inherits Command\n\n    Dim strCLSld As String\n   ", " 'WB commented", "\n    ' Private Property kDataDropIOMechanism As IOMechanismEnum\n\n    Public Overrides Sub StartCommand()\n\n        ' call base command button's StartCommand (to also start interaction)\n        ' MyBase.StartCommand()\n        'MsgBox(\"Inventor Sample Prog. This is for NX Import Issue\")\n        'MessageBox.Show(\"Starting NX File Import\")\n        ImportNXFile()\n    End Sub\n\n    Public Overrides Sub SelectEvents_OnSelect(ByVal JustSelectedEntities As ObjectsEnumerator, ByVal SelectionDevice As SelectionDeviceEnum, ByVal ModelPosition As Point, ByVal ViewPosition As Point2d, ByVal View As Inventor.View)\n\n        MsgBox(\"Please select an object.\")\n\n    End Sub\n\t\n\n    Sub ImportNXFile()\n        Try\n            ' Set NX translator's CLSID and the NX file name.\n            ' Dim strCLSID As String\n            Dim strFileName As String\n            ' The following statement is throwing error \n            ' 'strCLSld' is not declared. It may be inaccessible due to its protection level.\n            ' So allowed Visual Studio to add the declaration in line 8 and commented line 33\n            strCLSld = \"{93D506C4-8355-4E28-9C4E-C2B5F1EDC6AE}\"\n\n            ' Please set the full file name here, such as \"C:\\Part1.prt\"\n            strFileName = \"C:\\Temp\\AssyCrane.prt\"\n\n            If (Not (System.IO.File.Exists(strFileName))) Then\n                MessageBox.Show(\"Component File >\" + strFileName + \"< does not exist\")\n                Return\n            End If\n\n            Dim oAddIns As ApplicationAddIns\n            oAddIns = InventorApplication.ApplicationAddIns\n\n            ' Find the NX translator, get the CLSID and activate it.\n            Dim oTransAddIn As TranslatorAddIn\n            oTransAddIn = oAddIns.ItemById(strCLSld)\n            oTransAddIn.Activate()\n\n            ' Get the transient object and take it as a factory to produce other objects.\n            Dim transientObj As TransientObjects\n            transientObj = InventorApplication.TransientObjects\n\n            ' Prepare the first parameter for Open(), the file name.\n            ' MessageBox.Show(\"NX File Import --- First Parameter\")\n            Dim file As DataMedium\n            file = transientObj.CreateDataMedium\n            file.FileName = strFileName\n\n            ' Prepare the second parameter for Open(), the open type.\n            ' MessageBox.Show(\"NX File Import --- Second Parameter\")\n            Dim context As TranslationContext\n            context = transientObj.CreateTranslationContext\n           ", " 'context.Type = kDataDropIOMechanism\n            'WB added\n            context.Type = IOMechanismEnum.kDataDropIOMechanism", "\n\n            ' Prepare the third parameter for Open(), the options.\n            '  MessageBox.Show(\"NX File Import --- Third Parameter\")\n            Dim options As NameValueMap\n            options = transientObj.CreateNameValueMap\n            options.Value(\"SaveComponentDuringLoad\") = False\n            options.Value(\"SaveLocationIndex\") = 0\n            options.Value(\"ComponentDestFolder\") = \"\"\n            options.Value(\"SaveAssemSeperateFolder\") = False\n            options.Value(\"AssemDestFolder\") = \"\"\n            options.Value(\"ImportSolid\") = True\n            options.Value(\"ImportSurface\") = True\n            options.Value(\"ImportWire\") = True\n            options.Value(\"ImportWorkPlane\") = True\n            options.Value(\"ImportWorkAxe\") = True\n            options.Value(\"ImportWorkPoint\") = True\n            options.Value(\"ImportPoint\") = True\n            options.Value(\"ImportAASP\") = False\n            options.Value(\"ImportAASPIndex\") = 0\n            options.Value(\"CreateSurfIndex\") = 1\n            options.Value(\"GroupNameIndex\") = 0\n            options.Value(\"GroupName\") = \"\"\n            options.Value(\"ImportUnit\") = 0\n            options.Value(\"CheckDuringLoad\") = False\n            options.Value(\"AutoStitchAndPromote\") = True\n            options.Value(\"AdvanceHealing\") = False\n\n            options.Value(\"CHKSearchFolder\") = True\n\n            '100 is the search folder maximum that you can specify.\n            'Assign separate search folder one by one.\n\n            Dim searchFolder(3) As String\n            searchFolder(0) = \"C:\\Temp\\\"\n            'searchFolder(1) = \"C:\\Folder2\\\"\n            options.Value(\"SearchFolder\") = searchFolder\n\n            'Prepare the fourth parameter for Open(), the final document\n            MessageBox.Show(\"NX File Import --- Fourth Parameter\")\n            Dim sourceObj As Object\n\n            'Open the NX file.\n            oTransAddIn.Open(file, context, options, sourceObj)\n            MessageBox.Show(\"NX File Import --- Successfully Imported\")\n        Catch ex As Exception\n            MessageBox.Show(\"Exception StackTrace To String\" + ex.StackTrace.ToString)\n            MessageBox.Show(\"Exception Current Exception \" + ex.ToString)\n            MessageBox.Show(\"Exception Message \" + ex.Message)\n            MessageBox.Show(\"Exception Source \" + ex.Source)\n            MessageBox.Show(\"Exception StackTrace \" + ex.StackTrace)\n            MessageBox.Show(\"Exception Targetsite \" + ex.TargetSite.ToString)\n            MessageBox.Show(\"Exception Targetsite Name \" + ex.TargetSite.Name)\n        End Try\n    End Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: As in the event onSaveDokument stop the procedure to save the document\n                    ", "solution": ["If BeforeOrAfter = EventTimingEnum.kBefore Then\n\n          HandlingCode = HandlingCodeEnum.kEventCanceled "], "author": "filat"},
{"created at": [], "solution Title": "\n                        Re: Exsisting iLogic rule - View label fitted with Item number\n                    ", "solution": ["' Set a reference to the drawing document.' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim oSheets As Sheets\nDim Sheet As Inventor.Sheet\nDim oViews As DrawingViews\nDim oView As DrawingView\n\nFor Each oSheet In oDrawDoc.Sheets\n\t'For Each oSheet In oSheets\n\toViews = oSheet.DrawingViews\n\tFor Each oView In oViews\n\t\t", "If oView.ViewType <> 10504 Then ' Not kProjectedDrawingViewType", "\n\t\t\t'Get the full filename Of the view model\n\t\t\tDim oModelFileName As String\n\t\t\toModelFileName = oView.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\n\t\t\t'MessageBox.Show(\"view model name\" & oModelFileName, \"Title\")\n\t\t\t\n\t\t\tDim oPartList As PartsList\n\t\t\t'try and get the parts list form the table of this sheet\n\t\t\tTry\n\t\t\t\toPartList = oDrawDoc.ActiveSheet.PartsLists.Item(1)\n\t\t\tCatch 'on error try and search all sheets for first found parts list            \n\t\t\t\t'iterate trough each sheet\n\t\t\t\tDim i As Long\n\t\t\t\tFor i = 1 To oDrawDoc.Sheets.Count\n\t\t\t\t\tIf oDrawDoc.Sheets.Item(i).PartsLists.Count > 0 Then Exit For\n\t\t\t\tNext    \n\t\t\t\toPartList = oDrawDoc.Sheets.Item(i).PartsLists.Item(1)\n\t\t\t\t'MessageBox.Show(\"parts list found on: \" & i, \"Title\")\n\t\t\tEnd Try\n\t\t\t\n\t\t\t' Iterate through the contents of the parts list.\n\t\t\tDim j As Long\n\t\t\tFor j = 1 To oPartList.PartsListRows.Count\n\t\t\t\t' Get the current row.\n\t\t\t\tDim oRow As PartsListRow\n\t\t\t\toRow = oPartList.PartsListRows.Item(j)\n\t\t\t\t'get filename of model in row\n\t\t\t\tDim oRowFileName As String\n\t\t\t\toRowFileName = oRow.ReferencedFiles.Item(1).FullFileName\n\t\t\t\t'compare the filenames\n\t\t\t\t'Performs a text comparison, based on a case-insensitive text sort order\n\t\t\t\t'If strings equal returns 0\n\t\t\t\tIf StrComp(oModelFileName, oRowFileName, CompareMethod.Text)=0 Then \n\t\t\t\t\t'Get the value of Item from the Parts List\n\t\t\t\t\t'Row name needs to be case sensitive or use 1 for first 2 for second etc.\n\t\t\t\t\toCell  = oPartList.PartsListRows.Item(j).Item(\"Item\") 'Row name needs to be case sensitive or use 1 for first 2 for second etc.\n\t\t\t\t\t'get the value of text in cell\n\t\t\t\t\tDim oItemValue As String\n\t\t\t\t\toItemValue = oCell.Value\n\t\t\t\t\t\n\t\t\t\t\t'Show the view label\n\t\t\t\t\toView.ShowLabel = True\n\t\t\t\t\t'format the text first line\n\t\t\t\t\toStringItem = \"<StyleOverride Underline='True' FontSize='0.35'> ITEM \" & oItemValue & \" </StyleOverride>\"\n\t\t\t\t\t'format the text second line\n\t\t\t\t\toStringScale = \"<Br/><StyleOverride FontSize='0.3'>(Scale <DrawingViewScale/>)</StyleOverride>\"\n\t\t\t\t\t\n\t\t\t\t\t'add to the view label\n\t\t\t\t\toView.Label.FormattedText =  oStringItem & oStringScale\n\t\t\t\tEnd If  \n\t\t\tNext\n\t\t", "End If", "\n\tNext\nNext\n "], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: creating solids from views\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: VBA Create new text style for general note\n                    ", "solution": ["Dim invDoc As Document\nSet invDoc = ThisApplication.ActiveDocument\n\nDim stext As String\nstext = \"<StyleOverride ", "Font='ARIAL'", " FontSize = '0.1524' >PRINTED: \" & Now() & \"<Br/>BY: \" & ThisApplication.GeneralOptions.UserName & \"</StyleOverride>\"\n\n", "' Set a reference to the GeneralNotes object", "\nDim oGeneralNotes As GeneralNotes\nSet oGeneralNotes = invDoc.ActiveSheet.DrawingNotes.GeneralNotes\n    \nDim oTG As TransientGeometry\nSet oTG = ThisApplication.TransientGeometry\n    \nDim oGeneralNote As GeneralNote\nSet oGeneralNote = oGeneralNotes.AddFitted(oTG.CreatePoint2d(0.3, 1.5), stext)\n", "' Set the color of the note if needed", "\n", "Dim oColor As Color\nSet oColor = \nThisApplication.TransientObjects.CreateColor(128, 128, 128)\noGeneralNote.Color = oColor", "\n\n", "' Set the rotation of the note in Radians", "\n", "oGeneralNote.Rotation = 1.57"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How do I use Dimension Offset?\n                    ", "solution": [], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: ilogic - copy drawing iproperty to model iproperty\n                    ", "solution": ["If (ThisDrawing.ModelDocument Is Nothing) Then Return\n\nmodelName = IO.Path.GetFileName(ThisDrawing.ModelDocument.FullFileName)\n\n\n\niProperties.Value(modelName, \"Project\", \"Part Number\") = iProperties.Value(\"Project\", \"Part Number\")"], "author": "Jesper_S"},
{"created at": [], "solution Title": "\n                        Re: Format Text  (Style selection) in a idw drawing VB.NET\n                    ", "solution": ["Dim oGeneralNote = oGeneralNotes.AddFitted(oTG.CreatePoint2d(0.3, 1.5), stext, \"", "Your Text Style Name", "\")\n\n"], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: iLogic and Form question\n                    ", "solution": ["'", " If Double Door is selected then disable the Door Hinge Left/Right Option", "\n", "If", " ", "Door_Type", " ", "=", " ", "\"", "Double Door", "\"", " ", "Then", "\n", "Disable", " ", "=", " ", "True", "\n", "Else", "\n", "Disable", " ", "=", " ", "False", "\n", "End", " ", "If", "\n\n", "Enable", " ", "=", " ", "Not", " ", "Disable"], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: xml text for part parameter in a leader note\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Betreff: iLogic DXF\n                    ", "solution": ["'define the active document as an assembly file\nDim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument\noAsmName = Left(oAsmDoc.DisplayName, Len(oAsmDoc.DisplayName) -4)\n'check that the active document is an assembly file\nIf ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\nMessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\nExit Sub\nEnd If\n'get user input\nRUsure = MessageBox.Show ( _\n\"This will create a DXF file for all of the asembly components that are sheet metal.\" _\n& vbLf & \"This rule expects that the part file is saved.\" _\n& vbLf & \" \" _\n& vbLf & \"Are you sure you want to create DXF for all of the assembly components?\" _\n& vbLf & \"This could take a while.\", \"iLogic - Batch Output DXFs \",MessageBoxButtons.YesNo)\nIf RUsure = vbNo Then\nReturn\nElse\nEnd If\noPath = ThisDoc.Path\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n'get DXF target folder path\noFolder = oPath & \"\\\" & oAsmName & \" DXF Files\"\n'Check for the DXF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\nSystem.IO.Directory.CreateDirectory(oFolder)\nEnd If\n'- - - - - - - - - - - - -\n'- - - - - - - - - - - - -Component - - - - - - - - - - - -\n'look at the files referenced by the assembly\nDim oRefDocs As DocumentsEnumerator\noRefDocs = oAsmDoc.AllReferencedDocuments\nDim oRefDoc As Document\n'work the the drawing files for the referenced models\n'this expects that the model has been saved\nFor Each oRefDoc In oRefDocs\niptPathName = Left(oRefDoc.FullDocumentName, Len(oRefDoc.FullDocumentName) - 3) & \"ipt\"\n'check that model is saved\nIf(System.IO.File.Exists(iptPathName)) Then\nDim oDrawDoc As PartDocument\noDrawDoc = ThisApplication.Documents.Open(iptPathName, True)\noFileName = Left(oRefDoc.DisplayName, Len(oRefDoc.DisplayName))\nTry\n'Set the DXF target file name\n\nTry\nCustomName =iProperties.Value(oFileName, \"Custom\", \"PF_PRT_ZNR\")\nCatch\nCustomName =\"XXX\" 'Wert, wenn iPropertie PF_PRT_ZNR nicht existiert\nEnd Try\n\noDataMedium.FileName = oFolder & \"\\\" & CustomName  & \" \" & oFileName & \".dxf\"\n\nDim oCompDef As SheetMetalComponentDefinition\noCompDef = oDrawDoc.ComponentDefinition\nIf oCompDef.HasFlatPattern = False Then\noCompDef.Unfold\nElse\noCompDef.FlatPattern.Edit\nEnd If\nDim sOut As String\nsOut = \"FLAT PATTERN DXF?AcadVersion=2004&OuterProfileLayer=IV_OUTER_PR\u200bOFILE\"\noCompDef.DataIO.WriteDataToFile( sOut, oDataMedium.FileName)\n'just for check its works coretcly\n'i=MessageBox.Show(oDataMedium.FileName, \"Title\",MessageBoxButtons.OKCancel)\n'MessageBox.Show(i,\"title\",MessageBoxButtons.OK)\n'If i=2 Then\n'Exit Sub\n'End If\noCompDef.FlatPattern.ExitEdit\nCatch\nEnd Try\noDrawDoc.Close\nElse\nEnd If\nNext"], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: Show Hidden Document\n                    ", "solution": [], "author": "lplu"},
{"created at": [], "solution Title": "\n                        Re: FileDialog - ShowOpen\n                    ", "solution": ["Private Sub btnSelectFiles_Click(sender As System.Object, e As System.Windows.RoutedEventArgs) Handles btnSelectFiles.Click\n        Try\n            Dim ofd As New Microsoft.Win32.OpenFileDialog\n            ofd.Multiselect = True\n            If ofd.ShowDialog = True Then\n                For Each strFile As String In ofd.FileNames\n                    Dim fileInfo As New System.IO.FileInfo(strFile)\n                    Dim booExist As Boolean = False\n                    For Each bf As BatchFile In BatchFiles 'BatchFiles is a custom class, but you can sub this with any collection that holds the fileinfo data\n                        If bf.InputFile.Name = fileInfo.Name Then\n                            booExist = True\n                            Exit For\n                        End If\n                    Next\n                    If booExist = False Then\n                        BatchFiles.Add(New BatchFile(fileInfo, Me))\n                    End If\n                Next\n            End If\n            BatchFiles.Sort()\n            If vsBatchFiles.View IsNot Nothing Then vsBatchFiles.View.Refresh()\n        Catch ex As Exception\n            Dim eh As New ErrorHandler(ex)\n            eh.HandleIt()\n        End Try\n    End Sub    \n\n\nPublic Function OpenInventorFile(fileinfo As SIO.FileInfo, Optional Deferred As Boolean = False, Optional Hidden As Boolean = False) As Inventor.Document\n        Dim invDoc As Inventor.Document = Nothing\n        Dim invApp As Inventor.Application = TTSInventorTools.GetInventorApplication()\n        Try\n            If invApp IsNot Nothing Then\n                'open document\n                Try 'find open document\n                    invDoc = invApp.Documents.ItemByName(fileinfo.FullName)\n                    'invDoc.Save()\n                Catch ex As Exception 'open file by name\n                    If invDoc Is Nothing Then\n                        If Deferred = True Then\n                            Dim docOpenOptions As NameValueMap\n                            docOpenOptions = invApp.TransientObjects.CreateNameValueMap\n                            docOpenOptions.Add(\"SkipAllUnresolvedFiles\", True)\n                            If fileinfo.Extension = \".idw\" Then docOpenOptions.Add(\"DeferUpdates\", True)\n                            Dim silentPrev As Boolean = invApp.SilentOperation\n                            invApp.SilentOperation = True\n                            If Hidden = True Then\n                                invDoc = invApp.Documents.OpenWithOptions(fileinfo.FullName, docOpenOptions, False)\n                            Else\n                                invDoc = invApp.Documents.OpenWithOptions(fileinfo.FullName, docOpenOptions, True)\n                            End If\n                            invApp.SilentOperation = silentPrev\n                        Else\n                            Dim docOpenOptions As NameValueMap\n                            docOpenOptions = invApp.TransientObjects.CreateNameValueMap\n                            docOpenOptions.Add(\"SkipAllUnresolvedFiles\", True)\n                            If Hidden = True Then\n                                invDoc = invApp.Documents.OpenWithOptions(fileinfo.FullName, docOpenOptions, False)\n                            Else\n                                invDoc = invApp.Documents.OpenWithOptions(fileinfo.FullName, docOpenOptions, True)\n                            End If\n                        End If\n                    End If\n                End Try\n                If invDoc Is Nothing Then Throw New ApplicationException(\"Can not open file:\" & fileinfo.FullName)\n            End If\n        Catch ex As Exception\n            Dim eh As New ErrorHandler(ex)\n            eh.HandleIt()\n        End Try\n        Return invDoc\n    End Function"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Bolted Connection - No items in Content Center\n                    ", "solution": [], "author": "Jon.Dean"},
{"created at": [], "solution Title": "\n                        Re: VB.net Evaluate iProperty Descrpition Expression\n                    ", "solution": ["Public Sub SetExpression()\n    Dim doc As Document\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim prop As Property\n    Set prop = doc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\")\n    \n    Dim expression As String\n    expression = \"=<Width> x <Height> Test\"\n    \n    Dim isDirty As Boolean\n    isDirty = doc.Dirty\n    \n    Dim trans As Transaction\n    Set trans = ThisApplication.TransactionManager.StartTransaction(doc, \"Set Expression\")\n    \n    prop.expression = expression\n    Dim result As String\n    result = prop.value\n    \n    ' Abort the transaction and clear the dirty flat IF it was clean when we started.\n    trans.Abort\n    If Not isDirty Then\n        doc.Dirty = False\n    End If\n    \n    MsgBox result\n    \n    MsgBox \"Current value: \" & prop.value\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: create Layer\n                    ", "solution": ["Dim oDoc As DrawingDocument = ThisDoc.Document\nDim styleMgr As DrawingStylesManager = oDoc.StylesManager\n\nDim engineLayer As Layer\nTry\n    ' Attempt to get the layer named \"Engine\".\n    engineLayer = styleMgr.Layers.Item(\"Engine\")\nCatch ex As Exception\n    ' The layer doesn't exist, so create it.\n    engineLayer = styleMgr.Layers.Item(1).Copy(\"Engine\")\n    engineLayer.Color = ThisApplication.TransientObjects.CreateColor(0, 0, 0)\n    engineLayer.LineWeight = 0.35\n    engineLayer.LineType = LineTypeEnum.kContinuousLineType\nEnd Try"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Change Rep View of sub-assembly Pattern\n                    ", "solution": ["Dim", " ", "asmDoc", " ", "As", " ", "AssemblyDocument", "asmDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", " ", "Dim", " ", "oMainAssyDef", " ", "As", " ", "AssemblyComponentDefinition", "oMainAssyDef", " ", "=", " ", "asmDoc", ".", "ComponentDefinition", " ", "Dim", " ", "oLODRep", " ", "As", " ", "DesignViewRepresentation", "Dim", " ", "doc", " ", "As", " ", "Document", " ", "For", " ", "Each", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", " ", "In", " ", "oMainAssyDef", ".", "Occurrences", "If", " ", "oOcc", ".", "Suppressed", " ", "Then", " ", "Continue", " ", "For", "Try", "If", " ", "oOcc", ".", "DefinitionDocumentType", " ", "_", "=", " ", "DocumentTypeEnum", ".", "kAssemblyDocumentObject", " ", "Then", "oOcc", ".", "SetDesignViewRepresentation", "(", "\"THE REP VIEW I NEED", "\"", ")", "End", " ", "If", "Catch", "End", " ", "Try", "Next"], "author": "s.etlinger"},
{"created at": [], "solution Title": "\n                        Re: Propertie set names where are they? vb.net\n                    ", "solution": ["Dim Doc As Document\nDoc = ThisApplication.ActiveDocument\n\n' Get the \"Summary Information\" property set.  \nDim summaryPropSet As PropertySet\nsummaryPropSet = Doc.PropertySets.Item(\"Summary Information\")\n\n\n' Get the \"Title\" property.  \nDim companyProp As Inventor.Property\ncompanyProp = summaryPropSet.Item(\"Title\")\n\n\n' Change the value of the iProperty.  \ncompanyProp.Value = TextBox1.Text"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: iLogic of the drawing in the model\n                    ", "solution": ["oModel.Save()"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Part of filepath in titleblock\n                    ", "solution": ["   Dim strName As String\n   Dim strArray() As String\n   \n   strName = ThisDoc.Document.FullFileName\n   strArray = Split(strName, \"\\\")\n   \n   'show full file path\n   MessageBox.Show(\"Full file path : \" & vbLf & strName, \"iLogic\")\n   \n   'show each member of the string array\n\ti=0 \n   For intCount = LBound(strArray) To UBound(strArray)\n      MessageBox.Show(\"Array member \" & i & \": \" & vbLf & strArray(i), \"iLogic\")\n\t  i=i+1\n   Next\n   \n   'show the project number folder\n   'assumes that it is the folder that contains the file\n   'therefore we use the upperbound of the array minus 1\n   j = UBound(strArray)-1\n   MessageBox.Show(\"The project folder: \" & vbLf & strArray(j), \"iLogic\")\n   "], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: virtual component\n                    ", "solution": [], "author": "risto.asikainen"},
{"created at": [], "solution Title": "\n                        Re: VB form auto refresh iproperties\n                    ", "solution": ["        ' Connect to a running instance of Inventor. \n        ' Watch out for the wrapped line. \n        Dim invApp As Inventor.Application\n        invApp = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n\n        ' Get the active document. \n        Dim Doc As Inventor.Document\n        Doc = invApp.ActiveDocument\n\n        ' Get the custom property set. \n        Dim customPropSet As Inventor.PropertySet\n        customPropSet = Doc.PropertySets.Item(\"Inventor Summary Information\")\n\n        ' Get the existing property, if it exists. \n        Dim prop As Inventor.Property = Nothing\n        prop = customPropSet.Item(\"Title\")\n        Dim lala As String = prop.Value\n        TextBox1.Text = (lala)"], "author": "bart_van_tuyl"},
{"created at": [], "solution Title": "\n                        Re: drawing template\n                    ", "solution": [], "author": "petestrycharske"},
{"created at": [], "solution Title": "\n                        Re: Place symbol in idw - if already there update\n                    ", "solution": ["Sub Main()\n \tDim oDrawDoc As DrawingDocument\n\toDrawDoc = ThisApplication.ActiveDocument\n\tDim oDrawingStatus As New ArrayList\n\t\n\t\n\toDrawingStatus.Add(\"PRELIMENARY\")\n\toDrawingStatus.Add(\"FOR APPROVAL\")\n\toDrawingStatus.Add(\"APPROVED FOR CONSTRUCTION\")\n\t\n\tiProperties.Value(\"Status\", \"Status\") = InputListBox(\"Select the drawing state\", oDrawingStatus, oDrawingStatus , Title := \"Status\", ListName := \"Drawing Status\")\n\tcheckDouble\n\tiLogicVb.UpdateWhenDone = True\n\nEnd Sub\n\n\nSub checkDouble()\n\t'checks whether the sheet already has symbols and if (EU) Drawing State needs updating or needs placement.\n\tDim oDrawDoc As DrawingDocument\n\toDrawDoc = ThisApplication.ActiveDocument\n\tDim oSketchedSymbolDef As SketchedSymbolDefinition\n\toSketchedSymbolDef = oDrawDoc.SketchedSymbolDefinitions.Item(\"(EU) DRAWING STATE\")\n\tDim s As Sheet \n\tDim i As Integer\n\t\n\tFor Each s In oDrawDoc.Sheets 'checks each sheet\n\t\ts.Activate\t'Activate Sheet\n\t\tDim sym As SketchedSymbol \n\t\tFor Each sym In s.SketchedSymbols 'Run through the symbols\n\t\t\tIf sym.Definition Is oSketchedSymbolDef Then 'if (EU) then\n\t\t\t\tiLogicVb.UpdateWhenDone = True\t'update Symbol\n\t\t\tEnd If\n\t\t\t\n\t\t\tFor Each symb In s.SketchedSymbols\t'loop in loop to see if EU is present\n\t\t\t\tIf symb.Definition Is oSketchedSymbolDef Then\n\t\t\t\t\ti=i+1\n\t\t\t\tEnd If\n\t\t\tNext\n\t\t\t\n\t\t\tIf sym.Definition IsNot oSketchedSymbolDef AndAlso (i<2)Then \n\t\t\t\tInsertSketchedSymbolOnSheet\t\n\t\t\tEnd If\n\t\tNext\n\t\t\n\t\tIf (oDrawDoc.ActiveSheet.SketchedSymbols.Count < 1) Then\n\t\t\tInsertSketchedSymbolOnSheet\t\n\t\tEnd If\n\tNext \nEnd Sub\n\nPublic Sub InsertSketchedSymbolOnSheet()\n\t'MessageBox.Show(\"Komt ie dan?()\", \"Title\")\n    ' Set a reference to the drawing document.\n    ' This assumes a drawing document is active.\n    Dim oDrawDoc As DrawingDocument\n    oDrawDoc = ThisApplication.ActiveDocument\n\t\n\tDim yCo As Integer\n\tyCo = ActiveSheet.Height\n\tDim xCo As Integer\n\txCo = ActiveSheet.Width\n\n    ' Obtain a reference to the desired sketched symbol definition.\n    Dim oSketchedSymbolDef As SketchedSymbolDefinition\n    oSketchedSymbolDef = oDrawDoc.SketchedSymbolDefinitions.Item(\"(EU) DRAWING STATE\")\n\n    Dim oSheet As Sheet\n    oSheet = oDrawDoc.ActiveSheet\n\n    Dim oTG As TransientGeometry\n    oTG = ThisApplication.TransientGeometry\n\n    Dim oSketchedSymbol As SketchedSymbol\n\toSketchedSymbol = oSheet.SketchedSymbols.Add(oSketchedSymbolDef, oTG.CreatePoint2d((xCo/10)-20, yCo/250), (0), 1)\n\nEnd Sub\n\n\n"], "author": "machiel.veldkam"},
{"created at": [], "solution Title": "\n                        Re: Selection is suppressed\n                    ", "solution": ["Dim oOccurrence As ComponentOccurrence\nTry\n  oOccurrence = ThisDoc.Document.SelectSet.Item(1)\n  If oOccurrence.Suppressed = True Then\n    MessageBox.Show(\"ERROR, Component is Suppressed\", \"iLogic\")\n    Return\n  ' No need to check here for opposite condition. \n  ' \"Else\" already means opposite condition.\t\n  Else \n  End If\nCatch\n  MessageBox.Show(\"Please select a component before running this rule.\", \"iLogic\")\n  'Return\nEnd Try\n' do my stuff\nCounter = ThisDoc.Document.selectset.count\nMessageBox.Show(Counter)"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic Purge Unused Sheet Formats\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", "\n", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oSheetformats", " ", "As", " ", "SheetFormats", "\n", "oSheetformats", " ", "=", " ", "oDoc", ".", "SheetFormats", "\n\n", "Dim", " ", "oSheetFormat", " ", "As", " ", "SheetFormat", "\n", "For", " ", "Each", " ", "oSheetFormat", " ", "In", " ", "oSheetformats", "\n    ", "oSheetFormat", ".", "Delete", "\n", "Next"], "author": "risto.asikainen"},
{"created at": [], "solution Title": "\n                        Re: Data Std File Name sequence...\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Create Arbitrary View for DrawingView\n                    ", "solution": ["sktNormal = CType(skt, PlanarSketch).PlanarEntityGeometry.Normal", "Dim viewCamera As Camera = invApp.TransientObjects.CreateCamera()\n        viewCamera.SceneObject = partDoc.ComponentDefinition\n        viewCamera.Target = FindMidPoint3D(partDoc.ComponentDefinition.RangeBox.MinPoint, partDoc.ComponentDefinition.RangeBox.MaxPoint)\n        Dim pEye As Point = viewCamera.Target\n        pEye.TranslateBy(sktNormal.AsVector)\n        viewCamera.Eye = pEye\n        'viewCamera.UpVector = sktNormal\n        viewCamera.Apply()", "Dim viewOrientation As ViewOrientationTypeEnum = ViewOrientationTypeEnum.kArbitraryViewOrientation\n\n Dim vBase As DrawingView = sht.DrawingViews.AddBaseView(docModel, pntView, dblScale, viewOrientation, viewStyle, strViewName, viewCamera, viewOptions)\n\n", " 'rotate the view if necessary to make long horizontal\n        If vBase.Width < vBase.Height Then\n            vBase.RotateByAngle(DegreesToRadians(90))\n        End If\n        'scale the view down if necessary to meet limits\n        If vBase.Width > viewWidthLimitInches * 2.54 Then\n            Dim modWidth As Double = vBase.Width / vBase.Scale / 2.54\n            For i As Integer = scales.Count - 1 To 0 Step -1\n                Dim strSplit() As String = scales(i).Split(\"=\")\n                Dim top As Double = FeetInchToDecimalInch(strSplit(0))\n                Dim bot As Double = FeetInchToDecimalInch(strSplit(1))\n                If top / bot * modWidth < viewWidthLimitInches Then\n                    strScale = scales(i)\n                    Exit For\n                End If\n            Next\n        End If"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Trouble with iLogic/VBA and font style overrides\n                    ", "solution": ["Dim oDoc As Document\noDoc = ThisApplication.ActiveDocument\n\nDim oSS As SelectSet\noSS = oDoc.SelectSet\n\noText = \"THIS IS TEXT\"\noSS.Item(1).FormattedText = \"<StyleOverride Bold = 'True' Underline = 'True'>\" & oTEXT & \"</StyleOverride>\""], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iproperties date is it 1st of november or 11th of january? vb.net\n                    ", "solution": ["' Get the custom property set", "\nDim DESTRACKPropSet As Inventor.PropertySet = Doc.PropertySets.Item(\"Design Tracking Properties\")\n", "\n' Get the date property", "\nDim PROPDATE As Inventor.Property = DESTRACKPropSet.Item(\"Date Checked\")\nDim VALDATE As String = PROPDATE.Value", "If VALDATE = vbNullString Then Exit Sub\n\n", "' Look for the separators and split the date", "\nDim SPa As Integer = InStr(VALDATE, \"-\")\nDim SPb As Integer = InStr(SPa + 1, VALDATE, \"-\")\nDim aMonth As String = Microsoft.VisualBasic.Left(VALDATE, SPa - 1)\nDim aDay As String = Mid(VALDATE, SPa + 1, SPb - SPa - 1)\nDim aYear As String = Mid(VALDATE, SPb + 1)\n\nMaskedTextBox1.Text = aMonth & \" \" & aDay & \" \" & aYear"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Call a productivity routine with VBA\n                    ", "solution": ["Function Run_CMD(ByVal cmd As String) As Boolean\n    ThisApplication.CommandManager.ControlDefinitions.item(cmd).Execute\nEnd Function\n\n'Running the Assembly Productivity Alpha Sort Component command\nrun_cmd(\"AssemblyBonusTools_AlphaSortComponentsCmd\")", "AssemblyBonusTools_AddAssemblyCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Inserts a new sub-assembly in the assembly", "AssemblyBonusTools_AddPartCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Inserts a new part in the assembly", "AssemblyBonusTools_AlphaSortComponentsCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Alpha Sort Components", "AssemblyBonusTools_CreateSubstitutesCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Create Substitutes", "AssemblyBonusTools_DeriveComponentCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Derives part from selected base component using default options", "AssemblyBonusTools_DOFAnalysisCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Degree of Freedom Analysis", "AssemblyBonusTools_GroundAndRootComponentCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Grounds component and roots it at origin", "AssemblyBonusTools_LinkLODsCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Activates all first-level LODs of same name", "AssemblyBonusTools_PlaceAtComponentOriginCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Adds new component and fixes it at the origin of selected existing component", "AssemblyBonusTools_RenameBrowserNodesCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Rename assembly browser nodes", "AssemblyBonusTools_SaveAndReplaceComponentCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Saves copy of component and replaces existing component in assembly with saved one", "AssemblyBonusTools_UpdateSubstitutesCmd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Update All Substitutes", "Sub PrintCommandNames()\n    Dim oControlDefs As ControlDefinitions\n    Set oControlDefs = ThisApplication.CommandManager.ControlDefinitions\n\n    Dim oControlDef As ControlDefinition\n    \n    Open \"C:\\Users\\Greg Fletcher\\OneDrive - Motion Controls Robotics, Inc-\\Inventor\\Scripting\\Misc\\Command Names.txt\" For Output As #1\n\n    Print #1, Tab(10); \"Command Name\"; Tab(75); \"Description\"; vbNewLine\n    \n    For Each oControlDef In oControlDefs\n        Print #1, oControlDef.InternalName; Tab(55); oControlDef.DescriptionText\n    Next\n    Close #1\nEnd Sub"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: ReplaceReference on \"Piping Runs Environment\" assembly does not wo\n                    ", "solution": [], "author": "marcus.heimsoth"},
{"created at": [], "solution Title": "\n                        Re: iLogic skip line if iProperty doesn't exist\n                    ", "solution": ["Try\n   glass_labour_set = (iProperties.Value(\"Custom\", \"GLASS_SET\")/60)*glass_labour_rate\n\nCatch\nEnd Try", "On Error Resume Next"], "author": "yosso22"},
{"created at": [], "solution Title": "\n                        Re: iLogic Assembly iProperties Change and Message Box Help\n                    ", "solution": ["'set flag default\noFlag = False\n\nIf iProperties.Value(\"Summary\", \"Author\") <> \"SethL\" Then\n\t'update iProps\n\tiProperties.Value(\"Summary\", \"Author\") = \"SethL\"\n\t'set message flag\n\toFlag = True\t\nEnd If\n\nIf iProperties.Value(\"Project\", \"Designer\") <> \"SethL\" Then\n\t'update iProps\n\tiProperties.Value(\"Project\", \"Designer\") = \"SethL\"\n\t'set message flag\n\toFlag = True\t\nEnd If\n\nIf oFlag = True Then\n\tMessageBox.Show (\"You updated iProperties.\", \"iLogic\")\nEnd If\n\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to get a propmted text value and populate iProperties\n                    ", "solution": ["'", "Read Title Block from Active Sheet", "\n \n", "Dim", " ", "oDoc", "  ", "As", " ", "Document", "\n", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oSheet", "  ", "As", " ", "Sheet", "\n", "oSheet", " ", "=", " ", "oDoc", ".", "ActiveSheet", "\n", "Dim", " ", "oTB1", "  ", "As", " ", "TitleBlock", "\n", "oTB1", " ", "=", " ", "oSheet", ".", "TitleBlock", "\n", "Dim", " ", "titleDef", " ", "As", " ", "TitleBlockDefinition", "\n", "titleDef", " ", "=", " ", "oTB1", ".", "Definition", "\n", "Dim", " ", "oPrompt", " ", "As", " ", "TextBox", "\n\n", "'", " Find the Prompted Entry called <MATERIALS> in the Title Block", "\n", "For", " ", "Each", " ", "defText", " ", "As", " ", "TextBox", " ", "In", " ", "titleDef", ".", "Sketch", ".", "TextBoxes", "\n    ", "If", " ", "defText", ".", "Text", " ", "=", " ", "\"", "<MATERIALS>", "\"", " ", "Then", "\n        ", "oPrompt", " ", "=", " ", "defText", "                        \n         ", "Exit", " ", "For", "              \n    ", "End", " ", "If", "\n", "Next", "    \n\n\n", "'", "write prompted entry to iprop", "\n\n", "Dim", " ", "Mat", " ", "As", " ", "String", "\n", "Mat", "=", "oTB1", ".", "GetResultText", "(", "oPrompt", ")", "\n", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ",", "\"", "Materials", "\"", ")", "=", "Mat", "\n"], "author": "jfildes"},
{"created at": [], "solution Title": "\n                        Re: iLogic Purge Unused Sketched Symbols\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim oSketchedSymbolDef As SketchedSymbolDefinition\nFor Each oSketchedSymbolDef In oDrawDoc.SketchedSymbolDefinitions\n\tIf oSketchedSymbolDef.IsReferenced = False Then\n  \toSketchedSymbolDef.Delete\n\tEnd If  \nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: create iLogic mate using iMate\n                    ", "solution": [], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re\u00a0: iLogic to change a parameter and save as part\n                    ", "solution": ["For", " ", "LENGHT", " ", "=", " ", "1", " ", "To", " ", "10", "\n    \n    ", "Parameter", "(", "\"", "LENGHT", "\"", ")", " ", "=", " ", "LENGHT", "\n    \n    ", "iProperties", ".", "Value", "(", "\"", "Summary", "\"", ", ", "\"", "Title", "\"", ")", " ", "=", " ", "\"", "PART LG ", "\"", " ", "&", " ", "LENGHT", " ", "&", " ", "\"", " mm", "\"", "\n    ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", " ", "=", " ", "\"", "PART", "\"", " ", "&", " ", "LENGHT", "\n    ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Description", "\"", ")", " ", "=", " ", "\"", "PART", "\"", " ", "&", " ", "LENGHT", "\n    \n    ", "Dim", " ", "Path", ", ", "PartName", ", ", "NewFileName", " ", "As", " ", "String", "\n    ", "Path", " ", "=", " ", "ThisDoc", ".", "Path", "\n    ", "PartName", " ", "=", " ", "ThisDoc", ".", "FileName", "\n    ", "NewFileName", " ", "=", " ", "Path", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "PartName", " ", "&", " ", "\"", " LG ", "\"", " ", "&", " ", "LENGHT", " ", "&", " ", "\"", ".ipt", "\"", "\n    \n    ", "ThisDoc", ".", "Document", ".", "SaveAs", "(", "NewFileName", ", ", "True", ")", "\n    \n", "Next"], "author": "ThomasB44"},
{"created at": [], "solution Title": "\n                        Re: iPropertie status Checked date CheckBox\n                    ", "solution": ["' create a date variable and set it to the default date of Jan 01, 1601\nDim newDate As Date = New Date(1601, 1, 1)\n' assign the date the property value\nprop.Value = newDate\n'or set the expression\nprop.Expression = newDate.ToShortDateString()"], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: Cannot get the right Sheet-metal template after installing a language pack\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Bar Code Installation in inventor2016\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: iLogic extrusion turn active or inactive by name\n                    ", "solution": ["Dim oDoc As PartDocument", "oDoc = ThisApplication.ActiveDocument", "For Each oExtrude As ExtrudeFeature In oDoc.ComponentDefinition.Features.ExtrudeFeatures ", "\u00a0\u00a0\u00a0 If oExtrude.Name.Contains(\"MPK\") Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oExtrude.Suppressed = False", "\u00a0\u00a0\u00a0 End If", "Next"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: ilogic automatically turn part visibility off\n                    ", "solution": ["Dim assemblyDef As AssemblyComponentDefinition = ThisDoc.Document.ComponentDefinition\n\nDim occ As Inventor.ComponentOccurrence\nFor Each occ In assemblyDef.Occurrences.AllLeafOccurrences\n    Dim refDoc As PartDocument = occ.Definition.Document\n    \n    Dim customPropSet As PropertySet\n    customPropSet = refDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n\tDim weightProp As Inventor.Property\n\tweightProp = Nothing\n\tTry\n\t\tweightProp = customPropSet.Item(\"WEIGHT\")\n    Catch ex As Exception\n\tEnd Try\t\t\n    \n    If Not weightProp Is Nothing Then\n        Dim weightVal As Double\n        weightVal = weightProp.Value\n        \n        If weightVal < 0.00000001 Then\n            occ.Visible = False\n        Else\n            occ.Visible = True\n        End If\n    End If\nNext"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic and sketch symbol library\n                    ", "solution": ["Dim oSketchSymLib As SketchedSymbolDefinitionLibrary\noSketchSymLib = oDrawing.SketchedSymbolDefinitions.SketchedSymbolDefinitionLibraries.Item(\"Library\")\n\nDim oSSDEf As SketchedSymbolDefinition\noSSDef = oDrawing.SketchedSymbolDefinitions.AddFromLibrary(oSketchSymLib, \"The Name Of The Sketched Symbol\", True)"], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: API  - get Parameter object from assembly constraint.\n                    ", "solution": [], "author": "ebaker4KXH6"},
{"created at": [], "solution Title": "\n                        Re: Get UnitTypeEnum from UnitsOfMeasure for \"Text\" and \"Boolean&\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Create a pattern inside a sketch/block with iLogic\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: NAS in Content Center\n                    ", "solution": [], "author": "Jon.Dean"},
{"created at": [], "solution Title": "\n                        Re: Center a leader on an edge.\n                    ", "solution": ["        ' Create an intent and add to the leader points collection.\n        ' This is the geometry that the leader text will attach to.\n        Dim oGeometryIntent As GeometryIntent\n        oGeometryIntent = oActiveSheet.CreateGeometryIntent(oDrawingCurve, ", "oMidPoint", ")\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Rangebox error in sheet metal part with spline\n                    ", "solution": ["Public Sub t2()\n    Dim doc As PartDocument\n    Set doc = ThisDocument\n    \n    Dim xWidth As Double\n    Dim yLength As Double\n    \n    doc.ObjectVisibility.AllWorkFeatures = False\n    doc.ObjectVisibility.ConstructionSurfaces = False\n    doc.ObjectVisibility.SketchDimensions = False\n    doc.ObjectVisibility.Sketches = False\n    doc.ObjectVisibility.Sketches3D = False\n    \n    Dim boundingBox As Box\n    Set boundingBox = doc.ComponentDefinition.SurfaceBodies.Item(1).RangeBox\n    \n    xWidth = Round(Abs(boundingBox.MaxPoint.X - boundingBox.MinPoint.X), 3)\n    yLength = Round(Abs(boundingBox.MaxPoint.Y - boundingBox.MinPoint.Y), 3)\n   \n    Debug.Print \"X = \" & xWidth\n    Debug.Print \"Y = \" & yLength\n    \n    Set boundingBox = TightRangeBox(doc.ComponentDefinition.SurfaceBodies.Item(1))\n\n    xWidth = Round(Abs(boundingBox.MaxPoint.X - boundingBox.MinPoint.X), 3)\n    yLength = Round(Abs(boundingBox.MaxPoint.Y - boundingBox.MinPoint.Y), 3)\n   \n    Debug.Print \"Tight\"\n    Debug.Print \"X = \" & xWidth\n    Debug.Print \"Y = \" & yLength\nEnd Sub\n\nPublic Function TightRangeBox(Body As Inventor.SurfaceBody) As Inventor.Box\n    ' Get the existing mesh of the highest resolution.\n    Dim tolCount As Long\n    Dim tols() As Double\n    Call Body.GetExistingFacetTolerances(tolCount, tols)\n    Dim i As Integer\n    Dim bestTol As Double\n    bestTol = tols(0)\n    For i = 1 To tolCount - 1\n        If tols(i) < bestTol Then\n            bestTol = tols(i)\n        End If\n    Next\n    \n    Dim vertexCount As Long\n    Dim facetCount As Long\n    Dim vertexCoords() As Double\n    Dim normalVectors() As Double\n    Dim vertexIndices() As Long\n    Call Body.GetExistingFacets(bestTol, vertexCount, facetCount, vertexCoords, normalVectors, vertexIndices)\n    \n    ' Loop through the vertices and build up the range box.\n    Dim minX As Double\n    Dim maxX As Double\n    Dim minY As Double\n    Dim maxY As Double\n    Dim minZ As Double\n    Dim maxZ As Double\n    minX = vertexCoords(0)\n    maxX = vertexCoords(0)\n    minY = vertexCoords(1)\n    maxY = vertexCoords(1)\n    minZ = vertexCoords(2)\n    maxZ = vertexCoords(2)\n    For i = 1 To vertexCount - 1\n        If vertexCoords(i * 3) < minX Then\n            minX = vertexCoords(i * 3)\n        End If\n        \n        If vertexCoords(i * 3) > maxX Then\n            maxX = vertexCoords(i * 3)\n        End If\n    \n        If vertexCoords(i * 3 + 1) < minY Then\n            minY = vertexCoords(i * 3 + 1)\n        End If\n        \n        If vertexCoords(i * 3 + 1) > maxY Then\n            maxY = vertexCoords(i * 3 + 1)\n        End If\n    \n        If vertexCoords(i * 3 + 2) < minZ Then\n            minZ = vertexCoords(i * 3 + 2)\n        End If\n        \n        If vertexCoords(i * 3 + 2) > maxZ Then\n            maxZ = vertexCoords(i * 3 + 2)\n        End If\n    Next\n    \n    Dim newBox As Box\n    Set newBox = ThisApplication.TransientGeometry.CreateBox()\n    newBox.MinPoint = ThisApplication.TransientGeometry.CreatePoint(minX, minY, minZ)\n    newBox.MaxPoint = ThisApplication.TransientGeometry.CreatePoint(maxX, maxY, maxZ)\n    \n    Set TightRangeBox = newBox\nEnd Function\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Creation of Part using iLogic\n                    ", "solution": ["    Dim oAssDoc As AssemblyDocument\n    oAssDoc = ThisApplication.ActiveDocument\n    \n     Dim oAssDef As AssemblyComponentDefinition\n     oAssDef = oAssDoc.ComponentDefinition\n    \n    Dim oNewPart As PartDocument\n     oNewPart = ThisApplication.Documents.Add(kPartDocumentObject, , False)\n    \n    Dim oNewPartDef As PartComponentDefinition\n     oNewPartDef = oNewPart.ComponentDefinition\n    \n    'do what you need to create in this part\n    'e.g. create a block\n    \n    Dim oTG As TransientGeometry\n     oTG = ThisApplication.TransientGeometry\n    \n    Dim oSketch As PlanarSketch\n     oSketch = oNewPartDef.Sketches.Add(oNewPartDef.WorkPlanes(1))\n    \n    Call oSketch.SketchLines.AddAsTwoPointRectangle(oTG.CreatePoint2d(0, 0), oTG.CreatePoint2d(10, 10))\n    \n    Dim oProfile As Profile\n     oProfile = oSketch.Profiles.AddForSolid()\n    \n    Dim oExtrudeDef As ExtrudeDefinition\n     oExtrudeDef = oNewPartDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, kJoinOperation)\n    \n    Call oExtrudeDef.SetDistanceExtent(1#, kPositiveExtentDirection)\n    \n    Call oNewPartDef.Features.ExtrudeFeatures.Add(oExtrudeDef)\n    \n    'place without any transformation\n    'can adjust the matrix with your requirement\n    Dim oMartrix As Matrix\n    oMatrix = ThisApplication.TransientGeometry.CreateMatrix()\n    \n    'add the new part to the assembly\n    Dim oNewOcc As ComponentOccurrence\n    oNewOcc = oAssDef.Occurrences.AddByComponentDefinition(oNewPartDef, oMatrix)\n    \n     \n    \n "], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Question for AAD: Checkin local files in Vault\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Ilogic code to do component replace based on file name search\n                    ", "solution": ["Dim", " ", "fullPath", " ", "As", " ", "String", "\n    ", "fullPath", " ", "=", " ", "dirs", ".", "getvalue", "(", "0", ")", "Dim", " ", "FN", " ", "As", " ", "String", " \n    ", "FN", " ", "=", " ", "\"", "ISO 4014 - ", "\"", " ", "&", " ", "BOLT_DESIG", " ", "&", " ", "\"", "ISO.ipt", "\"", "\n", "Dim", " ", "SearchLocation", " ", "As", " ", "String", " ", "=", " ", "\"", "\\\\BG-DOC1\\am\\Vault,D-Comtec\\CONTENT CENTRE FILES\\en-US\\ISO 4014(2)\\", "\"", "\n\n", "Try", "\n    ", "Dim", " ", "dirs", " ", "As", " ", "String", "()", "\n    ", "dirs", " ", "=", " ", "System", ".", "IO", ".", "Directory", ".", "GetFiles", "(", "SearchLocation", ", ", "FN", ")", "\n    ", "Dim", " ", "fullPath", " ", "As", " ", "String", "\n    ", "fullPath", " ", "=", " ", "dirs", ".", "getvalue", "(", "0", ")", "\n", "Catch", "\n    ", "MessageBox", ".", "Show", "(", "\"", "The selected bolt size ", "\"", " ", "&", " ", "FN", " ", "&", " ", "\"", " is not available in Meridian\\Content Centre Files", "\"", " ", "_", "\n    ", "&", " ", "vbNewLine", " ", "&", " ", "\"\"", " ", "_", "\n    ", "&", " ", "vbLf", " ", "&", " ", "\"", "Please create a new content centre part file with correct bolt length and re-run the rules OR", "\"", " ", "_", "\n    ", "&", " ", "vbNewLine", " ", "&", " ", "\"\"", " ", "_", "\n    ", "&", " ", "vbCrLf", " ", "&", " ", "\"", "Manually replace the bolt with desired length.", "\"", ", ", "\"", "Bolt Replacemetn", "\"", ",", "MessageBoxButtons", ".", "OK", ",", "MessageBoxIcon", ".", "Error", ")", "\n    ", "Return", "\n\n", "End", " ", "Try", "\n\n", "Dim", " ", "strRelativeFileLocation", " ", "As", " ", "String", " ", "=", " ", "\"", "\\\\BG-DOC1\\am\\Vault,D-Comtec\\CONTENT CENTRE FILES\\en-US\\ISO 4014(2)\\", "\"", " ", "&", " ", "FN", "\n", "Component", ".", "Replace", "(", "\"", "BR BOLT", "\"", ", ", "strRelativeFileLocation", ", ", "True", ")", "\n"], "author": "Wind_Talker"},
{"created at": [], "solution Title": "\n                        Re: API - Compile error with DrawingView\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: iLogic Code to emulate VLOOKUP & MATCH\n                    ", "solution": ["GoExcel", ".", "TitleRow", " ", "=", " ", "1", " ", "'", "Row number", "\n", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "enter your own filepath", "\\HVAC Dims Table 01.xlsx", "\"", ", ", "\"", "Sheet1", "\"", ", ", "\"", "MODEL #", "\"", ", ", "\"", "=", "\"", ", ", "HVAC_Model_No", ")", "\n", "'", "If model number match is found, if no match is found i = -1", "\n", "If", " ", "i", " ", "<>", " ", "-", "1", " ", "Then", "\n", "HVAC_W", " ", "=", "  ", "GoExcel", ".", "CurrentRowValue", "(", "\"", "HVAC_W", "\"", ")", "\n", "'", "Repeat this line with all your other inventor parameters", "\n\n", "End", " ", "If", "\n"], "author": "Jon.Balgley"},
{"created at": [], "solution Title": "\n                        Re: what's the relationship between Ilogc and ETO?\n                    ", "solution": [], "author": "Yijiang.Cai"},
{"created at": [], "solution Title": "\n                        Re: Change imported ipt name in assembly treeview (Inventor api/ vb.net).\n                    ", "solution": [], "author": "Yijiang.Cai"},
{"created at": [], "solution Title": "\n                        Re: Drawing Note box size\n                    ", "solution": [], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: Enable or disable a custom command button from a form window (VB)\n                    ", "solution": [], "author": "Thomas.Rambach"},
{"created at": [], "solution Title": "\n                        Re: Can't define an object from a class.\n                    ", "solution": ["Dim TG As Inventor.TransientGeometry = ", "InventorApplication", ".TransientGeometry\nDim nMaxPoint As Point2d = TG.CreatePoint2d(0, 0)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic question\n                    ", "solution": ["Sub Main()\n    Dim oDoc As Document = ThisApplication.ActiveDocument\n    Dim oPath As String = ThisDoc.Path & \"\\\"\n    Dim ParA As Double = Parameter.Param(\"", "a", "\")\n    Dim ParB As Double = Parameter.Param(\"", "b", "\")\n    Dim Thick As Double = ", "10", "\n    Dim aDoc As Document\n    Dim aPart As String\n    \n    ", "' Part1:", "\n    aPart = GetPart(oDoc, \"", "Part1", "\")\n    aDoc = ThisApplication.Documents.Open(aPart, False)\n    oParameter(aDoc, \"", "a", "\").Expression = ParA\n    oParameter(aDoc, \"", "t", "\").Expression = Thick\n    aDoc.Update\n    aDoc.SaveAs(oPath & \"", "Part11.ipt", "\")\n    aDoc.Close(True)\n    \n    ", "' Part2:", "\n    aPart = GetPart(oDoc, \"", "Part2", "\")\n    aDoc = ThisApplication.Documents.Open(aPart, False)\n    oParameter(aDoc, \"", "a", "\").Expression = ParA - Thick\n    oParameter(aDoc, \"", "t", "\").Expression = Thick\n    aDoc.Update\n    aDoc.SaveAs(oPath & \"", "Part12.ipt", "\")\n    aDoc.Close(True)\n    \n    ", "' Part3:", "\n    aPart = GetPart(oDoc, \"", "Part3", "\")\n    aDoc = ThisApplication.Documents.Open(aPart, False)\n    oParameter(aDoc, \"", "a", "\").Expression = ParA - (Thick * 2)\n    oParameter(aDoc, \"", "t", "\").Expression = Thick\n    aDoc.Update\n    aDoc.SaveAs(oPath & \"", "Part13.ipt", "\")\n    aDoc.Close(True)\n    \n    ", "' Part4:", "\n    aPart = GetPart(oDoc, \"", "Part4", "\")\n    aDoc = ThisApplication.Documents.Open(aPart, False)\n    oParameter(aDoc, \"", "a", "\").Expression = ParA - Thick\n    oParameter(aDoc, \"", "t", "\").Expression = Thick\n    aDoc.Update\n    aDoc.SaveAs(oPath & \"", "Part14.ipt", "\")\n    aDoc.Close(True)\n\n    ", "' Now we have to update the Assy", "\n    Dim NewPart As String\n    Dim oOcc As ComponentOccurrence\n    For Each oOcc In oDoc.ComponentDefinition.Occurrences\n        Dim oName As String = oOcc.Name\n        Dim FNP As Integer = InStrRev(oName, \":\", -1)\n        If FNP > 0 Then oName = Left(oName, FNP - 1) Else Continue For\n        Select Case oName\n        Case \"", "Part1", "\": NewPart = oPath & \"", "Part11", "\"\n        Case \"", "Part2", "\": NewPart = oPath & \"", "Part12", "\"\n        Case \"", "Part3", "\": NewPart = oPath & \"", "Part13", "\"\n        Case \"", "Part4", "\": NewPart = oPath & \"", "Part14", "\"\n        Case Else:     Continue For\n        End Select\n        oOcc.Replace(NewPart & \".ipt\", True) ", "' True to replace all occurrences", "\n    Next\n    oDoc.Update\n    oDoc.SaveAs(oPath & \"", "Assy11.iam", "\", True)\n    ThisApplication.Documents.Open(oPath & \"", "Assy11.iam", "\", True)\n    'oDoc.Close(True) ", "' Close original assy", "\nEnd Sub\n\nPublic Function oParameter(oDoc As Document, oPara As String) As Parameter\n    Dim oParams As Parameters = oDoc.ComponentDefinition.Parameters\n    oParameter = oParams.Item(oPara)\nEnd Function\n\nPublic Function GetPart(oDoc As Document, PartName As String) As String\n    Dim aDoc As Document\n    For Each aDoc In oDoc.ReferencedDocuments\n        If aDoc.DisplayName = PartName Then Return aDoc.FullFileName\n    Next\nEnd Function"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Get SheetMetal Origin\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Adding a new Ribbon\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Plot in Inventor\n                    ", "solution": ["Private Sub cmdPlot_Click()\n' Define application\nDim oApp As Inventor.Application\nSet oApp = ThisApplication\n \n' Define document\nDim oCurrentDoc As DrawingDocument\nSet oCurrentDoc = oApp.ActiveDocument\n \n' Define sheets\nDim oSheets As Sheets\nSet oSheets = oCurrentDoc.Sheets\nDim oSheet As Sheet ", "' Here is oSheet declared", "\nSet oSheet = oCurrentDoc.Sheets.Item(1) ", "' Here is it given value", "' ...", "' ...", "End Select\nFor Each oSheet In oSheets ", "' Here it is used to go through every sheet in sheets", "\noSheet.Activate", "' ...", "' ...", "\nIf oSheet Is Nothing Then Continue For\noSheet.Activate\n", "' ..."], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Edit BOM using VBA\n                    ", "solution": [], "author": "risto.asikainen"},
{"created at": [], "solution Title": "\n                        Re: Pattern of a pattern using ilogic\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "AssemblyDocument", "\n    ", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n \n", "Dim", " ", "oPattern", " ", "As", " ", "OccurrencePattern", "\n    ", "oPattern", " ", "=", " ", "oDoc", ".", "ComponentDefinition", ".", "OccurrencePatterns", ".", "Item", "(", "\"", "BR STRING FASTENER SET", "\"", ")", "\n    \n", "Dim", " ", "oElement", " ", "As", " ", "OccurrencePatternElement", "\n    ", "oElements", " ", "=", " ", "oPattern", ".", "OccurrencePatternElements", "\n\n", "Dim", " ", "i", " ", "As", " ", "Integer", "\n", "For", " ", "i", " ", "=", " ", "1", " ", "To", " ", "oElements", ".", "Count", "\n    ", "Dim", " ", "OCCS", " ", "As", " ", "OccurrencePatternElement", "\n        ", "OCCS", " ", "=", " ", "oElements", "(", "i", ")", ".", "Components", "(", "1", ")", ".", "OccurrencePatternElements", "(", "1", ")", "\n        \n    ", "For", " ", "Each", " ", "OCCS", " ", "In", " ", "oElements", "\n        ", "Try", "\n            ", "Component", ".", "Replace", "(", "\"", "BR BOLT 1", "\"", ", ", "\"File name to replace with including path\"", ", ", "False", ")", "\n            ", "Component", ".", "Replace", "(", "\"", "BR BOLT 2", "\"", ", ", "\"File name to replace with including path\"", ", ", "False", ")", "\n            ", "Component", ".", "Replace", "(", "\"", "BR BOLT 3", "\"", ", ", "\"File name to replace with including path\"", ", ", "False", ")", "\n        ", "Catch", "\n            'some code here", "        ", "End", " ", "Try", "\n    ", "Next", "\n", "Next", "\n\n", "InventorVb", ".", "DocumentUpdate", "()"], "author": "Wind_Talker"},
{"created at": [], "solution Title": "\n                        Re: Nulll reference error on Form load.\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How to change a Box2d size?\n                    ", "solution": ["Sub generalNote_test()\n   \n    Dim oDrwDoc As DrawingDocument\n    Set oDrwDoc = ThisApplication.ActiveDocument\n    \n    Dim oObj As Object\n    Set oObj = oDrwDoc.SelectSet(1)\n    \n    If TypeName(oObj) = \"GeneralNote\" Then\n        \n        Dim genNote As GeneralNote\n        Set genNote = oObj\n        \n        genNote.Width = genNote.Width + 10\n        genNote.Height = genNote.Height + 10\n        \n    End If\n\nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Dwg Export to DXF addin automatically zipping output files.\n                    ", "solution": [], "author": "eric.mathews"},
{"created at": [], "solution Title": "\n                        Re: iLogic Changing View Scale\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument = ThisDrawing.Document\nDim oView As DrawingView\nDim oScale As Double\n\nFor Each oSheet As Sheet In oDrawDoc.Sheets\n    For Each oView In oSheet.DrawingViews\n        oScale = InputBox(\"Enter Desired Scale\", \"Scaler\", \"1\")\n        If oView.ScaleFromBase Then Continue For\n        ", "If oView.Camera.ViewOrientationType.ToString = \"kIsoTopRightViewOrientation\" Then", "\n            oView.Scale = oScale\n        End If\n    Next\nNext", "If Left(oView.Camera.ViewOrientationType.ToString, 4) = \"kIso\" Then", "\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: VBA code for zooming to area.\n                    ", "solution": ["Public Sub Zoom_With_Camera()\n    \n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n\n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n       \n    Dim sheetWidth As Double\n    sheetWidth = oSheet.Width\n    \n    Dim sheetHeight As Double\n    sheetHeight = oSheet.Height\n   \n    Dim oCamera As Camera\n    Set oCamera = ThisApplication.ActiveView.Camera\n    'Set oCamera = oDoc.Views(1).Camera\n\n    Dim NewTargetPnt As point\n    Set NewTargetPnt = ThisApplication.TransientGeometry.CreatePoint(sheetWidth / 2, sheetHeight / 2, 0)\n    oCamera.Target = NewTargetPnt\n\n    Dim newEyePnt As point\n    Set newEyePnt = ThisApplication.TransientGeometry.CreatePoint(sheetWidth / 2, sheetHeight / 2, 1)\n    oCamera.Eye = newEyePnt\n    \n    oCamera.UpVector = ThisApplication.TransientGeometry.CreateUnitVector(0, 1, 0)\n  \n  ' Call oCamera.SetExtents(40, 40)\n   oCamera.Apply\n\nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Comp replace by next or previous file in a network folder if reqd file not a\n                    ", "solution": ["Sub Main()\n", "' 3) Look for the file directly", "\nDim FN As String = \"", "ISO 4014 \u2013 M12 x 210 ISO.ipt", "\"\nDim SearchLocation As String = _", "\"", "\\\\BG-DOC1\\am\\Vault,D-Comtec\\CONTENT CENTRE FILES\\en-US\\ISO 4014(2)\\", "\"\nIf Dir(SearchLocation & FN) <> 0 Then\n    MsgBox(\"This bolt exists\" & vblf & \"Congratulations, you've found it !\")\n    Exit Sub\nEnd If\n\n", "' 1) Get all the files", "\nDim FullFileList As New ArrayList\nDim File As String\nDim ", "Files", " As String()\n", "Files", " = System.IO.Directory.GetFiles(SearchLocation, \"*.ipt\")\nFor Each File In ", "Files", "\n    Dim FNP As Integer = InStrRev(File, \"\\\", -1)", "    File = Mid(File, FNP + 1)", "    FullFileList.Add(File)\nNext\n\n", "' 2) Create messagebox with all the bolts", "\nDim tText As String\nDim oItem As String\nFor Each oItem In FullFileList\n    tText = tText & vblf & oItem\nNext\nMsgBox(tText)\n\n", "' 4) And 5) Create arrays with bigger and smaller sizes", "\nDim sName As String = GetShortName(FN)\nDim FNP As Integer = InStrRev(UCase(sName), \"X\")\nDim sDia As Integer = Val(Left(fVals, FNP - 2)) ", "' -2 to cut off \" X\"", "\nDim sLen As Integer = Val(Mid(fVals, FNP + 2)) ", "' +2 to cut off \"X \"", "\nDim FilesBigger As New ArrayList\nDim FilesSmaller As New ArrayList\nFor Each oItem In FullFileList\n    Dim fVals As String = GetShortName(oItem)\n    FNP = InStrRev(UCase(fVals), \"X\")\n    Dim oDia As Integer = Val(Left(fVals, FNP - 2))\n    Dim oLen As Integer = Val(Mid(fVals, FNP + 2))\n    If sDia = oDia\n        If sLen > oLen Then\n            FilesSmaller.Add(oItem)\n        ElseIf sLen < oLen\n            ", "FilesBigger.Add(oItem)", "\n        End If\n    End If\nNext\n\n", "'6) Ask if the user wants to replace it\n' For the sake of testing, I'll assume the last item of the FilesSmaller is", "' the biggest one and vice versa for FilesBigger", "Dim TempItem As String = FilesSmaller.Items.Item(FilesSmaller.Items.Count - 1)", "Q1 = MessageBox.Show(\"Do you want to replace this:\" & vblf & FN & vblf & vblf & _", "\"With this:\" & vblf & TempItem, _", "\"MessageBox Title\", MessageBoxButtons.YesNo)\n", "' Items - 1, cos first item is 0", "If Q1 = vbYes Then\n    ReplaceComponent(FN, SearchLocation & TempItem)\nElse\n    TempItem = FilesBigger.Items.Item(0)", "    Q2  = MessageBox.Show(\"Do you want to replace this:\" & vblf & FN & vblf & vblf & _", "    \"With this:\" & vblf & TempItem, _", "    \"MessageBox Title\", MessageBoxButtons.YesNo)\n    If Q2 = vbYes Then\n        ReplaceComponent(FN, SearchLocation & TempItem)\n    End If\nEnd If\nEnd Sub\n\nPrivate Function GetShortName(oName As String) As String\n    Dim FNP As Integer = InStrRev(oName, \"-\")\n    Dim fVals As String = Mid(oName, FNP + 3) ", "' +3 to cut off \"- M\"", "\n    FNP = InStrRev(fVals, \" \")\n    fVals = Left(fVals, FNP - 1) ", "' -1 to not include the space itself", "\nEnd Function", "Private Sub ReplaceComponent(FN As String, oName As String)", "    FN = Left(FN, Len(FN) - 4) ", "' To cut off the \".ipt\"", "    Dim oDoc As Document = ThisApplication.ActiveDocument", "    Dim oOcc As ComponentOccurrence", "    For Each oOcc In oDoc.ComponentDefinition.Occurrences", "        Dim ocName As String = oOcc.Name", "        Dim FNP As Integer = InStrRev(ocName, \":\" -1)", "        ocName = Left(ocName, FNP - 1)", "        If ocName = FN Then", "            oOcc.Replace(oName, True) ", "' True to replace all occurrences", "            Exit For", "        End If", "    Next", "End Sub", "Dim", " ", "FN", " ", "As", " ", "String", " ", "=", " ", "\"", "ISO 4014 \u00e2\u20ac\u201c M12 x 210ISO.ipt", "\"", "\n", "Dim", " ", "fullfilelist", " ", "As", " ", "New", " ", "ArrayList", "\n", "Dim", " ", "SearchLocation", " ", "As", " ", "String", " ", "=", " ", "\"", "\\\\BG-DOC1\\am\\Vault,D-Comtec\\CONTENT CENTRE FILES\\en-US\\ISO 4014(2)\\", "\"", "\n", "Dim", " ", "File", " ", "As", " ", "String", "\n", "Dim", " ", "Files", " ", "As", " ", "String", "()", "\n    ", "Files", " ", "=", " ", "System", ".", "IO", ".", "Directory", ".", "GetFiles", "(", "SearchLocation", ", ", "\"", "*.ipt", "\"", ")", "\n", "For", " ", "Each", " ", "File", " ", "In", " ", "Files", "\n    ", "Dim", " ", "FPN", " ", "As", " ", "Integer", " ", "=", " ", "InStrRev", "(", "File", ", ", "\"", "\\", "\"", ", ", "-", "1", ")", "\n    ", "File", " ", "=", " ", "Mid", "(", "File", ", ", "FPN", " ", "+", " ", "1", ")", "\n    ", "FullFileList", ".", "Add", "(", "File", ")", "\n", "Next", "\n\n", "Dim", " ", "tText", " ", "As", " ", "String", "\n", "Dim", " ", "oItem", " ", "As", " ", "String", "\n", "For", " ", "Each", " ", "oItem", " ", "In", " ", "FullFileList", "\n    ", "tText", " ", "=", " ", "oItem", " ", "&", " ", "vbLf", " ", "&", " ", "tText", "\n", "Next", "\n", "MsgBox", "(", "tText", ")", "\n\n", "Dim", " ", "sName", " ", "As", " ", "String", "\n    ", "Dim", " ", "RName", " ", "As", " ", "String", " ", "=", " ", "Mid", "(", "FN", ", ", "13", ")", "\n    ", "RNC", " ", "=", " ", "InStrRev", "(", "RName", ", ", "\"", "I", "\"", ")", "\n    ", "sName", " ", "=", " ", "Left", "(", "RName", ", ", "RNC", " ", "-", " ", "1", ")", "\n\n", "Dim", " ", "FNP", " ", "As", " ", "Integer", " ", "=", " ", "InStrRev", "(", "UCase", "(", "sName", ")", ", ", "\"", "X", "\"", ")", "\n", "Dim", " ", "sDia", " ", "As", " ", "Integer", " ", "=", " ", "Val", "(", "Left", "(", "sName", ", ", "FNP", " ", "-", " ", "2", "))", " \n", "Dim", " ", "sLen", " ", "As", " ", "Integer", " ", "=", " ", "Val", "(", "Mid", "(", "sName", ", ", "FNP", " ", "+", " ", "2", "))", " \n", "Dim", " ", "FilesBigger", " ", "As", " ", "New", " ", "List", "(", "Of", " ", "String", ")", "\n", "Dim", " ", "FilesSmaller", " ", "As", " ", "New", " ", "List", "(", "Of", " ", "String", ")", "\n", "Dim", " ", "BoltLengthSmaller", " ", "As", " ", "New", " ", "List", "(", "Of", " ", "Integer", ")", "\n", "Dim", " ", "BoltLengthBigger", " ", "As", " ", "New", " ", "List", "(", "Of", " ", "Integer", ")", "\n", "For", " ", "Each", " ", "oItem", " ", "In", " ", "FullFileList", "\n    ", "Dim", " ", "fnVals", " ", "As", " ", "String", "\n        ", "Dim", " ", "fVals", " ", "As", " ", "String", " ", "=", " ", "Mid", "(", "oItem", ", ", "13", ")", "\n        ", "FVP", " ", "=", " ", "InStrRev", "(", "fVals", ", ", "\"", "I", "\"", ")", "\n        ", "fnVals", " ", "=", " ", "Left", "(", "fVals", ", ", "FVP", " ", "-", " ", "1", ")", "\n    ", "FNP", " ", "=", " ", "InStrRev", "(", "UCase", "(", "fnVals", ")", ", ", "\"", "X", "\"", ")", "\n    ", "Dim", " ", "oDia", " ", "As", " ", "Integer", " ", "=", " ", "Val", "(", "Left", "(", "fnVals", ", ", "FNP", " ", "-", " ", "2", "))", "\n    ", "Dim", " ", "oLen", " ", "As", " ", "Integer", " ", "=", " ", "Val", "(", "Mid", "(", "fnVals", ", ", "FNP", " ", "+", " ", "2", "))", "\n    ", "If", " ", "sDia", " ", "=", " ", "oDia", "\n        ", "If", " ", "sLen", " ", ">", " ", "oLen", " ", "Then", "\n            ", "FilesSmaller", ".", "Add", "(", "oItem", ")", "\n              ", "BoltLengthSmaller", ".", "Add", "(", "oLen", ")", "\n        ", "ElseIf", " ", "sLen", " ", "<", " ", "oLen", "\n            ", "FilesBigger", ".", "Add", "(", "oItem", ")", "\n            ", "BoltLengthBigger", ".", "Add", "(", "oLen", ")", "\n        ", "End", " ", "If", "\n    ", "End", " ", "If", "\n", "Next", "\n\n", "BoltLengthSmaller", ".", "Sort", "()", "\n", "BoltLengthSmaller", ".", "Reverse", "\n", "BoltLengthBigger", ".", "Sort", "()", "\n", "BoltLengthBigger", ".", "Reverse", "\n", "FilesSmaller", ".", "Sort", "()", "\n", "FilesBigger", ".", "Sort", "()", "\n\n", "Dim", " ", "FileNameSmaller", " ", "As", " ", "String", "\n", "If", " ", "FilesSmaller", ".", "count", " ", ">=", " ", "1", " ", "Then", "\n    ", "For", " ", "i", " ", "As", " ", "Integer", " ", "=", " ", "FilesSmaller", ".", "Count", " ", "-", "1", " ", "To", " ", "0", " ", "Step", " ", "-", "1", "\n        ", "Dim", " ", "FilesSmallerItem", " ", "=", " ", "FilesSmaller", "(", "i", ")", "\n        ", "If", " ", "FilesSmallerItem", ".", "Length", " ", ">", " ", "27", " ", "Then", "\n            ", "Dim", " ", "indexS", " ", "As", " ", "Integer", " ", "=", " ", "FilesSmaller", ".", "IndexOf", "(", "FilesSmallerItem", ")", "\n            ", "FilesSmaller", ".", "RemoveAt", "(", "indexS", ")", "\n        ", "End", " ", "If", "\n    ", "Next", "\n    \n    ", "Dim", " ", "BoltLengthMax", " ", "As", " ", "Integer", " ", "=", " ", "Integer", ".", "MinValue", "\n    ", "For", " ", "Each", " ", "element", " ", "As", " ", "Integer", " ", "In", " ", "BoltLengthSmaller", "\n        ", "BoltLengthMax", " ", "=", " ", "Math", ".", "Max", "(", "BoltLengthMax", ", ", "element", ")", "\n    ", "Next", "\n    \n    ", "Dim", " ", "BoltLengthMaxStr", " ", "As", " ", "String", " ", "=", " ", "CStr", "(", "BoltLengthMax", ")", "\n    ", "For", " ", "Each", " ", "Str", " ", "As", " ", "String", " ", "In", " ", "FilesSmaller", "\n        ", "If", " ", "Str", ".", "Contains", "(", "BoltLengthMaxStr", ")", " ", "Then", "\n            ", "FileNameSmaller", " ", "=", " ", "Str", "\n        ", "End", " ", "If", "\n    ", "Next", "\n", "End", " ", "If", "\n\n", "Dim", " ", "FileNameBigger", " ", "As", " ", "String", "\n", "If", " ", "FilesBigger", ".", "count", " ", ">=", " ", "1", " ", "Then", "\n    ", "For", " ", "j", " ", "As", " ", "Integer", " ", "=", " ", "FilesBigger", ".", "Count", " ", "-", "1", " ", "To", " ", "0", " ", "Step", " ", "-", "1", "\n        ", "Dim", " ", "FilesBiggerItem", " ", "=", " ", "FilesBigger", "(", "j", ")", "\n        ", "If", " ", "FilesBiggerItem", ".", "Length", " ", ">", " ", "27", " ", "Then", "\n            ", "Dim", " ", "indexB", " ", "As", " ", "Integer", " ", "=", " ", "FilesBigger", ".", "IndexOf", "(", "FilesBiggerItem", ")", "\n            ", "FilesBigger", ".", "RemoveAt", "(", "indexB", ")", "\n        ", "End", " ", "If", "\n    ", "Next", "\n    \n    ", "Dim", " ", "BoltLengthMin", " ", "As", " ", "Integer", " ", "=", " ", "Integer", ".", "MaxValue", "\n    ", "For", " ", "Each", " ", "element", " ", "As", " ", "Integer", " ", "In", " ", "BoltLengthBigger", "\n        ", "BoltLengthMin", " ", "=", " ", "Math", ".", "Min", "(", "BoltLengthMin", ", ", "element", ")", "\n    ", "Next", "\n    \n    ", "Dim", " ", "BoltLengthMinStr", " ", "As", " ", "String", " ", "=", " ", "CStr", "(", "BoltLengthMin", ")", "\n    ", "For", " ", "Each", " ", "Str", " ", "As", " ", "String", " ", "In", " ", "FilesBigger", "\n        ", "If", " ", "Str", ".", "Contains", "(", "BoltLengthMinStr", ")", " ", "Then", "\n            ", "FileNameBigger", " ", "=", " ", "Str", "\n        ", "End", " ", "If", "\n    ", "Next", "\n", "End", " ", "If", "\n\n", "If", " ", "FilesSmaller", ".", "count", " ", ">=", " ", "1", " ", "Then", "\n    ", "Q1", " ", "=", " ", "MessageBox", ".", "Show", "(", "\"", "Do you want to replace this:", "\"", " ", "&", " ", "vbLf", " ", "&", " ", "FN", " ", "&", " ", "vbLf", " ", "&", " ", "vbLf", " ", "&", " ", "_", "\n    ", "\"", "With this:", "\"", " ", "&", " ", "vbLf", " ", "&", " ", "FileNameSmaller", ", ", "_", "\n    ", "\"", "MessageBox Title", "\"", ", ", "MessageBoxButtons", ".", "YesNo", ")", "\n    ", "If", " ", "Q1", " ", "=", " ", "vbYes", " ", "Then", "\n        ", "Component", ".", "Replace", "(", "\"", "BR BOLT 1", "\"", ", ", "SearchLocation", " ", "&", " ", "FileNameSmaller", ", ", "False", ")", "\n        ", "Component", ".", "Replace", "(", "\"", "BR BOLT 2", "\"", ", ", "SearchLocation", " ", "&", " ", "FileNameSmaller", ", ", "False", ")", "\n        ", "Component", ".", "Replace", "(", "\"", "BR BOLT 3", "\"", ", ", "SearchLocation", " ", "&", " ", "FileNameSmaller", ", ", "False", ")", "\n    ", "Else", " ", "If", " ", "Q1", " ", "=", " ", "vbNo", " ", "Then", "\n    ", "End", " ", "If", "\n", "End", " ", "If", "\n\n", "If", " ", "FilesBigger", ".", "count", " ", ">=", " ", "1", " ", "Then", "\n    ", "Q2", " ", "=", " ", "MessageBox", ".", "Show", "(", "\"", "Do you want to replace this:", "\"", " ", "&", " ", "vbLf", " ", "&", " ", "FN", " ", "&", " ", "vbLf", " ", "&", " ", "vbLf", " ", "&", " ", "_", "\n    ", "\"", "With this:", "\"", " ", "&", " ", "vbLf", " ", "&", " ", "FileNameBigger", ", ", "_", "\n    ", "\"", "MessageBox Title", "\"", ", ", "MessageBoxButtons", ".", "YesNo", ")", "\n    ", "If", " ", "Q2", " ", "=", " ", "vbYes", " ", "Then", "\n        ", "Component", ".", "Replace", "(", "\"", "BR BOLT 1", "\"", ", ", "SearchLocation", " ", "&", " ", "FileNameBigger", ", ", "False", ")", "\n        ", "Component", ".", "Replace", "(", "\"", "BR BOLT 2", "\"", ", ", "SearchLocation", " ", "&", " ", "FileNameBigger", ", ", "False", ")", "\n        ", "Component", ".", "Replace", "(", "\"", "BR BOLT 3", "\"", ", ", "SearchLocation", " ", "&", " ", "FileNameBigger", ", ", "False", ")", "\n    ", "Else", "\n        ", "MessageBox", ".", "Show", "(", "\"", "No Bolt replaced", "\"", ", ", "\"", "MessageBox Title", "\"", ", ", "MessageBoxButtons", ".", "OK", ",", "MessageBoxIcon", ".", "Error", ")", "\n    ", "End", " ", "If", "\n", "End", " ", "If", "\n\n", "If", " ", "Q1", " ", "=", " ", "vbNo", " ", "Or", " ", "Q2", " ", "=", " ", "vbNo", " ", "Then", "\n    ", "MessageBox", ".", "Show", "(", "\"", "No Bolt replaced", "\"", ", ", "\"", "MessageBox Title", "\"", ", ", "MessageBoxButtons", ".", "OK", ",", "MessageBoxIcon", ".", "Error", ")", "\n", "End", " ", "If", "\n\n\n"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic Code to Save File\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: VB.net After print event\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Form Button in Ribbon\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic IfThenElse query\n                    ", "solution": ["Select Case PinOD", "Case 25:        SlotLocation = 16: NonRotBase = 5:  SlotWidth = 7.9:  RotDia = 17\nCase 26 To 30:  SlotLocation = 17: NonRotBase = 6:  SlotWidth = 10.2: RotDia = 17\nCase 32 To 38:  SlotLocation = 21: NonRotBase = 6:  SlotWidth = 10.2: RotDia = 25\nCase 39 To 40:  SlotLocation = 25: NonRotBase = 7:  SlotWidth = 12.2: RotDia = 32\nCase 44 To 51:  SlotLocation = 25: NonRotBase = 9:  SlotWidth = 12.2: RotDia = 37\nCase 54 To 64:  SlotLocation = 28: NonRotBase = 12: SlotWidth = 14.2: RotDia = 47", "End Select\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Component.IsActive inside for each loop\n                    ", "solution": ["Sub Main()", "    question = MessageBox.Show(\"Do you want to save to DXF?\", \"iLogic Question\",MessageBoxButtons.YesNo,MessageBoxIcon.Q", "uestion)\n", "    ' Set condition based on answer", "\n    ", "If Not question = vbYes Then Exit Sub", "    ", "DXF_LOC = ThisDoc.Path & \"\\DXF\\\"", "    ", "Dim asmDoc As AssemblyDocument = ThisApplication.ActiveDocument", "    GoThroughOccs(asmDoc)", "    RuleParametersOutput()", "    InventorVb.DocumentUpdate()", "End Sub", "Private DXF_LOC As String", "Sub GoThroughOccs(asmDoc As AssemblyDocument)", "\n\t", "' ==============================* Get DXF *====================================", "\n\t", "Dim oOcc As ComponentOccurrence", "\n\t", "For Each oOcc In asmDoc.ComponentDefinition.Occurrences", "                ", "If Not oOcc.IsActive Then Continue For", "                ", "Dim oDoc As Inventor.Document = oOcc.Definition.Document", "                ", "If oDoc.DocumentType.ToString = \"kAssemblyDocumentObject\" Then GoThroughOccs(oDoc)", "\n\t\tIf Not oDoc.DocumentSubType.DocumentSubTypeID = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then Continue For\n\t\t", "Dim", " oDocName ", "As String", " = oDoc.Displayname", "\n\t\t", "If iProperties.Value(oDocName ,\"Summary\", \"Keywords\") <> \"ISM\" Then Continue For", "\n\t\tDim oCompDef As SheetMetalComponentDefinition = oDoc.ComponentDefinition\n\t\t", "' Check if part has flat pattern, create if not", "\n\t\tIf Not oCompDef.HasFlatPattern Then\n\t\t\toCompDef.Unfold\n\t\t\toDoc.Save\n\t\t\toDoc.Close\n\t\tEnd If\n\t\t", "' DXF config", "\n\t\tDim sOut As String = \"FLAT PATTERN DXF?\" _\n\t\t+ \"AcadVersion=2004\" _\n\t\t+ \"&OuterProfileLayer=IV_OUTER_PROFILE:Visibility=ON", ";LinePattern=28100;LineWeight=0,0500;Color=0,128,0", ";\" _\n\t\t+ \"&InvisibleLayers=IV_TANGENT;IV_BEND;IV_BEND_DOWN;", "IV_ROLL_TANGENT;IV_ARC_CENTERS\"\n\t\t\n\t\tDim sFname As String = \"\"\n\t\t\t\n\t\tSelect Case oDocName\n\t\t\tCase \"HB132.ipt\":          \tsFname = \"IF-H-LAMIR-\" & FVG & \"-\" & Parameter(\"HB132:1\", \"Lengd\") & \"X\" & Parameter(\"HB132:1\", \"Breidd\")\n\t\t\tCase \"HB133.ipt\":          \tsFname = \"IF-H-LASINN-\" & FVG & \"-\" & Parameter(\"HB133:1\", \"Lengd\") & \"X\" & Parameter(\"HB133:1\", \"Breidd\")\n\t\t\tCase \"IFK-YFIRSTYKKI.ipt\": \tsFname = \"IFK-YFIRSTYKKI-\" & Parameter(\"IFK-YFIRSTYKKI:1\", \"Lengd\") & \"X\" & Parameter(\"IFK-YFIRSTYKKI:1\", \"Breidd\")\n\t\t\tCase \"PANNA-H.ipt\":        \tsFname = \"PANNA-H-\" & Parameter(\"PANNA-H:1\", \"Lengd\") & \"X\" & Parameter(\"PANNA-H:1\", \"Breidd\")\n\t\t\tCase \"BYR\u00d0I-H.ipt\":        \tsFname = \"BYRDI-\" & BNFP & \"-H-\" & Parameter(\"BYR\u00d0I-H:1\", \"Lengd\") & \"X\" & Parameter(\"BYR\u00d0I-H:1\", \"Breidd\")\n\t\t\tCase \"Skuffa-LL.ipt\":           sFname = \"SKUFFA-LL-\" & Parameter(\"Skuffa-LL:1\", \"Lengd\") & \"X\" & Parameter(\"Skuffa-LL:1\", \"Breidd\")\n\t\t\tCase \"Thr-Profill.ipt\":\t\tsFname = \"Thr-Profill-\" & Parameter(\"Thr-Profill:1\", \"Lengd\") & \"X\" & Parameter(\"Thr-Profill:1\", \"Breidd\")\n\t\t\tCase Else:                   ' Halda \u00e1fram\n\t\tEnd Select\n\t\n\t\tIf sFname <> vbNullString Then\n\t\t\toCompDef.DataIO.WriteDataToFile(sOut, DXF_LOC & sFname & \".dxf\")\n\t\tEnd If\n\tNext\n", "End Sub", "If oOcc.Suppresed Then Continue For"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Best practice using rules or VB code\n                    ", "solution": ["' Get the current application\nDim oInvApp As Application\noInvApp = ThisApplication\n\n' Get the active document\nDim oDoc As Document\noDoc = oInvApp.ActiveDocument\n\n' Get the userparameters object\nDim oPropSet As PropertySet\noPropSet = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n' Set an empty parameter, base value is nothing.\n' We will check it later\nDim oProp As [Property]\noProp = Nothing\n\n' Try to get the parameter if it exists,\n' if it doesn't create it.\nTry\n    oProp = oPropSet.Item(\"partmass\")\nCatch ex As Exception\n    oProp = oPropSet.Add(0, \"partmass\")\nEnd Try\n\n' Check the parameter object\n' if it's still nothing return to end the sub.\nIf oProp Is Nothing Then\n    Return\nEnd If\n\n' Update the document\noDoc.Update()\n\n' Get the mass\nDim oMass As Double\n\n' Check if it'a an partdocument", "' This code can only be inserted into parts and assemblies", "\nIf oDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n\toMass = CType(oDoc, PartDocument).ComponentDefinition.MassProperties.Mass\nElse\n    oMass = CType(oDoc, AssemblyDocument).ComponentDefinition.MassProperties.Mass\nEnd If\n\n", "' !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' !!! Do something with the mass here !!!\n' !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\noMass = Math.Round(oMass, 2)", "\n\n' Set the parameter value to \noProp.Value = oMass\n\n' Update the document again\noDoc.Update()"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: BrowserFolders\n                    ", "solution": ["Public Sub browser_Test()\n\n       Dim m_inventorApp As Inventor.Application '  = Nothing\n       Set m_inventorApp = ThisApplication 'System.Runtime.InteropServices.Marshal.GetActiveOb?ject(\"Inventor.Application\")\n\n        Dim oAsm As AssemblyDocument\n        Set oAsm = m_inventorApp.ActiveDocument\n\n        Dim oPane As BrowserPane\n        'oPane = oAsm.BrowserPanes.Item(\"Model\")\n        Set oPane = oAsm.BrowserPanes.ActivePane\n\n        Dim oOcc As ComponentOccurrence\n        Set oOcc = m_inventorApp.CommandManager.Pick(SelectionFilterEnum.kAssemblyLeafOccurrenceFilter, \"Select a part.\")\n\n        Dim oSourceNode As BrowserNode\n        Set oSourceNode = oPane.GetBrowserNodeFromObject(oOcc)\n        \n        Dim oSourceNodeDef As BrowserNodeDefinition\n        Set oSourceNodeDef = oSourceNode.BrowserNodeDefinition()\n\n        Dim oTopNode As BrowserNode\n        Set oTopNode = oPane.TopNode()\n  \n        'Dim oTopNodeOcc As BrowserFoldersEnumerator\n        'Set oTopNodeOcc = oTopNode.BrowserFolders\n        \n        Dim oTopNodeBrowserFldrs As BrowserFoldersEnumerator\n        Set oTopNodeBrowserFldrs = oTopNode.BrowserFolders\n        \n        Dim oBrowserFldr1Node As BrowserNode\n        Dim oBrowserFldr2Node As BrowserNode\n        \n        Dim oBrowserFldr As BrowserFolder\n        For Each oBrowserFldr In oTopNodeBrowserFldrs\n            If oBrowserFldr.Name = \"Folder1\" Then\n                'MsgBox (\"Browser Folder named \" & oBrowserFldr.Name & \"Exists\")\n                Set oBrowserFldr1Node = oBrowserFldr.BrowserNode\n            End If\n             \n            If oBrowserFldr.Name = \"Folder2\" Then\n               ' MsgBox (\"Browser Folder named \" & oBrowserFldr.Name & \"Exists\")\n                Set oBrowserFldr2Node = oBrowserFldr.BrowserNode\n             End If\n        Next oBrowserFldr\n        \n      Call oPane.Reorder(oBrowserFldr1Node, True, oBrowserFldr2Node)\n      oPane.Update\n\n        'Call oTopNodeOcc(\"Folder1\").Add(oSourceNode)\n       ' Call oTopNodeBrowserFldrs(\"Folder1\").Add(oSourceNode)\n\nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Entities sketch analysis\n                    ", "solution": ["Public Sub Sketch_Profile_location_Test()\n    Dim oPrtDoc As PartDocument\n    Set oPrtDoc = ThisApplication.ActiveDocument\n    \n    Dim oSketch As PlanarSketch\n    Set oSketch = oPrtDoc.ComponentDefinition.Sketches(1)\n\n    Dim oProfile As Profile\n    Set oProfile = oSketch.Profiles.AddForSolid\n\n    Dim oProfilePath As ProfilePath\n    \n    Dim bCircleNotOutside As Boolean\n    bCircleNotOutside = True\n \n    Dim oProfilePath_2 As ProfilePath\n    Dim oProfileEnt As ProfileEntity\n    Dim oProfileEnt_2 As ProfileEntity\n    \n    Dim oCircleCurve As Circle2d\n    Dim oLineSegment As LineSegment2d\n    Dim oOjectsCurveEnum As ObjectsEnumerator\n \n    Dim oCirclesSelectInside As ObjectCollection\n    Set oCirclesSelectInside = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    Dim oCirclesSelectOutside As ObjectCollection\n    Set oCirclesSelectOutside = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    Dim oCirclesSelectIntersect As ObjectCollection\n    Set oCirclesSelectIntersect = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    ' Go Through ProfilePath to find the circles\n    For Each oProfilePath In oProfile\n    ' The ProfilePath with the circles have a count of 1\n    If oProfilePath.count = 1 Then\n    'Make sure it is a circle\n    If oProfilePath(1).CurveType = kCircleCurve2d Then\n    ' In my tests if the ProfilePath AddMaterial = True then\n    ' it is completely outside or partially outside\n    If oProfilePath.AddsMaterial = True Then\n       \n        'Go through each ProfilePath to find the lines\n        For Each oProfilePath_2 In oProfile\n        \n        For Each oProfileEnt In oProfilePath_2\n            If oProfileEnt.CurveType = kLineSegmentCurve2d Then\n              Set oLineSegment = oProfileEnt.curve\n              Set oOjectsCurveEnum = oLineSegment.IntersectWithCurve(oProfilePath(1).curve)\n              If Not oOjectsCurveEnum Is Nothing Then\n               bCircleNotOutside = True\n               MsgBox (\"A Circle INTERSECTS\")\n               Call oCirclesSelectIntersect.Add(oProfilePath(1).SketchEntity)\n               Exit For\n              Else\n                bCircleNotOutside = False\n              End If\n            End If\n        Next oProfileEnt\n        \n        If Not bCircleNotOutside Then\n            MsgBox (\"A Circle is OUTSIDE\")\n            bCircleNotOutside = True\n            Call oCirclesSelectOutside.Add(oProfilePath(1).SketchEntity)\n        End If\n        Next oProfilePath_2\n    Else\n        MsgBox (\"Circle is INSIDE\")\n        Call oCirclesSelectInside.Add(oProfilePath(1).SketchEntity)\n    End If 'oProfilePath.AddsMaterial = True\n    End If 'oProfilePath(1).CurveType = kCircleCurve2d\n    End If 'oProfilePath.count = 1\n    Next oProfilePath\n\n    Call oPrtDoc.SelectSet.SelectMultiple(oCirclesSelectInside)\n    MsgBox (\"Circles inside selected\")\n    oPrtDoc.SelectSet.Clear\n    Call oPrtDoc.SelectSet.SelectMultiple(oCirclesSelectOutside)\n    MsgBox (\"Circles outside selected\")\n    oPrtDoc.SelectSet.Clear\n    Call oPrtDoc.SelectSet.SelectMultiple(oCirclesSelectIntersect)\n    MsgBox (\"Circles intersected selected\")\n    \nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: This command is not valid for the application or document projects\n                    ", "solution": [], "author": "KentKeller"},
{"created at": [], "solution Title": "\n                        Re: Populate a multi-value parameter using iLogic with a For/For Each statement\n                    ", "solution": ["' Create lists of numbers and letters' by using array initializers", "\nDim numbers() As Integer = {1, 4, 7}\nDim letters() As String = {\"a\", \"b\", \"c\"}\n", "Dim MyArrayList As New ArrayList", "\n", "' Iterate through the list by using nested loops", "\nFor Each Number As Integer In numbers\n    For Each letter As String In letters\n        ", "MyArrayList.add", "(", "Number", " & letter", ")", "\n    Next\nNext\n\n", "MultiValue.List(\"d0\") = MyArrayList"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Parts Only Quantity\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Shorten Bend lines on DXF export\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: iProperties,Project,Description\n                    ", "solution": [" \niProperties.Value(\"Project\", \"Description\") = ", "Thickness", " & \" \" & ", "Material", " & \" \" & ", "O_A_W & \" \" & Side_post_height", "\n"], "author": "SutherNe"},
{"created at": [], "solution Title": "\n                        Re: how to turn off prompt \"Save changes to *****.ivb?\" from VBA\n                    ", "solution": [], "author": "liminma8458"},
{"created at": [], "solution Title": "\n                        Re: idw Parts list format collumn heading change via vba\n                    ", "solution": ["Sub Edit_Column_name()\n\nDim oDoc As Document\nDim oSheet As Sheet\nDim oPartsList As PartsList\nDim oPartsListColumn As PartsListColumn\nDim oColumnName As String\nDim oName As String\n\nSet oDoc = ThisApplication.ActiveDocument\nIf oDoc.DocumentType = kDrawingDocumentObject Then\n    Set oSheet = oDoc.ActiveSheet\n    oSheet.Activate\n        For Each oPartsList In oSheet.PartsLists\n            For Each oPartsListColumn In oPartsList.PartsListColumns\n                oColumnName = oPartsListColumn.Title\n                oName = InputBox(\"Enter the new name for the Column :  \" + oColumnName + \"\", \"Enter Column Name\")\n                If oName <> \"\" Then\n                    oPartsListColumn.Title = oName\n                End If\n            Next\n        Next\nElse\n    MsgBox \"The Selected document is not a drawing document please select a drawing document and continue\", vbOKOnly, \"Edit Column Name\"\n    Exit Sub\nEnd If\nEnd Sub\n\n\n\n"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Leader Text on an Assembly Edge\n                    ", "solution": ["Public Sub LeaderNote_Curves_Test()\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n         \n    Dim oActiveSheet As Sheet\n    Set oActiveSheet = oDrawDoc.ActiveSheet\n         \n    'WB added\n    Dim strFullFileName As String\n    strFullFileName = \"C:\\Users\\brillw\\Documents\\Inventor\\WB_2-18-16\\11864917 Leader Assembly Edge\\IRW Dev.iam\"\n    \n    ' Set a reference to the FileManager object.\n    Dim oFileManager As FileManager\n    Set oFileManager = ThisApplication.FileManager\n    \n    ' Get the name of the last active Level of Detail (LOD) Representation.\n    Dim strLastActiveLOD As String\n    strLastActiveLOD = oFileManager.GetLastActiveLevelOfDetailRepresentation(strFullFileName)\n    \n    ' Use the full file name and LOD name to get the full document name.\n    Dim strFullDocumentName As String\n    strFullDocumentName = oFileManager.GetFullDocumentName(strFullFileName, strLastActiveLOD)\n    'WB END added\n         \n    Dim orefdoc As AssemblyDocument\n    'Set orefdoc = ThisApplication.Documents.Open(\"K:\\Inventor\\IRW Drawing File\\IRW Dev.iam\", False)\n    ' Get the error on this line \"oView.DrawingCurves(oEdge)\" with this\n   ' Set orefdoc = ThisApplication.Documents.Open(\"C:\\Users\\brillw\\Documents\\Inventor\\WB_2-18-16\\11864917 Leader Assembly Edge\\IRW Dev.iam\", False)\n   ' WB added - Error does not occur and leader is created using this to open the LOD\n    Set orefdoc = ThisApplication.Documents.Open(strFullDocumentName, False)\n\n    Dim oEdge As Edge\n    Set oEdge = orefdoc.ComponentDefinition.Occurrences.Item(1).SurfaceBodies.Item(2).Edges.Item(11) ' edge 11 or 12\n            \n    Dim oView As DrawingView\n    'Set oView = oDrawDoc.ActiveSheet.DrawingViews.Item(1)\n    'WB added, commented above\n    Set oView = oDrawDoc.ActiveSheet.DrawingViews.Item(2)\n        \n    Dim oDrawingCurvesEnum As DrawingCurvesEnumerator\n    Set oDrawingCurvesEnum = oView.DrawingCurves(oEdge)\n   \n    Dim oDrawingCurve As DrawingCurve\n    Set oDrawingCurve = oDrawingCurvesEnum.Item(1)\n\n    Dim oMidPoint As Point2d\n    Set oMidPoint = oDrawingCurve.MidPoint\n\n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n\n    Dim oLeaderPoints As ObjectCollection\n    Set oLeaderPoints = ThisApplication.TransientObjects.CreateObjectCollection\n\n    ' Create a few leader points.\n     Call oLeaderPoints.Add(oTG.CreatePoint2d(oMidPoint.x, oMidPoint.y + 6))\n     'oLeaderPoints.Add(oTG.CreatePoint2d(oMidPoint.X+1?, oMidPoint.Y + 6))\n\n    ' Create an intent and add to the leader points collection.\n    ' This is the geometry that the leader text will attach to.\n    Dim oGeometryIntent As GeometryIntent\n    Set oGeometryIntent = oActiveSheet.CreateGeometryIntent(oDrawingCurve, oMidPoint)\n\n     Call oLeaderPoints.Add(oGeometryIntent)\n\n    ' Create text with simple string as input. Since this doesn't use\n    ' any text overrides, it will default to the active text style.\n    Dim sText As String\n    sText = \"ELECTRICAL CONTROL PANEL\"\n\n    Dim oLeaderNote As LeaderNote\n    Set oLeaderNote = oActiveSheet.DrawingNotes.LeaderNotes.Add(oLeaderPoints, sText)\n        \n    Dim oFirstNode As LeaderNode\n    Set oFirstNode = oLeaderNote.Leader.RootNode.ChildNodes.Item(1)\n\nEnd Sub\n"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Need to Remove Decimal Precision from Custom Drawing Properties\n                    ", "solution": [], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Revision table collumn width change\n                    ", "solution": ["Sub Change_Revision_table_width()\nDim oDoc As Document\nDim oSheet As Sheet\nDim oRevisionTables As RevisionTable\nDim oRevisionTableColumn As RevisionTableColumn\nDim oColumnName As String\nDim oWidth As Double\nSet oDoc = ThisApplication.ActiveDocument\nIf oDoc.DocumentType = kDrawingDocumentObject Then\n\tSet oSheet = oDoc.ActiveSheet\n\toSheet.Activate\n\tFor Each oRevisionTables In oSheet.RevisionTables\n\t\tFor Each oRevisionTableColumn In oRevisionTables.RevisionTableColumns\n\t\toColumnName = oRevisionTableColumn.Title\n\t\tif oColumnName = \"Rev\" then ' <--- You Can change the column name in here to what ever column you need\n\t\t\toWidth = InputBox(\"Enter the width of the Column Name : \" + oColumnName + \"\", \"Enter Column Width\")\n\t\t\toRevisionTableColumn.Width = oWidth\n\t\tendif\n\t\tNext\n\tNext\nElse\n\tMsgBox \"The Selected document is not a drawing document please select a drawing document and continue\", vbOKOnly, \"Edit Revision Table \tColumn Width:\"\n\tExit Sub\nEnd If\nEnd Sub"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: 2016 / 2017 Section view reg hack\n                    ", "solution": ["Windows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\Software\\Autodesk\\Inventor\\RegistryVersion20.0\\System\\Preferences\\ColorSchemes\\Schemes\\11]\n\"SliceCapTexturePath\"=\"C:\\\\Users\\\\username\\\\Documents\\\\hatch.bmp\"\n\n"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: iLogic syntax errors\n                    ", "solution": ["Dim oDoc As DrawingDocument = ThisApplication.ActiveDocument\nDim oSheet As Sheet\nDim oView As DrawingView\nFor Each oSheet In oDoc.Sheets ", "' Go through each sheet in open drawing", "\n    For Each oView In oSheet.DrawingViews ", "' Go through each view in each sheet", "\n        If oView.Name = \"", "D-803", "\" Then\n            If iProperties.Value(\"Custom\", \"", "Nozzle Dia", "\")<= \"", "25in", "\" Then\n                oView.SetSpacingToCorner(", "100", ", ", "125", ", SheetCorner.TopLeft)\n            Else\n                oView.SetSpacingToCorner(", "175", ", ", "125", ", SheetCorner.TopLeft)\n            End If\n        ElseIf oView.Name = \"", "D-805", "\" Then\n            If iProperties.Value(\"Custom\", \"", "Nozzle Dia", "\")<= \"", "25in", "\" Then\n                oView.SetSpacingToCorner(", "100", ", ", "175", ", SheetCorner.TopLeft)\n            Else\n                oView.SetSpacingToCorner(", "260", ", ", "190", ", SheetCorner.TopLeft)\n            End If", "        End If\n    Next\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: ilogic turn off/on drawing view depending of surpressing status in assembly\n                    ", "solution": ["'Define the open Document\nDim openDoc As Document\nopenDoc = ThisDoc.Document\n\n\n'Look at the model file referenced in the open document\nDim docFile As assemblyDocument\ndocFile = ThisDoc.ModelDocument\nDim oAsmCompDef As ComponentDefinition\noAsmCompDef = docFile.ComponentDefinition\n\nIf ThisDoc.ModelDocument IsNot Nothing Then\n\nDim oCompOcc As Inventor.ComponentOccurrence\nFor Each oCompOcc in oAsmCompDef.Occurrences\n\nOn Error Resume Next\n\n'if component is \"***\" check if enabled, if not suppress corresponding view'--- copy for each part in assembly\n\n'--- Copy for each part/view \nIf oCompOcc.Name = \"SCW15498-03004 Backplate:1\" Then\n\tIf oCompOcc.Enabled = True Then \n\t\tActiveSheet.View(\"VIEW3\").View.Suppressed = True\n\tElse\n\t\tActiveSheet.View(\"VIEW3\").View.Suppressed = False\n\tEnd If\n\n\n\tEnd If\n'--- Copy for each part/view \n\nNext\n \nEnd If"], "author": "SutherNe"},
{"created at": [], "solution Title": "\n                        Re: iLogic convert decimal to fraction\n                    ", "solution": ["'variables/values that would come from the model\nMaterial = \"Steel\"\nThickness = .125\nWidth = 1.5\nLength = 6.25\n\n'convert values to fraction\noT = FormatAsFraction(Thickness)\noW = FormatAsFraction(Width)\noL = FormatAsFraction(Length)\n\n'set description\niProperties.Value(\"Project\", \"Description\") = _\noT & \" \" & Material & \" x \" & oW & \" in. x \" & oL & \" in. Lg.\"\n\n'display to user\nMessageBox.Show(\"Description: \" & vbLf & _\niProperties.Value(\"Project\", \"Description\"), \"iLogic\")\n", "'variables/values that would come from the model\nMaterial = \"Steel\"\nThickness = 0.103587\nWidth = 1.5625\nLength = 6.3987\n\n'convert values to fraction\noT = RoundToFraction(Thickness, 1/8, RoundingMethod.RoundUp)\noW = RoundToFraction(Width, 1/16, RoundingMethod.RoundUp)\noL = RoundToFraction(Length, 1/32, RoundingMethod.RoundUp)\n\n'set description\niProperties.Value(\"Project\", \"Description\") = _\noT & \" \" & Material & \" x \" & oW & \" in. x \" & oL & \" in. Lg.\"\n\n'display to user\nMessageBox.Show(\"Description: \" & vbLf & _\niProperties.Value(\"Project\", \"Description\"), \"iLogic\")\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to toggle tick box\n                    ", "solution": ["' Get the active application\nDim oInvApp As Application\noInvApp = ThisApplication\n\n' Get the active document\n' This code assumes it's an assembly document\nDim oDoc As AssemblyDocument\noDoc = oInvApp.ActiveDocument\n\n' Get the BOM object\nDim oBom As BOM\noBom = oDoc.ComponentDefinition.BOM\n\n' Set the keys for row merging\nDim sKeys(1) As String\nsKeys(0) = \"Part1\"\nsKeys(1) = \"Part2\"\n\n'Dim sList() As String\nDim booleanParam As Boolean\n'Call oBom.GetPartNumberMergeSettings(booleanParam, sList)\n\nbooleanParam = InputRadioBox(\"Check\", \"MergeSetting ON\", \"MergeSetting OFF\", booleanParam, Title := \"Row merge setting\")\n\n' Set the Row Merge Settings\noBom.SetPartNumberMergeSettings(booleanParam, sKeys)", "' Set the keys for row merging\nDim sKeys(1) As String\nsKeys(0) = \"Part1\"\nsKeys(1) = \"Part2\""], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Betreff: iLogic nicht verwendete Stile breinigen\n                    ", "solution": [" Dim oDoc As PartDocument = ThisApplication.ActiveDocument\nDim oAsset As Asset\nDim oLib As AssetLibrary = ThisApplication.AssetLibraries(\"NUPIS\")'Name of Appearance Library\nDim oLibAsset As Asset\nDim iCount As Integer\niCount = 1\nDim iMax As Integer\niMax = oDoc.Assets.Count\nDo While iCount <= iMax\nOn Error Resume Next\noAsset = oDoc.Assets.Item(iCount)\nIf oAsset.AssetType = 99073 Then 'Only Update Appearance, vb = kAssetTypeAppearance\nIf oDoc.ActiveAppearance.DisplayName = oAsset.DisplayName Then 'If local Appearance is active\noDoc.ActiveRenderStyle.UpdateFromGlobal\nElse 'If Appearance is only local\noLibAsset = oLib.AppearanceAssets.Item(oAsset.DisplayName)\noAsset.Delete 'Delete local Appearance\noAsset = oLibAsset.CopyTo(oDoc, True) 'Load Appearance from Library\nEnd If\nEnd If\niCount = iCount + 1\nLoop"], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: iLogicto read Browser\n                    ", "solution": ["' Grab the occurrence of the object\nDim oOcc As ComponentOccurrence\noOcc = oDoc.ComponentDefinition.Occurrences.item(1)"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Need som starting guideance to offset page numbering on IDW sheets\n                    ", "solution": [], "author": "risto.asikainen"},
{"created at": [], "solution Title": "\n                        Re: ilogic error: visual basic command line compiler stopped working\n                    ", "solution": [], "author": "SutherNe"},
{"created at": [], "solution Title": "\n                        Re: Can I Put iProperties in Parts List Heading?\n                    ", "solution": ["Dim", " ", "oApp", " ", "As", " ", "Inventor", ".", "Application", "\n", "oApp", " ", "=", " ", "ThisApplication", "\n \n", "Dim", " ", "oDrawingDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawingDoc", " ", "=", " ", "oApp", ".", "ActiveDocument", "\n\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " ", "=", " ", "oDrawingDoc", ".", "ActiveSheet", "\n\n", "Dim", " ", "oPartslist", " ", "As", " ", "PartsList", "\n", "oPartslist", " ", "=", " ", "oSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", "\n", "oPartslist", ".", "Title", " ", "=", " ", "\"", "test", "\""], "author": "risto.asikainen"},
{"created at": [], "solution Title": "\n                        Re: for each refdoc\n                    ", "solution": ["refDoc.FullFileName", "Dim FName As String = refDoc.FullFileName\nDim FNP As Integer = InStrRev(FName, \"\\\", -1)\nDim oPath As String = Left(FName, FNP)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Delete Sick Joints / Constraint\n                    ", "solution": ["Dim oAssDoc As AssemblyDocument\noAssDoc = ThisApplication.ActiveDocument\n\nDim oConstraint As AssemblyConstraint\nDim oJoint As AssemblyJoint\n\nRUSure = MessageBox.Show _\n(\"Are you sure you want to delete all sick Relationships?\",  _\n\"iLogic\",MessageBoxButtons.YesNo)\n\nIf RUSure = vbNo Then\nReturn\nElse\n          i = 0\n          For Each oJoint In oAssDoc.ComponentDefinition.Joints\n            If oJoint.HealthStatus <> oJoint.HealthStatus.kUpToDateHealth And _\n            \toJoint.HealthStatus <> oJoint.HealthStatus.kSuppressedHealth Then\n          \t\toJoint.Delete \n\t\t\t\ti = i + 1\n          \tEnd If\t\t  \n          Next\n\t\t  \n\t\t  j = 0\n          For Each oConstraint  In oAssDoc.ComponentDefinition.Constraints\n            If oConstraint.HealthStatus <> oConstraint.HealthStatus.kUpToDateHealth And _\n            \toConstraint.HealthStatus <> oConstraint.HealthStatus.kSuppressedHealth Then\n          \t\toConstraint.Delete \n\t\t\t\tj = j + 1\n          \tEnd If\n          Next\nEnd If\nMessageBox.Show(\" A total of \"&  i+j & \" Relationships were deleted.\", \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Weld Bead suppress not working when called from command button Click\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: PREVIOUS ADD-INS POST - INSANE LACK OF RESPONSE HERE!\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: MeasureEvents With Active Interaction\n                    ", "solution": ["Public Class Form1\n\n    Private m_ThisApplication As Application\n    Private m_InteractionEvents As InteractionEvents\n    Private m_MeasureEvets As MeasureEvents\n\n    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n\n        m_InteractionEvents = m_ThisApplication.CommandManager.CreateInteractionEvents\n        m_MeasureEvets = m_InteractionEvents.MeasureEvents\n\n        m_InteractionEvents.Start()\n\n        AddHandler m_MeasureEvets.OnMeasure, AddressOf m_MeasureEvets_OnMeasure\n\n    End Sub\n\n    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n\n        m_MeasureEvets.Enabled = True        ", "        Dim myTimer As New System.Threading.Timer(AddressOf Task1, Nothing, 100, 0)        ", "        myTimer = Nothing", "\n\n    End Sub\n\n    Private Sub Task1(ByVal state As Object)\n        m_MeasureEvents.Measure(MeasureTypeEnum.kDistanceMeasure)\n    End Sub\n\n    Private Sub m_MeasureEvets_OnMeasure(MeasureType As MeasureTypeEnum, MeasuredValue As Double, Context As NameValueMap)\n        ' Do something with MeasuredValue\n\n        m_MeasureEvets.Enabled = False\n\n    End Sub\nEnd Class"], "author": "Einirpals"},
{"created at": [], "solution Title": "\n                        Re: ILogic rule that can change all parts, parameters from the top assembly\n                    ", "solution": ["'", "Set Farve", "\n", "Dim", " ", "oFarveList", " ", "As", " ", "New", " ", "ArrayList", "\n", "oFarveList", ".", "add", "(", "\"", "Metal-Steel", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "1007", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "1012", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "1013", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "1018", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "1021", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "2004", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "3000", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "3020", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5000", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5001", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5002", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5003", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5005", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5007", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5009", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5010", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5012", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5013", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5014", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5015", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5017", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5018", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5019", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5021", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "5024", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "6000", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "6011", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "6018", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "6021", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "6027", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "6029", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "6032", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7001", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7004", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7011", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7015", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7016", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7021", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7024", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7032", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7035", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7036", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7037", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7038", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "7045", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "8017", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "9001", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "9002", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "9003", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "9005", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "9006", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "9010", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "9016", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "9018", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "9022", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "U / lak", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "Galv. EL", "\"", ")", "\n", "oFarveList", ".", "add", "(", "\"", "Galv. Varm", "\"", ")", "\n\n\n\n\n\n", "oFarveValg", " ", "=", " ", "InputListBox", "(", "\"", "Prompt", "\"", ",", "oFarveList", ", ", "oFarveList", ", ", "Title", " :", "=", " ", "\"", "Title", "\"", ", ", "ListName", " :", "=", " ", "\"", "List", "\"", ")", "\n", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "Farve", "\"", ")", " ", "=", " ", "oFarveValg", "\n", "oKundeNummer", " ", "=", " ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "Kunde", "\"", ")", "\n", "oOdreNummer", " ", "=", " ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "OrdreNr", "\"", ")", "\n    \n", "'", "define the active assembly", "\n", "Dim", " ", "oAssyDoc", " ", "As", " ", "AssemblyDocument", "\n", "oAssyDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", " \n \n", "'", "Check all referenced docs", "\n", "Dim", " ", "oDoc", " ", "As", " ", "Inventor", ".", "Document", "\n", "For", " ", "Each", " ", "oDoc", " ", "In", " ", "oAssyDoc", ".", "AllReferencedDocuments", "\n", "'", "format file name", "\n    ", "'", "format file name", "\n    ", "Dim", " ", "FNamePos", " ", "As", " ", "Long", "\n    ", "FNamePos", " ", "=", " ", "InStrRev", "(", "oDoc", ".", "FullFileName", ", ", "\"", "\\", "\"", ", ", "-", "1", ")", "\n    ", "Dim", " ", "docFName", " ", "As", " ", "String", "\n    ", "'", "returns file name with extension", "\n    ", "docFName", " ", "=", " ", "Right", "(", "oDoc", ".", "FullFileName", ", ", "Len", "(", "oDoc", ".", "FullFileName", ")", " ", "-", " ", "FNamePos", ")", "\n\n", "iProperties", ".", "Value", "(", "docFName", ",", "\"", "Custom", "\"", ", ", "\"", "Kunde", "\"", ")", " ", "=", " ", "oKundeNummer", "\n", "iProperties", ".", "Value", "(", "docFName", ",", "\"", "Custom", "\"", ", ", "\"", "OrdreNr", "\"", ")", " ", "=", " ", "oOdreNummer", "\n", "iProperties", ".", "Value", "(", "docFName", ",", "\"", "Custom", "\"", ", ", "\"", "Farve", "\"", ")", " ", "=", " ", "oFarveValg", "\n", "Next", "\n"], "author": "mikael_nanke"},
{"created at": [], "solution Title": "\n                        Re: Problem with AddByPlaneAndOffset in vb.net\n                    ", "solution": ["    Public Sub Create_Plane_on_Face(ByVal Inventor1 As Inventor.Application)\n        Dim PartDoc As Inventor.PartDocument = Inventor1.ActiveDocument\n\n        Dim Plane1 As Inventor.Face = Inventor1.CommandManager.Pick(SelectionFilterEnum.kPartFacePlanarFilter, \"Please choose a planar surface\")\n\n        Dim Workplane1 As WorkPlane\n\n        Workplane1 = PartDoc.ComponentDefinition.WorkPlanes.AddByPlaneAndOffset(Plane1, 0)\n        Workplane1.Name = \"BlaBla-\" & Workplane1.Name\n        'Workplane1.FlipNormal()\n    End Sub"], "author": "Passi"},
{"created at": [], "solution Title": "\n                        Re: Inventor C# Listener\n                    ", "solution": [], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Getting all parameters of an holefeature\n                    ", "solution": ["Dim", " ", "oPart", " ", "As", " ", "Document", "\n\n", "oPart", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oHoleFeature", " ", "As", " ", "HoleFeature", "\n", "For", " ", "Each", " ", "oHoleFeature", " ", "In", " ", "oPart", ".", "ComponentDefinition", ".", "Features", ".", "HoleFeatures", "\n", "Dim", " ", "oHoleType", " ", "As", " ", "String", "\n", "If", " ", "oHoleFeature", ".", "HoleType", " ", "=", " ", "21507", " ", "Then", "\n", "oHoleType", " ", "=", " ", "\"", "CounterBoreHole", "\"", "\n", "ElseIf", " ", "oHoleFeature", ".", "HoleType", " ", "=", " ", "21506", " ", "Then", "\n", "oHoleType", " ", "=", " ", "\"", "CounterSinkHole", "\"", "\n", "ElseIf", " ", "oHoleFeature", ".", "HoleType", " ", "=", " ", "21505", " ", "Then", "\n", "oHoleType", " ", "=", " ", "\"", "DrilledHole", "\"", "\n", "ElseIf", " ", "oHoleFeature", ".", "HoleType", " ", "=", " ", "21508", " ", "Then", "\n", "oHoleType", " ", "=", " ", "\"", "SpotFaceHole", "\"", "\n", "End", " ", "If", "\n", "MsgBox", " ", "(", "\"", "Counter bore Diameter: ", "\"", " ", "&", " ", "oHoleFeature", ".", "CBoreDiameter", ".", "Value", " ", "&", " ", "vbNewLine", " ", "&", " ", "_", "\n        ", "\"", "Counter Bore Depth: ", "\"", " ", "&", " ", "oHoleFeature", ".", "CBoreDepth", ".", "Value", " ", "&", " ", "vbNewLine", " ", "&", " ", "_", "\n        ", "\"", "Hole Type: ", "\"", " ", "&", " ", "oHoleType", " ", "&", " ", "vbNewLine", " ", "&", " ", "_", "\n        ", "\"", "Hole Name:", "\"", " ", "&", " ", "oHoleFeature", ".", "Name", " ", "&", " ", "\"\"", ")", "\n", "Next"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Invetor 2014 API Programming Help Documentation\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: iLOGIC EXTRACT BOM TO INDIVIDUAL PARTS\n                    ", "solution": ["'", " Set a reference to the drawing document.' This assumes a drawing document is active.", "\n", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oSheets", " ", "As", " ", "Sheets", "\n", "Dim", " ", "Sheet", " ", "As", " ", "Inventor", ".", "Sheet", "\n", "Dim", " ", "oViews", " ", "As", " ", "DrawingViews", "\n", "Dim", " ", "oView", " ", "As", " ", "DrawingView", "\n\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDrawDoc", ".", "Sheets", "\n", "'", "For Each oSheet In oSheets", "\n    ", "oViews", " ", "=", " ", "oSheet", ".", "DrawingViews", "\n    ", "For", " ", "Each", " ", "oView", " ", "In", " ", "oViews", "\n    \n        ", "'", "Get the full filename Of the view model", "\n        ", "Dim", " ", "oModelFileName", " ", "As", " ", "String", "\n        ", "oModelFileName", " ", "=", " ", "oView", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", ".", "FullFileName", "\n        ", "'", "MessageBox.Show(\"view model name\" & oModelFileName, \"Title\")", "\n\n        ", "Dim", " ", "oPartList", " ", "As", " ", "PartsList", "\n            ", "'", "try and get the parts list form the table of this sheet", "\n            ", "Try", "\n                ", "oPartList", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", "\n            ", "Catch", " ", "'", "on error try and search all sheets for first found parts list            ", "\n                ", "'", "iterate trough each sheet", "\n                ", "Dim", " ", "i", " ", "As", " ", "Long", "\n                ", "For", " ", "i", " ", "=", " ", "1", " ", "To", " ", "oDrawDoc", ".", "Sheets", ".", "Count", "\n                    ", "If", " ", "oDrawDoc", ".", "Sheets", ".", "Item", "(", "i", ")", ".", "PartsLists", ".", "Count", " ", ">", " ", "0", " ", "Then", " ", "Exit", " ", "For", "\n                ", "Next", "    \n                ", "oPartList", " ", "=", " ", "oDrawDoc", ".", "Sheets", ".", "Item", "(", "i", ")", ".", "PartsLists", ".", "Item", "(", "1", ")", "\n                ", "'", "MessageBox.Show(\"parts list found on: \" & i, \"Title\")", "\n            ", "End", " ", "Try", "\n                \n            ", "'", " Iterate through the contents of the parts list.", "\n            ", "Dim", " ", "j", " ", "As", " ", "Long", "\n            ", "For", " ", "j", " ", "=", " ", "1", " ", "To", " ", "oPartList", ".", "PartsListRows", ".", "Count", "\n                ", "'", " Get the current row.", "\n                ", "Dim", " ", "oRow", " ", "As", " ", "PartsListRow", "\n                ", "oRow", " ", "=", " ", "oPartList", ".", "PartsListRows", ".", "Item", "(", "j", ")", "\n                ", "'", "get filename of model in row", "\n                ", "Dim", " ", "oRowFileName", " ", "As", " ", "String", "\n                ", "oRowFileName", " ", "=", " ", "oRow", ".", "ReferencedFiles", ".", "Item", "(", "1", ")", ".", "FullFileName", "\n                ", "'", "compare the filenames", "\n                ", "'", "Performs a text comparison, based on a case-insensitive text sort order", "\n                ", "'", "If strings equal returns 0", "\n                ", "If", " ", "StrComp", "(", "oModelFileName", ", ", "oRowFileName", ", ", "CompareMethod", ".", "Text", ")", "=", "0", " ", "Then", " \n                    ", "'", "Get the value of Item from the Parts List", "\n                    ", "'", "Row name needs to be case sensitive or use 1 for first 2 for second etc.", "\n                    ", "oCell", "  ", "=", " ", "oPartList", ".", "PartsListRows", ".", "Item", "(", "j", ")", ".", "Item", "(", "\"", "Item", "\"", ")", " ", "'", "Row name needs to be case sensitive or use 1 for first 2 for second etc.", "\n                    ", "'", "get the value of text in cell", "\n                    ", "Dim", " ", "oItemValue", " ", "As", " ", "String", "\n                    ", "oItemValue", " ", "=", " ", "oCell", ".", "Value", "\n                    ", "'", "Row name needs to be case sensitive or use 1 for first 2 for second etc.", "\n                    ", "oCell", "  ", "=", " ", "oPartList", ".", "PartsListRows", ".", "Item", "(", "j", ")", ".", "Item", "(", "\"", "QTY", "\"", ")", " ", "'", "Row name needs to be case sensitive or use 1 for first 2 for second etc.", "\n                    ", "Dim", " ", "oItemQTY", " ", "As", " ", "String", "\n                    ", "oItemQTY", " ", "=", " ", "oCell", ".", "Value", "\n                    \n                    \n                    ", "'", "Show the view label", "\n                    ", "oView", ".", "ShowLabel", " ", "=", " ", "True", "\n                    \n                    ", "'", "format the text first line", "\n                    ", "oStringItem", " ", "=", " ", "\"", "<StyleOverride Underline='True' FontSize='0.50'> ITEM ", "\"", " ", "&", " ", "oItemValue", " ", "&", "\"", " </StyleOverride>", "\"", "\n                    \n                    ", "'", "format the text second line", "\n                    ", "oStringQty", " ", "=", " ", "\"", "<Br/><StyleOverride Underline='True' FontSize='0.50'> QTY: ", "\"", " ", "&", " ", "oItemQTY", " ", "&", "\"", " </StyleOverride>", "\"", "\n                    \n                    ", "'", "format the text third line", "\n                    ", "oStringScale", " ", "=", " ", "\"", "<Br/><StyleOverride FontSize='0.3'>(Scale <DrawingViewScale/>)</StyleOverride>", "\"", "\n                    \n                    ", "'", "add to the view label", "\n                    ", "oView", ".", "Label", ".", "FormattedText", " ", "=", "  ", "oStringItem", " ", "&", " ", "oStringQty", " ", "&", " ", "oStringScale", "\n                ", "End", " ", "If", "  \n            ", "Next", "\n      ", "Next", " \n", "Next"], "author": "waynefisher"},
{"created at": [], "solution Title": "\n                        Re: VBA - Purging/Deleting isntances of Sketched Symbols\n                    ", "solution": [], "author": "waynefisher"},
{"created at": [], "solution Title": "\n                        Re: iLogic - rule process order\n                    ", "solution": ["oAsmDoc.Update2(True)"], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: how to open a file with iLogic and use iProp\n                    ", "solution": ["Dim model As String = oPartDoc.FullFileName\nDim emodel As String = oPartDoc.DisplayName\nemodel = emodel & \".ipt\"\n\n\nIf iProperties.Value(emodel,\"Summary\", \"subject\") = \"muppet\" Then\n\n\n'MessageBox.Show(\"je bent zelf een muppet \" & model)\n\n\nXdoc = ThisApplication.Documents.Open (model,False)\n\n\nXdoc.rebuild"], "author": "ewoud1"},
{"created at": [], "solution Title": "\n                        Re: Accessing iLogic sub assy rules from master assembly\n                    ", "solution": [], "author": "frank"},
{"created at": [], "solution Title": "\n                        Re: 02 issues with Inventor 2016 API\n                    ", "solution": [], "author": "waynehelley"},
{"created at": [], "solution Title": "\n                        Re: Adding a custom Material to the existing library- can I set the density? VBA\n                    ", "solution": ["Sub AddMaterialToLibrary()\nDim oApp As Application\nSet oApp = ThisApplication\n\nDim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\n\n' Create new asset for local document\nDim localAsset As Asset\nSet localAsset = oDoc.Assets.Add(kAssetTypeMaterial, \"Metal\", \"New Material\", \"New Material\")\nSet localPhysicalPropsAsset = localAsset.PhysicalPropertiesAsset\nlocalPhysicalPropsAsset.Item(\"structural_Density\").Value = 7000\n\n' Apply newly created material to part\noDoc.ActiveMaterial = localAsset\n\n' Get reference to part material object\nDim oLocalMat As Material\nSet oLocalMat = oDoc.ComponentDefinition.Material\n \n' Save this to library\noLocalMat.SaveToGlobal\nEnd Sub"], "author": "foxrid3r"},
{"created at": [], "solution Title": "\n                        Re: ApprenticeServerDrawingDocument fails to return RequiresUpdate property\n                    ", "solution": ["{\"Not implemented (Exception from HRESULT: 0x80004001 (E_NOTIMPL))\"}"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Adaptive workpoint in cable and harness\n                    ", "solution": [], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: Place from Content Center: Order of items in selection lists\n                    ", "solution": [], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Import Sketches Symbols from template, retaining folder structure\n                    ", "solution": ["Sub AddFolders()\n\nDim oPane As BrowserPane\nDim oNode As BrowserNode\nDim oDwgName As BrowserNode\nDim oDwgRes As BrowserNode\nDim oSktch As BrowserNode\nDim oFolder As BrowserFolder\nDim oOccurrenceNodes1 As ObjectCollection\nDim oOccurrenceNodes2 As ObjectCollection\nDim oOccurrenceNodes3 As ObjectCollection\noOccurrenceNodes1 = ThisApplication.TransientObjects.CreateObjectCollection\noOccurrenceNodes2 = ThisApplication.TransientObjects.CreateObjectCollection\noOccurrenceNodes3 = ThisApplication.TransientObjects.CreateObjectCollection\n\noPane = ThisApplication.ActiveDocument.BrowserPanes(\"Model\")\n\noDwgName = oPane.TopNode 'Is the WO# and sheet name\noDwgRes = oDwgName.BrowserNodes.Item(\"Drawing Resources\")\noSktch = oDwgRes.BrowserNodes.Item(4)\n\nFor Each oFolder In oSktch.BrowserFolders\n\toFolder.Delete\nNext\n\nFor Each oNode In oSktch.BrowserNodes\n\toStr1 = Right(oNode.FullPath, Len(oNode.FullPath) - InStrRev(oNode.FullPath, \":\", -1))\n\tIf oStr1 = \"Assembly/Weldment Label\" Or _\n\t    oStr1 = \"Part Label\" Or _\n\t\toStr1 = \"Section/Detail Label\" Or _\n\t\toStr1 = \"Flat Plate Layout Label\" \n\toOccurrenceNodes1.Add(oNode)\n\tEnd If\n\t\n\tIf oStr1 = \"Detail Callout\" Or _\n\t\toStr1 = \"Section Symbol\" Or _\n\t\toStr1 = \"Orientation\"\n\toOccurrenceNodes2.Add(oNode)\n\tEnd If\n\t\n\tIf oStr1 = \"Assembly Weight\" Or oStr1 = \"Reference Drawing\"\n\toOccurrenceNodes3.Add(oNode)\n\tEnd If\nNext\n\noPane.AddBrowserFolder(\"Title Block Symbols\", oOccurrenceNodes3)\noPane.AddBrowserFolder(\"Symbols\", oOccurrenceNodes2)\noPane.AddBrowserFolder(\"Labels\", oOccurrenceNodes1)\n\noSktch.DoSelect\n\nDim oCommandMgr As CommandManager\noCommandMgr = ThisApplication.CommandManager\n\nDim oControlDef1 As ControlDefinition\n oControlDef1 = oCommandMgr.ControlDefinitions.Item(\"DrawingResourceSort\")\noControlDef1.Execute\n\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2016 Parts List Quantity Edit\n                    ", "solution": ["Try", "\n\n    ", "Parameter", "(", "\"", "Mass", "\"", ")", "=", "iProperties", ".", "Mass", "\n    \n    ", "Catch", "\n    \n    ", "oMyParameter", "=", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", "\n    \n    ", "oParameter", "=", "oMyParameter", ".", "AddByExpression", "(", "\"", "Mass", "\"", ", ", "\"", "5", "\"", ", ", "\"", "kg", "\"", ")", "\n    ", "'", "oParameter=oMyParameter.AddByValue(\"Mass\", \"\", UnitsTypeEnum.kKilogramMassUnits)", "\n    \n    ", "Parameter", "(", "\"", "Mass", "\"", ")", "=", "iProperties", ".", "Mass", "\n    \n", "End", " ", "Try"], "author": "DRLTKSE"},
{"created at": [], "solution Title": "\n                        Re: VBA adding column to revision table\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: IDW Converting to PDF\n                    ", "solution": ["oFileName = ThisDoc.FileName(False) 'without extension", "oFileName = ThisDoc.FileName(False) 'without extenstion", "oFileName =System.IO.Path.GetFileNameWithoutExtension(oDrawDoc.FullFileName)", "oAsmDrawingName = System.IO.Path.GetFileNameWithoutExtension(oAsmDrawingDoc.FullFileName)", "oDataMedium", ".", "FileName", " ", "=", " ", "oFolder", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oFileName", " ", "&", " ", "\"", "pdf", "\"", "oDataMedium.FileName = oFolder & \"\\\" & oFileName & \".pdf\""], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: Rule for measurements\n                    ", "solution": ["Sub Main()\n\tDim StartTime As DateTime\n\tDim aElapsedTime As TimeSpan\n\tStartTime = Now\n\tDim oAsmDoc As AssemblyDocument = ThisApplication.ActiveDocument\n\tDim oRefDocs As DocumentsEnumerator = oAsmDoc.AllReferencedDocuments\n\taPropParNum = oAsmDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Value\n\taFileNameWithoutExt = IO.Path.GetFileNameWithoutExtension(oAsmDoc.FullDocumentName)\n\t\n\tFor Each oRefDoc In oRefDocs\n\t\tbPropParNum = oRefDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Value\n\t\tbFileNameWithoutExt = IO.Path.GetFileNameWithoutExtension(oRefDoc.FullDocumentName)\n\t\tbFullpath = IO.Path.GetFullPath(oRefDoc.FullDocumentName)\n\t\tbFileName = IO.Path.GetFileName(oRefDoc.FullDocumentName)\n\t\tIf oRefDoc.DocumentType = Inventor.DocumentTypeEnum.kPartDocumentObject Then\n\t\t\t'If InStr(bFileNameWithoutExt, \"koker\", CompareMethod.Text) = 1 Then\n\t\t\t\n\t\t\t'ThisApplication.Documents.Open(bFullpath, True)\n\t\t\t'InventorVb.DocumentUpdate()\n\t\t\taDocument = ThisApplication.ActiveDocument\n\t\t\tiProperties.Value(aDocument, \"Custom\", \"aMeasure\") = mSize(oRefDoc,\"z\")'Measure.ExtentsHeight\n\t\t\tiProperties.Value(aDocument, \"Custom\", \"bMeasure\") = mSize(oRefDoc,\"y\")'Measure.ExtentsWidth\n\t\t\tiProperties.Value(aDocument, \"Custom\", \"cMeasure\") = mSize(oRefDoc,\"x\")'Measure.ExtentsLength\n\t\t\t'If aDocument.Open Then aDocument.Close(True)\n\t\t\t\n\t\t\t'End If\n\t\tEnd If\n\tNext\n\taElapsedTime = Now().Subtract(StartTime)\n\tbElapsedTime = aElapsedTime.TotalSeconds\n'\toWrite = System.IO.File.CreateText(\"X:\\01 productie\\25 Werkvoorbereiding\\07 Zaaglijsten\\\" & aFileNameWithoutExt & \".txt\")\n'\toWrite.WriteLine(aFileNameWithoutExt & vbCrLf & DateString & \" \" & Timestring)\n'\toWrite.WriteLine(\"All data was collected in \" & Round(bElapsedTime, 2) & \"s\" & vbCrLf & \"\")\n'\toWrite.WriteLine(\"Tubes:\" & vbCrLf & oListB)\n'\toWrite.Close()\nEnd Sub\n\nPrivate Function mSize(oDoc As Inventor.Document, t As String) As String\n\tcD = oDoc.ComponentDefinition\n\tIf cD IsNot Nothing Then\n\t\tSelect Case UCase(t)\n\t\t\tCase \"X\" ' X is extent length\n\t\t\t\tX = Math.Abs(cD.RangeBox.MinPoint.X - cD.RangeBox.MaxPoint.X)\n\t\t\t\tmSize =  Round(oDoc.UnitsOfMeasure.ConvertUnits(X,\"cm\" ,oDoc.UnitsOfMeasure.LengthUnits )).ToString\n\t\t\tCase \"Y\" ' Y is extent width\n\t\t\t\tY = Math.Abs(cD.RangeBox.MinPoint.Y - cD.RangeBox.MaxPoint.Y)\n\t\t\t\tmSize =  Round(oDoc.UnitsOfMeasure.ConvertUnits(Y,\"cm\" ,oDoc.UnitsOfMeasure.LengthUnits )).ToString\n\t\t\tCase \"Z\" ' Z is extent height\n\t\t\t\tZ = Math.Abs(cD.RangeBox.MinPoint.Z - cD.RangeBox.MaxPoint.Z)\n\t\t\t\tmSize =  Round(oDoc.UnitsOfMeasure.ConvertUnits(Z,\"cm\" ,oDoc.UnitsOfMeasure.LengthUnits )).ToString\n\t\tEnd Select\n\tEnd If\nEnd Function"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Want to combine ilogic programs\n                    ", "solution": ["Sub Main()\nDim drawingDoc As DrawingDocument = TryCast(ThisDoc.Document, DrawingDocument)\nFor Each sheetX As Sheet In drawingDoc.Sheets\nDim titleBlockX As TitleBlock = sheetX.TitleBlock\nIf (titleBlockX Is Nothing) Then Continue For\nDim ClientDocTypeTextBox As TextBox = GetClientDocTypeTextBox(titleBlockX.Definition)\nClientDocTypeString = \"DE\"\n\ntitleBlockX.SetPromptResultText(ClientDocTypeTextBox, ClientDocTypeString)\nNext\ncall Main1 '<---Modified Line 1\nEnd Sub\nFunction GetClientDocTypeTextBox(ByVal titleDef As TitleBlockDefinition) As TextBox\nFor Each defText As TextBox In titleDef.Sketch.TextBoxes\nIf (defText.Text = \"<Client Doc Type>\" Or defText.Text = \"Client Doc Type\") Then\nReturn defText\nEnd If\nNext\nReturn Nothing\nEnd Function\n\n\nSub Main1()\nDim drawingDoc As DrawingDocument = TryCast(ThisDoc.Document, DrawingDocument)\nFor Each sheetX As Sheet In drawingDoc.Sheets\nDim titleBlockX As TitleBlock = sheetX.TitleBlock\nIf (titleBlockX Is Nothing) Then Continue For\nDim ClientDisciplineTextBox As TextBox = GetClientDisciplineTextBox(titleBlockX.Definition)\nClientDisciplineString = \"DE\"\n\ntitleBlockX.SetPromptResultText(ClientDisciplineTextBox, ClientDisciplineString)\nNext\nCall Main2 '<---Modified Line 2\nEnd Sub\nFunction GetClientDisciplineTextBox(ByVal titleDef As TitleBlockDefinition) As TextBox\nFor Each defText As TextBox In titleDef.Sketch.TextBoxes\nIf (defText.Text = \"<Client Discipline>\" Or defText.Text = \"Client Discipline\") Then\nReturn defText\nEnd If\nNext\nReturn Nothing\nEnd Function\n\n\nSub Main2()\nDim drawingDoc As DrawingDocument = TryCast(ThisDoc.Document, DrawingDocument)\nFor Each sheetX As Sheet In drawingDoc.Sheets\nDim titleBlockX As TitleBlock = sheetX.TitleBlock\nIf (titleBlockX Is Nothing) Then Continue For\nDim PhaseTextBox As TextBox = GetPhaseTextBox(titleBlockX.Definition)\nPhaseString = \"DE\"\n\ntitleBlockX.SetPromptResultText(PhaseTextBox, PhaseString)\nNext\nEnd Sub\nFunction GetPhaseTextBox(ByVal titleDef As TitleBlockDefinition) As TextBox\nFor Each defText As TextBox In titleDef.Sketch.TextBoxes\nIf (defText.Text = \"<Phase>\" Or defText.Text = \"Phase\") Then\nReturn defText\nEnd If\nNext\nReturn Nothing\nEnd Function"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Raster State\n                    ", "solution": [], "author": "brekerw"},
{"created at": [], "solution Title": "\n                        Re: Updating DimStyle issue, can't differentiate between holes and general dims?\n                    ", "solution": ["'set drawing document\nDim oDrawDoc As DrawingDocument = ThisApplication.ActiveDocument\n\n'set the style manager\nDim oStylesMgr As DrawingStylesManager = oDrawDoc.StylesManager\n\n'declare variables\nDim oDim As DrawingDimension\nDim oDims As DrawingDimensions\nDim oDim2 As GeneralDimension\nDim oDimStyle As DimensionStyle\nDim oHoleDimStyle As DimensionStyle\nDim oView As DrawingView\nDim oSheet As Sheet\n\n'suppress all views that are not flat patterns\nFor Each oSheet In oDrawDoc.Sheets\n\tFor Each oView In oSheet.DrawingViews\n\t\tIf Not oView.IsFlatPatternView = True Then\n\t\t\toView.Suppressed = True\n\t\tEnd If\n\tNext 'view\nNext 'sheet \n\n'cycle through sheets\nFor Each oSheet In oDrawDoc.Sheets\n\tFor Each oView In oSheet.DrawingViews\n\t\tIf oView.IsFlatPatternView = True Then\n\t\t\t\n\t\t\toDims = oSheet.DrawingDimensions\n\t\t\toDimStyle = oStylesMgr.DimensionStyles.Item(\"Decimal (ANSI)\")\n\t\t\toHoleDimStyle = oStylesMgr.DimensionStyles.Item(\"Decimal (3pls)\")\n\t\t\t\n\t\t\tFor Each oDim in oDims\n\t\t\t\n\t\t\t\tIf TypeOf oDim Is DiameterGeneralDimension Then\n\t\t\t\t\toDim2 = oDim\n\t\t\t\t\toDim2.Style = oHoleDimStyle\n\t\t\t\tElse\n\t\t\t\t\toDim2 = oDim\n\t\t\t\t\toDim2.Style = oDimStyle\n\t\t\t\tEnd If\n\t\t\t\t\n\t\t\tNext\n\t\t\t\n\t\tEnd If\n\tNext 'view\nNext 'sheet \n\n'unsuppress all views\nFor Each oSheet In oDrawDoc.Sheets\n\tFor Each oView In oSheet.DrawingViews\n\t\tIf oView.Suppressed = True Then\n\t\t\toView.Suppressed = False\n\t\tEnd If\n\tNext 'view\nNext 'sheet \n\n"], "author": "dsilva1090"},
{"created at": [], "solution Title": "\n                        Re: iLogic not placing DXF file in folder when running iLogic code.\n                    ", "solution": [], "author": "Thomas_Savage"},
{"created at": [], "solution Title": "\n                        Re: Error is in the selection code\n                    ", "solution": ["Dim oSelSet As SelectSet\nSet oSelSet = oDoc.SelectSet\nDim oFace As Face\nSet oFace = ThisApplication.CommandManager.Pick(kPartFacePlanarFilter, \"Select a face.\")\nIf oFace Is Nothing Then\nExit Sub\nElse\nCall oSelSet.Select(oFace)\nEnd If"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: iLogic to control LoD in sub-assemblies\n                    ", "solution": ["Sub Main()\n\n\tDim oDoc As Document\n\toDoc = ThisDoc.Document\n \t\n\tIf oDoc.DocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then\n\t\tMessageBox.Show(\"Document not of Assembly Type\")\n\t\tExit Sub\n\tEnd If\n\t\n\tDim oAssyDoc As AssemblyDocument\n\toAssyDoc = oDoc\n\t\t\n\tMessageBox.Show(\"Document is of Assembly Type\")\n\t''' Rest of Code Goes here... '''\n\t\nEnd Sub"], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: Change color of sub assembly components while working in top level asy.\n                    ", "solution": [], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Write Multiple iProperties to Single Field\n                    ", "solution": ["TitleText = iProperties.Value(\"Project\", \"Description\") ", "&", " \"~\" ", "&", " iProperties.Value(\"Summary\", \"Title\")"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic - a couple Syntax Questions\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Change Parts List Style with iLogic\n                    ", "solution": ["Dim openDoc As Document\n   'assumes a drawing document is active.\n    Dim oDrawDoc As DrawingDocument\n    oDrawDoc = ThisApplication.ActiveDocument\n        \n    'Set a reference to the active sheet.\n    Dim oSheet As Sheet\n    oSheet = oDrawDoc.ActiveSheet\n\n    'Look for partlist within drawing. End rule, if it doesn't exist.\n    'say there is a Partslist on the sheet.\n    Dim oPartslist As PartsList\n    oPartslist = oSheet.PartsLists(1)\n\n    If oSheet.PartsLists(1) IsNot Nothing Then\n\n        'set parts list to a specific style\n        oPartsList.Style = oDrawDoc.StylesManager.PartsListStyles.Item(\"Material List (ANSI)\")\n\n     End If "], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Delete Suppressed Rectangular & Circular Patterns\n                    ", "solution": ["Dim oCPattern As CircularOccurrencePattern = oOcc.PatternElement.Parent", "Dim oCPattern As Object = oOcc.PatternElement.Parent"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: How to edit/update/change dimension of a feature or sketch in a part\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Sheet Metal Sizes into PArameter for dwg\n                    ", "solution": [], "author": "machiel.veldkam"},
{"created at": [], "solution Title": "\n                        Re: How do I get the overridden value from a positional representation??\n                    ", "solution": ["Sub PosReps()\n  ' The positional representation and the mate constraint need\n  ' to be selected in the UI before running this\n  Dim oPosRep As PositionalRepresentation\n  Set oPosRep = ThisApplication.ActiveDocument.SelectSet(1)\n  Dim oMate As MateConstraint\n  Set oMate = ThisApplication.ActiveDocument.SelectSet(2)\n  posrep.SetRelationshipSuppressionOverride rs, False\n  posrep.SetRelationshipValueOverride rs, RelationshipValueTypeEnum.kRelationshipOffsetValue, \"12\"\n  \n  Dim strVal As String\n  Dim isOverridden As Boolean\n  isOverridden = posrep.IsRelationshipValueOverridden(oMate, RelationshipValueTypeEnum.kRelationshipOffsetValue, strVal)\n  Debug.Print \"Overridden offset = \" + strVal\n  Debug.Print \"Original offset = \" + Str(oMate.Offset.value)\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Create Circular Pattern in assembly\n                    ", "solution": ["        Dim oADoc As AssemblyDocument = InvApp.ActiveEditDocument\n        Dim oADef As AssemblyComponentDefinition = oADoc.ComponentDefinition\n        Dim InvPart1 As ComponentOccurrence = oADef.Occurrences.Item(1)\n        Dim Invpart1Def As PartComponentDefinition = InvPart1.Definition\n        Dim InvPart2 As ComponentOccurrence = oADef.Occurrences.Item(2)\n\n        Dim oObjects As ObjectCollection\n        Dim oOccPatterns As OccurrencePatterns = oADef.OccurrencePatterns\n        Dim oFeature As CircularPatternFeature\n        Dim oFeatureProxy As CircularPatternFeatureProxy\n\n        oObjects = InvApp.TransientObjects.CreateObjectCollection\n        oObjects.Add(InvPart2)\n\n\n        oFeature = Invpart1Def.Features.CircularPatternFeatures.Item(1)\n        Call InvPart1.CreateGeometryProxy(oFeature, oFeatureProxy)\n        Call oADef.OccurrencePatterns.AddFeatureBasedPattern(oObjects, oFeatureProxy)\n\n    End Sub"], "author": "SutherNe"},
{"created at": [], "solution Title": "\n                        Re: Drawing View Label Position with iLogic\n                    ", "solution": ["Public Sub Main\n\n\tCall RepositionDrawingViewLabels\n\t\nEnd Sub\n\n\n\nPrivate Sub RepositionDrawingViewLabels()\n\n    ' Set a reference to the drawing document.\n    ' This assumes a drawing document is active.\n\tDim oApp = ThisApplication\n    Dim oDrawDoc As DrawingDocument\n    oDrawDoc = oApp.ActiveDocument\n\n    ' Set a reference to the active sheet.\n    Dim oActiveSheet As Sheet\n    oActiveSheet = oDrawDoc.ActiveSheet\n\n    ' Set a reference to the TransientGeometry on active sheet.\n    Dim oTG As TransientGeometry\n    oTG = oApp.TransientGeometry\n\n    'This Drawing Document Select Set\n    Dim oSelectset As SelectSet = oDrawDoc.SelectSet\n    oSelectset.Clear()\n\n    Dim oViews As DrawingViews = oActiveSheet.DrawingViews\n    Dim oView As DrawingView = oActiveSheet.DrawingViews(1)\n\n    For Each oView In oViews\n        oSelectset.Select(oView)\n\n'            MsgBox(\"VIEW LABEL POSITION X: \" & oView.Label.Position.X & vbCrLf & _\n'                   \"VIEW LABEL POSITION Y: \" & oView.Label.Position.Y, MsgBoxStyle.Information, _\n'                   \"DRAWING VIEW \" & oView.Name & \" LABEL POSITIONS\")\n\n        'Set reference oNewPosition as coordinate position\n        Dim oNewPosition As Point2d\n        oNewPosition = oView.Label.Position\n\n        'Set reference to the new required position taken and create new 2d point\n        oNewPosition = oTG.CreatePoint2d(oView.Center.X, oView.Center.Y - (oView.Height / 2) - 1)\n\t\t\n        'Clear the selcted item\n        oDrawDoc.SelectSet.Clear()\n\n'        'Move Label Position to the new position (oNewPosition) \n        oView.Label.Position = oNewPosition\n\t\n\t\toSelectset.Clear()\n    Next\n\t\n\t\n\t\n\tEnd Sub"], "author": "Paul__H"},
{"created at": [], "solution Title": "\n                        Re: iLogic and Patterns\n                    ", "solution": ["RuleParametersOutput()\nInventorVb.DocumentUpdate()\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Insert Drawing View stay in edit mode, or how to add a drawing view in selec\n                    ", "solution": ["odocIDW.SelectSet.Select oBaseView\n\n'or the other version\n\ncall odocIDW.SelectSet.Select (oBaseView)", "Public Sub subInsertDV()\n    Dim odoc As Document\n    Set odoc = ThisApplication.ActiveDocument\n    Dim odocIDW As DrawingDocument\n    Dim strDrawDocPath As String\n    strDrawDocPath = \"c:/temp/test.idw\"\n    'Get Camera object\n    Dim oCamera As Camera\n    Set oCamera = ThisApplication.ActiveView.Camera\n    'open drawing doc\n    Set odocIDW = ThisApplication.Documents.Open(strDrawDocPath, True)\n  \n    Dim oSheet As Sheet\n    Set oSheet = odocIDW.Sheets.Item(1)\n    'Position base view in middle of the sheet\n    Dim oViewPos As Point2d\n    Set oViewPos = ThisApplication.TransientGeometry.CreatePoint2d(oSheet.width / 2, oSheet.height / 2)\n    \n    'Create view with parameters\n    Dim oBaseView As DrawingView\n    Set oBaseView = oSheet.DrawingViews.AddBaseView(odoc, oViewPos, 1, _\n        ViewOrientationTypeEnum.kArbitraryViewOrientation, _\n        DrawingViewStyleEnum.kHiddenLineDrawingViewStyle, \"BaseView1\", oCamera)\n    'Next line cases a type missmache\n    odocIDW.SelectSet.Select oBaseView\n    ThisApplication.CommandManager.ControlDefinitions.Item(\"DrawingViewEditCtxCmd\").Execute\nEnd Sub"], "author": "wolfgang.nickl"},
{"created at": [], "solution Title": "\n                        Re: \"For each .............. Next\" to access existing custom iProperti\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Auto Hatch all Circles in a IDW sketch\n                    ", "solution": ["Sub Hatch_sketch()\nDim oDrawDoc As DrawingDocument\nDim oActiveSheet As Sheet\nDim oSketchCircle As SketchCircle\nDim oLayer As Layer\nDim oDrawSketch As DrawingSketch\n    Set oDrawDoc = ThisApplication.ActiveDocument\n    Set oActiveSheet = oDrawDoc.ActiveSheet\nFor Each oDrawingView In oActiveSheet.DrawingViews\n    For Each oDrawingSketch In oDrawingView.Sketches\n        Set oDrawSketch = oDrawingView.Sketches.Add\n            For Each oSketchCircle In oDrawingSketch.SketchCircles\n                 oDrawSketch.Edit\n                 Dim oXpoint As Double\n                 Dim oYpoint As Double\n                 Dim oRadius As Double\n                 oXpoint = oSketchCircle.Geometry.Center.X\n                 oYpoint = oSketchCircle.Geometry.Center.Y\n                 oRadius = oSketchCircle.Geometry.Radius\n                 Dim oTG As TransientGeometry\n                 Set oTG = ThisApplication.TransientGeometry\n                 Dim oCircle As SketchCircle\n                 Set oCircle = oDrawSketch.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(oXpoint, oYpoint), oRadius)\n                 Dim oCollection As ObjectCollection\n                 Set oCollection = ThisApplication.TransientObjects.CreateObjectCollection\n                 oCollection.Add oCircle\n                 Dim oProfile As Profile\n                 Set oProfile = oDrawSketch.Profiles.AddForSolid(False, oCollection)\n                 Call oDrawSketch.SketchFillRegions.Add(oProfile)\n                 oDrawSketch.ExitEdit\n            Next\n     Next\nNext\n\nEnd Sub"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Manufacturing Stages in Drawings\n                    ", "solution": [], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Open a document and change his iProperty\n                    ", "solution": ["Dim oPath As String\noPath = \"G:\\CAO\\00 - Production\\99 - Tests (BER)\\tttttt\\\"\nDim oPartName As String\noPartName = \"red.ipt\"\nDim opart As PartDocument\nopart = ThisApplication.Documents.Open(oPath+oPartName, True)\nDim oDescription As String\noDescription = \"Description123\"\nopart.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\").Value = oDescription\nopart.Save\nopart.Close"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Help: Save (not Save As) using iLogic\n                    ", "solution": ["ThisApplication.ActiveDocument.save", "'Dim title As String = \"converted to title case\"\n'    Console.WriteLine(StrConv(title, VbStrConv.ProperCase))\nDrawingName = iProperties.Value(\"custom\",\"Drawing No.\") & \"_\" & StrConv(iProperties.Value(\"custom\",\"Desc. 1\"), VbStrConv.ProperCase) & \"_\" & StrConv(iProperties.Value(\"custom\",\"Desc. 2\"), VbStrConv.ProperCase) & \"_\" & StrConv(iProperties.Value(\"custom\",\"Navision PN\"), VbStrConv.ProperCase)\nDesiredPath = \"C:\\........specified location.....\"\n\nNewFileName = DesiredPath & \"\\\" & DrawingName & \".idw\"\n\n\n'check file name to see if it is used\n\t'if it is, ask the user to overwrite\n\t'if it's not, save the file\n\nquestion = MessageBox.Show(\"Is this a good file name?:  \" & DrawingName & \".idw\", \"iLogic Question\",MessageBoxButtons.YesNo,MessageBoxIcon.Question)\n\nIf question=vbYes Then\n\n\tIf System.IO.File.Exists(NewFileName) Then\n\t\n\t\tquestion = MessageBox.Show(\"File exists, do you want to overwrite?\", \"iLogic Question\",MessageBoxButtons.YesNo,MessageBoxIcon.Question)\n\t\n\t\t\tIf question = vbYes Then \n\t\t\t\tDim oDrawDoc As DrawingDocument\n\t\t\t\toDrawDoc = ThisApplication.ActiveDocument\n\t\t\t\toDrawDoc.Save 'Modified Line 1\n\t\t\tElse If question =vbNo Then\n\t\t\t\tMessageBox.Show(\"File was not overwritten\", \"iLogic Message\")\n\t\t\tEnd If\n\t\n\tElse \n\t\t\n\t\tThisDoc.Document.SaveAs(Newfilename,True)\n\t         ThisApplication.Documents.Open(NewFileName,True)'Modified Line 2\n\tEnd If \n\nElse If question=vbNo Then\n\tMessageBox.Show(\"Please update: Drawing #, Desc. 1, Desc. 2, & Navision PN\", \"iLogic Message\")\nEnd I\u00a0"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Driving Sub-assemblies from assembly with iLogic\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: OnHelp Event\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: iLogic sketch text\n                    ", "solution": ["Dim oPartDoc As PartDocument\nDim oTextbox As TextBox\n    Set oPartDoc = ThisApplication.ActiveDocument\nDim oCd As ComponentDefinition\nDim oSketch As PlanarSketch\n\nFor Each oCd In oPartDoc.ComponentDefinitions\n    For Each oSketch In oCd.Sketches\n        For Each oTextbox In oSketch.TextBoxes\n            MsgBox oTextbox.Text 'For each textbox available in the sketch a message box will popup\n        Next\n    Next\n    \nNext", "Dim oTextbox As Inventor.TextBox"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: ILogic-save as Rule\n                    ", "solution": [], "author": "Nauld1"},
{"created at": [], "solution Title": "\n                        Re: Changing PDF options with API\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Get size and position of windows from open parts / assemblies\n                    ", "solution": [" Public Sub Views_Test2()\n    \n    Dim oActView As View\n    Set oActView = ThisApplication.ActiveView\n       \n    Dim oViews As Views\n    Set oViews = ThisApplication.Views\n    \n    Dim oView As View\n    Dim i As Integer\n    For i = 0 To 10\n    For Each oView In oViews\n        Debug.Print oView.Caption\n        Dim Top As Long\n        Top = oView.Top\n        Dim Left As Long\n        Left = oView.Left\n        Dim Height As Long\n        Height = oView.Height\n        Dim Width As Long\n        Width = oView.Width\n              \n        Debug.Print Top\n        oView.Top = Top \n        Debug.Print Left\n        oView.Left = Left\n        Debug.Print Height\n        oView.Height = Height \n        Debug.Print Width\n        oView.Width = Width \n\n    Next\n    Next i\n    \nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Flatpattern\n                    ", "solution": [], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Making a particular View rep. active on open\n                    ", "solution": [], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: Change multiple references of a drawing\n                    ", "solution": ["For Each oRefFile In NewIDW.File.ReferencedFileDescriptors\nNewIDW.PropertySets.Item(\"Design Tracking Properties\").Item(\"Designer\").Value = ThisApplication.GeneralOptions.UserName "], "author": "ronald.berney"},
{"created at": [], "solution Title": "\n                        Re: Change table column properties\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Object model\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: ilogic to check if pattern has errors\n                    ", "solution": ["oPattern = Feature.InventorFeature(\"Rectangular Pattern1\")\n'flip rectangular pattern direction\n'if health is not up todate\nIf oPattern.HealthStatus  <> HealthStatusEnum.kUpToDateHealth Then\n\tIf oPattern.NaturalXDirection  = True Then\n\t\toPattern.NaturalXDirection  = False\n\tElse\n\t\toPattern.NaturalXDirection  = True\n\tEnd If\nEnd If\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: occurrence name in drawing\n                    ", "solution": ["'The leader can be single line segment and multiple line segment.\n        Dim leaderNode As leaderNode\n        Dim oNode As leaderNode\n        For Each oNode In leader.AllNodes", "\t\t", "On Error Resume Next\n", "            If Not oNode.AttachedEntity Is Nothing Then\n                Set leaderNode = oNode\n                Exit For\n            End If\n        Next\n"], "author": "chandra.shekar."},
{"created at": [], "solution Title": "\n                        Re: Debuging Inventor Add-In Without restarting program\n                    ", "solution": [], "author": "etaCAD"},
{"created at": [], "solution Title": "\n                        Re: iLogic To Round Dimension On Drawing\n                    ", "solution": ["Dim oDrawDoc as DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\nDim oDrawingDimension as object\nFor each oDrawingDimension in oDrawDoc.Activesheet.DrawingDimensions.GeneralDimensions\nDim oDimValue as Double\noDimValue = oDrawingDimension.ModelValue * 10\noDimValue = (Round(oDimValue/5))*5\noDrawingDimension.OverrideModelValue = oDimValue / 10", "Next"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: dimension text back to center.\n                    ", "solution": [], "author": "belash007"},
{"created at": [], "solution Title": "\n                        Re: Activate Next Sheet Shortcut and Activate Previous sheet Shortcut\n                    ", "solution": ["Sub Forward()\nDim oDrawDoc As DrawingDocument\nSet oDrawDoc = ThisApplication.ActiveDocument\nDim oSheetName As String\noSheetName = oDrawDoc.ActiveSheet.name\nDim oSheet As Sheet\nDim oSheetCount As Double\noSheetCount = oDrawDoc.Sheets.Count\ni = 0\nFor Each oSheet In oDrawDoc.Sheets\n    i = i + 1\n    If oSheetName = oSheet.name Then\n        If i < oSheetCount Then\n            oDrawDoc.Sheets.Item(i + 1).Activate\n        Else\n            MsgBox \"Reached Last Sheet\"\n        End If\n    End If\nNext\nEnd Sub", "Sub Backward()\nDim oDrawDoc As DrawingDocument\nSet oDrawDoc = ThisApplication.ActiveDocument\nDim oSheetName As String\noSheetName = oDrawDoc.ActiveSheet.name\nDim oSheet As Sheet\nDim oSheetCount As Double\noSheetCount = oDrawDoc.Sheets.Count\ni = 0\nFor Each oSheet In oDrawDoc.Sheets\n    i = i + 1\n    If oSheetName = oSheet.name Then\n        If i > 1 Then\n            oDrawDoc.Sheets.Item(i - 1).Activate\n        Else\n            MsgBox \"Reached First Sheet\"\n        End If\n    End If\nNext\nEnd Sub"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: DXF Export Inventor 2017\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: custom view orientation or pauze loop\n                    ", "solution": [], "author": "ewoud1"},
{"created at": [], "solution Title": "\n                        Re: Shared & Synced Material library\n                    ", "solution": [], "author": "SutherNe"},
{"created at": [], "solution Title": "\n                        Re: Open Inventor Part With the help of excel vba\n                    ", "solution": ["'oWB = oExcel.Workbooks.Open(\"C:\\Users\\parth.vpatel\\Desktop\\BARN DOOR\\DOOR DESIGN TOOL.xlsm\")\noWB = oExcel.Workbooks.Open(ThisDoc.Path & \"\\DOOR DESIGN TOOL.xlsm\")"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Ilogic rule to define is a part is sheetmetal or not\n                    ", "solution": ["Dim oDoc as Document\noDoc = ThisApplication.ActiveDocument\n\nDim oType as String\noType = oDoc.DocumentSubType.DocumentSubTypeID\n\nif oType = \u00a0\"(9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" then\n\u00a0     MessageBox (\"It is sheetmetal part\")\nelse\u00a0\n      MessageBox (\"It is not a sheetmetal part\")\nendif"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Install of new add-in\n                    ", "solution": [], "author": "mulefeathers"},
{"created at": [], "solution Title": "\n                        Re: Returning the File Name of a Selected View's Part\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\nDim oPartName As String\noPartName = oDrawDoc.SelectSet.Item(1).ReferencedFile.DisplayName\nMessageBox.Show(oPartName, \"Part Name\")"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: iLogic & Excel integration to draw splines\n                    ", "solution": ["' Check to make sure a sketch is open.\nIf Not TypeOf ThisApplication.ActiveEditObject Is PlanarSketch Then\n    MessageBox.Show(\"A sketch must be active.\")\nElse\n\t' Set a reference to the active sketch.\n\tDim oSketch As PlanarSketch\n\t oSketch = ThisApplication.ActiveEditObject\n\t\n\t' Set a reference to the transient geometry collection.\n\tDim oTransGeom As TransientGeometry\n\t  oTransGeom = ThisApplication.TransientGeometry\n\t\n\t' Create the collection that will contain the fit points for the spline.\n\tDim oFitPoints As ObjectCollection\n\t  oFitPoints = ThisApplication.TransientObjects.CreateObjectCollection\n\t\n\t' Define the points to fit the spline through.  In this example, transient\n\t' points are used.  They could also be sketch points and then the spline\n\t' will automatically be constrained to fit through the sketch point.  The\n\t' points are at (0,0), (2,2), (4,0), (6,4), (7,-1).\n\tDim oPoints(0 To 5) As Point2d\n\toPoints(0) = oTransGeom.CreatePoint2d(0, 0)\n\toFitPoints.Add( oPoints(0))\n\t\n\t  oPoints(1) = oTransGeom.CreatePoint2d(2, 2)\n\toFitPoints.Add( oPoints(1))\n\t\n\t  oPoints(2) = oTransGeom.CreatePoint2d(4, 0)\n\toFitPoints.Add (oPoints(2))\n\t\n\t  oPoints(3) = oTransGeom.CreatePoint2d(6, 4)\n\toFitPoints.Add (oPoints(3))\n\t\n\t  oPoints(4) = oTransGeom.CreatePoint2d(7, -1)\n\toFitPoints.Add (oPoints(4))\n\t\n\t' Create the spline.\n\tDim oSpline As SketchSpline\n\t  oSpline = oSketch.SketchSplines.Add(oFitPoints)\n\t\n\t' Change the curve to be closed.\n\toSpline.Closed = True\n\t \nEnd If\n\n\n\n\n"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Purging / Deleting instances of Sketched Symbols\n                    ", "solution": ["Public Sub Sketchsymbol_Delete()\n   \nDim oDoc As DrawingDocument\nSet oDoc = ThisApplication.ActiveDocument\n\n\nDim oSheet As Sheet\n\nFor Each oSheet In oDoc.Sheets\n\n     Dim oSketchedSymbolDef As SketchedSymbol\n    For each oSketchedSymbolDef in oSheet.SketchedSymbols", "     if osketchedSymbolDef.Name = \"REVISION BLOCK\" then\n        oSketchedSymbolDef.delete 'It will delete all the sketched symbols", "     endif\n   next\n\nNext\nEnd Sub"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Report the current value a multi-value parameter to an iProperty using iLogi\n                    ", "solution": ["MultiValue.SetList(\"material_gauge\", \"10\", \"11\", \"12\", \"13\", \"14\", \"16\", \"18\", \"19\", \"20\", \"22\", \"24\", \"26\", \"28\", \"7\", \"8\")\n\n'set parameter value\nParameter(\"material_gauge\") = \"12\"\n\n\tTry\n\t\t'try to get the iproperty value\n\t\toTest = iProperties.Value(\"Custom\", \"material_gauge\") \n\tCatch\n\t\t'catch error when iproperty doesn't exist and create it\n\t\tThisDoc.Document.CustomPropertySet.Add(\"\", \"material_gauge\")\n\t\t\n\tEnd Try\n'set property value to match parameter\niProperties.Value(\"Custom\", \"material_gauge\") = Parameter(\"material_gauge\")\n'update description with formula\niProperties.Value(\"Project\", \"Description\") = \"= <material_gauge> ga x <flat_pattern_width> x <flat_pattern_length> LG.\"\n\niLogicVb.UpdateWhenDone = True"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Converting multiple drawings to PDF\n                    ", "solution": [], "author": "k14348"},
{"created at": [], "solution Title": "\n                        Re: BoM configuration\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to change the value of the same parameter of multiple components\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Betreff: Revision History Export with iLogic\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim oOptions As NameValueMap 'see below for additional options\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\noOptions.Value(\"AutoFitColumnsWidth\") = 1\n\nDim oRevTable As RevisionTable\noRevTable = oDrawDoc.ActiveSheet.RevisionTables.Item(1)\n\noRevTable.Export(ThisDoc.PathAndFileName(False) & \".xlsx\", kMicrosoftExcelFormat)"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Digitally signing an Inventor Addin\n                    ", "solution": [], "author": "dhaverstick"},
{"created at": [], "solution Title": "\n                        Re: iLogic and Excel Worksheets\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Style Library Conflict\n                    ", "solution": [], "author": "dlewis1000"},
{"created at": [], "solution Title": "\n                        Re: Open global form with ilogic\n                    ", "solution": ["iLogicForm", ".", "ShowGlobal", "(", "\"", "Form 1", "\"", ")"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Saveas ComponentOccurrence and rename\n                    ", "solution": ["//get the active assembly document\nAssemblyDocument oAssemDoc = (AssemblyDocument)mApp.ActiveDocument;\n\n//get the assembly component definition\nAssemblyComponentDefinition oAssemDef = oAssemDoc.ComponentDefinition;\n\n//get the assembly occurrences\nComponentOccurrences oCompOccs = oAssemDef.Occurrences;\n\n\nforeach (ComponentOccurrence part in oCompOccs)\n                {\n                    if (part.DefinitionDocumentType == Inventor.DocumentTypeEnum.kPartDocumentObject)\n                    {\n\n                        Object obj = part;\n                        if (obj is ComponentOccurrence)\n                        {\n                            ComponentOccurrence occ;\n                            occ = (ComponentOccurrence)obj;\n                            MessageBox.Show(occ.Definition.Document.FullFileName);\n                        }\n\n                    }\n                }"], "author": "\u0130rfan\u015eahin"},
{"created at": [], "solution Title": "\n                        Re: BOM configurations using iLogic\n                    ", "solution": ["Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", " ", "=", " ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "oAsmDef", " ", "As", " ", "AssemblyComponentDefinition", " ", "=", " ", "oAsmDoc", ".", "ComponentDefinition", "\n", "Dim", " ", "oBOM", " ", "As", " ", "BOM", " ", "=", " ", "oAsmDef", ".", "BOM", "\n \n", "Dim", " ", "filename", " ", "As", " ", "String", " ", "=", " ", "\"", "Fullfilename of the xml", "\"", "\n", "Call", " ", "oBOM", ".", "importBOMCustomization", "(", "filename", ")"], "author": "frederic.vanden"},
{"created at": ["\u200e03-07-2019 05:42 AM"], "solution Title": "\n                        Re: Modify Custom Property Format on Multiple components - Same Parameter\n                    ", "solution": ["Public Sub Main()\n    Call UpdateCustomProperties\nEnd Sub\n\nPublic Sub UpdateCustomProperties()\n    ' Get the open top-level assemby.\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    ' Get a list of all documents referenced by this assembly.\n    ' This property will return everything at all levels.\n    Dim refDocs As DocumentsEnumerator\n    Set refDocs = asmDoc.AllReferencedDocuments\n    \n    ' Iterate through the documents.\n    Dim doc As Document\n    For Each doc In refDocs\n        ' Look for part documents.\n        If doc.DocumentType = kPartDocumentObject Then\n            ' Look for a parameter named \"G_L\".\n            Dim params As Parameters\n            Set params = doc.ComponentDefinition.Parameters\n            \n            On Error Resume Next\n            Dim param As Parameter\n            Set param = params.Item(\"G_L\")\n            If Err.Number = 0 Then\n                ' Set the custom property format.\n                Dim propFormat As CustomPropertyFormat\n                Set propFormat = param.CustomPropertyFormat\n                \n                propFormat.Precision = CustomPropertyPrecisionEnum.kEighthsFractionalLengthPrecision\n                propFormat.Units = \"in\"\n                propFormat.PropertyType = CustomPropertyTypeEnum.kTextPropertyType\n            End If\n            On Error GoTo 0\n        End If\n    Next\nEnd Sub"], "author": "cbenner"},
{"created at": [], "solution Title": "\n                        Re: 3D PDF with Company Logo\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: scale of section view with ilogic code\n                    ", "solution": ["Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", " ", "=", " ", "ThisDrawing", ".", "Document", "\n", "Dim", " ", "oView", " ", "As", " ", "DrawingView", "\n", "For", " ", "Each", " ", "oSheet", " ", "As", " ", "Sheet", " ", "In", " ", "oDrawDoc", ".", "Sheets", "\n", "For", " ", "Each", " ", "oView", " ", "In", " ", "oSheet", ".", "DrawingViews", "\n ", "If", " ", "oView", ".ViewType() ", "=", " ", "DrawingViewTypeEnum", ".kSectionDrawingViewType", "\n          ", "oView", ".", "Scale", " ", "=", " ", "\"", "1", "\"", " \n  ", "End", " ", "If", "\n", "Next", "\n", "Next", "\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Update mass on Multibody part using iLogic\n                    ", "solution": [], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: I logic masters I could use some help\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: CommandIDEnums\n                    ", "solution": ["ThisApplication.CommandManager.ControlDefinitions(\"AppZoomSelectCmd\").Execute2 (True)"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Writedatatofile using dataIO producing properly named, blank file\n                    ", "solution": ["    Public Sub exportDXFs()\n        ' Get the active assembly. \n        Dim oAsmDoc As AssemblyDocument = _invApp.ActiveDocument\n        ' Get all of the referenced documents. \n        Dim oRefDocs As DocumentsEnumerator = oAsmDoc.AllReferencedDocuments\n\n        ' Iterate through the list of documents. \n        Dim oRefDoc As Document\n\n        For Each oRefDoc In oRefDocs\n\n            Dim oDoc As PartDocument = oRefDoc\n            Dim oSketch As PlanarSketch = oDoc.ComponentDefinition.Sketches(1)\n            Dim partName As String = oDoc.DisplayName\n            Console.WriteLine(oSketch.Name)\n\n            'Export 'DXF SKetch'\n            Dim oData As DataIO = oSketch.DataIO\n            oData.WriteDataToFile(\"DXF\", My.Resources.clientCAMDrawingDirectory & My.Resources.clientCAMDrawingid1 & partName & \".dxf\")\n\n        Next\n    End Sub"], "author": "btpierce31"},
{"created at": [], "solution Title": "\n                        Re: Manage with assembly occurrence and occurrence below it\n                    ", "solution": [], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Find parts with certain appearance\n                    ", "solution": ["Dim appearanceToFind As String = \"Axe grip\"\n\n'Define the open document\nDim openDoc As Document\nopenDoc = ThisDoc.Document\n\n'Create a dictionary which will be used to store the appearances\nDim Appearances As Object\nAppearances = CreateObject(\"Scripting.Dictionary\")\n\n'Look at all of the files referenced in the open document\nDim docFile As Document\nFor Each docFile In openDoc.AllReferencedDocuments\n\n'format file name\nDim FNamePos As Long\nFNamePos = InStrRev(docFile.FullFileName, \"\\\", -1)\nDim docFName As String\ndocFName = Right(docFile.FullFileName, Len(docFile.FullFileName) - FNamePos)\n\n'Get the part face\nDim oFaces As Faces\n\n'Only look at part files\nIf docFile.DocumentType = kPartDocumentObject Then\nTry\noFaces = docFile.ComponentDefinition.SurfaceBodies(1).Faces\nCatch ex As Exception\nEnd Try\nEnd If\n\n'Loop through each face and store the part in the dictionary if the appearance matches\nDim oFace As Face\nFor Each oFace In oFaces\nIf appearanceToFind = oFace.Appearance.DisplayName Then\nAppearances(docFName) = Appearances(docFName)\nExit For\nEnd If\nNext\nNext\n\nDim partList As String\n\n'Gather the contents of the dictionary\nFor Each Item In Appearances\npartList += Item + vbCrLf\nNext\n\n'MessageBox.Show(\"Parts found with appearance \" & appearanceToFind & \":\" & vbLf & partList)\n\noWrite = System.IO.File.CreateText(ThisDoc.PathAndFileName(False) & \" parts with appearance\" & \".txt\")\noWrite.WriteLine(partList)\noWrite.Close()"], "author": "bitbarrelmedia"},
{"created at": [], "solution Title": "\n                        Re: custom assembly level iProperties\n                    ", "solution": [], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: How to get focus back when using SelectSet.SelectMultiple\n                    ", "solution": [], "author": "zadazLWJJ4"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Fail to check drawing type\n                    ", "solution": ["oDoc = ThisApplication.ActiveDocument", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", " ", "=", " ", "oDoc", ".", "Sheets", ".", "Item", "(", "1", ")", "\n", "Dim", " ", "oDrawingViews", " ", "As", " ", "DrawingViews", " ", "=", " ", "oSheet", ".", "DrawingViews", "\n", "Dim", " ", "oView", " ", "As", " ", "DrawingView", " ", "=", " ", "oDrawingViews", ".", "Item", "(", "1", ")", "'Center the view", "oPosition = ThisApplication.TransientGeometry.CreatePoint2d()", "oPosition.X = oSheet.Width / 2", "oPosition.Y = oSheet.Height / 2", "oView.Position = oPosition"], "author": "ThomasB44"},
{"created at": [], "solution Title": "\n                        Re: cycling between open drawings\n                    ", "solution": ["    For Each oDoc In ThisApplication.Documents.VisibleDocuments\n        If (oDoc.ReferencedDocuments.count > 0) Then\n            If (oDoc.DocumentType = kDrawingDocumentObject) Then\n                oDoc.Activate\n    \n                MsgBox (\"do stuff here\")\n\n            End If\n        End If\n    Next oDoc"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: combobox select action\n                    ", "solution": ["AddHandler Me.m_pipeworkComboxDefinition.TextChanged, AddressOf Me.", "MyComboChange", "Sub ", "MyComboChange", "\n    MsgBox(\"Tada, it works!\")\nEnd Sub", "AddHandler Me.m_pipeworkComboxDefinition.", "OnSelect", ", AddressOf Me.", "MyComboChange"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Problem with exporting BOM to excel using Inventor 2017\n                    ", "solution": [], "author": "Jon.Balgley"},
{"created at": [], "solution Title": "\n                        Re: Macro for opening a Drawing and export it as pdf\n                    ", "solution": ["Public Sub PublishPDF()\n' Get the PDF translator Add-In.\nDim PDFAddIn As TranslatorAddIn\nSet PDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n'Set a reference to the active document (the document to be published).\nDim oDocument As Document\nSet oDocument = ThisApplication.ActiveDocument\nDim oContext As TranslationContext\nSet oContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = kFileBrowseIOMechanism\n' Create a NameValueMap object\nDim oOptions As NameValueMap\nSet oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n' Create a DataMedium object\nDim oDataMedium As DataMedium\nSet oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n' Check whether the translator has 'SaveCopyAs' options\nIf PDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n' Options for drawings...\noOptions.Value(\"All_Color_AS_Black\") = 0\n'oOptions.Value(\"Remove_Line_Weights\") = 0\n'oOptions.Value(\"Vector_Resolution\") = 400\n'oOptions.Value(\"Sheet_Range\") = kPrintAllSheets\n'oOptions.Value(\"Custom_Begin_Sheet\") = 2\n'oOptions.Value(\"Custom_End_Sheet\") = 4\nEnd If\n'Set the destination file name\noDataMedium.FileName = \"c:\\\\temp\\\\test.pdf\"\n'Publish document.\nCall PDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nEnd Sub"], "author": "belash007"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to export PDF with rev and move old revision to another folder\n                    ", "solution": [], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: Save As - Updates all Open Files?\n                    ", "solution": ["NewFileName =  \"Cube_ \" & TimeString 'add prefix\nNewFileName = Replace(NewFileName,\":\", \".\") 'remove colons, replace with periods\n\n'do save as\n'ThisDoc.Document.saveas(ThisDoc.Path & \"\\\" & NewFileName &  \".ipt\" ,False) 'WB commented\n\nThisDoc.Document.saveas(ThisDoc.Path & \"\\\" & NewFileName &  \".ipt\" ,True) 'WB added\n\n'WB added\nThisApplication.Documents.Open(ThisDoc.Path & \"\\\" & NewFileName &  \".ipt\")\n\nMessageBox.Show(\"New File: \" & ThisDoc.Path & \"\\\" & NewFileName &  \".ipt\", \"iLogic\")", "Dim refDoc As Document\n\n\tDim refDocDesc As DocumentDescriptor\n\tDim refFileDesc As FileDescriptor\n\n\tFor Each refDocDesc In ThisDoc.Document.ReferencedDocumentDescriptors\n\t\tNewFileName =  \"Cube_ \" & TimeString 'add prefix\n\t\tNewFileName = Replace(NewFileName,\":\", \".\") 'remove colons, replace with periods\n\t\t\n\t\trefDoc = refDocDesc.ReferencedDocument\n\t\trefDoc.SaveAs(ThisDoc.Path & \"\\\" & NewFileName & \".ipt\", True)\n\t\t\n\t\trefFileDesc = refDocDesc.ReferencedFileDescriptor\n\t\trefFileDesc.ReplaceReference(ThisDoc.Path & \"\\\" & NewFileName & \".ipt\")\n\t\t\n\t\tThisApplication.Documents.Open(ThisDoc.Path & \"\\\" & NewFileName &  \".ipt\")\n\t\t\n\t\tMessageBox.Show(\"New File: \" & ThisDoc.Path & \"\\\" & NewFileName &  \".ipt\", \"iLogic\")\n\tNext"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Highlight set\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Replacing text in rules\n                    ", "solution": ["'iLogic", "Public Sub Main()\n    original_text = \"test\\path\"\n    replacement_text = \"path\\real\"\n\n    Dim oAsmDoc As AssemblyDocument = ThisApplication.ActiveDocument\n    \n    Call rilogic(oAsmDoc, original_text, replacement_text)\n    \n    Dim item As Document\n    For Each item In oAsmDoc.AllReferencedDocuments\n        Call rilogic(item, original_text, replacement_text)\n    Next item\n    \n    MsgBox (\"Done\")\nEnd Sub\n\nPublic Sub rilogic(docfile As Document, str1 as String, str2 as String)\n\tTry\n    \tDim iLogicObject As Object = iLogicVb.Automation\n        \n    \tDim rules As Object\n    \trules = iLogicObject.rules(docfile)\n\n    \tIf (Not rules Is Nothing) Then\n        \tDim rule As Object\n        \tFor Each rule In rules\n            \trule.Text = Replace(rule.Text, str1, str2)\n        \tNext rule\n    \tEnd If\n\tCatch\n\t\t'error getting ilogic addin\n\tEnd Try\nEnd Sub", "'VBA", "Public Sub ReplaceiLogic()\n    original_text = \"test\\path\"\n    replacement_text = \"path\\real\"\n\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n    \n    Call rilogic(oAsmDoc, original_text, replacement_text)\n    \n    Dim item As Document\n    For Each item In oAsmDoc.AllReferencedDocuments\n        Call rilogic(item, original_text, replacement_text)\n    Next item\n    \n    MsgBox (\"Done\")\nEnd Sub\n\nPublic Sub rilogic(docfile As Document, str1 as string, str2 as string)\n    Dim iLogicObject As Object\n    On Error GoTo error\n    Set iLogicObject = ThisApplication.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\").Automation\n        \n    Dim rules As Object\n    Set rules = iLogicObject.rules(docfile)\n\n    If (Not rules Is Nothing) Then\n        Dim rule As Object\n        For Each rule In rules\n            rule.Text = Replace(rule.Text, str1, str2)\n        Next rule\n    End If\n    Exit Sub\nerror:\n    'error getting ilogic addin\nEnd Sub"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Migrate Inventor files to current version using code\n                    ", "solution": [], "author": "Jon.Balgley"},
{"created at": [], "solution Title": "\n                        Re: Select a single edge instead of a chain\n                    ", "solution": [], "author": "jddickson"},
{"created at": [], "solution Title": "\n                        Re: PropertySets Failing to Access iProperties\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Passing content center path of ipj to ilogic rules\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Quantity om drawing based on total number of parts. iLogic\n                    ", "solution": ["Sub", " ", "Main", "\n", "'", "Get current document", "\n", "doc", " ", "=", " ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "oAssyDef", " ", "As", " ", "AssemblyComponentDefinition", " ", "=", " ", "doc", ".", "ComponentDefinition", "\n", "'", "Get the BOM object", "\n", "Dim", " ", "oBOM", " ", "As", " ", "BOM", " ", "=", " ", "oAssyDef", ".", "BOM", "\n", "'", "enable the Parts Only View", "\n", "oBOM", ".", "PartsOnlyViewEnabled", " ", "=", " ", "True", "\n", "'", "Get the Parts Only view of the BOM", "\n", "Dim", " ", "oBOMViewPO", " ", "As", " ", "BOMView", " ", "=", " ", "oBOM", ".", "BOMViews", ".", "Item", "(", "\"", "Parts Only", "\"", ")", "\n", "'", "declare variable for each BOM row.", "\n", "Dim", " ", "oBOMRowPO", " ", "As", " ", "BOMRow", "\n\n", "'", "For each row in the Parts Only BOM, do the following", "\n", "For", " ", "Each", " ", "oBOMRowPO", " ", "In", " ", "oBOMViewPO", ".", "BOMRows", "\n    ", "'", "Set a reference to the primary ComponentDefinition of the row", "\n    ", "Dim", " ", "oCompDef", " ", "As", " ", "ComponentDefinition", " ", "=", " ", "oBOMRowPO", ".", "ComponentDefinitions", ".", "Item", "(", "1", ")", "\n    \n    ", "'", "get the full filename associated to the component in the row. ex: c:\\temp\\part1.ipt", "\n    ", "Dim", " ", "CompFullDocumentName", " ", "As", " ", "String", " ", "=", " ", "oCompDef", ".", "Document", ".", "FullDocumentName", "\n    ", "Dim", " ", "CompFileNameOnly", " ", "As", " ", "String", "\n    ", "'", "get the location of the last backslash", "\n    ", "Dim", " ", "index", " ", "As", " ", "Integer", " ", "=", " ", "CompFullDocumentName", ".", "lastindexof", "(", "\"", "\\", "\"", ")", "\n    ", "'", "get the filename only from the full filename", "\n    ", "CompFileNameOnly", " ", "=", " ", "CompFullDocumentName", ".", "substring", "(", "index", "+", "1", ")", "\n    \n    ", "'", "MessageBox.Show(CompFileNameOnly)", "\n    \n    ", "'", "get the Qty value in the current row", "\n    ", "Dim", " ", "Qty", " ", "As", " ", "String", " ", "=", " ", "oBOMRowPO", ".", "TotalQuantity", "\n    \n    ", "'", "check to see if the component is a library part, cc part or read only.", "\n    ", "Dim", " ", "IsLibCCReadonly", " ", "As", " ", "Boolean", " ", "=", " ", "LibCCReadonlyChecker", "(", "CompFullDocumentName", ")", "\n    \n    ", "'", "if the file is NOT a library part, cc part or read only.", "\n    ", "If", " ", "IsLibCCReadonly", " ", "=", " ", "False", " ", "Then", "\n        ", "'", "set following custom iproperty to equal the QTY from the row", "\n        ", "iProperties", ".", "Value", "(", "CompFileNameOnly", ", ", "\"", "Custom", "\"", ", ", "\"", "PartQty", "\"", ")", " ", "=", " ", "Qty", "\n    ", "End", " ", "If", "\n", "Next", "\n\n", "'", "at this time, the qty value for all parts have been copied to the custom property.", "'", "next, the following code will cycle through only the subassemblies.", "\n\n", "'", "if the Structured BOM view is enabled then...", "\n", "If", " ", "oBOM", ".", "StructuredViewEnabled", " ", "Then", "\n    ", "'", "If show First Level is set then turn it off. This will set it to All Levels", "\n    ", "If", " ", "oBOM", ".", "StructuredViewFirstLevelOnly", " ", "Then", "\n        ", "oBOM", ".", "StructuredViewFirstLevelOnly", " ", "=", " ", "False", "\n    ", "End", " ", "If", "\n", "Else", "\n    ", "'", "enable the Structured BOM view", "\n    ", "oBOM", ".", "StructuredViewEnabled", " ", "=", " ", "True", "\n    ", "'", "set the FirstLevelOnly to false therefore make it All Levels", "\n    ", "oBOM", ".", "StructuredViewFirstLevelOnly", " ", "=", " ", "False", "\n", "End", " ", "If", "\n\n", "'", "Get the Structured view of the BOM", "\n", "Dim", " ", "oBOMViewStruc", " ", "As", " ", "BOMView", " ", "=", " ", "oBOM", ".", "BOMViews", ".", "Item", "(", "\"", "Structured", "\"", ")", "\n", "'", "declare variable for each BOM row.", "\n", "Dim", " ", "oBOMRowStruc", " ", "As", " ", "BOMRow", "\n", "'", "Create a blank array(list). This will be used to store a list of all subassemblies for comparing if the subassembly already exist.", "\n", "Dim", " ", "arrSubAssemblyList", " ", "As", " ", "New", " ", "ArrayList", "\n\n", "'", "call a subroutine to cycle through the structured BOM. It will need the collection of rows, the subassembly list, and 1 is the initial parentqty.", "\n", "Call", " ", "QueryBOMRowProperties", "(", "oBOMViewStruc", ".", "BOMRows", ", ", "arrSubAssemblyList", ", ", "1", ")", "\n\n", "End Sub", "\n\n", "Private", " ", "Sub", " ", "QueryBOMRowProperties", "(", "oBOMRows", " ", "As", " ", "BOMRowsEnumerator", ", ", "arrSubAssembly", " ", "As", " ", "ArrayList", ", ", "oParentQty", " ", "As", " ", "Integer", ")", "\n\n", "'", "declare a incrementer variable", "\n", "Dim", " ", "i", " ", "As", " ", "Long", "\n", "'", "for each row in the structured BOM", "\n", "For", " ", "i", " ", "=", " ", "1", " ", "To", " ", "oBOMRows", ".", "count", "\n    ", "'", "get the row based on the incrementer", "\n    ", "Dim", " ", "oBOMRowStruc", " ", "As", " ", "BOMRow", " ", "=", " ", "oBOMRows", ".", "item", "(", "i", ")", "\n    ", "'", "get the component definition assocated with the row", "\n    ", "Dim", " ", "oCompDef", " ", "As", " ", "ComponentDefinition", " ", "=", " ", "oBOMRowStruc", ".", "ComponentDefinitions", ".", "item", "(", "1", ")", "\n    ", "Dim", " ", "oQty", " ", "As", " ", "Integer", "\n    \n    ", "'", "If the component is an assembly and it's bom structure is Normal then do the following. else do nothing", "\n    ", "If", " ", "TypeOf", " ", "oCompDef", " ", "Is", " ", "AssemblyComponentDefinition", " ", "And", " ", "oCompDef", ".", "BOMStructure", " ", "=", " ", "BOMStructureEnum", ".", "kNormalBOMStructure", " ", "Then", "\n            ", "'", "get the full filename associated to the component in the row. ex: c:\\temp\\subassembly.iam", "\n            ", "Dim", " ", "CompFullDocumentName", " ", "As", " ", "String", " ", "=", " ", "oCompDef", ".", "Document", ".", "FullDocumentName", "\n            ", "Dim", " ", "CompFileNameOnly", " ", "As", " ", "String", "\n            ", "'", "get the location of the last backslash", "\n            ", "Dim", " ", "index", " ", "As", " ", "Integer", " ", "=", " ", "CompFullDocumentName", ".", "lastindexof", "(", "\"", "\\", "\"", ")", "\n            ", "'", "get the filename only from the full filename", "\n            ", "CompFileNameOnly", " ", "=", " ", "CompFullDocumentName", ".", "substring", "(", "index", "+", "1", ")", "\n            ", "'", "MessageBox.Show(CompFileNameOnly)", "\n            \n            ", "'", "get the qty of the row and multiply by the parent qty.", "\n            ", "oQty", " ", "=", " ", "oBOMRowStruc", ".", "ItemQuantity", " ", "*", " ", "oParentQty", "\n            \n            ", "'", "create a variable that will be used to get the qty of the subassembly if it was used elsewhere", "\n            ", "Dim", " ", "additionalQty", " ", "As", " ", "Integer", " ", "=", " ", "0", "\n            ", "'", "if the subassembly list is not empty then...", "\n            ", "If", " ", "arrSubAssembly", ".", "Count", " ", "<>", " ", "0", " ", "Then", "\n                ", "'", "create a counter. this will be used to determine which item in the subassembly array (list) when it finds a match.", "\n                ", "'", "this counter will be used to edit that item with the new qty.", "\n                ", "Dim", " ", "counter", " ", "As", " ", "Integer", " ", "=", " ", "0", "\n                ", "'", "for each item in the subassembly array (list) starting at 0 (first item) to last item", "\n                ", "For", " ", "j", " ", "As", " ", "Integer", " ", "=", " ", "0", " ", "To", " ", "arrSubAssembly", ".", "Count", "-", "1", "\n                    ", "'", "get the location of the colon", "\n                    ", "Dim", " ", "commaindex", " ", "As", " ", "Integer", " ", "=", " ", "arrSubAssembly", "(", "j", ")", ".", "indexof", "(", "\"", ":", "\"", ")", "\n                    ", "'", "get just the file name", "\n                    ", "Dim", " ", "CompName", " ", "As", " ", "String", " ", "=", " ", "arrSubAssembly", "(", "j", ")", ".", "substring", "(", "0", ",", "commaindex", ")", "\n                    \n                    ", "'", "if the file name of the current row matches the current item in the subassembly array (list) then...", "\n                    ", "If", " ", "CompName", " ", "=", " ", "CompFileNameOnly", " ", "Then", "\n                        ", "'", "set the additional qty to the qty found in the subassembly array (list)", "\n                        ", "additionalQty", " ", "=", " ", "arrSubAssembly", "(", "j", ")", ".", "substring", "(", "commaindex", "+", "1", ")", "\n                        ", "'", "set the counter equal to the item in the subassembly array (list)", "\n                        ", "counter", " ", "=", " ", "j", "\n                        ", "'", "since a match is found, we need to exit the for loop so that counter no longer increments.", "\n                        ", "'", "so Set j To the number of items in the subassembly array. this will exit out the for loop.", "\n                        ", "j", " ", "=", " ", "arrSubAssembly", ".", "Count", "\n                    ", "Else", "\n                        ", "'", "increase the counter", "\n                        ", "counter", " ", "+=", " ", "1", "\n                    ", "End", " ", "If", "\n                ", "Next", "\n                \n                ", "'", "if additional qty was not changed then there was no match. It will be a new item in the subassembly array (list)", "\n                ", "If", " ", "additionalQty", " ", "=", " ", "0", " ", "Then", "\n                    ", "'", "add the subassambly to the subassembly array (list)", "\n                    ", "arrSubAssembly", ".", "add", "(", "CompFileNameOnly", " ", "&", " ", "\"", ":", "\"", " ", "&", " ", "oQty", ")", "\n                ", "Else", "\n                    ", "'", "if it did find a match, then update the qty for that item in the subassembly array (list)", "\n                    ", "arrSubAssembly", "(", "counter", ")", " ", "=", " ", "CompFileNameOnly", " ", "&", " ", "\"", ":", "\"", " ", "&", " ", "oQty", " ", "+", " ", "additionalQty", "\n                ", "End", " ", "If", "\n            ", "Else", "\n                ", "'", "add the first subassembly to the list. It will add the filename and the qty separated by a colon. ex. subassembly.iam:2", "\n                ", "arrSubAssembly", ".", "add", "(", "CompFileNameOnly", " ", "&", " ", "\"", ":", "\"", " ", "&", " ", "oQty", ")", "\n            ", "End", " ", "If", "\n            \n            ", "'", "check to see if the component is a library part, cc part or read only.", "\n            ", "Dim", " ", "IsLibCCReadonly", " ", "As", " ", "Boolean", " ", "=", " ", "LibCCReadonlyChecker", "(", "CompFullDocumentName", ")", "\n            \n            ", "'", "if the file is NOT a library part, cc part or read only.", "\n            ", "If", " ", "IsLibCCReadonly", " ", "=", " ", "False", " ", "Then", "\n                ", "'", "set following custom iproperty to equal the QTY from the row plus the additional qty value", "\n                ", "iProperties", ".", "Value", "(", "CompFileNameOnly", ", ", "\"", "Custom", "\"", ", ", "\"", "PartQty", "\"", ")", " ", "=", " ", "oQty", " ", "+", " ", "additionalQty", "\n            \n                ", "'", "Recursively iterate child rows if present.", "\n                ", "If", " ", "Not", " ", "oBOMRowStruc", ".", "ChildRows", " ", "Is", " ", "Nothing", " ", "Then", "\n                    ", "'", "recall the subroutine, push the childrows of the sub, sub assembly array (list), and the qty of the subassembly", "\n                    ", "Call", " ", "QueryBOMRowProperties", "(", "oBOMRowStruc", ".", "ChildRows", ", ", "arrSubAssembly", ", ", "oQty", ")", "\n                ", "End", " ", "If", "\n            ", "End", " ", "If", "\n        ", "End", " ", "If", "\n    ", "Next", "\n", "End Sub", "\n\n", "Private", " ", "Function", " ", "LibCCReadonlyChecker", "(", "filename", " ", "As", " ", "String", ")", " ", "As", " ", "Boolean", "\n", "'", " Get the active project", "\n", "Dim", " ", "oProject", " ", "As", " ", "DesignProject", " ", "=", " ", "ThisApplication", ".", "DesignProjectManager", ".", "ActiveDesignProject", "\n", "'", " Get all the library paths", "\n", "Dim", " ", "oLibraryPaths", " ", "As", " ", "ProjectPaths", " ", "=", " ", "oProject", ".", "LibraryPaths", "\n", "Dim", " ", "oLibraryPath", " ", "As", " ", "ProjectPath", "\n\n", "'", "for each library path in the list of all library paths", "\n", "For", " ", "Each", " ", "oLibraryPath", " ", "In", " ", "oLibraryPaths", "\n    ", "'", "get the library path", "\n    ", "Dim", " ", "oLibs", " ", "As", " ", "String", " ", "=", " ", "oLibraryPath", ".", "Path", "\n    ", "'", "if the file is in a library path then Return True", "\n    ", "If", " ", "filename", ".", "Contains", "(", "oLibs", ")", " ", "=", " ", "True", " ", "Then", "\n        ", "Return", " ", "True", "\n    ", "End", " ", "If", "\n", "Next", "\n\n", "'", "if the file is in the CC location then Return True", "\n", "If", " ", "filename", ".", "Contains", "(", "oProject", ".", "ContentCenterPath", ")", " ", "=", " ", "True", " ", "Then", "\n    ", "Return", " ", "True", "\n", "End", " ", "If", "\n\n", "'", "get read only status", "\n", "Dim", " ", "File_Attr", " ", "As", " ", "Long", " ", "=", " ", "System", ".", "IO", ".", "File", ".", "GetAttributes", "(", "filename", ")", "\n", "'", "if the file is readonly or readonly and archieve then Return True", "\n", "If", " ", "File_Attr", " ", "=", " ", "1", " ", "Or", " ", "File_Attr", " ", "=", " ", "33", " ", "Then", "\n    ", "Return", " ", "True", "\n", "End", " ", "If", "\n\n", "'", "return False if it's not a library, CC or a Readonly part.", "\n", "Return", " ", "False", "\n\n", "End Function", "\n"], "author": "mikael_nanke"},
{"created at": [], "solution Title": "\n                        Re: How to redefine many 2D sketch points\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        2017 and Self-Signed Addin\n                    ", "solution": ["// install certificate\nInstallCertificate(@\"C:\\path_to_my_certificate_file\\certificate_filename.cer\");\n\n// uninstall certificate\nUninstallCertificate(@\"C:\\path_to_my_certificate_file\\certificate_filename.cer\");", "// required usings", "using System;", "using System.IO;", "using System.Security.Cryptography.X509Certificates;", "// then add the following methods somewhere in your console application", "        /// <summary>\n        /// install certificate on local machine\n        /// </summary>\n        /// <param name=\"certfile\">full path to certificate file</param>\n        private static void InstallCertificate(string certfile)\n        {\n            try\n            {\n                X509Certificate2 certificate = new X509Certificate2(X509Certificate2.CreateFromCertFile(certfile));\n\n\n\n                //\n                // trusted root\n                //\n\n\n\n                // open certificate store\n                X509Store store = new X509Store(StoreName.Root, StoreLocation.LocalMachine);\n                store.Open(OpenFlags.ReadWrite);\n\n                // get all installed certificates and search for the certificate to be installed\n                bool IsCertificateAlreadyInstalled = false;\n                foreach (X509Certificate2 c in store.Certificates)\n                {\n                    if (c.SubjectName.Name.Equals(certificate.SubjectName.Name))\n                    {\n                        IsCertificateAlreadyInstalled = true;\n                        break;\n                    }\n                }\n\n                // if certificate was found\n                if (IsCertificateAlreadyInstalled)\n                {\n                    // certificate already exists\n                    System.Console.WriteLine(\"certificate \\\"{0}\\\" is already installed in trusted root\", certificate.SubjectName.Name);\n                }\n                else\n                {\n                    // certificate does not exist and could be installed\n                    System.Console.WriteLine(\"certificate \\\"{0}\\\" will now be installed in trusted root...\", certificate.SubjectName.Name);\n                    store.Add(new X509Certificate2(X509Certificate2.CreateFromCertFile(certfile)));\n                    System.Console.WriteLine(\"Installation was successfull!\", certificate.FriendlyName);\n                }\n                store.Close();\n\n\n\n                //\n                // trusted publisher\n                //\n\n\n\n                // open certificate store\n                store = new X509Store(StoreName.TrustedPublisher, StoreLocation.LocalMachine);\n                store.Open(OpenFlags.ReadWrite);\n\n                // get all installed certificates and search for the certificate to be installed\n                IsCertificateAlreadyInstalled = false;\n                foreach (X509Certificate2 c in store.Certificates)\n                {\n                    if (c.SubjectName.Name.Equals(certificate.SubjectName.Name))\n                    {\n                        IsCertificateAlreadyInstalled = true;\n                        break;\n                    }\n                }\n\n                // if certificate was found\n                if (IsCertificateAlreadyInstalled)\n                {\n                    // certificate already exists\n                    System.Console.WriteLine(\"certificate \\\"{0}\\\" is already installed in trusted publisher\", certificate.SubjectName.Name);\n                }\n                else\n                {\n                    // certificate does not exist and could be installed\n                    System.Console.WriteLine(\"certificate \\\"{0}\\\" will now be installed in trusted publisher...\", certificate.SubjectName.Name);\n                    store.Add(new X509Certificate2(X509Certificate2.CreateFromCertFile(certfile)));\n                    System.Console.WriteLine(\"Installation was successfull!\", certificate.FriendlyName);\n                }\n                store.Close();\n            }\n#if DEBUG\n            catch (Exception ex)\n            {\n                System.Console.WriteLine(\"Installation has failed\");\n                Console.WriteLine(ex.ToString());\n            }\n#else\n            catch\n            {\n                System.Console.WriteLine(\"Installation has failed\");\n            }\n#endif\n        }\n\n        /// <summary>\n        /// uninstall certificate from local machine\n        /// </summary>\n        /// <param name=\"certfile\">full path to certificate file</param>\n        private static void UninstallCertificate(string certfile)\n        {\n            try\n            {\n                X509Certificate2 certificate = new X509Certificate2(X509Certificate2.CreateFromCertFile(certfile));\n\n\n\n                //\n                // trusted root\n                //\n\n\n\n                // open certificate store\n                X509Store store = new X509Store(StoreName.Root, StoreLocation.LocalMachine);\n                store.Open(OpenFlags.ReadWrite);\n\n                // get all installed certificates and search for the certificate to be installed\n                bool IsCertificateAlreadyInstalled = false;\n                int i = 0;\n                foreach (X509Certificate2 c in store.Certificates)\n                {\n                    if (c.SubjectName.Name.Equals(certificate.SubjectName.Name))\n                    {\n                        IsCertificateAlreadyInstalled = true;\n                        break;\n                    }\n                    i++;\n                }\n\n                // if certificate was found\n                if (IsCertificateAlreadyInstalled)\n                {\n                    // certificate exists and could be uninstalled\n                    System.Console.WriteLine(\"certificate \\\"{0}\\\" will now be uninstalled from trusted root...\", certificate.SubjectName.Name);\n                    store.Remove(store.Certificates[i]);\n                    System.Console.WriteLine(\"Uninstallation was successfull\", certificate.FriendlyName);\n                }\n                else\n                {\n                    // certificate does not exist and could not be uninstalled\n                    System.Console.WriteLine(\"certificate \\\"{0}\\\" is not installed in trusted root\", certificate.SubjectName.Name);\n                }\n                store.Close();\n\n\n\n                //\n                // trusted publisher\n                //\n\n\n\n                // open certificate store\n                store = new X509Store(StoreName.TrustedPublisher, StoreLocation.LocalMachine);\n                store.Open(OpenFlags.ReadWrite);\n\n                // get all installed certificates and search for the certificate to be installed\n                IsCertificateAlreadyInstalled = false;\n                i = 0;\n                foreach (X509Certificate2 c in store.Certificates)\n                {\n                    if (c.SubjectName.Name.Equals(certificate.SubjectName.Name))\n                    {\n                        IsCertificateAlreadyInstalled = true;\n                        break;\n                    }\n                    i++;\n                }\n\n                // if certificate was found\n                if (IsCertificateAlreadyInstalled)\n                {\n                    // certificate exists and could be uninstalled\n                    System.Console.WriteLine(\"certificate \\\"{0}\\\" will now be uninstalled from trusted publisher...\", certificate.SubjectName.Name);\n                    store.Remove(store.Certificates[i]);\n                    System.Console.WriteLine(\"Uninstallation was successfull\", certificate.FriendlyName);\n                }\n                else\n                {\n                    // certificate does not exist and could not be uninstalled\n                    System.Console.WriteLine(\"certificate \\\"{0}\\\" is not installed in trusted publisher\", certificate.SubjectName.Name);\n                }\n                store.Close();\n            }\n#if DEBUG\n            catch (Exception ex)\n            {\n                System.Console.WriteLine(\"Uninstallation has failed\");\n                Console.WriteLine(ex.ToString());\n            }\n#else\n            catch\n            {\n                System.Console.WriteLine(\"Uninstallation has failed\");\n            }\n#endif\n        }"], "author": "thom-g"},
{"created at": [], "solution Title": "\n                        Re: Display quality\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Can't create constrain in Inventor's API\n                    ", "solution": ["Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button_CREATE.Click\n    '\u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0441\u0431\u043e\u0440\u043a\u0438\n    Dim oAssyDoc As Inventor.AssemblyDocument = oApp.Documents.Add(Inventor.DocumentTypeEnum.kAssemblyDocumentObject, oApp.GetTemplateFile(Inventor.DocumentTypeEnum.kAssemblyDocumentObject))\n\n    '\u0414\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0432 \u0441\u0431\u043e\u0440\u043a\u0443 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0443, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u043c\u0430\u0442\u0440\u0438\u0446\u044b\n    Dim oPositionMatrix As Inventor.Matrix = oApp.TransientGeometry.CreateMatrix\n\n    '\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u0435\u0442\u0430\u043b\u0438 \u0432 \u0441\u0431\u043e\u0440\u043a\u0443\n    Dim oPositionMatrix1 As Inventor.Matrix = oApp.TransientGeometry.CreateMatrix\n    Dim baseFilename As String = \"C:\\Temp\\ConstraintQuestion\\\u0414\u0435\u0442\u0430\u043b\u044c1.ipt\"\n    Dim oDetail As Inventor.ComponentOccurrence = oAssyDoc.ComponentDefinition.Occurrences.Add(baseFilename, oPositionMatrix)\n\n    Dim oEdge As Inventor.Edge\n    For Each oFace As Inventor.Face In oDetail.SurfaceBodies(1).Faces\n        If oFace.SurfaceType = Inventor.SurfaceTypeEnum.kCylinderSurface Then\n            For Each oEdge In oFace.Edges\n                If oEdge.GeometryType = Inventor.CurveTypeEnum.kCircleCurve Then\n                    ''\u0414\u0440\u0443\u0433\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u043e \u043d\u043e\u0432\u043e\u043c\u0443 \u0432\u0435\u043a\u0442\u043e\u0440\u0443\n                    Dim sFileName As String = \"C:\\Temp\\ConstraintQuestion\\\u0426\u0438\u043b\u0438\u043d\u0434\u0440.ipt\"\n                    Dim oCylinder1 As Inventor.ComponentOccurrence = oAssyDoc.ComponentDefinition.Occurrences.Add(sFileName, oPositionMatrix)\n\n                    For Each oCylFace As Inventor.Face In oCylinder1.SurfaceBodies(1).Faces\n                        If oFace.SurfaceType = Inventor.SurfaceTypeEnum.kCylinderSurface Then\n                            Dim oConstr As Inventor.AssemblyConstraint = oAssyDoc.ComponentDefinition.Constraints.AddMateConstraint(oFace, oCylFace, 0, Inventor.InferredTypeEnum.kInferredLine, Inventor.InferredTypeEnum.kInferredLine)\n                            Exit For\n                        End If\n                    Next\n\n                    Exit For\n                End If\n            Next\n        End If\n    Next\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Terminology\n                    ", "solution": [], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: Select document from Model browser pane\n                    ", "solution": ["Public Sub SelectTopNode()\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    asmDoc.SelectSet.Clear\n    Call asmDoc.SelectSet.Select(asmDoc.ComponentDefinition)\nEnd Sub\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Replace IAM with STP as multibody part (VBA)\n                    ", "solution": ["Sub ImportSATSample()\n    Dim oSat As TranslatorAddIn\n    Set oSat = ThisApplication.ApplicationAddIns.ItemById(\"{89162634-02B6-11D5-8E80-0010B541CD80}\")\n\n    Dim oDM As DataMedium\n    Set oDM = ThisApplication.TransientObjects.CreateDataMedium\n    Dim oContext As TranslationContext\n    Set oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = kDataDropIOMechanism\n    \n    Dim oOptions As NameValueMap\n    Set oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n    \n    oDM.MediumType = kFileNameMedium\n    oDM.FileName = \"C:\\Temp\\Sat.sat\"\n    \n    ' Import SAT as a single part with multiple solid bodies\n    oOptions.Add \"ImportAASP\", True\n    oOptions.Add \"ImportAASPIndex\", 0\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.Documents.Add(kPartDocumentObject)\n    \n    Call oSat.Open(oDM, oContext, oOptions, oDoc)\n    oDoc.SaveAs \"C:\\Temp\\Sat.ipt\", False\n    \nEnd Sub\n"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: design copy with MIRROR of Assembly\n                    ", "solution": [], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: how to Acesses API of Inventor\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: INVENTOR 2017 - iLOGIC  - Form problems - OBJECT REFERENCE\n                    ", "solution": [], "author": "JaneFan"},
{"created at": [], "solution Title": "\n                        Re: Add custom part in idw Partslist\n                    ", "solution": ["Public Sub InsertCustomPartinPartlist()\n\nDim oDoc As Document\nDim oSheet As Sheet\nDim oPartslist As PartsList\n\nSet oDoc = ThisApplication.ActiveDocument\nIf oDoc.DocumentType = kDrawingDocumentObject Then\n    Set oSheet = oDoc.ActiveSheet\n    oSheet.Activate\nSet oPartslist = oSheet.PartsLists(1)\n\nDim oPartslistRows As PartsListRows\nDim oCount As Long\noCount = oPartslist.PartsListRows.Count+1\noPartslist.PartsListRows.Add\noPartslist.PartsListRows.Item(oCount).Item(2).Value = 2 'Qty\noPartslist.PartsListRows.Item(oCount).Item(3).Value = \"Part Number\"\noPartslist.PartsListRows.Item(oCount).Item(4).Value = \"Description\"\n\n'You Can Add N number of columns you have\n\n\nElse\n    MsgBox \"The Selected document is not a drawing document please select a drawing document and continue\", vbOKOnly, \"Edit Column Name\"\n    Exit Sub\nEnd If\nEnd Sub"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Split multibody\n                    ", "solution": ["Dim m_inventorApp As Inventor.Application = Nothing\nm_inventorApp = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n\n\nDim oCmdMgr As CommandManager\noCmdMgr = m_inventorApp.CommandManager\n\nDim oFeatureObject As Object\noFeatureObject = oCmdMgr.Pick(SelectionFilterEnum.kPartFeatureFilter, \"Bitte Element auswhlen\")\nCall m_inventorApp.ActiveDocument.SelectSet.Select(oFeatureObject)\n\n\nMsgBox(oFeatureObject.name)\n        \n        Dim oPartDoc As PartDocument\n        oPartDoc = m_inventorApp.ActiveDocument\n\n\n\n        Dim oFeatures As PartFeatures = Nothing\n        Dim oFeature As PartFeature\n        For Each oFeature In oPartDoc.ComponentDefinition.Features\n            If oFeature.Name = oFeatureObject.name Then\n                oFeature.Suppressed = False\n            Else\n                oFeature.Suppressed = True\n            End If\n\n\n            'MsgBox(oFeature.Name)\n        Next\n        \n        Dim CurFileName As String\n        CurFileName = oPartDoc.FullFileName\n        ' Dim oPartDoc As PartDocument\n        oPartDoc = m_inventorApp.Documents.Add(DocumentTypeEnum.kPartDocumentObject, m_inventorApp.FileManager.GetTemplateFile(DocumentTypeEnum.kPartDocumentObject))\n\n        'Create a derived definition for the selected part\n        Dim oDerivedPartDef As DerivedPartUniformScaleDef\n        oDerivedPartDef = oPartDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents.CreateUniformScaleDef(CurFileName)\n\n        ' set the scale to use.\n        oDerivedPartDef.ScaleFactor = 1\n\n        'define the mirror plane\n        'kDerivedPartMirrorPlaneXY = 27393\n        'kDerivedPartMirrorPlaneYZ = 27394\n        'kDerivedPartMirrorPlaneXZ = 27395\n        'oDerivedPartDef.MirrorPlane = 27393\n\n        ' Create the derived part.\n        oPartDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents.Add(oDerivedPartDef)"], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: Suggestion For Inventor Parameter API Change\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Access AutoCAD Electrical catalog data with iLogic in Inventor drawing\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Edit Flat Pattern Before Export\n                    ", "solution": ["Sub AddCircles()\n\nDim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\n\nDim oDef As SheetMetalComponentDefinition\nSet oDef = oDoc.ComponentDefinition\n\nDim oFlatPattern As FlatPattern\nSet oFlatPattern = oDef.FlatPattern\n\noFlatPattern.Edit\n\nDim oFace As Face\nSet oFace = ThisApplication.CommandManager.Pick(kPartFacePlanarFilter, \"Select a planar face\")\n\nDim oSketch As Sketch\nSet oSketch = oFlatPattern.Sketches.Add(oFace)\n\noSketch.Edit\n\nDim oTopFaceBendUpEdges As Edges\nSet oTopFaceBendUpEdges = oFlatPattern.GetEdgesOfType(kBendUpFlatPatternEdge, True)\n\nDim oTg As TransientGeometry\nSet oTg = ThisApplication.TransientGeometry\n\nDim oEdge As Edge\nDim oProjectedEdge As SketchLine\n\nFor Each oEdge In oTopFaceBendUpEdges\n    Set oProjectedEdge = oSketch.AddByProjectingEntity(oEdge)\n    If oEdge.Geometry.StartPoint.Y > oEdge.Geometry.EndPoint.Y Then\n        Call oSketch.SketchCircles.AddByCenterRadius(oTg.CreatePoint2d(oProjectedEdge.Geometry.StartPoint.X, oProjectedEdge.Geometry.StartPoint.Y), 0.05)\n    Else\n        Call oSketch.SketchCircles.AddByCenterRadius(oTg.CreatePoint2d(oProjectedEdge.Geometry.EndPoint.X, oProjectedEdge.Geometry.EndPoint.Y), 0.05)\n    End If\nNext oEdge\n\noSketch.ExitEdit\n\nSet oProfile = oSketch.Profiles.AddForSolid\n\nDim oCutDefinition As CutDefinition\nSet oCutDefinition = oFlatPattern.Features.CutFeatures.CreateCutDefinition(oProfile)\n\nCall oCutDefinition.SetThroughAllExtent(kNegativeExtentDirection)\n\nDim oCutFeature As CutFeature\nSet oCutFeature = oFlatPattern.Features.CutFeatures.Add(oCutDefinition)\n   \nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Want to replace i logic rule via vba\n                    ", "solution": ["Public Sub RuniLogic()\n  Dim iLogicAuto As Object\n  Dim oDoc As Document\n\n  Set oDoc = ThisApplication.ActiveDocument\n  If oDoc Is Nothing Then\n    MsgBox \"Missing Inventor Document\"\n    Exit Sub\n  End If\n\n  Set iLogicAuto = GetiLogicAddin(ThisApplication)\n  If (iLogicAuto Is Nothing) Then Exit Sub\n  Dim oRule As Object\nSet oRule = iLogicAuto.getrule(oDoc, \"MKA_Rule0\")\noRule.Text = \"iproperties.value(\"\"Custom\"\", \"\"Air_wieght\"\")=Ceil((iproperties.mass+(21.156*5))*1.03)\"\nBeep\nEnd Sub\n \nFunction GetiLogicAddin(oApplication As Inventor.Application) As Object\nDim addIns As ApplicationAddIns\nSet addIns = oApplication.ApplicationAddIns\n'Find the add-in you are looking for\nDim addIn As ApplicationAddIn\nOn Error GoTo NotFound\nSet addIn = oApplication.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\nIf (addIn Is Nothing) Then Exit Function\naddIn.Activate\nSet GetiLogicAddin = addIn.Automation\nExit Function\nNotFound:\nEnd Function", "        'Set addIn = Nothing\n        'Set addIns = Nothing\n        'Set GetiLogicAddin = Nothing"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: How to get the same part number?\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Part List Find And Replace\n                    ", "solution": ["'Sub ReplaceTextInPartslist()\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\noSheet = oDrawDoc.ActiveSheet\n\nDim oPartsList As Partslist\noPartsList = oSheet.PartsLists(1)\n\nDim oRow As PartsListRow\nDim oColumn As PartsListColumn\n\nFor Each oRow In oPartsList.PartsListRows\nFor Each oColumn In oPartsList.PartsListColumns\nif instr(oRow.Item(oColumn).Value,\"GOST 8544 \")>0 Then\n    'oRow.Item(oColumn).Static = True\n    oRow.Item(oColumn).Value = Replace(oRow.Item(oColumn).Value,\"GOST 8544 \",\"\")\nelseif instr(oRow.Item(oColumn).Value,\"GOST 8545 \")>0 Then\n    'oRow.Item(oColumn).Static = True\n    oRow.Item(oColumn).Value = Replace(oRow.Item(oColumn).Value,\"GOST 8545 \",\"\")\nEnd If\nNext oColumn\nNext oRow\n\n'End Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Circular Pattern Error\n                    ", "solution": ["Dim partDoc As PartDocument\nSet partDoc = ThisApplication.ActiveDocument\n\nDim partDef As PartComponentDefinition\nSet partDef = partDoc.ComponentDefinition\n\nDim bodyCollection As ObjectCollection\nSet bodyCollection = ThisApplication.TransientObjects.CreateObjectCollection\n'Feature to be patterned\nCall bodyCollection.Add(partDef.Features(\"Extrusion5\"))\n'convert degrees to radians\noDeg = 10 * 0.0174532925\n'create pattern'....CircularPatternFeatures.Add(Features in Pattern, Axis, NaturalAxisDirection, Count, Angle, FitWithinAngle)\nCall partDef.Features.CircularPatternFeatures.Add(bodyCollection, _\npartDef.WorkAxes.Item(3), True, 2, oDeg, True, ", "kIdenticalCompute", ")"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: iLogic Program to add Custom Symbols\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\noSheet = oDrawDoc.ActiveSheet\n\nDim oTriangleWalksDef As SketchedSymbolDefinition\noTriangleWalksDef = oDrawDoc.SketchedSymbolDefinitions.Item(\"Triangle Walks\")\n            \nDim oTG As TransientGeometry\noTG = ThisApplication.TransientGeometry\n            \nDim dblStartPointX, dblStartPointY As Double\ndblStartPointX = 1.5\ndblStartPointY = oSheet.Height - 1.5\n\nDim strLetter As String\nstrLetter = InputBox(\"Provide Letter.\", \"Letter\", , 400, 400)\n\nDim iNumber As Integer\niNumber = InputBox(\"Provide Number.\", \"Number\", , 400, 400)\n\nFor iNumber = 1 To iNumber\nDim sPromptStrings(1) As String\nsPromptStrings(0) = strLetter\nsPromptStrings(1) = iNumber\n\nDim oSketchedSymbol As SketchedSymbol\noSketchedSymbol = oSheet.SketchedSymbols.Add(oTriangleWalksDef, oTG.CreatePoint2d(dblStartPointX, dblStartPointY), 0, 1, sPromptStrings)\noSketchedSymbol.Static = True\ndblStartPointY = dblStartPointY - 1\nNext iNumber"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Centralize Dimension Text\n                    ", "solution": [" ", "'", " Set a reference to the active drawing document", "\n    ", "    Dim odoc As Document", "    odoc = ThisApplication.ActiveDocument\n\n\n    ", "'", " Set a reference to the active sheet", "\n    ", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n     \n    For Each oSheet in oDoc.Sheets\n    ", "Dim", " ", "oDrawingDim", " ", "As", " ", "DrawingDimension", "\n\n    ", "'", " Iterate over all dimensions in the drawing and", "\n    ", "'", " center them if they are linear or angular.", "\n\n    ", "For", " ", "Each", " ", "oDrawingDim", " ", "In", " ", "oSheet", ".", "DrawingDimensions", "\n        ", "If", " ", "TypeOf", " ", "oDrawingDim", " ", "Is", " ", "LinearGeneralDimension", " ", "Or", " ", "_", "\n           ", "TypeOf", " ", "oDrawingDim", " ", "Is", " ", "AngularGeneralDimension", " ", "Then", "\n             ", "oDrawingDim", ".", "CenterText", "\n        ", "End", " ", "If", "\n    ", "Next", "    Next"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: Export drawing to pdf, dxf and model to stp\n                    ", "solution": ["Private Sub Export_OnExecute(Context As NameValueMap) Handles Export.OnExecute\n            Try\n                Dim PDFAddIn As TranslatorAddIn\n                PDFAddIn = InvApp.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n                Dim DWFAddIn As TranslatorAddIn\n                DWFAddIn = InvApp.ApplicationAddIns.ItemById(\"{0AC6FD95-2F4D-42CE-8BE0-8AEA580399E4}\")\n                Dim DWGAddIn As TranslatorAddIn\n                DWGAddIn = InvApp.ApplicationAddIns.ItemById(\"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\")\n                Dim IGESAddin As TranslatorAddIn\n                IGESAddin = InvApp.ApplicationAddIns.ItemById(\"{90AF7F44-0C01-11D5-8E83-0010B541CD80}\")\n                Dim STEPAddin As TranslatorAddIn\n                STEPAddin = InvApp.ApplicationAddIns.ItemById(\"{90AF7F40-0C01-11D5-8E83-0010B541CD80}\")\n\n                Dim oDocument As Document = InvApp.ActiveDocument\n                Dim strDocumentPath As String = Replace(Replace(oDocument.FullFileName, \".idw\", \"\"), \".iam\", \"\")\n\n                Dim oContext As TranslationContext = InvApp.TransientObjects.CreateTranslationContext\n                oContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n                Dim oOptions As NameValueMap = InvApp.TransientObjects.CreateNameValueMap\n                Dim oDataMedium As DataMedium = InvApp.TransientObjects.CreateDataMedium\n\n                'Bestaande bestanden die geen idw zijn verwijderen\n                Dim fileEntries As String() = Directory.GetFiles(InvApp.DesignProjectManager.ActiveDesignProject.WorkspacePath & \"\\2D\")\n                Dim fileName As String\n                For Each fileName In fileEntries\n                    If InStr(fileName, \".idw\") = 0 Then\n                        IO.File.Delete(fileName)\n                    End If\n                Next fileName\n\n                'Exporteren\n                If DWFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n                    oOptions.Value(\"Launch_Viewer\") = 0\n                    If TypeOf oDocument Is DrawingDocument Then\n                        'Export 2D DWF\n                        oOptions.Value(\"Publish_All_Sheets\") = 1\n                        oOptions.Value(\"Publish_3D_Models\") = 1\n                        oOptions.Value(\"Enable_Measure\") = 1\n                        oOptions.Value(\"Enable_Printing\") = 1\n                        oOptions.Value(\"Enable_Markup_Edits\") = 1\n                        oOptions.Value(\"Include_Sheet_Tables\") = 1\n                        oOptions.Value(\"Publish_Component_Props\") = 1\n                        oOptions.Value(\"Publish_Mass_Props\") = 1\n                        oDataMedium.FileName = strDocumentPath & \".dwf\"\n                        Call DWFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n                    End If\n                End If\n                'Export DWG\n                If DWGAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n                    oOptions.Value(\"Export_Acad_IniFile\") = \"C:\\Export_Acad_IniFile.ini\"\n                End If\n                oDataMedium.FileName = strDocumentPath & \".dwg\"\n                Call DWGAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n                'Export PDF\n                If PDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n                    oOptions.Value(\"All_Color_AS_Black\") = 0\n                    oOptions.Value(\"Vector_Resolution\") = 400\n                    oOptions.Value(\"Sheet_Range\") = PrintRangeEnum.kPrintAllSheets\n                End If\n                oDataMedium.FileName = strDocumentPath & \".pdf\"\n                Call PDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n                'Export IGES\n                If IGESAddin.HasSaveCopyAsOptions(InvApp.ActiveDocument, oContext, oOptions) Then\n                    oOptions.Value(\"GeometryType\") = 1\n                End If\n                oDataMedium.FileName = strDocumentPath & \".igs\"\n                Call IGESAddin.SaveCopyAs(InvApp.ActiveDocument, oContext, oOptions, oDataMedium)\n                'Export STEP\n                If STEPAddin.HasSaveCopyAsOptions(InvApp.ActiveDocument, oContext, oOptions) Then\n                    oOptions.Value(\"ApplicationProtocolType\") = 3\n                End If\n                oDataMedium.FileName = strDocumentPath & \".stp\"\n                Call STEPAddin.SaveCopyAs(InvApp.ActiveDocument, oContext, oOptions, oDataMedium)\n                'Export 3D DWF\n                strDocumentPath = Replace(oDocument.FullFileName, \"2D.idw\", \"3D.dwf\")\n                'MessageBox.Show(strDocumentPath)\n                oDocument = InvApp.Documents.Open(InvApp.DesignProjectManager.ActiveDesignProject.WorkspacePath & \"\\Hoofdsamenstelling 3D.iam\")\n                oDataMedium.FileName = strDocumentPath\n                Call DWFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n                oDocument.Close(True)\n\n            Catch ex As Exception\n                MessageBox.Show(ex.ToString)\n            End Try\n        End Sub", "Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim oRefDoc As Document\nFor Each oRefDoc In oDrawDoc.ReferencedDocuments\nIf oRefDoc.DocumentType = kPartDocumentObject Then\nCall MsgBox(\"it's a part\" & vbCr & oRefDoc.FullDocumentName)\nElseIf oRefDoc.DocumentType = kAssemblyDocumentObject Then\nCall MsgBox(\"it's an assembly\" & vbCr & oRefDoc.FullDocumentName)\nEnd If\nNext oRefDoc"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Using Inventor Vault with files in server\n                    ", "solution": [], "author": "TravisNave"},
{"created at": [], "solution Title": "\n                        Re: iLogic to supress and unsupress parts within subassemblies\n                    ", "solution": ["Component.IsActive(MakePath(\"SubAssembly_A:1\", \"Part:1\")) = \"True\"", "Component.IsActive(MakePath(\"SubAssembly_A:1\", \"SubAssembly_B:1\", \"Part:1\")) = \"True\""], "author": "dean.morrison"},
{"created at": [], "solution Title": "\n                        Re: how to select intersection area (profile) of 2 circles using API\n                    ", "solution": ["Public Sub CircleIntersectSample()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n    \n    Dim sketch As PlanarSketch\n    Set sketch = partDef.sketches.Add(partDef.WorkPlanes.Item(3), False)\n    \n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    ' Draw the two circles.\n    Dim circ1 As SketchCircle\n    Set circ1 = sketch.SketchCircles.AddByCenterRadius(tg.CreatePoint2d(6, 0), 8)\n    Dim circ2 As SketchCircle\n    Set circ2 = sketch.SketchCircles.AddByCenterRadius(tg.CreatePoint2d(-5, 0), 7)\n    \n    ' Temporarily ground the circles so they don't move as the intersections are added.\n    Dim ground1 As GroundConstraint\n    Set ground1 = sketch.GeometricConstraints.AddGround(circ1)\n    Dim ground2 As GroundConstraint\n    Set ground2 = sketch.GeometricConstraints.AddGround(circ2)\n    \n    \n    ' Add intersection points so the intersections are considered in the profile creation.\n    Dim skPnt As SketchPoint\n    Set skPnt = sketch.SketchPoints.Add(tg.CreatePoint2d(0, 4))\n    Call sketch.GeometricConstraints.AddCoincident(skPnt, circ1)\n    Call sketch.GeometricConstraints.AddCoincident(skPnt, circ2)\n    \n    Set skPnt = sketch.SketchPoints.Add(tg.CreatePoint2d(0, -4))\n    Call sketch.GeometricConstraints.AddCoincident(skPnt, circ1)\n    Call sketch.GeometricConstraints.AddCoincident(skPnt, circ2)\n    \n    ' Delete the grounds.\n    ground1.Delete\n    ground2.Delete\n    \n    Dim prof As Profile\n    Set prof = sketch.Profiles.AddForSolid()\n    \n    ' Find the union piece of the two circles by looking\n    ' for a path that contains two arcs whose sweep is less\n    ' than 180 degrees.\n    Dim pi As Double\n    pi = Atn(1) * 4\n    Dim path As ProfilePath\n    For Each path In prof\n        Dim arc1 As Arc2d\n        Set arc1 = path.Item(1).curve\n        If arc1.SweepAngle < pi Then\n            Dim arc2 As Arc2d\n            Set arc2 = path.Item(2).curve\n            If arc2.SweepAngle < pi Then\n                path.AddsMaterial = True\n            Else\n                path.AddsMaterial = False\n            End If\n        Else\n            path.AddsMaterial = False\n        End If\n    Next\n    \n    Dim extDef As ExtrudeDefinition\n    Set extDef = partDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(prof, kNewBodyOperation)\n    Call extDef.SetDistanceExtent(5, kPositiveExtentDirection)\n    Dim ext As ExtrudeFeature\n    Set ext = partDef.Features.ExtrudeFeatures.Add(extDef)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: ALIGN & Centralize Dimensions for All Drawing Sheets\n                    ", "solution": ["Dim oDrawDoc as drawingdocument = ThisDrawing.Document\nDim oSheet As sheet \nFor Each oSheet In oDrawDoc.sheets\n'Place your code to align dimensions here\n'maybe this line is also needed, did not test it\nActiveSheet = ThisDrawing.Sheet(osheet.Name)\nNext osheet"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Keep old occurrence name with Component.Replace\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Glitch when using SketchLines.AddByTwoPoints\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Split Custom iProperty every 30 characters\n                    ", "solution": ["Sub Main()\n    Dim pieces() As String = BreakString(iProperties.Value(\"Custom\", \"TF BOM\"), 30)\n\t\n    Dim count As Integer = 1\n    For Each piece As String in pieces\n        iProperties.Value(\"Custom\", \"PK Extended Item Line \" & count) = piece\n        count += 1\n    Next\nEnd Sub\n\n\nPrivate Function BreakString(Input As String, maxChars As Integer) As String()\n    Dim pieces() As String = Input.Split(\" \")\n    Dim result() As String\n    ReDim result(200)\n\n    Dim resultCount As Integer = 0\n    result(resultCount) = \"\"\n    For Each piece As String In pieces\n        If piece.Length + result(resultCount).Length < maxChars Then\n            If result(resultCount) = \"\" Then\n                result(resultCount) = piece\n            Else\n                result(resultCount) &= \" \" & piece\n            End If\n        Else\n            resultCount += 1\n            result(resultCount) = piece\n        End If\n    Next\n\n    ReDim Preserve result(resultCount)\n    Return result\nEnd Function\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic Script to check if part in drawing has external rule\n                    ", "solution": ["Dim docFile As Document\nIf ThisDoc.ModelDocument IsNot Nothing Then\n\tdocFile = ThisDoc.ModelDocument\nElse\n\tReturn\nEnd If\n\n'Check if part has external iLogic rule named Material_Part or Material_Assembly\nDim iLogicFound = False\nDim iLogicE As propertyset\n\nTry\n\tiLogicE = docFile.PropertySets.Item(\"{2C540830-0723-455E-A8E2-891722EB4C3E}\")\n\tFor i As Integer = 1 To ilogicE.count\n\t\tIf (InStr(ilogicE.item(i).Value,\"Material_Part\")) Or (InStr(iLogicE.item(i).Value,\"Material_Assembly\")) Then iLogicFound = True\n\tNext\nCatch\n\t'No iLogic I guess\nEnd Try", "MsgBox(\"Does part/assembly have a matching external iLogic rule. \" & iLogicFound)"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Going Nuts: Custom Content Center and Design Accelerator\n                    ", "solution": [], "author": "rmalasics"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule will not run on another PC\n                    ", "solution": [], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Checking for component in assembly\n                    ", "solution": ["Set oDoc = ThisApplication.ActiveDocument", "Public Sub Place_Part()\n\nDim oApp As Application\nSet oApp = ThisApplication\n\n' if active document isn't an assembly  then exit\nIf Not TypeOf oApp.ActiveDocument Is AssemblyDocument Then Exit Sub\n\nDim oDoc As AssemblyDocument\nSet oDoc = oApp.ActiveDocument\n\n' define filepath\nDim sFilePath As String\nsFilePath = \"N:\\Mechpart\\TLONG\\Reference Materials\\C15.ipt\"\n\nDim oOccs As ComponentOccurrences\nSet oOccs = oDoc.ComponentDefinition.Occurrences\n\n' Set a reference to the transient geometry object.\nDim oTG As TransientGeometry\nSet oTG = oApp.TransientGeometry\n\n' Create a matrix.  A new matrix is initialized with an identity matrix.\nDim oMatrix As Matrix\nSet oMatrix = oTG.CreateMatrix\n\n' check if file already exists in assembly\nIf CompExist(oDoc, sFilePath) Then\n    ans = MsgBox(\"Component already exists within assembly. Place component anyway?\", vbYesNo)\n    \n    If ans = vbYes Then\n        Call oOccs.Add(sFilePath, oMatrix)\n    Else\n        Exit Sub\n    End If\n\nElse\n    Call oOccs.Add(sFilePath, oMatrix)\nEnd If\n    \nEnd Sub", "Function CompExist(ByRef oAssy As Inventor.AssemblyDocument, sFilePath As String) As Boolean\n    \n    Dim oOcc As ComponentOccurrence\n\n    Dim oCompDef As AssemblyComponentDefinition\n    Set oCompDef = oAssy.ComponentDefinition\n    \n    ' Iterate through all of the occurrence in this collection.  This\n    ' represents the occurrences at the top level of an assembly.\n    For Each oOcc In oCompDef.Occurrences\n        ' get filepath of occurrence\n        sOccFilePath = oOcc.Definition.Document.FullFileName\n        If sOccFilePath = sFilePath Then\n            CompExist = True\n            Exit Function\n        End If\n    Next oOcc\n    \nEnd Function\u00a0\u00a0\u00a0"], "author": "foxrid3r"},
{"created at": [], "solution Title": "\n                        Re: Change User Parameter Custom Property with VBA\n                    ", "solution": ["Imports", "  ", "Inventor", ".", "UnitsTypeEnum", "\n\n\n", "Dim", " ", "oAssemblyDoc", " ", "As", " ", "Document", "\n", "oAssemblyDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n\n", "If", " ", "oAssemblyDoc", ".", "DocumentType", " ", "=", " ", "kAssemblyDocumentObject", " ", "Then", "\n\n    ", "Dim", " ", "oAssemblyCompDef", " ", "As", " ", "AssemblyComponentDefinition", "\n        ", "oAssemblyCompDef", " ", "=", " ", "oAssemblyDoc", ".", "ComponentDefinition", "\n        \n", "Dim", " ", "oParams", " ", "As", " ", "Parameters", "\n        ", "oParams", "=", "oAssemblyCompDef", ".", "Parameters", "\n                \n        ", "Dim", " ", "oUserParams", " ", "As", " ", "UserParameters", "\n        ", "oUserParams", "=", "oParams", ".", "UserParameters", "       \n        \n        ", "Dim", " ", "oAwesomeParameter", " ", "As", " ", "Parameter", "                     \n                    ", "Try", "\n            ", "otester", " ", "=", " ", "oUserParams", ".", "Item", "(", "\"", "PK_Extended_Item_Description", "\"", ")", "\n            ", "Catch", "\n", "oInsulationType", "=", "oUserParams", ".", "AddByValue", "(", "\"", "PK_Extended_Item_Description", "\"", ", ", "\"", "General", "\"", ", ", "kTextUnits", ")", " \n", "MultiValue", ".", "SetList", "(", "\"", "PK_Extended_Item_Description", "\"", ", ", "\"", "Manufacturing", "\"", ", ", "\"", "Purchasing", "\"", ", ", "\"", "General", "\"", ", ", "\"", "Customer Order", "\"", ", ", "\"", "Phantom", "\"", ")", "\n            ", "End", " ", "Try", "\n            ", "End", " ", "If", "\n\n", "Parameter", ".", "Param", "(", "\"", "PK_Extended_Item_Description", "\"", ")", ".", "ExposedAsProperty", " ", "=", " ", "False", "\n", "Parameter", ".", "Param", "(", "\"", "PK_Extended_Item_Description", "\"", ")", ".", "IsKey", " ", "=", " ", "False", "\n", "Public Sub SetParameterFormatToSixteenthsFractional()\n\n    'Get the active assembly document.\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n\n    'Iterate through all of the documents referenced by the assembly.\n    Dim oDoc As Document\n    For Each oDoc In oAsmDoc.AllReferencedDocuments\n    \n        'Check to see if this is a part.\n        If oDoc.DocumentType = kPartDocumentObject Then\n        \n            Debug.Print oDoc.FullFileName\n        \n            Dim oPartDoc As PartDocument\n            Set oPartDoc = oDoc\n            \n            Dim oUserParams As UserParameters\n            Set oUserParams = oPartDoc.ComponentDefinition.Parameters.UserParameters\n            \n            'Check to see if the part document contains user parameters.\n            If oUserParams.Count > 0 Then\n            \n                Dim oUserParam As UserParameter\n                \n                'Loop through each user paramter.\n                For Each oUserParam In oUserParams\n                \n                    'look for user parameter G_L.\n                    If oUserParam.Name = \"G_L\" Then\n                    \n                        Debug.Print oUserParam.Name\n                        Set oUserParam = oUserParams.Item(\"G_L\")\n                        oUserParam.CustomPropertyFormat.Precision = kSixteenthsFractionalLengthPrecision\n                       \n                    End If\n    \n                Next oUserParam\n                \n            End If\n            \n        End If\n        \n    Next oDoc\n    \nEnd Sub\n\n"], "author": "jddickson"},
{"created at": [], "solution Title": "\n                        Re: How to create multi insert in API/\n                    ", "solution": ["Public Sub InsertConstraint()\n    ", "' Set a reference to the assembly component definintion.", "\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n    \n    ", "' Set a reference to the select set.", "\n    Dim oSelectSet As SelectSet\n    Set oSelectSet = ThisApplication.ActiveDocument.SelectSet\n    \n    ", "' Validate the correct data is in the select set.", "\n    If oSelectSet.Count  2 Then\n        MsgBox \"You must select the two circular edges for the insert.\"\n        Exit Sub\n    End If\n\n    If Not TypeOf oSelectSet.Item(1) Is Edge Or Not TypeOf oSelectSet.Item(2) Is Edge Then\n        MsgBox \"You must select the two circular edges for the insert.\"\n        Exit Sub\n    End If\n\n    ", "' Get the two edges from the select set.", "\n    Dim oEdge1 As Edge\n    Dim oEdge2 As Edge\n    Set oEdge1 = oSelectSet.Item(1)\n    Set oEdge2 = oSelectSet.Item(2)\n \n    ", "' Create the insert constraint between the parts.", "\n    Dim oInsert As InsertConstraint\n    Set oInsert = oAsmCompDef.Constraints.AddInsertConstraint(oEdge1, oEdge2, True, 0)\nEnd Sub"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Poor PDF quality using PDF Translator AddIn\n                    ", "solution": ["Public Sub PublishPDF()\n    ' Get the PDF translator Add-In.\n    Dim PDFAddIn As TranslatorAddIn\n    Set PDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\n    'Set a reference to the active document (the document to be published).\n    Dim oDocument As Document\n    Set oDocument = ThisApplication.ActiveDocument\n\n    Dim oContext As TranslationContext\n    Set oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = kFileBrowseIOMechanism\n\n    ' Create a NameValueMap object\n    Dim oOptions As NameValueMap\n    Set oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n    ' Create a DataMedium object\n    Dim oDataMedium As DataMedium\n    Set oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n    ' Check whether the translator has 'SaveCopyAs' options\n    If PDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\n        ' Options for drawings...\n    oOptions.Value(\"Sheet_Range\") = PrintRangeEnum.kPrintAllSheets\n    oOptions.Value(\"All_Color_AS_Black\") = 0\n    oOptions.Value(\"Remove_Line_Weights\") = 1\n       \n        'oOptions.Value(\"Remove_Line_Weights\") = 0\n        'oOptions.Value(\"Vector_Resolution\") = 400\n        'oOptions.Value(\"Sheet_Range\") = kPrintAllSheets\n        'oOptions.Value(\"Custom_Begin_Sheet\") = 2\n        'oOptions.Value(\"Custom_End_Sheet\") = 4\n    End If\n\n    'Set the destination file name\n    oDataMedium.FileName = \"c:\\temp\\test.pdf\"\n\n    'Publish document.\n    Call PDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: External Rule referencing part parameters\n                    ", "solution": [], "author": "Frederic007"},
{"created at": [], "solution Title": "\n                        Re: ilogic to vb.net help\n                    ", "solution": ["Private Sub Button7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button7.Click\n'Modified by MechMachineMan to include built in excel functions as the app actually gets connected to.\n\n   Dim xlApp As Excel.Application\n   Dim xlWorkBook As Excel.Workbook\n   Dim xlWorkSheet As Excel.Worksheet\n   Dim RowStart As Integer = 1\n   Dim oRow As Integer\n   Dim oAPopulatedCOLUMN As Integer\n   ", "   oAPopulatedCOLUMN = 1 'Set this value to correspond to a column that is full with data. This will be used to find the last row instantly.\n   xlApp = New Excel.Application\n   xlApp.Visible = False\n   xlApp.DisplayAlerts = False", "Try\n   xlWorkBook = xlApp.Workbooks.Open(TextBox1.Text)", "\n   ' The workbook will only work for sheet 1. alternative line for active sheet is below:\n   ' xlWorksheet = xlWorkBook.ActiveSheet\n   xlWorkSheet = xlWorkBook.Worksheets(\"Sheet1\")", "\n   oRowEnd = xlWorksheet.Cells(xlWorksheet.Rows.Count, oAPopulatedCOLUMN).End(XlDirection.xlUp).Row\n   For oRow = RowStart To RowEnd\n      'check if the cell value matches the search string.\n      If xlWorkSheet.Cells(oRow, 1).value = (TextBox2.Text) Then\n         TextBox12.Text = xlWorkSheet.Cells(oRow, 2).Value\n         TextBox7.Text = xlWorkSheet.Cells(oRow, 3).Value\n      End If\n   Next 'oRow\nCatch", "   MsgBox(\"Error in excel features!\")", "End try", "\n   xlApp.Visible = True\n   xlApp.DisplayAlerts = True", "End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Maximize document Window\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Component Placement via iLogic & Form to Drawings\n                    ", "solution": ["iLogicForm", ".", "Show", "(", "\"", "My Form", "\"", ")", "trigger", " ", "=", " ", "iTrigger0", "\n", "iLogicForm", ".", "Show", "(", "\"", "My Form", "\"", ")"], "author": "jmfowler1996"},
{"created at": [], "solution Title": "\n                        Re: Use iLogic to Format Model Parameters\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Part Visiblity in all levels\n                    ", "solution": ["Sub HideAllSelectedOccurences()\nDim oCommandMgr As CommandManager\nSet oCommandMgr = ThisApplication.CommandManager\n\nDim oAsmDoc As AssemblyDocument\nSet oAsmDoc = ThisApplication.ActiveDocument", "\nDim oAsmDef As AssemblyComponentDefinition\nSet oAsmDef = oAsmDoc.ComponentDefinition\n\nDim oOcc As ComponentOccurrence\nSet oOcc = oCommandMgr.Pick(kAssemblyLeafOccurrenceFilter, \"Pick occurrence to hide\")\n\nDim strFileName As String\nstrFileName = oOcc.ReferencedDocumentDescriptor.FullDocumentName\n\nDim oLeafOccs As ComponentOccurrencesEnumerator\nSet oLeafOccs = oAsmDef.Occurrences.AllLeafOccurrences\n    \nDim oOcc1 As ComponentOccurrence", "\nOn Error Resume Next\nFor Each oOcc1 In oLeafOccs\nIf oOcc1.ReferencedDocumentDescriptor.FullDocumentName = strFileName Then\n    oOcc1.Visible = False\nEnd If\nNext oOcc1\nEnd Sub\u00a0"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Replace part different method\n                    ", "solution": ["Sub test()\n Dim oAsmDoc As AssemblyDocument\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n\n    ' Prompt user to pick an occurrence\n    Dim oOcc As ComponentOccurrence\n    Set oOcc = ThisApplication.CommandManager.Pick(kAssemblyOccurrenceFilter, \"Pick occurrence to replace\")\n    Dim oOcc1 As ComponentOccurrence\n    Set oOcc1 = ThisApplication.CommandManager.Pick(kAssemblyOccurrenceFilter, \"Pick occurrence to replace\")\n\n   Call oOcc.Replace(oOcc1.Definition.Document.FullFileName, False)\n\n\nEnd Sub"], "author": "srinivas.kasili"},
{"created at": [], "solution Title": "\n                        Re: How Can I Make This Neat? VBA code\n                    ", "solution": [], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Betreff: Sketch profile control\n                    ", "solution": ["// create sketch elements", "  PlanarSketch oSketch1 = oDef.Sketches.Add(oDef.WorkPlanes[3]);", "  SketchCircle oCircle1 = oSketch1.SketchCircles.AddByCenterRadius(oTG.CreatePoint2d(0, 0), (Kodu / 2 - 60) / FaktorCmMm); //outer circle", "  SketchCircle oCircle2 = oSketch1.SketchCircles.AddByCenterRadius(oCircle1.CenterSketchPoint, (Kodu / 2 - 60 - 8) / FaktorCmMm); //inner circle", "//Set bool Combine \"True\", the resulting profile will contain 2 profile paths, \n//and the profile path corresponding to the inner circle will have its AddsMaterial flag set to False\n  Profile oProfile = oSketch1.Profiles.AddForSolid(true);", "// create a circular ring feature", " ExtrudeDefinition oExtrudeDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kJoinOperation);", " oExtrudeDef.SetDistanceExtent(((MaxSth/FaktorCmMm) + MatStBodenplatte), PartFeatureExtentDirectionEnum.kPositiveExtentDirection);", " ExtrudeFeature oExtrudeF = oDef.Features.ExtrudeFeatures.Add(oExtrudeDef); "], "author": "simon_jablonski"},
{"created at": [], "solution Title": "\n                        Re: collision - tapped holes and srews\n                    ", "solution": ["Sub Kollision_Pr\u00fcfen_Gesamt()\n    'On Error Resume Next\n\n    'Auf Bg zugreifen\n    Dim oApp As Inventor.Application\n    Set oApp = ThisApplication\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = oAsmDoc.ComponentDefinition\n    \n    Call oAsmDoc.BrowserPanes.ActivePane.TopNode.DoSelect\n\n    'Pos. 1 aktivieren\n    Call oAsmCompDef.RepresentationsManager.PositionalRepresentations.Item(1).Activate\n      \n    'Set erstellen\n    Dim oAllOccurrences As ObjectCollection\n    Set oAllOccurrences = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    'Nicht sichtbare entfernen\n    Dim oOcc As ComponentOccurrence\n    For Each oOcc In oAsmCompDef.Occurrences\n        If oOcc.Visible = True Then\n            Call oAllOccurrences.Add(oOcc)\n        End If\n    Next\n    \n    'Kollisionen berechnen\n    Dim oResults As InterferenceResults\n    Set oResults = oAsmCompDef.AnalyzeInterference(oAllOccurrences)\n    \n    'Bodys erstellen\n    Dim oResult As InterferenceResult\n    Dim oTotalBodyRed As SurfaceBody\n    Dim oTotalBodyGreen As SurfaceBody\n    Dim oTotalBodyThreadLength As SurfaceBody\n    For Each oResult In oResults\n        Dim oHelpBody As SurfaceBody\n        Set oHelpBody = Nothing\n        Dim ThreadVorhandenLarge As Boolean\n        Dim ThreadVorhandenSmall As Boolean\n        ThreadVorhandenLarge = False\n        ThreadVorhandenSmall = False\n        Dim ThreadOffen As Boolean\n        ThreadOffen = True\n        Dim oCylinderFaceLarge As Face\n        Dim oCylinderFaceSmall As Face\n        Set oCylinderFaceLarge = Nothing\n        Set oCylinderFaceSmall = Nothing\n        Dim oCylinderLarge As Cylinder\n        Dim oCylinderSmall As Cylinder\n        Set oCylinderLarge = Nothing\n        Set oCylinderSmall = Nothing\n        \n        \n        'Bohrungsgr\u00f6\u00dfen:\n        Dim aussen_Arr\n        Dim kern_Arr\n        'Gewinde DIN M2.5-M30\n        aussen_Arr = Array(2.5, 3, 4, 5, 6, 8, 10, 12, 16, 20, 24, 30, 5, 6)\n        kern_Arr = Array(2.013, 2.459, 3.242, 4.134, 4.917, 6.647, 8.376, 10.106, 13.835, 17.294, 20.752, 26.211, 4.3, 4.9)\n        \n\n        'Fl\u00e4chen mit Bohrungsgr\u00f6\u00dfen herausfiltern\n        For i = 0 To UBound(aussen_Arr) Step 1\n            Dim oFace As Face\n            For Each oFace In oResult.InterferenceBody.Faces\n                If oFace.SurfaceType = kCylinderSurface And oResult.InterferenceBody.Faces.Count = 4 Then\n                    If Round(oFace.Geometry.Radius * 2 * 10, 5) = aussen_Arr(i) Then\n                        ThreadVorhandenLarge = True\n                        Set oCylinderFaceLarge = oFace\n                        Set oCylinderLarge = oFace.Geometry\n                    End If\n                    If Round(oFace.Geometry.Radius * 2 * 10, 5) = kern_Arr(i) Then\n                        ThreadVorhandenSmall = True\n                        Set oCylinderFaceSmall = oFace\n                        Set oCylinderSmall = oFace.Geometry\n                    End If\n                End If\n            Next\n            If ThreadVorhandenLarge = True And ThreadVorhandenSmall = True Then Exit For\n        Next\n        \n        \n        'Pr\u00fcfen, ob Kerndurchmesser beidseitig offen ist\n        \n        \n        \n        'Pr\u00fcfen, ob Bohrungen konzentrisch\n        Dim Clash As Boolean\n        Clash = True\n        If ThreadVorhandenLarge = True And ThreadVorhandenSmall = True Then\n            If Round(oCylinderLarge.BasePoint.DistanceTo(oCylinderSmall.BasePoint), 5) <> 0 Then\n                Dim oSlaintVector As Vector\n                Set oSlaintVector = oCylinderLarge.BasePoint.VectorTo(oCylinderSmall.BasePoint)\n                If oSlaintVector.IsParallelTo(oCylinderSmall.AxisVector.AsVector) Then\n                    Clash = False\n                End If\n            Else\n                Clash = False\n            End If\n        End If\n\n\n        Dim ThreadLengthClash As Boolean\n        ThreadLengthClash = False\n        'L\u00e4ngencheck durch Volumenpr\u00fcfung\n        If ThreadVorhandenLarge = True And ThreadVorhandenSmall = True And Clash = False Then\n            Dim VolumeLarge As Double\n            VolumeLarge = 4 * Atn(1) * ((oCylinderLarge.Radius) ^ 2 - (oCylinderSmall.Radius) ^ 2) * oCylinderLarge.Radius * 2 * 2\n            Dim VolumeSmall As Double\n            VolumeSmall = 4 * Atn(1) * ((oCylinderLarge.Radius) ^ 2 - (oCylinderSmall.Radius) ^ 2) * oCylinderLarge.Radius * 2\n            If oResult.Volume > VolumeLarge Or oResult.Volume < VolumeSmall Then\n                ThreadLengthClash = True\n            End If\n        End If\n        \n        \n        'Body hinzuf\u00fcgen\n        If Clash = True Then\n            If oTotalBodyRed Is Nothing Then\n                Set oTotalBodyRed = oResult.InterferenceBody\n            Else\n                Call ThisApplication.TransientBRep.DoBoolean(oTotalBodyRed, oResult.InterferenceBody, kBooleanTypeUnion)\n            End If\n        End If\n        If ThreadLengthClash = True And Clash = False Then\n            If oTotalBodyThreadLength Is Nothing Then\n                Set oTotalBodyThreadLength = oResult.InterferenceBody\n            Else\n                Call ThisApplication.TransientBRep.DoBoolean(oTotalBodyThreadLength, oResult.InterferenceBody, kBooleanTypeUnion)\n            End If\n        End If\n        If ThreadLengthClash = False And Clash = False Then\n            If oTotalBodyGreen Is Nothing Then\n                Set oTotalBodyGreen = oResult.InterferenceBody\n            Else\n                Call ThisApplication.TransientBRep.DoBoolean(oTotalBodyGreen, oResult.InterferenceBody, kBooleanTypeUnion)\n            End If\n        End If\n    Next\n    \n    \n    'Neues Teil erstellen (nicht sichtbar)\n    Dim oResultPartRed As PartDocument\n    If Not oTotalBodyRed Is Nothing Then\n        If oResultPartRed Is Nothing Then Set oResultPartRed = ThisApplication.Documents.Add(kPartDocumentObject, \"M:\\PDS2014\\Templates\\Norm.ipt\", False)\n        'Set oResultPart = ThisApplication.Documents.Add(kPartDocumentObject, ThisApplication.FileManager.GetTemplateFile(kPartDocumentObject), False)\n    End If\n    Dim oResultPartGreen As PartDocument\n    If Not oTotalBodyGreen Is Nothing Then\n        If oResultPartGreen Is Nothing Then Set oResultPartGreen = ThisApplication.Documents.Add(kPartDocumentObject, \"M:\\PDS2014\\Templates\\Norm.ipt\", False)\n        'Set oResultPart = ThisApplication.Documents.Add(kPartDocumentObject, ThisApplication.FileManager.GetTemplateFile(kPartDocumentObject), False)\n    End If\n    Dim oResultPartYellow As PartDocument\n    If Not oTotalBodyThreadLength Is Nothing Then\n        If oResultPartYellow Is Nothing Then Set oResultPartYellow = ThisApplication.Documents.Add(kPartDocumentObject, \"M:\\PDS2014\\Templates\\Norm.ipt\", False)\n        'Set oResultPart = ThisApplication.Documents.Add(kPartDocumentObject, ThisApplication.FileManager.GetTemplateFile(kPartDocumentObject), False)\n    End If\n\n\n    Dim oFeature As PartFeature\n    If Not oTotalBodyRed Is Nothing Then\n        Set oFeature = oResultPartRed.ComponentDefinition.Features.NonParametricBaseFeatures.Add(oTotalBodyRed)\n        oFeature.Name = \"TotalBodyRed\"\n    End If\n    If Not oTotalBodyGreen Is Nothing Then\n        Set oFeature = oResultPartGreen.ComponentDefinition.Features.NonParametricBaseFeatures.Add(oTotalBodyGreen)\n        oFeature.Name = \"TotalBodyGreen\"\n    End If\n    If Not oTotalBodyThreadLength Is Nothing Then\n        Set oFeature = oResultPartYellow.ComponentDefinition.Features.NonParametricBaseFeatures.Add(oTotalBodyThreadLength)\n        oFeature.Name = \"oTotalBodyThreadLength\"\n    End If\n\n\n    'Occurrence erstellen\n    Dim trans As Matrix\n    Set trans = ThisApplication.TransientGeometry.CreateMatrix\n    If Not oResultPartRed Is Nothing Then\n        Set oOcc = oAsmCompDef.Occurrences.AddByComponentDefinition(oResultPartRed.ComponentDefinition, trans)\n        Call oOcc.SetRenderStyle(kOverrideRenderStyle, oAsmDoc.RenderStyles.Item(\"ACAD-Rot\"))\n        oOcc.Name = \"Kollisionen\"\n    End If\n    If Not oResultPartGreen Is Nothing Then\n        Set oOcc = oAsmCompDef.Occurrences.AddByComponentDefinition(oResultPartGreen.ComponentDefinition, trans)\n        Call oOcc.SetRenderStyle(kOverrideRenderStyle, oAsmDoc.RenderStyles.Item(\"ACAD-Gr\u00fcn\"))\n        oOcc.Name = \"Gepr\u00fcft\"\n    End If\n    If Not oResultPartYellow Is Nothing Then\n        Set oOcc = oAsmCompDef.Occurrences.AddByComponentDefinition(oResultPartYellow.ComponentDefinition, trans)\n        Call oOcc.SetRenderStyle(kOverrideRenderStyle, oAsmDoc.RenderStyles.Item(\"ACAD-Gelb\"))\n        oOcc.Name = \"Gewinde zu kurz oder zu lang\"\n    End If\nEnd Sub"], "author": "dg2405"},
{"created at": [], "solution Title": "\n                        Re: Display Rule Name\n                    ", "solution": ["Trace", ".", "WriteLine", "(", "\"", "REORDER BOM", "\"", ", ", "\"", "iLogic", "\"", ")", " ", "'", "debug "], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Run Sheet Metal rule from Assembly Document\n                    ", "solution": ["Public Sub GetPartOccurrences()\n   On Error GoTo Err\n    ' Get the active assembly.\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n\n    ' Get the assembly component definition.\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = oAsmDoc.ComponentDefinition\n\n    ' Get all of the leaf occurrences of the assembly.\n    Dim oLeafOccs As ComponentOccurrencesEnumerator\n    Set oLeafOccs = oAsmDef.Occurrences.AllLeafOccurrences\n\n    ThisApplication.SilentOperation = True\n    \n    ' Iterate through the occurrences and print the name.\n    Dim oOcc As ComponentOccurrence\n    For Each oOcc In oLeafOccs\n        \n        Dim oDoc As PartDocument\n        Set oDoc = ThisApplication.Documents.Open(oOcc.ReferencedDocumentDescriptor.ReferencedFileDescriptor.FullFileName, False)\n        \n        If oDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n        Dim oCompDef As SheetMetalComponentDefinition\n        Set oCompDef = oDoc.ComponentDefinition\n        \n        If oCompDef.HasFlatPattern = False Then\n        oCompDef.Unfold\n        oCompDef.FlatPattern.ExitEdit\n        End If\n        Call oDoc.Close(False)\n        Else\n        Call oDoc.Close(True)\n        End If\n    Next oOcc\n\nThisApplication.SilentOperation = False\nExit Sub\nErr:\nCall MsgBox(Err.Description)\nThisApplication.SilentOperation = False\n    \nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Writing to Spreadsheet with a macro/VBA\n                    ", "solution": [], "author": "lynlaysaymo"},
{"created at": [], "solution Title": "\n                        Re: Creating a Function\n                    ", "solution": ["Sub Main\n\nCall Number()\n\nDim map As Inventor.NameValueMap \nmap = ThisApplication.TransientObjects.CreateNameValueMap()\n\nDim sString As String\nmap.Add(\"sString\", \"Hello World! : \" & oNumber)\n\niLogicVb.RunRule(\"Rule2\",map)\n\n\nMessageBox.Show(SharedVariable(\"Foo_Variable\"), \"iLogic Rule1\")\n\nEnd Sub\n\nDim oNumber As Integer\n\nFunction Number\n \noNumber = 12\n\nEnd Function", "Dim sArg as String\nsArg = RuleArguments(\"sString\")\nMessageBox.Show(sArg, \"iLogic Rule2\")\n\nDim sNonsense As String\nsNonsense = \"foo\"\n\nSharedVariable(\"Foo_Variable\") = sArg & \" \" & sNonsense\n\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Migrating/importing iLogic custom snippets to latese version of Inventor\n                    ", "solution": [], "author": "frank"},
{"created at": [], "solution Title": "\n                        Re: Inventor API Volume using VB.NET\n                    ", "solution": ["Dim massProps As MassProperties\nmassProps = partDoc.ComponentDefinition.MassProperties\n    \nDim uom As UnitsOfMeasure\nuom = partDoc.UnitsOfMeasure\n    \nDim defaultLength As String\ndefaultLength = uom.GetStringFromType(uom.LengthUnits)\ntxtvolume.Text = uom.GetStringFromValue(massProps.Volume, defaultLength & \"^3\")"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Parts Visibility - on / off in inventor assembly file\n                    ", "solution": ["Dim A27\nA27 = 4.5\n\nDim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument\n\nDim oAsmDef As ComponentDefinition\noAsmDef = oAsmDoc.ComponentDefinition\n\nDim oLeafOccs As ComponentOccurrencesEnumerator\noLeafOccs = oAsmDef.Occurrences.AllLeafOccurrences\n    \nDim oCompOcc As ComponentOccurrence\nFor Each oCompOcc In oLeafOccs\n    If oCompOcc.Name = \"Onderdeel 4:1\" Then\n        If A27 = 4.5 Then\n           oCompOcc.Visible = False\n        ElseIf A27 = 5 Then\n           oCompOcc.Visible = True\n        End If\n    End If\nNext"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: How to run a ilogic Code when BOM is accessed?\n                    ", "solution": ["'this line is the command trigger to create a hole in a part model", "ThisApplication.CommandManager.ControlDefinitions.Item(\"PartDMHoleCmd\") ", "'this line is the command trigger to create a hole in an assembly model", "ThisApplication.CommandManager.ControlDefinitions.Item(\"PartHoleClassicCmd\")"], "author": "sgwilliams"},
{"created at": [], "solution Title": "\n                        Re: component looking at assembly to reference\n                    ", "solution": [], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: Derived part density\n                    ", "solution": ["Public Sub UpdateDerivedAssembly()\nDim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\nDim oAss As AssemblyDocument\nSet oAss = oDoc.ReferencedDocuments(1)\nDebug.Print oAss.ComponentDefinition.MassProperties.Mass\nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Ilogic - change view label properties\n                    ", "solution": [], "author": "prakasht66"},
{"created at": [], "solution Title": "\n                        Re: Add Handler on Command Check Out\n                    ", "solution": ["  AddHandler VaultCheckOut.OnTerminateCommand, AddressOf VaultCheckOut_OnActivateCommand\n  AddHandler VaultCheckIn.OnActivateCommand, AddressOf VaultCheckIn_OnActivateCommand\n     \n    Private Sub VaultCheckOut_OnActivateCommand(ByVal CommandName As String, ByVal context As NameValueMap)\n        If CommandName = \"VaultCheckout\" Or CommandName = \"VaultCheckoutTop\" Then\n            DataOphalenIPT()\n        End If\n    End Sub", "\n    Private Sub VaultCheckIn_OnActivateCommand(ByVal CommandName As String, ByVal context As NameValueMap)\n        If CommandName = \"VaultCheckin\" Or CommandName = \"VaultCheckinTop\" Then\n            DataOphalenIPT()\n        End If\n    End Sub"], "author": "davdelomb"},
{"created at": [], "solution Title": "\n                        Re: surface to part creation\n                    ", "solution": ["Public Sub Main()\n    Dim partDoc As PartDocument = ThisApplication.ActiveDocument\n    \n    Dim partDef As PartComponentDefinition = partDoc.ComponentDefinition\n    \n    ' Define the directory to write the results.\n    Dim targetDir As String\n    targetDir = \"C:\\Temp\\ExportResult\\\"\n    \n    ' Iterate over any solids.\n    Dim count As Integer = 0\n    For Each solidBody As SurfaceBody In partDef.SurfaceBodies\n        count = count + 1\n        ThisApplication.StatusBarText = \"Processing solid \" & count & \" of \" & partDef.SurfaceBodies.count & \"...\"\n        CreateNewPart(targetDir & solidBody.Name & \".ipt\", solidBody)\n    Next\n    \n    ' Iterate over any surfaces.\n    count = 0\n    For Each workSurf As WorkSurface In partDef.WorkSurfaces\n        count = count + 1\n        ThisApplication.StatusBarText = \"Processing surface \" & count & \" of \" & partDef.WorkSurfaces.count & \"...\"\n        Dim surfBody As SurfaceBody = workSurf.SurfaceBodies.Item(1)\n\n        CreateNewPart(targetDir & surfBody.Name & \".ipt\", surfBody)\n    Next\n\n    ThisApplication.StatusBarText = \"Completed processing.\"\nEnd Sub\n\nPrivate Sub CreateNewPart(filename As String, bodyInput As SurfaceBody)\n    Dim newDoc As PartDocument\n    newDoc = ThisApplication.Documents.Add(DocumentTypeEnum.kPartDocumentObject, _\n\t\t\t ThisApplication.FileManager.GetTemplateFile(DocumentTypeEnum.kPartDocumentObject), False)\n    \n    Dim baseFeatures As NonParametricBaseFeatures\n    baseFeatures = newDoc.ComponentDefinition.Features.NonParametricBaseFeatures\n    \n    baseFeatures.Add(bodyInput)\n    \n    newDoc.SaveAs(filename, False)\n    newDoc.Close\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic Code - Find and Highlight Overridden Balloons\n                    ", "solution": ["'", " Set a reference to the active document.", "\n", "Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", "\n", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n \n", "'", "Define the drawing dims collection", "\n", "Dim", " ", "oBalloon", " ", "As", " ", "Balloon", "\n \n", "'", "Loop through all dimensions and set colors", "\n", "For", " ", "Each", " ", "oBalloon", " ", "In", " ", "oDoc", ".", "ActiveSheet", ".", "Balloons", "\n\n   ", "If", " ", "oBalloon", ".", "BalloonValueSets", "(", "1", ")", ".", "OverrideValue", " ", "<>", " ", "\"\"", " ", "And", " ", "oBalloon", ".", "BalloonValueSets", "(", "1", ")", ".", "OverrideValue", " ", "<>", " ", "oBalloon", ".", "BalloonValueSets", "(", "1", ")", ".", "ItemNumber", " ", "Then", "\n   ", "Info", " ", "=", " ", "(", "oBalloon", ".", "BalloonValueSets", "(", "1", ")", ".", "ItemNumber", " ", "&", " ", "\"", " overridden with", "\"", " ", "&", " ", "oBalloon", ".", "BalloonValueSets", "(", "1", ")", ".", "OverrideValue", ")", "\n\n    ", "Dim", " ", "booleanParam", " ", "as", " ", "Object", "\n    ", "booleanParam", " ", "=", " ", "InputRadioBox", "(", "Info", " , ", "_", "\n    ", "\"", "Fix Override", "\"", ", ", "\"", "Leave Override", "\"", ", ", "True", ", ", "Title", " :", "=", " ", "\"", "iLogic", "\"", ")", "\n\n    ", "If", " ", "booleanParam", " ", "=", " ", "True", " ", "Then", "\n       ", "oBalloon", ".", "BalloonValueSets", "(", "1", ")", ".", "OverrideValue", " ", "=", " ", "oBalloon", ".", "BalloonValueSets", "(", "1", ")", ".", "ItemNumber", "\n       ", "End", " ", "If", "\n   ", "End", " ", "If", "\n", "Next"], "author": "dean.morrison"},
{"created at": [], "solution Title": "\n                        Re: Use iLogic to Change Ord. Dimensions, General Dimensions & Thread / Hole\n                    ", "solution": [], "author": "Jason_Hunt"},
{"created at": [], "solution Title": "\n                        Re: Adding Parameters with iLogic\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Aggravating Disconnect Between a Parameter units string and UOM.GetTypeFromS\n                    ", "solution": ["Sub UnitTypeCheck()\n  Dim d As Document\n  Set d = ThisApplication.ActiveDocument\n  \n  Dim typeString As String\n  ' testing with kTextUnits, but kBooleanUnits has the same problem\n  typeString = d.UnitsOfMeasure.GetStringFromType(kTextUnits)\n  \n  Dim ue As UnitsTypeEnum\n  ' This will throw error\n  ue = d.UnitsOfMeasure.GetTypeFromString(typeString)\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: selected face should come parallel to display programatically.\n                    ", "solution": ["Sub LookAtSelectedFace()\n\n    Dim oDoc As document\n    Set oDoc = ThisApplication.ActiveDocument\n  \n    Dim oSelSet As SelectSet\n    Set oSelSet = oDoc.SelectSet\n    \n    Dim oFace As Face\n    Set oFace = ThisApplication.CommandManager.Pick(kPartFacePlanarFilter, \"Select a face.\")\n            \n    If oFace Is Nothing Then\n        Exit Sub\n    Else\n        Call oSelSet.Select(oFace)\n    End If\n    Dim oCommandMgr As CommandManager\n    Set oCommandMgr = ThisApplication.CommandManager\n\n    Dim oControlDef As ControlDefinition\n    Set oControlDef = oCommandMgr.ControlDefinitions.Item(\"AppLookAtCmd\")\n    \n    Call oControlDef.Execute\n    \nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Code to run only when form is open\n                    ", "solution": [], "author": "Nick.Steele.205"},
{"created at": [], "solution Title": "\n                        Re: BOM\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Marking Menu - Macro Display Name\n                    ", "solution": [], "author": "Jon.Dean"},
{"created at": [], "solution Title": "\n                        Re: Disable button when not AMxAssemblyEnvironment?\n                    ", "solution": [], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: Multi Body Process\n                    ", "solution": ["Public Sub FaceArea()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    Dim oCompDef As PartComponentDefinition\n    Set oCompDef = oDoc.ComponentDefinition\n    \n    Dim num As Long\n    Dim n As Long\n    num = oCompDef.SurfaceBodies.Count\n    For n = 1 To oCompDef.SurfaceBodies.Count\n        If oCompDef.SurfaceBodies.Item(n).Visible = True Then\n            \n            MsgBox \" Solid No   \" & n & \" of  \" & num & \" items. \"\n            \n            Dim FaceNo As Long\n            Dim AreaStore As Long\n            Dim FaceNoStore As Long\n            \n            'FaceNo = 0 'useless, since the following For initializes it\n            AreaStore = 0\n            FaceNoStore = 0\n            'For FaceNo = 1 To 6 'I got an error at 6 because one of the ExtrusionFeatures only got 5 Faces.\n            For FaceNo = 1 To oCompDef.SurfaceBodies.Item(n).Faces.Count\n                Dim oFace1 As Face\n                Set oFace1 = oCompDef.SurfaceBodies.Item(n).Faces.Item(FaceNo)\n                MsgBox \"Face area of  \" & FaceNo & \"  \" & oFace1.Evaluator.Area & \" cm^2\"\n                If oFace1.Evaluator.Area > AreaStore Then\n                    AreaStore = oFace1.Evaluator.Area\n                    FaceNoStore = FaceNo   'Puts number of face in store -FaceNoStore\n                End If\n            Next FaceNo\n            \n            MsgBox \" biggest face is number \" & FaceNoStore & \"  \" & FaceNoStore\n            MsgBox \"n  = \" & n\n            MsgBox \"Face number is    \" & FaceNoStore\n            \n            Dim oFace2 As Face\n            Set oFace2 = oCompDef.SurfaceBodies.Item(n).Faces.Item(FaceNoStore)\n            \n            MsgBox \"Face number is    \" & FaceNoStore\n            Dim oSketch1 As PlanarSketch\n            Set oSketch1 = oCompDef.Sketches.Add(oFace2, True)\n            Dim oProfile As Profile\n            Set oProfile = oSketch1.Profiles.AddForSolid\n            Dim oExtrude As ExtrudeFeature\n            Set oExtrude = oCompDef.Features.ExtrudeFeatures.AddByDistanceExtent(oProfile, 0.2, kNegativeExtentDirection, kCutOperation)\n            \n            Dim oSideFace1 As Face\n            Set oSideFace1 = oExtrude.EndFaces.Item(1)\n            \n            Dim oSketch3 As PlanarSketch\n            Set oSketch3 = oDoc.ComponentDefinition.Sketches.Add(oSideFace1, True)\n            Dim oProfile3 As Profile\n            Set oProfile3 = oSketch3.Profiles.AddForSolid\n            Set oExtrude = oDoc.ComponentDefinition.Features.ExtrudeFeatures.AddByDistanceExtent(oProfile3, 0.2, kPositiveExtentDirection, kNewBodyOperation)\n            \n        End If\n    Next\nEnd Sub\n"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Need help with iLogic code - Throws error\n                    ", "solution": ["oOptionsBOM", ".", "Value", "(", "\"", "ExportedColumns", "\"", ")", " ", "=", " ", "\"", "ITEM#;QTY;PART#;MATERIAL;DESCRIPTION;COMMENTS;COM CODE;TOTAL WEIGHT", "\""], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Automatic Drawing view Scale update through iLogic\n                    ", "solution": ["Dim oView As DrawingView\nFor Each oView In ThisDrawing.Document.ActiveSheet.DrawingViews\n\tIf oView.ScaleFromBase = True Then \n\t\tContinue For\n\tElse\n\t\t'get user input\n\t\tDim oScale As Double\n\t\toScale = InputBox(\"Enter a new scale for: \" _\n\t\t& vbLf & oView.Name, \"iLogic\", oView.Scale)\n\t\t'set scale\n\t\toView.Scale = oScale\n\tEnd If\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic/iProperty error\n                    ", "solution": ["'Checks To see If the following iProperties exist and creates them if necessary\n\n Dim FabProcess As String = \"FABRICATION PROCESS\"\n Dim Inspect As String = \"INSPECTION REQUIRED (Y/N)\"\n Dim finish As String = \"FINISH\"\n Dim merge As String = \"MERGE\"\n\ncustomPropertySet = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\")\n\nDim myProp As Inventor.Property\n\nTry\n\tmyProp = customPropertySet.Item(FabProcess)\n\tmyProp.Value = \"WB_FabProcess\"\nCatch\n\tmyProp = customPropertySet.Add(\"\", FabProcess)\nEnd Try\n\nTry\n\tmyProp = customPropertySet.Item(Inspect)\n\tmyProp.Value = \"WB_InSpect\"\nCatch\n\tmyProp = customPropertySet.Add(\"\", Inspect)\nEnd Try\n\nTry\n  myProp = customPropertySet.Item(merge)\n  myProp.Value = \"WB_Merge\"\nCatch\n\tmyProp = customPropertySet.Add(\"\", merge)\nEnd Try\n\nTry\n\tmyProp = customPropertySet.Item(finish)\n\tmyProp.Value = \"WB_finish\"\nCatch\n\tmyProp = customPropertySet.Add(\"\", finish)\nEnd Try\n\n'output the custom iproperties and update the file\nRuleParametersOutput()\nInventorVb.DocumentUpdate()"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Import SketchBlock in part from templatefile\n                    ", "solution": ["Dim targetDoc As PartDocument\ntargetDoc = ThisApplication.ActiveDocument\n\nDim sourceDoc As PartDocument\nsourceDoc = ThisApplication.Documents.Open(\"C:\\part1.ipt\")\n\nDim oComponent As PartComponentDefinition\noComponent = sourceDoc.ComponentDefinition\n\nDim SketchBlockDef As SketchBlockDefinition\nFor Each SketchBlockDef In oComponent.SketchBlockDefinitions\n    If SketchBlockDef.Name = \"Block1\" Then\n        SketchBlockDef.CopyTo (targetDoc)\n    End If\nNext SketchBlockDef", "Sub", " ", "Main", "()", "\n\n    ", "Dim", " ", "targetDoc", " ", "As", " ", "PartDocument", "\n    ", "targetDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    \n    ", "Dim", " ", "sourceDoc", " ", "As", " ", "PartDocument", "\n    ", "sourceDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "\"", "C:\\TEMP\\InventorBlockTemplate.ipt", "\"", ", ", "False", ")", " ", "'", "Open File in background", "\n    \n    ", "Dim", " ", "oComponentSource", " ", "As", " ", "PartComponentDefinition", "\n    ", "oComponentSource", " ", "=", " ", "sourceDoc", ".", "ComponentDefinition", "\n    \n    ", "Dim", " ", "oComponentTarget", " ", "As", " ", "PartComponentDefinition", "\n    ", "oComponentTarget", " ", "=", " ", "targetDoc", ".", "ComponentDefinition", "\n    \n    \n    ", "Dim", " ", "oIndex", " ", "=", " ", "0", " ", "'", "Integer to count available blocks in SourceDoc", "\n    ", "Dim", " ", "oIndexCur", " ", "=", " ", "0", " ", "'", "Integer to count available blocks in TargetDoc", "\n    \n    \n    ", "Dim", " ", "BlockList", " ", "As", " ", "New", " ", "ArrayList", " ", "'", "Array to list all avalable Blocks SourceDoc", "\n    ", "Dim", " ", "BlockListCur", " ", "As", " ", "New", " ", "ArrayList", " ", "'", "Array to list all avalable Blocks TargetDoc", "\n    \n    ", "'", "Put Available Blocks from SourceDoc in an ArrayList", "\n    ", "Dim", " ", "SketchBlockDef", " ", "As", " ", "SketchBlockDefinition", " \n    ", "For", " ", "Each", " ", "SketchBlockDef", " ", "In", " ", "oComponentSource", ".", "SketchBlockDefinitions", "\n        ", "Blocklist", ".", "Add", "(", "SketchBlockDef", ".", "Name", ")", "\n        ", "oIndex", "  ", "=", " ", "oIndex", " ", "+", " ", "1", "\n    ", "Next", " ", "SketchBlockDef", "\n    \n    ", "'", "Put Available Blocks from TargetDoc in an ArrayList", "\n    ", "Dim", " ", "SketchBlockDefCur", " ", "As", " ", "SketchBlockDefinition", "\n    ", "For", " ", "Each", " ", "SketchBlockDefCur", " ", "In", " ", "oComponentSource", ".", "SketchBlockDefinitions", "\n        ", "BlocklistCur", ".", "Add", "(", "SketchBlockDefCur", ".", "Name", ")", "\n        ", "oIndexCur", "  ", "=", " ", "oIndexCur", " ", "+", " ", "1", "\n    ", "Next", " ", "SketchBlockDefCur", "\n    \n    ", "'", "Choose what Block to Import", "\n    ", "BlockChooser", " ", "=", " ", "InputListBox", "(", "\"", "CHOOSE BLOCK TO IMPORT", "\"", ", ", "Blocklist", ", ", "Blocklist", ", ", "Title", " :", "=", " ", "\"", "Block Importer", "\"", ", ", "ListName", " :", "=", " ", "\"", "Available Blocks", "\"", ")", "\n    \n    ", "'", "Compare SourceDoc's Blocklist against TargetDoc's Blocklist", "\n    ", "For", " ", "Each", " ", "SketchBlockDef", " ", "In", " ", "oComponentSource", ".", "SketchBlockDefinitions", "\n        ", "If", " ", "SketchBlockDef", ".", "Name", " ", "=", " ", "BlockChooser", " ", "Then", "\n            ", "'", "Check if TargetDoc Contains this Block", "\n            ", "For", " ", "Each", " ", "SketchBlockDefCur", " ", "In", " ", "oComponentTarget", ".", "SketchBlockDefinitions", "\n                ", "If", " ", "SketchBlockDefCur", ".", "Name", " ", "=", " ", "BlockChooser", " ", "Then", "\n                    ", "MessageBox", ".", "Show", "(", "\"", "Block Already Imported, Exiting", "\"", ", ", "\"", "Error on Import", "\"", ",", "MessageBoxButtons", ".", "OK", ", ", "MessageBoxIcon", ".", "STOP", ")", "\n                    ", "Exit Sub", "\n                ", "End", " ", "If", "\n            ", "Next", "     ", "SketchBlockDefCur", "\n            ", "SketchBlockDef", ".", "CopyTo", " ", "(", "targetDoc", ")", "\n        ", "End", " ", "If", "\n    ", "Next", " ", "SketchBlockDef", "\n    \n    \n", "End Sub", "\n"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Finding sketchpoint in a large array of sketchpoints\n                    ", "solution": [], "author": "BromanSillito"},
{"created at": [], "solution Title": "\n                        Re: Sketch Constraint Visibility\n                    ", "solution": ["ThisApplication.CommandManager.ControlDefinitions.Item(\"SketchHideAllConstraintsCtxCmd\").Execute\n"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: How to distinguish iPart vs standard part using Apprentice\n                    ", "solution": ["        private void button1_Click(object sender, EventArgs e)\n        {\n            Inventor.ApprenticeServerDocument objapprenticeServerDocument;\n            string strFileName = @\"C:\\Users\\brillw\\Documents\\Inventor\\WB_2-18-16\\iPart_Test_WB.ipt\";\n\n            //string strFileName = @\"C:\\Users\\brillw\\Documents\\Inventor\\WB_2-18-16\\cylinder.ipt\";\n            //open the specified file\n            objapprenticeServerDocument = objapprenticeServerApp.Open(strFileName);\n\n            Inventor.PartComponentDefinition prtCompDef = (Inventor.PartComponentDefinition)objapprenticeServerDocument.ComponentDefinition;\n            bool bIsIpart = prtCompDef.IsiPartFactory;\n  \n        }"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: How to use iLogic to change the Level of Detail in a Drawing View\n                    ", "solution": [], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Model is Not Update\n                    ", "solution": [], "author": "machiel.veldkam"},
{"created at": [], "solution Title": "\n                        Re: Get ilogic Form Name\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Get documents part of all opened drawing\n                    ", "solution": ["Dim doc As Document\nDim model As Document\n", "For Each doc In ThisApplication.Documents\n\tIf doc.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then ", "                'This will only work if there is a drawing view on sheet 1 as that is what it grabs as the document\n\t\tmodel = doc.Sheets(1).DrawingViews(1).ReferencedDocumentDescriptor.ReferencedDocument", "                Try\n\t\t         model.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Size A\").Value = 30", "                Catch", "                        MsgBox(\"iProp Not Accessible in context of\" & vblf & vblf & model.FullFileName)", "                        'need to add the propertyset here through the appropriate methods and then assign value", "                End try\n\tEnd If\nNext"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to change punch row in sheet metal part\n                    ", "solution": [], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: USING ILOGIC TO RENAME SHEET NUMBERS IN DRAWING\n                    ", "solution": ["Dim", " ", "oDwgDoc", " ", "As", " ", "DrawingDocument", "\n", "oDwgDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "SheetNo", " ", "As", " ", "Integer", "\n\n", "Try", "\n    ", "SheetName", " ", "=", " ", "oDwgDoc", ".", "Sheets", ".", "Item", "(", "1", ")", ".", "Name", "\n    ", "SheetNo", " ", "=", " ", "Left", "(", "SheetName", ", ", "InStr", "(", "SheetName", ", ", "\"", ":", "\"", ")", " ", "-", " ", "1", ")", "\n    ", "MsgBox", "(", "SheetNo", ")", "\n", "Catch", "\n    ", "MsgBox", "(", "\"", "Sheet 1 not a numeric name!", "\"", ")", "\n", "End", " ", "Try", "\n\n", "For", " ", "j", "=", "2", " ", "To", " ", "oDwgDoc", ".", "Sheets", ".", "Count", "\n        ", "SheetNo", " ", "=", " ", "SheetNo", " ", "+", " ", "1", "\n        ", "oDwgDoc", ".", "Sheets", "(", "j", ")", ".", "Name", " ", "=", " ", "SheetNo", "\n", "Next", "\u00a0"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to get lenght of line\n                    ", "solution": ["Sub Main()\n\nDim oApp As Application\noApp = ThisApplication\n\nDim oDoc As Document\noDoc = oApp.ActiveDocument\n\n' Get selection set\nDim oSelSet As SelectSet\noSelSet = oDoc.SelectSet\n\n' If no objects are selected, then exit\nIf oSelSet.Count = 0 Then Exit Sub\n\nDim oEdge As Object\n' Get Edge or EdgeProxy object (Edge for part environment and EdgeProxy for assembly environment)\noEdge = oSelSet.Item(1)\n\n' If selected object is not of type Edge or EdgeProxy then exit\nIf (Not TypeOf oEdge Is Edge) And (Not TypeOf oEdge Is EdgeProxy) Then\n\tExit Sub\nEnd If\n\n' Get length between endpoints of edge [cm]\nDim dLength As Double\ndLength = oApp.MeasureTools.GetMinimumDistance(oEdge.StartVertex, oEdge.StopVertex)\n\n' Display length of line\nMsgBox(dLength & \" cm\",vbOKOnly, \"Edge Length\")\n\nEnd Sub"], "author": "foxrid3r"},
{"created at": [], "solution Title": "\n                        Re: Content Center Tube & Pipe Length in File Name\n                    ", "solution": [], "author": "Winks87"},
{"created at": [], "solution Title": "\n                        Re: Aside of a derived sheetmetal part\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Editing custom iProperties in non-English Inventor installations.\n                    ", "solution": ["' Get the active document.\nDim invDoc As Document\ninvDoc = ThisApplication.ActiveDocument\n' Get the summary information property set.\nDim invSummaryInfo As PropertySet\ninvSummaryInfo = invDoc.PropertySets.Item(\"{F29F85E0-4FF9-1068-AB91-08002B27B3D9}\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Error in DetailDrawingView Object\n                    ", "solution": [], "author": "Nick.Steele.205"},
{"created at": [], "solution Title": "\n                        Re: Automatically Load Custom Settings on Open Inventor\n                    ", "solution": [], "author": "Roelof.Feijen"},
{"created at": [], "solution Title": "\n                        Re: The problem of circular using RectangularOccurrencePattern\n                    ", "solution": ["Sub CreatePatternsInAssembly()\n\nDim oAssyDoc As AssemblyDocument\nSet oAssyDoc = ThisApplication.ActiveDocument\n\nDim oAssyDef As AssemblyComponentDefinition\nSet oAssyDef = oAssyDoc.ComponentDefinition\n\n'base work axes\nDim XAxis As WorkAxis\nDim YAxis As WorkAxis\nDim Zaxis As WorkAxis\nWith oAssyDef\n    Set XAxis = .WorkAxes(1)\n    Set YAxis = .WorkAxes(2)\n    Set Zaxis = .WorkAxes(3)\nEnd With\n\n'Create 2 object collections\nDim objCol1 As ObjectCollection\nDim objCol2 As ObjectCollection\nSet objCol1 = ThisApplication.TransientObjects.CreateObjectCollection\nSet objCol2 = ThisApplication.TransientObjects.CreateObjectCollection\n\n'add the desired occurrence to be patterned to each collection\nobjCol1.Add oAssyDef.Occurrences.Item(1)\nobjCol2.Add oAssyDef.Occurrences.Item(2)\n\n'set the number of patterns in the x direction\nDim no_x_rect As Integer\nno_x_rect = 3\n\n'set the number of patterns in the y direction\nDim no_y_rect As Integer\nno_y_rect = 3\n\n'Creating a Rectangular pattern from object in objCol1\nCall oAssyDef.OccurrencePatterns.AddRectangularPattern(objCol1, XAxis, True, 100, no_x_rect, YAxis, True, 100, no_y_rect)\n\n'Creating a Circular pattern from object in objCol2\nCall oAssyDef.OccurrencePatterns.AddCircularPattern(objCol2, Zaxis, True, \"45 deg\", 5)\n\nEnd Sub"], "author": "foxrid3r"},
{"created at": [], "solution Title": "\n                        Re: iLogic AddUsingiMates\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Create Constraints Using iLogic & Set Limits\n                    ", "solution": ["Public Sub MateConstraintWithLimits()\n    ' Set a reference to the assembly component definintion.\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n    ' Set a reference to the select set.\n    Dim oSelectSet As SelectSet\n    Set oSelectSet = ThisApplication.ActiveDocument.SelectSet\n\n    ' Validate the correct data is in the select set.\n    If oSelectSet.Count <> 2 Then\n        MsgBox \"You must select the two entities valid for mate.\"\n        Exit Sub\n    End If\n\n    ' Get the two entities from the select set.\n    Dim oBrepEnt1 As Object\n    Dim oBrepEnt2 As Object\n    Set oBrepEnt1 = oSelectSet.Item(1)\n    Set oBrepEnt2 = oSelectSet.Item(2)\n\n    ' Create the mate constraint between the parts, with an offset value of 0.\n    Dim oMate As MateConstraint\n    Set oMate = oAsmCompDef.Constraints.AddMateConstraint(oBrepEnt1, oBrepEnt2, 0)\n\n", "    ' Set a maximum value of 2 inches\n    oMate.ConstraintLimits.MaximumEnabled = True\n    oMate.ConstraintLimits.Maximum.Expression = \"2 in\"\n\n    ' Set a minimum value of -2 inches\n    oMate.ConstraintLimits.MinimumEnabled = True\n    oMate.ConstraintLimits.Minimum.Expression = \"-2 in\"", "\nEnd Sub"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Property, indexer, or event 'Parameter.Units' is not supported by the langua\n                    ", "solution": [" //WB commented\n            //  foreach (DrawingCurve _dwgCurve in _drawView.DrawingCurves)\n            foreach (dynamic _dwgCurve in _drawView.DrawingCurves)\n            {\n                // Set a reference to the occurrence proxy represented by this drawing curve.\n                // If embedded is turned off, then the model geometry doesn't contain a definition for \"ContainingOccurrence\"\n                //WB - this is working with \"Embed Interop Types\" = False\n                ComponentOccurrenceProxy _occPxy = (ComponentOccurrenceProxy)_dwgCurve.ModelGeometry.ContainingOccurrence;\n               \n                //if (!_occPxy.Name.ToUpper().Contains(_assyFileName.ToUpper())) continue;\n                //_drawView.SetVisibility(_occPxy, _visibility);\n                //SetCompVisibility(_viewIndex, _assyFileName, _visibility);\n                //break;\n            }"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: iLogic program to Save as PDF without line weights\n                    ", "solution": ["If oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then\noOptions.Value(\"All_Color_AS_Black\") = 0\noOptions.Value(\"Remove_Line_Weights\") = 0\noOptions.Value(\"Vector_Resolution\") = 4800\noOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\nEnd If\n'---End PDF settings\n\n'---\noPath = ThisDoc.Path\noFileName = ThisDoc.FileName(False) 'without extension\noRevNum = iProperties.Value(\"Project\", \"Revision Number\")\noDocument = ThisApplication.ActiveDocument\n\t\n\t\tDim strIniFile As String\n        strIniFile = \"C:\\Data\\2016-acadexport-[jun16]-2.ini\"\n        oOptions.Value(\"Export_Acad_IniFile\") = strIniFile\n\n\toFolder =\"C:\\DATA\\1 EXPORT\"\n\toDataMedium.FileName =oFolder + \"\\\" + oFileName & \"[\" & oRevNum & \"]\" & \".pdf\"\nIf System.IO.File.Exists(oDataMedium.FileName) Then\n\t oChoice=MessageBox.Show(oDataMediumPDF.FileName & \" Already Exists - Overwrite?\", \"Title\", MessageBoxButtons.YesNo, MessageBoxIcon.Question)\n\t\tIf oChoice=7\n\t\t\tReturn\n\t\t\tElse\n\t\tEnd If\nEnd If\t\n\t\n'''--- Publish document.\noPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nMessageBox.Show(\"Done!\", \"Title\")"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Get BOMStructure of an assembly, ilogic\n                    ", "solution": ["    ", "If", " doc", ".", "DocumentType", " ", "=", " ", "DocumentTypeEnum", ".", "kAssemblyDocumentObject", " ", "Then", "\n        ", "Dim", " ", "oAssmDoc", " ", "As", " ", "AssemblyDocument", " ", "=", " ", "doc", "\n        ", "oDef", " ", "=", " ", "oAssmDoc", ".", "ComponentDefinition", "\n    ", "ElseIf", " doc", ".", "DocumentType", " ", "=", " ", "DocumentTypeEnum", ".", "kPartDocumentObject", " ", "Then", "\n        ", "Dim", " ", "oPartDoc", " ", "As", " ", "PartDocument", " ", "=", " ", "doc", "\n        ", "oDef", " ", "=", " ", "oPartDoc", ".", "ComponentDefinition", "\n    ", "End", " ", "If", "\n    \n    ", "If", " ", "doc.DocumentType = kPartDocumentObject", " And ", "oDef", ".", "BOMStructure", " ", "=", " ", "51970", " ", "Then", "\u00a0"], "author": "c.rp.henderson"},
{"created at": [], "solution Title": "\n                        Re: ConstrainMany - VBA Tool\n                    ", "solution": [], "author": "zeintlinger"},
{"created at": [], "solution Title": "\n                        Re: Assisstive features\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Addin, VB.NET: Check if form is already open\n                    ", "solution": [], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: installation inventor\n                    ", "solution": [], "author": "Binga"},
{"created at": [], "solution Title": "\n                        Re: iLogic Point Supression\n                    ", "solution": [], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: Question about it is possible or not\n                    ", "solution": ["' a reference to the drawing document.\n' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\n' Obtain a reference to the desired sketched symbol definition.\n' Change the name here!!!\nDim oSketchedSymbolDef As SketchedSymbolDefinition\noSketchedSymbolDef = oDrawDoc.SketchedSymbolDefinitions.Item(\"", "Dimension tag", "\")\n\n' Set refence to the active sheet.\nDim oSheet As Sheet\noSheet = oDrawDoc.ActiveSheet\n\n' Check selected dimension\nIf oDrawDoc.SelectSet.Count = 1 Then\n\t\n\tIf TryCast(oDrawDoc.SelectSet.Item(1), DrawingDimension) Is Nothing Then\n\t\tMsgBox(\"Please select a dimension\")\n\t\tExit Sub\n\tEnd If\nElse\n\tMsgBox(\"None or too many dimension(s) selected\")\n\tExit Sub\nEnd If\n\n' Get the index of the selected drawingdimension\nDim oDim As DrawingDimension\noDim = oDrawDoc.SelectSet.Item(1)\n\n' Set a counter\nDim i As Integer\ni = 1\n\nDim sPromptStrings(0) As String\n\n' Loop all dimension to find the index\nFor Each dimension As DrawingDimension In oSheet.DrawingDimensions\n\n    ' Look for a match\n    If dimension Is oDim Then\n\t\t\n\t\t' This sketched symbol definition contains one prompted string input. An array\n\t\t' must be input that contains the strings for the prompted strings.\n\n\t\tsPromptStrings(0) = i\n\t\t\n\t\t' The match is found exit the loop\n        ' No more counting required\n        Exit For\n\n    End If\n\n    ' Add to the count\n    i += 1\n\nNext\n\n' Add an instance of the sketched symbol definition to the sheet.\nDim oSketchedSymbol As SketchedSymbol\noSketchedSymbol = oSheet.SketchedSymbols.Add(oSketchedSymbolDef, oDim.Text.Origin, , , sPromptStrings)"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Add a 3D Printer in Print studio\n                    ", "solution": [], "author": "Binga"},
{"created at": [], "solution Title": "\n                        Re: Change text with iLogic\n                    ", "solution": ["           ", "Dim", " ", "oPartDoc", " ", "As", " ", "Inventor", ".", "PartDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n        ", "Dim", " ", "oText", " ", "As", " ", "TextBox", " ", "=", " ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "SelectionFilterEnum", ".", "kSketchTextBoxFilter", ", ", "\"", "Select a text", "\"", ")", "\n\n        ", "oText", ".", "HorizontalJustification", " ", "=", " ", "HorizontalTextAlignmentEnum", ".", "kAlignTextCenter", "\n        ", "'", "oText.HorizontalJustification = HorizontalTextAlignmentEnum.kAlignTextLeft", "\n        ", "'", "oText.HorizontalJustification = HorizontalTextAlignmentEnum.kAlignTextRight", "\n\n        ", "'", "oText.VerticalJustification = VerticalTextAlignmentEnum.kAlignTextBaseline", "\n        ", "oText", ".", "VerticalJustification", " ", "=", " ", "VerticalTextAlignmentEnum", ".", "kAlignTextLower", "\n        ", "'", "oText.VerticalJustification = VerticalTextAlignmentEnum.kAlignTextMiddle", "\n        ", "'", "oText.VerticalJustification = VerticalTextAlignmentEnum.kAlignTextUpper"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Sketch Fully constrained or not using API\n                    ", "solution": [], "author": "15985329236"},
{"created at": [], "solution Title": "\n                        Re: iLogic to check inventor or autocad drawing file\n                    ", "solution": ["Dim", " ", "oDrawing", " ", "as", " ", "DrawingDocument", "\n", "oDrawing", " ", "=", " ", "ThisDrawing", ".", "Document", "\n", "If", " ", "oDrawing", ".", "Sheets", ".", "Item", "(", "1", ")", ".", "Name", " ", "=", " ", "\"", "Model (AutoCAD)", "\"", " ", "Then", "\n", "MessageBox", ".", "Show", "(", "\"", "AutoCAD model found, it is an AutoCAD drawing!", "\"", ", ", "\"", "Title", "\"", ")", "\n", "Else", "\n", "MessageBox", ".", "Show", "(", "\"", "No AutoCAD model found, it is an Inventor drawing !", "\"", ", ", "\"", "Title", "\"", ")", "\n", "End", " ", "If"], "author": "ThomasB44"},
{"created at": [], "solution Title": "\n                        Re: Get list of view reps for component pattern element\n                    ", "solution": ["'Pick the Component Pattern I wish to Change\nDim oPattern As OccurrencePattern\noPattern = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAssemblyOccurrencePatternFilter, \"Select pattern to set view rep\")\n\n'get first element of that pattern\nfElement = oPattern.OccurrencePatternElements.Item(1)\n'get first component of that element\nfComp = fElement.Occurrences.item(1)\n'get assembly component defintion of that component to access view reps\nfCompDef = fComp.Definition\n'create a name for the view rep list box\nDim NameList As New ArrayList()\n\n'loop through each view rep and add the name to the array\nFor Each oViewRep In fCompDef.RepresentationsManager.DesignViewRepresentations\nNameList.add(oViewRep.Name )\nNext\n'add a cancel just because\nNameList.add(\"Cancel\")\n\n'create a new string variable\nDim oRepPicked As String\n'show the input list from the array of view reps\noRepPicked = InputListBox(\"Choose View Rep\", NameList,  _\nNameList.Item(0), Title := \"View Reps\", ListName := \"Available View Reps\")\n\n'if I picked the Cancel just exit without performing anything\nIf oRepPicked = \"Cancel\" Then\nReturn 'exit rule\nElse\n\n'loop through each component in the pattern and change its view rep to what I chose in the list box\nFor Each oElement As OccurrencePatternElement In oPattern.OccurrencePatternElements\n   Dim oComp As ComponentOccurrence\n   oComp = oElement.Occurrences.item(1)\n   oComp.SetDesignViewRepresentation(oRepPicked, , True)\nNext\nEnd If"], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: Creating drawings of components with iLogic\n                    ", "solution": [" ", "Dim", " ", "oSheet", " ", "As", " ", "Inventor", ".", "Sheet", " ", "=", " ", "ActiveSheet", ".", "Sheet", "\n ", "Dim", " ", "oView", " ", "As", " ", "Inventor", ".", "DrawingView", "\n \n ", "For", " ", "Each", " ", "oView", " ", "In", " ", "oSheet", ".", "DrawingViews", "\n ", "oView", ".", "Delete", "\n ", "Next", "\n ", "DrawingView.Name() As String", "Dim", " ", "oTopView", " ", "As", " ", "DrawingView", " ", "=", " ", "ActiveSheet", ".", "View", "(", "\"", "VIEW5", "\"", ")", ".", "View", "\n\n", "Dim", " ", "oSectionSketch", " ", "As", " ", "DrawingSketch", "\n", "oSectionSketch", " ", "=", " ", "oTopView", ".", "Sketches", ".", "Add", "\n\n", "'", "Edits the sketch", "\n", "oSectionSketch", ".", "Edit", "()", "\n", "Dim", " ", "oTG", " ", "As", " ", "Inventor", ".", "TransientGeometry", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", "\n\n\n", "Dim", " ", "oPt1", ",", "oPt2", " ", "As", " ", "Point2d", "\n", "Dim", " ", "ViewHeight", " ", "As", " ", "Double", " ", "=", " ", "ActiveSheet", ".", "View", "(", "\"", "VIEW5", "\"", ")", ".", "Height", "\n", "oPt1", " ", "=", " ", "oTG", ".", "CreatePoint2d", "(", "0", ",", "ViewHeight", "/", "2", ")", "\n", "oPt2", " ", "=", " ", "oTG", ".", "CreatePoint2d", "(", "0", ",", "-", "ViewHeight", "/", "2", ")", "\n\n", "'", "Draws the section line", "\n", "Dim", " ", "oSectionLine", " ", "As", " ", "SketchLine", "\n", "oSectionLine", " ", "=", " ", "oSectionSketch", ".", "SketchLines", ".", "AddByTwoPoints", "(", "oPt1", ",", "oPt2", ")", "\n\n", "'", "Exits the sketch", "\n", "oSectionSketch", ".", "ExitEdit", "()"], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: total mass in assembly bom list\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Automatic export of DWF model via Ilogic after closing main assembly\n                    ", "solution": ["ThisDoc.Document.SaveAs(strNameDWF & (\".dwf\") , True)\nThisDoc.Document.SaveAs(strNamePDF & (\".pdf\") , True)"], "author": "mcgyvr"},
{"created at": [], "solution Title": "\n                        Re: API Design Assistant\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Content Center Editting -- Change FamilyID\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Turn off Adaptively Used\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: 2017 Inventor professional How to scale an object in just one axis\n                    ", "solution": [], "author": "Binga"},
{"created at": [], "solution Title": "\n                        Re: Changing the color of a mesh\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Looking For Ways To Suppress Leaders & Dimensions Dynamically Using iLog\n                    ", "solution": [], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: on select event\n                    ", "solution": [], "author": "marcin_otreba"},
{"created at": [], "solution Title": "\n                        Re: VbScript to Open Inventor And Change Project Options\n                    ", "solution": ["Set InvApp = CreateObject(\"Inventor.Application\")\nInvApp.Visible = True\n\nInvApp.ContentCenterOptions.SetAccessOption 81153, \"C:\\Users\\Owner\\Desktop\\CC Library Editting\"\n\nSet oProject = InvApp.DesignProjectManager.DesignProjects.ItemByName(\"C:\\Users\\Owner\\Desktop\\CC Library Editting\\CC Library Editting.ipj\")\noProject.Activate\n\nInvApp.Documents.Open \"C:\\Users\\Owner\\Desktop\\recessed rubber bumper.ipt\", True "], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Using API to Get coordinate X,Y of centerline on drawing\n                    ", "solution": ["        Dim centermarkscoordsX() As Double\n        Dim centermarkscoordsY() As Double\n        Dim oDoc As DrawingDocument\n        oDoc = ThisApplication.ActiveDocument\n\n        ' Set a reference to the active sheet\n        Dim oSheet As Sheet\n        oSheet = oDoc.ActiveSheet\n\n        Dim oDrawingDim As Centermark\n\n        ' Iterate over all centermark in the drawing\n        Dim i As Integer = 0\n        For Each oDrawingDim In oSheet.Centermarks\n            centermarkscoordsX(i) = oDrawingDim.Position.X\n            centermarkscoordsY(i) = oDrawingDim.Position.Y\n            i = i + 1\n        Next"], "author": "rijal.rf7"},
{"created at": [], "solution Title": "\n                        Re: Change properties of appearance by code\n                    ", "solution": ["        ", "Dim", " ", "oPartDoc", " ", "As", " ", "Inventor", ".", "PartDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n        ", "Dim", " ", "oAppearanceAssets", " ", "As", " ", "AssetsEnumerator", " ", "=", " ", "oPartDoc", ".", "AppearanceAssets", "\n        ", "Dim", " ", "oAsset", " ", "As", " ", "Asset", "\n\n        ", "'", "loop trough the part appearences", "\n        ", "For", " ", "Each", " ", "oAsset", " ", "In", " ", "oAppearanceAssets", "\n\n            ", "'", "Loop through the assetsvalues, that you see in the appearance dialogbox", "\n            ", "Dim", " ", "oAssetValue", " ", "As", " ", "AssetValue", "\n            ", "For", " ", "Each", " ", "oAssetValue", " ", "In", " ", "oAsset", "\n\n                ", "MsgBox", "(", "oAssetValue", ".", "DisplayName", ",,", "\"", "Asset Value", "\"", ")", "\n                ", "'", "here you can do something with the values", "\n                ", "'", "On Error Resume Next", "\n                ", "'", "MsgBox(oAssetValue.value)", "\n            ", "Next", "\n        ", "Next"], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Run the SketchProjectCutEdgesCmd from top level assembly\n                    ", "solution": ["Dim", " ", "oPartDoc", " ", "As", " ", "PartDocument", "\n", "oPartDoc", " ", "=", "  ", "ThisDoc", ".", "Document", "'", "____Iteration Template for Assembly Structures_______", "\n", "Sub", " ", "Main", "()", "\n\n    ", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", " \n\n    ", "oAsmDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "  \n\n    ", "Call", " ", "Iterate", "(", "oAsmDoc", ".", "ComponentDefinition", ".", "Occurrences", ", ", "1", ")", "\n\n", "End Sub", " \n\n\n", "Private", " ", "Sub", " ", "Iterate", "(", "Occurrences", " ", "As", " ", "ComponentOccurrences", ", ", "Level", " ", "As", " ", "Integer", ")", " \n", "'", "'Iterate through Assembly Occurrences", "\n\n    ", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", "\n    ", "Dim", " ", "sName", " ", "As", " ", "String", "\n\n    ", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "Occurrences", " \n    ", "'", "'Find Parts in Assembly", "\n        ", "sName", " ", "=", " ", "oOcc", ".", "Name", "\n\n        ", "Try", " \n        ", "'", "Investigate Occurence and 'Do Something'", "\n            ", "Select", " ", "Case", " ", "oOcc", ".", "DefinitionDocumentType", " \n                ", "Case", " ", "kAssemblyDocumentObject", "\n                    ", "'", "'Do something to an Assembly", "\n\n                ", "Case", " ", "kPartDocumentObject", "\n                    ", "'", "'Do something to a Part", "\n\n                ", "Case", " ", "kForeignModelDocumentObject", "\n\n                ", "Case", " ", "kSATFileDocumentObject", "\n\n                ", "Case", " ", "kNoDocument", "\n\n                ", "Case", " ", "Else", "\n                    ", "'", "'Do something if an object is misidentified", "\n\n            ", "End", " ", "Select", "\n\n        ", "Catch", " ", "ex", " ", "As", " ", "Exception", "\n        ", "'", "MsgBox(\"There was an Error! --\" & ex.Message)            ", "\n\n\n        ", "Finally", "\n        ", "'", "'Run through the sub assemblies ", "\n            ", "If", " ", "oOcc", ".", "DefinitionDocumentType", " ", "=", " ", "kAssemblyDocumentObject", " ", "Then", "\n                ", "Call", " ", "Iterate", "(", "oOcc", ".", "SubOccurrences", ", ", "Level", " ", "+", " ", "1", ")", " \n            ", "End", " ", "If", " \n\n        ", "End", " ", "Try", "\n\n    ", "Next", " \n", "End Sub"], "author": "KristopherReave"},
{"created at": [], "solution Title": "\n                        Re: Add selection filter to ilogic code\n                    ", "solution": ["Sub", " ", "Dim_Length", "\n", "Dim", " ", "oApp", " ", "As", " ", "Application", "\n", "oApp", " ", "=", " ", "ThisApplication", "\n\n", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "oDoc", " ", "=", " ", "oApp", ".", "ActiveDocument", "\n", "oDoc.SelectionPriority = 67587 'Edge and face", "\n", "'", " Get selection set", "\n", "Dim", " ", "oSelSet", " ", "As", " ", "SelectSet", "\n", "oSelSet", " ", "=", " ", "oDoc", ".", "SelectSet", "\n\n", "'", " If no objects are selected, then exit", "\n", "If", " ", "oSelSet", ".", "Count", " ", "=", " ", "0", " ", "Then", "\n", "MsgBox", "(", "\"", "You must pre select a line before running this rule", "\"", ",", "vbOKOnly", ", ", "\"", "Warning", "\"", ")", "\n", "Exit Sub", "\n", "End", " ", "If", "\n\n\n", "Dim", " ", "oEdge", " ", "As", " ", "Object", "\n", "'", " Get Edge or EdgeProxy object (Edge for part environment and EdgeProxy for assembly environment)", "\n", "oEdge", " ", "=", " ", "oSelSet", ".", "Item", "(", "1", ")", "\n\n", "'", " If selected object is not of type Edge or EdgeProxy then exit", "\n", "If", " ", "(", "Not", " ", "TypeOf", " ", "oEdge", " ", "Is", " ", "Edge", ")", " ", "And", " ", "(", "Not", " ", "TypeOf", " ", "oEdge", " ", "Is", " ", "EdgeProxy", ")", " ", "Then", "\n    ", "Exit Sub", "\n", "End", " ", "If", "\n\n", "'", " Get length between endpoints of edge [cm]", "\n", "Dim", " ", "dLength", " ", "As", " ", "Double", "\n", "dLength", " ", "=", " ", "oApp", ".", "MeasureTools", ".", "GetMinimumDistance", "(", "oEdge", ".", "StartVertex", ", ", "oEdge", ".", "StopVertex", ")", "*", "10", "\n", "oDoc.SelectionPriority = 67590 'component", "\n", " ", "'", " Display length of line", " ", "MsgBox", "(", "dLength", " ", "&", " ", "\"", " mm", "\"", ",", "vbOKOnly", ", ", "\"", "Length dim", "\"", ")", " ", "End Sub", "\u00a0"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Determine if A-Side Definition exists iLogic\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: oControlDef = ThisApplication.CommandManager.ControlDefinitions(\"PartiF\n                    ", "solution": ["Dim oDoc As Document\nDim oCompDef As PartComponentDefinition\noCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n' Get the command manager.\nDim oCommandMgr As CommandManager\noCommandMgr = ThisApplication.CommandManager\n\n'Get control definition\nDim oControlDef As ControlDefinition\noControlDef = ThisApplication.CommandManager.ControlDefinitions(\"PartiFeatureInsertCmd\")\n\n' Execute the command synchronously.\nCall oControlDef.Execute2(True)\n\nDim oiFeatComp As iFeature\noiFeatComp = oCompDef.Features.iFeatures(oCompDef.Features.iFeatures.Count)\n\nDim strPrompt As String\nstrPrompt = oiFeatComp.iFeatureTemplateDescriptor.LastKnownSourceFileName\n\niProperties.Value(\"Custom\", \"TEST\") = strPrompt"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Advanced iLogic Configuration\n                    ", "solution": ["myname", " ", "=", " ", "ThisApplication", ".", "GeneralOptions", ".", "UserName", "\n", "'", "MsgBox(myname)", "\n", "iLogicPath", " ", "=", " ", "\"", "C:\\Users\\", "\"", " ", "&", " ", "myname", " ", "&", " ", "\"", "\\AppData\\Roaming\\Autodesk\\Inventor 2016\\iLogicPreferences\\", "\"", "\n\n", "'", "____Create and write to a text file_________________", "\n", "oWrite", " ", "=", " ", "System", ".", "IO", ".", "File", ".", "CreateText", "(", "iLogicPath", " ", "&", " ", "\"", "iLogicOptions.xml", "\"", ")", "\n", "oWrite", ".", "WriteLine", "(", "\"", "<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>", "\"", ")", "\n", "oWrite", ".", "WriteLine", "(", "\"", "<ShareableOptions xmlns:xsd=\"\"http://www.w3.org/2001/XMLSchema\"\" xmlns:xsi=\"\"http://www.w3.org/2001/XMLSchema-instance\"\">", "\"", ")", "\n", "oWrite", ".", "WriteLine", "(", "\"", "  <ExternalRuleDirectories>", "\"", ")", "\n", "oWrite", ".", "WriteLine", "(", "\"", "    <string>Path1</string>", "\"", ")", "\n", "oWrite", ".", "WriteLine", "(", "\"", "    <string>Path2</string>", "\"", ")", "\n", "oWrite", ".", "WriteLine", "(", "\"", "  </ExternalRuleDirectories>", "\"", ")", "\n", "oWrite", ".", "WriteLine", "(", "\"", "  <ExternalRuleFilenames />", "\"", ")", "\n", "oWrite", ".", "WriteLine", "(", "\"", "  <ExternalRuleDefaultExtension>.iLogicVb</ExternalRuleDefaultExtension>", "\"", ")", "\n", "oWrite", ".", "WriteLine", "(", "\"", "</ShareableOptions>", "\"", ")", "\n", "oWrite", ".", "Close", "()", "\n\n", "\n'", "System.Threading.Thread.CurrentThread.Sleep(3000) 'Just in case the server is running slow and trying to catch up", "\n\n", "Dim", " ", "oControlDef", " ", "As", " ", "ControlDefinition", " ", "=", " ", "ThisApplication", ".", "CommandManager", ".", "ControlDefinitions", ".", "Item", "(", "\"", "iLogic.Configuration", "\"", ")", "\n", "oControlDef", ".", "Execute2", "(", "False", ")", "\n\n\n", "InventorVb", ".", "RunMacro", "(", "\"", "DocumentProject", "\"", ", ", "\"", "Module1", "\"", ", ", "\"", "PressEnter", "\"", ")"], "author": "Nick.Steele.205"},
{"created at": [], "solution Title": "\n                        Re: Sheet Metal blank weight formula\n                    ", "solution": [], "author": "k14348"},
{"created at": [], "solution Title": "\n                        Re: Multiple Close Loops in One Extrude Feature\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: c# insert ipt in assembly - user interaction\n                    ", "solution": ["string filename = \"C:/Temp/Tests/EllipsePart.ipt\";\n\n// Post the filename to the private event queue. \ninvApp.CommandManager.PostPrivateEvent(Inventor.PrivateEventTypeEnum.kFileNameEvent, filename);\n\n// Get the control definition for the Place Component command.\nInventor.ControlDefinition ctrlDef = invApp.CommandManager.ControlDefinitions[\"AssemblyPlaceComponentCmd\"];\n\n// Execute the command. \nctrlDef.Execute();\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: reference a document from Partlist in IDW\n                    ", "solution": ["Sub IndexPartslist()\n    \nDim oDoc As DrawingDocument\n    \nSet oDoc = ThisApplication.ActiveDocument\n    \n    \nDim oSheet As Sheet\n    \nSet oSheet = oDoc.ActiveSheet\n    \n    \nDim oPL As PartsList\n    \nSet oPL = oSheet.PartsLists.Item(1)\n    \n    \nDim drawBomRow As DrawingBOMRow\n    \nDim oBomDoc As Document\n    \nDim oPLRow As PartsListRow\n    \nDim i As Integer: i = 1\n    \nIf oPL.ReferencedDocumentDescriptor.ReferencedDocumentType = kAssemblyDocumentObject Then\n        \nFor Each oPLRow In oPL.PartsListRows\n            \nDebug.Print oPLRow.Item(\"ITEM\").Value\n            \nSet drawBomRow = oPLRow.ReferencedRows.Item(1)\n            \nSet oBomDoc = drawBomRow.BOMRow.ComponentDefinitions.Item(1).Document 'ERROR line\n        \nNext\n    ElseIf oPL.ReferencedDocumentDescriptor.ReferencedDocumentType = kPartDocumentObject Then\n        \nFor Each oPLRow In oPL.PartsListRows\n            \nSet oBomDoc = oPLRow.Item(1).Parent.ReferencedDocumentDescriptor.ReferencedDocument\n        \nNext\n    \nEnd If\n\nEnd Sub\n"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Single laser line in save as... *.dxf\n                    ", "solution": [], "author": "Bpiters"},
{"created at": [], "solution Title": "\n                        Re: Accessing Frame Generator Parameter\n                    ", "solution": ["Sub frame_Generator_test()\n  Dim oAsmDoc As AssemblyDocument\n  Set oAsmDoc = ThisApplication.ActiveDocument\n     \n  Dim oCompDef As ComponentDefinition\n  Set oCompDef = oAsmDoc.ComponentDefinition\n     \n  Call WriteParameters(oCompDef.Occurrences)\n  'WB added\n  ThisApplication.ActiveDocument.Update\nEnd Sub\n\n'Sub WriteParameters(ByVal oOccs As ComponentOccurrencesEnumerator)\nSub WriteParameters(ByVal oOccs As ComponentOccurrences)\n        Dim oOcc As ComponentOccurrence\n        'Memeriksa Jenis File Apakah Berupa Part\n        For Each oOcc In oOccs\n            If (oOcc.DefinitionDocumentType = DocumentTypeEnum.kPartDocumentObject) Then\n                Dim oPartDef As PartComponentDefinition\n                Set oPartDef = oOcc.Definition\n                'Mendefinisikan parameter\n                'Mendefinisikan parameter\n                Dim oUserParams As UserParameters\n                Set oUserParams = oPartDef.Parameters.UserParameters\n                \n                'WB added if statement\n                If oUserParams.count > 0 Then\n                \n                Dim oParam As Inventor.Parameter\n                Set oParam = oUserParams.Item(\"G_OFFSET_START\")\n                oParam.Expression = \"-35 mm\"\n                'oParam = oUserParams.Item(\"G_OFFSET_END\")\n                'oParam.Expression = \"-35 mm\"\n                'SetParameter(oUserParams, \"G_OFFSET_START\")\n                'SetParameter(oUserParams, \"G_OFFSET_START\")\n                End If 'WB added\n            ElseIf (oOcc.DefinitionDocumentType = DocumentTypeEnum.kAssemblyDocumentObject) Then\n                Debug.Print (UCase(oOcc.Name))\n                Call WriteParameters(oOcc.SubOccurrences)\n            End If\n        Next\n    End Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Any API method to disable or pause the Home Screen?\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: iLogic Parameter Population Issue\n                    ", "solution": ["trigger", "=", "iTrigger0", "\n", "Dim", " ", "M", " ", "As", " ", "String", "\n", "Dim", " ", "I", " ", "As", " ", "String", "\n\n", "M", " ", "=", " ", "\"", "METRIC", "\"", "\n", "I", " ", "=", " ", "\"", "IMPERIAL", "\"", "\n\n", "'", "---------------------GET INPUT FROM USER", "\n    ", "'", "UOM = InputListBox(\"SELECT THE DESIRED MODEL UNITS\", MultiValue.List(\"UOM\"), UOM, Title := \"MODEL UNITS\", ListName := \"MODEL UNIT SELECTIONS\")", "\n    ", "R", " ", "=", " ", "InputRadioBox", "(", "\"", "SELECT THE DESIRED MODEL UNITS", "\"", ", ", "M", ", ", "I", ", ", "R", ", ", "Title", " :", "=", " ", "\"", "MODEL UNITS", "\"", ")", "\n", "'", "---------------------CREATE PRECISION VALUE LIST", "\n    ", "oPrecisionArray", " ", "=", " ", "New", " ", "String", "()", "{", "0", ", ", "1", ", ", "2", ", ", "3", ", ", "4", ", ", "5", "}\n\n", "'", "---------------------GET INPUT FROM USER", "\n    ", "oPrecision", " ", "=", " ", "InputListBox", "(", "\"", "Select the number of decimal places to use for the units of length display.", "\"", ",  ", "_", "\n    ", "oPrecisionArray", ", ", "3", ", ", "\"", "iLogic", "\"", ", ", "\"", "Decimal Places ", "\"", ")", "\n\n", "'", "---------------------EXAMPLE UnitsTypeEnum ENUMERATORS", "\n    ", "'", "kCentimeterLengthUnits = 11268", "\n    ", "'", "kMillimeterLengthUnits = 11269", "\n    ", "'", "kInchLengthUnits = 11272", "\n   \n    ", "'", "kKilogramMassUnits = 11283", "\n    ", "'", "kGramMassUnits = 11284", "\n    ", "'", "kLbMassMassUnits = 11286", "\n        \n            ", "If", " ", "R", " ", "=", " ", "True", " ", "Then", "\n", "'", "---------------------SET TO MILLIMETER", "\n                    ", "oUOM_1", " ", "=", " ", "11269", "\n", "'", "---------------------SET TO KILOGRAM", "\n                    ", "oUOM_2", " ", "=", " ", "11283", "\n", "'", "---------------------PARAMETER CHECK", "\n                    ", "Try", "\n                        ", "oTest", " ", "=", " ", "Parameter", "(", "\"", "UOM", "\"", ")", "\n                    ", "Catch", "\n", "'", "---------------------MULTI-VALUE TEXT PARAMETER CREATION", "\n                        ", "oMyParameter", "=", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", "\n                        ", "oParameter", "=", "oMyParameter", ".", "AddByValue", "(", "\"", "UOM", "\"", ", ", "M", ", ", "UnitsTypeEnum", ".", "kTextUnits", ")", "\n", "'", "---------------------SET LIST", "\n                        ", "MultiValue", ".", "SetList", "(", "\"", "UOM", "\"", ", ", "\"", "METRIC", "\"", ", ", "\"", "IMPERIAL", "\"", " ", ")", "\n                    ", "End", " ", "Try", "\n", "'", "---------------------PARAMETER CHECK    ", "\n                    ", "Parameter", ".", "Param", "(", "\"", "UOM", "\"", ")", ".", "IsKey", " ", "=", " ", "True", "\n                    \n", "'", "---------------------UPDATE ALL", "\n                    ", "InventorVb", ".", "DocumentUpdate", "()", "\n                    ", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n            ", "Else", "\n", "'", "---------------------SET TO INCH", "\n                    ", "oUOM_1", " ", "=", " ", "11272", "\n", "'", "---------------------SET TO POUNDS MASS", "\n                    ", "oUOM_2", " ", "=", " ", "11286", "\n", "'", "---------------------PARAMETER CHECK", "\n                    ", "Try", "\n                        ", "oTest", " ", "=", " ", "Parameter", "(", "\"", "UOM", "\"", ")", "\n                    ", "Catch", "\n", "'", "---------------------MULTI-VALUE TEXT PARAMETER CREATION", "\n                        ", "oMyParameter", "=", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", "\n                        ", "oParameter", "=", "oMyParameter", ".", "AddByValue", "(", "\"", "UOM", "\"", ", ", "I", ", ", "UnitsTypeEnum", ".", "kTextUnits", ")", "\n", "'", "---------------------SET LIST", "\n                        ", "MultiValue", ".", "SetList", "(", "\"", "UOM", "\"", ", ", "\"", "METRIC", "\"", ", ", "\"", "IMPERIAL", "\"", " ", ")", "\n                    ", "End", " ", "Try", "\n", "'", "---------------------PARAMETER CHECK", "\n                    ", "Parameter", ".", "Param", "(", "\"", "UOM", "\"", ")", ".", "IsKey", " ", "=", " ", "True", "\n                    \n", "'", "---------------------UPDATE ALL", "\n                    ", "InventorVb", ".", "DocumentUpdate", "()", "\n                    ", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n            ", "End", " ", "If", "\n", "'", "---------------------DEFINE THE OPEN DOCUMENT", "\n    ", "Dim", " ", "openDoc", " ", "As", " ", "Document", "\n    ", "openDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n", "'", "---------------------SET LENGTH UNITS FOR THE TOP LEVEL ASSEMBLY", "\n    ", "openDoc", ".", "unitsofmeasure", ".", "LengthUnits", " ", "=", " ", "oUOM_1", "\n", "'", "---------------------SET MASS UNITS FOR THE TOP LEVEL ASSEMBLY", "\n    ", "openDoc", ".", "unitsofmeasure", ".", "MassUnits", " ", "=", " ", "oUOM_2", "\n", "'", "---------------------SET PRECISION", "\n    ", "openDoc", ".", "unitsofmeasure", ".", "LengthDisplayPrecision", " ", "=", " ", "oPrecision", "\n   \n", "'", "---------------------LOOK AT ALL OF THE FILES REFERENCED IN THE DOCUMENT", "\n    ", "Dim", " ", "docFile", " ", "As", " ", "Document", "\n    ", "For", " ", "Each", " ", "docFile", " ", "In", " ", "openDoc", ".", "AllReferencedDocuments", "                \n", "'", "---------------------FORMAT FILE NAME                 ", "\n                    ", "Dim", " ", "FNamePos", " ", "As", " ", "Long", "\n                    ", "FNamePos", " ", "=", " ", "InStrRev", "(", "docFile", ".", "FullFileName", ", ", "\"", "\\", "\"", ", ", "-", "1", ")", "                        \n            ", "Dim", " ", "docFName", " ", "As", " ", "String", " \n            ", "docFName", " ", "=", " ", "Right", "(", "docFile", ".", "FullFileName", ", ", "Len", "(", "docFile", ".", "FullFileName", ")", " ", "-", " ", "FNamePos", ")", "      \n", "'", "---------------------SET LENGTH UNITS", "\n                    ", "docFile", ".", "unitsofmeasure", ".", "LengthUnits", " ", "=", " ", "oUOM_1", "\n", "'", "---------------------SET MASS UNITS", "\n                    ", "docFile", ".", "unitsofmeasure", ".", "MassUnits", " ", "=", " ", "oUOM_2", "\n", "'", "---------------------SET PRECISION", "\n                    ", "docFile", ".", "unitsofmeasure", ".", "LengthDisplayPrecision", " ", "=", " ", "oPrecision", "\n", "'", "---------------------REBUILD TO UPDATE THE DISPLAY", "\n                    ", "docFile", ".", "Rebuild", "\n    ", "Next", "  \n    \n", "'", "---------------------UPDATE ALL", "\n", "InventorVb", ".", "DocumentUpdate", "()", "\n", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n\n", "'", "---------------------END OF ILOGIC", "\n"], "author": "Jason_Hunt"},
{"created at": [], "solution Title": "\n                        Re: iLogic delete specific files\n                    ", "solution": ["Option Explicit\n\nSub DeletSomeComponents()\n\nDim oDoc As AssemblyDocument\nSet oDoc = ThisApplication.ActiveDocument\n\nDim oDocDef As AssemblyComponentDefinition\nSet oDocDef = oDoc.ComponentDefinition\n\nDim oComp As ComponentOccurrence\nOn Error Resume Next\nFor Each oComp In oDocDef.Occurrences\nIf oComp.ReferencedDocumentDescriptor.ReferencedDocument.PropertySets(3).Item(2).Value = \"partnumber\" Then\n    oComp.Delete\nElseIf oComp.ReferencedDocumentDescriptor.ReferencedFileDescriptor.ReferencedFile.FullFileName =\"fullfilename\" Then\n     oComp.Delete\nEnd If\nNext\n\nEnd Sub"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Multibody part selection\n                    ", "solution": ["Public Sub AddSketch()\n   Dim oCompDef As PartComponentDefinition\n   Set oCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n   For i = 1 To oCompDef.SurfaceBodies.Count\n    If oCompDef.SurfaceBodies.Item(i).Visible = True Then\n        Dim oFace1 As Face\n        Set oFace1 = oCompDef.SurfaceBodies.Item(i).Faces.Item(1)\n        Dim oSketch As PlanarSketch\n        Set oSketch = oCompDef.Sketches.Add(oFace1, True)\n        oSketch.Name = \"My New Item 1 Sketch\"\n        Dim oProfile As Profile\n        Set oProfile = oSketch.Profiles.AddForSolid\n        Dim oExtrude As ExtrudeFeature\n        Set oExtrude = oCompDef.Features.ExtrudeFeatures.AddByDistanceExtent(oProfile, 0.1, kNegativeExtentDirection, kCutOperation)\n        Dim oFace2 As Face\n        Set oFace1 = oCompDef.SurfaceBodies.Item(i).Faces.Item(1)\n        Set oSketch = oCompDef.Sketches.Add(oFace1, True)\n        oSketch.Name = \"My New Second Item 1 Sketch\"\n        Set oProfile = oSketch.Profiles.AddForSolid\n        Set oExtrude = oCompDef.Features.ExtrudeFeatures.AddByDistanceExtent(oProfile, 0.15, kPositiveExtentDirection, kNewBodyOperation)\n        Exit For\n    End If\n   Next\nEnd Sub"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Set title block drawing no to = browser sheet name\n                    ", "solution": [], "author": "vancem"},
{"created at": [], "solution Title": "\n                        Re: excel vba to drive inventor\n                    ", "solution": ["Sub GetProperties()\nDim oApp As Application\nSet oApp = ThisApplication\n\nDim oDoc As Document\nSet oDoc = oApp.ActiveDocument\n\n' Check if user is in part or assembly\nIf oDoc Is Nothing Or TypeOf oDoc Is DrawingDocument Then\n    Exit Sub\nEnd If\n\nDim oCompDef As ComponentDefinition\n' Get component definition\nSet oCompDef = oDoc.ComponentDefinition\n\nDim oParams As Parameters\nDim oParam As Parameter\n' Get paramters object\nSet oParams = oCompDef.Parameters\n\nDim oExcel As Excel.Application\n' Create Excel object\nSet oExcel = CreateObject(\"Excel.Application\")\n\n' Define sheet name where information resides\nDim sSheetName As String\nsSheetName = \"inventor\"\nDim sFilePath\n\n' Prompt user to select Excel file to read from\n' Alternatively, you could hard code the filepath like this:\n' sFilePath = \"C:/ExcelFile.xlsx\"\nsFilePath = oExcel.GetOpenFilename(FileFilter:=\"Excel Files (*.xls*),*.xls*\", Title:=\"Select Excel File to Read From\")\nDim oWkbk As Workbook\n' Open Excel file invisibly\nIf sFilePath = False Then\n    Exit Sub\nElse\n    Set oWkbk = oExcel.Workbooks.Open(sFilePath, False)\nEnd If\n\nDim oSheet As WorkSheet\n' Get specified sheet\nSet oSheet = oWkbk.Sheets(sSheetName)\n\n' Set range where parameter names reside in sheet\nDim sParamRange As String\nsParamRange = \"A2:A6\"\n\nDim oCell As Range\n' Loop through each parameter listed in sheet\nFor Each oCell In oSheet.Range(sParamRange)\n    ' Parse through parameters and check to see if parameter name matches current parameter from Excel\n    For Each oParam In oParams\n        ' If names match, copy value and units from Excel into parameter expression\n        If oCell.Value = oParam.Name Then\n            oParam.Expression = oCell.offset(0, 1).Value & oCell.offset(0, 2).Value\n        End If\n    Next oParam\nNext oCell\n\n' Close workbook\nCall oWkbk.Close\n\nSet oExcel = Nothing\n\n' Update part/assembly\noDoc.Update\nEnd Sub\u00a0\u00a0"], "author": "foxrid3r"},
{"created at": [], "solution Title": "\n                        Re: Set display position of input message boxes\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How does one access assembly parts parameters using VBA?\n                    ", "solution": ["Set oComp = ThisApplication.ActiveEditDocument.ComponentDefinition.Occurrences.ItemByName(\"XSpacer11\")", "For each Item in oComp.Definition.Parameters", "if Item.Name = \"XspacerX\" then", "Item.Value = -XOffset + TP", "exit for", "end if"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Looking for fillet on sheet metal\n                    ", "solution": ["Public Sub Fillet()\n    Dim InvDoc As PartDocument\n    Set InvDoc = ThisApplication.ActiveDocument\n    Dim EC As EdgeCollection\n    Set EC = ThisApplication.TransientObjects.CreateEdgeCollection\n    For Each SurfaceBody In InvDoc.ComponentDefinition.SurfaceBodies\n        For Each Edge In SurfaceBody.Edges\n            EC.Add Edge\n        Next\n    Next\n    Dim CRD As CornerRoundDefinition\n    Dim Radius As Double\n    Radius = 1 / 32\n    Radius = InvDoc.UnitsOfMeasure.ConvertUnits(Radius, kInchLengthUnits, kCentimeterLengthUnits)\n    Set CRD = InvDoc.ComponentDefinition.Features.CornerRoundFeatures.CreateCornerRoundDefinition(EC, Radius)\n    Dim CRF As CornerRoundFeature\n    Set CRF = InvDoc.ComponentDefinition.Features.CornerRoundFeatures.Add(CRD)\nEnd Sub", "Public Sub Fillet()\n    Dim InvDoc As PartDocument\n    Set InvDoc = ThisApplication.ActiveDocument\n    Dim CD As Object\n    If InvDoc.ActivatedObject Is Nothing Then\n        Set CD = InvDoc.ComponentDefinition\n    Else\n        If InvDoc.ActivatedObject.Type = kFlatPatternObject Then\n            Set CD = InvDoc.ActivatedObject\n        End If\n    End If\n    Dim EC As EdgeCollection\n    Set EC = ThisApplication.TransientObjects.CreateEdgeCollection\n    For Each SurfaceBody In CD.SurfaceBodies\n        For Each Edge In SurfaceBody.Edges\n            EC.Add Edge\n        Next\n    Next\n    Dim CRD As CornerRoundDefinition\n    Dim Radius As Double\n    Radius = 1 / 32\n    Radius = InvDoc.UnitsOfMeasure.ConvertUnits(Radius, kInchLengthUnits, kCentimeterLengthUnits)\n    Set CRD = CD.Features.CornerRoundFeatures.CreateCornerRoundDefinition(EC, Radius)\n    Dim CRF As CornerRoundFeature\n    Set CRF = CD.Features.CornerRoundFeatures.Add(CRD)\nEnd Sub"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to lock views in drawing\n                    ", "solution": ["oView.SetDesignViewRepresentation(\"View1\", True)", "Public Sub Main()\n  ' Set a reference to the drawing document.\n  ' This assumes a drawing document is active.\n  Dim oDrawDoc As DrawingDocument\n  oDrawDoc = ThisApplication.ActiveDocument\n\n  'Set a reference to the active sheet.\n  Dim oSheet As Sheet\n  oSheet = oDrawDoc.ActiveSheet\n\n  ' Create a new NameValueMap object\n  Dim oBaseViewOptions As NameValueMap\n  oBaseViewOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n  ' Set the representations to use when creating the base view.\n  oBaseViewOptions.Add(\"PositionalRepresentation\", \"Position1\")\n  oBaseViewOptions.Add(\"DesignViewRepresentation\", \"View1\")\n  oBaseViewOptions.Add(\"DesignViewAssociative\", True)\n\n  ' Open the model document (corresponding to the \"LevelofDetail1\" representation).\n  Dim strFullDocumentName As String\n  strFullDocumentName = ThisApplication.FileManager.GetFullDocumentName(\"C:\\temp\\reps.iam\", \"LevelofDetail1\")\n\n  Dim oModel As Document\n  oModel = ThisApplication.Documents.Open(strFullDocumentName, False)\n\n  ' Create the placement point object.\n  Dim oPoint As Point2d\n  oPoint = ThisApplication.TransientGeometry.CreatePoint2d(25, 25)\n\n  ' Create a base view.\n  Dim oBaseView As DrawingView\n  oBaseView = oSheet.DrawingViews.AddBaseView(oModel, oPoint, 2, _\n                    ViewOrientationTypeEnum.kIsoTopLeftViewOrientation, _\n                    DrawingViewStyleEnum.kHiddenLineRemovedDrawingViewStyle,,, _\n                    oBaseViewOptions)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Using View Rep in an If then statement\n                    ", "solution": [], "author": "Scott_Stubbingt"},
{"created at": [], "solution Title": "\n                        Re: ilogic user parameters\n                    ", "solution": ["GoExcel.Open(\"filename.xlsx\", \"Sheet1\")\n\n'Here are some assumptions:\n\t' Column A contains the Parameter Name\n\t' Column B contains the Value\n\t' Column C contains the Units ", "\nDim row As Integer = 1   ' If first row contains column headers set row = 2, else row = 1\n\nDo While Len(GoExcel.CellValue(\"A\" & row)) > 0 ' loop through the excel rows until we hit an empty cell (will stop on first empty)\n\txlName = GoExcel.CellValue(\"A\" & row)\n\txlValue = GoExcel.CellValue(\"B\" & row)\n\txlUnits = GoExcel.CellValue(\"C\" & row)\n\t\n\tTry\n\t\ttest = Parameter(xlName) ' to see if the parameter exists, we'll try to get it's value, otherwise we'll go to catch...\n\t\tParameter(xlName) = xlValue 'this line will only execute if the param existed\n\tCatch\n\t\t'Parameter didn't exist in the file, so do nothing\n\tEnd Try\n\t\n\trow += 1 ' go to the next row (important! dont want an infinite loop do we...)\nLoop"], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: VB Net How to get Saved Autocad \"fast\" without opem\n                    ", "solution": ["Dim", " ", "StartTime", " ", "As", " ", "DateTime", "\n", "Dim", " ", "ElapsedTime", " ", "As", " ", "TimeSpan", "\n\n", "Dim", " ", "Ver", " ", "As", " ", "Long", " ", "=", " ", "0", "\n", "Ver", " ", "=", " ", "ThisApplication", ".", "FileManager", ".", "SoftwareVersionSaved", "(", "\"", "C:\\CAD WIP\\ADREF-000037.ipt", "\"", ")", ".", "Major", "\n\n", "'", "Capture the Elapsed Time here as follows", "\n", "ElapsedTime", " ", "=", " ", "Now", "()", ".", "Subtract", "(", "StartTime", ")", "\n", "MessageBox", ".", "Show", "(", "\"", "Software release is ", "\"", " ", "&", " ", "Ver", " ", "&", " ", "\"", ". Operation took ", "\"", " ", "&", " ", "ElapsedTime", ".", "TotalSeconds", " ", "&", " ", "\"", " Seconds", "\"", ", ", "\"\"", ")", "Public Sub ApprenticeOpenDocument()\nDim StartTime As Double, EndTime As Double\nStartTime = Timer\nDim oApprentice As New Inventor.ApprenticeServerComponent\nDim oDoc As ApprenticeServerDocument\nSet oDoc = oApprentice.Open(\"filename\")\nDim ver As String\nver = oDoc.SoftwareVersionSaved.Major\noDoc.Close\nEndTime = Timer\nDebug.Print \"Execution time in seconds: \", EndTime - StartTime & \" Major version: \" & ver\n'Result for a small file\n'Execution time in seconds:  0,00390625 Major version: 19\n'Result for a bigger file\n'Execution time in seconds:  1,484375 Major version: 19\nEnd Sub", "Public Sub ApprenticeFileManager()\nDim StartTime As Double, EndTime As Double\nStartTime = Timer\nDim oApprentice As New Inventor.ApprenticeServerComponent\nDim ver As String\nver = oApprentice.FileManager.SoftwareVersionSaved(\"filename\").Major\nEndTime = Timer\nDebug.Print \"Execution time in seconds: \", EndTime - StartTime & \" Major version: \" & ver\n'Result small file\n'Execution time in seconds:  0,00390625 Major version: 19\n'Result for a bigger file\n'Execution time in seconds:  0,3359375 Major version: 19\nEnd Sub", "Public Sub InventorFileManager()\nDim StartTime As Double, EndTime As Double\nStartTime = Timer\nDim ver As String\nver = ThisApplication.FileManager.SoftwareVersionSaved(\"filename\").Major\nEndTime = Timer\nDebug.Print \"Execution time in seconds: \", EndTime - StartTime & \" Major version: \" & ver\n'Result\n'Execution time in seconds:  0,01171875 Major version: 19\n'Result for bigger file\n'Execution time in seconds:  0,39453125 Major version: 19\nEnd Sub"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Store custom configuration in project file (designproject)\n                    ", "solution": [], "author": "psaarloos"},
{"created at": [], "solution Title": "\n                        Re: Component pattern using iLogic\n                    ", "solution": ["Select SvoebL\n\tCase >4900\n\t\tA_S_P = 5\n\tCase >3900\n\t\tA_S_P = 4\n\tCase >2600\n\t\tA_S_P = 3\n\tCase >1300\n\t\tA_S_P = 2\n\tCase <1300\n\t\tA_S_P = 1\nEnd Select"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2017: Set Default Section Properties\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Change Drawing Sheet name to match active file name\n                    ", "solution": ["Sub Main()", "'Purpose: Push file name to sheet name", "'21-Sept-16", "Dim", " oDoc As Document ", "=", " ", "ThisApplication.ActiveDocument", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "Dim", " ", "oDrawingView", " ", "As", " ", "DrawingView", "'Iterate through sheets\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDoc.Sheets", "    'Grab the first drawing view on the sheet\n    oDrawingView ", "=", " ", "oSheet", ".", "DrawingViews", "(", "1", ")", "    'Grab the model of the first drawing view\n    ", "oModel", " ", "=", " ", "oDrawingView.ReferencedDocumentDescriptor.ReferencedDocument ", "     'Assign the sheet name based off of the file name, with the path and extension removed\n    ", "oSheet.Name", " ", "=", " System.IO.Path.GetFileNameWithoutExtension(", "oModel.FullFileName)", "\n", "Next", "\u00a0", "\u00a0\u00a0", "End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Automated PDF export question\n                    ", "solution": ["Dim", " ", "PDF_Folder", " ", "As", " ", "String", "\n", "Dim", " ", "F_Finder", " ", "As", " ", "String", "\n", "If", " ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Project", "\"", ")", "=", " ", "NullString", "\n    ", "Goto", " ", "CalculateIt", "\n    ", "Else", "\n        ", "F_Finder", " ", "=", " ", "(", "Mid", "(", "oFileName", ",", "2", ",", "3", "))", "\n        ", "PDF_Folder", " ", "=", " ", "(", "Left", "(", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Project", "\"", ")", ",", "4", "))", "'", "Choose Preselected Folder", "\n    ", "Dim", " ", "oChoice", "\n    ", "Dim", " ", "ProjectChoice", " ", "As", " ", "New", " ", "ArrayList", "\n    ", "ProjectChoice", ".", "Add", "(\"Project 1\")", "\n    ", "ProjectChoice", ".", "Add", "(\"Project 2\")", "\n    \n    ", "oQuestion2", " ", "=", " ", "InputListBox", "(", "\"", "KIES HET PROJECT WAAR DE PDF/DWG MOET WORDEN OPGESLAGEN", "\"", ", ", "ProjectChoice", ", ", "ProjectChoice", ", ", "Title", " :", "=", " ", "\"", "KIES PROJECT", "\"", ", ", "ListName", " :", "=", " ", "\"", "ProjectChooser", "\"", ")", "\n    ", "oFolder", " ", "=", " ", "\"", "C:\\Temp\\", "\"", "&", " ", "oQuestion2", " ", "&", "\"", "\\Tekeningen Engineering\\2D Tekeningen\\", "\"", "\n    \n    ", "'", "oFolder = \"C:\\Temp\\\"& ProjectChoice(oChoice) &\"\\Tekeningen Engineering\\2D Tekeningen\\\""], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: iLOGIC Multiple BOM Part List Creator\n                    ", "solution": ["iLogicVb.UpdateWhenDone = True  \n\nDim bStyle As Boolean\nbStyle = InputRadioBox(\"Select one:\", \"Internal\", \"External\", True, \"iLogic\")\n\nDim sStye As String\n'set the parts list style names to use\nIf bStyle = True Then\n\tsStyle = \"PartsList_Internal\"\nElse\n\tsStyle = \"PartsList_External\"\nEnd If\n\n' Set a reference to the drawing document.    \n' This assumes a drawing document is active.    \nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\n'Set a reference to the active sheet.    \nDim oSheet As Sheet\noSheet = oDrawDoc.ActiveSheet\t\n\n' Set a reference to the first drawing view on    \n' the sheet. This assumes the first drawing    \n' view on the sheet is not a draft view.    \nDim oDrawingView As DrawingView\n\nTry\n\toDrawingView = oSheet.DrawingViews(1)\nCatch\n\tMessageBox.Show(\"No View found. Can not continue\", \"iLogic\")\n\tReturn\nEnd Try\n\n' Set a reference to th sheet's border    \nDim oBorder As Border\noBorder = oSheet.Border\n\nDim oPlacePoint As Point2d\n\nIf Not oBorder Is Nothing Then\n    ' A border exists. The placement point        \n\t' is the top-right corner of the border. \n\toOffset = -1.42875 'user defined offset\n\toX = oBorder.RangeBox.MaxPoint.X + oOffset\n\toY = oBorder.RangeBox.MaxPoint.Y\n\toPlacePoint = ThisApplication.TransientGeometry.CreatePoint2d(oX,oY)\nElse\n    ' There is no border \n\t \n\toPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(20, 20)\n     \n     iLogicVb.UpdateWhenDone = True\nEnd If\n\n' Get the style.\nDim oStyle As Style\nFor Each aStyle As Style In oDrawDoc.StylesManager.PartsListStyles\n    If aStyle.Name = sStyle Then\n        oStyle = aStyle\n        Exit For\n    End If\nNext\n\nDim oPartslist As PartsList\n\nTry\t\t\n\t'look for the first parts list found on the sheet \n\t'if succesful finding it, \n\t'tell the user,then Do Nothing\n\toPartslist = oSheet.PartsLists(1)\n\nCatch\n\t' Create the parts list.  \n\toPartsList = oSheet.PartsLists.Add(oDrawingView, oPlacePoint)\nEnd Try\n\n'set the style\noPartsList.Style = oStyle"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Hypothetical: Copy sketch blocks without duplication of user/renamed paramet\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: API Extrude Feature all closed Sketches\n                    ", "solution": ["''------------------------SW1---CUT2-------------------------\n\nDim oSketchWC2 As PlanarSketch\noSketchWC2 = oSketches.Item(\"CUT2_SW1_S\")\n\nDim oProfileWC2 As Profile\noProfileWC2 =oSketchWC2.Profiles.AddForSolid(True)\n\nDim oExtrudeWC2 As ExtrudeFeature = Feature.InventorFeature(\"CUT2_SW1\")\noExtrudeWC2.Profile = oProfileWC2\n\n'-------------------------------SW1---CUT1---------------------------------\n\nDim oSketchWC1 As PlanarSketch\noSketchWC1 = oSketches.Item(\"CUT_SW1_S\")\n\nDim oProfileWC1 As Profile\noProfileWC1 =oSketchWC1.Profiles.AddForSolid\n\nDim oExtrudeWC1 As ExtrudeFeature = Feature.InventorFeature(\"CUT_SW1\")\noExtrudeWC1.Profile = oProfileWC1\n\n\n\n\nRuleParametersOutput()\nInventorVb.DocumentUpdate()\n\n\n''------------------------SW1---ADD-------------------------"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Create Text/sketch on a face in a assembly with iLogic\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Tell me about GoExcel.CellValue(\"cellnumber\") (without specifying\n                    ", "solution": [], "author": "RobertLeeWheatl"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule Object reference not set to an instance of an object\n                    ", "solution": ["Dim", " ", "oSheets", " ", "As", " ", "Sheets", " ", "=", " ", "ThisDrawing", ".", "Document", ".", "sheets", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n\n\n", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oSheets", "\n    ", "oSheet", ".", "activate", "\n    ", "Dim", " ", "oDrawingView", " ", "As", " ", "DrawingView", " ", "=", " ", "oSheet", ".", "DrawingViews", "(", "1", ")", "\n    ", "oModel", " ", "=", " ", "ActiveSheet", ".", "View", "(", "oDrawingView", ".", "Name", ")", ".", "ModelDocument", "\n    \n    ", "EquipName", " ", "=", " ", "iProperties", ".", "Value", "(", "oModel", ".", "DisplayName", ", ", "\"", "Summary", "\"", ", ", "\"", "Comments", "\"", ")", "\n    ", "MsgBox", "(", "\"", "Here", "\"", ")", "\n    ", "EquipName1", "=", "Left", "(", "EquipName", ",", "3", ")", "\n    ", "'", "MessageBox.Show(EquipName1)", "\n    \n    \n    \n\n    ", "ActiveSheet", ".", "Sheet", ".", "Name", " ", "=", " ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "EQUIP_CAT", "\"", ")", " ", "&", "\"", "-", "\"", "&", " ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "DWG_EQUIP_NAME", "\"", ")", " ", "&", " ", "\"", "-", "\"", " ", "&", " ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "DERIVATIVE", "\"", ")", " ", "&", " ", "\"", "-", "\"", " ", "&", " ", "EquipName1", "\n", "Next"], "author": "timothy.berg"},
{"created at": [], "solution Title": "\n                        Re: iLogic, make extrusion on Flat Pattern\n                    ", "solution": ["Dim oDoc As PartDocument = ThisDoc.Document\nDim oDef As SheetMetalComponentDefinition = oDoc.ComponentDefinition\nDim oSK As Sketch = oDef.FlatPattern.Sketches(1)\nDim oProfile As Profile = oSK.Profiles.AddForSolid\nDim oExtrudeDef As ExtrudeDefinition = oDef.", "FlatPattern", ".Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, kJoinOperation)\nCall oExtrudeDef.SetDistanceExtent(0.25, kPositiveExtentDirection)\noExtrude = oDef.", "FlatPattern", ".Features.ExtrudeFeatures.Add(oExtrudeDef)"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Multiple view Representation and positional Representations\n                    ", "solution": ["Public Sub ViewRep()\n\nIf ThisApplication.ActiveDocumentType <> kAssemblyDocumentObject Then\nMsgBox \"An Assembly Mustbe Active\"\nEnd\nEnd If\nDim oAsmDoc As AssemblyDocument\nSet oAsmDoc = ThisApplication.ActiveDocument\n\nDim oCompDef As RepresentationsManager\nSet oCompDef = oAsmDoc.ComponentDefinition.RepresentationsManager\n\nDim oDesignViewRep As DesignViewRepresentation\nSet oDesignViewRep = oCompDef.DesignViewRepresentations.Add(\"Stub 100\")\n", "Set", " oDesignViewRep = oCompDef.DesignViewRepresentations.Add(\"Stub 200\")\n", "Set", " oDesignViewRep = oCompDef.DesignViewRepresentation", "s", ".Add(\"Stub 300\")\n", "Set", " oDesignViewRep = oCompDef.DesignViewRepresentation", "s", ".Add(\"Stub 400\")\n", "Set", " oDesignViewRep = oCompDef.DesignViewRepresentation", "s", ".Add(\"Stub 500\")\n", "Set", " oDesignViewRep = oCompDef.DesignViewRepresentation", "s", ".Add(\"Main Bom Stub 600\")\n\nEnd Sub"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: questions abot leader notes\n                    ", "solution": ["Dim", " ", "sText", " ", "=", " ", "\"", "1 ", "\"", " ", "&", " ", "Chr", "(", "34", ")", " ", "&", " ", "vbCr", " ", "&", " ", "\"", "BSPP", "\""], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: Set custom properties by ilogic in other assembly parts.\n                    ", "solution": [" ", "openDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n    \n    ", "Dim", " ", "docFile", " ", "As", " ", "Document", "\n    ", "For", " ", "Each", " ", "docFile", " ", "In", " ", "openDoc", ".", "AllReferencedDocuments", "\n    \n    ", "Dim", " ", "invCustomPropertySet", " ", "As", " ", "PropertySet", "=", " ", "docFile", ".", "PropertySets", ".", "Item", "(", "\"", "Inventor User Defined Properties", "\"", ")", "\n        ", "Try", "\n            ", "Dim", " ", "invVolumeProperty", " ", "As", " ", "Inventor", ".", "Property", " ", "=", " ", "invCustomPropertySet", ".", "Item", "(", "\"", "klant", "\"", ")", "\n            ", "invVolumeProperty", ".", "Value", " ", "=", " ", "\"", "Test1", "\"", "\n        ", "Catch", "\n            ", "Call", " ", "invCustomPropertySet", ".", "Add", "(", "\"", "Test1", "\"", ", ", "\"", "klant", "\"", ")", "\n        ", "End", " ", "Try", "\n    ", "Next"], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: iLogic To Update Mass Properties With Include QTY Overrides\n                    ", "solution": ["Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n\t\n'Set a reference To the mass properties Object.\nDim oMassProps As MassProperties\noMassProps = oDoc.ComponentDefinition.MassProperties\n\n'Set option to include quantity overrides in mass property update.\noMassProps.IncludeQuantityOverrides() = True\nDryMass = oMassProps.Mass()\n\niProperties.Value(\"Custom\", \"MASS (DRY)\") = DryMass\niProperties.Value(\"Custom\", \"MASS (OPERATING)\") = DryMass + Parameter(\"OPERATING_FLUID_MASS\")\niProperties.Value(\"Custom\", \"MASS (HYDROTEST)\") = DryMass + Parameter(\"HYDROTEST_FLUID_MASS\")"], "author": "kwalker1"},
{"created at": [], "solution Title": "\n                        Re: iLogic to Set Model Scale to Best Fit\n                    ", "solution": [], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: Differentiate sheet metal parts in iLogic\n                    ", "solution": ["Sub Main()\n\tDim oDoc As PartDocument\n\toDoc = ThisDoc.Document\n\t'ensure this part is a Sheet Metal Part\n\tIf oDoc. SubType = \"{4D29B490-49B2-11D0-93C3-7E0706000000}\"\n\t\tExit Sub\n\tEnd If\n\t\n\tDim oSMDef As SheetMetalComponentDefinition\n\toSMDef = oDoc.ComponentDefinition\n\t\n\t'Determines if there is a flat pattern\n\tIf oDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n\t\tIf oSMDef.FlatPattern Is Nothing Then\n\t\t\t'No Flat Pattern Exists\n\t\t\tMakeFlatPattern\n\t\tElse\n\t\t\t'There is a Flat Pattern\n\t\t\tGetExtents\n\t\t\tGetThickness\n\t\tEnd If\n\tElse \n\t\tMessageBox.Show(\"Else - Dit is GEEN Flat Pattern\", \"Title\")\n\tEnd If\nEnd Sub\n\nSub GetExtents()\n\textents_length = SheetMetal.FlatExtentsLength\n\textents_width = SheetMetal.FlatExtentsWidth\n\tLengthFrac = Round(SheetMetal.FlatExtentsLength, 0)\n\tWidthFrac = Round(SheetMetal.FlatExtentsWidth, 0)\n\tDim oValue As String\n\tDim param As Parameter\n\t\n\t\tIf extents_width > extents_length Then\n\t\t\toValue = (WidthFrac & \"x\" & LengthFrac)\n\t\t\t\n\t\t\tiProperties.Value(\"Custom\", \"DIMENSIONS\") = oValue\n\t\tElse\n\t\t\toValue = (LengthFrac & \"x\" & WidthFrac)\n\t\t\tiProperties.Value(\"Custom\", \"DIMENSIONS\") = oValue\n\tEnd If\nEnd Sub\n\nSub GetThickness()\n\t'Get sheet Metal Thickness - Set Description as SHEET \"Thickness\"mm\n\tDim oThickness As String\n\toThickness = Parameter(\"Thickness\")\n\tiProperties.Value(\"Project\", \"Description\") = \"SHEET \" & oThickness  & \"mm\"\nEnd Sub\n\n\nSub MakeFlatPattern()\n\tDim oDoc As PartDocument\n\toDoc = ThisDoc.Document\n\tDim oSMDef As SheetMetalComponentDefinition\n    oSMDef = oDoc.ComponentDefinition\n    Try \n\t\toSMDef.Unfold\n\t\toSMDef.FlatPattern.ExitEdit\n\tCatch\n\t\t'Failed to make Flat Pattern\n\t\tMessageBox.Show(\"Failed to make a Flat Pattern\", \"ERROR\")\n\tEnd Try\nEnd Sub"], "author": "machiel.veldkam"},
{"created at": [], "solution Title": "\n                        Re: Link between view Representation and Positional representation via ilogic\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Resolve file by API\n                    ", "solution": ["Sub main()\n    Dim assemdoc As AssemblyDocument\n    Set assemdoc = ThisApplication.ActiveDocument\n    \n    Dim oCCs As ComponentOccurrences\n    Dim occ As ComponentOccurrence\n    \n    Dim Path As String\n    Dim Filename As String\n    Dim FullFileName As String\n    Dim Resolvedfile As String\n    \n    Set oCCs = assemdoc.ComponentDefinition.Occurrences\n    \n    Path = \"C:\\Temp\\\"   'The path which contains the unresolved file\n    \n    For Each occ In oCCs\n      ' check for missing reference.\n        If occ.ReferencedDocumentDescriptor.ReferenceMissing = True Then ' This will return true for unresolved and suppressed.\n         \n            FullFileName = occ.ReferencedDocumentDescriptor.FullDocumentName 'Get the full document name\n           \n            Filename = Right$(FullFileName, Len(FullFileName) - InStrRev(FullFileName, \"\\\"))  ' Extract the filename from the full filename.\n             \n            Resolvedfile = ThisApplication.DesignProjectManager.ResolveFile(Path, Filename)  'Resolve file. Full file name is returned. Null will be returned if cannot be resolved.\n              \n            Call occ.Replace(Resolvedfile, False)  ' replace unresolved occurrence with the resolvedfile\n            \n        End If\n      \n    Next\n\nEnd Sub"], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: multi sheet browser name in i logic\n                    ", "solution": ["For", " ", "Each", " ", "oSheet", " ", "In", " ", "ThisApplication", ".", "ActiveDocument", ".", "Sheets", "\n    ", "If", " ", "oSheet", ".", "DrawingViews", ".", "Count", " ", "=", " ", "0", "\n         ", "'", "Next Sheet", "\n    ", "Else", "\n        ", "oModelDoc", " ", "=", " ", "oSheet", ".", "DrawingViews", ".", "Item", "(", "1", ")", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", "\n        ", "oDescription", " ", "=", " ", "oModelDoc", ".", "PropertySets", "(", "\"", "Design Tracking Properties", "\"", ")(", "\"", "Description", "\"", ")", ".", "Value", "\n        ", "If ", "oDescription ", "<>", " ", "\"\"", " ", "             oSheet", ".", "Name", " ", "= ", "oDescription", "        Else", " ", "             oSheet", ".", "Name", " ", "=", " ", "\"", "xxx-NoDescription", "\"", "        End", " ", "If", "    End", " ", "If", "Next"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Getting Started with Inventor API\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Detect activate sheet in an idw\n                    ", "solution": [], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Document.Open Property\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: move part position and angle in assembly\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Using Entity Framework with a library(Dll) referenced to an iLogic rule\n                    ", "solution": [], "author": "YvesGingras"},
{"created at": [], "solution Title": "\n                        Re: Flat Pattern Export check\n                    ", "solution": [], "author": "b.graaf"},
{"created at": [], "solution Title": "\n                        Re: Ilogic rule in part running in drawing\n                    ", "solution": ["Sub Main\n\t\tDim oInvApp As Application\n        oInvApp = ThisApplication\n' Get the active document object\n        Dim oDoc As Document\n        oDoc = oInvApp.ActiveDocument\n\n\t\tIf oDoc.DocumentType() = DocumentTypeEnum.kAssemblyDocumentObject Then\n\t\tiProperties.Value(\"Custom\",\"KFactor\")= \"Nvt\"\n\t\tExit Sub\n\t\tEnd If\n'Check if part is purchased or not\n\t\tWorkpath= \"I:\\Engineering\\\"\n\t\tIf Left(ThisDoc.Path,15)=WorkPath Then\n\t\tExit Sub\n\t\tEnd If\n\n'Check for sheetmetal part\n\t\tDim oType As String\n\t\toType = oDoc.DocumentSubType.DocumentSubTypeID\n\t\n\t\tIf oType =  \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n\t\tiProperties.Value(\"Custom\", \"X_Maat\") = SheetMetal.FlatExtentsLength\n\t\tiProperties.Value(\"Custom\", \"Y_Maat\") = SheetMetal.FlatExtentsWidth\n\t\tDim oSMDef As SheetMetalComponentDefinition\n\t\toSMDef = oDoc.ComponentDefinition\n\t\toSMDef.FlatPattern.ExitEdit\n\t\tiProperties.Value(\"Custom\", \"Part_Dimension\")=\"Plaat \" & Round(iProperties.Value(\"Custom\", \"X_Maat\"),1) & \"x\" & Round(iProperties.Value(\"Custom\", \"Y_Maat\"),1) & \"x\" & Parameter(\"Thickness\")\n\t\tiProperties.Value(\"Custom\",\"KFactor\")=SheetMetal.ActiveKFactor\t\n\t\tElse\n\t\tiProperties.Value(\"Custom\",\"KFactor\")= \"Nvt\"\t\n\t\tEnd If\n\t\tiLogicVb.UpdateWhenDone = True\nEnd Sub", "Sub Main()\nIf iProperties.Value(\"Project\", \"Part Number\") = \"\" Then\nExit Sub\nElse\ncurDoc = ThisDrawing.Sheet(\"sheet:1\").View(\"VIEW1\").ModelDocument\n\t\n\tIf curDoc.DocumentType = kPartDocumentObject And curDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n\t\toDoc = ThisApplication.Documents.Open(curDoc.FullFileName, True)\n\t\toCompDef = oDoc.ComponentDefinition\n\t\tiLogicVb.RunExternalRule(\"Drawingnumber\")\n\t\tThisApplication.ActiveDocument.Close\n\tElse\n\tReturn\n\tEnd If\nEnd If\nEnd Sub", "Dim", " ", "oDoc", " ", "As", " ", "AssemblyDocument 'Or PartDocument", "\n\n", "If", " ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "Filename", "\"", ")", "=", "\"\"", " ", "Then", "\n    ", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveEditDocument", "\n    ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "Filename", "\"", ")", "=", "oDoc", ".", "FullDocumentName", "\n", "Else", ": ", "oDoc", "=", " ", "ThisApplication", ".", "Documents", ".", "ItemByName", "(", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "Filename", "\"", "))", "\n", "End", " ", "If"], "author": "t.marxAJ98N"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic to rename occurence - help\n                    ", "solution": ["Dim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\nDim oOccurrence As ComponentOccurrence\nFor Each oOccurrence In oAsmCompDef.Occurrences\n\tIf InStr(oOccurrence.Name, \"_\") > 0 Then\n\t\toOccurrence.Name = Replace(oOccurrence.Name, Left(oOccurrence.Name, InStr(oOccurrence.Name, \"_\")), \"Framework_\")\n\tEnd If\nNext"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: How to get part position\n                    ", "solution": ["Sub Main()\n\nOn Error Goto Handler:\n\tDim oDoc As AssemblyDocument\n\toDoc = ThisApplication.ActiveDocument\n\t\n\tIf oDoc Is Nothing Then\n        Exit Sub\n    End If\n    \n    'Ensure you are at the right point to select objects.\n    Select Case True\n        Case Not oDoc.ActivatedObject Is Nothing\n            If oDoc.ActivatedObject.Type = ObjectTypeEnum.kDocumentObject Then\n                oDoc = oDoc.ActivatedObject\n            Else\n                MsgBox (\"Invalid active object\")\n                Exit Sub\n            End If\n        Case oDoc.ActivatedObject Is Nothing\n            'Continue without revising anything\n        Case Else\n            MsgBox (\"Invalid Activated Object!\")\n    End Select\nOn Error Goto 0\n\n    Dim oSS As SelectSet\n    oSS = oDoc.SelectSet\n      If oSS.Count >= 1\n\n\t\tCall ProcessBulkLocations(oSS)\n      End If\n\t\n\t\n\tExit Sub\nHandler:\n\tMsgBox(\"Doc Not an Assembly!\")\nEnd Sub\n\nSub ProcessBulkLocations(oSS As SelectSet)\n    For Each oItem In oSS\n        If oItem.Type = ObjectTypeEnum.kComponentOccurrenceObject Then\n\n           \tCall GetOccOrigin(oItem)\n        End If\n    Next\nEnd Sub\n\nSub GetOccOrigin(oOcc As ComponentOccurrence)\n\n\tDim oUOM As UnitsOfMeasure\n\toUOM = ThisApplication.ActiveDocument.UnitsOfMeasure\n\n\t' Get the current transformation matrix from the occurrence.\n   \tDim oTransform As Matrix\n   \toTransform = oOcc.Transformation\n\n\tDim oOriginLocation As Vector\n\toOriginLocation = oTransform.Translation\n\n\tptX = oUOM.ConvertUnits(oOriginLocation.X, \"cm\", \"in\")\n\tptY = oUOM.ConvertUnits(oOriginLocation.Y, \"cm\", \"in\")\n\tptZ = oUOM.ConvertUnits(oOriginLocation.Z, \"cm\", \"in\")\n\n\tMsgBox(ptX & vbLf & ptY & vbLf & ptZ)\n   \t' Move the occurrence honoring any existing constraints.\n   \t''oTransform.SetTranslation ThisApplication.TransientGeometry.CreateVector(2, 2, 3)\n   \t''oOccurrence.Transformation = oTransform\n\n   \t' Move the occurrence ignoring any constraints.\n   \t'Anything that causes the assembly to recompute will cause the\n   \t'occurrence to reposition itself to honor the constraints.\n   \t''oTransform.SetTranslation ThisApplication.TransientGeometry.CreateVector(3, 4, 5)\n   \t''Call oOccurrence.SetTransformWithoutConstraints(oTransform)\n\nEnd Sub\n"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: Derived Unit conversions\n                    ", "solution": ["Public Sub UnitTest()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    Dim uom As UnitsOfMeasure\n    Set uom = partDoc.UnitsOfMeasure\n    \n    Dim result As Double\n    Dim Angular_SR As Double\n    Dim strDisplay As String\n    Angular_SR = partDoc.ComponentDefinition.Parameters.Item(\"Angular_SR\").value\n    strDisplay = uom.GetStringFromValue(Angular_SR, \"lbforce in/deg\")\n    result = uom.ConvertUnits(Angular_SR, \"N cm/rad\", \"lbforce in/deg\")\n    Debug.Print result & \", \" & strDisplay\n    strDisplay = uom.GetStringFromValue(Angular_SR, \"N cm/rad\")\n    result = uom.ConvertUnits(Angular_SR, \"N cm/rad\", \"N cm/rad\")\n    Debug.Print result & \", \" & strDisplay\n    result = uom.ConvertUnits(Angular_SR, \"N cm/rad\", \"N mm/deg\")\n    strDisplay = uom.GetStringFromValue(Angular_SR, \"N mm/deg\")\n    Debug.Print result & \", \" & strDisplay\n    \n    Debug.Print uom.GetStringFromValue(1, \"N\")\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Extract parts of material name and populate iProperties\n                    ", "solution": [], "author": "dean.morrison"},
{"created at": [], "solution Title": "\n                        Re: Ilogic - How to add user parameter to view label name\n                    ", "solution": [], "author": "saso"},
{"created at": [], "solution Title": "\n                        Re: 'Path' is a type and cannot be used as an expression\n                    ", "solution": ["Dim curFile As String = \"c:\\temp\\test.txt\"\nConsole.WriteLine(If(File.Exists(curFile), \"File exists.\", \"File does not exist.\"))"], "author": "KristopherReave"},
{"created at": [], "solution Title": "\n                        Re: General Question - iLogic Reference Info?  Where to find?\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Betreff: Calling Our Standard Drawing Template\n                    ", "solution": ["S://Engineering Drawings//Inventor 2015//2015 templates/New Part.idw"], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: Inventor VBA list of \"pick\" filters\n                    ", "solution": [], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Trim solid with a plane using VBA\n                    ", "solution": ["Dim oInvApp As Application\noInvApp = ThisApplication\n\nDim oDoc As PartDocument\noDoc = oInvApp.ActiveDocument\n\nDim oDef As PartComponentDefinition\noDef = oDoc.ComponentDefinition\n\nFor Each oSurfaceBody As SurfaceBody In oDef.SurfaceBodies\n\tMsgBox(oSurfaceBody.Name)\nNext"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Open Inventor 2017 assembly in Expressmode\n                    ", "solution": ["Dim oINVapp As inventor.Application", "Set oINVapp = GetObject(, \"Inventor.Application\")", "'Create a Transient object\nDim oTransientObj As inventor.TransientObjects\nSet oTransientObj = oINVapp.TransientObjects", "\n'Create a NameValueMap object\nDim oOptions As inventor.NameValueMap\nSet oOptions = oTransientObj.CreateNameValueMap\n", "'Get extension of the filename\nDim strExtension As String\nstrExtension = Right(UCase(strFilename), 3)", "\n'set the options to open file fast\nSelect Case strExtension\n Case \"DWG\"\n     oOptions.Add \"FastOpen\", True\nCase \"IAM\"\n     'read registry setting \"Open Express when referenced unique files exceeds\"\n     Dim oRegistry As Object\n     Set oRegistry = CreateObject(\"WScript.Shell\")\n     Dim GetExpressModeSetting As Integer\n     GetExpressModeSetting = oRegistry.RegRead(\"HKEY_CURRENT_USER\\SOFTWARE\\Autodesk\\Inventor\\RegistryVersion21.0\\System\\Preferences\\Assembly\\AssemblyLiteMinimumDocCount\")\n\n     'check the count of referenced files in this assembly if smaller then GetExpressModeSetting then load in Full Mode\n     Dim ReferencedDocumentCounter As Integer\n     ReferencedDocumentCounter = oINVapp.FileManager.ReferencedDocumentCount(strFilename)\n\n     If ReferencedDocumentCounter > GetExpressModeSetting Then oOptions.Add \"ExpressModeBehavior\", \"OpenExpress\"\nEnd Select\n\n'open file\nSet oINVDoc = oINVapp.Documents.OpenWithOptions(strFilename, oOptions, True)"], "author": "saso"},
{"created at": [], "solution Title": "\n                        Re: find out if a step file has been imported\n                    ", "solution": [], "author": "C-Hoppen"},
{"created at": [], "solution Title": "\n                        Re: Custom iProperties Linked to Vault\n                    ", "solution": [], "author": "rtowne72"},
{"created at": [], "solution Title": "\n                        Re: Create every possible instance of a Content Center Part\n                    ", "solution": ["        'active assembly s\n        Dim oMainAsm As AssemblyDocument = ThisDoc.Document\n        Dim oAsmDef As AssemblyComponentDefinition = oMainAsm.ComponentDefinition\n\n        ' get the occurrence by its position in the occurrences collection\n        Dim oOcc As ComponentOccurrence = oAsmDef.Occurrences.Item(1)\n        Dim oDef As PartComponentDefinition = oOcc.Definition\n        Dim oDoc As PartDocument = oDef.Document\n\n        'reference to the CC properties - oProps\n        Dim oPropSets As PropertySets = oDoc.PropertySets\n        Dim oProps As PropertySet = oPropSets.Item(\"Content Library Component Properties\")\n\n        ' family id\n        Dim oProp As Inventor.Property = oProps.Item(\"FamilyId\")\n        Dim FamilyId As String = oProp.Value\n        'MsgBox(\"FamilyId: \" + FamilyId)\n\n        'reference to the ContentFamily\n        Dim oContentCenter As ContentCenter = ThisApplication.ContentCenter\n        Dim oFamily As ContentFamily = oContentCenter.GetContentObject(\"v3#\" + FamilyId + \"#\")\n        'MsgBox(\"Content Family DisplayName:  \" + oFamily.DisplayName & vbNewLine & _'        \"Rows in Family:  \" & oFamily.TableRows.Count )'\n        ''create new member file\n        Dim ErrorType As MemberManagerErrorsEnum\n        Dim strContentPartFileName As String\n        Dim strErrorMessage As String\n\n        ' Do a loop here for all the rows.\n        For i As Integer = 1 To oFamily.TableRows.Count\n            strContentPartFileName = oFamily.CreateMember(i, ErrorType, strErrorMessage)\n        Next\n\n        ' Msgbox to alert the process is done.\n        MsgBox(\"All \" & oFamily.TableRows.Count & \" c/c family items are created.\")"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Use a form to trigger a rule\n                    ", "solution": ["i = MessageBox.Show(\"Do you want to save the pdf?\", \"Save pdf\", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)\n\nIf i = 6 Then\nMessageBox.Show(\"you clicked yes, so the pdf will be created.\")\nElseIf i = 7\nMessageBox.Show(\"you clicked no, nothing will happen.\")\nEnd If"], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: install library of standard elements\n                    ", "solution": [], "author": "TravisNave"},
{"created at": [], "solution Title": "\n                        Re: Save As Operation in VBA\n                    ", "solution": ["Sub RunCommand()\n    ' Get the CommandManager object.\n    Dim oCommandMgr As CommandManager\n    Set oCommandMgr = ThisApplication.CommandManager\n\n    ' Get control definition for the line command.\n    Dim oControlDef As ControlDefinition\n    Set oControlDef = oCommandMgr.ControlDefinitions.Item(\"AppFileSaveAsCmd\")\n    ' Execute the command.\n    Call oControlDef.Execute\nEnd Sub"], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: Create a complete list of all available Content Centre parts\n                    ", "solution": ["Private Sub Main()\n\n\t\tDim oInvApp As Inventor.Application = ThisApplication\n\t\t\n        Dim oContentCenter As ContentCenter\n        oContentCenter = oInvApp.ContentCenter\n\n        Families = New List(Of Family)\n        ReadContentCenter (oContentCenter.TreeViewTopNode)\n        ListToExcel()\n    End Sub\n\n\tPrivate Families As List(Of Family)\n\n    Private Class FamilyMember\n        Public Property FileName\n        Public Property PartNumber\n        Public Property Description\n    End Class\n\n    Private Class Family\n        Public Property Name\n\t\t\n        Public Property Members As List(Of FamilyMember)\n\n        Public Sub New()\n            Members = New List(Of FamilyMember)\n        End Sub\n    End Class\n\n    Private Sub ReadContentCenter(ByVal Node As ContentTreeViewNode)\n        For Each oNode As ContentTreeViewNode In Node.ChildNodes\n            If oNode.Families.Count > 0 Then\n                For Each oFamily As ContentFamily In oNode.Families\n                    Dim Family As New Family\n                    Family.Name = oFamily.DisplayName\n\n                    Dim oColumnNumber(2) As Integer\n                    oColumnNumber = GetColumnNumbers(oFamily)\n\n                    For Each oMember As ContentTableRow In oFamily.TableRows\n                        Dim FamilyMember As New FamilyMember\n                        Try\n                            FamilyMember.FileName = oMember.GetCellValue(oColumnNumber(0))\n                        Catch ex As Exception\n                            FamilyMember.FileName = \"#N/A\"\n                        End Try\n\n                        Try\n                            FamilyMember.PartNumber = oMember.GetCellValue(oColumnNumber(1))\n                        Catch ex As Exception\n                            FamilyMember.PartNumber = \"#N/A\"\n                        End Try\n\n                        Try\n                            FamilyMember.Description = oMember.GetCellValue(oColumnNumber(2))\n                        Catch ex As Exception\n                            FamilyMember.Description = \"#N/A\"\n                        End Try\n\n                        Family.Members.Add (FamilyMember)\n\n                    Next\n\n                    Families.Add (Family)\n\n                Next\n            End If\n\n            If oNode.ChildNodes.Count > 0 Then\n                ReadContentCenter (oNode)\n            End If\n\n        Next\n\n    End Sub\n\n    Private Function GetColumnNumbers(ByVal oFamily As ContentFamily) As Integer()\n\n        Dim oColumnNumbers(2) As Integer\n        Dim oFlag(2) As Boolean\n        oFlag(0) = False\n        oFlag(1) = False\n        oFlag(2) = False\n\n        For i As Integer = 1 To oFamily.TableColumns.Count\n            If oFamily.TableColumns.Item(i).InternalName = \"FILENAME\" Then\n                oColumnNumbers(0) = i\n                oFlag(0) = True\n            ElseIf oFamily.TableColumns.Item(i).InternalName = \"PARTNUMBER\" Then\n                oColumnNumbers(1) = i\n                oFlag(1) = True\n            ElseIf oFamily.TableColumns.Item(i).InternalName = \"DESCRIPTION\" Then\n                oColumnNumbers(2) = i\n                oFlag(2) = True\n            End If\n            If oFlag(0) And oFlag(1) And oFlag(2) Then\n                Exit For\n            End If\n        Next\n\n        GetColumnNumbers = oColumnNumbers\n    End Function\n\n    Private Sub ListToExcel()\n\n        Dim oExcel As Object = CreateObject(\"Excel.Application\")\n\t\toExcel.Visible = True\n\n        Dim oWorkbook As Object\n        oWorkbook = oExcel.Workbooks.Add()\n\n        Dim oSheet As Object\n        oSheet = oWorkbook.Sheets.Item(1)\n\n        Dim oCount As Integer = 2\n\t\n        For Each Family In Families\n            For Each FamilyMember In Family.Members\n                oSheet.Range(\"A\" & oCount).Value = Family.Name\n                oSheet.Range(\"B\" & oCount).Value = FamilyMember.FileName\n                oSheet.Range(\"C\" & oCount).Value = FamilyMember.PartNumber\n                oSheet.Range(\"D\" & oCount).Value = FamilyMember.Description\n\n                oCount = oCount + 1\n            Next\n        Next\n\t\t\n\t\toExcel = Nothing\n    End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Do While statement case\n                    ", "solution": ["Select Case RealValue\n\u00a0\u00a0\u00a0 Case < TargetValue\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Do While RealValue =< TargetValue\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 pDistance = pDistance - .1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0RuleParametersOutput()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0InventorVb.DocumentUpdate(True)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Loop\n\n\u00a0\u00a0\u00a0 Case > TargetValue\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Do While RealValue >= TargetValue\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 pDistance = pDistance + .1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 RuleParametersOutput()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0InventorVb.DocumentUpdate(True)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Loop\nEnd Select"], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: 2D drawing L+R\n                    ", "solution": [], "author": "robert.vdrijst"},
{"created at": [], "solution Title": "\n                        Re: Automating Drawing View Scale\n                    ", "solution": ["Dim oPartDoc As PartDocument\nDim oDrawingDoc As DrawingDocument\nDim oSheet As sheet\nDim oBaseView As DrawingView\nDim oUOM As UnitsOfMeasure\nDim oTG As TransientGeometry\n\noTG = ThisApplication.TransientGeometry\nDWGcreate = MsgBox (\"Would You Like To Create A Drawing From This Part?\" & vbLf & vbLf & \"This Will Create a Base, Side & ISO View\", vbYesNo, \"User Prompt\")\n\nIf DWGcreate = vbYes Then\n\toPartdoc = ThisApplication.ActiveDocument \n\toDrawingDoc = ThisApplication.Documents.Add(kDrawingDocumentObject, \"C:\\Users\\Public\\Documents\\Autodesk\\Inventor 2015\\Templates\\B Template.idw\", True)\n\toDrawingDoc.Activate()\n\t\n\toSheet = oDrawingDoc.Sheets.Item(1)\n\t\n\toPoint1 = oTG.CreatePoint2d (12,15)\n\t\n\toUOM = oPartDoc.UnitsOfMeasure\n\toA1ParamConverted = oUOM.ConvertUnits(oPartDoc.ComponentDefinition.Parameters(\"A1\").Value, \"cm\", \"in\")\n\t\n\tIf oA1ParamConverted <= 25\n\t\toScale = 1/4\n\tElse\n\t\toScale = 1/8\n\tEnd If\n\t\n\toBaseView = oSheet.DrawingViews.AddBaseView(oPartdoc, oPoint1, oScale, ViewOrientationTypeEnum.kTopViewOrientation, DrawingViewStyleEnum.kHiddenLineDrawingViewStyle)\n\t\n\tDim oRightView As DrawingView\n\tDim oPoint2 = oTG.CreatePoint2d (25,15)\n\tDim RightView = oSheet.DrawingViews.AddProjectedView(oBaseView,oPoint2,DrawingViewStyleEnum.kFromBaseDrawingViewStyle)\n\t\n\tDim oIsoView As DrawingView\n\tDim oPoint3 = oTG.CreatePoint2d (35,22)\n\toSheet.DrawingViews.AddProjectedView(oBaseView,oPoint3,DrawingViewStyleEnum.kShadedDrawingViewStyle)\n\t\n\tdwgretrieve = MsgBox (\"Would You Like To Dimension Drawing?\" & vbLf & vbLf & \"This will Retrieve The Dimensions on Base View\", vbYesNo, \"User Prompt\")\n\tIf dwgretrieve = vbYes Then\n\t\toSheet.drawingdimensions.generaldimensions.retrieve(oBaseView)\n\tEnd If\nEnd If"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: ILOGIC add revison line and update to part\n                    ", "solution": ["    \n'ADD REVISION'\nDim oDrawDoc As DrawingDocument = ThisApplication.ActiveDocument\n", "If oDrawDoc.Activesheet.RevisionTables.Count = 0", "       Exit Sub", "End if", "\nDim oRevTable As RevisionTable = oDrawDoc.ActiveSheet.RevisionTables.Item(1)\n\nDim oRow As RevisionTableRow\noRow = oRevTable.RevisionTableRows.Item(oRevTable.RevisionTableRows.Count)\n\nDim oRows As RevisionTableRows = oRevTable.RevisionTableRows\noRows.Add()\n\n'SYNC REVISION TO PART'\nDim odoc As Document\nTry\noDoc = ThisDrawing.ModelDocument\noDoc.PropertySets.Item(\"Summary Information\").Item(\"Revision Number\").Value = oDrawdoc.PropertySets.Item(\"Summary Information\").Item(\"Revision Number\").Value\nCatch\nEnd Try\n    "], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Looking For An Easy Way To Select & Hide Components Within An Assembly D\n                    ", "solution": ["' This rule will seek out a specified component, and will run the FindAndHideComponents(sCompName) macro to hide it.\nInventorVb.RunMacro(\"DocumentProject\", \"Module1\", \"FindAndHideComponents\", hide_this_component)", "'", " This rule will run a few macros to locate a folder in the Browser window that has the same name as hide_this_folder.", "'", " It will then hide all of the components within the specified folder.", "\n", "InventorVb", ".", "RunMacro", "(", "\"", "DocumentProject", "\"", ", ", "\"", "Module1", "\"", ", ", "\"", "FindAndHideFolders", "\"", ", ", "hide_this_folder", ")", "Sub FindAndHideFolders(sFolderName As String)\n' This sub-routine will seek out and hide any components that are contained within a Browser Folder \n' that's specified by the user.\n\n    ' Set a reference to the drawing document.\n    Dim oDrawDoc As Inventor.DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n       \n    ' Set a reference to the active sheet.\n    Dim oSheet As Inventor.sheet\n    Set oSheet = oDrawDoc.ActiveSheet\n       \n    ' Set a reference to the drawing view (defaults to VIEW1).\n    Dim oView As Inventor.DrawingView\n    Set oView = oSheet.DrawingViews.Item(1)\n    \n    ' Set a reference to all drawing views.\n    Dim oViews As DrawingViews\n    Set oViews = oSheet.DrawingViews\n'-------------------------------------------------------------------------------------\n\n' Set a reference to the FileManager Object.\n    Dim oFileManager As FileManager\n    Set oFileManager = ThisApplication.FileManager\n    \n    ' Set the full file name of the drawing document.\n    Dim sFullFileName As String\n    sFullFileName = oDrawDoc.FullDocumentName\n    \n    ' Set the name of the desired LOD representation.\n    Dim sLODName As String\n    sLODName = \"iLogic\"\n    \n    ' Get the full document name using the full file name & LOD name.\n    Dim sFullDocName As String\n    sFullDocName = oFileManager.GetFullDocumentName(sFullFileName, sLODName)\n\n    ' Set a reference to the assembly document.\n    Dim oRefDoc As AssemblyDocument\n    Set oRefDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n    \n    ' Set a reference to the assembly component definition.\n    Dim oSub1AssyCompDef As AssemblyComponentDefinition\n    Set oSub1AssyCompDef = oRefDoc.ComponentDefinition\n    \n    ' Set a reference to the component & sub-component occurrences.\n    Dim oSub1AssyCompOcc As ComponentOccurrence\n    Dim oSub2AssyCompOcc As ComponentOccurrence\n    \n    ' Set a reference to the Browser Pane.\n    Dim oPane As BrowserPane\n    Set oPane = oRefDoc.BrowserPanes.ActivePane\n'-------------------------------------------------------------------------------------\n\n    ' This variable will reference the collection of components in the assembly model's Browser window.\n    Dim oTopNodes As BrowserNodesEnumerator\n    Set oTopNodes = oPane.TopNode.BrowserNodes\n    \n    ' This variable will reference the BrowserFolder collection (if any) within each TopNode.\n    Dim oBrowserFolders As BrowserFoldersEnumerator\n    \n    Dim oTopNode As BrowserNode\n    For Each oTopNode In oTopNodes\n        Set oBrowserFolders = oTopNode.BrowserFolders\n        ' If there are any browser folders within the current TopNode object, then we'll scan through them \n        ' to find a folder name that matches the user's input.\n        If oBrowserFolders.Count > 0 Then\n            Dim oBrowserFolder As BrowserFolder\n            For Each oBrowserFolder In oBrowserFolders\n                ' If the current oBrowserFolder name is the same as the folder name provided by the user, \n                ' then we'll proceed to turn off the visibility for every component within the current \n                ' oBrowserFolder.  We'll skip over any suppressed components to avoid any odd errors or such.\n                If oBrowserFolder.Name = sFolderName Then\n                    ' This variable will reference the collection of Browser Nodes in the current \n                    ' oBrowserFolder.\n                    Dim oBrowserNodes As BrowserNodesEnumerator\n                    Set oBrowserNodes = oBrowserFolder.BrowserNode.BrowserNodes\n                    ' This For-Each loop will iterate through each Browser Node in the current oBrowserFolder \n                    ' to find & extract the name of each component found within the user-specified folder.\n                    Dim oBrowserNode As BrowserNode\n                    For Each oBrowserNode In oBrowserNodes\n                        ' We want to ignore any components that are already suppressed, so this If-Then block \n                        ' will ensure that such is the case.\n                        If oBrowserNode.NativeObject.Suppressed = False Then\n                            ' This variable will contain the FullPath of the current oBrowserNode.  We'll \n                    \t    ' split the FullPath into a string array and extract the part number & occurrence \n                    \t    ' number from it.\n                            Dim sNodeName As String\n                            sNodeName = oBrowserNode.FullPath\n                            Dim S() As String\n                    \t    ' Produces S(0) thru S(5); S(4) has the component name that we want!\n                            S() = Split(sNodeName, \":\")\n                            ' Now we'll put the extracted part number & occurrence number back together with \n                    \t    ' a colon separator, and then store it within this variable.\n                            Dim sPartNumber As String\n                            sPartNumber = S(4) & \":\" & S(5)\n                            ' We'll use the FindAndHideComponents() sub-routine to handle the task of hiding \n                    \t    ' the component that's associated with the current oBrowserNode.\n                            Call FindAndHideComponents(sPartNumber)\n                        End If\n                    Next\n                End If\n            Next\n        End If\n    Next\n    MsgBox (\"Find & Hide Folder Components Process Complete.\")\nEnd Sub\n\n\nSub FindAndHideComponents(sCompName As String)\n' This sub-routine will seek out and hide any unit assembly components that are specified by the user.\n    ' Set a reference to the drawing document.\n    Dim oDrawDoc As Inventor.DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n       \n    ' Set a reference to the active sheet.\n    Dim oSheet As Inventor.sheet\n    Set oSheet = oDrawDoc.ActiveSheet\n    \n    ' This variable keeps track of which drawing view that this sub-routine is currently working on.\n    Dim lViewCounter As Long\n    lViewCounter = 1\n       \n    ' Set a reference to the drawing view (defaults to VIEW1).\n    Dim oView As Inventor.DrawingView\n    Set oView = oSheet.DrawingViews.Item(lViewCounter)\n    \n    ' Set a reference to all drawing views.\n    Dim oViews As DrawingViews\n    Set oViews = oSheet.DrawingViews\n'-------------------------------------------------------------------------------------\n\n' Set a reference to the FileManager Object.\n    Dim oFileManager As FileManager\n    Set oFileManager = ThisApplication.FileManager\n    \n    ' Set the full file name of the drawing document.\n    Dim sFullFileName As String\n    sFullFileName = oDrawDoc.FullDocumentName\n    \n    ' Set the name of the desired LOD representation.\n    Dim sLODName As String\n    sLODName = \"iLogic\"\n    \n    ' Get the full document name using the full file name & LOD name.\n    Dim sFullDocName As String\n    sFullDocName = oFileManager.GetFullDocumentName(sFullFileName, sLODName)\n\n    ' Set a reference to the assembly document.\n    Dim oRefDoc As AssemblyDocument\n    Set oRefDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n    \n    ' Set a reference to the assembly component's definition.\n    Dim oSub1AssyCompDef As AssemblyComponentDefinition\n    Set oSub1AssyCompDef = oRefDoc.ComponentDefinition\n    \n    Dim oSub1AssyCompOcc As ComponentOccurrence\n    Dim oSub2AssyCompOcc As ComponentOccurrence\n'-------------------------------------------------------------------------------------\n    \n    ' This string array will split up the value of sCompName so that multiple parts can be hidden at a time.\n    ' The user will need to separate each component name up by placing a comma in between each component name.\n    Dim sCompNameArray() As String\n    sCompNameArray() = Split(sCompName, \",\")\n    \n    Dim vCurrentCompName As Variant\n    For Each vCurrentCompName In sCompNameArray()\n        ' We reset our lViewCounter to 1.\n        lViewCounter = 1\n        \n        ' The following variable will determine whether or not vCurrentCompName contains a colon (\":\") in its \n\t' string value.\n        ' - If a colon is present, bIsCompName1Occ will be set to False.\n        ' - If a colon is NOT present, bIsCompName1Occ will be set to True.\n        Dim bIsCompName1Occ As Boolean\n        If InStr(vCurrentCompName, \":\") > 0 Then\n            bIsCompName1Occ = True\n        ElseIf InStr(vCurrentCompName, \":\") = 0 Then\n            bIsCompName1Occ = False\n        Else\n            MsgBox (\"ERROR:  Invalid value for vCurrentCompName variable.\")\n        End If\n        \n        ' This While-Wend loop will scan VIEW2 thru VIEW5 for the specified component, and then hide it if \n\t' it's found.\n        While lViewCounter <= 5\n            Set oView = oSheet.DrawingViews.Item(lViewCounter)\n            ' This variable will keep count of which assembly component item our specified component is \n\t' located within.\n            Dim AssyOccItemNumber As Long\n            AssyOccItemNumber = 1\n            \n            ' We'll check every component under master assembly level to see if any of these components' names \n\t    ' match the specified component.\n            For Each oSub1AssyCompOcc In oSub1AssyCompDef.Occurrences\n                ' We check to ensure that we're not looking at a suppressed component, as that can cause errors \n                ' to occur.\n                If oSub1AssyCompOcc.Suppressed = False Then\n        '====================================\n        ' Single Component Hiding Block Begin\n        '====================================\n                    ' If a colon is present in sCompName's value, then we presume that we're only hiding a \n\t            ' single occurrence of the specified component.  We'll run this If-Then code block to find \n            \t    ' & hide the specified component.\n                    If bIsCompName1Occ = True Then\n                        If oSub1AssyCompOcc.Name = vCurrentCompName Then\n                            If oView.GetVisibility(oSub1AssyCompOcc) = True Then\n                                Call oView.SetVisibility(oSub1AssyCompOcc, False)\n                            End If\n                        End If\n                        \n                        ' If the current oSub1AssyCompOcc's name doesn't match the specified component, and it's \n                        ' an assembly component that is not suppressed, then we dive deeper to search the \n                        ' components within oSub1AssyCompOcc.\n                        If oSub1AssyCompOcc.Definition.Type = kAssemblyComponentDefinitionObject Then\n                            ' This variable gets the assembly component definition of the current \n\t                    ' oSub1AssyCompOcc object.\n                            Dim oSub2AssyCompDef As AssemblyComponentDefinition\n                            Set oSub2AssyCompDef = oSub1AssyCompOcc.Definition\n                            \n                            ' This variable will keep count of which sub-assembly component item our specified \n                            ' component is located within.\n                            Dim SubAssyOccItemNumber As Long\n                            SubAssyOccItemNumber = 1\n                            \n                            ' Now we'll go down one level into the current sub-assembly component and check its \n                            ' sub-components for a matching component name.\n                            For Each oSub2AssyCompOcc In oSub2AssyCompDef.Occurrences\n                                If oSub2AssyCompOcc.Name = vCurrentCompName Then\n                                    ' If the current oSub2AssyCompOcc's definition document type is that of an \n                                    ' assembly document, we'll check its contents to ensure that it contains \n                                    ' components that can actually be made invisible before proceeding.  This is \n                                    ' done to avoid the run-time error that we get when we attempt to hide a \n                                    ' sub-assembly component that's simply an empty placeholder component.\n                                    ' These placeholder components are in the assembly component solely to have \n                                    ' its iProperties included on the B.O.M., so we're not to be concerned with \n                                    ' hiding them.\n                                    If oSub2AssyCompOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n                                        Dim oSub3AssyCompDef As AssemblyComponentDefinition\n                                        Set oSub3AssyCompDef = oSub2AssyCompOcc.Definition\n                                        ' We'll pass all of the necessary info on to our CheckAndHideSubAssyComps() \n                                        ' sub-routine to recursively scan the rest of the sub-assembly layers to \n                                        ' find & hide the user-specified component.\n                                        Call CheckAndHideSubAssyComps(oView, oSub3AssyCompDef, oSub1AssyCompDef, AssyOccItemNumber, SubAssyOccItemNumber)\n                                    ' If the current oSub2AssyCompOcc is NOT an assembly document object, then we \n                                    ' just hide it; it's likely just a part component.\n                                    ElseIf oSub2AssyCompOcc.DefinitionDocumentType <> kAssemblyDocumentObject Then\n                                        ' We'll create a proxy of our component so that we can properly tell oView \n                                        ' to hide it.\n                                        Dim oSubCompProxy As ComponentOccurrenceProxy\n                                        Set oSubCompProxy = oSub1AssyCompDef.Occurrences.Item(AssyOccItemNumber).SubOccurrences.Item(SubAssyOccItemNumber)\n                                        ' Toggle visibility of components in subassembly.\n                                        If oView.GetVisibility(oSubCompProxy) = True Then\n                                            Call oView.SetVisibility(oSubCompProxy, False)\n                                        End If\n                                    End If\n                                End If\n                                SubAssyOccItemNumber = SubAssyOccItemNumber + 1\n                            Next\n                        End If\n        '==================================\n        ' Single Component Hiding Block End\n        '==================================\n        \n        '===================================\n        ' Batch Component Hiding Block Begin\n        '===================================\n                    ' If a colon is NOT present in sCompName's value, then we run this ElseIf-Then code block to \n\t\t    ' find & hide all occurrences of the specified component part number.\n                    ElseIf bIsCompName1Occ = False Then\n                        ' First, we need to take the current oSub1AssyCompOcc's name and split it into an array.\n                        ' - sCompOccName(0) will contain the oSub1AssyCompOcc's part number.\n                        ' - sCompOccName(1) will contain the oSub1AssyCompOcc's occurrence number.\n                        Dim sCompOccName() As String\n                        sCompOccName() = Split(oSub1AssyCompOcc.Name, \":\") ' sCompOccName(0) = \"1003UA30055-WT\"; sCompOccName(1) = \"1\"\n                        ' If the current oSub1AssyCompOcc's part number matches the user-specified component, \n                        ' then we proceed as normal and hide the current oSub1AssyCompOcc.\n                        If sCompOccName(0) = vCurrentCompName Then ' Returns True\n                            If oView.GetVisibility(oSub1AssyCompOcc) = True Then\n                                Call oView.SetVisibility(oSub1AssyCompOcc, False)\n                            End If\n                        End If\n                        \n                        ' If the current oSub1AssyCompOcc's name doesn't match the user-specified component AND \n                        ' it's an assembly component that is not suppressed, then we dive deeper to search the \n                        ' components within oSub1AssyCompOcc.\n                        If oSub1AssyCompOcc.Definition.Type = kAssemblyComponentDefinitionObject Then\n                            ' This variable gets the assembly component definition of the current oSub1AssyCompOcc\n                            ' object.\n                            Set oSub2AssyCompDef = oSub1AssyCompOcc.Definition\n                            \n                            ' This variable will keep count of which sub-assembly component item our specified\n                            ' component is located within.\n                            SubAssyOccItemNumber = 1\n                            \n                            For Each oSub2AssyCompOcc In oSub2AssyCompDef.Occurrences\n                                Dim sSubCompOccName() As String\n                                sSubCompOccName() = Split(oSub2AssyCompOcc.Name, \":\") ' sSubCompOccName(0) = \"1003EG031\"; sSubCompOccName(1) = \"1\"\n                                If sSubCompOccName(0) = vCurrentCompName Then\n                                    ' If the current oSub2AssyCompOcc's definition document type is that of an \n\t                            ' assembly document, we'll check its contents to ensure that it contains \n\t                            ' components that can actually be made invisible before proceeding.  This is \n\t                            ' done to avoid the run-time error that we get when we attempt to hide a \n\t                            ' sub-assembly component that's simply an empty placeholder component.\n                                    ' These placeholder components are in the assembly component solely to have \n\t                            ' its iProperties included on the B.O.M., so we're not to be concerned with \n\t                            ' hiding them.\n                                    If oSub2AssyCompOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n                                        Set oSub3AssyCompDef = oSub2AssyCompOcc.Definition\n                                        ' We'll pass all of the necessary info on to our CheckAndHideSubAssyComps() \n\t                                ' sub-routine to recursively scan the rest of the sub-assembly layers to \n\t                                ' find & hide the user-specified component.\n                                        Call CheckAndHideSubAssyComps(oView, oSub3AssyCompDef, oSub1AssyCompDef, AssyOccItemNumber, SubAssyOccItemNumber)\n\n                                    ' If the current oSub2AssyCompOcc is NOT an assembly document object, then we \n\t                            ' just hide it; it's likely just a part component.\n                                    ElseIf oSub2AssyCompOcc.DefinitionDocumentType <> kAssemblyDocumentObject Then\n                                        ' We'll create a proxy of our component so that we can properly tell oView \n\t                                ' to hide it.\n                                        Set oSubCompProxy = oSub1AssyCompDef.Occurrences.Item(AssyOccItemNumber).SubOccurrences.Item(SubAssyOccItemNumber)\n                                        ' Toggle visibility of components in subassembly.\n                                        If oView.GetVisibility(oSubCompProxy) = True Then\n                                            Call oView.SetVisibility(oSubCompProxy, False)\n                                        End If\n                                    End If\n                                End If\n                                SubAssyOccItemNumber = SubAssyOccItemNumber + 1\n                            Next\n                        End If\n                    Else\n                        MsgBox (\"ERROR:  Invalid value for bIsCompName1Occ variable.\")\n                    End If\n        '=================================\n        ' Batch Component Hiding Block End\n        '=================================\n                End If\n                AssyOccItemNumber = AssyOccItemNumber + 1\n            Next\n            lViewCounter = lViewCounter + 1\n        Wend\n    Next\nEnd Sub\n\n\nPublic Sub CheckAndHideSubAssyComps(oView, oCurrentSubAssyCompDef, oSub1AssyCompDef, AssyOccItemNumber, SubAssyOccItemNumber)\n' This sub-routine will handle the sometimes recursive activity of hiding a sub-assembly by checking each of its \n' components for SurfaceBodies to hide.  Attempting to hide a sub-component that doesn't have any SurfaceBodies \n' (i.e. trying to hide the empty placeholder sub-components that are used only for their iProperties) causes an \n' error to occur, so in such a scenario it's easier to cherry-pick through a sub-assembly's components in order \n' to hide the components with actual 3D models in them.\n\n' This sub-routine takes in a number of variables and checks if the given sub-assembly's components have \n' SurfaceBodies.  If they do, they get hidden.  If another sub-sub-assembly is found within the given sub-assembly, \n' this sub-routine will call upon itself again and pass along the sub-sub-assembly for processing.\n    Dim oCurrentSubAssyCompOcc As ComponentOccurrence\n    For Each oCurrentSubAssyCompOcc In oCurrentSubAssyCompDef.Occurrences\n        If oCurrentSubAssyCompOcc.SurfaceBodies.Count > 0 Then\n            ' We'll create a proxy of our component so that we can properly tell oView to hide it.\n            Dim oCurrentSubAssyCompProxy As ComponentOccurrenceProxy\n            Set oCurrentSubAssyCompProxy = oSub1AssyCompDef.Occurrences.Item(AssyOccItemNumber).SubOccurrences.Item(SubAssyOccItemNumber)\n            ' Toggle visibility of components in subassembly.\n            If oView.GetVisibility(oCurrentSubAssyCompProxy) = True Then\n                Call oView.SetVisibility(oCurrentSubAssyCompProxy, False)\n            End If\n        ' If it turns out that the current sub-assembly component is ALSO an kAssemblyDocumentObject, then we create a new AssemblyComponentDefinition\n        ' and recursively call upon this sub-routine to check the current sub-assembly component's sub-components.\n        ElseIf oCurrentSubAssyCompOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n            ' This variable will be the AssemblyComponentDefinition that gets passed on to CheckAndHideSubAssyComps().\n            Dim oInternalSubAssyCompDef As AssemblyComponentDefinition\n            Set oInternalSubAssyCompDef = oCurrentSubAssyCompOcc.Definition\n            Call CheckAndHideSubAssyComps(oView, oInternalSubAssyCompDef, oSub1AssyCompDef, AssyOccItemNumber, SubAssyOccItemNumber)\n        End If\n    Next\nEnd Sub"], "author": "V_L_F"},
{"created at": [], "solution Title": "\n                        Re: Step File Export With REV Number As Prefix\n                    ", "solution": ["'notes i would like to get this code to export step file with revision number as suffix from iproperties and if there is already a file with same name overwrite if there is no file then save as with new suffix and keeping old file'\n\n\n' Start of iLogic code *******************************************\nStepfilename = ThisDoc.PathAndFileName(False)\nCounter = 0\nFileExists = True\nDim strFilename As String \n'check to see if the file to be exported already exists\nDo While FileExists    \n    ' Define name of exported file - note a .stp file extension \n    ' Is currently being used. In this example I am exporting a Step file\n    CurrentFile = Stepfilename & \"_\" & iProperties.Value(\"Project\", \"Revision Number\") & \"_\" & Counter & \".stp\"\n    \n    If Dir(CurrentFile) <> \"\" Then ' The file does exist\n        Counter += 1\n        FileExists = True\n    Else\n        SaveAs = MessageBox.Show(\"Export file as '\" & CurrentFile & \"'\" , \"Cadline iLogic\", _\n        MessageBoxButtons.YesNo, MessageBoxIcon.Question, _\n        MessageBoxDefaultButton.Button1)\n        If SaveAs = vbNo Then\n            Return\n        Else ' User says continue\n            FileExists = False\n        End If\n    End If\nLoop\n \n' Put your export or 'save as' code in here ***********************\n \n' Get the STEP translator Add-In.\nDim oSTEPTranslator As TranslatorAddIn\noSTEPTranslator = ThisApplication.ApplicationAddIns.ItemById _\n(\"{90AF7F40-0C01-11D5-8E83-0010B541CD80}\")\nDim oContext As TranslationContext\noContext = ThisApplication.TransientObjects.CreateTranslationContext\nDim oOptions As NameValueMap\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n \nIf oSTEPTranslator.HasSaveCopyAsOptions(ThisApplication.ActiveDocument _\n, oContext, oOptions) Then\n    oOptions.Value(\"ApplicationProtocolType\") = 3\n    oContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n    Dim oData As DataMedium\n    oData = ThisApplication.TransientObjects.CreateDataMedium\n    \n\t' Set export name of STEP file\n    oData.FileName = CurrentFile\noSTEPTranslator.SaveCopyAs( ThisApplication.ActiveDocument , oContext , oOptions, oData)\nEnd If\n \n' End of export code ***********************************************\n \n' Ask user If they want To open the export folder\nOpenFolder = MessageBox.Show(\"Export successful! \" & _\n\"- open containing folder now?\", \"Cadline iLogic\", _\nMessageBoxButtons.YesNo, _\nMessageBoxIcon.Question,MessageBoxDefaultButton.Button1)\n \nIf OpenFolder = vbYes Then\n    Process.Start(\"explorer.exe\", ThisDoc.Path)\nElse ' User says continue\n    'Return\nEnd If\n "], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: An unhandled exception of type 'System.Exception' occurred in Microsoft.Visu\n                    ", "solution": [], "author": "frederic.vanden"},
{"created at": [], "solution Title": "\n                        Re: Extract BOM from an assembly to an EXCEL spreadsheet including derived parts\n                    ", "solution": [], "author": "sajith.subraman"},
{"created at": [], "solution Title": "\n                        Re: Finding an original feature through a mirrored feature\n                    ", "solution": [], "author": "NicholasBrown"},
{"created at": [], "solution Title": "\n                        Re: Balloon update\n                    ", "solution": ["'Places Item Numbers of Part from Drawing Parts List", "' into the Respective View Labels, except projected views", "''", "'Originally at : http://forums.autodesk.com/t5/inventor-customization/exsisting-ilogic-rule-view-label-fitted-with-item-number/m-p/6323006/highlight/true#M63823", "' Set a reference to the drawing document.' This assumes a drawing document is active.", "Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim oSheets As Sheets\nDim Sheet As Inventor.Sheet\nDim oViews As DrawingViews\nDim oView As DrawingView\n\nFor Each oSheet In oDrawDoc.Sheets\n\t'For Each oSheet In oSheets\n\toViews = oSheet.DrawingViews\n\tFor Each oView In oViews\n\t\tIf oView.ViewType <> 10504 Then ' Not kProjectedDrawingViewType\n\t\t\t'Get the full filename Of the view model\n\t\t\tDim oModelFileName As String\n\t\t\toModelFileName = oView.ReferencedDocumentDescriptor.ReferencedDocument.FullFileName\n\t\t\t'MessageBox.Show(\"view model name\" & oModelFileName, \"Title\")\n\t\t\t\n\t\t\tDim oPartList As PartsList\n\t\t\t'try and get the parts list form the table of this sheet\n\t\t\tTry\n\t\t\t\toPartList = oDrawDoc.ActiveSheet.PartsLists.Item(1)\n\t\t\tCatch 'on error try and search all sheets for first found parts list            \n\t\t\t\t'iterate trough each sheet\n\t\t\t\tDim i As Long\n\t\t\t\tFor i = 1 To oDrawDoc.Sheets.Count\n\t\t\t\t\tIf oDrawDoc.Sheets.Item(i).PartsLists.Count > 0 Then Exit For\n\t\t\t\tNext    \n\t\t\t\toPartList = oDrawDoc.Sheets.Item(i).PartsLists.Item(1)\n\t\t\t\t'MessageBox.Show(\"parts list found on: \" & i, \"Title\")\n\t\t\tEnd Try\n\t\t\n\n\t\t\t' Iterate through the contents of the parts list.\n\t\t\t\tDim oRow As PartsListRow\n\t\t\t\tDim oRowFileName As String\n\n\t\t\tDim j As Long\n\t\t\tFor j = 1 To oPartList.PartsListRows.Count\n\t\t\t\t' Get the current row.\n\n\t\t\t\toRow = oPartList.PartsListRows.Item(j)\n\t\t\t\t'get filename of model in row\n\n\t\t\t\toRowFileName = oRow.ReferencedFiles.Item(1).FullFileName\n\t\t\t\t'compare the filenames\n\t\t\t\t'Performs a text comparison, based on a case-insensitive text sort order\n\t\t\t\t'If strings equal returns 0\n\t\t\t\tIf StrComp(oModelFileName, oRowFileName, CompareMethod.Text)=0 Then \n\t\t\t\t\t'Get the value of Item from the Parts List\n\t\t\t\t\t'Row name needs to be case sensitive or use 1 for first 2 for second etc.\n\t\t\t\t\toCell  = oPartList.PartsListRows.Item(j).Item(\"Item\") 'Row name needs to be case sensitive or use 1 for first 2 for second etc.\n\t\t\t\t\t'get the value of text in cell\n\t\t\t\t\tDim oItemValue As String\n\t\t\t\t\toItemValue = oCell.Value\n\t\t\t\t\t\n\t\t\t\t\t'Show the view label\n\t\t\t\t\toView.ShowLabel = True\n\t\t\t\t\t'format the text first line\n\t\t\t\t\toStringItem = \" ITEM \" & oItemValue & \" \"\n\t\t\t\t\t'format the text second line\n\t\t\t\t\toStringScale = \"\n(Scale )\"\n\t\t\t\t\t\n\t\t\t\t\t'add to the view label\n\t\t\t\t\toView.Label.FormattedText =  oStringItem & oStringScale\n\t\t\t\tEnd If  \n\t\t\tNext\n\t\tEnd If\n\tNext\nNext\n "], "author": "KristopherReave"},
{"created at": [], "solution Title": "\n                        Re: VBA Project default ivb  password protected\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Save an excel spreadsheet from the Inventor VBA\n                    ", "solution": [], "author": "shastu"},
{"created at": [], "solution Title": "\n                        Re: Call excel_app.Workbooks.Close\n                    ", "solution": [], "author": "shastu"},
{"created at": [], "solution Title": "\n                        Re: Drawing Sheet Revision iLogic\n                    ", "solution": ["Function GetSheetRevision(oSheet As Sheet) As String\n          oTitleblock = oSheet.Titleblock\n\n           For Each oTextBox In oTitleBlock.Definition.Sketch.TextBoxes             \n                    If oTextBox.Text = \"<Sheet Revision>\" Then\n                                 oRev=oTitleBlock.GetResultText(oTextBox)\n                    End If\n           Next\n           Return oRev\nEnd Function", "Function GetSheetRevision(oSheet As Sheet) As String\n          oTitleblock = oSheet.Titleblock\n          oRev=oTitleBlock.GetResultText(  _\n                     oTitleBlock.Definition.Sketch.TextBoxes.Item(58))\n          Return oRev\nEnd Function", "Dim oDoc As DrawingDocument = ThisApplication.ActiveDocument\n", "'might have to erase the error skip and debug manually if you are getting issues", "On Error Resume Next\n'oWrite = System.IO.File.CreateText(\"C:\\Users\\Desktop\\Test.txt\") ' Change the filename as you like\n\nFor j=1 To oDoc.ActiveSheet.TitleBlock.Definition.Sketch.TextBoxes.Count\n\t\toStr = oStr & j & \") \" & oDoc.ActiveSheet.TitleBlock.Definition.Sketch.TextBoxes.Item(j).Text\n\t\t\n'oWrite.WriteLine(j & \") \" & oDoc.ActiveSheet.TitleBlock.Definition.Sketch.TextBoxes.Item(j).Text)\n\nNext\n\nMsgBox(oStr)\n\n'oWrite.Close\n'ThisDoc.Launch(\"C:\\Users\\Desktop\\Test.txt\")", "Sub Main()", "\noPath = ThisDoc.Path\noFileName = ThisDoc.FileName(False) 'without extension\noPDFAddIn = ThisApplication.ApplicationAddIns.ItemById _\n(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\noDocument = ThisApplication.ActiveDocument\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n'Define the drawing\nDim oDrawing As DrawingDocument\noDrawing = ThisDoc.Document\n\nDim oSheet As Sheet\nDim lPos As Long\nDim rPos As Long\nDim sLen As Long\nDim sSheetName As String\nDim iSheetNumber As Integer\n\n'step through each drawing sheet\nFor Each oSheet In oDrawing.Sheets\n\n'find the seperator in the sheet name:number\nlPos = InStr(oSheet.Name, \":\")\n'find the number of characters in the sheet name\nsLen = Len(oSheet.Name)\n'find the sheet name\nsSheetName = Left(oSheet.Name, lPos -1)\n'find the sheet number\niSheetNumber = Right(oSheet.Name, sLen -lPos)\n\n'set PDF Options\nIf oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then\noOptions.Value(\"All_Color_AS_Black\") = 1\noOptions.Value(\"Remove_Line_Weights\") = 1\noOptions.Value(\"Vector_Resolution\") = 400\noOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintSheetRange\noOptions.Value(\"Custom_Begin_Sheet\") = iSheetNumber\noOptions.Value(\"Custom_End_Sheet\") = iSheetNumber\nEnd If\n\n'get PDF target folder path\noFolder = Left(oPath, InStrRev(oPath, \"\\\")) & oFileName & \" PDFs\"\n\n'Check for the PDF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n\n\n'Set the PDF target file name\noDataMedium.FileName = oFolder & \"\\\" & sSheetName & \" Rev\" & GetSheetRevision(oSheet)  & \".pdf\"\n\n'Publish document\noPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n\nNext\n\nEnd Sub", "'In the same rule: paste sheet revision below here as it appears in option 1, except for the changes you made.", "ie;", "Function GetSheetRevision()", " '''' Code here (replace titles also)", "End Function"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: ilogic and Filtering a Drop down list\n                    ", "solution": ["Select Case Board_Length\nCase 144\n\tIf Board_Width <> 8 And Board_Width <>  10 Then\n\t\tBoard_Width = 8\n\tEnd If\nCase 120\n\tIf Board_Width <> 2 And Board_Width <> 6 Then\n\t\tBoard_Width = 2\n\tEnd If\nCase 96\n\tIf Board_Width <> 2 And Board_Width <> 4 Then\n\t\tBoard_Width = 2\n\tEnd If\nEnd Select: "], "author": "richard.joseph."},
{"created at": [], "solution Title": "\n                        Re: iLogic form text files\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: VBA Assembly Constraints, get Part-Feature\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Level Of Detail\n                    ", "solution": ["Dim oAsmDocCurrent As AssemblyDocument\noAsmDocCurrent = ThisDoc.Document\n\nDim oLODReps As LevelOfDetailRepresentations\noLODReps = oAsmDocCurrent.ComponentDefinition.RepresentationsManager.LevelOfDetailRepresentations\n\nbooleanParameter=InputRadioBox(\"Select Right Hand or Left Hand\",\"Right\",\"Left\",True,Title:=\"Version of Mandoor\")\n\nIf booleanParameter = True\n\toLODReps(\"Right Hand\").Activate \nElse\n\toLODReps(\"Left Hand\").Activate\nEnd If"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: convert type \"Inventor.Document\" to \"Inventor.PartDocument&qu\n                    ", "solution": ["PartDocument oPartDoc = oDoc as PartDocument;"], "author": "patrickde"},
{"created at": [], "solution Title": "\n                        Re: Set variable to export in assembly's parts\n                    ", "solution": ["docFile.ComponentDefinition.Parameters(\"Thickness\").ExposedAsProperty = True\u00a0", "Dim openDoc As Document\nopenDoc = ", "ThisApplication.ActiveDocument ", "'changed as ThisDoc is still largely iLogic... ThisApplication is more of a top level call\nDim docFile As Document\n\n'Check if it is an assembly file; exit if it is not\nIf openDoc.DocumentType <> 12291 Then\n     MessageBox.Show(\"You must have a valid Assembly\", \"File Type Mismatch!\",MessageBoxButtons.OK,MessageBoxIcon.Exclamation)\n     Exit Sub", "End if ", "\nFor Each docFile In openDoc.AllReferencedDocuments\n        ", "        'Is a Sheet Metal File\n        If docFile.SubType.Equals(\"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\") Then\n                \n             'SET \"Description\" iPROPERTIE= \"SheetMetal\" to the part\n             docFile.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\").Value= \"SheetMetal\"\n        \n             'THIS LINE IS TO ABLE THE Thickness PARAMETER TO GET READY TO EXPORT IN EACH SHEET METAL PART\n             docFile.ComponentDefinition.Parameters(\"Thickness\").ExposedAsProperty = True\u00a0", "        End If ", "Next"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Open selected part of assembly in VBA\n                    ", "solution": [" Sub Main()  ", "    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    If oDoc Is Nothing Then\n        Exit Sub\n    End If\n     \n    Select Case True\n        Case Not oDoc.ActivatedObject Is Nothing\n            If oDoc.ActivatedObject.Type = ObjectTypeEnum.kDocumentObject Then\n                Set oDoc = oDoc.ActivatedObject\n            Else\n                MsgBox (\"Invalid active object\")\n                Exit Sub\n            End If\n        Case oDoc.ActivatedObject Is Nothing\n            'Continue without revising anything\n        Case Else\n            MsgBox (\"Invalid Activated Object!\")\n    End Select\n    \n    Dim oSS As SelectSet\n    Set oSS = oDoc.SelectSet\n    \n    Select Case True\n        Case oSS.Count = 0\n            Call ToggleWP(oDoc)\n        Case oSS.Count = 1\n            If oSS.Item(1).Type = ObjectTypeEnum.kDocumentObject Then\n                MsgBox (oSS.Item(1).Type)\n                Call ToggleWP(oSS.Item(1))\n            ElseIf oSS.Item(1).Type = ObjectTypeEnum.kComponentOccurrenceObject Or oSS.Item(1).Type = ObjectTypeEnum.kComponentOccurrenceProxyObject Then\n                Call ToggleWP(oSS.Item(1).Definition.Document)\n            Else\n                MsgBox (\"Invalid selected object!\")\n            End If\n        Case oSS.Count > 1\n            For Each oItem In oSS\n                If oItem.Type = ObjectTypeEnum.kDocumentObject Then\n                    ToggleWP (oItem)\n                End If\n            Next\n        Case Else\n            MsgBox (\"Invalid Select Set!\")\n    End Select\nEnd Sub\n\nSub ToggleWP(oDoc As Document)\n         Set oNewDoc = ThisApplication.Documents.Open(oDoc.FullFileName, True)\n         'oNewDoc.Close\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Replacing the title block on all drawing sheets\n                    ", "solution": ["ThisDrawing", ".", "ResourceFileName", " ", "=", " ", "\"", "z:\\templates\\HMC DRAWING.idw", "\"", "\n\n\n        ", "Dim", " ", "oCurrentNumber", "  ", "As", " ", "Sheet", "\n", "oCurrentNumber", " ", "=", " ", "oDoc", ".", "ActiveSheet", "\n\n        ", "Dim", " ", "oSheet1", " ", "As", " ", "Sheet", "\n        ", "For", " ", "Each", " ", "oSheet1", " ", "In", " ", "oDoc", ".", "Sheets", "\n        ", "oSheet1", ".", "Activate", "\n                \n            ", "ActiveSheet", ".", "TitleBlock", " ", "=", " ", "\"", "HMCTITLE", "\"", "\n            ", "Next", " \n\n", "oCurrentNumber", ".", "Activate"], "author": "brow1372"},
{"created at": [], "solution Title": "\n                        Re: Accessing hatch angle with ilogic\n                    ", "solution": [], "author": "HermJan.Otterma"},
{"created at": [], "solution Title": "\n                        Re: Update dimension in drawing sketch (.idw)\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Catastrophic failure when I try to change an iPart Parameter\n                    ", "solution": [], "author": "bob.holland"},
{"created at": [], "solution Title": "\n                        Re: iLogic: change the part numbers of all ipt in assembly and sub-assembly\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Compare Creation date with Now()\n                    ", "solution": ["time1 = iProperties.Value(\"Project\", \"Creation date\")\ntime2 = Now()\nDim ts As TimeSpan = time2 - time1\nDim elapsedTime As String = String.Format(\"{0:00} Days, {1:00} Hours, {2:00} Min, {3:00}.{4:00} Sec\", ts.Days, ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10)\nMsgBox(elapsedTime)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Betreff: iLogic check if part/assembly has got a drawing\n                    ", "solution": ["'script by Frederik Vollbrecht\n\n'check that the active document is an assembly file\nIf ThisApplication.ActiveDocument.DocumentType  <>  kAssemblyDocumentObject Then\n\tMessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\n\tExit Sub\nEnd If\n\n'define the active document as an assembly file\nDim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument\noAsmName = Left(oAsmDoc.DisplayName, Len(oAsmDoc.DisplayName) -4)\n\n'get user input\nRUsure = MessageBox.Show ( _\n\"This will create a TXT file for all of the asembly components that don't have drawings files.\" _\n& vbLf & \"This rule expects that the drawing file shares the same name and location as the component.\" _\n& vbLf & \" \" _\n& vbLf & \"Are you sure you want to create TXT for all of the assembly components?\" _\n& vbLf & \"This could take a while.\", \"iLogic  - Batch Output TXT \",MessageBoxButtons.YesNo)\n\nIf RUsure = vbNo Then\nReturn\nElse\nEnd If\n\nDim oDocument As Document\noDocument = ThisApplication.ActiveDocument\nDim oContext As TranslationContext\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n' Create a NameValueMap object\nDim oOptions As NameValueMap\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n' Create a DataMedium object\nDim oDataMedium As DataMedium\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n' Check whether the translator has 'SaveCopyAs' options\n\n'get target folder path\noFolder = oPath & \"\\\" & \"Export\"\n\n'Check for the folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n'- - - - - - - - - - - - -\n\n'- - - - - - - - - - - - -Component PDF Drawings - - - - - - - - - - - -\n'look at the files referenced by the assembly\nDim oRefDocs As DocumentsEnumerator\noRefDocs = oAsmDoc.AllReferencedDocuments\nDim oRefDoc As Document\n\n'work the the drawing files for the referenced models\n'this expects that the model has a drawing of the same path and name \nFor Each oRefDoc In oRefDocs\nidwPathName = Left(oRefDoc.FullDocumentName, Len(oRefDoc.FullDocumentName) - 3) & \"idw\"\n'check to see that the model has a drawing of the same path and name \nIf(System.IO.File.Exists(idwPathName))=0 Then\n\n'____Open and append to an existing text file_______\nDim oAppend As System.IO.StreamWriter\n\noFile = ThisDoc.PathAndFileName(False) & \".txt\"\noAppend = IO.File.AppendText(oFile)\n\noAppend.WriteLine(oRefDoc.FullDocumentName)\noAppend.Flush()\noAppend.Close()\n\t\nElse\n'If the model has no drawing of the same path and name - do nothing\n\nEnd If\nNext\n'- - - - - - - - - - - - -\nThisDoc.Launch(oFile)"], "author": "frederik.vollbr"},
{"created at": [], "solution Title": "\n                        Re: Add extra values when exporting parts list to Excel\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: PDF Package VBA\n                    ", "solution": ["Dim OpenDoc1 As Inventor.Document\n            Dim DocFile1 As Inventor.Document\n            Dim AssemblyDoc1 As AssemblyDocument\n            Dim AssemblyDef1 As AssemblyComponentDefinition\n            \n            Set OpenDoc1 = ThisApplication.ActiveDocument\n            \n            If OpenDoc1.DocumentType = kAssemblyDocumentObject Then\n                Set AssemblyDoc1 = OpenDoc1\n                Set AssemblyDef1 = AssemblyDoc1.ComponentDefinition\n            \n                For Each DocFile1 In OpenDoc1.AllReferencedDocuments\n                \n                Dim FSO2 As New Scripting.FileSystemObject\n            \n                If DocFile1.ReferencedDocuments.Count > 0 Then\n                        Dim DerivDoc As Inventor.Document\n                        Set DerivDoc = DocFile1.ReferencedDocuments.Item(1)\n                        \n                        If FSO2.FileExists(\"C:\\Users\\Public\\Documents\\Autodesk\\Inventor 2013\\Inventor Files\\Instant PDF\\\" & DerivDoc.DisplayName & \".pdf\") Then\n                        \n                        'DerivDocName = MsgBox(DerivDoc.DisplayName & \" needs to die!\", vbOKOnly, \"Kill!\")\n                            Kill (\"C:\\Users\\Public\\Documents\\Autodesk\\Inventor 2013\\Inventor Files\\Instant PDF\\\" & DerivDoc.DisplayName & \".pdf\")\n                        Else\n                        End If\n                Else\n                End If\n                \n                Next\n            Else\n            End If"], "author": "AJ1227"},
{"created at": [], "solution Title": "\n                        Re: Run an internal iLogic Rule from VB.net\n                    ", "solution": ["Imports", "\u00a0Inventor", "Imports", "\u00a0System.Runtime.InteropServices", "Public", "\u00a0", "Class", "\u00a0RunRule", "Private InventorApplication As Inventor.Application", "Public Sub iLogic(rule As String)", "    Try", "        InventorApplication = ", "Marshal", ".GetActiveObject(", "\"Inventor.Application\"", ")", "    Catch", "        Exit Sub", "    End Try", "    Dim iLogicAuto As Object\n    Dim oDoc As Inventor.Document\n    oDoc = InventorApplication.ActiveDocument\n    If oDoc Is Nothing Then\n        MsgBox (\"Missing Inventor Document\")\n    Exit Sub\n    End If\n    iLogicAuto = GetiLogicAddin()\n    If (iLogicAuto Is Nothing) Then Exit Sub\n    iLogicAuto.RunExternalRule(oDoc, rule)\nEnd Sub\n\t  \t\nPrivate Function GetiLogicAddin() As Object\n    Dim addIn As Inventor.ApplicationAddIn\n    Try\n        addIn = InventorApplication.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\n        addIn.Activate\n        GetiLogicAddin = addIn.Automation\n    Catch\n        GetiLogicAddin = Nothing\n    End Try\nEnd Function", "End Class", "Dim", "\u00a0Run\u00a0", "As", "\u00a0", "New", "\u00a0RunRule", "Run.iLogic(\"ShellPipeSize\")", "Run = Nothing"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Export pdf on same computer in different o.s.\n                    ", "solution": [], "author": "ZdenkoS"},
{"created at": [], "solution Title": "\n                        Re: ilogic - attach folder contents\n                    ", "solution": ["'send email using outlook", "\nDim oOApp\nDim oOMail\noOApp = CreateObject(\"Outlook.Application\")\noOMail = oOApp.CreateItem(olMailItem)\nDim olNs\nolNs = oOApp.GetNamespace(\"MAPI\")\nolNs.Logon\n", "'you can use this to select path manualy", "\n", "Dim dialog = New System.Windows.Forms.FolderBrowserDialog()\ndialog.SelectedPath = ThisDoc.Path\ndialog.ShowNewFolderButton = True\nIf System.Windows.Forms.DialogResult.OK = dialog.ShowDialog() Then\n    oPath = dialog.SelectedPath\nElse\n    Exit Sub\nEnd If", "'or use this to select path of currently opened file (you have to uncomment it)", "\n", "'oPath = ThisDoc.Path", "\nWith oOMail\n.To = \"", "someone@something.com", "\"\n.Subject = \"", "Some Subject Line Here", "\"\n.Body = \"", "Some Text Here", "\"\n", "'Add attachments to the message", "\nFor Each oFile In System.IO.Directory.GetFiles(oPath, \"", "*.pdf", "\")\n    objOutlookAttach = .Attachments.Add(oFile)\nNext", "'send the email instantly, otherwise just saves it to folder \"for send\"", "\n", ".Send", "\nEnd With"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic Yes No rule\n                    ", "solution": [], "author": "JamieS"},
{"created at": [], "solution Title": "\n                        Re: How can I get the thumbnail of the assembly or part? vb.net\n                    ", "solution": [], "author": "drfleau"},
{"created at": [], "solution Title": "\n                        Re: PDF Macro and 2016 Upgrade\n                    ", "solution": [], "author": "AJ1227"},
{"created at": [], "solution Title": "\n                        Re: SubAssembly part access question\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Material in Sheet Metal Rule\n                    ", "solution": ["Sub ShowMaterialName()\n  Dim d As PartDocument\n  Set d = ThisApplication.ActiveDocument\n    \n  Dim cd As SheetMetalComponentDefinition\n  Set cd = d.ComponentDefinition\n  ' Material is now a hidden property\n  ' Could use Document.ActiveMaterial instead\n  ' see below\n  MsgBox cd.Material.Name\n  \n  MsgBox d.ActiveMaterial.DisplayName\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic: copy PositionalRepresentations and LevelofDetailRepresentations\n                    ", "solution": ["Dim oMainAsmDoc As Inventor.AssemblyDocument = ThisDoc.Document\n\n'assume component is selected\nDim ss As SelectSet = oMainAsmDoc.SelectSet\nIf ss.Count <> 1 Then\n    MsgBox( \"Select one subassembly please\")\n    Exit Sub\nEnd If\nDim oOcc As ComponentOccurrence = ss.Item(1)\nIf Not TypeOf oOcc.Definition Is AssemblyComponentdefinition Then\n    MsgBox( \"Select one subassembly please\")\n    Exit Sub\nEnd If\n\nDim oAsmDef As Inventor.AssemblyComponentDefinition = oOcc.Definition\nDim oRepMgr As RepresentationsManager = oAsmDef.RepresentationsManager\nDim oLODs As LevelOfDetailRepresentations = oRepMgr.LevelOfDetailRepresentations\n\nDim oLOD As LevelOfDetailRepresentation\n\n'populate the list\nDim oList As New Collection\nFor Each oLOD In oLODs\n    If oLOD.LevelOfDetail = LevelOfDetailEnum.kCustomLevelOfDetail Then\n        'add LoD name to the list\n        Call oList.Add(oLOD.Name)\n    End If\nNext\n\n' now we have the list of custom LOD names in the selected subassembly\n\n'print custom LoD names found\nDim msg as String = \"--- Custom LODs ---\" & vbNewLine\nFor Each st As String In oList\n    msg &= st & vbNewLine\nNext\nMsgBox(msg)", "'  AddPosRep rule - adds positonal representations\n\nDim oMainAsmDoc As Inventor.AssemblyDocument = ThisDoc.Document\n\n'assume component is selected\nDim ss As SelectSet = oMainAsmDoc.SelectSet\n    If ss.Count <> 1 Then\n    MsgBox( \"Select one subassembly please\")\n    Exit Sub\nEnd If\nDim oOcc As ComponentOccurrence = ss.Item(1)\nIf Not TypeOf oOcc.Definition Is AssemblyComponentdefinition Then\n    MsgBox( \"Select one subassembly please\")\n    Exit Sub\nEnd If\n\nDim oAsmDef As Inventor.AssemblyComponentDefinition = oOcc.Definition\nDim oRepMgr As RepresentationsManager = oAsmDef.RepresentationsManager\nDim oPosReps As PositionalRepresentations = oRepMgr.PositionalRepresentations\nDim oPosRep As PositionalRepresentation\n\n'populate the list\nDim oList As New Collection\nFor i As Integer = 2 To oPosReps.Count\n    oPosRep = oPosReps.Item(i)\n    'add pos rep name to the list\n    Call oList.Add(oPosRep.Name)\nNext\n\n' now we have the list of custom PosReps names in the selected subassembly\n' print custom PosReps names found for debugging purposes only\nDim msg as String = \"--- PosReps ---\" & vbNewLine\nFor Each st As String In oList\n    msg &= st & vbNewLine\nNext\nMsgBox(msg)\n\n'add positonal representations to the top-level assembly\nDim oMainAsmDef As Inventor.AssemblyComponentDefinition = oMainAsmDoc.componentDefinition\nDim oMainRepMgr As RepresentationsManager = oMainAsmDef.RepresentationsManager\nDim oMainPosReps As PositionalRepresentations = oMainRepMgr.PositionalRepresentations\n\nFor Each RepName As String In oList\n    oPosRep = oMainPosReps.Add(RepName)\n    oOcc.ActivePositionalRepresentation = RepName\nNext\noMainAsmDoc.Update\n\nBeep\nMsgBox(\"done\")"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: i-Logic rule to round down cut length in grame generated parts\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2015 missing parts tree\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: show constraint window\n                    ", "solution": ["Sub Cmd_AssemblyEditConstraintCtxCmd()\n\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    Dim oConstr As AssemblyConstraint\n    Set oConstr = asmDoc.ComponentDefinition.Constraints.Item(3)\n    \n    Dim SSET As SelectSet\n    Set SSET = asmDoc.SelectSet\n    SSET.Clear\n    SSET.Select oConstr\n    \n    ' Get the command manager.\n    Dim oCommandMgr As CommandManager\n    Set oCommandMgr = ThisApplication.CommandManager\n\n    Dim oControlDef As ControlDefinition\n    Set oControlDef = oCommandMgr.ControlDefinitions _\n            .Item(\"AssemblyEditConstraintCtxCmd\")\n    oControlDef.Execute\n    Beep\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Appearance Asset giving error\n                    ", "solution": ["                    oAppAsset2 = g_inventorApplication.AssetLibraries.Item(\"Autodesk Appearance Library\").AppearanceAssets.Item(strChrome)\n                    oDocAsset = oAppAsset2.CopyTo(oPartDoc)\n With osolidRev1\n                        .Faces.Item(4).Appearance = oDocAsset\n                        .Faces.Item(7).Appearance = oDocAsset\n                        .Faces.Item(10).Appearance = oDocAsset\n                        .Faces.Item(12).Appearance = oDocAsset\n                        .Faces.Item(15).Appearance = oDocAsset\n                    End With"], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: How to imput parameter using Ilogic rule when creating a new part.\n                    ", "solution": ["Length", " ", "=", " ", "InputBox", "(", "\"", "Input Length", "\"", ", ", "\"", "Length", "\"", ", ", "Length", ")", "\n", "Width", " ", "=", " ", "InputBox", "(", "\"", "Input Width", "\"", ", ", "\"", "Width", "\"", ", ", "Width", ")", "\n", "Thickness", " ", "=", " ", "InputBox", "(", "\"", "Input Thickness", "\"", ", ", "\"", "Thickness", "\"", ", ", "Thickness", ")", "\n", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " ", "True", "\n\n\n"], "author": "mwighton"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Rotate sketch via Form\n                    ", "solution": [], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: Inventor -  Adding Item number from parts list to view label property\n                    ", "solution": [], "author": "Mario428"},
{"created at": [], "solution Title": "\n                        Re: How do I retrieve a drawing dimension value with iLogic?\n                    ", "solution": ["Sub GetDimValue()\n\u00a0\n\u00a0\u00a0\u00a0 Dim oDoc As DrawingDocument\n\u00a0\u00a0\u00a0 Set oDoc = ThisApplication.ActiveDocument\n\u00a0\u00a0\u00a0 Dim oSheet As Sheet\n\u00a0\u00a0\u00a0 Set oSheet = oDoc.ActiveSheet\n\u00a0\u00a0\u00a0 Dim oView As DrawingView\n\u00a0\u00a0\u00a0 Set oView = oSheet.DrawingViews.Item(1)\n\u00a0\n\u00a0\u00a0\u00a0 Dim oGeneralDimensions As GeneralDimensions\n\u00a0\u00a0\u00a0 Set oGeneralDimensions = oSheet.DrawingDimensions.GeneralDimensions\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0 'get the reference to some dimension\n\u00a0\u00a0\u00a0 Dim oDim As GeneralDimension\n\u00a0\u00a0\u00a0 Set oDim = oGeneralDimensions.Item(3)\n\u00a0\n\u00a0\u00a0\u00a0 Debug.Print oDim.", "ModelValue", "\u00a0 ' in base units (e.g., cm)\n\u00a0\u00a0\u00a0 Debug.Print oDim.", "ModelValueOverridden", "\n\u00a0\u00a0\u00a0 Debug.Print oDim.", "Text.Text", "\n\u00a0\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Autodesk Inventor 2016 Crashes on startup\n                    ", "solution": [], "author": "matthew.d"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Rule fails when in a sub-assembly\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Express DXF macro\n                    ", "solution": ["Public Sub Export_DXF()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveEditDocument\n    If (oDoc.FullDocumentName <> oDoc.FullDocumentName) Then\n        MsgBox \"Can't export while editing a part in an assembly\"\n        Exit Sub\n    ElseIf (oDoc.ComponentDefinition.Type <> kSheetMetalComponentDefinitionObject) Then\n        MsgBox \"Not a sheet metal part Sorry.\"\n        Exit Sub\n    End If\n    \n    Dim BomQty As Integer\n    BomQty = InputBox(Prompt:=\"Enter Bom Quantity\", Title:=\"Bom Quantity\")\n    \n    Dim AsmQty As Integer\n    AsmQty = InputBox(Prompt:=\"Enter Assembly Quantity\", Title:=\"Assembly Quantity\")\n    \n    Dim TotQty As Integer\n    TotQty = BomQty * AsmQty\n    \n    'If flat pattern doesn't exist, create it and return to folded view\n    If (oDoc.ComponentDefinition.FlatPattern Is Nothing) Then\n        Dim oDef As ControlDefinition\n        oDoc.ComponentDefinition.Unfold\n        Set oDef = ThisApplication.CommandManager.ControlDefinitions.Item(\"PartSwitchRepresentationCmd\")\n        oDef.Execute\n    End If\n\n    ' Get the DataIO object.\n    Dim oDataIO As DataIO\n    Set oDataIO = oDoc.ComponentDefinition.DataIO\n\n    ' Build the string that defines the format of the DXF file.\n    Dim sOut As String\n    sOut = \"FLAT PATTERN DXF?AcadVersion=2004&OuterProfileLayer=Outer&InvisibleLayers=IV_Tangent;IV_Bend;IV_Bend_Down;IV_Bend_Up;IV_Arc_Centers\"\n\n    ' Create the DXF file.\n    oDataIO.WriteDataToFile sOut, full_path(oDoc.FullFileName) & filename_noext(oDoc.FullFileName) & \"-\" & TotQty & \".dxf\"\nEnd Sub\n\nFunction filename_noext(spth As String)\n    'Returns filename without extension from full path\n    If (spth <> \"\") And (InStr(spth, \".\")) And (InStrRev(spth, \"\\\") < InStrRev(spth, \".\")) Then\n        filename_noext = Mid(spth, InStrRev(spth, \"\\\") + 1, InStrRev(spth, \".\") - InStrRev(spth, \"\\\") - 1)\n    ElseIf (spth <> \"\") And Not (InStr(spth, \".\")) Then\n        filename_noext = Mid(spth, InStrRev(spth, \"\\\", Len(spth)) + 1, Len(spth))\n    Else:\n        filename_noext = \"\"\n    End If\nEnd Function\n\nFunction full_path(spth As String)\n    'Returns full path minus filename, trailing slash is included\n    If spth <> \"\" Then\n        full_path = Left(spth, Len(spth) - (Len(spth) - InStrRev(spth, \"\\\")))\n    Else:\n        full_path = \"\"\n    End If\nEnd Function"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Application Options settings save\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Proportional Hole Placement in Parts\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: iLogic Run Excel Macro\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How do I read data from an FDS Asset to a Leader text?\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: iLogic Try Catch w/ Parameters\n                    ", "solution": ["' Set a reference to the assembly component definintion\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n' Iterate through all occurrences\nDim oOcc As ComponentOccurrence\nFor Each oOcc In oAsmCompDef.Occurrences\n\tTry\n\t\tParameter(oOcc.Name,\"Sch\") = PipeSch\n\t\tParameter(oOcc.Name,\"PipeSch\") = PipeSch\n\t\t' For debugging:\n\t\t ", "MessageBox.Show", "(oOcc.Name & \" was updated.\" & vbLf &\n\t\t \"Schedule set to: \" & iProperties.Value(oOcc.Name,\"Project\",\"Description\"), \"Debug Message - Pipe_Sch\")\n\t\t\n\tCatch\n\t\t", "MsgBox", "(oOcc.Name & vbLf & \"Parameter 'Sch' not found. Proceeding to next part...\")\n\t\n\tEnd Try\nNext"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: how do i activate successfully\n                    ", "solution": [], "author": "matthew.d"},
{"created at": [], "solution Title": "\n                        Re: Query status of construction flag in sketch mode\n                    ", "solution": [], "author": "rogmitch"},
{"created at": [], "solution Title": "\n                        Re: Check if file is saved, special case\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: Inventor crashes after oDoc.Close (VBA)\n                    ", "solution": [], "author": "rogmitch"},
{"created at": [], "solution Title": "\n                        Re: Insert field of screw connection vb.net\n                    ", "solution": ["Imports Inventor\n\nPublic Class MB_Spojovak\n    Public Sub MB_Spojovak()\n\n        Dim m_inventorApp As Inventor.Application = Nothing\n        m_inventorApp = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n\n        Dim oAssyDoc As AssemblyDocument\n        oAssyDoc = m_inventorApp.ActiveDocument\n\n\n        Dim oAssyDef As AssemblyComponentDefinition\n        oAssyDef = oAssyDoc.ComponentDefinition\n\n\n        ' Have the user select a circular edge.\n        Dim partEdge As Edge\n        partEdge = m_inventorApp.CommandManager.Pick(SelectionFilterEnum.kPartEdgeCircularFilter, \"Select a circular edge.\")\n\n\n        'kdy\u017e nic nevybere\u0161 exit\n        If partEdge Is Nothing Then\n            Exit Sub\n        End If\n\n        'Dim Occurrence As ComponentOccurrenceProxy\n        Dim Occurrence As ComponentOccurrence\n        Occurrence = partEdge.Parent.Parent\n\n        Dim dira_1 As Inventor.Circle 'Circ1\n        dira_1 = partEdge.Geometry    'Circ1\n        Dim dira_1_stred As Point\n        dira_1_stred = dira_1.Center\n\n\n        'najde v\u0161echny st\u0159edy d\u011br v zadan\u00e9 vzd\u00e1lenosti (v tomto p\u0159\u00edpad\u011b 12 cm)\n        Dim najdu_center As ObjectsEnumerator\n        Dim filtr_new As Inventor.SelectionFilterEnum()\n        filtr_new = New Inventor.SelectionFilterEnum(0) {Inventor.SelectionFilterEnum.kAllCircularEntities}\n        najdu_center = oAssyDef.FindUsingPoint(dira_1.Center, filtr_new, 11.001, True)\n\n        'pokud n\u011bco najde provede akci\n        If najdu_center.Count > 0 Then\n            Dim bod_pole(1) As Point\n            Dim aa As Byte = 0\n            Dim diry As Object\n            Dim distance As Double\n            Dim stred As Point\n            Dim osa(2) As Vector\n            Dim boltOcc As ComponentOccurrence = Nothing\n            'projde v\u0161echny nalezen\u00e9 d\u00edry\n            For i = 1 To najdu_center.Count\n                diry = najdu_center.Item(i)\n                'zjist\u00ed vzd\u00e1lenost mezi ozna\u010denou d\u00edrou a nalezenou d\u00edrou\n                distance = dira_1_stred.DistanceTo(diry.geometry.center)\n\n                'kdy\u017e je vzd\u00e1lenost 110 mm pokra\u010duje, vzd\u00e1lenost zaokrouhluje na 5 desetinn\u00fdch m\u00edst\n                If Math.Round(distance, 5) = 11.0 Then\n\n                    stred = diry.geometry.center\n                    'v nalezen\u00e9m st\u0159edu vytvo\u0159\u00ed do\u010dasn\u00fd bod\n                    'bod_pole(aa) = m_inventorApp.TransientGeometry.CreatePoint(stred.X, stred.Y, stred.Z)\n                    bod_pole(aa) = stred\n                    'vytvo\u0159\u00ed vektor ve st\u0159edu nalezen\u00e9 d\u00edry\n                    osa(aa) = m_inventorApp.TransientGeometry.CreateVector(bod_pole(aa).X, bod_pole(aa).Y, bod_pole(aa).Z)\n\n\n                    aa = 1\n                ElseIf Math.Round(distance, 1) = 5.0 Then\n                    boltOcc = oAssyDoc.ComponentDefinition.Occurrences.Add(\"X:\\XXX\\HV_M24-85_(47-51).ipt\",\n                                                                           m_inventorApp.TransientGeometry.CreateMatrix)\n                    ' MsgBox(\"Distance \" & \" = \" & distance & vbCrLf & \"50 mm\")\n\n                ElseIf Math.Round(distance, 1) = 5.1 Then\n                    boltOcc = oAssyDoc.ComponentDefinition.Occurrences.Add(\"X:\\XXX\\HV_M24-85_(47-51).ipt\",\n                                                                           m_inventorApp.TransientGeometry.CreateMatrix)\n                    'MsgBox(\"Distance \" & \" = \" & distance & vbCrLf & \"51 mm\")\n\n                ElseIf Math.Round(distance, 1) = 6.0 Then\n                    boltOcc = oAssyDoc.ComponentDefinition.Occurrences.Add(\"X:\\XXX\\HV_M24-100_(59-63).ipt\",\n                                                                           m_inventorApp.TransientGeometry.CreateMatrix)\n                    'MsgBox(\"Distance \" & \" = \" & distance & vbCrLf & \"60 mm\")\n\n                ElseIf Math.Round(distance, 1) = 6.1 Then\n                    boltOcc = oAssyDoc.ComponentDefinition.Occurrences.Add(\"X:\\XXX\\HV_M24-100_(59-63).ipt\",\n                                                                           m_inventorApp.TransientGeometry.CreateMatrix)\n                    ' MsgBox(\"Distance \" & \" = \" & distance & vbCrLf & \"61mm\")\n                Else\n\n                    MessageBox.Show(\"Tlou\u0161\u0165ka spojovan\u00e9ho mater\u00e1lu nen\u00ed v rozmez\u00ed 50-61mm.\" & vbCrLf & \"Spoj bude\u0161 muset vytvo\u0159it s\u00e1m.\", \"Nestandartn\u00ed tl. spoj. mat.!\")\n                    Exit Sub\n\n                End If\n\n                If Not (bod_pole(0) Is Nothing Or bod_pole(1) Is Nothing) Then\n\n                    Exit For\n\n                End If\n\n\n            Next i\n            'vytvo\u0159\u00ed vektor ve st\u0159edu ozna\u010den\u00e9 d\u00edry\n            osa(2) = m_inventorApp.TransientGeometry.CreateVector(dira_1_stred.X, dira_1_stred.Y, dira_1_stred.Z)\n\n\n            Dim Osa_Unit(1) As UnitVector\n            Dim WorkAx(1) As WorkAxis\n            For ii = 0 To 1\n                'rozd\u00edl vektor\u016f ozna\u010den\u00e9 a nalezen\u00e9 d\u00edry\n                osa(ii).SubtractVector(osa(2))\n                Osa_Unit(ii) = osa(ii).AsUnitVector\n                'WorkAx(i) = oAssyDef.WorkAxes.AddFixed(dira_1_stred, Osa_Unit(i))\n            Next ii\n\n\n            Dim filtr_hrana As Inventor.SelectionFilterEnum()\n            filtr_hrana = New Inventor.SelectionFilterEnum(0) {Inventor.SelectionFilterEnum.kPartEdgeLinearFilter}\n\n            'najde v\u0161echny line\u00e1rn\u00ed hrany kolem vybran\u00e9 d\u00edry\n            Dim hrana As ObjectsEnumerator\n            hrana = oAssyDef.FindUsingPoint(dira_1_stred, filtr_hrana, 10, True)\n\n            If hrana Is Nothing Then\n                MsgBox(\"Nena\u0161el jsem \u017e\u00e1dnou hranu, akce bude p\u0159eru\u0161ena!\")\n                Exit Sub\n            End If\n\n            Dim oznac_x As Edge = Nothing\n            Dim oznac_y As Edge = Nothing\n\n\n            'vybere dve hrany v modelu kter\u00e9 maj\u00ed stejn\u00fd sm\u011br jako d\u00edry raprezentovan\u00e9 vektorem\n            For hr = 1 To hrana.Count\n                Try\n\n                    If Osa_Unit(0).IsEqualTo(hrana.Item(hr).geometry.direction, 0.00001) And oznac_x Is Nothing Then\n                        'oAssyDoc.SelectSet.Select(hrana.Item(hr))\n                        'MsgBox(\"je rovn_x\")\n                        oznac_x = hrana.Item(hr)\n                    ElseIf Osa_Unit(1).IsEqualTo(hrana.Item(hr).geometry.direction, 0.00001) And oznac_y Is Nothing Then\n                        'oAssyDoc.SelectSet.Select(hrana.Item(hr))\n                        ' MsgBox(\"je rovn_y\")\n                        oznac_y = hrana.Item(hr)\n                    End If\n\n\n\n                Catch Ex As Exception\n                    ' MsgBox(Ex.ToString)\n                End Try\n\n                'kdy\u017e najde odpov\u00eddaj\u00edc\u00ed dv\u011b hrany ukon\u010d\u00ed For\n                If oznac_x Is Nothing Or oznac_y Is Nothing Then\n                Else\n\n                    'MsgBox(\"koncim\")\n                    Exit For\n                End If\n\n            Next hr\n\n\n            ' Get the part document of the bolt. \n            Dim boltDoc As PartDocument\n            boltDoc = boltOcc.Definition.Document\n\n            ' Query the attributes in the part for the attribute set named \"InsertEdge\".\n            Dim attribSets As AttributeSetsEnumerator\n            attribSets = boltDoc.AttributeManager.FindAttributeSets(\"HranaVlozeni\")\n\n            ' Assume success and get the parent from first item returned, \n            ' which will be the edge. \n            Dim boltEdge As Edge\n            boltEdge = attribSets.Item(1).Parent.Parent\n\n            ' Create a proxy for the edge. \n            Dim boltEdgeProxy As EdgeProxy = Nothing\n            boltOcc.CreateGeometryProxy(boltEdge, boltEdgeProxy)\n\n            ' Create a constraint. \n            oAssyDoc.ComponentDefinition.Constraints.AddInsertConstraint(partEdge, boltEdgeProxy, True, 0)\n\n            'Create an object collection\n            Dim objCol As ObjectCollection\n            objCol = m_inventorApp.TransientObjects.CreateObjectCollection()\n\n            'add the desired occurrence to be patterned\n            objCol.Add(oAssyDef.Occurrences.ItemByName(boltOcc.Name))\n\n            'set the number of patterns in the x direction\n            Dim no_x_rect As Integer\n            no_x_rect = 2\n\n            'set the number of patterns in the y direction\n            Dim no_y_rect As Integer\n            no_y_rect = 2\n\n\n            'vytvo\u0159\u00ed pole komponent\n            oAssyDef.OccurrencePatterns.AddRectangularPattern(objCol, oznac_x, True, 11, no_x_rect, oznac_y, True, 11, no_y_rect)\n\n\n\n\n\n        Else\n            MsgBox(\"Nena\u0161el jsem \u017e\u00e1dnou d\u00edru!\" & vbCrLf & \"Akce bude ukon\u010dena.\")\n            Exit Sub\n        End If\n\n\n\n    End Sub\nEnd Class "], "author": "Richard.MM"},
{"created at": [], "solution Title": "\n                        Re: Rounding to a specific number of decimals\n                    ", "solution": ["Public Sub Round()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisDocument\n    \n    Dim oSheetMetalCompDef As SheetMetalComponentDefinition\n    Set oSheetMetalCompDef = oDoc.ComponentDefinition\n    \n    Dim thick As Double\n    Dim thickAsInt As Integer\n    Dim thickAsString As String\n    \n    thick = oSheetMetalCompDef.Thickness.Value / 2.54\n    thickAsInt = CInt(Math.Round(thick, 3) * 1000)\n    If (thickAsInt >= 1000) Then\n      thickAsString = Format$(thickAsInt / 1000, \"#.00\")\n    Else\n      thickAsString = Format$(thickAsInt, \"#\")\n    End If\n    \n    Debug.Print thickAsString\n   \nEnd Sub"], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: Change orthographic to perspective projection using iLogic\n                    ", "solution": ["Dim", " ", "oCam", " ", "as", " ", "Camera", "\n", "oCam", " ", "=", " ", "ThisApplication", ".", "ActiveView", ".", "Camera", "\n\n", "oCam", ".", "Perspective", " ", "=", " ", "Perspective", "\n", "oCam", ".", "ApplyWithoutTransition", "()"], "author": "rsmabery"},
{"created at": [], "solution Title": "\n                        Re: String format Export to DXF\n                    ", "solution": [], "author": "dominiek.vanwes"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Change BOM Structure from Default(Reference)\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2013 and windows 10\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Cant Copy Sketch in Sheet Metal Environment\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: TransformBy does not appear to work\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How to get Bend added automatically\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: LineType value for Layers in export flat pattern to dxf\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Run Code in selected Part\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Change Home View using iLogic code\n                    ", "solution": [" \n'-----start of ilogic-----\n'sort components in the browser\nThisApplication.CommandManager.ControlDefinitions.Item _\n(\"AssemblyBonusTools_AlphaSortComponentsCmd\").Execute\n\n\n'set a reference to the document\nDim oDoc As Document\noDoc = ThisApplication.ActiveDocument\n\n\n'Set a reference to the top node of the active browser\nDim oTopNode As BrowserNode\noTopNode = oDoc.BrowserPanes.ActivePane.TopNode\nDim oNode As BrowserNode\n\n\nFor Each oNode In oTopNode.BrowserNodes\n' If the node is visible and expanded, collapse it.\nIf oNode.Visible = True And oNode.Expanded = True Then\noNode.Expanded = False\nEnd If\nNext\n\n\n'Return view to Home view\nThisApplication.CommandManager.ControlDefinitions.Item _\n(\"AppViewCubeHomeCmd\").Execute\n\n\n'zoom all\nThisApplication.ActiveView.Fit\n'-----end of ilogic-----"], "author": "S_May"},
{"created at": [], "solution Title": "\n                        Re: Arc As Bend\n                    ", "solution": ["Dim oLine1 As SketchLine3D\nSet oLine1 = oSketch3d.SketchLines3D.AddByTwoPoints(oWorkPoint1, oWorkPoint2, False)\nDim oLine2 As SketchLine3D\nSet oLine2 = oSketch3d.SketchLines3D.AddByTwoPoints(", "oLine1.EndSketchPoint", ", oWorkPoint3, False)\nDim oArc As SketchArc3D\nSet oArc = oArcs3D.AddAsBend(oLine1, oLine2, \"2 mm\")"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Parameters of Sheet Metal features\n                    ", "solution": ["'read flange feature parameters\nSub Read_FlangeFeature_Parameters()\n    \n    ' sheet metal document.\n    Dim sheetMetalDoc As PartDocument\n    Set sheetMetalDoc = ThisApplication.ActiveDocument\n\n    ' Get the sheet metal component definition.\n    Dim smCompDef As SheetMetalComponentDefinition\n    Set smCompDef = sheetMetalDoc.ComponentDefinition\n    \n    Dim smFeatures As SheetMetalFeatures\n    Set smFeatures = smCompDef.Features\n    \n    'Flange feature\n    Dim oFlange As FlangeFeature\n    Set oFlange = smFeatures.FlangeFeatures.Item(1)\n    \n    Call oFlange.SetEndOfPart(True)\n    \n    Dim oDef As FlangeDefinition\n    Set oDef = oFlange.Definition\n    \n    Dim oEdge As Edge\n    \n    For Each oEdge In oDef.Edges\n        Dim oExtent As PartFeatureExtent\n        Set oExtent = oDef.GetWidthExtent(oEdge)\n        \n        Select Case oExtent.Type\n        \n            Case ObjectTypeEnum.kEdgeWidthExtentObject\n                Debug.Print \"Edge Width Extent\"\n                Debug.Print\n\n               ", " Debug.Print \"Bend Position: \" & oDef.BendPosition  'see BendPositionEnum\n                \n                Debug.Print \"Bend Radius parameter: \" & oDef.BendRadius.name\n                Debug.Print \"Bend Radius.Expression: \" & oDef.BendRadius.Expression\n                Debug.Print \"Bend Radius.Value (cm): \" & oDef.BendRadius.value\n                \n                Debug.Print \"Distance parameter: \" & oDef.HeightExtent.Distance.name\n                Debug.Print \"Distance expression: \" & oDef.HeightExtent.Distance.Expression\n                Debug.Print \"Distance value (cm): \" & oDef.HeightExtent.Distance.value\n                Debug.Print \"Height Datum: \" & oDef.HeightExtent.HeightDatumType\n                Debug.Print \"Flange direction: \" & oDef.HeightExtent.FlangeDirection\n                \n                Debug.Print \"Flange angle parameter: \" & oDef.FlangeAngle.name\n                Debug.Print \"Flange angle expression: \" & oDef.FlangeAngle.Expression\n                Debug.Print \"Flange angle value (rad): \" & oDef.FlangeAngle.value", "\n                \n                \n            Case ObjectTypeEnum.kCenteredWidthExtentObject\n                Debug.Print \"Centered Width Extent\"\n                Debug.Print \"   Parameter name : \" & oExtent.Width.name\n                Debug.Print \"   Parameter value: \" & oExtent.Width.value * 10\n                Debug.Print\n                \n            Case ObjectTypeEnum.kOffsetWidthExtentObject\n                Debug.Print \"Offset Width Extent\"\n                Debug.Print \"   Offset1 : \" & oExtent.OffsetDistanceOne.name\n                Debug.Print \"   Value: \" & oExtent.OffsetDistanceOne.value * 10\n                Debug.Print \"   Offset2 : \" & oExtent.OffsetDistanceTwo.name\n                Debug.Print \"   Value: \" & oExtent.OffsetDistanceTwo.value * 10\n                Debug.Print\n                \n            Case ObjectTypeEnum.kWidthOffsetWidthExtentObject\n                Debug.Print \"Width Offset Width Extent\"\n                Debug.Print \"   Width : \" & oExtent.Width.name\n                Debug.Print \"   Value: \" & oExtent.Width.value * 10\n                Debug.Print \"   Offset : \" & oExtent.OffsetDistance.name\n                Debug.Print \"   Value: \" & oExtent.OffsetDistance.value * 10\n                Debug.Print\n            \n        End Select\n\n    Next\n\n    Call smCompDef.SetEndOfPartToTopOrBottom(False)\n    Beep\nEnd Sub", "Output:", "Edge Width Extent", "Bend Position: 75009", "Bend Radius parameter: d9", "Bend Radius.Expression: RayonPli", "Bend Radius.Value (cm): 0,2", "Distance parameter: d7", "Distance expression: 238 mm / 2 ul", "Distance value (cm): 11,9", "Height Datum: 75521", "Flange direction: 20993", "Flange angle parameter: d8", "Flange angle expression: 90,0 deg", "Flange angle value (rad): 1,5707963267949"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Graphical Debugging\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Sketch3D entity lying on a Face\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic : Find Compenent Name exist in Model Browser\n                    ", "solution": ["For i=1 To ThisDoc.Document.ComponentDefinition.Occurrences.Count\n\nIf ThisDoc.Document.ComponentDefinition.Occurrences.Item(i).Name = \"Pump_Selection\"\n\nThen\nMessageBox.Show(ThisDoc.Document.ComponentDefinition.Occurrences.Item(i).Name, \"Component\")", "\nElse", "MessageBox.Show(\"No component found.\", \"Component\")\nEnd If\n\nNext i"], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: Offset surface inside the body\n                    ", "solution": ["Public Sub OffsetTest()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n    \n    Dim fc As Face\n    Set fc = ThisApplication.CommandManager.Pick(kPartFaceFilter, \"Select a face\")\n    Dim faceColl As ObjectCollection\n    Set faceColl = ThisApplication.TransientObjects.CreateObjectCollection\n    Call faceColl.Add(fc)\n    \n    Dim offsetDist As Double\n    offsetDist = 1\n    Dim offFeature As ThickenFeature\n    Set offFeature = partDef.Features.ThickenFeatures.Add(faceColl, _\n                                                          offsetDist, _\n                                                          PartFeatureExtentDirectionEnum.kNegativeExtentDirection, _\n                                                          PartFeatureOperationEnum.kSurfaceOperation, _\n                                                          True, False, False)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: HOLETABLE\n                    ", "solution": [], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: How to add iproperties to a Sheetmetal DXF\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Tools->Macros behaviour changed for some reason (for the worse, if course\n                    ", "solution": [], "author": "rschader"},
{"created at": [], "solution Title": "\n                        Re: Event Trigger in Design Checker is not working\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Retrieve retrieves all dims even when object collection only contains 1\n                    ", "solution": ["CComPtr<ObjectCollection> pObjColl;\nhr = pGenDimensions->GetRetrievableDimensions(pDrawingView, CComVariant(), &pObjColl);\n\nif(SUCCEEDED(hr))\n{\n\tlong nRetrievableDims = 0;\n\thr = pObjColl->get_Count(&nRetrievableDims);\n\n\tif(nRetrievableDims > 0)\n\t{\n\t\t// Retrieve all retrievable dimensions\n\t\tCComPtr<GeneralDimensionsEnumerator> pGenDimsEnum;\n\t\thr = pGenDimensions->Retrieve(pDrawingView, CComVariant(), &pGenDimsEnum);\n\t\t\t\t\t\t\n\t\tlong nTotalDims=0;\n\t\thr = pGenDimsEnum->get_Count(&nTotalDims);\n\n\t\tfor(int nDim = 1; nDim <= nTotalDims; nDim++)\n\t\t{\n\t\t\tCComPtr<GeneralDimension> pGenDim;\n\t\t\thr = pGenDimsEnum->get_Item(_variant_t(nDim), &pGenDim);\n\n\t\t\tif(SUCCEEDED(hr))\n\t\t\t{\n\t\t\t\tVARIANT_BOOL isRetrieved(false);\n\t\t\t\thr = pGenDim->get_Retrieved(&isRetrieved);\n\t\t\t\tif(SUCCEEDED(hr) && isRetrieved)\n\t\t\t\t{\n\t\t\t\t\tCComBSTR paramName;\n\t\t\t\t\tIDispatchPtr pGenDimIDisp;\n\t\t\t\t\thr = pGenDim->get_RetrievedFrom(&pGenDimIDisp);\n\n\t\t\t\t\tCComQIPtr<FeatureDimension> pFeatureDim = CComQIPtr<FeatureDimension>(pGenDimIDisp);\n\t\t\t\t\tif(pFeatureDim != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tCComPtr<Parameter> pParam;\n\t\t\t\t\t\thr = pFeatureDim->get_Parameter(&pParam);\n\t\t\t\t\t\thr = pParam->get_Name(&paramName);\n\t\t\t\t\t}\n\n\t\t\t\t\tCComQIPtr<DimensionConstraint> pDimConstraint = CComQIPtr<DimensionConstraint>(pGenDimIDisp);\n\t\t\t\t\tif(pDimConstraint != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tCComPtr<Parameter> pParam;\n\t\t\t\t\t\thr = pDimConstraint->get_Parameter(&pParam);\n\t\t\t\t\t\thr = pParam->get_Name(&paramName);\n\t\t\t\t\t}\n\n\t\t\t\t\tCComQIPtr<FeatureDimensionProxy> pFeatureDimProxy = CComQIPtr<FeatureDimensionProxy>(pGenDimIDisp);\n\t\t\t\t\tif(pFeatureDimProxy != NULL)\n\t\t\t\t\t{\n\t\t\t\t\t\tCComPtr<Parameter> pParam;\n\t\t\t\t\t\thr = pFeatureDimProxy->get_Parameter(&pParam);\n\t\t\t\t\t\thr = pParam->get_Name(&paramName);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(0 != wcscmp(paramName, L\"ShoeWidth\") &&\n\t\t\t\t\t\t\t0 != wcscmp(paramName, L\"ShoeHeight\"))\n\t\t\t\t\t{\n\t\t\t\t\t\thr = pGenDim->Delete();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tAfxMessageBox(L\"No retrievable dimensions found !\");\n\t\treturn;\n\t}\n}"], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: Resolve links on load using vba\n                    ", "solution": [], "author": "tom"},
{"created at": [], "solution Title": "\n                        Re: HOLE LEADERS\n                    ", "solution": ["Sub LineUpLeader()\n    Dim oDoc As DrawingDocument\n    Dim oObject As Object\n    Dim cnt As Integer\n    Dim oTag() As HoleTag\n    Dim ptPosition() As Point2d\n    Dim constantX As Double\n    Dim variatingY As Double\n    Dim bFirstItem As Boolean\n    \n    If ThisApplication.ActiveDocument.DocumentType = kDrawingDocumentObject Then\n        Dim tr As TransientGeometry\n        Set tr = ThisApplication.TransientGeometry\n        \n        Set oDoc = ThisApplication.ActiveDocument\n        If oDoc.SelectSet.Count > 0 Then\n            bFirstItem = True\n            cnt = oDoc.SelectSet.Count\n            ReDim oTag(cnt)\n            ReDim ptPosition(cnt)\n            For i = 1 To cnt\n                If (oDoc.SelectSet.Item(i).Type = kHoleTagObject) Then\n                    Set oTag(i) = oDoc.SelectSet.Item(i)\n                    If bFirstItem Then\n                        constantX = oTag(i).Position.X\n                        bFirstItem = False\n                    End If\n                    variatingY = oTag(i).Position.Y\n                    Set ptPosition(i) = tr.CreatePoint2d(constantX, variatingY)\n                    \n                End If\n            Next\n            For i = 1 To cnt\n                If Not (oTag(i) Is Nothing) Then\n                  oTag(i).Leader.RootNode.Position = ptPosition(i)\n                  oTag(i).Position = ptPosition(i)\n                End If\n            Next\n        End If\n    End If\nEnd Sub", "Sub LineUpLeader()\n    Dim oDoc As DrawingDocument\n    Dim oObject As Object\n    Dim cnt As Integer\n    Dim oTag() As HoleTag\n    Dim ptPosition() As Point2d\n    Dim ptPosition2() As Point2d\n    Dim constantX As Double\n    Dim variatingY As Double\n    Dim bFirstItem As Boolean\n    \n    If ThisApplication.ActiveDocument.DocumentType = kDrawingDocumentObject Then\n        Set oDoc = ThisApplication.ActiveDocument\n        If oDoc.SelectSet.Count > 0 Then\n            bFirstItem = True\n            cnt = oDoc.SelectSet.Count\n            ReDim oTag(cnt)\n            ReDim ptPosition(cnt)\n            ReDim ptPosition2(cnt)\n            For i = 1 To cnt\n                If (oDoc.SelectSet.Item(i).Type = kHoleTagObject) Then\n                    Set oTag(i) = oDoc.SelectSet.Item(i)\n                    If bFirstItem Then\n                        constantX = oTag(i).Position.X\n                        variatingY = oTag(i).Position.Y\n                        bFirstItem = False\n                    Else\n                        variatingY = variatingY - 0.5   'oTag(i).Position.Y\n                    End If\n                    Set ptPosition(i) = ThisApplication.TransientGeometry.CreatePoint2d(constantX, variatingY)\n                    Set ptPosition2(i) = ThisApplication.TransientGeometry.CreatePoint2d(constantX - 0.5, variatingY)\n                End If\n            Next\n            For i = 1 To cnt\n                If Not (oTag(i) Is Nothing) Then\n                    oTag(i).Leader.RootNode.Position = ptPosition2(i)\n                    oTag(i).Position = ptPosition(i)\n                End If\n            Next\n        End If\n    End If\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic\n                    ", "solution": ["Sub", " ", "Main", "()", "\n\n    ", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", "\n    ", "oAsmCompDef", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", "\n\n\n       ", "Dim", " ", "oOcc1", " ", "As", " ", "ComponentOccurrence", "\n    ", "oOcc1", " ", "=", " ", "oAsmCompDef", ".", "Occurrences", ".", "Item", "(245", ")", "\n\n    ", "Dim", " ", "oOcc2", " ", "As", " ", "ComponentOccurrence", "\n    ", "oOcc2", " ", "=", " ", "oAsmCompDef", ".", "Occurrences", ".", "Item", "(246", ")", "\n\n\n        ", "Dim", " ", "oPartPoint1", " ", "As", " ", "WorkPoint", "\n     ", "oPartPoint1", " ", "=", " ", "oOcc1", ".", "Definition", ".", "WorkPoints", ".", "Item", "(", "1", ")", "\n\n    ", "Dim", " ", "oPartPoint2", " ", "As", " ", "WorkPoint", "\n    ", "oPartPoint2", " ", "=", " ", "oOcc2", ".", "Definition", ".", "WorkPoints", ".", "Item", "(", "1", ")", "\n\n    ", "Dim", " ", "oPartPlaneXY", " ", "As", " ", "WorkPlane", "\n    ", "oPartPlaneXY", " ", "=", " ", "oOcc1", ".", "Definition", ".", "WorkPlanes", "(", "3", ")", "\n    \n    ", "Dim", " ", "oPart2PlaneXY", " ", "As", " ", "WorkPlane", "\n    ", "oPart2PlaneXY", " ", "=", " ", "oOcc2", ".", "Definition", ".", "WorkPlanes", "(", "3", ")", "\n\n    \n        ", "Dim", " ", "oAsmPoint1", " ", "As", " ", "WorkPointProxy", "\n    ", "Call", " ", "oOcc1", ".", "CreateGeometryProxy", "(", "oPartPoint1", ", ", "oAsmPoint1", ")", "\n\n    ", "Dim", " ", "oAsmPoint2", " ", "As", " ", "WorkPointProxy", "\n    ", "Call", " ", "oOcc2", ".", "CreateGeometryProxy", "(", "oPartPoint2", ", ", "oAsmPoint2", ")", "\n    \n    ", "Dim", " ", "oPartPlane1", " ", "As", " ", "WorkPlaneProxy", " \n    ", "Call", " ", "oOcc1", ".", "CreateGeometryProxy", "(", "oPartPlaneXY", ", ", "oPartPlane1", ")", "\n    \n    ", "Dim", " ", "oPart2Plane1", " ", "As", " ", "WorkPlaneProxy", "\n    ", "Call", " ", "oOcc2", ".", "CreateGeometryProxy", "(", "oPart2PlaneXY", ", ", "oPart2Plane1", ")", "\n\n    \n    ", "'", " Create the constraint using the work point proxies.", "\n    ", "Call", " ", "oAsmCompDef", ".", "Constraints", ".", "AddMateConstraint", "(", "oAsmPoint1", ", ", "oAsmPoint2", ", ", "0", ")", "\n    ", "Call", " ", "oAsmCompDef", ".", "Constraints", ".", "AddMateConstraint", "(", "oPartPlane1", ", ", "oPart2Plane1", ", ", "0", ")", "\n \n", "End Sub", "\n"], "author": "dtowngurl51"},
{"created at": [], "solution Title": "\n                        Re: how to collect  Edge collection?\n                    ", "solution": ["Sub CountEdges()", "  Dim oDoc As PartDocument", "  Dim oSurfaceBody As SurfaceBody", "  Dim oEdge As Edge", "  Dim i As Integer", " ", "  Set oDoc = ThisDocument", "  i = 0", " ", "  For Each oSurfaceBody In oDoc.ComponentDefinition.SurfaceBodies", "    For Each oEdge In oSurfaceBody.Edges", "      i = i + 1", "    Next", "  Next", " ", "  MsgBox \"Edges Qty : \" + Str(i)", "End Sub"], "author": "pberube"},
{"created at": [], "solution Title": "\n                        Re: iLogic HRESULT:0x80020003 (DISP_E_MEMBERNOTFOUND))??\n                    ", "solution": ["oParameters = ThisApplication.ActiveDocument.ComponentDefinition.Parameters.UserParameters\nParameter.Quiet = True\nMultiValue.Quiet = True\nIf Parameter(\"STRUCTURE\") Is Nothing Then\n\toParameter = oParameters.AddByValue(\"STRUCTURE\", \"A - Assembly\", UnitsTypeEnum.kTextUnits)\n\tMultiValue.SetList(\"STRUCTURE\", \"A - Assembly\", \"C - Component\")\nEnd If\nIf Parameter(\"SECTION\") Is Nothing Then\n\toParameter = oParameters.AddByValue(\"SECTION\", \"A - Assembly\", UnitsTypeEnum.kTextUnits)\n\tMultiValue.SetList(\"SECTION\", \"A - Assembly\", \"B -Bus\", \"D - IDP8\", \"E - Electrical\", \"F - Fluid\", \"M - Mechanical\" , \"S - Supplied\", \"T - Tooling/Testing\")\nEnd If"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Active dimension style not the default\n                    ", "solution": [], "author": "pberube"},
{"created at": [], "solution Title": "\n                        Re: ExpertMode?\n                    ", "solution": [], "author": "mikazakov"},
{"created at": [], "solution Title": "\n                        Re: Project To Surface with API in 3D sketch\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: VBA - iProperty value\n                    ", "solution": ["oPropSet = oDoc.Item(\"Inventor Document Summary Information\")", "oPropSet = oDoc.PropertySets.Item(\"Inventor Document Summary Information\")", "' Get the active document.\nDim oDoc As Document\noDoc = _invApp.ActiveDocument\n\n' Get a reference to the \"Inventor Document Summary Information\" PropertySet\nDim oPropSet As PropertySet\noPropSet = oDoc.PropertySets.Item(\"Inventor Document Summary Information\")\n\n' Get the Category property.\nDim oCat As [Property]\noCat = oPropSet.Item(\"Category\")\n\nMsgBox(oCat.Value)"], "author": "Jef_E"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Remove / Change View Label\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Geometry Intent Scaled Views Wonky Leaders\n                    ", "solution": ["For Each oView In oDwgDoc.ActiveSheet.DrawingViews\n\tFor Each oSketch In oView.Sketches\n\t\tFor Each oLine In oSketch.SketchLines\n\t\t\tIf Math.Abs(Math.Round(oView.Scale*(oLine.StartSketchPoint.Geometry.X - oLine.EndSketchPoint.Geometry.X),3)) = Math.Abs(Math.Round((oSP.X - oEP.X),3)) And _\n\t\t\t\tMath.Abs(Math.Round(oView.Scale*(oLine.StartSketchPoint.Geometry.Y - oLine.EndSketchPoint.Geometry.Y),3)) = Math.Abs(Math.Round((oSP.Y - oEP.Y),3))\t\n\t\t\t\toSecLine = oLine\n\t\t\t\toCP = oTG.CreatePoint2d(oSketch.Parent.Position.X, oSketch.Parent.Position.Y)\n\t\t\t\toSecSP = oTG.CreatePoint2d(oCP.X +oSecLine.StartSketchPoint.Geometry.X*oView.Scale, oCP.Y + oSecLine.StartSketchPoint.Geometry.Y*oView.Scale)\n\t\t\t\toSecEP = oTG.CreatePoint2d(oCP.X +oSecLine.EndSketchPoint.Geometry.X*oView.Scale, oCP.Y + oSecLine.EndSketchPoint.Geometry.Y*oView.Scale)\n\t\t\tEnd If\n\t\tNext\n\tNext\nNext\n\noLeaderPoints1 = ThisApplication.TransientObjects.CreateObjectCollection\noGeometryIntent1 = oDwgDoc.ActiveSheet.CreateGeometryIntent(oSecLine, oSecSP)\noLeaderPoints1.Add(oGeometryIntent1)\n\noLeaderPoints2 = ThisApplication.TransientObjects.CreateObjectCollection\noGeometryIntent2 = oDwgDoc.ActiveSheet.CreateGeometryIntent(oSecLine, oSecEP)\noLeaderPoints2.Add(oGeometryIntent2)", "oS1 = oDwgDoc.ActiveSheet.SketchedSymbols.AddWithLeader(oSSD1,oLeaderPoints1,angle,1,,False,True)", " oS1.LeaderVisible = False", "oS2 = oDwgDoc.ActiveSheet.SketchedSymbols.AddWithLeader(oSSD,oLeaderPoints2,angle1,1,PromptStrings,False,True)", " oS2.LeaderVisible = False"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: 2D Coordinates vs. Height property?\n                    ", "solution": ["AddByTwoPoints", "(", "oTG", ".", "CreatePoint2d", "(", "0", ",", "((", "-", "oView1", ".", "Height", "/", "2", ")", "*", "(", "1", "/", "oView1", ".", "Scale", "))", "-", "1", ")", ",", "oTG", ".", "CreatePoint2d", "(", "0", ",", "(", "oView1", ".", "Height", "/", "2", ")", "*", "(", "1", "/", "oView1", ".", "Scale", ")", "+", "1", "))", "\n"], "author": "thukon"},
{"created at": [], "solution Title": "\n                        Re: iLogic First Angle Projection\n                    ", "solution": [], "author": "thukon"},
{"created at": [], "solution Title": "\n                        Re: Choosing open model for placing baseview?\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Reset OverrideColor\n                    ", "solution": [], "author": "Mkz81"},
{"created at": [], "solution Title": "\n                        Re: Inventor 14 FEA with API\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Run Rule in Another Document\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: set IsContentMember to False\n                    ", "solution": [], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: iLogic check the Type of Custom iProperties\n                    ", "solution": ["Dim oPartDoc As PartDocument\noPartDoc = ThisApplication.ActiveDocument\n\nDim invCustomProps As PropertySet\ninvCustomProps = oPartDoc.PropertySets.Item(\"User Defined Properties\")\n\nDim oProp As Inventor.Property\nFor Each oProp In invCustomProps\n\tIf TypeOf oProp.Value Is Integer Then\n\t\tMessageBox.Show(oProp.Name & \" is Integer type : \" & oProp.Value, \"iProperty type check\")\n\tElse If TypeOf oProp.Value Is Date Then\n\t\tMessageBox.Show(oProp.Name & \" is Date type : \" & oProp.Value, \"iProperty type check\")\n\tElse If TypeOf oProp.Value Is Boolean Then\n\t\tMessageBox.Show(oProp.Name & \" is YesNo type : \" & oProp.Value, \"iProperty type check\")\n\tEnd If\nNext"], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: AUTOMATIC DXF GENERATION\n                    ", "solution": ["Sub Main()\nDim oDoc As Document = ThisApplication.ActiveDocument\nIf oDoc.DocumentSubType.DocumentSubTypeID = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n\tTry\n\tDim oSMCD As SheetMetalComponentDefinition = oDoc.ComponentDefinition\n\tIf oSMCD.HasFlatPattern Then\n\t\toSMCD.FlatPattern.Edit\n\t\tDim sOut As String\n\t\tsOut = \"FLAT PATTERN DXF?AcadVersion=2000\" _\n\t\t\t+ \"&OuterProfileLayer=IV_INTERIOR_PROFILES\" _\n\t\t\t+ \"&InvisibleLayers=IV_TANGENT\" _\n\t\t\t+ \"&SimplifySplines=True\" _\n\t\t\t+ \"&BendLayerLineType=37634\" _\n\t\t\t+ \"&BendLayerColor=255;255;0\" _\n\t\t\t+ \"&BendUpLayerLineType=37634\" _\n\t\t\t+ \"&BendUpLayerColor=255;255;0\" _\n\t\t\t+ \"&BendDownLayerLineType=37634\" _\n\t\t\t+ \"&BendDownLayerColor=255;255;0\" _\n\t\t\t+ \"&FeatureProfilesLayerLineType=37634\" _\n\t\t\t+ \"&FeatureProfilesLayerColor=255;255;0\" _\n\t\t\t+ \"&FeatureProfilesUpLayerLineType=37634\" _\n\t\t\t+ \"&FeatureProfilesUpLayerColor=255;255;0\" _\n\t\t\t+ \"&FeatureProfilesDownLayerLineType=37634\" _\n\t\t\t+ \"&FeatureProfilesDownLayerColor=255;255;0\"\n\t\tDim sFN As String = ThisDoc.FileName(False)\n\t\tDim sPath As String = ThisDoc.Path\n\t\tsFN = sPath & \"\\\" & sFN & \".dxf\"\n\t\toSMCD.DataIO.WriteDataToFile( sOut, sFN)\n\t\toSMCD.FlatPattern.ExitEdit()\n\tEnd If\n\tCatch\n\tMsgBox (\"Couldn't save the DXF file.\")\n\tEnd Try\nEnd If\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Simple Parameter Issue\n                    ", "solution": ["s = x\nParameter(\"y\")=Parameter(\"x\")/2", "s = y\nParameter(\"x\")=Parameter(\"y\")*2"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic Delete Files containing string Value\n                    ", "solution": ["For Each foundFile As String In My.Computer.FileSystem.GetFiles(\n    My.Computer.FileSystem.SpecialDirectories.MyDocuments,\n    Microsoft.VisualBasic.FileIO.SearchOption.SearchAllSubDirectories, \"*.ipt\")\n\n    Listbox1.Items.Add(foundFile)\nNext", "'Delete Files from folder containing NN\nDim path As String = ThisDoc.Path & \"\\\"\nFor Each foundFile As String In My.Computer.FileSystem.GetFiles(path,\nMicrosoft.VisualBasic.FileIO.SearchOption.SearchAllSubDirectories, \"*\" & NN & \".*\")\nMy.Computer.FileSystem.DeleteFile(foundFile)\nNext", "\u00a0", "\n"], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: Selecting Occurrences in Assemblies \u2260 Selecting Occurrences in Weldments\n                    ", "solution": ["If ParameterExistsInPart(oCompOcc.Definition, \"CustomPart\") Then g_inventorApplication.ActiveDocument.SelectSet.Rem\u200bove(oCompOcc)", "If Not TypeOf (oCompOcc) Is WeldsComponentDefinition AndAlso ParameterExistsInPart(oCompOcc.Definition, \"CustomPart\") Then g_inventorApplication.ActiveDocument.SelectSet.Rem\u200bove(oCompOcc)"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Inventor Deployment - Import Custom Settings.\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Delete Translation report\n                    ", "solution": ["Sub Test()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n \n    Dim oDescr As ReferencedOLEFileDescriptor\n    Set oDescr = oDoc.ReferencedOLEFileDescriptors.Item(1)\n    \n    Debug.Print \"Display name: \" & oDescr.DisplayName\n    oDescr.Delete\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Access iProperties of ActiveDocument\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Max point of section line\n                    ", "solution": ["'SECTION SYMBOL WIZARD\n'JRK - 30.Jun.15\n\n'PURPOSE - By running this rule, it allows you to place section symbols and tweak them for each drawing view in the sheet\n\n'v0 - RELEASE\n\nSub Main()\n'Variable Declarations\nDim oDwgDoc As DrawingDocument = ThisApplication.ActiveDocument\n\nDim oSelectSet As SelectSet\n\nDim oCommandMgr As CommandManager = ThisApplication.CommandManager\n\nDim oDLine As DrawingCurveSegment\nDim oView As DrawingView\nDim oSketch As DrawingSketch\nDim oLine As SketchLine\nDim oSecLine As SketchLine\n\nDim oSecEP As Point2d\nDim oSecSP As Point2d\n\nDim angle As Double\n\nDim oTG As TransientGeometry = ThisApplication.TransientGeometry\nDim oGeometryIntent1 As GeometryIntent\nDim oLeaderPoints1 As ObjectCollection\nDim oGeometryIntent2 As GeometryIntent\nDim oLeaderPoints2 As ObjectCollection\n\nDim oSSD As SketchedSymbolDefinition\nDim oSSD1 As SketchedSymbolDefinition\nDim oSSD2 As SketchedSymbolDefinition\nDim oSSD3 As SketchedSymbolDefinition\n\nDim oControlDef1 As ControlDefinition\n\nDim oTextBoxes As TextBoxes\n\nDim FS As Boolean = True\nDim RS As Boolean = True\n\n'''Begin functionality\n\n\noDLine = oCommandMgr.Pick(SelectionFilterEnum.kDrawingCurveSegmentFilter, \"Select the LINE\")\n\n\noSP = oDLine.StartPoint\noEP = oDLine.EndPoint\n\n\n\nDim oV1 As Vector2d\nDim oV2 As Vector2d\n\nIf oEP.Y > oSP.Y\n\toV1 = ThisApplication.TransientGeometry.CreateVector2d(oEP.X - oSP.X, oEP.Y - oSP.Y)\n\toV2 = ThisApplication.TransientGeometry.CreateVector2d(1, 0)\nElse\n\toV1 = ThisApplication.TransientGeometry.CreateVector2d(oSP.X - oEP.X, oSP.Y - oEP.Y)\n\toV2 = ThisApplication.TransientGeometry.CreateVector2d(1, 0)\nEnd If\n\nangle = oV2.AngleTo(oV1)\n\nFor Each oView In oDwgDoc.ActiveSheet.DrawingViews\n\tFor Each oSketch In oView.Sketches\n\t\tFor Each oLine In oSketch.SketchLines\n\t\t\tIf Math.Abs(Math.Round(oView.Scale*(oLine.StartSketchPoint.Geometry.X - oLine.EndSketchPoint.Geometry.X),3)) = Math.Abs(Math.Round((oSP.X - oEP.X),3)) And _\n\t\t\t\tMath.Abs(Math.Round(oView.Scale*(oLine.StartSketchPoint.Geometry.Y - oLine.EndSketchPoint.Geometry.Y),3)) = Math.Abs(Math.Round((oSP.Y - oEP.Y),3))\t\n\t\t\t\toSecLine = oLine\n\t\t\t\toCP = oTG.CreatePoint2d(oSketch.Parent.Position.X, oSketch.Parent.Position.Y)\n\t\t\t\toSecSP = oTG.CreatePoint2d(oCP.X +oSecLine.StartSketchPoint.Geometry.X*oView.Scale, oCP.Y + oSecLine.StartSketchPoint.Geometry.Y*oView.Scale)\n\t\t\t\toSecEP = oTG.CreatePoint2d(oCP.X +oSecLine.EndSketchPoint.Geometry.X*oView.Scale, oCP.Y + oSecLine.EndSketchPoint.Geometry.Y*oView.Scale)\n\t\t\tEnd If\n\t\tNext\n\tNext\nNext\n\n\n\noLeaderPoints1 = ThisApplication.TransientObjects.CreateObjectCollection\n'oLeaderPoints1.Add(oSP)\n'oLeaderPoints1.Add(oSecSP)\t\noGeometryIntent1 = oDwgDoc.ActiveSheet.CreateGeometryIntent(oSecLine, oSecSP)\noLeaderPoints1.Add(oGeometryIntent1)\n\noLeaderPoints2 = ThisApplication.TransientObjects.CreateObjectCollection\n'oLeaderPoints2.Add(oEP)\n'oLeaderPoints2.Add(oSecEP)\t\noGeometryIntent2 = oDwgDoc.ActiveSheet.CreateGeometryIntent(oSecLine, oSecEP)\noLeaderPoints2.Add(oGeometryIntent2)\n\nDim PromptStrings(0 To 1) As String\nPromptStrings(0) = \"\"\nPromptStrings(1) = \"\"\n\noSSD1 = oDwgDoc.SketchedSymbolDefinitions.Item(\"Section Tail\")\noSSD2 = oDwgDoc.SketchedSymbolDefinitions.Item(\"Section Symbol - Up\")\noSSD3 = oDwgDoc.SketchedSymbolDefinitions.Item(\"Section Symbol - Down\")\n\nangle = NormalizeAngle(angle + Math.PI)\n\n'Decide which sketched symbol to use based upon angle\nIf (0 <= angle And angle < (Math.PI/2)) Or (3*Math.PI/2) <= angle And angle < (2*Math.PI)\n\toSSD = oSSD2\n\tangle1 = angle\nElse\n\toSSD = oSSD3\n\tangle1 = NormalizeAngle(angle + Math.PI)\nEnd If\n\n\t\noS1 = oDwgDoc.ActiveSheet.SketchedSymbols.AddWithLeader(oSSD1,oLeaderPoints1,angle,1,,False,True)\n\toS1.LeaderVisible = False\noS2 = oDwgDoc.ActiveSheet.SketchedSymbols.AddWithLeader(oSSD,oLeaderPoints2,angle1,1,PromptStrings,False,True)\n\toS2.LeaderVisible = False\n\noSelectSet = oDwgDoc.SelectSet \n   \toSelectSet.Clear \n\toSelectSet.Select(oS2)\n\t\noControlDef1 = oCommandMgr.ControlDefinitions.Item(\"DrawingEditFieldTextCmd\")\noControlDef1.Execute\n\noTextBoxes = oS2.Definition.Sketch.TextBoxes\n\nPromptStrings(0) = oS2.GetResultText(oTextBoxes.Item(1))\nPromptStrings(1) = oS2.GetResultText(oTextBoxes.Item(2))\n\nWhile FS = True And RS = True\n\t'Reset\n\tFS = True\n\tRS = True\n\t\n\t'Rotate Symbol\n\toRS = MsgBox(\"Rotate Symbols 180 degrees?\", MsgBoxStyle.YesNo, \"Section Symbols\")\n\t\tIf oRS = vbNo \n\t\t\tRS = False\n\t\tElse\n\t\t\toS1.Delete\n\t\t\toS2.Delete\n\t\t\tangle = NormalizeAngle(angle + Math.PI)\n\t\t\t\n\t\t\tIf (0 <= angle And angle < (Math.PI/2)) Or (3*Math.PI/2) <= angle And angle < (2*Math.PI)\n\t\t\t\toSSD = oSSD2\n\t\t\tElse\n\t\t\t\toSSD = oSSD3\n\t\t\t\tangle1 = NormalizeAngle(angle + Math.PI)\n\t\t\tEnd If\n\t\t\t\n\t\t\toS1 = oDwgDoc.ActiveSheet.SketchedSymbols.AddWithLeader(oSSD1,oLeaderPoints1,angle,1,,False,True)\n\t\t\t\toS1.LeaderVisible = False\n\t\t\toS2 = oDwgDoc.ActiveSheet.SketchedSymbols.AddWithLeader(oSSD,oLeaderPoints2,angle1,1,PromptStrings,False,True)\n\t\t\t\toS2.LeaderVisible = False\n\t\tEnd If\n\t\n\t'Swap Symbols\n\toFS = MsgBox(\"Swap Head and Tail?\", MsgBoxStyle.YesNo, \"Section Symbols\")\n\t\tIf oFS = vbNo \n\t\t\tFS = False\n\t\tElse\n\t\t\toS1.Delete\n\t\t\toS2.Delete\n\t\t\toS1 = oDwgDoc.ActiveSheet.SketchedSymbols.AddWithLeader(oSSD1,oLeaderPoints2,angle,1,,False,True)\n\t\t\toS1.LeaderVisible = False\n\t\t\toS2 = oDwgDoc.ActiveSheet.SketchedSymbols.AddWithLeader(oSSD,oLeaderPoints1,angle1,1,PromptStrings,False,True)\n\t\t\toS2.LeaderVisible = False\n\t\tEnd If\nEnd While 'Fs / RS = True\n\noRemoveLabels\n\nEnd Sub\n\nFunction NormalizeAngle(angle As Double)\nDim oAngle As Double\nDim multiple As Integer\nIf Math.Abs(angle) >= 2*Math.PI\n\tmultiple = angle \\ 2*Math.PI\n\toAngle = angle - multiple*2*Math.PI\nElse\n\toAngle = angle\nEnd If\nReturn oAngle\nEnd Function\n\nSub oRemoveLabels\n\nDim oDoc As Document = ThisApplication.ActiveDocument\nDim oView As DrawingView\nDim i As String = \"\"\n\nFor Each oView In oDoc.ActiveSheet.DrawingViews\n\tIf oView.Type = ObjectTypeEnum.kSectionDrawingViewObject\n\t\toView.ShowLabel = False\n\t\ti = \" \" + i\n\t\toView.Name = i\n\tEnd If\nNext\n\t\t\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: save as STEP on network location\n                    ", "solution": ["oData.FileName = ", "\"N:\\PE\\\" & ThisDoc.FileName(False) ", "& \"_\" & iProperties.Value(\"Project\", \"Revision Number\") ", "& \".stp\""], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: AddDiameter Sketch Constraint help\n                    ", "solution": [], "author": "mslosar"},
{"created at": [], "solution Title": "\n                        Re: Find part with item number - 2014\n                    ", "solution": ["Sub FindBalloonOnSheet()\n    Dim m_InventorApplication As Inventor.Application\n    Set m_InventorApplication = GetObject(, \"Inventor.Application\")\n    \n    Dim m_DrawingDocument As Inventor.DrawingDocument\n    Set m_DrawingDocument = m_InventorApplication.ActiveDocument\n    \n    Dim m_Sheet As Inventor.Sheet\n    \n    For Each m_Sheet In m_DrawingDocument.Sheets\n        Dim m_Balloon As Inventor.Balloon\n        For Each m_Balloon In m_Sheet.Balloons\n        Dim m_BalloonValueSet As Inventor.BalloonValueSet\n            For Each m_BalloonValueSet In m_Balloon.BalloonValueSets\n                If m_BalloonValueSet.ItemNumber = 33 Then\n                    m_Sheet.Activate\n                    Call m_DrawingDocument.SelectSet.Select(m_Balloon)\n                End If\n            Next\n        Next\n    Next\nEnd Sub"], "author": "m.sickl"},
{"created at": [], "solution Title": "\n                        Re: How do I close a Userform?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Select Face for Local Mesh Inventor Stress Analysis\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: ilogic to count features without including those that are below end of part.\n                    ", "solution": ["' This looks at the number of features in the part' It then sets a shared variable \"Feature_Count\" equal to the number of features found\nDim FeatureList As New ArrayList\n\n    For Each oFeature As PartFeature In ThisDoc.Document.ComponentDefinition.Features\n        If Not oFeature.HealthStatus = HealthStatusEnum.kBeyondStopNodeHealth And Not oFeature.Suppressed = True  Then\n                FeatureList.Add(oFeature.Name)\n            End If\n\t\t\t\n        Next\n\nSharedVariable(\"Feature_Count\") = FeatureList.count"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Suppress messagebox\n                    ", "solution": ["If", " ", "Feature", ".", "IsActive", "(", "\"", "Sparing2", "\"", ")", " ", "=", " ", "True", " ", "Then", "\n                ", "'", "Melding als de locatie afstand van sparing 1 groter is dan sparing locatie 2.", "\n                ", "If", " ", "SparingLocatie1", " ", ">=", " ", "SparingLocatie2", " ", "Then", "\n                ", "MessageBox", ".", "Show", "(", "\"", "Let op afstand sparing 1 is groter dan sparing 2 ", "\"", ", ", "\"", "Afstand sparing", "\"", ")", "\n                    ", "End", " ", "If", "\n                \n                ", "'", "\ufffdls sparing locatie 1 is groter dan sparing locatie 2 word sparing 2 met 110mm voorbij sparing 1 geplaatst.    ", "\n                ", "If", " ", "SparingLocatie1", " ", ">=", " ", "SparingLocatie2", " ", "Then", "\n                    ", "SparingLocatie2", " ", "=", " ", "SparingLocatie1", " ", "+", " ", "110", "\n                ", "End", " ", "If", "\n", "End", " ", "If", "'Sparing type nummer aansturen afhankelijk van keuze.\nSelect Case Sparingtype\n\tCase \"Sparing 1\"\n\tSparing_type_nr = 1\n\tCase \"Sparing 2\"\n\tSparing_type_nr = 2\n\tCase Else\n\tSparing_type_nr = 0\nEnd Select\n\n'Sparing aan of uit zetten afhankelijk van keuze.\nIf Sparing_type_nr = 1 Then\n\tFeature.IsActive(\"Sparing1\") = True\n\tFeature.IsActive(\"Sparing2\") = False\nElse if Sparing_type_nr = 2 Then\n\tFeature.IsActive(\"Sparing1\") = True\n\tFeature.IsActive(\"Sparing2\") = True\nElse if Sparing_type_nr = 0 Then\n\tFeature.IsActive(\"Sparing1\") = False\n\tFeature.IsActive(\"Sparing2\") = False\nEnd If\n\n'Melding als de locatie afstand van sparing 1 groter is dan sparing locatie 2.\nIf SparingLocatie1 >= SparingLocatie2 Then", "     If ", "Feature.IsActive(\"Sparing2\") = True Then", "                       MessageBox.Show(\"Let op afstand sparing 1 is groter dan sparing 2 \", \"Afstand sparing\")", "          End If", "End If", "'\u00c1ls sparing locatie 1 is groter dan sparing locatie 2 word sparing 2 met 110mm voorbij sparing 1 geplaatst.\t", "If SparingLocatie1 >= SparingLocatie2 Then", "\tSparingLocatie2 = SparingLocatie1 + 110", "End If"], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Changing Iproperties material in a part\n                    ", "solution": [], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Measuring Area of a Surface Body\n                    ", "solution": [], "author": "bcornwellmott"},
{"created at": [], "solution Title": "\n                        Re: Trying to Change my Ribbon\n                    ", "solution": [], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: EXPORT IDW TO DWG USING DWG ADDIN\n                    ", "solution": ["' Set a reference to the DWG translator add-in. \nDim oDWGAddIn As TranslatorAddIn \nDim i As Long \nFor i = 1 To ThisApplication.ApplicationAddIns.count \n    If ThisApplication.ApplicationAddIns.Item(i). _ \n    ClassIdString = _ \n    \"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\" Then \n        oDWGAddIn = ThisApplication. _ \n                  ApplicationAddIns.Item(i) \n        Exit For \n    End If \nNext \n    \n' Check to make sure the add-in is activated. \nIf Not oDWGAddIn.Activated Then \n    oDWGAddIn.Activate \nEnd If \n    \n' Create a name-value map to supply information to the translator. \nDim oNameValueMap As NameValueMap = ThisApplication. _ \n    TransientObjects.CreateNameValueMap \n\nDim strIniFile As String = \"O:\\Templates\\Inventor\\Export templates\\DWGExport.ini\"\n\n' Create the name-value that specifies the ini file to use. \nCall oNameValueMap.Add _ \n    (\"Export_Acad_IniFile\", strIniFile) \n\n' Create a translation context and define \n' that we want to output to a file. \nDim oContext As TranslationContext = ThisApplication.TransientObjects. _ \n    CreateTranslationContext \noContext.Type = kFileBrowseIOMechanism \n    \n     \n' Define the type of output by specifying the filename. \nDim oOutputFile As DataMedium = ThisApplication. _ \n    TransientObjects.CreateDataMedium \noOutputFile.FileName = \"O:\\TEMPOMARY.DWG\" \n    \n   \n    \n' Call the SaveCopyAs method of the add-in. \nCall oDWGAddIn.SaveCopyAs _ \n    (ThisApplication.ActiveDocument, _ \n          oContext, _ \n          oNameValueMap, _ \n          oOutputFile) "], "author": "Owner2229"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Change BOM structure of all assy children to Phantom\n                    ", "solution": ["Public", " ", "Sub", " ", "Main", "()", "\n\n    ", "'", " Get the active assembly. ", "\n    ", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", " \n    ", "oAsmDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", " \n    \n    \n    ", "Call", " ", "TraverseAssembly", "(", "oAsmDoc", ".", "ComponentDefinition", ".", "Occurrences", ", ", "1", ")", "\n\n", "End Sub", " \n\n", "Private", " ", "Sub", " ", "TraverseAssembly", "(", "Occurrences", " ", "As", " ", "ComponentOccurrences", ", ", "_", " \n                             ", "Level", " ", "As", " ", "Integer", ")", " \n    \n    ", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", " \n    ", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "Occurrences", " \n    ", "Try", "\n    ", "oOcc", ".", "Definition", ".", "BOMStructure", " ", "=", " ", "BOMStructureEnum", ".", "kPhantomBOMStructure", "\n    ", "Catch", "\n    '", "MsgBox", "(", "oOcc", ".", "Name", " ", "&", " ", "\"", "remains unchanged", "\"", ")", "\n    ", "End", " ", "Try", "\n        ", "'", " Check to see if this occurrence represents a subassembly ", "\n        ", "'", " and recursively call this function to traverse through it. ", "\n        ", "If", " ", "oOcc", ".", "DefinitionDocumentType", " ", "=", " ", "kAssemblyDocumentObject", " ", "Then", "\n            ", "Call", " ", "TraverseAssembly", "(", "oOcc", ".", "SubOccurrences", ", ", "Level", " ", "+", " ", "1", ")", " \n        ", "End", " ", "If", " \n    ", "Next", "\n", "End Sub", "\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to set ActiveLightingstyle for a PartDocument with vba\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: What's this dimension status?\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: UnitsOfMeasure\n                    ", "solution": ["Sub DimensionDisplay()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n\n    Dim oDef As PartComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    oDef.Parameters.DimensionDisplayType = DimensionDisplayTypeEnum.kDimensionDisplayAsExpession\nEnd Sub\n\n\nSub DimensionDisplayViaCommand()\n    Dim oDef As ControlDefinition\n    Set oDef = ThisApplication.CommandManager.ControlDefinitions(\"DimensionDisplayEqn\")\n    oDef.Execute\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Renaming sketch (created by using paste method)\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Is there a way to pass parameters to iPart?\n                    ", "solution": [], "author": "mwighton"},
{"created at": [], "solution Title": "\n                        Re: VBA: Change \"Creation Date\" iProperty\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Hole selection\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How to show the number of bends in a sheet metal part\n                    ", "solution": ["Dim", " ", "oPartDoc", " ", "As", " ", "PartDocument", "\n", "oPartDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oCompDef", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "oCompDef", " ", "=", " ", "oPartDoc", ".", "ComponentDefinitions", ".", "Item", "(", "1", ")", "\n\n", "oBendCount", " ", "=", " ", "oCompDef", ".", "Bends", ".", "Count", "\n\n", "MsgBox", "(", "\"", "Bend Total: ", "\"", " ", "&", " ", "oBendCount", ")"], "author": "rsmabery"},
{"created at": [], "solution Title": "\n                        Re: How to add two leader to single balloon in inventor drawing using inventor A\n                    ", "solution": [], "author": "umesh.mhaskar"},
{"created at": [], "solution Title": "\n                        Re: Inventor VBA insert sketched block into part\n                    ", "solution": ["Dim oPosition As Point2d\nSet oPosition = ThisApplication.TransientGeometry.CreatePoint2d(10, 20)\n' Insert the sketch block definition\nCall oSketch.SketchBlocks.AddByDefinition(oSketchBlockDef, oPosition)", "' Get the command manager.\nDim oCmdMgr As CommandManager\nSet oCmdMgr = ThisApplication.CommandManager\n' Get control definition for the place the sketch block\nDim oControlDef As ControlDefinition\nSet oControlDef = oCmdMgr.ControlDefinitions.Item(\"SketchRigidSetPlaceInstanceCmd\")\n' Execute the command.\nCall oControlDef.Execute"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: API & derived part\n                    ", "solution": ["        Dim oDerivedComp As DerivedPartComponent = oNewDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents(1)\n        oDerivedPartDef = oDerivedComp.Definition\n\n        Dim oDerEntity As DerivedPartEntity\n        For Each oDerEntity In oDerivedPartDef.Parameters\n            If oDerEntity.ReferencedEntity.Name = \"C02_t\" Then\n                oDerEntity.IncludeEntity = True\n            End If\n        Next"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: VBA Suppress / Unsuppress drawing view\n                    ", "solution": ["Sub viewDrawing_Toggle(viewName As String, boolStatus)\n   \n    Dim drgDoc As DrawingDocument\n    Set drgDoc = ThisApplication.ActiveDocument\n\n    Dim drg As DrawingViews\n    Set drg = drgDoc.ActiveSheet.DrawingViews\n\n    Dim drgView As DrawingView\n    Set drgView = drg(viewName)\n\n    drgView.Suppressed = Not boolStatus\n\nEnd Sub"], "author": "Jacques.Grobler"},
{"created at": [], "solution Title": "\n                        Re: Problem in creating new sketch with projected entities\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Saveas all IDW sheets to PDF with revision\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Contextual and custom mini toolbar problem\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: API: Selecting arc in sketch\n                    ", "solution": ["Dim oArc As SketchArc = oDef.Sketches.Item(\"Segm_C02\").SketchArcs(1)"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Rule to delete \"Event Trigger\"\n                    ", "solution": [], "author": "mwighton"},
{"created at": [], "solution Title": "\n                        Re: Changing Boolean type\n                    ", "solution": ["------------------------------------------------\nFeature Extrusion6 Old Type 20482\nCurrent Operation type: 20485\nFeature Extrusion4 Old Type 20481\nCurrent Operation type: 20485\nFeature Extrusion3 Old Type 20481\nCurrent Operation type: 20485\nFeature Extrusion2 Old Type 20482\nCurrent Operation type: 20485\nbody 1\u00a0\u00a0 colorID = 2\nbody 2\u00a0\u00a0 colorID = 3\nbody 3\u00a0\u00a0 colorID = 4\nbody 4\u00a0\u00a0 colorID = 1\nbody 5\u00a0\u00a0 colorID = 2", "Public Sub GenerateCells()\n    Dim oDoc As PartDocument = oApp.ActiveDocument\n    Dim oDef As PartComponentDefinition = oDoc.ComponentDefinition\n    Dim extrudefeatures As Inventor.ExtrudeFeatures = oDef.Features.ExtrudeFeatures\n    \n    Debug.Print(\"------------------------------------------------\")\n    If (extrudefeatures.Count > 1) Then\n        For i As Integer = 2 To extrudefeatures.Count\n            Dim oEF As ExtrudeFeature = extrudefeatures.Item(i)\n            ChangeOperationType(oEF)\n        Next\n    End If\n    \n    ' Color all new solids differenty\n    ' this document must have enough document appearences! n = 1..extrudefeatures.Count\n    For j As Integer = 1 To oDef.SurfaceBodies.Count\n        Dim body As SurfaceBody = oDef.SurfaceBodies.Item(j)\n        Dim colorID As Integer = j Mod 4 + 1\n        Try\n            Debug.Print(\"body \" & j & \"   colorID = \" & colorID)\n            body.Appearance = oDoc.AppearanceAssets.Item(colorID)\n        Catch ex As Exception\n            ' Some error, gracefully suppressing\n            MsgBox(\"Error : \" & ex.Message)\n        End Try\n    Next\n    oDoc.Update()\nEnd Sub\n\n\nSub ChangeOperationType(ByRef oExtrude As ExtrudeFeature)\n    Dim oExtrudeDef As ExtrudeDefinition = oExtrude.Definition\n    Dim oldOperation As PartFeatureOperationEnum = oExtrudeDef.Operation\n    Debug.Print(\"Feature \" & oExtrude.Name & \" Old Type \" & oldOperation)\n    Try\n        oExtrudeDef.Operation = PartFeatureOperationEnum.kNewBodyOperation\n    Catch ex As Exception\n        ' Some error, gracefully suppressing\n        MsgBox(\"Error : \" & ex.Message)\n    End Try\n    Dim newOperation As PartFeatureOperationEnum = oExtrudeDef.Operation\n    Debug.Print(\"Current Operation type: \" & newOperation)\nEnd Sub\n"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: API: Creating extrude problem\n                    ", "solution": ["Dim oSketch As PlanarSketch = oDef.Sketches.Item(\"Segm_C\" & oBodyCount)\nDim oArc As SketchArc = oSketch.SketchArcs(1)\nDim oProfile As Profile = oSketch.Profiles.AddForSurface(oArc)\n\nDim oExtrudeDef As ExtrudeDefinition\noExtrudeDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, PartFeatureOperationEnum.kSurfaceOperation)"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Sample code for automation interface in iLogic reference\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: DXF file line weights\n                    ", "solution": [], "author": "J-SHould"},
{"created at": [], "solution Title": "\n                        Re: Difference between Assembly and Weldment\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: External Rules Directory thru API in Inventor 2016\n                    ", "solution": ["Sub GetExtRulesPath()\n\n    'get iLogic addin Automation\n    Dim ClientId As String\n    ClientId = \"{3BDD8D79-2179-4B11-8A5A-257B1C0263AC}\"\n    Dim iLogicAddIn As ApplicationAddIn\n    Set iLogicAddIn = ThisApplication.ApplicationAddIns.ItemById(ClientId)\n    \n    Dim iLogicAuto As Object\n    Set iLogicAuto = iLogicAddIn.Automation\n    If (iLogicAuto Is Nothing) Then\n        Call MsgBox(\"Can not use iLogic\")\n        Exit Sub\n    End If\n    \n    'print external rule directories\n    Dim path As Variant\n    For Each path In iLogicAuto.FileOptions.ExternalRuleDirectories\n        Debug.Print (\"Directory name: \" + path)\n    Next\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Turning off work planes, axes and points in designview representations\n                    ", "solution": [], "author": "mwighton"},
{"created at": [], "solution Title": "\n                        Re: how run the user form in add-in inverntor2014\n                    ", "solution": [], "author": "Boorda"},
{"created at": [], "solution Title": "\n                        Re: Sweep feature does not accept NewBodyOption for creating SOLID\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Avoid entry in the Browser\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic Pick function to select faces in a part file\n                    ", "solution": ["Public", " ", "Sub", " ", "Main", "()", "\n\n", "Dim", " ", "oFace", " ", "As", " ", "Face", "\n\n", "'", "Copy the asset from the library to this document", "\n", "Dim", " ", "localAsset", " ", "As", " ", "Asset", " ", "=", " ", "ThisApplication", ".", "AssetLibraries", ".", "Item", "(", "\"", "Autodesk Appearance Library", "\"", ")", ".", "AppearanceAssets", ".", "Item", "(", "\"", "Bamboo", "\"", ")", ".", "CopyTo", "(", "ThisDoc", ".", "Document", ", ", "True", ")", "\n\n", "'", "Keep Selecting Faces, Hit Esc to finish", "\n", "Do", "\n    ", "oFace", " ", "=", " ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "SelectionFilterEnum", ".", "kAllPlanarEntities", ", ", "\"", "Pick a feature", "\"", ")", "\n    ", "If", " ", "Not", " ", "oFace", " ", "Is", " ", "Nothing", " ", "Then", " \n        ", "oFace", ".", "Appearance", " ", "=", " ", "localAsset", "\n    ", "End", " ", "If", "\n", "Loop", " ", "While", " ", "Not", " ", "oFace", " ", "Is", " ", "Nothing", "\n\n", "End Sub"], "author": "astarnes"},
{"created at": [], "solution Title": "\n                        Re: Detect a derived document?\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Get the current configuration name of an I-Assembly?\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: Autodesk Inventor Spring/Coil Help\n                    ", "solution": [], "author": "mwighton"},
{"created at": [], "solution Title": "\n                        Re: Export pdf to folder.\n                    ", "solution": [], "author": "Jesper_S"},
{"created at": [], "solution Title": "\n                        Re: Error when inserting iAssembly\n                    ", "solution": [], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: Remove Ilogic Form\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Save as STEP using iLogic\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Bill of Materials Quantities\n                    ", "solution": ["''' <summary>\n    ''' Queries all the occurrences in the assembly because the Bill of Materials can't be trusted to present the correct quantities of items in sub assemblies.\n    ''' </summary>\n    ''' <param name=\"activeDocument\">The document we wish to parse</param>\n    ''' <returns>Returns a list of BomRowItem objects</returns>\n    Private Function QueryAssemblyOccurrences(activeDocument As Document) As List(Of BomRowItem)\n        Dim tmplist As List(Of BomRowItem) = New List(Of BomRowItem)\n        Dim oCompDef As ComponentDefinition\n        If TypeOf activeDocument Is AssemblyDocument Then\n            Dim assydoc As AssemblyDocument = activeDocument\n            oCompDef = assydoc.ComponentDefinition\n            If Not assydoc.FullFileName = InventorApplication.ActiveDocument.FullFileName Then\n                tmplist.Add(getRowItem(oCompDef))\n            End If\n            For Each occurrence As ComponentOccurrence In assydoc.ComponentDefinition.Occurrences\n                If TypeOf occurrence.Definition.Document Is AssemblyDocument Then\n                    Dim subassydoc As AssemblyDocument = occurrence.Definition.Document\n                    oCompDef = subassydoc.ComponentDefinition\n                    tmplist.AddRange(QueryAssemblyOccurrences(subassydoc))\n                Else\n                    Dim partdoc As PartDocument = occurrence.Definition.Document\n                    oCompDef = partdoc.ComponentDefinition\n                    tmplist.Add(getRowItem(oCompDef))\n                End If\n            Next\n        Else\n            Dim partdoc As PartDocument = activeDocument\n            oCompDef = partdoc.ComponentDefinition\n            tmplist.Add(getRowItem(oCompDef))\n        End If\n        Return tmplist\n    End Function"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: iMate suppress\n                    ", "solution": ["If", " ", "Position", " ", "=", " ", "1", " ", "Then", "\n", "Constraint", ".", "IsActive", "(", "\"", "Your Assembly Name with Constraints on it:1", "\"", ", ", "\"", "1st_position:1", "\"", ")", " ", "=", " ", "True", "\n", "Constraint", ".", "IsActive", "(", "\"", "Your Assembly Name with Constraints on it:1", "\"", ", ", "\"", "2nd_position:1", "\"", ")", " ", "=", " ", "False", "\n", "Else", " ", "If", " ", "Position", " ", "=", " ", "2", " ", "Then", "\n", "Constraint", ".", "IsActive", "(", "\"", "Your Assembly Name with Constraints on it:1", "\"", ", ", "\"", "1st_position:1", "\"", ")", " ", "=", " ", "False", "\n", "Constraint", ".", "IsActive", "(", "\"", "Your Assembly Name with Constraints on it:1", "\"", ", ", "\"", "2nd_position:1", "\"", ")", " ", "=", " ", "True", "\n", "End", " ", "If"], "author": "mitchjuenemann"},
{"created at": [], "solution Title": "\n                        Re: Constrain Drawing Sheet Dimensions\n                    ", "solution": ["    Dim oDoc As DrawingDocument\n    oDoc = ThisApplication.ActiveDocument\n\n    Dim oSheet As Sheet\n    oSheet = oDoc.ActiveSheet\n\n    Dim oDrawingDimension As DrawingDimension\n\tDim oDrawingDimensions As DrawingDimensions\n\tDim oDimsToBeArranged As ObjectCollection\n\t\n\tDim iLinearDimCount As Integer\n\tDim iAngularDimCount As Integer\n\tDim iOtherDimCount As Integer\n\tiLinearDimCount = 0\n\tiAngularDimCount = 0\n\tiOtherDimCount = 0\n\t\n    ' Iterate over all dimensions in the drawing and\n    ' center them if they are linear or angular.\n\t' Add them to the ObjectCollection to be arranged\n\n\toDrawingDimensions = oSheet.DrawingDimensions\n\n\toDimsToBeArranged = ThisApplication.TransientObjects.CreateObjectCollection\n\toDimsToBeArranged.Clear()\n\t\n\tDim oAttributeSets As AttributeSets\n\tDim oAttributeSet As AttributeSet\n\tDim oAttribute As Inventor.Attribute\n\t\n\t'Dimensions with Arrange=False in CustomAttributeSet will not be arranged\n\tFor Each oDrawingDimension In oDrawingDimensions\n\t\t'Get the AttributeSets\n\t\toAttributeSets=oDrawingDimension.AttributeSets\n\t\tIf oAttributeSets.NameIsUsed(\"CustomAttributeSet\") Then 'if it has CustomAttributes\n\t\t\toAttributeSet =\toAttributeSets.Item(\"CustomAttributeSet\")\n\t\t\tFor Each oAttribute In oAttributeSet\n\t\t\t\tIf oAttribute.Name()=\"Arrange\" Then\n\t\t\t\t\tIf oAttribute.Value = \"False\" Then\n\t\t\t\t\t\t'Do nothing\n\t\t\t\t\tElse\n\t\t\t\t\t\tSelect Case oDrawingDimension.Type\n\t\t\t\t\t\t\tCase 117474560\t' kLinearGeneralDimensionObject\n\t\t\t\t\t\t\t\toDimsToBeArranged.Add(oDrawingDimension)\n\t\t\t\t\t\t\t\tiLinearDimCount = iLinearDimCount+1\n\t\t\t\t\t\t\tCase 117474816 'kAngularGeneralDimensionObject\n\t\t\t\t'\t\t   \t\toDimsToBeArranged.Add(oDrawingDimension)\n\t\t\t\t'\t\t\t\tiAngularDimCount = iAngularDimCount+1\n\t\t\t\t\t\t\tCase Else\n\t\t\t\t\t\t\t\tiOtherDimCount = iOtherDimCount +1\n\t\t\t\t\t\tEnd Select\t\n\t\t\t\t\tEnd If\t\n\t\t\t\tElse 'If the dimensions has a CustomAttributeSet but no Arrange attribute it must be arranged as default\n\t\t\t\t\tSelect Case oDrawingDimension.Type\n\t\t\t\t\t\tCase 117474560\t' kLinearGeneralDimensionObject\n\t\t\t\t\t\t\toDimsToBeArranged.Add(oDrawingDimension)\n\t\t\t\t\t\t\tiLinearDimCount = iLinearDimCount+1\n\t\t\t\t\t\tCase 117474816 'kAngularGeneralDimensionObject\n\t\t\t'\t\t   \t\toDimsToBeArranged.Add(oDrawingDimension)\n\t\t\t'\t\t\t\tiAngularDimCount = iAngularDimCount+1\n\t\t\t\t\t\tCase Else\n\t\t\t\t\t\t\tiOtherDimCount = iOtherDimCount +1\n\t\t\t\t\tEnd Select\t\n\t\t\t\tEnd If\n\t\t\tNext\t\n\t\tElse 'If the dimensions has a CustomAttributeSet it must be arranged as default\t\t\n\t\t\tSelect Case oDrawingDimension.Type\n\t\t\t\tCase 117474560\t' kLinearGeneralDimensionObject\n\t\t\t\t\toDimsToBeArranged.Add(oDrawingDimension)\n\t\t\t\t\tiLinearDimCount = iLinearDimCount+1\n\t\t\t\tCase 117474816 'kAngularGeneralDimensionObject\n\t'\t\t   \t\toDimsToBeArranged.Add(oDrawingDimension)\n\t'\t\t\t\tiAngularDimCount = iAngularDimCount+1\n\t\t\t\tCase Else\n\t\t\t\t\tiOtherDimCount = iOtherDimCount +1\n\t\t\tEnd Select\n\t\tEnd If\t\t\t\n\tNext\n\t\n\t\n\tTrace.Writeline(\"Linear dimensions = \"& iLinearDimCount)\n\tTrace.Writeline(\"Angular dimensions = \"& iAngularDimCount)\n\tTrace.Writeline(\"Other dimensions = \"& iOtherDimCount)\n\t\n\t\n\toDrawingDimensions.Arrange(oDimsToBeArranged)\n\t\n\n"], "author": "RodrigoEiras"},
{"created at": [], "solution Title": "\n                        Re: Mark parameters for Export\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Find intersection between workaxis and workplane\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: AddByFillet\n                    ", "solution": ["Dim skarc As SketchArc = pathSketch.SketchArcs.AddByFillet(addedSketchLine, pathSketchLine, m_bendradius, addedSketchLine.StartSketchPoint.Geometry, pathSketchLine.EndSketchPoint.Geometry)"], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: How to add a baseView in a sheet ?\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: SDK Copy Design & Content Center Parts\n                    ", "solution": ["                ' Get all of the documents referenced by this document.\n                Dim allReferencedDocs As Inventor.ApprenticeServerDocuments\n                allReferencedDocs = drawingDoc.AllReferencedDocuments\n\n                Dim referencedDoc As Inventor.ApprenticeServerDocument\n                For Each referencedDoc In allReferencedDocs\n                    ' Get the full filename of the current document.\n                    Dim designFilename As String = referencedDoc.FullFileName\n\n                    If designFilename.Contains(\"Content Center Files\") Then Continue For"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Betreff: Check if form is open\n                    ", "solution": [], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: Driving rule by UserInterface tab choice\n                    ", "solution": [], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: How much Flange goes inside Face feature\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: How to extract region properties of sketch entities\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Select Constrained Parts of the a Part in Assembly\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Generate iPart Files using iLogic/VBA\n                    ", "solution": ["Dim oDoc As PartDocument = ThisDoc.Document \nDim oDef As PartComponentDefinition = oDoc.ComponentDefinition \nDim initRowIndex As Integer\nDim oFactory As iPartFactory = oDef.iPartFactory\n\n", "' Edit row 1 & 2 of table", "\noFactory.TableRows.Item(1).Item(3).Value = 2322\noFactory.TableRows.Item(2).Item(3).Value = 4444\n\n", "' Iterate All Rows of iPart", "\nDim oRow As iPartTableRow\nFor Each oRow In oFactory.TableRows\n\t", "' Generate the member and file, (overwrites member file or creates new file)", "\n\toFactory.CreateMember(oRow)\nNext\n\niLogicVb.UpdateWhenDone = True"], "author": "ben_neb43"},
{"created at": [], "solution Title": "\n                        Re: iLogic error \"Unable to cast COM object of type\"\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Attack of the DoubleForEquals\n                    ", "solution": ["tp4", " ", "=", " ", "TP1", " ", "-", " ", "(", "TP2", " ", "+", " ", "(", "TP3", " ", "*", " ", "2", " ", "ul", "))", "\n", "MessageBox", ".", "Show", "(", "\"", "Value of TP4: ", "\"", " ", "&", " ", "tp4", ")", "\n\n", "MessageBox", ".", "Show", "(", "\"", "From Equal Tolerance 0 ", "\"", " ", "&", " ", "EqualWithinTolerance", "(", "tp4", ", ", "0", ", ", "0.001", "))", "\n\n", "MessageBox", ".", "Show", "(", "\"", "From Numbers Direct: ", "\"", " ", "&", " ", "(", "440.25", " ", "-", " ", "((", "440.25", " ", "-", " ", "(", "1.5", " ", "*", " ", "2", "))", " ", "+", " ", "(", "1.5", " ", "*", " ", "2", "))))", "\n\n", "Dim", " ", "uom", " ", "As", " ", "UnitsOfMeasure", " ", "=", " ", "ThisDoc", ".", "Document", ".", "UnitsOfMeasure", "\n\n", "MessageBox", ".", "Show", "(", "\"", "From Expession: ", "\"", " ", "&", " ", "uom", ".", "GetValueFromExpression", "(", "\"", "TP1 - (TP2 + (TP3 * 2 ul))", "\"", ", ", "\"", "in", "\"", "))", "\n\n", "tp1", " ", "=", " ", "Parameter", ".", "ValueForEquals", "(", "\"", "TP1", "\"", ")", "\n", "tp2", " ", "=", " ", "Parameter", ".", "ValueForEquals", "(", "\"", "TP2", "\"", ")", "\n", "tp3", " ", "=", " ", "Parameter", ".", "ValueForEquals", "(", "\"", "TP3", "\"", ")", "\n\n", "MessageBox", ".", "Show", "(", "String", ".", "Format", "(", "\"", "From Values: {0} - ({1} + ({2} * 2 ul)) = {3}", "\"", ", ", "tp1", ", ", "tp2", ", ", "tp3", ", ", "tp", " ", "&", " ", "tp1", " ", "-", " ", "(", "tp2", " ", "+", " ", "(", "tp3", " ", "*", " ", "2", "))))"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: CustomTables- better to delete/add rows or work with existing?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: iLogic copy iProperties formula\n                    ", "solution": [], "author": "Balaji_07"},
{"created at": [], "solution Title": "\n                        Re: Inventor VBA Part Center Point\n                    ", "solution": ["Public Sub GetOriginPoints()\n    ' Get the active assembly.\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n\n    ' Get the assembly component definition.\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = oAsmDoc.ComponentDefinition\n\n    ' Get all of the leaf occurrences of the assembly.\n    Dim oLeafOccs As ComponentOccurrencesEnumerator\n    Set oLeafOccs = oAsmDef.occurrences.AllLeafOccurrences\n\n   ' Iterate through the occurrences and print the name.\n    Dim oOcc As ComponentOccurrence\n    For Each oOcc In oLeafOccs\n        'select only the parts that have the correct name\n        Dim strOrig As String\n        strOrig = oOcc.Name\n        \n        Dim leftstring As String\n        leftstring = Left(strOrig, InStr(strOrig, \":\"))\n        \n        Dim oName As String\n        oName = Right(leftstring, 5)\n   \n        If oName = \"(TP):\" Then\n            ' The occurrence is returned as a ComponentOccurrence if it's in the\n            ' top level of the assembly and as a ComponentOccurrenceProxy if it's in\n            ' a sub assembly.  The proxy takes care of any transforms but the work\n            ' features aren't available directly from the occurrence so we need to get\n            ' them directly from the part and they'll be in part space.  We can then\n            ' create a proxy of them to get them in the space of the top level assembly.\n            Dim partDef As PartComponentDefinition\n            Set partDef = oOcc.Definition\n            \n            Dim originWP As WorkPoint\n            Set originWP = partDef.WorkPoints.Item(1)\n            \n            Dim originWPProxy As WorkPointProxy\n            Call oOcc.CreateGeometryProxy(originWP, originWPProxy)\n            \n            Debug.Print oName & \": \" & originWPProxy.Point.x & \", \" & originWPProxy.Point.x & \", \" & originWPProxy.Point.Z\n         End If\n    Next\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Rotate parts / assembly around axis\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Deleting A Dimension Using ilogic\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Sketch Copy Not working: Any transform missing?\n                    ", "solution": ["Sub CopySketch3()\n    Dim faceSketch As PlanarSketch\n    Set faceSketch = ThisApplication.ActiveDocument.SelectSet(1)\n\n    Dim pl As Object\n    Set pl = faceSketch.PlanarEntity\n\n    Dim compDef As PartComponentDefinition\n    Set compDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n    Dim newsketch As PlanarSketch\n    Set newsketch = compDef.Sketches.Add(pl)\n    Call faceSketch.CopyContentsTo(newsketch)\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Changing the properties of a custom parameter\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Ribbon Appearance\n                    ", "solution": [], "author": "mwighton"},
{"created at": [], "solution Title": "\n                        Re: Sketch offset curve upto a point\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Sketch Offset curves not working\n                    ", "solution": ["Sub OffsetPathToLastSketchPoint()\n  ' We got the last sketch point from\n  ' projecting the base point of the line in the\n  ' profile sketch (Sketch5) into the path sketch (Sketch6)\n  Dim d As PartDocument\n  Set d = ThisApplication.ActiveDocument\n  \n  Dim cd As PartComponentDefinition\n  Set cd = d.ComponentDefinition\n  \n  Dim s As PlanarSketch\n  Set s = cd.Sketches(\"Sketch6\")\n  \n  Dim p As SketchPoint\n  Set p = s.SketchPoints(s.SketchPoints.Count)\n  \n  Dim l As SketchControlPointSpline\n  Set l = s.SketchControlPointSplines(1)\n  \n  Dim t As TransientObjects\n  Set t = ThisApplication.TransientObjects\n  \n  Dim c As ObjectCollection\n  Set c = t.CreateObjectCollection\n  \n  Call c.Add(l)\n  \n  Dim se As SketchEntitiesEnumerator\n  Set se = s.OffsetSketchEntitiesUsingPoint(c, p.Geometry)\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Sketch3D to PlanarSketch conversion\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic/Visual Basic for Applications/Visual Studio clarification\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Ilogic check iProperty of opened file\n                    ", "solution": ["FileToCheck", " ", "=", " ", "\"", "C:\\Vault\\1782-906-R00.idw", "\"", "\n\n", "ThisDoc", ".", "Launch", "(", "FileToCheck", ")", "\n\n    ", "'", " Get the active document. ", "\n    ", "Dim", " ", "oDoc", " ", "As", " ", "Document", " \n   ", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", " \n\n", "'", "oDoc = ThisDoc.Document'(FileToCheck)", "\n\n", "oProp", " ", "=", " ", "oDoc", ".", "PropertySets", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", ".", "Item", "(", "\"", "Part Number", "\"", ")", ".", "Value", "\n\n", "'", "iLogicVb.RunExternalRule(\"Test show partnumber\")", "\n\n", "MsgBox", "(", "oProp", ")", "\n     \n", "ThisApplication", ".", "ActiveDocument", ".", "Close", "(", "True", ")", "\n"], "author": "ZicojaedJMSFY"},
{"created at": [], "solution Title": "\n                        Re: Advanced Feature Validation option\n                    ", "solution": ["Sub SwitchOffAFV()\n  Dim d As Document\n  Set d = ThisApplication.ActiveDocument\n  \n  If d.ModelingSettings.AdvancedFeatureValidation Then\n    d.ModelingSettings.AdvancedFeatureValidation = False\n    d.Rebuild\n  End If\nEnd Sub", "Public Sub ShowReferences() \n    ' Get the active assembly. \n    Dim oAsmDoc As AssemblyDocument \n    Set oAsmDoc = ThisApplication.ActiveDocument\n\n    ' Get all of the referenced documents. \n    Dim oRefDocs As DocumentsEnumerator \n    Set oRefDocs = oAsmDoc.AllReferencedDocuments \n\n    ' Iterate through the list of documents. \n    Dim oRefDoc As Document \n    For Each oRefDoc In oRefDocs \n        Debug.Print oRefDoc.DisplayName   \n        If oRefDoc.ModelingSettings.AdvancedFeatureValidation Then\n            oRefDoc.ModelingSettings.AdvancedFeatureValidation = False\n            oRefDoc.Rebuild ' Not sure if this is needed in this scenario\n        End If  \n    Next \nEnd Sub\u00a0\u00a0", "If oRefDoc.SubType = \"{4D29B490-49B2-11D0-93C3-7E0706000000}\" _     ", "' Part proxy", "\nOr oRefDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then  ", "' SheetMetal proxy", "\n    ", "' Run the code", "\nEnd If", "Public Sub ShowReferences() \n    ", "' Get the active assembly.", " ", "\n    Dim oAsmDoc As AssemblyDocument \n    Set oAsmDoc = ThisApplication.ActiveDocument\n\n    ", "' Get all of the referenced documents.", " ", "\n    Dim oRefDocs As DocumentsEnumerator \n    Set oRefDocs = oAsmDoc.AllReferencedDocuments \n\n    ", "' Iterate through the list of documents.", " ", "\n    Dim oRefDoc As Document \n    For Each oRefDoc In oRefDocs \n        Debug.Print oRefDoc.DisplayName", "        ", "If oRefDoc.SubType = \"{4D29B490-49B2-11D0-93C3-7E0706000000}\" _", "     ", "' Part proxy", "\n        ", "Or oRefDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then", "  ", "' SheetMetal proxy", "            If oRefDoc.ModelingSettings.AdvancedFeatureValidation Then", "                oRefDoc.ModelingSettings.AdvancedFeatureValidation = False", "                oRefDoc.Rebuild ", "' Not sure if this is needed in this scenario", "            End If", "        ", "End If", "    Next", "End Sub", "On Error Resume Next"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Run iLogic Rule for all Parts in Assembly\n                    ", "solution": [], "author": "autodeskpelinde"},
{"created at": [], "solution Title": "\n                        Re: Problem with update of subassembly via ilogic\n                    ", "solution": ["' Rule toggles all components visibility\n\nDim oAsmDef As AssemblyComponentDefinition _\n      = ThisApplication.ActiveDocument.ComponentDefinition\n\nDim oList As ComponentOccurrencesEnumerator \n      = oAsmDef.Occurrences.AllLeafOccurrences\n\nFor Each oOcc As ComponentOccurrence In oList\n    oOcc.Visible = Not oOcc.Visible\nNext"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Change units in \"create new material\"\n                    ", "solution": [], "author": "Ecet94"},
{"created at": [], "solution Title": "\n                        Re: sketched symbol add with leader\n                    ", "solution": ["oDLine = oCommandMgr.Pick(SelectionFilterEnum.kDrawingCurveSegmentFilter, \"Select the LINE\")\n\noSP = oDLine.StartPoint\n\noSecSP = oTG.CreatePoint2d(oCP.X +oSecLine.StartSketchPoint.Geometry.X*oView.Scale, oCP.Y + oSecLine.StartSketchPoint.Geometry.Y*oView.Scale)\n\noLeaderPoints1 = ThisApplication.TransientObjects.CreateObjectCollection\noGeometryIntent1 = oDwgDoc.ActiveSheet.CreateGeometryIntent(oSecLine, oSecSP)\noLeaderPoints1.Add(oGeometryIntent1)"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Set Default Row in iPart Sub-Component\n                    ", "solution": ["    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    Dim iRow As Integer\n    iRow = 3\n                \n    Dim occ As ComponentOccurrence\n    Set occ = asmDoc.ComponentDefinition.Occurrences(2)\n  \n    Dim partCompDef1 As PartComponentDefinition\n    Set partCompDef1 = occ.Definition\n    \n    If partCompDef1.IsiPartMember Then\n        Dim factoryDoc As PartDocument\n        Set factoryDoc = partCompDef1.iPartMember.ReferencedDocumentDescriptor.ReferencedDocument\n      \n        Dim partCompDef2 As PartComponentDefinition\n        Set partCompDef2 = factoryDoc.ComponentDefinition\n        \n        ' Set the default row in the factory document\n        If partCompDef2.IsiPartFactory Then\n            Dim oTableRow As iPartTableRow\n            Set oTableRow = partCompDef2.iPartFactory.TableRows.Item(iRow)\n            partCompDef2.iPartFactory.DefaultRow = oTableRow\n            Debug.Print oTableRow.MemberName & \" has been made default\"\n        End If\n                \n        Dim newRow As Long\n        newRow = iRow\n        Call occ.ChangeRowOfiPartMember(newRow)\n    End If"], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: For Each Loop in iLogic Rule\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: API support for Datum Identifier\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Locknut Threads\n                    ", "solution": [], "author": "meck"},
{"created at": [], "solution Title": "\n                        Re: Bend line position [iLogic]\n                    ", "solution": ["Sub BendLineText(oDoc As Document, oSketch As PlanarSketch, oFlatPattern As FlatPattern, oFSS As Double)\n\toRotation = 0\n\toFSS = oFSS * 0.5\n\tDim oTempEdge As Edge\n\tDim oLines1 As SketchLine\n\tDim oTopFaceBendUpEdges As Edges = oFlatPattern.GetEdgesOfType(FlatPatternEdgeTypeEnum.kBendUpFlatPatternEdge, True)\n\tFor Each oTempEdge In oTopFaceBendUpEdges\n\t\toLines1 = oSketch.AddByProjectingEntity(oTempEdge)\n\t\tVal1 = oLines1.Geometry.StartPoint.Y\n\t\tVal3 = oLines1.Geometry.EndPoint.Y\n\t\tBB = Max(Val1, Val3)\n\t\tb = BB - (0.11 * oFSS)\n\t\tIf BB = Val1 Then\n\t\t\tAA = oLines1.Geometry.StartPoint.X\n\t\tElse\n\t\t\tAA = oLines1.Geometry.EndPoint.X\n\t\tEnd If\n\t\ta = AA + (0.11 * oFSS)\t\n\t\toTextB = \"N\"\n\t\tCall WriteText(oTextB, a, b, oFSS)\n\tNext\n\tDim oTopFaceBendDownEdges As Edges = oFlatPattern.GetEdgesOfType(FlatPatternEdgeTypeEnum.kBendDownFlatPatternEdge, True)\n\tFor Each oTempEdge In oTopFaceBendDownEdges\n\t\toLines1 = oSketch.AddByProjectingEntity(oTempEdge)\n\t\tVal1 = oLines1.Geometry.StartPoint.Y\n\t\tVal3 = oLines1.Geometry.EndPoint.Y\n\t\tBB = Max(Val1, Val3)\n\t\tb = BB - (0.11 * oFSS)\n\t\tIf BB = Val1 Then\n\t\t\tAA = oLines1.Geometry.StartPoint.X\n\t\tElse\n\t\t\tAA = oLines1.Geometry.EndPoint.X\n\t\tEnd If\n\t\ta = AA + (0.11 * oFSS)\n\t\toTextB = \"D\"\n\t\tCall WriteText(oTextB, a, b, oFSS)\n\tNext\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Betreff: Esc button in add-in\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Save Assembly to new location and delete parts\n                    ", "solution": ["Sub Main()\n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n    Dim acd As AssemblyComponentDefinition\n    acd = oDoc.ComponentDefinition\n    Call DeleteSuppressedComponent(acd.Occurrences, acd)\n\n    ", "'Delete Empty Folders", "\n    oPane = oDoc.BrowserPanes(\"Model\")\n    oTopNode = oPane.TopNode\n\n    ", "'Iterate through the browser folders", "\n    For Each oFolder In oTopNode.BrowserFolders\n        i = 0\n\n        ", "'Iterate through the nodes in the folder", "\n        oFolderNodes = oFolder.BrowserNode.BrowserNodes\n        For Each oNode As BrowserNode In oFolderNodes\n\n            ", "'count the nodes", "\n            i = i+1\n        Next\n\n        ", "'delete the folder if the count = 0", "\n        If i = 0 Then\n            oFolder.Delete\n        End If\n    Next\n\n", "    'Path to the workplace", "\n    oPath = \"C:\\Users\\aws01\\Documents\\Library\\Pole Configurations\\\"\n\n    ", "'Saving a copy of the assembly components", "\n    Dim refDocs As DocumentsEnumerator = oDoc.AllReferencedDocuments\n    Dim compCount As Integer = refDocs.Count\n\tDim refDoc As Document\n    For j = 1 To compCount\n\trefDoc = refDocs.Item(j)", "        ", "'If the component in assembly is part then save it to \"Parts\" folder", "\n\tIf refDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n            refDoc.SaveAs(oPath & \"Parts\\Part\" & j & \".ipt\", False)", "        ", "'If the component in assembly is subassembly then save it to \"Assembly\" folder", "\n        Else If refDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n\t    refDoc.SaveAs(oPath & \"Assembly\\Assembly\" & j & \".iam\", False)\n        End If\n    Next\n \n    ", "'Saving a copy of the assembly document", "\n    oDoc.SaveAs(oPath & \"Assembly\\PoleConfig.iam\", False)\n\n    ", "'---------------------------------------------------------------------------------------------------\n    'Save DWF File", "\n    Test = InputBox(\"Add File name\", \"Please Add your file name\", \"Prefix number - File\")\n    If (Not System.IO.Directory.Exists(Test)) Then\n        System.IO.Directory.CreateDirectory(Test)\n    End If\n    ThisDoc.Document.SaveAs(oPath & Test & \".dwf\", True)\nEnd Sub\n\nPrivate oPath As String\n\nSub DeleteSuppressedPatterns(cd As ComponentDefinition)\n    If Not TypeOf cd Is AssemblyComponentDefinition Then\n        Exit Sub\n    End If\n    Dim acd As AssemblyComponentDefinition\n    acd = cd\n    Dim op As OccurrencePattern\n    For Each op In acd.OccurrencePatterns\n    Dim allSuppressed As Boolean\n    allSuppressed = True\n    Dim ope As OccurrencePatternElement\n    For Each ope In op.OccurrencePatternElements\n        Dim co As ComponentOccurrence\n        For Each co In ope.Occurrences\n        If Not co.Suppressed Then\n            allSuppressed = False\n            Exit For\n        End If\n        Next\n        If Not allSuppressed Then\n            Exit For\n        End If\n    Next\n    If allSuppressed Then\n        op.Delete\n    End If\n  Next\nEnd Sub\n\nSub DeleteSuppressedComponent(occs As ComponentOccurrences, cd As ComponentDefinition)\n    Call DeleteSuppressedPatterns(cd)\n    Dim occ As ComponentOccurrence\n    For Each occ In occs\n    If occ.Suppressed Then\n        If occ.PatternElement Is Nothing Then\n            occ.Delete\n        End If\n    Else\n        Call DeleteSuppressedComponent(occ.SubOccurrences, occ.Definition)\n    End If\n  Next\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Batch Part Parameter Editor Rule in Assembly\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2016 hangs when I'm doing something with Vault\n                    ", "solution": [], "author": "thomas.wegener"},
{"created at": [], "solution Title": "\n                        Re: DXF export macro stopped working for some users...help?\n                    ", "solution": ["Sub Main\n    oType=Left(ThisDoc.FileName(False),3)\n    GoExcel.Open(\"S:\\DRAWINGS\\Folder Types.xlsx\", \"Sheet1\")\n\t\n    RowEnd = 200\n    For countA = 1 To (RowEnd * 0.01)\n        If Not String.IsNullOrEmpty(GoExcel.CellValue(\"C\" & RowEnd)) Then\n            RowEnd = RowEnd + 100\n        Else\n            Exit For\n        End If\n    Next\n\n    For rowPN = 1 To RowEnd\n        If (GoExcel.CellValue(\"A\" & rowPN) = oType) Then\n            oFile = GoExcel.CellValue(\"C\" & rowPN) \n            Exit For\n        End If\n    Next\n    oFolder = \"S:\\DRAWINGS\\NOT RELEASED\\\" & oFile\n    If Not System.IO.Directory.Exists(oFolder) Then\n        System.IO.Directory.CreateDirectory(oFolder)\n    End If\n    Dim oDoc As PartDocument\n    oDoc = ThisDoc.Document\n    Dim oCompDef As SheetMetalComponentDefinition\n    oCompDef = oDoc.ComponentDefinition\n    If oCompDef.HasFlatPattern = False Then\n        oCompDef.Unfold\n    Else\n        oCompDef.FlatPattern.Edit\n    End If\n    sFname = oFolder & \"\\\" & ThisDoc.FileName(False) & \".dxf\"\n    sOut = \"FLAT PATTERN DXF?AcadVersion=2004\" _\n\t+ \"&OuterProfileLayer=0\" _\n\t+ \"&InteriorProfilesLayer=0\" _\n\t+ \"&InvisibleLayers=IV_UNCONSUMEND_SKETCHES;IV_ALTREP?_BACK;IV_ALTREP_FRONT;IV_ARC_CENTERS;IV_TOOL_CENTE?R_DOWN;IV_TOOL_CENTER;IV_ROLL;IV_TANGENT;IV?_BEND;IV_BEND_DOWN;IV_ROLL_TANGENT;IV_FEATURE_PROFILES;IV_FEATURE_PROFILES_DOWN\" _\n\t+ \"&SplineTolerance Double 0.01\"\n    oCompDef.DataIO.WriteDataToFile( sOut, sFname)\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Conversion problem VBA =VB.Net\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Set default sheet paper (e.g. size, color)\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Copying views into another sheet (iLogic or API )\n                    ", "solution": ["Dim oSrcDwg As DrawingDocument\noSrcDwg = ThisApplication.ActiveDocument\n\nDim oDestDwg As DrawingDocument\noDestDwg = ThisApplication.Documents.Open(\"D:\\Temp\\Inventor\\MyProj\\Axle\\Test.dwg\")\n    \nDim oView As DrawingView\nIf oSrcDwg.ActiveSheet.DrawingViews.Count < 1 Then\n    MsgBox (\"No views found in the source drawing !\")\n    Return\nEnd If\n\noView = oSrcDwg.ActiveSheet.DrawingViews(1)\n\nDim oSheet As Sheet\nFor Each oSheet In oDestDwg.Sheets\n    oSheet.Activate\n    Call oView.CopyTo(oSheet)\n    Exit For\nNext\n\nCall oDestDwg.Save\nCall oDestDwg.Close(False)"], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: Scaling Assemblies\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Place Parts List\n                    ", "solution": [], "author": "daniel.maeyaert"},
{"created at": [], "solution Title": "\n                        Re: Move occurence along axis or Edge\n                    ", "solution": ["Public Sub MoveOccAlongEdge()\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    Dim occ As ComponentOccurrence\n    Set occ = ThisApplication.CommandManager.Pick(kAssemblyOccurrenceFilter, \"Select occurrence to move\")\n    \n    Dim vec As Vector\n    If False Then\n        Dim edg As Edge\n        Set edg = ThisApplication.CommandManager.Pick(kPartEdgeLinearFilter, \"Select edge.\")\n        Dim lin As LineSegment\n        Set lin = edg.Geometry\n        Set vec = lin.Direction.AsVector\n    Else\n        Dim axis As WorkAxis\n        Set axis = ThisApplication.CommandManager.Pick(kWorkAxisFilter, \"Select work axis.\")\n        Set vec = axis.Line.Direction.AsVector\n    End If\n    \n    Dim strDistance As String\n    strDistance = InputBox(\"Enter the distance to move.\", \"Distance\", \"1 in\")\n    Dim distance As Double\n    distance = asmDoc.UnitsOfMeasure.GetValueFromExpression(strDistance, kDefaultDisplayLengthUnits)\n    \n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    vec.Normalize\n    Call vec.ScaleBy(distance)\n    \n    Dim trans As Matrix\n    Set trans = occ.Transformation\n    \n    trans.Cell(1, 4) = trans.Cell(1, 4) + vec.X\n    trans.Cell(2, 4) = trans.Cell(2, 4) + vec.y\n    trans.Cell(3, 4) = trans.Cell(3, 4) + vec.Z\n    \n    occ.Transformation = trans\nEnd Sub\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Inventor fails to open parasolid file programmatically\n                    ", "solution": [], "author": "tike"},
{"created at": [], "solution Title": "\n                        Re: Inventor Professional 2014 installation fails\n                    ", "solution": [], "author": "TravisNave"},
{"created at": [], "solution Title": "\n                        Re: Suppress Bolted Connection Issues\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Sheet Metal Flat Pattern to SAT\n                    ", "solution": ["Dim oDoc As Document\nDim oFN As String\nDim oSMCD As Inventor.SheetMetalComponentDefinition\nFor Each oDoc In ThisApplication.ActiveDocument.AllReferencedDocuments\n\tIf oDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then \n\t\toSMCD = oDoc.ComponentDefinition\n\t\tIf oSMCD.FlatPattern Is Nothing Then\n\t\t\toSMCD.Unfold\n\t\tElse\n\t\t\toSMCD.FlatPattern.Edit\n\t\tEnd If\n\t\toFN = Left(oDoc.FullFileName, Len(oDoc.FullFileName) - 4) & \".sat\"\n\t\toDoc.SaveAs(oFN , True)\n\t\toSMCD.FlatPattern.ExitEdit\n\t\toDoc.Close\n\tEnd If\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule if no Rule Exist\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Modify templates: would like company tables as defaults\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: check to see if assembly is active document vb.net\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Hide construction surfaces in idw\n                    ", "solution": [], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: Browser node = Part Number & Revision Number\n                    ", "solution": [], "author": "boudihaf"},
{"created at": [], "solution Title": "\n                        Re: Link excel cells to Inventor Drawing Text\n                    ", "solution": ["GoExcel.Open(\"C:\\myfolder\\myexceltable.xlsx\", \"Sheet1\")\niProperties.Value(\"Custom\", \"Text 1\") = GoExcel.CellValue(\"B2\")", "iProperties.Value(\"Custom\", \"Text 2\") = GoExcel.CellValue(\"B3\")", "...", "GoExcel.Close", "GoExcel.Open(\"C:\\myfolder\\myexceltable.xlsx\", \"Sheet1\")", "Dim oName As String = GoExcel.CellValue(\"A2\")", "iProperties.Value(\"Custom\", oName) = GoExcel.CellValue(\"B2\")", "oName = GoExcel.CellValue(\"A3\")", "iProperties.Value(\"Custom\", oName) = GoExcel.CellValue(\"B3\")", "...", "GoExcel.Close", "GoExcel.Open(\"C:\\myfolder\\myexceltable.xlsx\", \"Sheet1\")", "RowStart = 2", "RowEnd = 100\nFor countA = RowStart To (RowEnd * 0.01) + RowStart\n    If Not String.IsNullOrEmpty(GoExcel.CellValue(\"A\" & RowEnd)) Then\n        RowEnd = RowEnd + 100\n    Else\n        Exit For\n    End If\nNext\n\nFor rowPN = RowStart To RowEnd\n    If String.IsNullOrEmpty(GoExcel.CellValue(\"A\" & RowPN)) Then\n\trowN = rowPN - 1\n\tExit For\n    End If\nNext\nFor oRow = RowStart To RowN", "    Dim oName As String = GoExcel.CellValue(\"A\" & oRow)", "    iProperties.Value(\"Custom\", oName) = GoExcel.CellValue(\"B\" & oRow)", "Next", "GoExcel.Close"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic Links to Excel 2016\n                    ", "solution": ["Worksheet = \"Z:\\CAD\\DESIGN ENVIRONMENT\\iLogic\\PN.xlsx\"", "excelApp = CreateObject(\"Excel.Application\")", "excelApp.Visible = True", "excelWorkbook = excelApp.Workbooks.Open(Worksheet)", "excelSheet = excelWorkbook.Worksheets(1).activate", "GoExcel.CellValue(\"C\" & rowN) = iProperties.Value(\"Project\", \"Part Number\")", "GoExcel.Save\nGoExcel.Close"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Drawing resources Formats\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Parts List\n                    ", "solution": [], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Assembly constraints\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic and iParts\n                    ", "solution": [], "author": "slezak01"},
{"created at": [], "solution Title": "\n                        Re: View Label Left Text Alignment\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic Place Parts List Top Left of Border\n                    ", "solution": [], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: Using ProgressBar.OnCancel Event\n                    ", "solution": ["Public Sub Main\n    progBar = New TestProgressBar(ThisApplication)\n    progBar.Start()\nEnd Sub\n\nPublic Class TestProgressBar\n    Private WithEvents progBar As Inventor.ProgressBar\n    Private invApp As Inventor.Application\n\n    Public Sub New(InventorApp As Inventor.Application)\n        invApp = InventorApp\n    End Sub\n\n    Public Sub Start()\n        progBar = invApp.CreateProgressBar(False, 10, \"Test of Progress Bar\", True)\n\n        Dim j As Integer\n        For j = 0 To 10\n            progBar.Message = (\"Current Index: \" & j & \"/\" & 10)\n            Threading.Thread.Sleep(1000)\n            progBar.UpdateProgress()\n        Next\n\n        progBar.Close()\n    End Sub\n\n    Private Sub progBar_OnCancel() Handles progBar.OnCancel\n        progBar.Close()\n        MsgBox(\"Cancelled\")\n    End Sub\nEnd Class\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: ApprenticeServerComponent replacereference errors.\n                    ", "solution": ["''' <summary>\n    ''' Calls our changereference method and includes the path, projectprefix and new folder path.\n    ''' </summary>\n    ''' <param name=\"selectedItem\">The file the user selected</param>\n    Private Sub CopyFiles(selectedItem As String)\n        'MessageBox.Show(selectedItem.name + \" \" + selectedItem.path) '<-debugging\n        ProjectPath = TBNewPath.Text\n        If selectedItem.EndsWith(\".dwg\") Then\n            GetDrawingReferencedFiles(selectedItem)\n            'change the referenced files first\n            For Each referencedFile As AssemblyReference In DrawingReferencedFilesList\n                ChangeAssemblyReference(referencedFile.OriginalFilename, referencedFile.OriginalFilename)\n            Next\n            'then the drawing.\n            ChangeDrawingReference(selectedItem, selectedItem)\n        ElseIf selectedItem.EndsWith(\".iam\") Then\n            ChangeAssemblyReference(selectedItem, selectedItem)\n        End If\n        'ChangeReferenceApprentice(selectedItem, selectedItem)\n        'ChangeReferenceInventor(GetApplicationObject(), selectedItem, selectedItem)\n        MessageBox.Show(\"Completed copy design\")\n        'get the existing Inventor application object or start one.\n        Dim InventorApp As Inventor.Application = GetApplicationObject()\n        If Not InventorApp.Visible = True Then\n            InventorApp.Visible = True\n        End If\n        InventorApp.Documents.Open(newParentDocumentName, True)\n    End Sub\n\n    Private Sub GetDrawingReferencedFiles(SelectedDrawingName As String)\n        Dim oApprentice As New ApprenticeServerComponent\n        Dim oDoc As ApprenticeServerDocument = oApprentice.Open(SelectedDrawingName)\n        ' Iterate through the references looking for a    \n        ' reference to a specific file.    \n        Dim oRefFileDesc As ReferencedFileDescriptor\n        For Each oRefFileDesc In oDoc.ReferencedFileDescriptors\n            Dim tmp As AssemblyReference = New AssemblyReference\n            tmp.OriginalFilename = oRefFileDesc.FullFileName\n            DrawingReferencedFilesList.Add(tmp)\n        Next\n        oDoc.Close()\n        oApprentice.Close()\n        oApprentice = Nothing\n    End Sub\n\n    ''' <summary>\n    ''' Copied verbatim from the Inventor API help file.\n    ''' </summary>\n    ''' <param name=\"ParentAssemblyDocumentName\"></param>\n    ''' <param name=\"originalAssemblyFilename\"></param>\n    Private Sub ChangeAssemblyReference(ByVal ParentAssemblyDocumentName As String, ByVal originalAssemblyFilename As String)\n        Dim oApprentice As New ApprenticeServerComponent\n        ' Open a document.    \n        Dim oDoc As ApprenticeServerDocument = oApprentice.Open(originalAssemblyFilename)\n        ' Iterate through the references looking for a    \n        ' reference to a specific file.    \n        Dim oRefFileDesc As ReferencedFileDescriptor\n        For Each oRefFileDesc In oDoc.ReferencedFileDescriptors\n            If oRefFileDesc.FullFileName.Contains(My.Settings.ContentCentrePath) Then Continue For\n            Dim oldFilename As String = System.IO.Path.GetFileName(oRefFileDesc.FullFileName)\n            Dim newFilename As String = NewProject.Prefix + My.Settings.ProjectDelimiter + oldFilename\n            Dim oldpath As String = System.IO.Path.GetDirectoryName(oRefFileDesc.FullFileName)\n            Dim newfileref As String = ProjectPath + \"\\\" + newFilename\n            'copy old to new\n            If Not IO.File.Exists(newfileref) Then\n                IO.File.Copy(oRefFileDesc.FullFileName, newfileref)\n            End If\n            Call oRefFileDesc.PutLogicalFileNameUsingFull(newfileref)\n            If oRefFileDesc.FullFileName.EndsWith(\".iam\") Then\n                ChangeAssemblyReference(oRefFileDesc.FullFileName, oRefFileDesc.FullFileName)\n            End If\n        Next\n        ' Set a reference to the FileSaveAs object.    \n        Dim oFileSaveAs As FileSaveAs = oApprentice.FileSaveAs\n        ' Save the assembly.\n\n        If Not IO.Path.GetFileName(originalAssemblyFilename).StartsWith(NewProject.Prefix) Then\n            newParentDocumentName = System.IO.Path.GetFileName(ParentAssemblyDocumentName)\n            newParentDocumentName = ProjectPath + \"\\\" + NewProject.Prefix + My.Settings.ProjectDelimiter + newParentDocumentName\n        Else\n            newParentDocumentName = originalAssemblyFilename\n        End If\n        Call oFileSaveAs.AddFileToSave(oDoc, newParentDocumentName)\n        Call oFileSaveAs.ExecuteSaveAs()\n        For Each assy As AssemblyReference In DrawingReferencedFilesList\n            If assy.OriginalFilename = originalAssemblyFilename Then\n                assy.NewFilename = newParentDocumentName\n            End If\n        Next\n        oApprentice.Close()\n        oApprentice = Nothing\n    End Sub\n    ''' <summary>\n    ''' Copied verbatim from the Inventor API help file.\n    ''' </summary>\n    ''' <param name=\"ParentAssemblyDocumentName\"></param>\n    ''' <param name=\"originalAssemblyFilename\"></param>\n    Private Sub ChangeDrawingReference(ByVal ParentAssemblyDocumentName As String, ByVal originalAssemblyFilename As String)\n        Dim oApprentice As New ApprenticeServerComponent\n        ' Open a document.    \n        Dim oDoc As ApprenticeServerDocument = oApprentice.Open(originalAssemblyFilename)\n        ' Iterate through the references looking for a    \n        ' reference to a specific file.    \n        Dim oRefFileDesc As ReferencedFileDescriptor\n        For Each oRefFileDesc In oDoc.ReferencedFileDescriptors\n            Dim newfileref As AssemblyReference = (From f As AssemblyReference In DrawingReferencedFilesList\n                                                   Where f.OriginalFilename = oRefFileDesc.FullFileName\n                                                   Select f).FirstOrDefault()\n            If Not newfileref Is Nothing Then\n                Call oRefFileDesc.PutLogicalFileNameUsingFull(newfileref.NewFilename)\n            End If\n        Next\n        ' Set a reference to the FileSaveAs object.    \n        Dim oFileSaveAs As FileSaveAs = oApprentice.FileSaveAs\n        ' Save the assembly.\n\n        If Not IO.Path.GetFileName(originalAssemblyFilename).StartsWith(NewProject.Prefix) Then\n            newParentDocumentName = System.IO.Path.GetFileName(ParentAssemblyDocumentName)\n            newParentDocumentName = ProjectPath + \"\\\" + NewProject.Prefix + My.Settings.ProjectDelimiter + newParentDocumentName\n        Else\n            newParentDocumentName = originalAssemblyFilename\n        End If\n        Call oFileSaveAs.AddFileToSave(oDoc, newParentDocumentName)\n        Call oFileSaveAs.ExecuteSaveAs()\n        oApprentice.Close()\n        oApprentice = Nothing\n    End Sub"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Autodesk Inventor iLogic code for adding dimensions automatically\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Using comboboxes in the inventor panel\n                    ", "solution": [], "author": "R.van.den.Bor"},
{"created at": [], "solution Title": "\n                        Re: Cannot mirror surfaces using MirrorFeatures.Add in Inventor 2015\n                    ", "solution": ["Sub MirrorFeature_test_SURFACE_6()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    Dim oDef As PartComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    Dim oMirrorPlane As WorkPlane\n    Set oMirrorPlane = oDef.WorkPlanes.Item(1)   'Item(\"YZ Plane\")\n    \n    Dim oColl As ObjectCollection\n    Set oColl = ThisApplication.TransientObjects.CreateObjectCollection\n\n    Dim oSurface As WorkSurface\n    Dim oFeature As PartFeature\n    \n    For Each oSurface In oDef.WorkSurfaces\n        Set oFeature = oSurface.SurfaceBodies(1).CreatedByFeature\n        Call oColl.Add(oFeature)\n    Next\n    \n    Call oDef.Features.MirrorFeatures.Add(oColl, oMirrorPlane, _\n            False, PatternComputeTypeEnum.kIdenticalCompute)\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic detect if parameter exist - if not, create it\n                    ", "solution": ["oMyParameter = ThisApplication.ActiveDocument.ComponentDefinition.Parameters.UserParameters\nTry\n'Change value of param\nParameter(\"EXTERNAL\") = \"test\"\nCatch\n'Create Param as it doesn't exist\noParameter=oMyParameter.AddByValue(\"EXTERNAL\", \"True\", UnitsTypeEnum.kTextUnits)\nEnd Try "], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: ILOGIC, SaveAsBitmap to folder location\n                    ", "solution": ["'catch and skip errors\nOn Error Resume Next\n'define the active assembly\nDim oAssyDoc As AssemblyDocument\noAssyDoc = ThisApplication.ActiveDocument \n\n'Check all referenced docs\nDim oDoc As Inventor.Document\nFor Each oDoc In oAssyDoc.AllReferencedDocuments\n    'set work plane visibility\n    For Each oWorkPlane In oDoc.ComponentDefinition.WorkPlanes\n        oWorkPlane.Visible = False\n    Next\n    'set work axis visibility\n    For Each oWorkAxis In oDoc.ComponentDefinition.WorkAxes\n        oWorkAxis.Visible = False\n    Next\n    'set work point visibility\n    For Each oWorkPoint In oDoc.ComponentDefinition.WorkPoints\n        oWorkPoint.Visible = False\n    Next\nNext\n'update the files\nInventorVb.DocumentUpdate()\n\n'Change Scheme to Presentation\nThisApplication.ColorSchemes(\"Presentation\").Activate \n'Get the active view. \nDim oView As View \noView = ThisApplication.ActiveView", "oTime = TimeString", "oTime = Val(oTime) & \"-\" & Mid(oTime, 4, 2) & \"-\" & Right(oTime, 2)\noFolder = \"C:\\temp\\temp \" & DateString & \" \" & oTime & \".jpg\"", "\n'Save the view as a jpg file.  \nCall oView.SaveAsBitmap(oFolder, 6000, 0)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How to find out all members of the PDFaddIn\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Ground all components - error\n                    ", "solution": ["'start of ilogic code\n'get user input", "\nqGround = InputRadioBox(\"Select one:\", \"Ground\", \"Un-Ground\", True, \"ilogic\")\n", "'get the active assembly", "\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n", "'set the Master LOD active", "\nDim oLODRep As LevelofDetailRepresentation\noLODRep = oAsmCompDef.RepresentationsManager.LevelOfDetailRepresentations.Item(\"", "Hlavn\u00ed", "\")\noLODRep.Activate\n\n", "'Iterate through all of the top level occurrences", "\nDim oOccurrence As ComponentOccurrence\nFor Each oOccurrence In oAsmCompDef.Occurrences\n    If oOccurrence.DefinitionDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n        ", "'Iterate through all of the 2nd level occurrences", "\n        Dim oSub1Occ As ComponentOccurrence\n        For Each oSub1Occ In oOccurrence.SubOccurrences\n            ", "'ground everything in the 2nd level", "   \n            oSub1Occ.Grounded = qGround\n            If oSub1Occ.DefinitionDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n                ", "'Iterate through all of the 3nd level occurrences", "\n                Dim oSub2Occ As ComponentOccurrence\n                For Each oSub2Occ In oSub1Occ.SubOccurrences\n                    ", "'ground everything in the 3rd level", "    \n                    oSub2Occ.Grounded = qGround\n                Next\n            End If\n        Next\n    End If\n    ", "'ground everything in the top level", "    \n    oOccurrence.Grounded = qGround\nNext  \n", "'end of ilogic code"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Adding PartsList columns using iLogic\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Edit PDF print vector resolution through parameter\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: GetFilePropertyID\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic move and rename parts\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to add a primitive sphere in sketch vb.net\n                    ", "solution": ["Public Sub CreateRevolutions()\n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    Dim points(5) As Point\n    Set points(0) = tg.CreatePoint(4, 0, 0)\n    Set points(1) = tg.CreatePoint(0, -4, 0)\n    Set points(2) = tg.CreatePoint(0, 4, 0)\n    Set points(3) = tg.CreatePoint(4, 4, 0)\n    Set points(4) = tg.CreatePoint(-4, 4, 0)\n    \n    Dim moves(5) As MoveFeature\n    Dim i As Integer\n    For i = 0 To 4\n        Set moves(i) = CreateSphere(1.5, points(i))\n    Next\nEnd Sub\n\n\nPublic Function CreateSphere(Radius As Double, Position As Point) As MoveFeature\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    ' Create a new sketch on the X-Y base plane.\n    Dim sketch As PlanarSketch\n    Set sketch = partDef.Sketches.Add(partDef.WorkPlanes.Item(3))\n    \n    ' Draw a circle.\n    Dim circ As SketchCircle\n    Set circ = sketch.SketchCircles.AddByCenterRadius(tg.CreatePoint2d(0, 0), Radius)\n    \n    ' Draw a center line through the circle.\n    Dim lin As SketchLine\n    Set lin = sketch.SketchLines.AddByTwoPoints(tg.CreatePoint2d(-Radius, 0), tg.CreatePoint2d(Radius, 0))\n    lin.Centerline = True\n    \n    ' Constrain the line to circle.\n    Call sketch.GeometricConstraints.AddCoincident(circ.CenterSketchPoint, lin)\n    Call sketch.GeometricConstraints.AddCoincident(lin.StartSketchPoint, circ)\n    Call sketch.GeometricConstraints.AddCoincident(lin.EndSketchPoint, circ)\n    \n    ' Create a profile from the sketch.\n    Dim prof As Profile\n    Set prof = sketch.Profiles.AddForSolid()\n    \n    ' Two paths were created in the profile but we only need one (half of the circle)\n    ' so delete one of the paths.\n    prof.Item(1).Delete\n    \n    ' Create a revolve feature.\n    Dim revolve As RevolveFeature\n    Set revolve = partDef.Features.RevolveFeatures.AddFull(prof, lin, kNewBodyOperation)\n    \n    ' Move it to the specified position.\n    Dim objColl As ObjectCollection\n    Set objColl = ThisApplication.TransientObjects.CreateObjectCollection\n    Call objColl.Add(revolve.Faces.Item(1).SurfaceBody)\n    Dim moveDef As MoveDefinition\n    Set moveDef = partDef.Features.MoveFeatures.CreateMoveDefinition(objColl)\n    Call moveDef.AddFreeDrag(Position.x, Position.y, Position.Z)\n    Set CreateSphere = partDef.Features.MoveFeatures.Add(moveDef)\n    \n    ' Rename the parameters to they're easily identified in the parameters dialog.\n    Dim freeDrag As FreeDragMoveOperation\n    Set freeDrag = CreateSphere.Definition.MoveOperation(1)\n    Dim name As String\n    name = CreateSphere.name & \" X\"\n    name = Replace(name, \" \", \"_\")\n    freeDrag.XOffset.name = name\n    \n    name = CreateSphere.name & \" Y\"\n    name = Replace(name, \" \", \"_\")\n    freeDrag.YOffset.name = name\n    \n    name = CreateSphere.name & \" Z\"\n    name = Replace(name, \" \", \"_\")\n    freeDrag.ZOffset.name = name\nEnd Function"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic to create autocad DWG\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Replace obsolete component\n                    ", "solution": ["'external rule must always check the type of the active document\nIf ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\n\tMsgBox(\"This rule work with assemblies only\")\n\tExit Sub\nEnd If\n\n'top-level assembly document\nDim oAsmDoc as AssemblyDocument = ThisApplication.ActiveDocument \nDim oAsmDef As AssemblyComponentDefinition = ThisApplication.ActiveDocument.ComponentDefinition\n\nDim n As Integer = 0  'counter\n\n'Iterate through all of the occurrences at the top level\nFor Each oOcc As ComponentOccurrence In oAsmDef.Occurrences\n\n\t'get name of this occurrence\n\tDim Name As String  = oOcc.Name \t\n\tTry\n\t\t'read custom iProperty value\n    \t        Dim Replacement As String  = iProperties.Value(oOcc.Name, \"Custom\", \"Obsolete_Replacement\") \n\t\tTry\n\t\t\t'replace the obsolete part with the replacement part\n\t\t\tComponent.Replace(oName, Replacement, True) \n\t\t\tn += 1 'increment counter\n\t\tCatch\n\t\t\t'replacement failed\n\t\t\tMsgBox(oOcc.Name & vbNewLine & \"replacement failed for some reason\")\n\t\tEnd Try\n\t\n\tCatch \n\t\t'custom property \"Obsolete_Replacement\" was not found\n\t\t'replacement not required\n\tEnd Try\nNext\t\n\nMsgBox(\"DONE:  \" & vbNewLine & n & \" occurrences replaced\")"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: two sketch visibility in Part\n                    ", "solution": ["' fragment of the rule Sparing1\n\u00a0\n'Op basis van de keuze van de gebruiker (SymboolTypeSparing1) wordt het symbool veranderd.\nDim sketches As PlanarSketches = ThisApplication.ActiveDocument.ComponentDefinition.sketches\nDim oSketch As PlanarSketch\n\u00a0\nSelect Case SymboolTypeSparing1\nCase \"nooduit\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sketches.item(\"Nooduit1\").Visible = True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sketches.item(\"Bewegingsmelder1\").Visible = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sketches.item(\"Rookmelder1\").Visible = False\n\u00a0\nCase \"bewegingsmelder\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sketches.item(\"Nooduit1\").Visible = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sketches.item(\"Bewegingsmelder1\").Visible = True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sketches.item(\"Rookmelder1\").Visible = False\nCase \"rookmelder\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sketches.item(\"Nooduit1\").Visible = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sketches.item(\"Bewegingsmelder1\").Visible = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sketches.item(\"Rookmelder1\").Visible = True\nEnd Select", "Dim sketches As PlanarSketches = ThisApplication.ActiveDocument.ComponentDefinition.sketches\n\u00a0\nsketches.item(\"Nooduit1\").Visible = (SymboolTypeSparing1 = \"nooduit\")\nsketches.item(\"Bewegingsmelder1\").Visible = (SymboolTypeSparing1 = \"bewegingsmelder\")\nsketches.item(\"Rookmelder1\").Visible = (SymboolTypeSparing1 = \"rookmelder\")", "' fragment of the rule Sparing2\n\u00a0\n'Op basis van de keuze van de gebruiker (SymboolTypeSparing2) wordt het symbool veranderd.\nDim sketches As PlanarSketches = ThisApplication.ActiveDocument.ComponentDefinition.sketches\n\u00a0\nsketches.item(\"Nooduit2\").Visible = (SymboolTypeSparing2 = \"nooduit\")\nsketches.item(\"Bewegingsmelder2\").Visible = (SymboolTypeSparing2 = \"bewegingsmelder\")\nsketches.item(\"Rookmelder2\").Visible = (SymboolTypeSparing2 = \"rookmelder\")"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Combine tool isn't working properly\n                    ", "solution": [], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: iProp Wiz Evaluation Expired\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: link a new parameter to a custom iproperty\n                    ", "solution": ["Dim PropValue As String = iProperties.Value(\"Custom\", \"AAA\")\n", "'updates the user-defined text parameter", "\n", "Weight", " = PropValue\n\u00a0\n", "'this message is for debugging only", "\nMsgBox(\"Parameter was updated: \" & ", "Weight", ")"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: ilogic excel\n                    ", "solution": ["GoExcel.Open(\"C:\\TEMP\\MyWorkBook.xlsx\", \"Sheet1\")", "oDocNumber = ThisDoc.FileName(False) 'without extension\n\nFor oRow = 2 To 100 'define the rows that contain the data\n\tIf (GoExcel.CellValue(\"A\" & oRow)) = oDocNumber Then\n \tGoExcel.CellValue(\"B\" & oRow) = DateString\n\tEnd If\nNext\n", "GoExcel.Open(\"C:\\TEMP\\MyWorkBook.xlsx\", \"Sheet1\")\noDocNumber = ThisDoc.FileName(False) ", "'without extension", "\n", "'Define the first row with data", "\nRowStart = 2", "'Define the amount of skiped rows", "\nRowEnd = 100\n\n", "'Find the first empty cell", "\nFor countA = RowStart To (RowEnd * 0.01) + RowStart\n    ", "'If it's not blank jump to cell + 100. E.g. search cell A2 and then A102 etc.", "\n    If Not String.IsNullOrEmpty(GoExcel.CellValue(\"A\" & RowEnd)) Then\n        ", "'Add another 100 to searched cells", "\n        RowEnd = RowEnd + 100\n    Else\n        ", "'Else if it's empty exit loop", "\n        Exit For\n    End If\nNext\n", "'Search for the file name in column A", "\nFor oRow = RowStart To RowEnd\n    If (GoExcel.CellValue(\"A\" & oRow)) = oDocNumber Then\n        GoExcel.CellValue(\"B\" & oRow) = DateString\n    End If\nNext\u00a0", "GoExcel.Open(\"C:\\TEMP\\MyWorkBook.xlsx\", \"Sheet1\")\noDocNumber = ThisDoc.FileName(False) 'without extension\nFor oRow = 2 To 100 'define the rows that contain the data\n\tIf (GoExcel.CellValue(\"A\" & oRow)) = oDocNumber Then\n\tGoExcel.CellValue(\"B\" & oRow) = DateString\n\t'creates a hyperlink inthe excel file to a PDF file \n\tGoExcel.CellValue(\"C\" & oRow) = _\n\t\"=HYPERLINK(\" & Chr(34) & \"C:\\TEMP\\\" & \"My File\" & \".pdf\" & Chr(34) & \",\" & Chr(34) & \"Link\" & Chr(34) & \")\"\n\tEnd If\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic read Weldment material name\n                    ", "solution": ["DTP_PropertySet = ThisDoc.Document.PropertySets.Item(\"Design Tracking Properties\")\noWeldMatl = DTP_PropertySet.Item(\"Weld Material\").Value\nMessageBox.Show(oWeldMatl, \"iLogic\")", "Dim oDoc As Document\noDoc = ThisApplication.ActiveDocument\noMatl = oDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Weld Material\").Value\nMessageBox.Show(oMatl, \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: add sketch on a face in assembly, API\n                    ", "solution": ["Public Sub CreateSketchTest()\n    Dim assDoc As AssemblyDocument\n    Set assDoc = ThisApplication.ActiveDocument\n    Dim assDocDef As AssemblyComponentDefinition\n    Set assDocDef = assDoc.ComponentDefinition\n\n    ' Call the Pick method and set the filter to pick any face.\n    Dim oFace As FaceProxy\n    Set oFace = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartFaceFilter, \"Pick a face\")\n\n    'start edit mode on occurence the selected face is in.\n    Dim oOcc As ComponentOccurrence\n    Set oOcc = oFace.ContainingOccurrence\n    'Call oOcc.Edit\n            \n    ' access the part document component definition\n    Dim oPartCompDef As PartComponentDefinition\n    Set oPartCompDef = oOcc.Definition\n\n    ' create a new sketch on the selected face, in the context of the part.\n    Dim oSketch As sketch\n    Set oSketch = oPartCompDef.Sketches.Add(oFace.NativeObject)\n    \n    'the code below can't work too\n    Set oSketch = assDoc.ComponentDefinition.Sketches.Add(oFace)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: from vba to vb.net\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: get addin to run in multiple instances of inventor\n                    ", "solution": [], "author": "ruthsteed"},
{"created at": [], "solution Title": "\n                        Re: VBA find Excel version and reference\n                    ", "solution": ["Dim ExcelApp As Object\nSet ExcelApp = CreateObject(\"Excel.Application\")\nDim ExcelWB As Object\nSet ExcelWB = ExcelApp.Workbooks.Add\nDim ExcelWS As Object\nSet ExcelWS = ExcelWB.ActiveSheet", "'you must define Excel global constants you have to use yourself, like this:", "Const xlThin = 2", "Const xlMedium = -4138", "Const xlCenter = -4108", "Const xlLeft = -4131", "Const xlColorIndexAutomatic = -4105"], "author": "bshbsh"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Check SheetMetal flat pattern max size\n                    ", "solution": ["oMyParameter=ThisApplication.ActiveDocument.ComponentDefinition.Parameters.UserParameters\n\nnastX= InputBox(\"Set MAX dimension X\", \"Set MAX size\", \"\")\nnastY= InputBox(\"Set MAX dimension Y\", \"Set MAX size\", \"\")\n\nTry\nParameter(\"MAX_X\") = nastX\nCatch\noParameter=oMyParameter.AddByExpression(\"MAX_X\", nastX, UnitsTypeEnum.kMillimeterLengthUnits)\nEnd Try\n\nRuleParametersOutput()\nInventorVb.DocumentUpdate()\n\nTry\nParameter(\"MAX_Y\") = nastY\nCatch\noParameter=oMyParameter.AddByExpression(\"MAX_Y\", nastY, UnitsTypeEnum.kMillimeterLengthUnits)\nEnd Try\n\nRuleParametersOutput()\nInventorVb.DocumentUpdate()\n\nTry\nParameter(\"COLOR_SAVE\") = Parameter(\"COLOR_SAVE\")\nCatch\noParameter=oMyParameter.AddByValue(\"COLOR_SAVE\", \"\", UnitsTypeEnum.kTextUnits)\nEnd Try", "InventorVb.DocumentUpdate()\n\nx = MaxOfMany(SheetMetal.FlatExtentsLength, SheetMetal.FlatExtentsWidth)\ny = MinOfMany(SheetMetal.FlatExtentsLength, SheetMetal.FlatExtentsWidth)\n\nmaxX = MaxOfMany(Parameter(\"MAX_X\"), Parameter(\"MAX_Y\"))\nmaxY = MinOfMany(Parameter(\"MAX_X\"), Parameter(\"MAX_Y\"))\n\nIf iProperties.PartColor<>\"Red\" AndAlso iProperties.PartColor<>\"\u010cerven\u00e1\" Then 'English and Czech name of color\nParameter(\"COLOR_SAVE\") = iProperties.PartColor\nEnd If\n\nIf x > maxX Or y > maxY Then\niProperties.PartColor = \"Red\"\nMessageBox.Show(\"Your dimensions are too large.\" & vbLf & \"Max dimensions are:\" & Parameter(\"MAX_X\") & \"x\" & Parameter(\"MAX_Y\") & vbLf & \"Your dimensions are:\" & Ceil(x) & \"x\" & Ceil(y), \"ERROR!\",MessageBoxButtons.OK,MessageBoxIcon.Error)\nThisApplication.ActiveView.Update()\nElse\niProperties.PartColor = Parameter(\"COLOR_SAVE\") \nThisApplication.ActiveView.Update()\nEnd If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic - create user parameter at drawing\n                    ", "solution": ["oMyParameter=ThisApplication.ActiveDocument.Parameters.UserParameters"], "author": "Ezekiel12"},
{"created at": [], "solution Title": "\n                        Re: iLogic create new sheet from Sheet Format\n                    ", "solution": ["'Set a reference to the drawing document.\n' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\n'Set a reference to the sheet format named \"C size, 4 view\"\nDim oFormat As SheetFormat\nTry\noFormat = oDrawDoc.SheetFormats.Item(\"C size, 4 view\")\nCatch\nMessageBox.Show(\"Error: C size, 4 view might not exist.\", \"iLogic\")\nReturn\nEnd Try\n\n'Open the model document invisible\nDim oModel As Document\noModel = ThisApplication.Documents.Open(\"C:\\TEMP\\block.ipt\", False)\n\n'Create a new sheet based on the sheet format using the specified model\nDim oSheet As Sheet\noSheet = oDrawDoc.Sheets.AddUsingSheetFormat(oFormat, oModel)", "'Set a reference to the drawing document.\n' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\n'Set a reference to the sheet format \nDim oFormat As SheetFormat\nTry\noFormat = oDrawDoc.SheetFormats.Item(\"MECHANICAL D-SIZE\")\nCatch\nMessageBox.Show(\"Error: the named sheet format might not exist.\", \"iLogic\")\nReturn\nEnd Try\n\n'Create a new sheet based on the sheet format using the specified model\nDim oSheet As Sheet\noSheet = oDrawDoc.Sheets.AddUsingSheetFormat(oFormat)"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Replace components with Apprentice\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Disable SaveAs dialog\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Create a list and output as a message box\n                    ", "solution": ["' Declare new StringBuilder object\nDim builder As New StringBuilder\n\n' Append a string to the StringBuilder.\nbuilder.Append(\"Here is the list:\")\n\n' add a line break.\nbuilder.AppendLine()\n\n' Append a string + another line break.\nbuilder.Append(\"Line 1\").AppendLine()\n' Append a string + another line break.\nbuilder.Append(\"Another line\").AppendLine()\n\n' Get string value from StringBuilder.\nDim s As String = builder.ToString\n\n' output\nMsgBox(s)"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Read embedded text file\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Delete Title Block from sheet\n                    ", "solution": [], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: Intersection Point @  Axis and Face (within face boundary)\n                    ", "solution": ["'", "Call oPartDef.WorkPoints.AddFixed(pt)", "\u00a0\u00a0"], "author": "info"},
{"created at": [], "solution Title": "\n                        Re: Open an Ipt file invisibly\n                    ", "solution": ["Dim g_App As Inventor.InventorServer = ThisApplication\nDim oNewPart As AssemblyDocument\noNewPart = g_App.Documents.Add(DocumentTypeEnum.kPartDocumentObject, , True)", "oApp = Marshal.GetActiveObject(\"Inventor.Application\")\noDocs = oApp.Documents\noDoc = oDocs.Open(\"C:\\Template.ipt\", ", "False", ")"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How can I call a macro with arguments?\n                    ", "solution": [], "author": "Holgarsson"},
{"created at": [], "solution Title": "\n                        Re: Style definitions in template differ from style library\n                    ", "solution": [], "author": "Mark.Lancaster"},
{"created at": [], "solution Title": "\n                        Re: GetMinimumDistance returning wrong value\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: To switch view representations in te assembly (also need for LOD)\n                    ", "solution": [], "author": "rwickrama"},
{"created at": [], "solution Title": "\n                        Re: How do I Copy a selection of parts constrained and Paste via API ?\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic Part Visibility in SubAssembly Design View Representation\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Code disappearing when ipt file is saved\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: ILogic - save multiple formats\n                    ", "solution": ["oModelRef = ThisApplication.ActiveDocument.ActiveSheet.DrawingViews.Item(1).ReferencedFile\nModelFileName = oModelRef.FullFileName\nDim FNamePos As Long = InStrRev(ModelFileName, \"\\\", - 1)\nDim docFName As String = Mid(ModelFileName, FNamePos + 1, Len(ModelFileName) - FNamePos)\n\nstrFolder = \"D:\\files\\\" & ThisDoc.FileName(False) & iProperties.Value(docFName, \"Project\", \"Revision Number\")", "ThisDoc.Document.SaveAs(strFolder & \".dwg\" , True)\nThisDoc.Document.SaveAs(strFolder & \".pdf\" , True)\n\nMessageBox.Show(\"All file formats saved:\" & vblf & vblf _\n    & strFolder & \".dwg\" & vblf & strFolder & \".pdf\", \"File Save\") "], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: ILogic - Parts List\n                    ", "solution": ["' iLogic rule CreatePartsList places the parts list \n'at the top right corner of the border if one exists, \n'else it is placed at the top right corner of the sheet.\n\n'Drawing document should be active, \n'The first view should be tied to the assembly model\nTry\n' Set a reference to the drawing document.\n' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument = ThisDoc.Document\n\n'Set a reference to the active sheet.\nDim oSheet As Sheet = oDrawDoc.ActiveSheet\n\n' Set a reference to the first drawing view on\n' the sheet. This assumes the first drawing\n' view on the sheet is not a draft view.\nDim oDrawingView As DrawingView = oSheet.DrawingViews(1)\n\n\n' Set a reference to the sheet's border\nDim oBorder As Border = oSheet.Border\n\nDim oPlacementPoint As Point2d\n\nIf oBorder IsNot Nothing Then\n    ' A border exists. The placement point\n    ' is the top-right corner of the border.\n    oPlacementPoint = oBorder.RangeBox.MaxPoint\nElse\n    ' There is no border. The placement point\n    ' is the top-right corner of the sheet.\n    oPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(oSheet.Width, oSheet.Height)\nEnd If\n\n' Create the parts list.\nDim oPartsList As PartsList = oSheet.PartsLists.Add(oDrawingView, oPlacementPoint)\n\nCatch\n    MsgBox(\"Some error\")\nEnd Try"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Sheet Metal Thickness driven by Forms\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Drawing prompted entry to update model custom properties using ilogic\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Excel BOM VBA from model iproperties - Stuck on Custom Prop\n                    ", "solution": [], "author": "Alex.booth"},
{"created at": [], "solution Title": "\n                        Re: Replace a sketched symbol in drawing\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic 'Where Used' Rule\n                    ", "solution": ["Sub TotalQty_Routing()\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    Dim oTotalUnits As Integer\n    Dim oTotalQTYProperty As Property\n    \n    If oDoc.LevelOfDetailName <> \"Master\" Then\n        MsgBox \"'Level of Detail' must be set to 'Master'\", vbExclamation, \"Cancelled\"\n        Exit Sub\n    End If\n    \n    On Error Resume Next\n    'get the total build quantity of this assembly\n    oTotalUnits = InputBox(\"Enter total build quantity:\", \"Build Quantity\", \"1\")\n    If Err.Number <> 0 Or oTotalUnits = \"0\" Then\n        MsgBox \"Cancelled\", vbExclamation, \"Cancelled\"\n    Else\n        Call SetTotalQty(oTotalUnits)\n\n        'Assign oTotalUnits to custom iProperty \"Total QTY\" in parent assembly\n        Set oTotalQTYProperty = oDoc.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Total QTY\")\n        If Err.Number <> 0 Then 'Failed to get the property, which means it doesn't exist, so add it.\n            oTotalQTYProperty = oDoc.PropertySets.Item(\"Inventor User Defined Properties\").Add(\"\", \"Total QTY\")\n            Set oTotalQTYProperty = oDoc.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Total QTY\")\n        End If\n        \n        oTotalQTYProperty.Value = oTotalUnits\n        \n        Dim doc As Document\n        Set doc = ThisApplication.ActiveDocument\n            \n        MsgBox \"Completed\", vbInformation, \"Completed\"\n    End If\n    \nEnd Sub\n\nPrivate Sub SetTotalQty(oTotalUnits As Integer)\n    ' Set a reference to the assembly document.\n    ' This assumes an assembly document is active.\n    Dim oDoc As AssemblyDocument\n    Dim MergeSetting As Boolean\n    Dim MergeExcludeList() As String\n    Dim oBOMView As BOMView\n    Dim oBOMPartsView As BOMView\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    'Set a reference to the BOM\n    Dim oBOM As BOM\n    Set oBOM = oDoc.ComponentDefinition.BOM\n    Call oBOM.GetPartNumberMergeSettings(MergeSetting, MergeExcludeList())\n    \n    oBOM.StructuredViewFirstLevelOnly = False\n    \n    ' Make sure that the structured and parts only views are enabled.\n    oBOM.StructuredViewEnabled = True\n    oBOM.PartsOnlyViewEnabled = True\n    \n    'Set a reference to the \"Structured\" BOMView\n    Set oBOMView = oBOM.BOMViews.Item(\"Structured\")\n\n    'Set a reference to the \"Parts Only\" BOMView\n    Set oBOMPartsView = oBOM.BOMViews.Item(\"Parts Only\")\n\n    'Get the file property that contains the \"Description\"\n    Dim oDrawingNumProperty As Property\n    Dim oDrawingNumString As String\n    On Error Resume Next\n    Set oDrawingNumProperty = oDoc.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Drawing #\")\n    If Err.Number <> 0 Then 'Failed to get the property, which means it doesn't exist, so add it.\n        Set oDrawingNumProperty = oDoc.PropertySets.Item(\"Inventor User Defined Properties\").Add(\"\", \"Drawing #\")\n    End If\n    oDrawingNumString = oDrawingNumProperty.Value\n\n    'Set \"Web Link\" iProperty to blank for all components that have \"Drawing #\" iProperty\n    Call oBOM.SetPartNumberMergeSettings(False)\n    Call ResetBOMRowWebLinkProperty(oBOMView.BOMRows)\n    \n    'Set \"Web Link\" iProperty to show parent 'Drawing #' and 'QTY' for each occurence\n    Call QueryBOMRowProperties(oBOMView.BOMRows, oDrawingNumString, oTotalUnits)\n\n    If MergeSetting = True Then\n        'Combine 'Web Link' field for BOM rows that are merged\n        Call oBOM.SetPartNumberMergeSettings(True)\n        Call WebLinkRowMergeBOMProperties(oBOMPartsView.BOMRows)\n    End If\n    \n    'Transfer info from \"web Link\" to 'Comments' and 'Total QTY' iProperty to show subtotal lines with the same 'route to' 'dwg #'\n    Call oBOM.SetPartNumberMergeSettings(False)\n    Call FormatBOMRowCommentProperty(oBOMView.BOMRows)\n    \n    'Set \"Web Link\" iProperty to blank for all components that have \"Drawing #\" iProperty\n    Call ResetBOMRowWebLinkProperty(oBOMView.BOMRows)\n    \n    'Set BOM 'Row Merge' setting back to original setting\n    Call oBOM.SetPartNumberMergeSettings(MergeSetting)\n    \nEnd Sub\n\nPrivate Sub QueryBOMRowProperties(oBOMRows As BOMRowsEnumerator, oParentPart As String, oParentUnits As Integer)\n    Dim oRow As BOMRow\n    Dim oCompDef As ComponentDefinition\n    Dim oPartNumProperty As Property\n    Dim oDescripProperty As Property\n    Dim oDrawingNumProperty As Property\n    Dim oDrawingNumString As String\n    Dim oTotalQTYProperty As Property\n    Dim oTotalItemQTY As Integer\n    Dim oWebLinkProperty As Property\n    Dim oCommentString As String\n    Dim oStringPosition As Integer\n    Dim oReplaceCharacter As Integer\n    Dim i As Long\n       \n    For i = 1 To oBOMRows.Count\n        ' Get the current row.\n        Set oRow = oBOMRows.Item(i)\n\n        'Set a reference to the primary ComponentDefinition of the row\n        Set oCompDef = oRow.ComponentDefinitions.Item(1)\n\n        oDrawingNumString = \"\"\n                \n        'Set the total qty based on the parent qty and current row qty\n        oTotalItemQTY = oRow.ItemQuantity * oParentUnits\n        \n        If TypeOf oCompDef Is VirtualComponentDefinition Then\n            \n            On Error Resume Next\n            Set oDrawingNumProperty = oCompDef.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Drawing #\")\n            If Err.Number <> 0 Or oDrawingNumProperty.Value = \"\" Then 'Failed to get the property, which means it doesn't exist, or property is blank.\n                'If there's no 'Drawing #' assigned, then skip to the next item\n                GoTo NextFor\n            End If\n            \n            oDrawingNumString = oDrawingNumProperty.Value\n\n            'Set the file property that contains \"Comments\" only if the component has a value in \"Drawing #\" field\n            Set oWebLinkProperty = oCompDef.PropertySets.Item(\"Design Tracking Properties\").Item(\"Catalog Web Link\")\n            oCommentString = oParentPart & vbCrLf & oTotalItemQTY & vbCrLf & oWebLinkProperty.Value\n            'Write string to \"Comment\" iProperty\n            oWebLinkProperty.Value = oCommentString\n        \n        Else\n            'Get the file property that contains the \"Drawing #\"\n            On Error Resume Next\n            Set oDrawingNumProperty = oCompDef.Document.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Drawing #\")\n            If Err.Number <> 0 Or oDrawingNumProperty.Value = \"\" Then 'Failed to get the property, which means it doesn't exist, or property is blank.\n                'If there's no 'Drawing #' assigned, then skip to the next item\n                GoTo NextFor\n            End If\n                        \n            oDrawingNumString = oDrawingNumProperty.Value\n            \n            'Set the file property that contains \"Comments\" only if the component has a value in \"Drawing #\" field\n            Set oWebLinkProperty = oCompDef.Document.PropertySets.Item(\"Design Tracking Properties\").Item(\"Catalog Web Link\")\n            oCommentString = oParentPart & vbCrLf & oTotalItemQTY & vbCrLf & oWebLinkProperty.Value\n            'Write string to \"Comment\" iProperty\n            oWebLinkProperty.Value = oCommentString\n            \n            'Recursively iterate child rows if present.\n            If Not oRow.ChildRows Is Nothing Then\n                Call QueryBOMRowProperties(oRow.ChildRows, oDrawingNumString, oTotalItemQTY)\n            End If\n        End If\nNextFor:\n    Next\nEnd Sub\nPrivate Sub FormatBOMRowCommentProperty(oBOMRows As BOMRowsEnumerator)\n    Dim i As Long\n    Dim TotalQTY As Long\n    Dim oCommentProperty As Property\n    Dim oWebLinkProperty As Property\n    Dim oCommentString As String\n    Dim oDrawingNumProperty As Property\n    Dim oTotalQTYProperty As Property\n    Dim oDrawingNumString As String\n    Dim oOccurenceTotal As Integer\n    Dim CommentArray() As String\n    Dim oCompDef As ComponentDefinition\n    Dim TempString As String\n    Dim Temp1String As String\n    \n    ' Iterate through the contents of the BOM Rows.\n    For i = 1 To oBOMRows.Count\n        ' Get the current row.\n        Dim oRow As BOMRow\n        Set oRow = oBOMRows.Item(i)\n        TotalQTY = 0\n        \n        'Set a reference to the primary ComponentDefinition of the row\n        Set oCompDef = oRow.ComponentDefinitions.Item(1)\n              \n        If TypeOf oCompDef Is VirtualComponentDefinition Then\n            'Need code here to format\n        Else\n            Set oWebLinkProperty = oCompDef.Document.PropertySets.Item(\"Design Tracking Properties\").Item(\"Catalog Web Link\")\n            \n            'Get the file property that contains the \"Drawing #\"\n            On Error Resume Next\n            Set oDrawingNumProperty = oCompDef.Document.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Drawing #\")\n            If Err.Number <> 0 Or oDrawingNumProperty.Value = \"\" Or oWebLinkProperty.Value = \"\" Then 'Failed to get the property, which means it doesn't exist, or property is blank.\n                'If there's no 'Drawing #' assigned, then skip to the next item\n                GoTo NextFor\n            End If\n            \n            'Set the file property that contains \"Comments\"\n            oCommentString = \"\"\n            TempString = \"\"\n            Temp1String = \"\"\n            CommentArray() = Split(oWebLinkProperty.Value, vbCrLf)\n            ReDim Preserve CommentArray(UBound(CommentArray) - 1)\n            \n            For k = 0 To UBound(CommentArray)\n                k = k + 1\n                TotalQTY = TotalQTY + CommentArray(k)\n            Next k\n            \n            For k = 0 To UBound(CommentArray)\n                oOccurenceTotal = CommentArray(k + 1)\n                For j = k + 2 To UBound(CommentArray)\n                    If InStr(1, CommentArray(k), CommentArray(j)) = 1 Then\n                        oOccurenceTotal = oOccurenceTotal + CommentArray(j + 1)\n                        CommentArray(j + 1) = \"~\"\n                        CommentArray(j) = \"~\"\n                        CommentArray(k + 1) = oOccurenceTotal\n                    End If\n                    j = j + 1\n                Next j\n                k = k + 1\n            Next k\n            \n            \n            For p = 0 To UBound(CommentArray) - 2\n              For q = p + 1 To UBound(CommentArray) - 1\n                If CommentArray(p) > CommentArray(q + 1) Then\n                  TempString = CommentArray(p)\n                  Temp1String = CommentArray(p + 1)\n                  CommentArray(p) = CommentArray(q + 1)\n                  CommentArray(p + 1) = CommentArray(q + 2)\n                  CommentArray(q + 1) = TempString\n                  CommentArray(q + 2) = Temp1String\n                End If\n                q = q + 1\n              Next q\n              p = p + 1\n            Next p\n            \n            For k = 0 To UBound(CommentArray)\n                If CommentArray(k) = \"~\" Then\n                    ReDim Preserve CommentArray(k - 1)\n                    Exit For\n                End If\n                k = k + 1\n            Next k\n            \n            For m = UBound(CommentArray) To 0 Step -1\n                oCommentString = CommentArray(m - 1) & \" - QTY (\" & CommentArray(m) & \")\" & vbCrLf & oCommentString\n                m = m - 1\n            Next m\n            oCommentString = Left(oCommentString, Len(oCommentString) - 1)\n            \n            'Handle the case where the top level assembly does not have a drawing # assigned - do not assign the value\n            If Left(oCommentString, 8) = \" - QTY (\" Then\n                oCommentString = \"\"\n            End If\n            \n            Set oCommentProperty = oCompDef.Document.PropertySets.Item(\"Inventor Summary Information\").Item(\"Comments\")\n            oCommentProperty.Value = oCommentString\n            \n            On Error Resume Next\n            Set oTotalQTYProperty = oCompDef.Document.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Total QTY\")\n            If Err.Number <> 0 Then 'Failed to get the property, which means it doesn't exist, or property is blank.\n                Set oTotalQTYProperty = oCompDef.Document.PropertySets.Item(\"Inventor User Defined Properties\").Add(\"\", \"Total Qty\")\n            End If\n            oTotalQTYProperty.Value = TotalQTY\n                \n            'Recursively iterate child rows if present.\n            If Not oRow.ChildRows Is Nothing Then\n                Call FormatBOMRowCommentProperty(oRow.ChildRows)\n            End If\n        \n        End If\nNextFor:\n    Next\nEnd Sub\n\nPrivate Sub WebLinkRowMergeBOMProperties(oBOMRows As BOMRowsEnumerator)\n    Dim i As Long\n    Dim j As Long\n    Dim oWebLinkProperty As Property\n    Dim WebLinkString As String\n    Dim oDrawingNumProperty As Property\n    Dim oDrawingNumString As String\n    Dim oCompDef As ComponentDefinition\n    Dim oRow As BOMRow\n    \n    ' Iterate through the contents of the BOM Rows.\n    For i = 1 To oBOMRows.Count\n        \n        ' Get the current row.\n        Set oRow = oBOMRows.Item(i)\n        If oRow.Merged() = True Then\n            \n            'If any of the merged rows do not have a 'Drawing #', then skip making any changes\n            For j = 1 To oRow.ComponentDefinitions.Count\n                Set oCompDef = oRow.ComponentDefinitions.Item(j)\n                On Error Resume Next\n                Set oDrawingNumProperty = oCompDef.Document.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Drawing #\")\n                If Err.Number <> 0 Or oDrawingNumProperty.Value = \"\" Then 'Failed to get the property, which means it doesn't exist, or property is blank.\n                    'If there's no 'Drawing #' assigned, then skip to the next item\n                    GoTo NextFor\n                End If\n            Next j\n            \n            WebLinkString = \"\"\n            \n            'Combine 'Web Link' iProperty for all merged rows\n            For j = 1 To oRow.ComponentDefinitions.Count\n                Set oCompDef = oRow.ComponentDefinitions.Item(j)\n                \n                Set oWebLinkProperty = oCompDef.Document.PropertySets.Item(\"Design Tracking Properties\").Item(\"Catalog Web Link\")\n                If oWebLinkProperty.Value <> \"\" Then\n                    WebLinkString = oWebLinkProperty.Value & WebLinkString\n                End If\n            Next j\n            \n            'Assign combined 'Web Link' iProperty for all merged rows\n            For j = 1 To oRow.ComponentDefinitions.Count\n                Set oCompDef = oRow.ComponentDefinitions.Item(j)\n                \n                Set oWebLinkProperty = oCompDef.Document.PropertySets.Item(\"Design Tracking Properties\").Item(\"Catalog Web Link\")\n                oWebLinkProperty.Value = WebLinkString\n            Next j\n        End If\nNextFor:\n    Next i\nEnd Sub\n\nPrivate Sub ResetBOMRowWebLinkProperty(oBOMRows As BOMRowsEnumerator)\n    Dim i As Long\n    Dim oWebLinkProperty As Property\n    Dim oCompDef As ComponentDefinition\n    \n    ' Iterate through the contents of the BOM Rows.\n    For i = 1 To oBOMRows.Count\n        ' Get the current row.\n        Dim oRow As BOMRow\n        Set oRow = oBOMRows.Item(i)\n\n        'Set a reference to the primary ComponentDefinition of the row\n        Set oCompDef = oRow.ComponentDefinitions.Item(1)\n\n        If TypeOf oCompDef Is VirtualComponentDefinition Then\n            On Error Resume Next\n            Set oDrawingNumProperty = oCompDef.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Drawing #\")\n            If Err.Number <> 0 Or oDrawingNumProperty.Value = \"\" Then 'Failed to get the property, which means it doesn't exist, or property is blank.\n                'If there's no 'Drawing #' assigned, then skip to the next item\n                GoTo NextFor\n            End If\n            \n            'Set the file property that contains the \"Comments\" to blank\n            Set oWebLinkProperty = oCompDef.PropertySets.Item(\"Design Tracking Properties\").Item(\"Catalog Web Link\")\n            'Make the property blank\n            oWebLinkProperty.Value = \"\"\n\n        Else\n            On Error Resume Next\n            Set oDrawingNumProperty = oCompDef.Document.PropertySets.Item(\"Inventor User Defined Properties\").Item(\"Drawing #\")\n            If Err.Number <> 0 Or oDrawingNumProperty.Value = \"\" Then 'Failed to get the property, which means it doesn't exist, or property is blank.\n                'If there's no 'Drawing #' assigned, then skip to the next item\n                GoTo NextFor\n            End If\n            \n            'Set the file property that contains the \"Comments\" to blank\n            Set oWebLinkProperty = oCompDef.Document.PropertySets.Item(\"Design Tracking Properties\").Item(\"Catalog Web Link\")\n            'Make the property blank\n            oWebLinkProperty.Value = \"\"\n\n            'Recursively iterate child rows if present.\n            If Not oRow.ChildRows Is Nothing Then\n                Call ResetBOMRowWebLinkProperty(oRow.ChildRows)\n            End If\n        End If\nNextFor:\n    Next\nEnd Sub"], "author": "jaredwiens"},
{"created at": [], "solution Title": "\n                        Re: API - Creating sketch with constraints\n                    ", "solution": ["' Create collection for points\n        Dim oPoints(0 To 1) As SketchPoints", "' Create collection for points\n        Dim oPoints(0 To 1) As SketchPoint"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Model tree display\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Isolating Components for Drawings\n                    ", "solution": [], "author": "bnwtech"},
{"created at": [], "solution Title": "\n                        Re: Default View Label Characters\n                    ", "solution": ["Public Sub TestViewLabel()\n    Dim i As Integer\n    For i = 1 To 50\n        Dim lbl As String\n        Dim oldLabel As String\n        oldLabel = lbl\n        lbl = GetNextLabel(lbl)\n        \n        Debug.Print oldLabel & \" = \" & lbl\n    Next\nEnd Sub\n\n\nPublic Function GetNextLabel(Optional ByVal ExistingLabel As String = \"\") As String\n    If ExistingLabel = \"\" Then\n        GetNextLabel = \"A\"\n    Else\n        ExistingLabel = UCase(Trim(ExistingLabel))\n        \n        Dim charCount As Integer\n        charCount = Len(ExistingLabel)\n        \n        Dim charString As String\n        charString = Mid(ExistingLabel, 1, 1)\n        \n        Dim charCode As Integer\n        charCode = Asc(charString)\n        Select Case charString\n            Case \"H\", \"N\", \"P\", \"R\", \"W\"\n                ' Special case for characters before I, O, Q, S, and X. Increment\n                ' by two in those cases to skip those letters which aren't to be\n                ' in the ISO standard.\n                charCode = charCode + 2\n            Case \"Y\"\n                ' Special case for the character before Z, so that it will start\n                ' over at A but have an additional character.\n                charCode = 65\n                charCount = charCount + 1\n            Case Else\n                charCode = charCode + 1\n        End Select\n        \n        ' Build the label string.\n        Dim labelChar As String\n        labelChar = Chr(charCode)\n        GetNextLabel = String(charCount, labelChar)\n    End If\nEnd Function"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: AddPopUp to LinearMarkingMenu fails\n                    ", "solution": ["Public Shared oAssemblyOpenCmdBar As CommandBar", "If firstTime Then\n    AddInGlobal.oAssemblyOpenCmdBar = AddInGlobal.oInvApplication.UserInterfaceManager.CommandBars.Add(\"Open\", \"CmdBarAssemblyOpen\", _\n                                           CommandBarTypeEnum.kPopUpCommandBar, AddInGlobal.ClassId)\n    AddInGlobal.oAssemblyOpenCmdBar.Controls.AddButton(AddInGlobal.oAssemblyOpenBaseCompButton)\n    AddInGlobal.oAssemblyOpenCmdBar.Controls.AddButton(AddInGlobal.oAssemblyOpenSubsituteButton)\nEnd If", "AddHandler oUInputEvents.OnContextMenu, AddressOf UserInputEvents_OnContextMenu", "Private Sub UserInputEvents_OnContextMenu(ByVal SelectionDevice As SelectionDeviceEnum, ByVal AdditionalInfo As NameValueMap, ByVal CommandBar As CommandBar)\n    Try\n       For Each oCommandCtrl As CommandBarControl In CommandBar.Controls\n           If oCommandCtrl.InternalName = \"CMxSubstituteCmd\" Then\n              ' Add button and seperator to context menu\n               CommandBar.Controls.AddButton(AddInGlobal.oSubstitutePartButton.ButtonDef, oCommandCtrl.Index - 1)\n               CommandBar.Controls(oCommandCtrl.Index - 1).GroupBegins = True\n               ' Remove original command\n               oCommandCtrl.Delete()\n           ElseIf oCommandCtrl.InternalName = \"AssemblyOpenComponentCmd\" Then\n               ' Add commandbar\n               CommandBar.Controls.AddPopup(AddInGlobal.oAssemblyOpenCmdBar, oCommandCtrl.Index)\n               ' Remove original command\n               oCommandCtrl.Delete()\n           End If\n       Next\n    Catch\n       Return\n    End Try\n End Sub"], "author": "ewiggers"},
{"created at": [], "solution Title": "\n                        Re: Weird error in rule\n                    ", "solution": [], "author": "melle.oosterman"},
{"created at": [], "solution Title": "\n                        Re: Ilogic check parts list name\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\noSheet = oDrawDoc.ActiveSheet\n\nDim eachpl As PartsList\nFor Each eachpl In oSheet.PartsLists\n    If eachpl.Title = \"Ferneto Sheet Metal (ISO)\" Then\n        Call MessageBox.Show(\"You must change the Parts List to Ferneto Sheet Metal (ISO)\", \"Warning\")\n    End If\nNext\n\n "], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Export part flatpattern or selected face add in.\n                    ", "solution": [], "author": "woosthuizen"},
{"created at": [], "solution Title": "\n                        Re: IV 2014, VS 2015: Unable to install Developer Tools\n                    ", "solution": [], "author": "Mark.Lancaster"},
{"created at": [], "solution Title": "\n                        Re: Ilogic not behaving as expected\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Accessing structured BOM type though VBA for excel\n                    ", "solution": [], "author": "Alex.booth"},
{"created at": [], "solution Title": "\n                        Re: Add custom Iproperty to general note 2\n                    ", "solution": ["'", "Query Formatted Text", "\n\n", "Imports", " ", "System", ".", "Windows", ".", "Forms", "\n\n", "Sub", " ", "Main", "()", "\n\n", "Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oSelectSet", " ", "As", " ", "SelectSet", " \n", "oSelectSet", " ", "=", " ", "oDoc", ".", "SelectSet", " \n\n", "If", " ", "oSelectSet", ".", "Count", " ", "=", " ", "0", "\n    ", "MsgBox", "(", "\"", "Select a textbox in the sketch definition then run the rule!", "\"", ")", "\n    ", "Exit Sub", "\n", "Else", " ", "If", " ", "oSelectSet", ".", "Count", " ", "=", " ", "1", "\n    ", "oBox", " ", "=", " ", "oSelectSet", ".", "Item", "(", "1", ")", "\n", "Else", "\n    ", "Exit Sub", "\n", "End", " ", "If", "    \n\n", "Clipboard", ".", "SetText", "(", "oBox", ".", "FormattedText", ")", "\n", "MsgBox", "(", "oBox", ".", "Text", " ", "&", " ", "\"", " - ", "\"", " ", "&", " ", "oBox", ".", "FormattedText", ")", "\n\n", "End Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Need help with a strange iLogic problem.\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Surface area of a solid body with iLogic\n                    ", "solution": ["Dim oDoc as PartDocument = ThisDoc.Document\nDim oDef as PartComponentDefinition = oDoc.COmponentDefinition\n\nDim st As String =\"\"\nFor Each oSurfBody As SurfaceBody In oDef.SurfaceBodies\n    \n    st &= vbNewLine & oSurfBody.Name & vbNewLine\n    Dim volume As Double = oSurfBody.Volume(0.001)\n    st &= \"volime = \" & volume & vbNewLine    \n    \n    Dim area As Double = 0.0\n    For Each oFace As Face In oSurfBody.faces\n        Dim oEval As SurfaceEvaluator = oFace.Evaluator\n        area = area + oEval.Area\n    Next\n    st &= \"area = \" & area & vbNewLine\n\nNext\n\nBeep\nMsgBox(st)"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: ilogic - printing to folder based on filename\n                    ", "solution": ["'enable types that are contained in the given namespace to be referenced directly\nImports System.IO\n\niLogicVb.UpdateWhenDone = True\n\n'define the active drawing\nDim oDoc As Document\noDoc = ThisApplication.ActiveEditDocument\n\nDim oName2 As String\noName2 = Left(oDoc.DisplayName, 6)  'assumes project number in file name is 6 chrs\n\nDim sRootDrive As String \nsRootDrive = \"G:\\\"\n\n'expects to find only one\nDim dirs As String()\nDim dir As String \t\nDim oTargetFolder As String\nTry\n\t'look for all directories starting with project number using * as a wildcard\n\t'dirs = Directory.GetDirectories(path to search, what to search for)\n\tdirs = Directory.GetDirectories(sRootDrive, oName2 & \"*\")\n\t'get subdirectory and set variable\n\tFor Each dir In dirs\n\t\tIf dir.Contains(oName2) Then\n\t\toTargetFolder = dir\n\t\tEnd If\n\tNext\t\t\nCatch\n\toTargetFolder = \"\" \nEnd Try\n\n'catch empty variable\nIf oTargetFolder = \"\" Then\nMessageBox.Show(\"Path for PDF could not be found.\", \"iLogic\")\nReturn\nElse\n\n'code to save PDF file here\nOPDFPath = oTargetFolder & \"\\Documents\\PDF Documents\\\"\nMessageBox.Show(\"PDF saved at: \" & vbLf &  OPDFPath, \"iLogic\")\n\nEnd If "], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic create virtual components based on itens Qty in the assembly\n                    ", "solution": ["'define sComponent &  sVirtPart and the rest \n'of this code should work as written\n\n'define assembly component to count\nDim sComponent As String\nsComponent = \"BRACKET\" & \":\"\n\n'define virtual component to create\nDim sVirtPart As String\nsVirtPart = \"Bracket Shim\" \n\n'---------------------------\n\n'count chars in sComponent\nDim oCnt As Integer = 0\nFor Each c As Char In sComponent\n\toCnt += 1\nNext\n\n'count chars in sVirtPart\nDim oCnt2 As Integer = 0\nFor Each c As Char In sVirtPart\n\toCnt2 += 1\nNext\n\nDim oAssyDoc As AssemblyDocument\noAssyDoc = ThisApplication.ActiveDocument\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = oAssyDoc.ComponentDefinition\nDim oOccs As ComponentOccurrences\noOccs = oAssyDoc.ComponentDefinition.Occurrences\nDim iQTY As Integer\niQTY = 0\n\n'iterate through all Of the occurrences in the Assembly\nFor Each oOcc In oOccs\n'Trace.WriteLine(oOcc.Name, \"iLogic\") 'debug \n\tIf Left(oOcc.Name, oCnt) = sComponent Then \n   \t\tiQTY += 1 'count the components\n   \tEnd If\n\n    'look at only virtual components\n    If TypeOf oOcc.Definition Is VirtualComponentDefinition Then\n        'find and delete existing virtual parts by name\n        If Left(oOcc.Name,oCnt2 +1) = sVirtPart & \":\" Then\n\t\t'delete existing virtual parts if name matches\n        oOcc.delete\n\t\tEnd If\n    End If\nNext\n   \nDim identity As Matrix\nidentity = ThisApplication.TransientGeometry.CreateMatrix\n  \n'create first instance of the virtual part\nDim virtOcc As ComponentOccurrence\nvirtOcc = oOccs.AddVirtual(sVirtPart, identity)\n\n'add next instance starting at instance2 (if applicable)\nDim index As Integer \nindex = 2\nDo While index <= iQTY\noOccs.AddByComponentDefinition(virtOcc.Definition, identity) \nindex += 1\nLoop\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Custom View Label\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic-Driven Subassembly not Updating in Ilogic-Driven Assembly\n                    ", "solution": [], "author": "Holgarsson"},
{"created at": [], "solution Title": "\n                        Re: ilogic Suppress features and have default feature\n                    ", "solution": [], "author": "solson"},
{"created at": [], "solution Title": "\n                        Re: Hundreds of Extrudes at Once\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic help to create multple MultiValue.List from an Excel\n                    ", "solution": ["' Set the list of \"SIZE\" parameter", "MultiValue.SetList(\"SIZE\", \"SIZE-AA\", \"SIZE-BB\", \"SIZE-CC\")\n", "' Determine the SIZE value", "\nIf SIZE = \"SIZE-AA\" Then\n\t", "' Load values from excel", "        GoExcel.TitleRow = 2", "        ", "' Fill the \"MODEL\" parameter with found values", "\n\tMultiValue.List(\"MODEL\") = GoExcel.CellValues(\"filename.xls\", \"Sheet1\", \"A3\", \"A5\")\nElseIf SIZE = \"SIZE-BB\" Then\n\tGoExcel.TitleRow = 7\n\tMultiValue.List(\"MODEL\") = GoExcel.CellValues(\"filename.xls\", \"Sheet1\", \"A8\", \"A10\")\nElseIf SIZE = \"SIZE-CC\" Then\n\tGoExcel.TitleRow = 12\n\tMultiValue.List(\"MODEL\") = GoExcel.CellValues(\"filename.xls\", \"Sheet1\", \"A13\", \"A15\")\nEnd If\n\nDim oRow As Integer", "' Pick the value from \"MODEL\" parameter", "\nSelect Case Parameter(\"MODEL\")\n    ", "' Set searched row, according to \"MODEL\" parameter value", "    Case \"AA100\": oRow = 3\n    Case \"AA110\": oRow = 4\n    Case \"AA120\": oRow = 5\n    Case \"BB100\": oRow = 8\n    Case \"BB110\": oRow = 9\n    Case \"BB120\": oRow = 10\n    'And so on for C...\nEnd Select\n", "' Fill the \"SIZE-VALUES\" parameter with vaues from the excel table,", "' using the previously set \"oRow\" variable with combination of columns \"B\" and \"E\"", "\nMultiValue.List(\"SIZE-VALUES\") = GoExcel.CellValues(\"filename.xls\", \"Sheet1\", \"B\" & oRow, \"E\" & oRow)", "Sub Main()\n    ", "' Check if the parameter \"SIZE\" does exist and has valid value. End this makro if not.", "    If CheckParam(\"SIZE\") = \"\" Then\n        MultiValue.SetList(\"SIZE\", \"SIZE-AA\", \"SIZE-BB\", \"SIZE-CC\")", "        MsgBox(\"Please select value for SIZE parameter first.\")", "        Exit Sub", "    End If", "    Dim Row As Integer", "    ", "' Create new object table to store the excel table in", "\n    Dim oMyValues(9, 5) As Object ", "' Set the range for values (9 rows, 5 columns)", "    ", "' Open excel document", "\n    GoExcel.Open(\"filename.xls\", \"Sheet1\")\n    Row = 1", "    ", "' Load all values from the excel table", "\n    For j = 3 To 5 ", "' Set the rows for AA... values", "\n        GetValues(oMyValues, Row, j)\n        Row = Row + 1\n    Next\n    For j = 8 To 10 ", "' Set the rows for BB... values", "\n        GetValues(oMyValues, Row, j)\n        Row = Row + 1\n    Next\n    For j = 13 To 15 ", "' Set the rows for CC... values", "\n        GetValues(oMyValues, Row, j)\n        Row = Row + 1\n    Next", "    ", "' Close excel table", "\n    GoExcel.Close\n    Dim oModel As String\n    oModel = Parameter(\"SIZE\")", "    ", "' Create new array list, taht will be used to fill the \"SIZE_VALUES\" parameter", "\n    Dim MyArrayList As New ArrayList", "    ", "' Go throught each of rows in previously created object table", "    ' and check if any of the rows match our needs", "\n    For i = 1 To UBound(oMyValues, 1)\n\tIf oMyValues(i, 1) = oModel Then\n\t    MyArrayList.Add(oMyValues(i, 2))\n            MyArrayList.Add(oMyValues(i, 3))\n            MyArrayList.Add(oMyValues(i, 4))\n            MyArrayList.Add(oMyValues(i, 5))\n        End If\n    Next", "    ", "' Check if the parameter \"SIZE_VALUES\" does exist", "\n    NewParameter = CheckParam(\"SIZE_VALUES\")", "    ", "' Set the values for \"SIZE_VALUES\" parameter", "\n    MultiValue.List(\"SIZE_VALUES\") = MyArrayList\nEnd Sub\n", "' Sub-function used to load values from the excel table", "\nPrivate Sub GetValues(oMyValues As Object, Row As Integer, j As Integer)\n    oMyValues(Row, 1) = GoExcel.CellValue(\"A\" & j)\n    oMyValues(Row, 2) = GoExcel.CellValue(\"B\" & j)\n    oMyValues(Row, 3) = GoExcel.CellValue(\"C\" & j)\n    oMyValues(Row, 4) = GoExcel.CellValue(\"D\" & j)\n    oMyValues(Row, 5) = GoExcel.CellValue(\"E\" & j)\nEnd Sub\n", "' Function used to check if the parameter exists and create it if not", "\nPrivate Function CheckParam(oParaName As String) As String ", "' Return value as string", "\n   oParameters = ThisApplication.ActiveDocument.ComponentDefinition.Parameters.UserParameters\n   Try", "      Parameter(oParaName) = Parameter(oParaName)", "      CheckParam = Parameter(oParaName)\n   Catch\n      oParameter = oParameters.AddByValue(oParaName, \"\", UnitsTypeEnum.kTextUnits)", "      CheckParam = \"\"\n   End Try\nEnd Sub", "Try\n    Parameter(\"SIZE\") = Parameter(\"SIZE\")", "    Parameter", "(", "\"", "SIZE", "\"", ")", " ", "=", " ", "MultiValue", ".", "List", "(", "\"", "SIZE", "\"", ")", ".", "Item", "(", "1", ")", "Catch\n    MsgBox(\"The parameter 'SIZE' doesn't exist\")\nEnd Try", "Try\n    ", "' Atempt to read the parameter \"SIZE\"", "    Parameter(\"SIZE\") = Parameter(\"SIZE\")", "    ' If it doesn't throw an error then it will pass here,", "    ' so we can pick the first item from the list in \"SIZE\" parameter", "\n    Parameter(\"SIZE\") = MultiValue.List(\"SIZE\").Item(", "0", ")\nCatch\n", "    ' If the reading of the parameter fails, the \"Try\" command will send us here", "    ' As the reading of the parameter failed we can assume it doesn't exist", "    MsgBox(\"The parameter 'SIZE' doesn't exist\")\nEnd Try"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: 2 different dimensions?\n                    ", "solution": [], "author": "mwighton"},
{"created at": [], "solution Title": "\n                        Re: iLogic Place sketch symbol with prompted entry\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic 'All Visible' rule\n                    ", "solution": ["trigger = iTrigger()\nDim oDoc As Document\noDoc = ThisDoc.Document\nDim comp As ComponentOccurrencesEnumerator\ncomp =oDoc.ComponentDefinition.Occurrences.AllLeafOccurrences\nDim Occ As ComponentOccurrence\nFor Each Occ In comp\n    Occ.Visible = True\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: VBA Modless form in function\n                    ", "solution": ["Public Sub TestModelessForm()\n    Dim testClass As New clsModelessFormTest\n    Dim state As Boolean\n    Call testClass.GetCheckedState(state)\n    \n    MsgBox \"Checked state is: \" & state\nEnd Sub", "Private WithEvents m_formTest As frmModelessTest\nPrivate m_finished As Boolean\nPrivate m_checkedState As Boolean\n\nPrivate Sub Class_Initialize()\n    m_finished = False\nEnd Sub\n\nPublic Sub GetCheckedState(ByRef checkedState As Boolean)\n    Set m_formTest = New frmModelessTest\n    m_formTest.Show vbModeless\n    \n    Do While Not m_finished\n        DoEvents\n    Loop\n    \n    checkedState = m_checkedState\nEnd Sub\n\nPrivate Sub m_formTest_FormFinished(isChecked As Boolean)\n    m_checkedState = isChecked\n    m_finished = True\nEnd Sub\n", "Public Event FormFinished(isChecked As Boolean)\n\nPrivate Sub cmdOk_Click()\n    Dim isChecked As Boolean\n    If Me.chkTest.value = True Then\n        isChecked = True\n    Else\n        isChecked = False\n    End If\n        \n    RaiseEvent FormFinished(isChecked)\n\n    Unload Me\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic to change iproperty\n                    ", "solution": ["Sub Main()\n   Dim oDoc As Document\n   oDoc = ThisApplication.ActiveDocument\n   Dim comps As SelectSet\n   Dim comp As ComponentOccurrence\n   comps = oDoc.SelectSet\n   ", "'If there are selected components we can do something, otherwise we're done", "\n   If comps.count = 0 Then Exit Sub\n   Dim aDoc As DocumentsEnumerator\n   aDoc = oDoc.AllReferencedDocuments\n   Dim iDoc As Document\n   Dim cName As String\n   Dim cTS As String\n   Dim sTS As String\n   Dim FNP As Long\n   Dim cFNP As Long\n   Dim docFN As String\n   For Each iDoc In aDoc\n      sTS = iDoc.FullFileName\n      FNP = InStrRev(sTS, \"\\\", - 1)\n      docFN = Mid(sTS, FNP + 1, Len(sTS) - FNP)\n      For Each comp In comps\n         cTS = comp.Name\n         cFNP = InStrRev(cTS, \":\", - 1)\n\t     cName = Left(cTS, cFNP - 1)\n         If cName = Left(docFN, Len(docFN)-4) Then\n            ", "'Set iProperty in each of the selected parts in assembly", "\n            ", "iProperties.Value(docFN, \"Custom\", \"", "Mark", "\") = \"", "this part is now marked", "\"", "\n         End If\n      Next\n   Next\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Run addin automatically once Inventor has fully opened\n                    ", "solution": [], "author": "harrykeeninvent"},
{"created at": [], "solution Title": "\n                        Re: Section Arrows Direction\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: iLogic printing to DXF\n                    ", "solution": ["Question = MessageBox.Show(\"If you closed this rule but don't want to run it now, click cancel.\",\"Attention\",MessageBoxButtons.OKCancel,MessageBoxIcon.Exclamation,MessageBoxDefaultButton.Button2)\nIf Question = vbOK Then\nMessageBox.Show(\"Rule will continue\", \"CADsherpa\")\n'***** DXF ***** use the custom rule copy Iprops from model to drawing to get the Part Number on the drawing.'***** save folders \noPath = ThisDoc.WorkspacePath\nDim oDocument As Document\noDocument = ThisDoc.Document\nDim oFileName As String\noFileName = ThisDoc.FileName(False)\nDim oPN As String\noPN = iProperties.Value(\"Project\", \"Part Number\")\n\nDim oFolderDXF As String\noFolderDXF = oPath & \"\\output\\DXF\"\noDataMediumDXF = ThisApplication.TransientObjects.CreateDataMedium\noDXFAddIn = ThisApplication.ApplicationAddIns.ItemById _\n(\"{C24E3AC4-122E-11D5-8E91-0010B541CD80}\")\n\n' Create the saving folder if it doesn't exist\nIf Not System.IO.Directory.Exists(oFolderDXF) Then\n    System.IO.Directory.CreateDirectory(oFolderDXF)\nEnd If\n\n' Create transaction context\nDim oContext As TranslationContext\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\nDim oOptions As NameValueMap\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n' Check whether the translator has 'SaveCopyAs' options\nIf oDXFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n    oOptions.Value(\"DwgVersion\") = 25\n    Dim strIniFile As String\n    strIniFile = \"C:\\Users\\kasutaja\\Documents\\Inventor\\MY support files\\AI2012_to_DXF2004_NotAllSheets.ini\"\n\n    ' Create the name-value that specifies the ini file to use.\n    oOptions.Value(\"Export_Acad_IniFile\") = strIniFile\nEnd If\n\nDim oCurrentNumber As Sheet\noCurrentNumber = ThisApplication.ActiveDocument.ActiveSheet\n    \n' Iterate through the sheets\nDim oSheet As Sheet\nFor Each oSheet In ThisApplication.ActiveDocument.Sheets\n    oSheet.Activate\n    If oSheet.ExcludeFromPrinting = False Then\n        ' Run DXF code here\n        Dim oSheetName As String\n        oSheetName = oSheet.Name", "        oSheetName = Replace(oSheetName, \":\", \"-\")", "        MessageBox.Show(\"I found variable: \" & oSheetName , \"Info\")\n        oDataMediumDXF.FileName = oFolderDXF & \"\\\" & oFileName & \" - \" & oSheetName & \".dxf\"  '***** this gives files with 0KB and no extention\n        'oDataMediumDXF.FileName = oFolderDXF &\"\\\"& oPN & \"--\" & oFileName & \".dxf\" '***** this gives a .dxf that is good but every sheet overwrites the previous\n        oDXFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMediumDXF)\n    End If\nNext\n\n' Return to original active sheet\noCurrentNumber.Activate\n\nsSpace = \"\"\nsDots = \"              ----------        \"\nMessageBox.Show(\"Drawing is printed as PDF and saved in : \" & oFolderPDF _\n& vbLf & \"\"& sDots _\n& vbLf & \"\"& sSpace _\n& vbLf & \"Drawing is printed as DXF and saved in : \"& oFolderDXF _\n& vbLf & \"\"& sDots _\n& vbLf & \"\"& sSpace _\n& vbLf & \" Click OK to save drawing and close this box. \"   , \"DONE!\")\nThisDoc.Save\n\nElse\n\nGoto  EndRule\n\nEnd If\n\n\nEndRule:"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Problems debugging with multiple addins containing StandardAddInServer.vb cl\n                    ", "solution": ["<", "clrClass", "clsid", "=", "\"", "{E6EA2F87-0494-4C0D-9E05-63DEB55637FB}", "\"", " ", "progid", "=", "\"", "SimpleAddIn.StandardAddInServer", "\"", "threadingModel", "=", "\"", "Both", "\"", "name", "=", "\"", "SimpleAddIn.SimpleAddIn.StandardAddInServer", "\"", "runtimeVersion", "=", "\"\"", "></", "clrClass", ">"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Select XY plane of activeeditobject\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Printing Pdfs\n                    ", "solution": [], "author": "alanrichardson"},
{"created at": [], "solution Title": "\n                        Re: Save Excel to the DXF folder\n                    ", "solution": ["'first we define where we want to save it", "Dim xPath As String = \"", "C:\\NewPath\\TargetName.xlsx", "\"\nexcelApp = CreateObject(\"Excel.Application\")\nexcelApp.Visible = False\nexcelApp.DisplayAlerts = false", "' here define where to take the original table from", "excelWorkbook = excelApp.Workbooks.Add(Template: = \"", "C:\\Parts\\MyAwesomeExcelTable.xlsx", "\")", "' It can even use name and path of the assembly or part:", "'", "ThisDoc.Path & \"\\\" & ThisDoc.FileName(False) & \".xlsx\"\nexcelWorkbook.SaveAs(xPath)\nexcelWorkbook.Close", "Dim oFS As Object\noFS = CreateObject(\"Scripting.FileSystemObject\")\nDim oFile As String\nDim oTarget As String\n", "' First we define source file", "\noFile = \"C:\\Path\\01.xlsx\"\n", "' And now target file", "\noTarget = \"C:\\NewPath\\02.xlsx\"\noFS.CopyFile( oFile, oTarget)\noFS = Nothing\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic Code to flip hole direction in an assembly\n                    ", "solution": [], "author": "BromanSillito"},
{"created at": [], "solution Title": "\n                        Re: Visual Studio Versions and Inventor Interop\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Delete nodes from part browser\n                    ", "solution": [" Sub DeleteMyFeatureAndEverythingBelow()\n\n        Dim BrsPanes As BrowserPanes = _invApp.ActiveDocument.BrowserPanes\n        Dim BrsPan As Inventor.BrowserPane = (From _Pan As BrowserPane In BrsPanes Where _Pan.TreeBrowser Select _Pan).FirstOrDefault\n        Dim DoDelete As Boolean = False\n        Dim ObjCollection As ObjectCollection = _invApp.TransientObjects.CreateObjectCollection()\n\n        For Each wkpln As WorkPlane In _CompDef.WorkPlanes\n            If wkpln.Name = \"My Feature\" Then\n                wkpln.SetEndOfPart(True)\n                Exit For\n            End If\n        Next\n\n        Dim godelete As Boolean = True\n\n        While godelete\n            Dim _node As BrowserNode = BrsPan.TopNode.BrowserNodes.Item(BrsPan.TopNode.BrowserNodes.Count)\n            If _node.BrowserNodeDefinition.Label = (\"End of Part\") Then\n                godelete = False\n            Else\n                Dim objtest = _node.NativeObject\n                ObjCollection.Add(objtest)\n                _CompDef.DeleteObjects(ObjCollection)\n                ObjCollection.Clear()\n            End If\n        End While\n\n        For Each obody As SurfaceBody In _CompDef.SurfaceBodies\n            obody.Visible = True\n        Next\n    End Sub"], "author": "DavidTruyens"},
{"created at": [], "solution Title": "\n                        Re: File Name/iLogic\n                    ", "solution": [], "author": "JamieS"},
{"created at": [], "solution Title": "\n                        Re: ilogic to change selected dims to basic tol.\n                    ", "solution": ["' Set a reference to the select set of the active document.\nDim oDoc As DrawingDocument\noDoc = ThisApplication.ActiveDocument\n\n' Find all selected occurrences and add them to an ObjectCollection.\nDim oDrawingDims As DrawingDimension\nDim oSSet As SelectSet = oDoc.SelectSet\n'Loop through all dimensions\nFor Each oDrawingDims In oSSet\n'set the Tolerance Method'oDrawingDims.Tolerance.SetToDefault\noDrawingDims.Tolerance.SetToBasic \n'oDrawingDims.Tolerance.SetToReference\nNext  "], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: Exclude Assembly Constraint\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Can not access SheetMetalComponentDefinition if part is based on derived par\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to add volume to user parameter, and create the param it its not ther\n                    ", "solution": ["On Error Resume Next\nParameter.Quiet = True\nThisApplication.CommandManager.ControlDefinitions.Item(\"AppUpdateMassPropertiesCmd\").Execute\noMyParameter = ThisApplication.ActiveDocument.ComponentDefinition.Parameters.UserParameters\ndoc = ThisDoc.Document\nvolume = iProperties.Volume\noUOM = doc.UnitsOfMeasure\nsVolumeUnit = oUOM.GetStringFromType(11266) & \"^3\"\nDim strVolumeft As String = oUOM.ConvertUnits(volume, sVolumeUnit, \"ft^3\")\n\nIf Parameter.Param(\"Volume_cuft\")=\"\" Then\n\tParameter.Param(\"Volume_cuft\").Expression = Round(Val(strVolumeft),2).tostring\nElse\n\tParameter=oMyParameter.AddByExpression(\"Volume_cuft\", \"3\", \"ft^3\")\n\tParameter.Param(\"Volume_cuft\").Expression = Round(Val(strVolumeft),2).tostring\nEnd If"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Use Inventor Vault Add-in through Inventor API\n                    ", "solution": ["Imports Connectivity.InventorAddin.EdmAddin\n\t \n\t Public Sub SetupUserInterface(ByVal addInSiteObject As Inventor.ApplicationAddInSite, ByVal firstTime As Boolean, ClientID As String)\n\t\t\t\n\t\t\t", "' rest of the code should be left in here for the setupUserInterface\n\t\t\t'to get connection you should use the edmAddin ServerName Vault Name and username with the password you have logged in with.", "\t\t\t\n           ", " If firstTime And...................................................................", "\t\t\n\t\t\t", "\t    Dim strVaulrServerName As String = Connectivity.InventorAddin.EdmAddin.EdmSecurity.Instance.GetEdmLoginPreferences.Server\n            Dim strVaultName As String = Connectivity.InventorAddin.EdmAddin.EdmSecurity.Instance.GetEdmLoginPreferences.VaultName\n            Dim strVaultUserName As String = Connectivity.InventorAddin.EdmAddin.EdmSecurity.Instance.GetEdmLoginPreferences.UserName\n            Dim strVaultPassword As String = Connectivity.InventorAddin.EdmAddin.EdmSecurity.Instance.GetEdmLoginPreferences.Password\n\t\t\t\n\t\t\t Dim results As VDF.Vault.Results.LogInResult\n\n            results = VDF.Vault.Library.ConnectionManager.LogIn(strVaulrServerName, strVaultName, strVaultUserName, strVaultPassword, VDF.Vault.Currency.Connections.AuthenticationFlags.Standard, Nothing)\n\n\n            Dim conn As VDF.Vault.Currency.Connections.Connection = Nothing\n\n            If results.Success Then\n\n                conn = results.Connection\n                \n\n            End If\n\tend sub\t\t"], "author": "bradeneurope|Ar"},
{"created at": [], "solution Title": "\n                        Re: Copy Custom Parameters from one .ipt to Multiple .ipt's (Existing Files)\n                    ", "solution": [], "author": "RockyBrown4134"},
{"created at": [], "solution Title": "\n                        Re: Co-planar faces\n                    ", "solution": ["Public Sub SelectCoplanarFaces()\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    If Not TypeOf oDoc.SelectSet(1) Is Face Then\n        MsgBox \"A face must be selected.\"\n        Exit Sub\n    End If\n    \n    Dim oFace As Face\n    Set oFace = oDoc.SelectSet(1)\n    \n    If Not oFace.SurfaceType = kPlaneSurface Then\n        MsgBox \"A Flat face must be selected.\"\n        Exit Sub\n    End If\n    \n       \n       \n    Dim params(1) As Double\n    params(0) = 0.5\n    params(1) = 0.5\n    \n    ' Get point on surface at param .5,.5\n    Dim points(2) As Double\n    Call oFace.Evaluator.GetPointAtParam(params, points)\n    \n    ' Create point object\n    Dim oPoint As Point\n    Set oPoint = ThisApplication.TransientGeometry.CreatePoint(points(0), points(1), points(2))\n        \n    ' Get normal at this point\n    Dim normals(2) As Double\n    Call oFace.Evaluator.GetNormal(params, normals)\n    \n    ' Create normal vector object\n    Dim oNormal As Vector\n    Set oNormal = ThisApplication.TransientGeometry.CreateVector(normals(0), normals(1), normals(2))\n    \n    \n    Dim RefPlane As Plane\n    Set RefPlane = ThisApplication.TransientGeometry.CreatePlane(oPoint, oNormal)\n    \n    Dim oPartDoc As PartDocument\n    Set oPartDoc = ThisApplication.ActiveDocument\n    \n    Dim bodies As SurfaceBodies\n    Set bodies = oPartDoc.ComponentDefinition.SurfaceBodies\n\n    Dim BodyFace As Face\n    Dim PlaneB As Plane\n    \n    For Each Body In bodies\n\n        For Each BodyFace In Body.faces\n         If BodyFace.SurfaceType = kPlaneSurface Then\n            Call BodyFace.Evaluator.GetPointAtParam(params, points)\n            ' Create point object\n            Set oPoint = ThisApplication.TransientGeometry.CreatePoint(points(0), points(1), points(2))\n            Call oFace.Evaluator.GetNormal(params, normals)\n            Set oNormal = ThisApplication.TransientGeometry.CreateVector(normals(0), normals(1), normals(2))\n            Set PlaneB = ThisApplication.TransientGeometry.CreatePlane(oPoint, oNormal)\n            'Check if they are co-planar\n            If PlaneB.IsCoplanarTo(RefPlane) Then\n                Call oPartDoc.SelectSet.Select(BodyFace)\n            End If\n        End If\n        Next\n    Next\n\nEnd Sub"], "author": "Mario-Villada"},
{"created at": [], "solution Title": "\n                        Re: Excel VBA to import iProperties in a celll?\n                    ", "solution": ["'Requires Apprentice Server Availability\n'Add reference to Inventor Object Library Interop\n\nOption Compare Text\n\nPublic oList As Collection\n\nSub UpdateFittingList()\n\n    Dim FSO As New FileSystemObject\n    \n    ActiveWorkbook.ActiveSheet.Rows(\"3:\" & Rows.Count).Clear\n\n    Dim apprentice As Inventor.ApprenticeServerComponent\n    Set apprentice = New Inventor.ApprenticeServerComponent\n    \n    Dim apprenticeDoc As Inventor.ApprenticeServerDocument\n\n    Dim oFolderPath As String\n    oFolderPath = \"X:\\CAD Files\\\"\n    \n    Dim oFolder As Folder\n    Set oFolder = FSO.GetFolder(oFolderPath)\n    \n    Set oList = Nothing\n    \n    If oList Is Nothing Then\n        Set oList = New Collection\n    End If\n        \n    Call FolderList(oFolder)\n    \n    Dim i As Integer\n    i = 2\n    \n    Dim vFolder\n    Dim aFolder As Folder\n    \n    For Each vFolder In oList\n    \n    Set aFolder = FSO.GetFolder(vFolder)\n    \n    If aFolder.Files.Count = 0 Then\n    Else\n            \n        \n    For Each oFile In aFolder.Files\n\n        If oFile Like \"*.ipt\" Or oFile Like \"*.iam\" And Not oFile Like \"*Old*\" Then\n            Set apprenticeDoc = apprentice.Open(oFile)\n    \n            Dim InvDocDTP As Inventor.PropertySet\n            Set InvDocDTP = apprenticeDoc.PropertySets.Item(\"Design Tracking Properties\")\n            \n            Dim InvDocISI As Inventor.PropertySet\n            Set InvDocISI = apprenticeDoc.PropertySets.Item(\"Inventor Summary Information\")\n            \n            Dim InvDocIDSI As Inventor.PropertySet\n            Set InvDocIDSI = apprenticeDoc.PropertySets.Item(\"Inventor Document Summary Information\")\n            \n            ActiveWorkbook.ActiveSheet.Cells(i + 1, 1) = FSO.GetFileName(oFile)\n            ActiveWorkbook.ActiveSheet.Cells(i + 1, 2) = InvDocDTP.Item(\"Stock Number\").Value\n            ActiveWorkbook.ActiveSheet.Cells(i + 1, 3) = InvDocIDSI.Item(\"Category\").Value\n            ActiveWorkbook.ActiveSheet.Cells(i + 1, 4) = InvDocISI.Item(\"Keywords\").Value\n            ActiveWorkbook.ActiveSheet.Cells(i + 1, 5) = InvDocDTP.Item(\"Description\").Value\n            ActiveWorkbook.ActiveSheet.Cells(i + 1, 6) = oFile\n            \n            Call apprenticeDoc.PropertySets.FlushToFile\n            \n            Set apprenticeDoc = Nothing\n            i = i + 1\n        End If\n    Next\n    End If\n    Next\n \n\n    Call apprentice.Close\n    Set apprentice = Nothing\nEnd Sub\n   \nPublic Sub FolderList(oFolder As Folder)\n\noList.Add (oFolder)\n\nIf oFolder.SubFolders.Count = 0 Then\n    Exit Sub\nEnd If\n\nDim xFolder As Folder\n\nFor Each xFolder In oFolder.SubFolders\n    If xFolder.Path Like \"*Old*\" Or xFolder.Path Like \"*Legacy*\" Then\n        'MsgBox (xFolder.Path)\n    Else\n            Call FolderList(xFolder)\n    End If\nNext\n\nEnd Sub", "Private Sub MakeThumbnailColumn(oStartRow As Integer, oTColumn As Integer, oFileNameColumn As Integer)\n    Dim apprentice As Inventor.ApprenticeServerComponent\n    Set apprentice = New Inventor.ApprenticeServerComponent\n    Dim apprenticeDoc As Inventor.ApprenticeServerDocument\n    \n    \n    oLastRow = ws.Cells(ws.Rows.Count, oFileNameColumn).End(XlDirection.xlUp).Row\n    \n    For j = oStartRow To oLastRow\n        oFName = ws.Cells(j, oFileNameColumn).Value\n        If Dir(oFName, vbDirectory) = vbNullString Then GoTo SkipRow\n        \n        On Error GoTo SkipRow\n            Set apprenticeDoc = apprentice.Open(oFName)\n        Dim Thumbnail As IPictureDisp\n        Set Thumbnail = apprenticeDoc.PropertySets.Item(\"Inventor Summary Information\").Item(\"Thumbnail\").Value\n        Call CreateThumbnail(Thumbnail, oTColumn, j)\n    \n        Call apprenticeDoc.Close\nSkipRow:\n    Next\n    \n    apprentice.Close\n    Set apprentice = Nothing\nEnd Sub\n\nPrivate Sub CreateThumbnail(Thumbnail As IPictureDisp, oColumn As Integer, ByVal CellRowNum As Integer)\n    'Changed to put N/A in same column as comments. if there is an error, check this first.\n    On Error GoTo Handler\n    Call stdole.SavePicture(Thumbnail, \"C:\\Temp\\Thumb.jpg\")\nHandler:\n    If Err.Number = 380 Then\n        ws.Cells(CellRowNum, oColumn).Value = \"N/A\"\n        Exit Sub\n    End If\n    \n    With ws.Cells(CellRowNum, oColumn)\n            .AddComment\n            .Comment.Visible = False\n            .Comment.Shape.Fill.UserPicture (\"C:\\Temp\\Thumb.jpg\")\n            .Comment.Shape.Height = 75\n            .Comment.Shape.Width = 75\n    End With\nEnd Sub", "Private ws As Worksheet\n\nPublic Sub SomeStringNameThatWillExecuteThisCode()\n     Set ws = Application.ActiveSheet", "    \n     'Sub MakeThumbnailColumn(oStartRow As Integer, oTColumn As Integer, oFileNameColumn As Integer)\n     Call MakeThumbnailColumn(2, 3, 4)", "\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Problem printing with Apprentice 2016\n                    ", "solution": [], "author": "lornemartin"},
{"created at": [], "solution Title": "\n                        Re: Inventor Professional 2016 Material Library and Appearance Library\n                    ", "solution": [], "author": "bob.holland"},
{"created at": [], "solution Title": "\n                        Re: ActiveEditDocument.GraphicsDataSetsCollection.Add2\n                    ", "solution": ["Sub Test()\nDim doc As PartDocument\nSet doc = ThisApplication.ActiveEditDocument\nDim GetGUID As String\n\nGetGUID = Mid$(CreateObject(\"Scriptlet.TypeLib\").GUID, 2, 36)\n\nDim oGraphicsData As GraphicsDataSets\n\nSet oGraphicsData = ThisApplication.ActiveDocument.GraphicsDataSetsCollection.[_Add2](GetGUID, True)\nEnd Sub"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: iLogic Left String function\n                    ", "solution": ["MessageBox", ".", "Show", "(", "\"\"", "&", "(", "Left", "(", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", ",", "6", "))", "&", "\"", "-Q02112.iam", "\"", ", ", "\"", "Title", "\"", ")", "  "], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Add drawing dimension to sketched objects\n                    ", "solution": [], "author": "marco.lorenz"},
{"created at": [], "solution Title": "\n                        Re: ilogic to get part extents\n                    ", "solution": ["'Get active document", "\nDim oDoc As Document\noDoc = ThisApplication.ActiveDocument\n", "'Get active document unit of measure", "\nDim uom As UnitsOfMeasure = oDoc.UnitsOfMeasure\n", "'Converts length unit to a string", "\nDim Units As String = uom.GetStringFromType(uom.LengthUnits)\n\n", "'Checks To see If the active document Is a standard part.", "\nIf ThisApplication.ActiveDocument.SubType = \"{4D29B490-49B2-11D0-93C3-7E0706000000}\"\n", "'If it Is a standard part it Is converted To sheet metal", "\n   Try\n      ThisApplication.ActiveDocument.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\"\n   Catch\n", "      'catch error and exit rule when part can't be converted\n      'example: multiple solid body part", "\n      Return\n   End Try\nEnd If\n\n", "'Go To the FlatPattern", "\nDim oSMCD As SheetMetalComponentDefinition\noSMCD = oDoc.ComponentDefinition\n", "'Look For Flatpattern", "\nIf Not oSMCD.HasFlatPattern Then\n", "   'Create Flatpattern If the part doesn't have one", "\n   oSMCD.Unfold()\n   oDoc.Update2(True)\n   oSMCD.FlatPattern.ExitEdit()\nEnd If", "'create the component definition of Flatpattern", "Dim oFPCD As ComponentDefinition =\u00a0oSMCD.FlatPattern", "\n\n", "'Get the min and max point of the Flatpattern", "\nDim minPoint As point = ", "oFPCD", ".SurfaceBodies.Item(1).RangeBox.minPoint\nDim maxPoint As point = ", "oFPCD", ".SurfaceBodies.Item(1).RangeBox.maxPoint\n", "'X, Y & Z values are maxPoint - minPoint'Since FlatPattern always returns \"cm\", we also have to do some conversion to match the document's unit of measure", "X = uom.ConvertUnits ((maxPoint.X - minPoint.X), \"cm\", uom.LengthUnits)\nY = uom.ConvertUnits ((maxPoint.Y - minPoint.Y), \"cm\", uom.LengthUnits)\nZ = uom.ConvertUnits ((maxPoint.Z - minPoint.Z), \"cm\", uom.LengthUnits)\n\nDim LengthString As String = MaxOfMany (X,Y,Z)\nDim WidthString As String = X + Y + Z - MaxOfMany (X,Y,Z) - MinOfMany(X,Y,Z)\nDim ThicknessString As String = MinOfMany (X,Y,Z)\n\n", "'Set iProperties for Length, Width & Thickness.  Unit string added to each value.", "\niProperties.Value(\"Custom\", \"Length\") = LengthString & \" \" & Units\niProperties.Value(\"Custom\", \"Width\") = WidthString & \" \" & Units\niProperties.Value(\"Custom\", \"Thickness\") = ThicknessString & \" \" & Units\n'iProperties.Value(\"Project\", \"Description\") = \"PL - \" & ThicknessString & \" \" & Units\n\n'ThisDoc.Save"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Revision Block Description\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Addin loading locations\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: How to delete non-existing reference in Inventor DWG\n                    ", "solution": ["Dim odoc As DrawingDocument\nSet odoc = ThisApplication.ActiveDocument\n\nDim acad As AcadDatabase\nSet acad = odoc.ContainingDWGDocument\n\nDim removed As Boolean\n\nOn Error Resume Next\n\nDim acadObj As Object\nFor Each acadObj In acad.Dictionaries\n\n    If TypeOf acadObj Is AcadDictionary Then\n    \n            If acadObj.Name = \"ACAD_IMAGE_DICT\" Then\n                \n                Dim acadImageDict As AcadDictionary\n                Set acadImageDict = acadObj\n                \n                acadImageDict.Remove \"<imagename>\"\n                removed = True\n                 \n                Exit For\n                 \n            End If\n            \n    End If\n    \nNext\n\nOn Error GoTo 0\n\nIf removed Then\n    odoc.Update2\n    odoc.Save\n    ThisApplication.CommandManager.ControlDefinitions(\"VaultRefresh\").Execute\nEnd If"], "author": "psaarloos"},
{"created at": [], "solution Title": "\n                        Re: Part Number or File name\n                    ", "solution": ["For Each bRow As BOMRow in\u00a0oStructuredBOMView.BOMRows\n\u00a0 \u00a0 Dim oCompDef As ComponentDefinition", "    oCompDef = bRow.ComponentDefinitions(1)\n\u00a0 \u00a0 'Do some stuff here with the row bRow", "    Dim partNumber As String\n\u00a0 \u00a0 partNumber = oCompDef.PropertySets _", "        .Item(\"Design Tracking Properties\").Item(\"Part Number\")\nNext"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Array Within an Array\n                    ", "solution": ["Dim Materials_f As New Dictionary(Of String, List(Of String))\nMaterials_f.Add(\"SA 105 CS\", New List(Of String) {\"B\", \"1\", \"35\", \"17.1\",.....})", "'To Reference", "Materials_f(\"SA 105 CS\") 'Will return the string array", " \n", "Dim", " ", "Materials_f", " ", "As", " ", "New", " ", "Dictionary", "(", "Of", " ", "String", ", ", "List", "(", "Of", " ", "String", "))", "\n\n", "Materials_f", ".", "Add", "(", "\"", "SA 105 CS", "\"", ", ", "New", " ", "List", "(", "Of", " ", "String", ")(", "New", " ", "String", "()", " {", "\"", "B", "\"", ", ", "\"", "1", "\"", ", ", "\"", "35", "\"", ", ", "\"", "17.1", "\"", "}", "))", "\n\n", "'", "To Reference", "\n\n", "z", "=", "Materials_f", "(", "\"", "SA 105 CS", "\"", ")", " ", "'", "Will return the string array", "\n", "MsgBox", "(", "z", "(", "0", "))"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Break multiple links in an assembly created from a multi-body part?\n                    ", "solution": ["oSuppress_YN = InputRadioBox(\"Select an option\", _\n\"Suppress Derived Links\", \"Un-Suppress Derived Links\", True, \"iLogic\")\n' Get the top level assembly document\nDim oDoc As AssemblyDocument\noDoc = ThisApplication.ActiveDocument\n' Set a reference to the assembly component definition\nDim oComp As AssemblyComponentDefinition\noComp = oDoc.ComponentDefinition\n' Loop each component occurrence to get its document\nDim oOcc As ComponentOccurrence\nFor Each oOcc In oComp.Occurrences\nDim oPartDoc As Document\noPartDoc = oOcc.Definition.Document\nIf TypeOf oPartDoc Is PartDocument Then\n' Set a reference to the part component definition\nDim oPartComp As PartComponentDefinition\noPartComp = oPartDoc.ComponentDefinition\n' Loop each derived part component in this part document\nDim oDerPartComp As DerivedPartComponent\nFor Each oDerPartComp In oPartComp.ReferenceComponents.DerivedPartComponents\noDerPartComp.SuppressLinkToFile = oSuppress_YN\nNext\nEnd If\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Weird Programming/ Object Type/ Declaration Errors\n                    ", "solution": ["'Function Something(oDoc As Document)", "  ", "    Dim", " ", "oCompDef", " ", "As", " ", "ComponentDefinition", "\n    ", "If", " ", "oDoc", ".", "DocumentType", " ", "=", " ", "12291", "\n        ", "oCompDef", " ", "=", " ", "CType", "(", "oDoc", ", ", "Inventor", ".", "AssemblyDocument", ")", ".", "ComponentDefinition", "\n    ", "Else", "\n        ", "oCompDef", " ", "=", " ", "CType", "(", "oDoc", ", ", "Inventor", ".", "PartDocument", ")", ".", "ComponentDefinition", "\n    ", "End", " ", "If", "'End Function"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: ThisDoc.Path but up one level\n                    ", "solution": [], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: Can I create a Button in the User Ribbons?\n                    ", "solution": [], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: What can I do with Inventor API?\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Symmetrical Geometry Constraint Between Two Lines - API\n                    ", "solution": [], "author": "danijel.radenko"},
{"created at": [], "solution Title": "\n                        Re: DesignProject return exception when properties try change.\n                    ", "solution": [], "author": "mikazakov"},
{"created at": [], "solution Title": "\n                        Re: Delete Specific Sketch Constraint Using VBA\n                    ", "solution": ["Public Sub BreakLines()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    Dim sk As PlanarSketch\n    Set sk = partDoc.ComponentDefinition.Sketches.Item(1)\n    \n    Dim line1 As SketchLine\n    Dim line2 As SketchLine\n    Set line1 = ThisApplication.CommandManager.Pick(kSketchCurveLinearFilter, \"Pick line 1\")\n    Set line2 = ThisApplication.CommandManager.Pick(kSketchCurveLinearFilter, \"Pick line 2\")\n    \n    ' Find the coincident constraint from each line that is to the same point.\n    Dim constraint As Object\n    For Each constraint In line1.Constraints\n        If TypeOf constraint Is CoincidentConstraint Then\n            Dim coinc1 As CoincidentConstraint\n            Set coinc1 = constraint\n            \n            ' Find the point that's connected to line1 by this constraint.\n            Dim pnt1 As SketchPoint\n            If coinc1.EntityOne Is line1 Then\n                Set pnt1 = coinc1.EntityTwo\n            Else\n                Set pnt1 = coinc1.EntityOne\n            End If\n                        \n            ' Iterate through the constraints on the second line to find the one that shares this point.\n            Dim constraint2 As Object\n            For Each constraint2 In line2.Constraints\n                If TypeOf constraint2 Is CoincidentConstraint Then\n                    Dim coinc2 As CoincidentConstraint\n                    Set coinc2 = constraint2\n                    \n                    Dim pnt2 As SketchPoint\n                    If coinc2.EntityOne Is line2 Then\n                        Set pnt2 = coinc2.EntityTwo\n                    Else\n                        Set pnt2 = coinc2.EntityOne\n                    End If\n                    \n                    If pnt1 Is pnt2 Then\n                        If coinc1.Deletable Then\n                            coinc1.Delete\n                            Exit Sub\n                        ElseIf coinc2.Deletable Then\n                            coinc2.Delete\n                            Exit Sub\n                        End If\n                    End If\n                End If\n            Next\n        End If\n    Next\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic to Trim a File Name to Populate iProperties\n                    ", "solution": ["  Sub Main\n  Dim ThisDocument As PartDocument = ThisApplication.ActiveEditDocument\n         \n'we need to get the file name of the current document.\n\tDim FileName As String =  System.IO.Path.GetFileNameWithoutExtension(ThisDocument.FullDocumentName)\nDim PartNumber As String = GetPartNumber(FileName)\nDim Desc as String = GetDesc(FileName)\nDim Rev As String = GetRevision(FileName)\n'use the below for testing to see what we are getting back\n'MsgBox(PartNumber & vbLf & Desc & vbLf & Rev)\n\n' we will see if all the variables are valid and set the properties if they are\nIf Not PartNumber Is Nothing Then\niProperties.Value(\"Project\", \"Part Number\") = PartNumber\nEnd If\n\nIf Not Desc Is Nothing Then\niProperties.Value(\"Project\", \"Description\") = Desc\nEnd If\n\nIf Not Rev Is Nothing Then'\niProperties.Value(\"Project\", \"Revision Number\") = Rev\nEnd If\n\n\n\n\nEnd Sub\n\n  \t\n\t   Public Function GetPartNumber(ByVal FileName As String) As String\n        'we will look to see the we have 2 - marks and split the string out\n        'we could do this by counting characters also if needed\n        If CountCharacter(FileName, \"-\") = 2  Then\n            Dim S() As String = FileName.split(\"-\")\n\t\t\tIf S(2).contains(\".\")Then\n\t\t\t'if we found the . for the revision we will trim that from the string\n\t\t\tS(2) = Left(S(2), InStr(S(2), \".\")-1)\n\t\t\tEnd If\n\t\t\tReturn S(0) & S(2)\n\t\t\tElse\n\t\t\tReturn Nothing\t\n        End If\n    End Function\n\t\n\t\t   Public Function GetDesc(ByVal FileName As String) As String\n        'we will look to see the we have 2 - marks and split the string out\n        'we could do this by counting characters also if needed\n\t\t'Same as GetPartNumber but we will pull out S(1) for this function\n        If CountCharacter(FileName, \"-\") = 2  Then\n            Dim S() As String = FileName.split(\"-\")\n\t\t\t\t\tReturn S(1)\n\t\t\tElse\n\t\t\tReturn Nothing\t\n        End If\n    End Function\n\t\n\t\t   Public Function GetRevision(ByVal FileName As String) As String\n        'we will look to see the we have 2 - marks and split the string out\n        'we could do this by counting characters also if needed\n\t\t'Same as GetPartNumber but we will pull out the right part of S(2) for this function\n        If CountCharacter(FileName, \"-\") = 2  Then\n            Dim S() As String = FileName.split(\"-\")\n\t\t\tIf S(2).contains(\".\")Then\n\t\t\t'if we found the . for the revision we will trim that from the string\n\t\t\t\n\t\t\tS(2) = S(2).Remove(0, S(2).IndexOf(\".\")+1)\n\t\t\t\n\t\t\t\n\t\t\tElse\n\t\t\tReturn Nothing\n\t\t\tEnd If\n\t\t\tReturn  S(2)\n\t\t\tElse\n\t\t\tReturn Nothing\t\n        End If\n    End Function\n\n\n\tPublic Function CountCharacter(ByVal value As String, ByVal ch As Char) As Integer\n  Return Len(value) - Len(Replace(value, ch, \"\"))\nEnd Function\n\t", "Dim ThisDocument As PartDocument = ThisApplication.ActiveEditDocument", "Dim ThisDocument As Document = ThisApplication.ActiveEditDocument", "\t   Public Function GetPartNumber(ByVal FileName As String) As String\n        'we will look to see the we have 2 - marks and split the string out\n        'we could do this by counting characters also if needed\n        If CountCharacter(FileName, \"-\") = 2  Then\n            Dim S() As String = FileName.split(\"-\")\n\t\t\tIf S(2).contains(\".\")Then\n\t\t\t'if we found the . for the revision we will trim that from the string\n\t\t\tS(2) = Left(S(2), InStr(S(2), \".\")-1)\n\t\t\tEnd If\n\t\t\tReturn S(0) & \"-\" & S(2)\n\t\t\tElse\n\t\t\tReturn Nothing\t\n        End If\n    End Function"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Access Revision Number - But Not iProperty Revision Number\n                    ", "solution": ["oApp = ThisApplication\noThisDoc = ThisDoc.Document\n\n'[ create transaction\nCall oApp.TransactionManager.StartTransaction(oThisDoc, \"Get Next Rev\")\t\n\nTry\n' Get the revision table\n\tDim oRevTable As RevisionTable\n\toRevTable = oThisDoc.ActiveSheet.RevisionTables.Item(1)\n\t\n\tDim oRows As RevisionTableRows \n\tDim oRow As RevisionTableRow\n\n\t'get last row\n\toRow = oRevTable.RevisionTableRows.Item(oRevTable.RevisionTableRows.Count)\t\n\tDim oCell As RevisionTableCell = oRow.Item(1)\n\t\n\t'add a row\n\toRows = oRevTable.RevisionTableRows\n\toRows.Add()\t\n\t\n\t'get new last row\n\toRow = oRevTable.RevisionTableRows.Item(oRevTable.RevisionTableRows.Count)\t\n\n\t'get first entry in that row \n\tDim oCell_1 As RevisionTableCell = oRow.Item(1)\t\n\tSharedVariable(\"NextRev\") = oCell_1.Text\n\t'check is values are equal\n\tSharedVariable(\"RevOverride\") = Chr(Asc(oCell.Text)+1) = oCell_1.Text\n\t'MessageBox.Show(Chr(Asc(oCell.Text)+1), oCell_1.Text)\nCatch\n\tMessageBox.Show(\"Revision Block Not Found.\", \"iLogic\")\nEnd Try\n\noApp.TransactionManager.EndTransaction 'end transaction\noApp.TransactionManager.UndoTransaction() 'undo transaction\n']\n\nIf SharedVariable(\"RevOverride\") = False Then\nMessageBox.Show(\"Revision override found.\" &vbLf & vbLf & _\n\"Revision iProperty is : \" & iProperties.Value(\"Project\", \"Revision Number\")  & vbLf & _\n\"But the actual next revision will be: \" & SharedVariable(\"NextRev\"), \"iLogic\")\nEnd If\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Obtaining the ActiveDocument for an AddIn converted from a VBA macro\n                    ", "solution": ["Public Class Form1\n    Private InvApp As Inventor.Application\n    'Constructor\n    Public Sub New(InvApp As Inventor.Application)\n        ' \u042d\u0442\u043e\u0442 \u0432\u044b\u0437\u043e\u0432 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0434\u043b\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430.\n        InitializeComponent()\n        Me.InvApp = InvApp\n\n        Dim Doc As Inventor.Document = InvApp.ActiveDocument\n\n        Select Case Doc.DocumentType\n            Case Inventor.DocumentTypeEnum.kPartDocumentObject\n                Dim PartDoc As Inventor.PartDocument = DirectCast(Doc, Inventor.PartDocument)\n\n            Case Inventor.DocumentTypeEnum.kAssemblyDocumentObject\n                Dim AssDoc As Inventor.AssemblyDocument = DirectCast(Doc, Inventor.AssemblyDocument)\n\n        End Select\n\n    End Sub\nEnd Class"], "author": "mikazakov"},
{"created at": [], "solution Title": "\n                        Re: How to pop up a new dialog?\n                    ", "solution": [], "author": "jayden.shui"},
{"created at": [], "solution Title": "\n                        Betreff: DockableWindow problem with Focus\n                    ", "solution": ["Private Sub TreeView1_AfterSelect(sender As Object, e As TreeViewEventArgs) Handles TreeView1.AfterSelect\n        Me.TreeView1.BeginInvoke(New MethodInvoker(AddressOf FocusOnTextbox))\nEnd Sub\n\nPrivate Sub FocusOnTextbox()\n        TextBox1.Focus()\n        TextBox1.SelectAll()\nEnd Sub\n\n"], "author": "andreasBW"},
{"created at": [], "solution Title": "\n                        Re: Angular Dimension Between Two Sketch Lines\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Failed Flush Constraint\n                    ", "solution": ["Sub Fix_XYZ()\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n    \n    Dim oSelectSet As SelectSet\n    Set oSelectSet = ThisApplication.ActiveDocument.SelectSet\n    If oSelectSet.Count <> 1 Then\n        MsgBox \"Select one component please\"\n        Exit Sub\n    End If\n    If (Not (TypeOf oSelectSet.Item(1) Is ComponentOccurrence)) Then\n        MsgBox \"Select one component please\"\n        Exit Sub\n    End If\n     \n    Dim oOcc As ComponentOccurrence\n    Set oOcc = oSelectSet.Item(1)\n    \n    Dim oBasePlane As WorkPlane\n    Dim oPartPlane As WorkPlane\n    Dim oPartPlaneProxy As WorkPlaneProxy\n    Dim i As Long\n    \n    For i = 1 To 3\n       Set oBasePlane = oAsmCompDef.WorkPlanes.Item(i)\n       Set oPartPlane = oOcc.Definition.WorkPlanes.Item(i)\n       'create proxy plane for the plane in component\n       Call oOcc.CreateGeometryProxy(oPartPlane, oPartPlaneProxy)\n       'add constraint\n       Call oAsmCompDef.Constraints.AddFlushConstraint(oBasePlane, oPartPlaneProxy, 0)\n    Next i\n   \nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Creating a sorting application/feature in vb.net\n                    ", "solution": ["Public Class DrawingSortComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare1(ByVal x As String, ByVal y As String) As Integer Implements IComparer(Of String).Compare\n        If x Is Nothing And y Is Nothing Then Return 0\n        If x IsNot Nothing And y Is Nothing Then Return 1\n        If x Is Nothing And y IsNot Nothing Then Return -1\n        If x IsNot Nothing And y IsNot Nothing Then\n            'get filenames without extensions or folders\n            x = System.IO.Path.GetFileNameWithoutExtension(x)\n            y = System.IO.Path.GetFileNameWithoutExtension(y)\n            'first remove any PDF reference to a Revsison\n            x = x.ToString.Split(\" - \")(0)\n            y = y.ToString.Split(\" - \")(0)\n            'split the string and see if it is a valid drawing number\n            Dim dnX As New DrawingNumber(x.ToString)\n            Dim dnY As New DrawingNumber(y.ToString)\n            If dnX.isDrawingNumber And dnY.isDrawingNumber Then\n                'first sort on drawing type:\n                If (dnX.DTValue < dnY.DTValue) Then\n                    Return -1\n                ElseIf (dnX.DTValue > dnY.DTValue) Then\n                    Return 1\n                Else 'Values are equal - keep digging or - Return 0\n                    If (dnX.PRValue < dnY.PRValue) Then\n                        Return -1\n                    ElseIf (dnX.PRValue > dnY.PRValue) Then\n                        Return 1\n                    Else 'Values are equal - keep digging or - Return 0\n                        If (dnX.Serial < dnY.Serial) Then\n                            Return -1\n                        ElseIf (dnX.Serial > dnY.Serial) Then\n                            Return 1\n                        End If\n                    End If\n                End If\n            End If\n        End If\n        Return New System.Collections.CaseInsensitiveComparer().Compare(x, y)\n    End Function\n\n    'Public Function Compare(x As String, y As String) As Integer Implements IComparer.Compare\n\n    'End Function\n\n    Private Class DrawingNumber\n        Property DrawingType As String\n        Property Project As String\n        Private strSplit() As String\n        Property isDrawingNumber As Boolean = True\n\n        ReadOnly Property DTValue As Long\n            Get\n                If strSplit.Count = 3 Then\n                    DrawingType = strSplit(0)\n                    Select Case DrawingType\n                        Case Is = \"N\"\n                            Return 0\n                        Case Is = \"S\"\n                            Return 1\n                        Case Is = \"C\"\n                            Return 2\n                        Case Is = \"T\"\n                            Return 3\n                        Case Is = \"G\"\n                            Return 4\n                        Case Is = \"M\"\n                            Return 5\n                        Case Is = \"A\"\n                            Return 6\n                        Case Is = \"D\"\n                            Return 7\n                        Case Is = \"P\"\n                            Return 8\n                        Case Is = \"L\"\n                            Return 9\n                        Case Else\n                            isDrawingNumber = False\n                    End Select\n                Else\n                    isDrawingNumber = False\n                End If\n                Return 10\n            End Get\n        End Property\n\n        ReadOnly Property PRValue As Long\n            Get\n                If strSplit.Count = 3 Then\n                    Project = strSplit(1)\n                    If Project.Length = 5 Then\n                        If IsNumeric(Project) Then\n                            PRValue = Project 'this should put numeric 5 digit projects in front of aphabetic 5 digit projects\n                        Else\n                            PRValue = String.Join(String.Empty, From c In Project.ToCharArray Select (Asc(c).ToString))\n                        End If\n                        Return PRValue\n                    Else\n                        isDrawingNumber = False\n                    End If\n                Else\n                    isDrawingNumber = False\n                End If\n                Return 99999 '10 digits\n            End Get\n        End Property\n\n        ReadOnly Property Serial As Double\n            Get\n                If strSplit.Count = 3 Then\n                    'Try\n                    If IsNumeric(strSplit(2)) Then\n                        Return CType(strSplit(2), Double)\n                    Else\n                        isDrawingNumber = False\n                        Return 9999999\n                    End If\n                    'Catch ex As Exception\n                    'isDrawingNumber = False\n                    'End Try\n                End If\n                isDrawingNumber = False\n                Return 9999999 'expected up to 7 whole digits (decimal reserved for tabulated parts)\n            End Get\n        End Property\n\n        Public Sub New(strDrawing As String)\n            strDrawing = Path.GetFileNameWithoutExtension(strDrawing)\n            strSplit = strDrawing.Split(\"-\")\n            strDrawing = DTValue & PRValue & Serial\n        End Sub\n\n    End Class", "    Public Sub SortFiles(ByRef inputList As List(Of String))\n        Dim dsc As New DrawingSortComparer\n        inputList.Sort(dsc)\n    End Sub"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Read parameter when I know only part of his name\n                    ", "solution": ["Dim oDoc As Document\noDoc = ThisDoc.Document\nDim oParams As Parameters\noParams = oDoc.ComponentDefinition.Parameters\nDim oPara As Parameter\nDim SearchedPara As Parameter\nDim ParaName As String\nParaName = \"", "ABC", "\"\nFor Each oPara In oParams\n   If Left(oPara.Name, Len(ParaName)) = ParaName Then\n      SearchedPara = oPara\n      Exit For\n   End If\nNext\nIf SearchedPara.Value <> vbNull Then\n   MsgBox(SearchedPara.Name & vbLf & SearchedPara.Value)\nEnd If"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Add items to the context menu in my custom browser pane\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Addins - Showing a form from a ribbon button click\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Connecting to inventor with Vb.net\n                    ", "solution": ["Imports System\nImports System.Type\nImports System.Activator\nImports Inventor\nImports System.Runtime.InteropServices\n\n'Need to make this public so it can be used in other classes\nPublic Class CL_InventorApp", "\n        'Need to make this public so it can be used in other classes\n        'InventorInstance will be the accessible object within the    \n        'CL_InventorApp class whenever we create access to the class\n\tDim Public InventorInstance As Inventor.Application\n\tDim _started As Boolean\n\t", "         'When you call New CL_InventorApp, this sub gets invoked.\n\tPublic Sub New()\n\t\t'Everything in this sub is fluff stolen from ", "                'elsewhere with variable names changed to suit my purposes\n\t\tTry\n       \t\tInventorInstance =  Marshal.GetActiveObject(\"Inventor.Application\")\n \t\t\t\n\t\tCatch ex As Exception\n\t\t\t   Try     \n\t\t\t\t\tDim invAppType As Type = GetTypeFromProgID(\"Inventor.Application\")     \n\t\t\t\t\t\n\t\t\t\t\tInventorInstance = CreateInstance(invAppType)     \n\t\t\t\t\tInventorInstance.Visible = True  \n\t\t\t\t\t\n\t\t\t\t\t'Note: if you shut down the Inventor session that was started    \n\t\t\t\t\t'this(way) there Is still an Inventor.exe running. We will use    \n\t\t\t\t\t'this Boolean to test whether or not the Inventor App  will    \n\t\t\t\t\t'need to be shut down. \n\t\t\t\t\t\n\t\t\t\t\t_started = True    \n\t\t\t\t\tCatch ex2 As Exception     \n\t\t\t\t\t\tMsgBox(ex2.ToString())     \n\t\t\t\t\t\tMsgBox(\"Unable to get or start Inventor\") \n\t\t\t\t\t\tExit Sub\n\t\t\t\t\tEnd Try\n\t\tEnd Try\n\tEnd Sub\nEnd Class\n\nPublic Sub Main()\n\n          'Need to create access to the class the app was opened in, so ref\n          ' the CL_InventorApp. oInv_App is what we use to access that class.\n\tDim oInv_App As New CL_InventorApp\n\tMsgBox(\"All is good\")\n\t\n\tMsgBox(oInv_App.InventorInstance.ActiveDocument.FullFileName)\n\t\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Modify Inventor dialogs & context-menus\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Export IDW to PDF (With Rename Option)\n                    ", "solution": ["Sub", " ", "Main", "\n", "printsfileLocation", "=", "ThisDoc", ".", "Path", "\n", "oMemberName", "=", "ThisDoc", ".", "FileName", "(", "False", ")", " ", "'", "without extension", "\n", "exportPDF", "(", "printsfileLocation", ", ", "oMemberName", ", ", "ThisApplication", ".", "activedocument", ")", "\n", "End Sub", "\n", "Sub", " ", "exportPDF", "(", "oPath", " ", "As", " ", "String", ", ", "oFileName", " ", "As", " ", "String", ", ", "oDocument", " ", "As", " ", "Document", ")", "\n", "Try", "\n", "oPDFAddIn", " ", "=", " ", "ThisApplication", ".", "ApplicationAddIns", ".", "ItemById", " ", "_", "\n", "(", "\"", "{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}", "\"", ")", "\n", "oContext", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateTranslationContext", "\n", "oContext", ".", "Type", " ", "=", " ", "IOMechanismEnum", ".", "kFileBrowseIOMechanism", "\n", "oOptions", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateNameValueMap", "\n", "oDataMedium", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateDataMedium", "\n", "Dim", " ", "oDrawing", " ", "as", " ", "DrawingDocument", " ", "=", " ", "oDocument", "\n", "Dim", " ", "sheetCount", " ", "As", " ", "Integer", " ", "=", " ", "oDrawing", ".", "Sheets", ".", "Count", "\n", "If", " ", "oPDFAddIn", ".", "HasSaveCopyAsOptions", "(", "oDataMedium", ", ", "oContext", ", ", "oOptions", ")", " ", "Then", "\n", "oOptions", ".", "Value", "(", "\"", "All_Color_AS_Black", "\"", ")", " ", "=", " ", "1", "\n", "oOptions", ".", "Value", "(", "\"", "Remove_Line_Weights", "\"", ")", " ", "=", " ", "1", "\n", "oOptions", ".", "Value", "(", "\"", "Vector_Resolution", "\"", ")", " ", "=", " ", "400", "\n", "oOptions", ".", "Value", "(", "\"", "Sheet_Range", "\"", ")", " ", "=", " ", "Inventor", ".", "PrintRangeEnum", ".", "kPrintSheetRange", "\n", "oOptions", ".", "Value", "(", "\"", "Custom_Begin_Sheet", "\"", ")", " ", "=", " ", "1", "\n", "oOptions", ".", "Value", "(", "\"", "Custom_End_Sheet", "\"", ")", " ", "=", " ", "sheetcount", "\n", "End", " ", "If", "\n\n", "If", " ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Revision Number", "\"", ")", " ", "=", " ", "0", " ", "Then", "\n", "oDataMedium", ".", "FileName", " ", "=", " ", "oPath", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oFileName", " ", "&", " ", "\"", ".pdf", "\"", "\n", "oPDFAddIn", ".", "SaveCopyAs", "(", "oDocument", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n", "End", " ", "If", "\n\n", "If", " ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Revision Number", "\"", ")", " ", ">", " ", "0", " ", "Then", "\n", "oDataMedium", ".", "FileName", " ", "=", " ", "oPath", " ", "&", " ", "\"", "\\", "\"", " ", "&", " ", "oFileName", " ", "&", " ", "\"", " R_", "\"", " ", "&", " ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Revision Number", "\"", ")", " ", "&", " ", "\"", ".pdf", "\"", " ", "'", " check carefully this line", "\n", "oPDFAddIn", ".", "SaveCopyAs", "(", "oDocument", ", ", "oContext", ", ", "oOptions", ", ", "oDataMedium", ")", "\n", "End", " ", "If", "\n", "Catch", "\n", "End", " ", "Try", "\n\n", "End Sub", "\n\n"], "author": "Chirpyboy206064"},
{"created at": [], "solution Title": "\n                        Re: Automatic population of Identity Data for BIM export via iLogic\n                    ", "solution": [], "author": "waynehelley"},
{"created at": [], "solution Title": "\n                        Re: Struggle to rotate occurence in context of assembly\n                    ", "solution": ["Sub Main()\n\n\tDim oDoc As Document\n\toDoc = ThisApplication.ActiveDocument\n\t\n\tDim oOcc As ComponentOccurrence\n\n\tDim oSelectSet As SelectSet \n\toSelectSet = oDoc.SelectSet \n\t\n\tIf oSelectSet.Count = 1\n\t\toOcc = oSelectSet.Item(1)\n\tElse\n\t\tMsgBox(\"Invalid Selection Set!\" & vbLf & vbLf & \"Aborting rule!\")\n\t\tExit Sub\n\tEnd If\t\n\t\n\tr = InputBox(\"Set values of relative rotation of occurence in context of assembly:\" & vbLf & \"X:90 OR other format for reset\", \"Rotation\", \"X:0\")\n\tTry\n\t\tDim substring() As String = r.Split(\":\")\n\t\tCall RotateOccurrence(oDoc, oOcc, substring(1), substring(0))\n\tCatch\n\t\tCall RotateOccurrence(oDoc, oOcc, 0, \"\")\n\tEnd Try\nEnd Sub\n\nSub RotateOccurrence(oAsmDoc As Document, oOcc As ComponentOccurrence, oRotationDeg As Double, oAxis As String)\n\tDim oTG As TransientGeometry = ThisApplication.TransientGeometry\n\t\n\tDim oRx As Matrix\n\toRx = oTG.CreateMatrix()\n\toRx.Cell(2,2) = Math.Cos(oRotationDeg*Math.PI/180)\n\toRx.Cell(2,3) = -Math.Sin(oRotationDeg*Math.PI/180)\n\toRx.Cell(3,2) = Math.Sin(oRotationDeg*Math.PI/180)\n\toRx.Cell(3,3) = Math.Cos(oRotationDeg*Math.PI/180)\n\t\n\tDim oRy As Matrix\n\toRy = oTG.CreateMatrix()\n\toRy.Cell(1,1) = Math.Cos(oRotationDeg*Math.PI/180)\n\toRy.Cell(1,3) = Math.Sin(oRotationDeg*Math.PI/180)\n\toRy.Cell(3,1) = -Math.Sin(oRotationDeg*Math.PI/180)\n\toRy.Cell(3,3) = Math.Cos(oRotationDeg*Math.PI/180)\n\t\n\tDim oRz As Matrix\n\toRz = oTG.CreateMatrix()\n\toRz.Cell(1,1) = Math.Cos(oRotationDeg*Math.PI/180)\n\toRz.Cell(1,2) = -Math.Sin(oRotationDeg*Math.PI/180)\n\toRz.Cell(2,1) = Math.Sin(oRotationDeg*Math.PI/180)\n\toRz.Cell(2,2) = Math.Cos(oRotationDeg*Math.PI/180)\n\t\n\tDim oOccTransform As Matrix = oOcc.Transformation\n\tDim oTransVec As Vector = oOccTransform.Translation\n\t\n\tSelect Case True\n\t\tCase oAxis = \"X\"\n\t\t\toOccTransform.PreMultiplyBy(oRx)\n\t\tCase oAxis = \"Y\"\n\t\t\toOccTransform.PreMultiplyBy(oRy)\n\t\tCase oAxis = \"Z\"\n\t\t\toOccTransform.PreMultiplyBy(oRz)\n\t\tCase Else\n\t\t\tMsgBox(\"Error in rotating matrix; returning to identity\")\n\t\t\toOccTransform.SetToIdentity\n\tEnd Select\n\n\toOccTransform.SetTranslation(oTransVec, False)\n\toOcc.SetTransformWithoutConstraints(oOccTransform)\n\t\n\tPrintMatrix(oOccTransform)\nEnd Sub\n\nSub PrintMatrix(oMatrix As Matrix)\n\n\tFor i = 4 To 1 Step -1\n\t\tFor j = 4 To 1 Step -1\n\t\t\toStr = oMatrix.Cell(i,j) & \"     \" & oStr\n\t\tNext\n\t\toStr =  vbLf & oStr\n\tNext\n\t\n\tMsgBox(oStr)\n\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Using the API to ignore iLogic Rules or to ignor Error in Rules dialog\n                    ", "solution": ["Sub IlogicRun()\n    Ilogic (\"messaggio.txt\") ' file rule name\nEnd Sub\nSub Ilogic(rule As String)\n    Dim InventorApplication As Inventor.Application\n    Set InventorApplication = GetObject(, \"Inventor.Application\")\n    Dim iLogicAuto As Object\n    Dim oDoc As Inventor.Document\n    Set oDoc = InventorApplication.ActiveDocument\n    If oDoc Is Nothing Then\n        MsgBox (\"Missing Inventor Document\")\n    Exit Sub\n    End If\n    Set iLogicAuto = GetiLogicAddin(InventorApplication)\n    If (iLogicAuto Is Nothing) Then Exit Sub\n    exe = iLogicAuto.Automation.RunExternalRule(oDoc, rule)\nEnd Sub\n        \nPrivate Function GetiLogicAddin(ByRef InvApp As Inventor.Application) As Inventor.ApplicationAddIn\n    Dim addIn As Inventor.ApplicationAddIn\n        Set addIn = InvApp.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\n        addIn.Activate\n        Set GetiLogicAddin = addIn\nEnd Function"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Select a sketch (which could be 2d or 3d)\n                    ", "solution": [], "author": "DWhiteley"},
{"created at": [], "solution Title": "\n                        Re: Changing all components material\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: How to update custom iProperties with VBA?\n                    ", "solution": ["Public Sub UpdateRangeParameters()\n", "' Get the active part document.", "\nDim invPartDoc As PartDocument\nSet invPartDoc = ThisApplication.ActiveDocument\n\nDim totalRange As Box\nSet totalRange = invPartDoc.ComponentDefinition.RangeBox\n\nDim xSize As String\nDim ySize As String\nDim zSize As String\n\nxSize = invPartDoc.UnitsOfMeasure.GetStringFromValue(totalRange.MaxPoint.X - totalRange.MinPoint.X, kDefaultDisplayLengthUnits)\nySize = invPartDoc.UnitsOfMeasure.GetStringFromValue(totalRange.MaxPoint.Y - totalRange.MinPoint.Y, kDefaultDisplayLengthUnits)\nzSize = invPartDoc.UnitsOfMeasure.GetStringFromValue(totalRange.MaxPoint.Z - totalRange.MinPoint.Z, kDefaultDisplayLengthUnits)\n\n", "' Get the custom property set.", "\nDim customPropSet As PropertySet\nSet customPropSet = invPartDoc.PropertySets.Item(\"", "User Defined Properties", "\")\n\n", "'X-RANGE\n' Attempt to get an existing custom property named \"xRange\".", "\nOn Error Resume Next\nDim xRange As Property\nSet xRange = customPropSet.", "Item(\"xRange\")", "\nIf Err.Number <> 0 Then", "    ' Property does not exist -> Add the property.", "\n    Call customPropSet.Add(xSize, \"xRange\")\nElse\n", "    'Property exist -> update the value.", "\n", "    ", "xRange", ".Value = \"test\"\nEnd If\n\nMsgBox (\"Custom iProperties updated\")\n\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Save ALL associated files to DXF\n                    ", "solution": ["'define the active document as an assembly file\nDim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument\noAsmName = Left(oAsmDoc.DisplayName, Len(oAsmDoc.DisplayName) -4)\n\n'check that the active document is an assembly file\nIf ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\nMessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\nExit Sub\nEnd If\n\n'get user input\nRUsure = MessageBox.Show ( _\n\"This will create a DXF file for all of the asembly components that have drawings files.\" _\n& vbLf & \"This rule expects that the drawing file shares the same name and location as the component.\" _\n& vbLf & \" \" _\n& vbLf & \"Are you sure you want to create DXF Drawings for all of the assembly components?\" _\n& vbLf & \"This could take a while.\", \"iLogic  - Batch Output DXFs \",MessageBoxButtons.YesNo)\n\nIf RUsure = vbNo Then\nReturn\nElse\nEnd If\n\noPath = ThisDoc.Path\n\n'get DXF target folder path\noFolder = oPath & \"\\\" & oAsmName & \" DXF Files\"\n\n'Check for the DXF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n\n\n\n'[ DXF setup\n\n' Get the DXF translator Add-In.\nDim DXFAddIn As TranslatorAddIn\nDXFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC4-122E-11D5-8E91-0010B541CD80}\")\n'Set a reference to the active document (the document to be published).\nDim oDocument As Document\noDocument = ThisApplication.ActiveEditDocument\nDim oContext As TranslationContext\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n' Create a NameValueMap object\nDim oOptions As NameValueMap\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n' Create a DataMedium object\nDim oDataMedium As DataMedium\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n' Check whether the translator has 'SaveCopyAs' options\nIf DXFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\tDim strIniFile As String\n\tstrIniFile = \"C:\\temp\\dxfout.ini\"\n\t' Create the name-value that specifies the ini file to use.\n\toOptions.Value(\"Export_Acad_IniFile\") = strIniFile\nEnd If\n\n'] end of DXF setup\n\n\n'[ ComponentDrawings \n\t'look at the files referenced by the assembly\n\tDim oRefDocs As DocumentsEnumerator\n\toRefDocs = oAsmDoc.AllReferencedDocuments\n\tDim oRefDoc As Document\n\t\n\t'work the the drawing files for the referenced models\n\t'this expects that the model has a drawing of the same path and name \nFor Each oRefDoc In oRefDocs\n\tidwPathName = Left(oRefDoc.FullDocumentName, Len(oRefDoc.FullDocumentName) - 3) & \"idw\"\n\t\n\t'check to see that the model has a drawing of the same path and name \n\tIf(System.IO.File.Exists(idwPathName)) Then\n\t\t\tDim oDrawDoc As DrawingDocument\n\t\toDrawDoc = ThisApplication.Documents.Open(idwPathName, True)\n\t\toFileName = Left(oRefDoc.DisplayName, Len(oRefDoc.DisplayName) -3)\n\t\n\t\tOn Error Resume Next ' if DXF exists and is open or read only, resume next\n\t\t'Set the DXF target file name\n\t\toDataMedium.FileName = oFolder & \"\\\" & oFileName & \"DXF\"\n\t\t'Write out the DXF\n\t\t'Set the destination file name\n\t\toDataMedium.FileName = oFolder & \"\\\" & oFileName & \"dxf\"\n\t\t'Publish document.\n\t\tCall DXFAddIn.SaveCopyAs(oDrawDoc, oContext, oOptions, oDataMedium)\n\t\t'close the file\n\t\toDrawDoc.Close\n\tElse\n\t'If the model has no drawing of the same path and name - do nothing\n\tEnd If\nNext\n'] End of ComponentDrawings \n\n\n\n'[ Top Level Drawing \n\toAsmDrawing = ThisDoc.ChangeExtension(\".idw\")\n\toAsmDrawingDoc = ThisApplication.Documents.Open(oAsmDrawing, True)\n\toAsmDrawingName = Left(oAsmDrawingDoc.DisplayName, Len(oAsmDrawingDoc.DisplayName) -3)\n\t'write out the DXF for the Top Level Assembly Drawing file\n\tOn Error Resume Next ' if DXF exists and is open or read only, resume next\n\t'Set the DXF target file name\n\toDataMedium.FileName = oFolder & \"\\\" & oAsmDrawingName & \"dxf\"\n\t'Write out the DXF\n\tCall DXFAddIn.SaveCopyAs(oAsmDrawingDoc, oContext, oOptions, oDataMedium)\n\t'Close the top level drawing\n\toAsmDrawingDoc.Close\n'] Top Level Drawing \n\nMessageBox.Show(\"New Files Created in: \" & vbLf & oFolder, \"iLogic\")\n'open the folder where the new ffiles are saved\nShell(\"explorer.exe \" & oFolder,vbNormalFocus)"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Cant find sample code\n                    ", "solution": ["Public Sub RunMyRule()\n   ", "' Run an external rule", "   RuniLogicExt \"C:\\MyPath\\MyRule.iLogicVb\"", "   ", "' Run an internal rule", "   RuniLogicInt \"MyRule\"", "End Sub\n\nPrivate Sub RuniLogicInt(ByVal RuleName As String)\n   Dim iLogicAuto As Object\n   Dim oDoc As Document\n   Set oDoc = ThisApplication.ActiveDocument\n   If oDoc Is Nothing Then\n      MsgBox \"Missing Inventor Document\"\n      Exit Sub\n   End If\n   Set iLogicAuto = GetiLogicAddin(ThisApplication)\n   If (iLogicAuto Is Nothing) Then Exit Sub\n   iLogicAuto.RunRule oDoc, RuleName\nEnd Sub", "Private Sub RuniLogicExt(ByVal RuleName As String)\n   Dim iLogicAuto As Object\n   Dim oDoc As Document\n   Set oDoc = ThisApplication.ActiveDocument\n   If oDoc Is Nothing Then\n      MsgBox \"Missing Inventor Document\"\n      Exit Sub\n   End If\n   Set iLogicAuto = GetiLogicAddin(ThisApplication)\n   If (iLogicAuto Is Nothing) Then Exit Sub\n   iLogicAuto.RunExternalRule oDoc, RuleName\nEnd Sub", "Function GetiLogicAddin(oApplication As Inventor.Application) As Object\n   Set addIns = oApplication.ApplicationAddIns\n   Dim addIn As ApplicationAddIn\n   On Error GoTo NotFound\n   Set addIn = oApplication.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\n   If (addIn Is Nothing) Then Exit Function\n   addIn.Activate\n   Set GetiLogicAddin = addIn.Automation\n   Exit Function\nNotFound:\nEnd Function"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: part weight settings\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Visual Studio vs Inventor 2016\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Update drawing with iLogic from Assembly file\n                    ", "solution": ["oDrawDoc.Update", "' Check that the active document is an assembly file", "\nIf ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\n    MessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\n    Exit Sub\nEnd If", "' Define the active document As an Assembly file", "Dim oAsmDoc As AssemblyDocument", "oAsmDoc = ThisApplication.ActiveDocument", "Dim oAsmName As String", "oAsmName = Left(oAsmDoc.DisplayName, Len(oAsmDoc.DisplayName) -4)", "'- - - - - - - - - - - - -Component Drawings - - - - - - - - - - - -", "' Look at the files referenced by the assembly", "\nDim oRefDocs As DocumentsEnumerator\noRefDocs = oAsmDoc.AllReferencedDocuments\nDim oRefDoc As Document\n\n", "' Work the the drawing files for the referenced models", "' This expects that the model has a drawing of the same path and name", "\nFor Each oRefDoc In oRefDocs\n    idwPathName = Left(oRefDoc.FullDocumentName, Len(oRefDoc.FullDocumentName) - 3) & \"idw\"\n", "    ' Check to see that the model has a drawing of the same path and name", "\n    If(System.IO.File.Exists(idwPathName)) Then\n        Dim oDrawDoc As DrawingDocument\n        oDrawDoc = ThisApplication.Documents.Open(idwPathName, True)\n        ", "oDrawDoc.Update", "\n        Q1 = MessageBox.Show(\"Do you want to save this drawing?\", \"Drawing Looks Good?\",MessageBoxButtons.YesNo,MessageBoxIcon.Question)\n        If Q1 = vbYes Then\n            ", "' Save", "\n            oDrawDoc.Save", "        End If\n        ", "' Close the file", "        oDrawDoc.Close", "        Q2 = MessageBox.Show(\"Continue with next Drawing?\", \"Continue?\",MessageBoxButtons.YesNo,MessageBoxIcon.Question)\n        If Q2 = vbNo Then", "            Exit For\n        End If", "    End If", "Next"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: ilogic - delete flat patern\n                    ", "solution": ["Else If ThisApplication.ActiveDocument.DocumentSubType.Doc\u200bumentSubTypeID = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How to create flatpattern using C#?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Move EOP Marker Step by Step in the modeling tree\n                    ", "solution": ["Public Sub RecomputeToFailure()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n    \n    ' Reposition the stop node to the top.\n    Call partDef.SetEndOfPartToTopOrBottom(True)\n    \n    ' Get the browser.\n    Dim browser As BrowserPane\n    Set browser = partDoc.BrowserPanes.Item(1)\n    \n    Dim topNode As BrowserNode\n    Set topNode = browser.topNode\n    \n    Dim childNode As BrowserNode\n    For Each childNode In topNode.BrowserNodes\n        Dim ent As Object\n        Set ent = childNode.NativeObject\n        \n        ' Check to see if it's an entity type that the stop node can be positioned to.\n        If Not ent Is Nothing Then\n            If TypeOf ent Is PartFeature Then\n                Dim feature As PartFeature\n                Set feature = ent\n                \n                Call feature.SetEndOfPart(False)\n                \n                If feature.HealthStatus <> kUpToDateHealth Then\n                    MsgBox feature.name & \" Failed to successfully compute.\"\n                    Exit Sub\n                End If\n            ElseIf TypeOf ent Is WorkPlane Then\n                Dim wPlane As WorkPlane\n                Set wPlane = ent\n                \n                Call wPlane.SetEndOfPart(False)\n                If wPlane.HealthStatus <> kUpToDateHealth Then\n                    MsgBox wPlane.name & \" Failed to successfully compute.\"\n                    Exit Sub\n                End If\n            ElseIf TypeOf ent Is WorkAxis Then\n                Dim wAxis As WorkAxis\n                Set wAxis = ent\n                \n                Call wAxis.SetEndOfPart(False)\n                If wAxis.HealthStatus <> kUpToDateHealth Then\n                    MsgBox wAxis.name & \" Failed to successfully compute.\"\n                    Exit Sub\n                End If\n            ElseIf TypeOf ent Is WorkPoint Then\n                Dim wPoint As WorkPoint\n                Set wPoint = ent\n                \n                Call wPoint.SetEndOfPart(False)\n                If wPoint.HealthStatus <> kUpToDateHealth Then\n                    MsgBox wPoint.name & \" Failed to successfully compute.\"\n                    Exit Sub\n                End If\n            ElseIf TypeOf ent Is sketch Then\n                Dim sk As PlanarSketch\n                Set sk = ent\n                \n                Call sk.SetEndOfPart(False)\n                If sk.HealthStatus <> kUpToDateHealth Then\n                    MsgBox sk.name & \" Failed to successfully compute.\"\n                    Exit Sub\n                End If\n            End If\n        End If\n        \n        ThisApplication.ActiveView.Update\n    Next\n    \n    MsgBox \"Successfully computed model.\"\nEnd Sub", " ' Get the browser.\n    Dim browser As BrowserPane\n    Set browser = partDoc.BrowserPanes.Item(1)", " ' Get the browser.\n    Dim browser As BrowserPane\n    Set browser = partDoc.BrowserPanes.Item(\"Model\")"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: create part with ilogic code\n                    ", "solution": ["GoExcel.Open(\"C:\\Users\\a.khakbaz\\Desktop\\nozzle\\Cube.xlsx\", \"Sheet1\")\n\nDim sFilePath As String= ThisDoc.Path & \"\\\"\nDim sNewName As String\n\nDim doc As Document = ThisDoc.Document\nDim xDoc As Document\nFor i = 2 To 4\n    sNewName = GoExcel.CellValue(\"A\" & i)\n    doc.saveas(sFilePath & sNewName & \".ipt\", True)\n    xDoc = ThisApplication.Docements.Open(sFilePath & sNewName & \".ipt\")\n    Dim oPars As UserParameters = xDoc.ComponentDefinition.Parameters.UserParameters\n    oPars.Item(\"Length\").Value = GoExcel.CellValue(\"B\" & i)\n    oPars.Item(\"width\").Value = GoExcel.CellValue(\"C\" & i)\n    oPars.Item(\"Height\").Value = GoExcel.CellValue(\"D\" & i)\n    xDoc.Save\n    xDoc.Close(True)\nNext i\n\nGoExcel.Close\niLogicVb.UpdateWhenDone = True", "GoExcel.Open(\"C:\\Users\\a.khakbaz\\Desktop\\nozzle\\Cube.xlsx\", \"Sheet1\")\n\nDim sFilePath As String= ThisDoc.Path & \"\\\"\nDim sNewName As String\n\nDim doc As Document = ThisDoc.Document\nDim xDoc As Document\nFor i = 2 To 4\n    sNewName = GoExcel.CellValue(\"A\" & i)\n    doc.saveas(sFilePath & sNewName & \".ipt\", True)\n    xDoc = ThisApplication.Docements.Open(sFilePath & sNewName & \".ipt\")\n    Dim oPars As UserParameters = xDoc.ComponentDefinition.Parameters.UserParameters\n    oPars.Item(\"Length\").Expression = \"isolate(\" & GoExcel.CellValue(\"B\" & i) & \";mm;", "mm", ")\"\n    oPars.Item(\"width\").Expression = \"isolate(\" & GoExcel.CellValue(\"C\" & i) & \";mm;", "mm", ")\"\n    oPars.Item(\"Height\").Expression = \"isolate(\" & GoExcel.CellValue(\"D\" & i) & \";mm;", "mm", ")\"\n    xDoc.Save\n    xDoc.Close(True)\nNext i\n\nGoExcel.Close\niLogicVb.UpdateWhenDone = True"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Horizontal and Vertical Dimensions Orientation\n                    ", "solution": ["Public Sub DimensionTest()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    Dim sk As sketch\n    Set sk = partDoc.ActivatedObject\n    \n    Dim dimConstraints As DimensionConstraints\n    Set dimConstraints = sk.DimensionConstraints\n    \n    Dim hs As HighlightSet\n    Set hs = partDoc.CreateHighlightSet\n    Dim i As Integer\n    For i = 1 To dimConstraints.Count\n        Dim dimConstraint As DimensionConstraint\n        Set dimConstraint = dimConstraints.Item(i)\n        hs.AddItem dimConstraint\n        hs.Clear\n           \n        If TypeOf dimConstraint Is TwoPointDistanceDimConstraint Then\n            Dim dimHoriz As TwoPointDistanceDimConstraint\n            Set dimHoriz = dimConstraint\n            If dimHoriz.Orientation = kHorizontalDim Then\n                dimConstraint.Parameter.value = dimConstraint.Parameter.value + 0.1\n            ElseIf dimHoriz.Orientation = kAlignedDim Then\n                If WithinTol(dimHoriz.PointOne.Geometry.y, dimHoriz.PointTwo.Geometry.y, 0.000001) Then\n                    dimConstraint.Parameter.value = dimConstraint.Parameter.value + 0.1\n                End If\n            End If\n        ElseIf TypeOf dimConstraint Is OffsetDimConstraint Then\n            Dim dimOffset As OffsetDimConstraint\n            Set dimOffset = dimConstraint\n            If WithinTol(dimOffset.Line.Geometry.StartPoint.x, dimOffset.Line.Geometry.endPoint.x, 0.000001) Then\n                dimConstraint.Parameter.value = dimConstraint.Parameter.value + 0.1\n            End If\n        End If\n    Next\nEnd Sub\n\nPrivate Function WithinTol(Value1 As Double, Value2 As Double, Tolerance As Double)\n    If Abs(Value1 - Value2) <= Tolerance Then\n        WithinTol = True\n    Else\n        WithinTol = False\n    End If\nEnd Function"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Replace Content Center Part using VB.net\n                    ", "solution": [], "author": "BromanSillito"},
{"created at": [], "solution Title": "\n                        Re: create part file with i logic code\n                    ", "solution": ["GoExcel.Open(ThisDoc.Path & \"\\\" & \"Cube.xlsx\", \"Sheet1\")\n\nDim sFilePath As String= ThisDoc.Path & \"\\\"\n'CurrentFilename = ThisDoc.PathAndFileName(True) \nFor i=2 To 4\ndoc = ThisDoc.Document\nsNewName=GoExcel.CellValue(\"A\" & i)\n\nLength= GoExcel.CellValue(\"B\" & i)\nwidth= GoExcel.CellValue(\"C\" & i)\nHeight = GoExcel.CellValue(\"D\" & i)", "\n", "RuleParametersOutput()\n\nThisDoc.Document.Update()", "\n\nThisDoc.Document.saveas(sFilePath & sNewName & \".ipt\",True)\nNext i\n", "iLogicVb.UpdateWhenDone = True", "\nGoExcel.Close"], "author": "danijel.radenko"},
{"created at": [], "solution Title": "\n                        Re: Issue with Autodesk Inventor API\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Test an input value for number\n                    ", "solution": ["oInput = InputBox(\"Enter a number\", \"iLogic\", \"\")\n\nnumericCheck = IsNumeric(oInput)\n\nIf numericCheck = True Then\nMessageBox.Show(\"Input is numeric\", \"iLogic\")\nElse\nMessageBox.Show(\"Input is NOT numeric.\", \"iLogic\")\nEnd If", "Public Sub NumericCheck()\noInput = InputBox(\"Enter a number\", \"iLogic\", \"\")\n\nDim NumericCheck As Boolean\nNumericCheck = IsNumeric(oInput)\n\nIf NumericCheck = True Then\nMsgBox (\"Input is numeric\")\nElse\nMsgBox (\"Input is NOT numeric.\")\nEnd If\n\nEnd Sub"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Inventor rectangular equation\n                    ", "solution": ["Sub Main()\n    Dim oDoc As Document = ThisApplication.ActiveDocument\n    Dim oCD As ComponentDefinition = oDoc.ComponentDefinition\n    If TypeOf ThisApplication.ActiveEditObject Is Sketch Then\n        oSketch = ThisApplication.ActiveEditObject\n    Else\n        MsgBox(\"Run this rule from an open sketch, please.\")\n        Exit Sub\n    End If\n\tTry\n        oArea = InputBox(\"Please enter the size of the area to be filed.\", \"Area input\", 100)\n        If oArea = 0 Then\n            Exit Sub\n        End If\n        OrigSize = InputBox(\"Please enter the size of the base (first, smallest) line.\", \"Area input\", 23.813)\n        If OrigSize = 0 Then\n            Exit Sub\n        End If\n\tCatch\n\t\tExit Sub\n\tEnd Try\n    CreateLines()\n    oSketch.ExitEdit\n    InventorVb.DocumentUpdate()\nEnd Sub\n\nPrivate Amount As Integer\nPrivate oArea As Double\nPrivate oLine As SketchLine\nPrivate OrigSize As Double\nPrivate oSketch As Sketch\n\nPrivate Sub CreateLines()\n    Dim PI As Double = 4 * Atan(1)\n\tDim TG As TransientGeometry = ThisApplication.TransientGeometry\n\toArea = oArea * 0.1 'cm to mm\n\tOrigSize = OrigSize * 0.1 'cm to mm\n\toSize = OrigSize\n\tDim PosX As Double = oSize\n\tDim PosY As Double = 0\n\tDim Amount As Integer = Floor(oArea / (oSize * ", "2.8", "))\n\tDim Point1 As Point2D = TG.CreatePoint2d(0, 0)\n\tDim Point2 As Point2D\n\tFor i = 1 To Amount\n\t\tPoint2 = TG.CreatePoint2d(PosX, PosY)\n\t\tTry\n\t\t\toLine = oSketch.SketchLines.AddByTwoPoints(oLine.EndSketchPoint, Point2)\n\t\tCatch\n\t\t\toLine = oSketch.SketchLines.AddByTwoPoints(Point1, Point2)\n\t\tEnd Try\n\t\toSketch.GeometricConstraints.AddGround(oLine)\n\t\tPosX = PosX - (oSize * Sin(PI * 0.16667))\n\t\tPosY = PosY + (oSize * Cos(PI * 0.16667))\n\t\tPoint2 = TG.CreatePoint2d(PosX, PosY)\n\t\tAddLine(Point2)\n\t\toSize = oSize + OrigSize\n\t\tPosX = PosX - oSize\n\t\tPosY = PosY\n\t\tPoint2 = TG.CreatePoint2d(PosX, PosY)\n\t\tAddLine(Point2)\n\t\tPosX = PosX + (oSize * Sin(PI * 0.16667))\n\t\tPosY = PosY - (oSize * Cos(PI * 0.16667))\n\t\tPoint2 = TG.CreatePoint2d(PosX, PosY)\n\t\tAddLine(Point2)\n\t\toSize = oSize + OrigSize\n\t\tPosX = PosX + oSize\n\t\tPosY = PosY\n\tNext\nEnd Sub\n\nPrivate Sub AddLine(PointB As Point2D)\n\toLine = oSketch.SketchLines.AddByTwoPoints(oLine.EndSketchPoint, PointB)\n\toSketch.GeometricConstraints.AddGround(oLine)\nEnd Sub", "Sub Main()\n    Dim oDoc As Document = ThisApplication.ActiveDocument\n    Dim oCD As ComponentDefinition = oDoc.ComponentDefinition\n    If TypeOf ThisApplication.ActiveEditObject Is Sketch Then\n        oSketch = ThisApplication.ActiveEditObject\n    Else\n        MsgBox(\"Run this rule from an open sketch, please.\")\n        Exit Sub\n    End If\n\tTry\n        oArea = InputBox(\"Please enter the size of the area to be filed.\", \"Area input\", 1000)\n        If oArea = 0 Then\n            Exit Sub\n        End If\n        OrigSize = InputBox(\"Please enter the size of the base (first, smallest) line.\", \"Area input\", 23.813)\n        If OrigSize = 0 Then\n            Exit Sub\n        End If\n\tCatch\n\t\tExit Sub\n\tEnd Try\n    CreateLines()\n    oSketch.ExitEdit\n    InventorVb.DocumentUpdate()\nEnd Sub\n\nPrivate Amount As Integer\nPrivate oArea As Double\nPrivate oLine As SketchLine\nPrivate OrigSize As Double\nPrivate oSketch As Sketch\n\nPrivate Sub CreateLines()\n    Dim PI As Double = 4 * Atan(1)\n\tDim TG As TransientGeometry = ThisApplication.TransientGeometry\n\toArea = oArea * 0.1 'cm to mm\n\tOrigSize = OrigSize * 0.1 'cm to mm\n\toSize = OrigSize\n\tDim PosX As Double = oSize\n\tDim PosY As Double = 0\n\tDim Amount As Integer = Floor(oArea / (oSize * ", "0.7473", "))\n\tDim Point1 As Point2D = TG.CreatePoint2d(0, 0)\n\tDim Point2 As Point2D\n\tDim Position As Integer = 1\n\tFor i = 1 To Amount\n\t\tSelect Case Position\n\t\tCase 1\n\t\t\tPoint2 = TG.CreatePoint2d(PosX, PosY)\n\t\t\tTry\n\t\t\t\toLine = oSketch.SketchLines.AddByTwoPoints(oLine.EndSketchPoint, Point2)\n\t\t\tCatch\n\t\t\t\toLine = oSketch.SketchLines.AddByTwoPoints(Point1, Point2)\n\t\t\tEnd Try\n\t\t\toSketch.GeometricConstraints.AddGround(oLine)\n\t\tCase 2\n\t\t\tPosX = PosX - (oSize * Sin(PI * 0.16667))\n\t\t\tPosY = PosY + (oSize * Cos(PI * 0.16667))\n\t\t\tPoint2 = TG.CreatePoint2d(PosX, PosY)\n\t\t\tAddLine(Point2)\n\t\tCase 3\n\t\t\toSize = oSize + OrigSize\n\t\t\tPosX = PosX - oSize\n\t\t\tPosY = PosY\n\t\t\tPoint2 = TG.CreatePoint2d(PosX, PosY)\n\t\t\tAddLine(Point2)\n\t\tCase 4\n\t\t\tPosX = PosX + (oSize * Sin(PI * 0.16667))\n\t\t\tPosY = PosY - (oSize * Cos(PI * 0.16667))\n\t\t\tPoint2 = TG.CreatePoint2d(PosX, PosY)\n\t\t\tAddLine(Point2)\n\t\t\toSize = oSize + OrigSize\n\t\t\tPosX = PosX + oSize\n\t\t\tPosY = PosY\n\t\tEnd Select\n\t\tIf Position = 4 Then Position = 1 Else Position = Position + 1\n\tNext\nEnd Sub\n\nPrivate Sub AddLine(PointB As Point2D)\n\toLine = oSketch.SketchLines.AddByTwoPoints(oLine.EndSketchPoint, PointB)\n\toSketch.GeometricConstraints.AddGround(oLine)\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Close user form with \"X\" button\n                    ", "solution": [], "author": "LonesomeJoe"},
{"created at": [], "solution Title": "\n                        Re: Placing Sketch Block With Command / Control Definition\n                    ", "solution": ["Public Sub InsertBlockFromTemplate()\n\n\n    Dim oNVM As NameValueMap\n    Set oNVM = ThisApplication.TransientObjects.CreateNameValueMap\n    \n    Dim oTemplate As PartDocument\n    Set oTemplate = ThisApplication.Documents.OpenWithOptions(\"C:\\btemplate.ipt\", oNVM, False)\n    \n    Dim oTempCompDef As PartComponentDefinition\n    Set oTempCompDef = oTemplate.ComponentDefinition\n    \n    Dim oTempSB As SketchBlockDefinition\n    Set oTempSB = oTempCompDef.SketchBlockDefinitions.Item(\"Block Name\")\n        \n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveEditDocument ' This makes the code work if in assembly edit environment\n    \n    If oDoc.DocumentType <> kPartDocumentObject Then\n        MsgBox (\"Active Edit Document Is Not A Part File\")\n    End If\n        \n    Dim oCompDef As PartComponentDefinition\n    Set oCompDef = oDoc.ComponentDefinition\n    \n    ' Copy sketch block definition to current part document & close template\n    Call oTempSB.CopyTo(oDoc, True)\n    Call oTemplate.Close\n    \n    ' Expand Block Browser Node\n    oDoc.BrowserPanes.ActivePane.TopNode.BrowserNodes.Item(1).Expanded = True\n        \n    ' Define local sketch block definition\n    Dim oSB As SketchBlockDefinition\n    Set oSB = oCompDef.SketchBlockDefinitions.Item(\"Block Name\")\n    \n    ' Need to preselect the block definition\n    Call ThisApplication.activeDocument.SelectSet.Clear\n    Call ThisApplication.activeDocument.SelectSet.Select(oSB)\n    \n    ' Define & Execute command\n    Dim oCtrlDef As ControlDefinition\n    Set oCtrlDef = ThisApplication.CommandManager.ControlDefinitions.Item(\"SketchRigidSetPlaceInstanceCmd\")\n\n    Call oCtrlDef.Execute\nEnd Sub"], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: excel reading in ilogic code\n                    ", "solution": ["Sub Main()\nDim oDoc As Document = ThisDoc.Document\nDim sFilePath As String = ThisDoc.Path & \"\\\"\nGoExcel.Open(ThisDoc.Path & \"\\\" & \"Nozzles.xlsx\", \"Sheet1\")\nDim kk As Double = 1\nFor j = 1 To 10\n\tGoExcel.FindRowStart = kk+1\n\tDim i As Double = GoExcel.FindRow(ThisDoc.Path & \"\\\" & \"Nozzles.xlsx\", \"Sheet1\", \"RadialNozzle\", \"=\", \"true\",\"class\",\"=\",150,\"flangeType\",\"=\",0)\n\tIf i <> -1 Then\n\t\tkk = i\n\t\tDim aa As Double = GoExcel.CurrentRowValue(\"nominalDiameter\")\n\t\tMessageBox.Show(\"Message \" & aa & vbLf & \"Message \" & kk, \"Title\")\n\t\toDoc.Save\n\t\tsNewName = GoExcel.CellValue(\"B\" & i)\n\t\t'GoExcel.Close'Next j'GoExcel.Open(\"C:\\Users\\Ali Khakbaz\\Desktop\\nozzle\\WNFLG2.xlsx\", \"Sheet1\")'i = GoExcel.FindRow(\"C:\\Users\\Ali Khakbaz\\Desktop\\nozzle\\WNFLG2.xlsx\", \"Sheet1\", \"NPS\", \"=\", aa)\n\t\ti = GoExcel.FindRow(ThisDoc.Path & \"\\\" & \"WNFLG2.xlsx\", \"Sheet1\", \"NPS\", \"=\", aa)\n\t\tMessageBox.Show(\"Message\"  & i-1, \"Title\",MessageBoxButtons.OK)\n\t\tParameter(\"Lenght\") = GoExcel.CurrentRowValue(\"O\")\n\t\tRuleParametersOutput()\n\t\tThisDoc.Document.Update()\n\t\tThisDoc.Document.saveas(sFilePath & sNewName & \".ipt\", True)\n\tEnd If\nNext j\n", "GoExcel.Close", "\nThisApplication.ActiveView.Fit\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Post Code correctly\n                    ", "solution": [], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: Project geometry from one component to another\n                    ", "solution": [], "author": "keithjk"},
{"created at": [], "solution Title": "\n                        Re: Object type options for Centermark.AttachedEntity\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Using the Measure.MinimumDistance command\n                    ", "solution": ["Dim Face1 as Face\nDim Face2 as Face\nDim DistPoints as Double\n\nDim oDoc As PartDocument \noDoc = ThisApplication.ActiveDocument \nFace1 = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartFaceFilter, \"Pick Face 1 : \") \nFace2 = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartFaceFilter, \"Pick Face 2 : \") \n'DistPoints = Measure.MinimumDistance(Face1, Face2)\nDistPoints = ThisApplication.MeasureTools.GetMinimumDistance(Face1, Face2)\nMessageBox.Show(\"DistPoints = \" & DistPoints.ToString(), \"Title\")"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Invalid template error\n                    ", "solution": ["Global thing As Document", "On Error Resume Next", "ON ERROR GOTO MYERROR", "....BLAH....BLAH....", "MYERROR:", " MsgBox \"Error on line : \" & Erl"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: convert centerlines to sketch line using API\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: content file center components\n                    ", "solution": [], "author": "dominic.tunnell"},
{"created at": [], "solution Title": "\n                        Re: Area of derived features\n                    ", "solution": ["Dim", " ", "oPartDoc", " ", "As", " ", "PartDocument", "\n", "oPartDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oDef", " ", "As", " ", "PartComponentDefinition", "\n", "oDef", " ", "=", " ", "oPartDoc", ".", "ComponentDefinition", "\n\n", "For", " ", "Each", " ", "oSurfBody", " ", "As", " ", "SurfaceBody", " ", "In", " ", "oDef", ".", "SurfaceBodies", "\n\n    ", "st", " ", "&=", " ", "vbNewLine", " ", "&", " ", "oSurfBody", ".", "Name", " ", "&", " ", "vbNewLine", "\n    ", "Dim", " ", "volume", " ", "As", " ", "Double", " ", "=", " ", "oSurfBody", ".", "Volume", "(", "0.001", ")", "\n    ", "st", " ", "&=", " ", "\"", "volume = ", "\"", " ", "&", " ", "volume", " ", "&", " ", "vbNewLine", "\n\n    ", "Dim", " ", "area", " ", "As", " ", "Double", " ", "=", " ", "0.0", "\n\n    ", "Dim", " ", "oFace", " ", "As", " ", "Face", "\n    ", "oFace", " ", "=", " ", "oSurfBody", ".", "Faces", ".", "Item", "(", "1", ")", "\n\n    ", "Dim", " ", "oEval", " ", "As", " ", "SurfaceEvaluator", " ", "=", " ", "oFace", ".", "Evaluator", "\n    ", "area", " ", "=", " ", "area", " ", "+", " ", "oEval", ".", "Area", "\n\n    ", "st", " ", "&=", " ", "\"", "area = ", "\"", " ", "&", " ", "area", " ", "&", " ", "vbNewLine", "\n\n", "Next", "\n\n", "MsgBox", "(", "st", ")", "Dim", " ", "oPartDoc", " ", "As", " ", "PartDocument", "\n", "oPartDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oDef", " ", "As", " ", "PartComponentDefinition", "\n", "oDef", " ", "=", " ", "oPartDoc", ".", "ComponentDefinition", "\n\n", "Dim", " ", "oSurfBodies", " ", "As", " ", "SurfaceBodies", "\n", "oSurfBodies", "=", "oDef", ".", "SurfaceBodies", "\n\n", "Dim", " ", "oSurfBody", " ", "As", " ", "SurfaceBody", "\n", "oSurfBody", "=", "oSurfBodies", ".", "item", "(", "1", ")", "\n\n", "st", " ", "&=", " ", "vbNewLine", " ", "&", " ", "oSurfBody", ".", "Name", " ", "&", " ", "vbNewLine", "\n", "Dim", " ", "volume", " ", "As", " ", "Double", " ", "=", " ", "oSurfBody", ".", "Volume", "(", "0.001", ")", "\n", "st", " ", "&=", " ", "\"", "volume = ", "\"", " ", "&", " ", "volume", " ", "&", " ", "vbNewLine", "\n\n", "Dim", " ", "area", " ", "As", " ", "Double", " ", "=", " ", "0.0", "\n\n", "Dim", " ", "oFace", " ", "As", " ", "Face", "\n", "oFace", " ", "=", " ", "oSurfBody", ".", "Faces", ".", "Item", "(", "1", ")", "\n\n", "Dim", " ", "oEval", " ", "As", " ", "SurfaceEvaluator", " ", "=", " ", "oFace", ".", "Evaluator", "\n", "area", " ", "=", " ", "area", " ", "+", " ", "oEval", ".", "Area", "\n\n", "st", " ", "&=", " ", "\"", "area = ", "\"", " ", "&", " ", "area", " ", "&", " ", "vbNewLine", "\n\n", "MsgBox", "(", "st", ")"], "author": "Holgarsson"},
{"created at": [], "solution Title": "\n                        Re: Using API, change centerlines to sketchlines\n                    ", "solution": ["' Get the first item in the select set.  \n'This assumes a line is selected \nDim oSketchEnt As SketchEntity\nTry\noSketchEnt = ThisApplication.ActiveDocument.SelectSet.Item(1)\nCatch\nMessageBox.Show(\"Select a line, and only a line.\", \"iLogic\")\nReturn\nEnd Try\n\nDim oLine As SketchLine\noLine = oSketchEnt\n\n' Toggle the centerline property.\nIf oLine.Centerline Then\n\toLine.Centerline = False\nElse\n\toLine.Centerline = True\nEnd If\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Parent Occurence in iLogic\n                    ", "solution": ["Public Class PVars\n\tShared oTextSave As String = \"", "C:\\Users\\Public\\Documents\\iLogicBuffer.txt", "\"\n\t\n\tSub Main()\n\t\tDim oWrite As System.IO.StreamWriter = System.IO.File.CreateText(oTextSave)\n\t\tDim oDoc As Document = ThisApplication.ActiveDocument\n\t\tDim oCD As ComponentDefinition = oDoc.ComponentDefinition\n\t\tDim Occ As ComponentOccurrence\n\t\tDim oStr As String = \"\"\n\t\tDim oList As New List(Of Object)\n\t\toWrite.WriteLine(\"FILE REFERENCE TREE RAN FROM: \" & oDoc.FullFileName)\n\t\toWrite.Close\n\t\tFor Each Occ In oCD.Occurrences\n\t\t\tRecurReferencing(Occ, oStr, 0)\n\t\tNext\n\t\tProcess.Start (\"Notepad.exe\", oTextSave)\n\tEnd Sub\n\t\n\tSub RecurReferencing(Occ As ComponentOccurrence, oStr As String, Level As Integer)\n\t\tDim SubOcc As ComponentOccurrence\n\t\t\n\t\tIf Level = 0\n\t\t\toStr = Occ.Name\n\t\tElse\n\t\t\toStr = Occ.Name & \" <- \" & oStr\n\t\tEnd If\n\t\t\n\t\tDim SubParts As Integer = 0\n\t\tTry\n\t\t\tSubParts = Occ.Definition.Occurrences.Count\n\t\tCatch\n\t\tEnd Try\n\t\tIf SubParts = 0\n\t\t\toWrite = System.IO.File.AppendText(oTextSave)\n\t\t\toWrite.WriteLine(oStr)\t\n\t\t\toWrite.Flush()\n\t\t\toWrite.Close\n\t\tElse\n\t\t\tFor Each SubOcc In Occ.Definition.Occurrences\n\t\t\t\tRecurReferencing(SubOcc, oStr, Level + 1)\n\t\t\tNext\n\t\tEnd If\n\tEnd Sub\n\nEnd Class"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How to get the intersection Point between a curve and a curve\n                    ", "solution": ["Public Sub DrawSketchLine()\n    ' Check to make sure a sketch is open.\n    If Not TypeOf ThisApplication.activeEditObject Is PlanarSketch Then\n      MsgBox \"A sketch must be active.\"\n      Exit Sub\n    End If\n\n    ' Set a reference to the active sketch.\n    Dim oSketch As PlanarSketch\n    Set oSketch = ThisApplication.activeEditObject\n\n    ' Set a reference to the transient geometry collection.\n    Dim oTransGeom As TransientGeometry\n    Set oTransGeom = ThisApplication.TransientGeometry\n\n    ' Create a new transaction to wrap the construction of the three lines\n    ' into a single undo.\n    Dim oTrans As Transaction\n    Set oTrans = ThisApplication.TransactionManager.StartTransaction( _\n    ThisApplication.ActiveDocument, _\n    \"Create Triangle Sample\")\n\n     Dim oLines(1 To 3) As SketchLine\n    Set oLines(1) = oSketch.SketchLines.AddByTwoPoints(oTransGeom.CreatePoint2d(0, 0), _\n    oTransGeom.CreatePoint2d(4, 0))\n\n    Set oLines(2) = oSketch.SketchLines.AddByTwoPoints(oLines(1).EndSketchPoint, _\n    oTransGeom.CreatePoint2d(2, 3))\n\n     Set oLines(3) = oSketch.SketchLines.AddByTwoPoints(oLines(2).EndSketchPoint, _\n    oTransGeom.CreatePoint2d(2, -2))\n\n    ' End the transaction for the triangle.\n    oTrans.End\n    \n    Dim olineSeg_1 As LineSegment\n    Set olineSeg_1 = oLines(1).Geometry3d\n    \n    Dim olineSeg_2 As LineSegment\n    Set olineSeg_2 = oLines(3).Geometry3d\n    \n    Dim objsEnum As ObjectsEnumerator\n    Set objsEnum = oTransGeom.CurveCurveIntersection(olineSeg_1, olineSeg_2)\n    \n   \nEnd Sub"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Creating my first ADD-IN errors\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Is there a faster way?\n                    ", "solution": ["oLength = InputBox(\"Enter the length change (+ or -)in inches.\", \"iLogic\", \"0.25\")\n\nDim oAsmDoc as Inventor.AssemblyDocument\noAsmDoc = ThisDoc.Document\n\nDim comp As Inventor.ComponentOccurrence\n\n\t\t'Lista = \"\"\n\t\t\n\t\tFor Each oOcc In ThisApplication.ActiveDocument.ComponentDefinition.Occurrences.AllLeafOccurrences\n\t\t\t'Lista=oOcc.Name\n\t\t\t'WB commented above, it helps me to have a variable name that indicates what the varible is\n\t\t\toccName = oOcc.Name\n\t\t\t\n\t\t\t'WB added - just wanted to see the names of the occurrences and exit\n\t\t\t'MsgBox(\"occName = \" & occName)\n\t\t'Next\n\t\t'Return\n\n\t        'WB commented, not sure what this for loop was supposed to do\n\t\t\t'For Each comp In oAsmDoc.ComponentDefinition.Occurrences\n\t\t        'WB commented \n\t\t\t\t'rowName = iPart.RowName(comp.Name)\n\t\t\t\trowName = iPart.RowName(occName)\n\t\t\t\tRowValue = iPart.CurrentRowValue(\"Cutlength\")\n\t\t\t\tStockNoStringValue = iPart.CurrentRowStringValue(\"Stock Number\")\n\t\t\t\tNewLength = RowValue+oLength\n\t\t\t\tMemberStringValue = StockNoStringValue & \"-\" & NewLength\n\n\t\t\t\t'MsgBox(\"New Size==> \" & MemberStringValue & \" Current RowName==> \" & rowname & \" New Length ==> \"& NewLength)\n\t\t\t\t'MsgBox(\"Size==> \" & MemberStringValue & \" RowName==> \" & iPart.RowName(comp.Name) & \" New Length ==> \"& NewLength)\n\n\t\t\t\tMemberStringValue = iPart.CurrentRowStringValue(\"Stock Number\") & \"-\" & iPart.CurrentRowValue(\"Cutlength\") + oLength\n\n\t\t\t\t\n\t\t\t\t'iPart.ChangeRow(Lista, MemberStringValue)\n\t\t\t\tMsgBox(\"occName = \" & occName & \" Changing to \" & MemberStringValue)\n\t\t\t\tiPart.ChangeRow(occName, MemberStringValue)\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t'iPart.ChangeRow(\"iComponentName:1\", \"RowMemberName\")\n\t\t\t\t\n\t\t\t\t'i = iPart.FindRow(comp.Name, \"Member\", \"=\", MemberStringValue) \n\t \t\tNext\n   \t\t\tIf i < 0 Then\n       \t\t\tMessageBox.Show(\"Some problem occurred\", \"iLogic\")\n    \t\tElse\n        \t\t'MessageBox.Show(\"iPart set to row: \" & MemberStringValue , \"Change ALL members iLogic\")\n    \t\tEnd If\n\t\n\t\t'WB commented\n\t\t'Next"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: modify custom iproperty of selected(.Pick) component in assembly\n                    ", "solution": ["' Select parts, use Esc key when you have selected all wished parts", "\nDim Comps As ObjectCollection", "Dim Comp As ComponentOccurrence", "While True", "    Comp = ThisApplication.CommandManager.Pick(SelectionFilterEnum.", "kAssemblyLeafOccurrenceFilter", ",\"Select End 1:\")", "    ", "' If nothing gets selected then we're done", "    If IsNothing(comp) Then Exit While", "    comps.Add(comp) ", "End While", "' If none parts are selected, end the rule", "\nIf Comps.Count = 0 Then Exit Sub", "' Go throught all selected parts", "For Each Comp In Comps\n    MessageBox.Show(Comp.Name, \"End1\")\n    Dim oDoc as document = Comp.", "Definition", ".Document\n    oProSet = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n    oProSet.Item(\"Connected To\").Value = Comp.Name\nNext", "' Select part", "\nDim Comp As ComponentOccurrence\nComp = ThisApplication.CommandManager.Pick(SelectionFilterEnum.", "kAssemblyLeafOccurrenceFilter", ",\"Select End 1:\")\n\n", "' If no part is selected, end the rule", "\nIf Comp Is Nothing Then Exit Sub\n\nMessageBox.Show(Comp.Name, \"End1\")\nDim oDoc as document = Comp.", "Definition", ".Document\noProSet = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\noProSet.Item(\"Connected To\").Value = Comp.Name"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Ilogic/VB excel\n                    ", "solution": ["    Dim oDrawDoc As DrawingDocument\n    oDrawDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    oSheet = oDrawDoc.ActiveSheet\n    \n    Dim oContents(0 To 11) As String\n    oContents(0) = \"ADT-040\"\n    oContents(1) = \"29 1/2 in\"\n    oContents(2) = \"17 1/4 in\"\n    oContents(3) = \"_\" \n    oContents(4) = \"-\" 'if this is an underscore like line above it does not create the column \n    oContents(5) = \"1/2 in OD\"\n    oContents(6) = \"7/8 in OD\"\n    oContents(7) = \"3/4 in MPT\"\n    oContents(8) = \"28\"\n    oContents(9) = \"1\"\n    oContents(10) = \"1.8\"\n    oContents(11) = \"1 \" ' needed to add a space to get the column created\n    \n    Dim oPoint As Point2d\n    oPoint = ThisApplication.TransientGeometry.CreatePoint2d(55, 15)\n    \n    Dim oCustomTable As CustomTable\n   ' Set oCustomTable = oSheet.CustomTables.Add(\"Evap Details\", oPoint, 12, 1, oContents)\n    oCustomTable = oSheet.CustomTables.Add(\"Evap Details\", oPoint, 12, 1, oContents)\n    \n    oCustomTable.ShowTitle = False\n\n\toCustomTable.Rows(1).Delete"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Delete Features and Sketches\n                    ", "solution": ["Sub Main()\n", "    ", "' Get Document and Definition", "\n    Dim oDoc As Document = ThisApplication.ActiveDocument\n    Dim oCD As ComponentDefinition= oDoc.ComponentDefinition\n", "    ", "' Delete Features", "\n    Dim oFeat As PartFeature\n    For Each oFeat In oCD.Features\n        oFeat.Delete\n    Next\n", "    ", "' Delete Sketches", "\n    Dim oSketch As PlanarSketch\n    For Each oSketch in oCD.Sketches\n        oSketch.Delete\n    Next\n\nEnd Sub", "' Get Document and Definition", "\nDim oDoc As Document = ThisApplication.ActiveDocument\nDim oCD As ComponentDefinition= oDoc.ComponentDefinition", "\n", "' Delete Sketch by name", "\nDim oSketch As PlanarSketch = oCD.Sketches.Item(\"", "Feature Sketch", "\")\noSketch.Delete"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: VB.net create drawing dimensions for an assembly\n                    ", "solution": ["   Public Sub CreateViews_ADNTest()\n\n        Dim oInventorApplication As Inventor.Application\n        Try\n            oInventorApplication = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n        Catch\n        End Try\n\n        Dim oDrawDoc As DrawingDocument = oInventorApplication.ActiveDocument\n\n        Dim oSheet As Sheet = oDrawDoc.ActiveSheet\n\n        Dim oView As DrawingView = oSheet.DrawingViews(1)\n\n        Dim oRefDoc As AssemblyDocument = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\n        Dim WorkPoint1 As WorkPoint = oRefDoc.ComponentDefinition.WorkPoints(1)\n        Dim WorkPoint2 As WorkPoint = oRefDoc.ComponentDefinition.WorkPoints(2)\n\n        Dim oTG As TransientGeometry = oInventorApplication.TransientGeometry\n         \n        Try\n \n            ' Create centermarks based on the work points. \n            Dim marks(1) As Centermark\n            marks(0) = oSheet.Centermarks.AddByWorkFeature(WorkPoint1, oView)\n            'marks(0).Visible = False\n            marks(1) = oSheet.Centermarks.AddByWorkFeature(WorkPoint2, oView)\n            'marks(1).Visible = False\n            ' Create geometry intents for the center marks. \n            Dim intent1 As GeometryIntent\n            intent1 = oSheet.CreateGeometryIntent(marks(0))\n            Dim intent2 As GeometryIntent\n            intent2 = oSheet.CreateGeometryIntent(marks(1))\n\n            Dim oTextPosition As Point2d = oTG.CreatePoint2d(0, 0)\n\n            Dim genDim As GeneralDimension\n            genDim = oSheet.DrawingDimensions.GeneralDimensions.AddLinear(oTextPosition, intent1, intent2, DimensionTypeEnum.kAlignedDimensionType)\n\n        Catch ex As Exception\n        End Try \n\n\n    End Sub"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: iLogic Sheet metal properties\n                    ", "solution": ["\tCase 0.10459 To .10461"], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: ilogic rule to purge unused derived parameters\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Collapsing all children in main browser in drawing environment via VBA\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\noModelBP = oDrawDoc.BrowserPanes.Item(\"DlHierarchy\")\nFor Each oNode In oModelBP.TopNode.BrowserNodes\n\toNode.Expanded = False\nNext"], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: Template Paths to Current User's Desktop\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Create new idw Drawing with Visual Studio (VB.NET)\n                    ", "solution": [], "author": "rusmwb"},
{"created at": [], "solution Title": "\n                        Re: Ilocic for updating mass into drawing\n                    ", "solution": ["ThisDoc.ModelDocument.update\nmodeldocname = IO.Path.GetFileName(ThisDoc.ModelDocument.FullFileName)\nmass = iProperties.Mass(modeldocname)\n'3d file opslaan (anders verdwijnd gewicht in tekening)'modeldocname=Save\n\niProperties.Value(\"Custom\", \"Mass From Assembly\") = Round(mass) & \" kg\"\nInventorVb.DocumentUpdate()"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Custom Parts List Template\n                    ", "solution": [], "author": "rusmwb"},
{"created at": [], "solution Title": "\n                        Re: Automatically Create an iMate on Each Work Point in a Pattern\n                    ", "solution": [], "author": "petestrycharske"},
{"created at": [], "solution Title": "\n                        Re: Action based on color of part face\n                    ", "solution": [], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: Project 3d Sketch into 2d sketch\n                    ", "solution": ["    ", "Dim", " ", "oSketch", " ", "As", " ", "Inventor", ".", "PlanarSketch", "\n    ", "oSketch", " ", "=", " ", "oPartDef", ".", "Sketches", ".", "Add", "(", "oPartDef", ".", "WorkPlanes", "(", "2", "))", "\n\n    \n    ", "'", " Project 3D Spline", "\n    ", "Dim", " ", "oSpline", " ", "As", " ", "SketchSpline", "\n    ", "oSpline", " ", "=", " ", "oSketch", ".", "AddByProjectingEntity", "(", "Spline3D", ")"], "author": "acurtinT3UX6"},
{"created at": [], "solution Title": "\n                        Re: iLogic / VBA\n                    ", "solution": ["Sub", " ", "Main", "()", "\n ", "oDef", " ", "=", " ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", "\n    ", "For", " ", "i", "=", "1", " ", "To", " ", "8", "\n       \n        ", "Dim", " ", "oWPlane", " ", "As", " ", "WorkPlane", "\n        ", "oWPlane", " ", "=", " ", "oDef", ".", "WorkPlanes", ".", "AddByPlaneAndOffset", "(", "oDef", ".", "WorkPlanes", "(", "\"", "XY Plane", "\"", ")", ", ", "i", ", ", "cm", ")", "\n        ", "oWPlane", ".", "Name", " ", "=", " ", "\"", "My_New_Work_Plane", "\"", "&", "i", "\n        ", "Dim", " ", "oSketch", " ", "As", " ", "PlanarSketch", "\n        ", "oSketch", " ", "=", " ", "oDef", ".", "Sketches", ".", "Add", "(", "oWPlane", ")", "\n           ", "oSketch", ".", "Name", " ", "=", " ", "\"", "My_Sketch", "\"", "&", "i", "\n        ", "Dim", " ", "oTG", " ", "As", " ", "TransientGeometry", "\n        ", "oTG", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", "\n        ", "Dim", " ", "oWorkPoint", " ", "As", " ", "WorkPoint", "\n        ", "oWorkPoint", " ", "=", " ", "oDef", ".", "WorkPoints", ".", "AddFixed", "(", "oTG", ".", "CreatePoint", "(", "0", ", ", "0", ", ", "i", "))", "\n        \n        ", "oSketch", ".", "ProjectedCuts", ".", "Add", "()", "\n\n    ", "Next", "\n", "End Sub"], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: Changes made not at all appearing in the ui\n                    ", "solution": ["// List of some basic Ribbon panels\n// \"Assembly\" > \"id_TabAssemble\"\n// \"Part\"     > \"id_TabModel\"\n// \"Drawing\"  > \"id_TabPlaceViews\"\n// \"ZeroDoc\"  > \"id_GetStarted\"", "\nInventor.UserInterfaceManager UIManager\nUIManager = InventorApplication.UserInterfaceManager", "\nInventor.Ribbon assemblyRibbon\nassemblyRibbon = UIManager.Ribbons.Item(\"", "Assembly", "\")", "\nInventor.RibbonTab assembleTab\nassembleTab = assemblyRibbon.RibbonTabs.Item(\"", "id_TabAssemble", "\")", "\nInventor.RibbonPanel panel\nTry\n{", "    ", "// addInCLSIDString is the GuidAttribute of your addin and should be replaced by the actual reference", "\n    panel = assembleTab.RibbonPanels.Add(\"", "MySuperBar", "\", \"", "MySuperBar_Panel", "\", ", "addInCLSIDString", ") \n}\nCatch\n{\n    panel = assembleTab.RibbonPanels.Item(\"", "MySuperBar_Panel", "\")\n}", "\n", "// intead of m_ButtonDefinition write the actual button definition you're ussing to add the button", "\npanel.CommandControls.AddButton(", "m_ButtonDefinition", ", True) ", "// true for big button", "Inventor.UserInterfaceManager UIManager;\nUIManager = m_inventorApplication.UserInterfaceManager;\nInventor.Ribbon assemblyRibbon;\nassemblyRibbon = UIManager.Ribbons[\"Part\"];\nInventor.RibbonTab assembleTab;\ntry\n{\nassembleTab = assemblyRibbon.RibbonTabs[\"id_MyOwnTab\"];\n\n}\ncatch\n{\n// DisplayName, InternalName, ClientID, TargetTab, InsertBeforeTarget, Contextual\nassembleTab = ", "assemblyRibbon.RibbonTabs.Add(\"MyOwnTab\", \"id_MyOwnTab\", addInCLSIDString, \"id_TabModel\", true, false);", "\n}\nInventor.RibbonPanel panel;\ntry\n{\n// addInCLSIDString is the GuidAttribute of your addin and should be replaced by the actual reference\npanel = assembleTab.RibbonPanels.Add(\"MySuperBar\", \"MySuperBar_Panel\", addInCLSIDString);\n}\ncatch\n{\npanel = assembleTab.RibbonPanels[\"MySuperBar_Panel\"];\n}", "// intead of m_ButtonDefinition write the actual button definition you're ussing to add the button", "\npanel.CommandControls.AddButton(", "m_ButtonDefinition", ", ", "True", ") ", "// true for big button"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How to name a pattern\n                    ", "solution": ["oRectOccPattern", ".", "Name", " ", "=", " ", "\"", "Test", "\""], "author": "rikard.nilsson"},
{"created at": [], "solution Title": "\n                        Re: iLogic Suppressing the element 2 of a pattern, in a parent pattern problem\n                    ", "solution": ["Dim oDoc As AssemblyDocument\noDoc = ThisApplication.ActiveDocument\n\n'reference the pattern in the assembly \nDim oPattern As OccurrencePattern \n'calls the pattern by name\noPattern = oDoc.ComponentDefinition.OccurrencePatterns.Item(\"", "4 CAB PAT", "\") \n\noPattern.OccurrencePatternElements(2).", "Components(1).OccurrencePatternElements(2)", ".Suppressed=True"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Run ilogic external rule with Inventor VBA\n                    ", "solution": ["Public Sub RunRule()\n    RuniLogic (\"C:\\Path\\MyRule.iLogicVb\")\nEnd Sub\n\nPublic Sub RuniLogic(ByVal RuleName As String)\n    Dim iLogicAuto As Object\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    If oDoc Is Nothing Then\n        MsgBox \"Missing Inventor Document\"\n        Exit Sub\n    End If\n    Set iLogicAuto = GetiLogicAddin(ThisApplication)\n    If (iLogicAuto Is Nothing) Then Exit Sub\n    iLogicAuto.RunExternalRule oDoc, RuleName\nEnd Sub\n \nPublic Function GetiLogicAddin(oApplication As Inventor.Application) As Object\n    Dim addIn As ApplicationAddIn\n    On Error GoTo NotFound\n    Set addIn = oApplication.ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\n    If (addIn Is Nothing) Then Exit Function\n    addIn.Activate\n    Set GetiLogicAddin = addIn.Automation\n    Exit Function\nNotFound:\nEnd Function"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: EXPORT BOM\n                    ", "solution": ["Imports System.Windows.Forms", "Imports System.IO", "Public Sub Main", "\u00a0\u00a0 \u00a0Dim oPath As String", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0' Search for the folder", "\u00a0\u00a0 \u00a0Dim Dialog = New FolderBrowserDialog()", "\u00a0\u00a0 \u00a0Dialog.ShowNewFolderButton = True", "\u00a0\u00a0 \u00a0Dialog.Description = \"Jef_E Bom's export tool\"", "\u00a0\u00a0 \u00a0' Show dialog box", "\u00a0\u00a0 \u00a0If DialogResult.OK = Dialog.ShowDialog() Then", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' User clicked 'ok' on dialog box - capture the export path", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oPath = Dialog.SelectedPath & \"\\\"", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0Else", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' User clicked 'cancel' on dialog box - exit", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Return", "\u00a0\u00a0 \u00a0End If", "\u00a0\u00a0 \u00a0' Make a reference to a directory.", "\u00a0\u00a0 \u00a0Dim oDirectoryInfo As New DirectoryInfo(oPath)", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0' Get a reference to each file in that directory.", "\u00a0\u00a0 \u00a0Dim oFileArray As FileInfo() = oDirectoryInfo.GetFiles()", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0' Display the names of the files.", "\u00a0\u00a0 \u00a0Dim oFileInfo As FileInfo", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0' Loop through all files in the directory (not in the sub directories.)", "\u00a0\u00a0 \u00a0For Each oFileInfo In oFileArray", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0If oFileInfo.Name.contains(\".iam\") Then", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' Open the file", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0ThisApplication.Documents.Open(oFileInfo.FullName, True) ", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' Export the BOM", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' Set a reference to the assembly document.", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' This assumes an assembly document is active.", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Dim oDoc As AssemblyDocument", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oDoc = ThisApplication.ActiveDocument", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' Set a reference to the BOM", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Dim oBOM As BOM", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oBOM = oDoc.ComponentDefinition.BOM", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' Set the structured view to 'all levels'", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oBOM.StructuredViewFirstLevelOnly = False", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' Make sure that the structured view is enabled.", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oBOM.StructuredViewEnabled = True", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' Set a reference to the \"Structured\" BOMView", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Dim oStructuredBOMView As BOMView", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oStructuredBOMView = oBOM.BOMViews.Item(\"Structured\")", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Dim oExcelPath As String", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oExcelPath = oPath & System.IO.Path.GetFileNameWithoutExtension(oDoc.FullFileName)& \".xls\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' Export the BOM view to an Excel file", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oStructuredBOMView.Export(oExcelPath, kMicrosoftExcelFormat)", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0' Close the document", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oDoc.Close", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0End If", "\u00a0\u00a0 \u00a0Next", "End Sub"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: HSM Postprozessor Heidenhain \u00c4nderung\n                    ", "solution": [], "author": "Mark.Lancaster"},
{"created at": [], "solution Title": "\n                        Re: ilogic add property from excel\n                    ", "solution": ["MessageBox.Show(\"Row Number is: \" & i, \"iLogic\")", "' User will give part number in an input box:\nstrNum = InputBox(\"Please enter the part number\", \"Get Data\")\n\n' Excel sheet with information, column 1= Part Num, column 2=Description\ni = GoExcel.FindRow(\"C:\\TEMP\\MyWorkBook.xlsx\", \"Sheet1\", \"Part Num\", \"=\", strNum)\n\nIf i <= 0 Then\nMessageBox.Show(\"Part Number Not Found\", \"Error\")\nEnd If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Constrain Midpoint in Assembly\n                    ", "solution": [], "author": "dg2405"},
{"created at": [], "solution Title": "\n                        Re: Get iProperties of Component Occurrences\n                    ", "solution": ["Sub Main()\n    Dim oStr As String", "\n    Dim oDrawingDoc As DrawingDocument ", "    Try\n        oDwgDoc = ThisApplication.ActiveDocument ", "    Catch", "        MsgBox(\"For use in drawing documents only!\")", "        Exit Sub", "    End Try\n", "    Dim oAsmDoc As AssemblyDocument ", "    Try", "        oAsmDoc = oDwgDoc", ".ActiveSheet.Drawing", "Views.Item(1).ReferencedDocumentDescriptor.Referen", "cedDocument", "    Catch", "        MsgBox(\"This rule only works on drawing sheets with an assembly as the first view!\")", "        Exit Sub", "    End Try", "\n    oStr = TraverseAssembly(oAsmDoc.ComponentDefinition.Occurrences, 1, oStr)\n    MsgBox(oStr)\nEnd Sub \n\nFunction TraverseAssembly(Occurrences As ComponentOccurrences, Level As Integer, oStr As String) \n\n   \tDim oOcc As ComponentOccurrence \n   \tFor Each oOcc In Occurrences\n        oStr = oStr & vblf & oOcc.Definition.Document.DisplayName & \" - \" & oOcc.Definition.Document.PropertySets.Item(\"Inventor Document Summary Information\").Item(\"Category\").Value\n\t\t'oStr = oStr & \" - \" & oOcc.Definition.Document.PropertySets.Item(\"Design Tracking Properties\").Item(\"Stock Number\").Value\n        If oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then \n            oStr = TraverseAssembly(oOcc.SubOccurrences, Level + 1, oStr) \n        End If\n    Next\n\tReturn oStr\nEnd Function"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Backspace issue in addin form window\n                    ", "solution": [], "author": "fakeru"},
{"created at": [], "solution Title": "\n                        Re: Run macro on directory of drawings\n                    ", "solution": ["Public Sub ToExcel()\n    ' Get the drawing directory to be processed\n    Dim txtPath As String\n    txtPath = \"\\\\SOTAWIN2\\Drafting\\Projects\\14-07 Seaport B\\Inventor\\F - Frames\\\"\n    \n    ' Get all of the drawing files in the directory and subdirectories.\n    Dim drawings() As String\n    Call GetAllFiles(txtPath, \"*.idw\", drawings)\n    \n    ' Iterate through the found drawings.\n    Dim i As Integer\n    For i = 0 To UBound(drawings)\n        Dim drawing As String\n        drawing = drawings(i)\n        \n        Dim drawDoc As Inventor.DrawingDocument\n        Set drawDoc = ThisApplication.Documents.Open(drawing)\n\n        ' Export parts list info to Excel\n        ExportPartslisttoExcel\n\n        ' Close the drawing.\n        drawDoc.Close (True)\n    Next\nEnd Sub\n\n\n\nPublic Function GetAllFiles(path As String, searchString As String, fileList() As String)\n    ' Get the list of files in the current directory.\n    Dim fileCount As Integer\n    On Error Resume Next\n    fileCount = UBound(fileList) + 1\n    If Err Then\n        fileCount = 0\n    End If\n    On Error GoTo 0\n    \n    Dim maxCount As Integer\n    maxCount = fileCount\n    Dim filename As String\n    filename = Dir(path & searchString, vbNormal)\n    Do While filename <> \"\"\n        If fileCount = maxCount Then\n            maxCount = fileCount + 50\n            ReDim Preserve fileList(maxCount - 1)\n        End If\n        \n        fileCount = fileCount + 1\n        fileList(fileCount - 1) = path & filename\n        \n        filename = Dir\n    Loop\n    ReDim Preserve fileList(fileCount - 1)\n    \n    ' Build a list of the directories.\n    Dim directoryList() As String\n    Dim maxDirectories As Integer\n    maxCount = 0\n    Dim directoryCount As Integer\n    directoryCount = 0\n    \n    Dim dirName As String\n    dirName = Dir(path, vbDirectory)\n    Do While dirName <> \"\"\n        If dirName <> \".\" And dirName <> \"..\" And dirName <> \"OldVersions\" Then\n            If (GetAttr(path & dirName) And vbDirectory) Then\n                If directoryCount = maxCount Then\n                    maxCount = directoryCount + 50\n                    ReDim Preserve directoryList(maxCount - 1)\n                End If\n                \n                directoryCount = directoryCount + 1\n                directoryList(directoryCount - 1) = path & dirName & \"\\\"\n            End If\n        End If\n        \n        dirName = Dir\n    Loop\n    \n    ' Process the subdirectories.\n    If directoryCount > 0 Then\n        ReDim Preserve directoryList(directoryCount - 1)\n        \n        Dim i As Integer\n        For i = 0 To UBound(directoryList)\n            Call GetAllFiles(directoryList(i), searchString, fileList)\n        Next\n    End If\nEnd Function"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Change the currency from euro to dollars\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Can't access drawing Property Sets\n                    ", "solution": ["Public Sub TestCustomProps()\n    ' Get the active document.\n    Dim drawDoc As Document\n    Set drawDoc = ThisApplication.ActiveDocument\n    \n    ' Get the custom property set.\n    Dim customPropSet As PropertySet\n    Set customPropSet = drawDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n    ' Get the custom property named \"FRAME NUMBER\".\n    Dim frameNo As String\n    frameNo = GetProperty(customPropSet, \"FRAME NUMBER\")\n    \n    ' Get the custom property named \"QUANTITY\".\n    Dim frameQty As String\n    frameQty = GetProperty(customPropSet, \"QUANTITY\")\nEnd Sub\n\nPublic Function GetProperty(PropSet As PropertySet, PropertyName As String) As Variant\n    On Error Resume Next\n    GetProperty = PropSet.Item(PropertyName).Value\n    If Err Then\n        GetProperty = \"\"\n    End If\n    On Error GoTo 0\nEnd Function\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Adding 'AS REQ'D' to Parts List automatically\n                    ", "solution": [], "author": "Mark.Lancaster"},
{"created at": [], "solution Title": "\n                        Re: Inventor running second instance of my addin\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Hello,everybody. I just want to confirm VBA for tube and piping of inventor.\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Find specific line in part 2d sketch using vba\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: FlatExtentsLength and FlatExtentsWidth don't match from ipt to iam\n                    ", "solution": [], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: Get the parent of the selected component\n                    ", "solution": ["Option Explicit\n\nSub SelectedObjects()\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSelectSet As SelectSet\n    Set oSelectSet = oDoc.SelectSet\n    \n    Dim oSelectedObject As Object\n  \n    For Each oSelectedObject In oSelectSet\n        If TypeOf oSelectedObject Is ComponentOccurrence Then\n            Debug.Print (oSelectedObject.Definition.Document.DisplayName)\n            Debug.Print (oSelectedObject.ParentOccurrence.Name)\n            Debug.Print (\"------\")\n        Else\n            \n        End If\n    Next\nEnd Sub"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Inventor API: Add Coincident \u2014 Lines with Origin Point\n                    ", "solution": ["Public Sub DrawAxis()\n    ' Check to make sure a sketch is open.\n    If Not TypeOf ThisApplication.ActiveEditObject Is PlanarSketch Then\n        MsgBox \"A sketch must be active.\"\n        Exit Sub\n    End If\n\n    ' Set a reference to the active sketch.\n    Dim oSketch As PlanarSketch\n    Set oSketch = ThisApplication.ActiveEditObject\n\n    ' Set a reference to the transient geometry collection.\n    Dim oTransGeom As TransientGeometry\n    Set oTransGeom = ThisApplication.TransientGeometry\n    \n    ' Create a new transaction to wrap the construction of axis\n    ' into a single undo.\n    Dim oTrans As Transaction\n    Set oTrans = ThisApplication.TransactionManager.StartTransaction( _\n        ThisApplication.ActiveDocument, \"Create Axis\")\n\n    ' Create lines\n    Dim oLine1 As SketchLine\n    Dim oLine2 As SketchLine\n       \n    Set oLine1 = oSketch.SketchLines.AddByTwoPoints(oTransGeom.CreatePoint2d(-2, 0), _\n        oTransGeom.CreatePoint2d(2, 0))\n    \n    Set oLine2 = oSketch.SketchLines.AddByTwoPoints(oTransGeom.CreatePoint2d(0, -2), _\n        oTransGeom.CreatePoint2d(0, 2))\n                  \n    ' Axis property\n    oLine1.Centerline = True\n    oLine2.Centerline = True\n    \n    ' Constraints\n    Call oSketch.GeometricConstraints.AddHorizontal(oLine1)\n    Call oSketch.GeometricConstraints.AddVertical(oLine2)\n    \n    Dim oPoint As WorkPoint\n    Set oPoint = ThisApplication.ActiveDocument.ComponentDefinition.WorkPoints.Item(1)\n    \n    Dim oOriginSketchPoint As SketchPoint\n    Dim oSketchPoint As SketchPoint\n    For Each oSketchPoint In oSketch.SketchPoints\n        If oSketchPoint.ReferencedEntity Is oPoint Then\n            Set oOriginSketchPoint = oSketchPoint\n            Exit For\n        End If\n    Next\n    \n    ' Create the sketch point for the origin, if it doesn't already exist.\n    If oOriginSketchPoint Is Nothing Then\n        ' Project the origin point onto the sketch.\n        Set oOriginSketchPoint = oSketch.AddByProjectingEntity(oPoint)\n    End If\n    \n    Call oSketch.GeometricConstraints.AddCoincident(oLine1, oOriginSketchPoint)\n    Call oSketch.GeometricConstraints.AddCoincident(oLine2, oOriginSketchPoint)\n    \n    ' End the transaction for the axis.\n    oTrans.End\n    \n    ThisApplication.ActiveView.Fit\nEnd Sub"], "author": "intuki"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule doesn't update, but iProperties do.\n                    ", "solution": [], "author": "Projetos2013"},
{"created at": [], "solution Title": "\n                        Re: Ribbon button image\n                    ", "solution": [], "author": "mikazakov"},
{"created at": [], "solution Title": "\n                        Re: BOM and PartsList don't ackwonledge the real dimensions of the iPart\n                    ", "solution": [], "author": "Projetos2013"},
{"created at": [], "solution Title": "\n                        Re: PartsList doesn't change as the rule.\n                    ", "solution": [], "author": "Projetos2013"},
{"created at": [], "solution Title": "\n                        Re: iProperties don't change on the iam file\n                    ", "solution": [], "author": "Projetos2013"},
{"created at": [], "solution Title": "\n                        Re: Create Dimension between two points in idw\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Command doesn't get executed\n                    ", "solution": ["Public Sub MoveFace()\n\n    Call ThisApplication.CommandManager.ControlDefinitions.Item(\"PartDirectCmd\").Execute\n\nEnd Sub"], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: Button selection\n                    ", "solution": [], "author": "t0968639585"},
{"created at": [], "solution Title": "\n                        Re: ThisApplication.OpenDocumentsDisplay\n                    ", "solution": ["If ThisApplication.OpenDocumentsDisplay = True Then\nThisApplication.OpenDocumentsDisplay = False\nElse\nThisApplication.OpenDocumentsDisplay = True\nEnd If\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Drawing Scale Adaptivity\n                    ", "solution": ["ActiveSheet.View(\"Elevation\").Scale = (Ceil((ActiveSheet.View(\"Elevation\").Scale*((ActiveSheet.Height*0.7)/(ActiveSheet.View(\"Elevation\").Height)))*100)/100) \n\nActiveSheet.View(\"Elevation\").ScaleString = ActiveSheet.View(\"Elevation\").Scale*100 & \":100\""], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: Run ilogic rule in each part from the assembly via external rule\n                    ", "solution": ["Dim", " ", "openDoc", " ", "As", " ", "Document", "\n", "openDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n\n", "Dim", " ", "docFile", " ", "As", " ", "Document", " \n\n", "If", " ", "openDoc", ".", "DocumentType", " ", "=", " ", "12291", " ", "Then", "\n\n    ", "For", " ", "Each", " ", "docFile", " ", "In", " ", "openDoc", ".", "AllReferencedDocuments", "\n        ", "'", "Is a Sheet Metal File", "\n        ", "If", " ", "docFile", ".", "SubType", ".", "Equals", "(", "\"", "{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}", "\"", ")", " ", "Then", "\n\n            ", "'", "Obtain max & min flat sizes of part", "\n            ", "Dim", " ", "smComp", " ", "As", " ", "SheetMetalComponentDefinition", " ", "=", " ", "docFile", ".", "ComponentDefinition", "\n            ", "If", " ", "smComp", ".", "HasFlatPattern", " ", "Then", "\n                ", "'", "Get Units of Measure Object", "\n                ", "Dim", " ", "uom", " ", "As", " ", "UnitsOfMeasure", " ", "=", " ", "docFile", ".", "UnitsOfmeasure", "\n                ", "'", "Get FlatPattern Dims returned as the document units", "\n                ", "x", " ", "=", " ", "uom", ".", "ConvertUnits", "(", "MaxOfMany", "(", "smComp", ".", "FlatPattern", ".", "Length", ", ", "smComp", ".", "FlatPattern", ".", "Width", ")", ", ", "\"", "cm", "\"", ", ", "uom", ".", "LengthUnits", ")", "\n                ", "y", " ", "=", " ", "uom", ".", "ConvertUnits", "(", "MinOfMany", "(", "smComp", ".", "FlatPattern", ".", "Length", ", ", "smComp", ".", "FlatPattern", ".", "Width", ")", ", ", "\"", "cm", "\"", ", ", "uom", ".", "LengthUnits", ")", "\n                \n                ", "'", "Get Partnumber", "\n                ", "partNumber", " ", "=", " ", "docFile", ".", "PropertySets", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", ".", "Item", "(", "\"", "Part Number", "\"", ")", ".", "Value", "\n                ", "'", "Read R number of part", "\n                ", "materialName", " ", "=", " ", "smComp", ".", "Material", ".", "Name", "\n                ", "material1", " ", "=", " ", "materialName", ".", "SubString", "(", "0", ", ", "6", ")", "\n                \n                ", "'", "Read Max stock sizes Of material", "\n                ", "GoExcel", ".", "TitleRow", " ", "=", " ", "3", "\n                ", "i", " ", "=", " ", "GoExcel", ".", "FindRow", "(", "\"", "F:\\Reports\\RPT-E2I-012 - Parts Costing.xls", "\"", ", ", "\"", "Parts Costing", "\"", ", ", "\"", "Part Num", "\"", ", ", "\"", "=", "\"", ", ", "material1", ")", "\n                ", "maxX", " ", "=", " Double.Parse(", "GoExcel", ".", "CurrentRowValue", "(", "\"", "size_x", "\"", "))", "\n                ", "maxY", " ", "=", " Double.Parse(", "GoExcel", ".", "CurrentRowValue", "(", "\"", "size_y", "\"", "))", "\n\n                ", "'", "Check flat sizes don't exceed stock sizes", "\n                ", "If", " ", "x", " ", ">", " ", "maxX", " ", "Or", " ", "y", " ", ">", " ", "maxY", " ", "Then", "\n                    ", "MessageBox", ".", "Show", "(", "\"", "Error In ", "\"", " ", "&", " ", "partNumber", " ", "&", " ", "vbLf", "  ", "&", " ", "\"", "Your dimensions are too large for ", "\"", " ", "&", " ", "materialName", " ", "&", " ", "\"", ".", "\"", " ", "&", " ", "vbLf", " ", "&", " ", "\"", "Max dimensions are: ", "\"", " ", "&", " ", "maxX", " ", "&", " ", "\"", " x ", "\"", " ", "&", " ", "maxY", " ", "&", " ", "vbLf", " ", "&", " ", "\"", "Your dimensions are: ", "\"", " ", "&", " ", "Ceil", "(", "x", ")", " ", "&", " ", "\"", " x ", "\"", " ", "&", " ", "Ceil", "(", "y", ")", ", ", "\"", "ERROR!", "\"", ",", "MessageBoxButtons", ".", "OK", ",", "MessageBoxIcon", ".", "Error", ")", "                    \n                    ", "RuleParametersOutput", "()", "\n                ", "End", " ", "If", "\n            ", "End", " ", "If", "\n        ", "End", " ", "If", "\n    ", "Next", "\n    \n", "Else", "\n    \n    ", "MessageBox", ".", "Show", "(", "\"", "You must have a valid Assembly document open before using this code!", "\"", ", ", "\"", "File Type Mismatch!", "\"", ",", "MessageBoxButtons", ".", "OK", ",", "MessageBoxIcon", ".", "Exclamation", ")", "\n    \n", "End", " ", "If"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Global Form usage across multiple open documents\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Adding a drop down list in a Form\n                    ", "solution": [], "author": "mwighton"},
{"created at": [], "solution Title": "\n                        Re: Add \u00d8-symbol in front of an automatically created dimension\n                    ", "solution": [], "author": "iogurt1"},
{"created at": [], "solution Title": "\n                        Re: Create a solid for each loop\n                    ", "solution": ["Public Sub CreateBodies()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    ' Have a work plane selected to create the new sketch on.\n    Dim plane As WorkPlane\n    Set plane = ThisApplication.CommandManager.Pick(kWorkPlaneFilter, \"Pick work plane\")\n    \n    ' Create a new sketch.\n    Dim sk As PlanarSketch\n    Set sk = partDoc.ComponentDefinition.Sketches.Add(plane)\n    \n    Dim extFeatures As ExtrudeFeatures\n    Set extFeatures = partDoc.ComponentDefinition.features.ExtrudeFeatures\n    \n    ' Create the cut geometry.\n    Call sk.ProjectedCuts.Add\n    \n    ' Create a profile, which will include all loops.\n    Dim prof As Profile\n    Set prof = sk.Profiles.AddForSolid\n    \n    ' Iterate through the loops creating an extrusion for each loop.\n    Dim i As Integer\n    For i = 1 To prof.Count\n        ' Create a new profile.\n        Dim newprof As Profile\n        Set newprof = sk.Profiles.AddForSolid\n        \n        ' Delete all of the loops in the profile except for one.\n        Dim j As Integer\n        Dim deleteIndex As Integer\n        deleteIndex = 1\n        For j = 1 To prof.Count - 1\n            If i = j Then\n                deleteIndex = 2\n            End If\n            \n            newprof.Item(deleteIndex).Delete\n        Next\n        \n        ' Create the extrusion.\n        Dim extDef As ExtrudeDefinition\n        Set extDef = extFeatures.CreateExtrudeDefinition(newprof, kNewBodyOperation)\n        Call extDef.SetDistanceExtent(2, kPositiveExtentDirection)\n        Call extFeatures.Add(extDef)\n    Next\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Offset Sketch Arc\n                    ", "solution": ["Dim oArc As SketchArc\nSet oArc = oSketch.SketchArcs.AddByCenterStartEndPoint(oTrans\u200bGeom.CreatePoint2d(0, 0), oTransGeom.CreatePoint2d(-5, 0), oTransGeom.CreatePoint2d(5, 0), True)\n\n' Create a new object collection\nDim oCollection As ObjectCollection\nSet oCollection = ThisApplication.TransientObjects.CreateObjectColle\u200bction\n\n' Add the first sketch line of the rectangle to the collection\noCollection.Add oArc\n\n' Offset\nDim offsettedentities As SketchEntitiesEnumerator\nSet offsettedentities = oSketch.OffsetSketchEntitiesUsingPoint"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Unknown iLogic error - VaultAccess\n                    ", "solution": ["    Public Sub CreateiLogicRuleClearanceCalcs()\n        \u2018\u2026 other code to create text for rule\n        invApp.SilentOperation = True \u2018don\u2019t know if this has any real effect here, may not be necessary.\n        Dim iLogAuto As Object 'Autodesk.iLogic.Interfaces.IiLogicAutomation\n        iLogAuto = addin.Automation\n        iLogAuto.CallingFromOutside = True\n        iLogAuto.EnterDelayedRuleRunningMode()\n        Dim newRule As Object = iLogAuto.AddRule(ClearanceModel, \"ClearanceCalcs\", \"\")\n        newRule.text = strRuleClearanceCalcs\n        iLogAuto.ExitDelayedRuleRunningMode()\n        iLogAuto.RulesOnEventsEnabled = True\n        'iLogAuto.RunRule(ClearanceModel, \"ClearanceCalcs\")\n        'iLogAuto.CallingFromOutside = False\n        AssignRuleToILogicEvent(ClearanceModel, \"ClearanceCalcs\", \"BeforeDocSave0\", 700)\n        invApp.SilentOperation = False\n    End Sub\n\n    Public Sub AssignRuleToILogicEvent(invDoc As Inventor.Document, ruleName As String, strEvent As String, strID As String)\n        Dim customiPropSet As PropertySet = Nothing\n        For Each propSet As PropertySet In invDoc.PropertySets\n            If propSet.Name = \"iLogicEventsRules\" Then\n                customiPropSet = propSet\n                Exit For\n            End If\n            If propSet.Name = \"_iLogicEventsRules\" Then\n                customiPropSet = propSet\n                Exit For\n            End If\n        Next\n        If customiPropSet IsNot Nothing Then\n            If customiPropSet.InternalName <> \"{2C540830-0723-455E-A8E2-891722EB4C3E}\" Then\n                customiPropSet.Delete()\n                customiPropSet = invDoc.PropertySets.Add(\"iLogicEventsRules\", \"{2C540830-0723-455E-A8E2-891722EB4C3E}\")\n            End If\n        End If\n        If customiPropSet Is Nothing Then\n            customiPropSet = invDoc.PropertySets.Add(\"iLogicEventsRules\", \"{2C540830-0723-455E-A8E2-891722EB4C3E}\")\n        End If\n        If customiPropSet Is Nothing Then\n            MsgBox(\"Unable to create event triggers for this file.\",, \"Event Triggers\")\n        End If\n        If customiPropSet IsNot Nothing Then customiPropSet.Add(ruleName, strEvent, strID)\n    End Sub"], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: Find IDW file from inside an IPT file\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Convert text to variable\n                    ", "solution": ["Dim x(2) As Double\nx(0) = variable1\nx(1) = variable2\nx(2) = variable3\n\ni = 3\n\nFor i = 0 To i-1\n    z = x(i)\n\n    Trace.Writeline(\"ilogic = \" & z)\nNext i"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Renumber BOM iLogic/API question\n                    ", "solution": ["oBOMView = ThisDoc.Document.ComponentDefinition.BOM.BOMViews.Item(\"Structured\")\nCall oBOMView.Renumber(10, 10)\n", "'define the model (gets the first model in the drawing, if there is more than 1)\noModelDoc = ThisDrawing.ModelDocument\n\n'get the structured BOM view\noBOMView = oModelDoc.ComponentDefinition.BOM.BOMViews.\u200bItem(\"Structured\")\n\n'renumber the BOM\nCall oBOMView.Renumber(10, 10)\n\n'update the drawing (parts list, balloons, etc.)\nInventorVb.DocumentUpdate()\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Change active sheet\n                    ", "solution": [], "author": "AlbertoOutline"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic to change dimension styles on drawing\n                    ", "solution": ["'check for parameter and create if not found\nTry\noTest = Parameter(\"DimStyle\") \nCatch\n'create multi-value text parameter\nThisDoc.Document.Parameters.UserParameters.AddByValue _\n(\"DimStyle\", \"ANSI\", UnitsTypeEnum.kTextUnits)\n\n'set list\nMultiValue.SetList(\"DimStyle\", \"ANSI\", \"ISO\")\nEnd Try\nParameter.Param(\"DimStyle\").IsKey\u200b = True\n\niLogicVb.UpdateWhenDone = True\n\n \n'define the drawing document\nDim oDrawDoc As DrawingDocument = ThisDoc.Document\n\n'look at each sheet\nFor Each oSheet In oDrawDoc.Sheets \n\t'reference to the style manager\n\tDim oStylesMgr As DrawingStylesManager = oDrawDoc.StylesManager\n\t\n\t'get the reference to the target dimension style (by name)\n\tDim oDimStyle As DimensionStyle \n\t\n\tIf DimStyle = \"ANSI\" Then\n\t\toDimStyle = oStylesMgr.DimensionStyles.Item(\"Style, ANSI\")\n\tElse\n\t\toDimStyle = oStylesMgr.DimensionStyles.Item(\"Style, ISO\")\n\tEnd If\n\t\n\t'change general dimensions\n\tDim oDims As DrawingDimensions = oSheet.DrawingDimensions\n\tFor Each oDim As GeneralDimension In oDims\n\t\toDim.Style = oDimStyle\n\tNext\n\t\n\t'change Hole and Thread Notes\n\tDim oThreadNote As HoleThreadNote\n\tFor Each oThreadNote In oSheet.DrawingNotes.HoleThreadNotes\n\t\toThreadNote.Style = oDimStyle\n\tNext\nNext 'sheet \n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Transformation matrix of components in flexible assembly\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: I Logic to set part numbers.\n                    ", "solution": [], "author": "smilinger"},
{"created at": [], "solution Title": "\n                        Re: VB.net Output combobox value to inventor Model parameters\n                    ", "solution": [], "author": "BromanSillito"},
{"created at": [], "solution Title": "\n                        Betreff: Is a flat pattern sheetmetal part open?\n                    ", "solution": ["If TypeOf ThisApplication.ActiveEditObject Is FlatPattern Then\n        MessageBox.Show(\"Flat Pattern Active\", \"Title\")\n\n    End If", "If Not TypeOf ThisApplication.ActiveEditObject Is FlatPattern Then\n        MessageBox.Show(\"Flat Pattern is NOT Active\", \"Title\")\n\n    End If"], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: Check Inventor is idle\n                    ", "solution": [], "author": "DWhiteley"},
{"created at": [], "solution Title": "\n                        Re: Run a Vba Macro after Save Document\n                    ", "solution": ["InventorVb", ".", "RunMacro", "(", "\"", "ApplicationProject", "\"", ", ", "ModuleName", ", ", "MacroName", ")"], "author": "Projetos2013"},
{"created at": [], "solution Title": "\n                        Re: iLogic help\n                    ", "solution": ["If", " ", "Parameter", "(", "eight_hole", ")", " ", "=", " ", "True", " ", "Then", " \n", "Feature", ".", "IsActive", "(", "\"", "eight bolt", "\"", ")", " ", "=", " ", "True", "  \n", "Else", "  \n", "Feature", ".", "IsActive", "(", "\"", "eight bolt", "\"", ")", " ", "=", " ", "False", "\n", "End", " ", "If", "If", " ", "eight_hole", " ", "=", " ", "True", " ", "Then", " \n", "Feature", ".", "IsActive", "(", "\"", "eight bolt", "\"", ")", " ", "=", " ", "True", "  \n", "Else", "  \n", "Feature", ".", "IsActive", "(", "\"", "eight bolt", "\"", ")", " ", "=", " ", "False", "\n", "End", " ", "If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Create \"Linear Diameter\" with iLogic\n                    ", "solution": ["'", " iLogic-isms", "\n", "Dim", " ", "vw", " ", "As", " ", "DrawingView", "\n", "vw", " ", "=", " ", "ActiveSheet", ".", "View", "(", "\"", "VIEW1", "\"", ")", ".", "View", "\n\n", "Dim", " ", "sh", " ", "As", " ", "Sheet", "\n", "sh", " ", "=", " ", "ActiveSheet", ".", "Sheet", "\n\n\n\n", "'", " Interactive selection for testing purposes.", "\n", "Dim", " ", "doc", " ", "as", " ", "DrawingDocument", "\n", "doc", " ", "=", " ", "ThisDoc", ".", "Document", "\n\n", "If", " ", "(", "doc", ".", "SelectSet", ".", "Count", " ", "<>", " ", "2", ")", " ", "Then", " ", "Exit Sub", " \n\n", "Dim", " ", "oCurve1", " ", "As", " ", "DrawingCurve", "\n", "oCurve1", " ", "=", " ", "doc", ".", "SelectSet", "(", "1", ")", ".", "Parent", "  ", "'", " <-- This should be a drawing curve", "\n\n", "Dim", " ", "oCurve2", " ", "As", " ", "Object", "\n", "oCurve2", " ", "=", " ", "doc", ".", "SelectSet", "(", "2", ")", " ", "'", "  <-- This should be a centerline.", "\n\n\n\n", "'", "Real API stuff below ", "\n", "Dim", " ", "oIntent1", " ", "As", " ", "GeometryIntent", "\n", "oIntent1", " ", "=", " ", "sh", ".", "CreateGeometryIntent", "(", "oCurve1", ")", "\n        \n", "Dim", " ", "oIntent2", " ", "As", " ", "GeometryIntent", "\n", "oIntent2", " ", "=", " ", "sh", ".", "CreateGeometryIntent", "(", "oCurve2", ", ", "oCurve1", ".", "StartPoint", ")", "  ", "'", "  <-- Need to fine-tune the 'intent' ", "\n\n", "Dim", " ", "oPt", " ", "As", " ", "Point2d", "\n", "oPt", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "60", ", ", "40", ")", " ", "'", " <-- random position ", "\n\n", "Dim", " ", "genDims", " ", "as", " ", "GeneralDimensions", "\n", "genDims", " ", "=", " ", "sh", ".", "DrawingDimensions", ".", "GeneralDimensions", "\n\n", "Dim", " ", "oLinDim", " ", "As", " ", "LinearGeneralDimension", "\n", "'", " Need to use \"diametric\"", "\n", "oLinDim", " ", "=", " ", "genDims", ".", "AddLinear", "(", "oPt", ", ", "oIntent1", ", ", "oIntent2", ", ", "Inventor", ".", "DimensionTypeEnum", ".", "kDiametricDimensionType", ")", " \n\n\n\n\n"], "author": "Jon.Balgley"},
{"created at": [], "solution Title": "\n                        Re: How to null all iproperties with ilogic?\n                    ", "solution": ["'[ wrap in a transaction to allow single undo\noApp = ThisApplication\nCall oApp.TransactionManager.StartTransaction(ThisDoc.Document, \"Clear All iProperties\")\n\n\t' test values\n\t' change these as needed\n\toString = \"\"  \n\toInteger = 1\n\toBool = True\n\toDate = Nothing\n\t\n\toDoc = ThisDoc.Document\n\t\n\t'[ 'define custom property collection\n\tDim oCustomPropertySet As PropertySet\n\toCustomPropertySet = oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n\t\tFor Each oProp In oCustomPropertySet\t\t\n\t\t\tIf TypeOf oProp.Value Is Integer Then\n\t\t\t\toProp.Value = oInteger\n\t\t\tElse If TypeOf oProp.Value Is Boolean Then\n\t\t\t\toProp.Value = oBool\n\t\t\tElse If TypeOf oProp.Value Is String Then\n\t\t\t\toProp.Value = oString\n\t\t\tElse If TypeOf oProp.Value Is Date Then\n\t\t\t\tiProperties.Value(\"Custom\", oProp.Name) = oDate\t\n\t\t\tElse\n\t\t\tEnd If\n\t\tNext\n\t']\t\n\t\n\t'[ 'define Summary Information property collection\n\tDim oSUMProperties As PropertySet\n\toSUMProperties = oDoc.PropertySets.Item(\"Inventor Summary Information\")\n\t\tFor Each oProp In oSUMProperties\t\t\n\t\t\tIf TypeOf oProp.Value Is Integer Then\n\t\t\t\toProp.Value = oInteger\n\t\t\tElse If TypeOf oProp.Value Is Boolean Then\n\t\t\t\toProp.Value = oBool\n\t\t\tElse If TypeOf oProp.Value Is String Then\n\t\t\t\toProp.Value = oString\n\t\t\tElse\n\t\t\tEnd If\n\t\tNext\n\t']\n\t\n\t'[ 'define Design Tracking property collection\n\tDim oDTProperties As PropertySet\t\t\n\toDTProperties = oDoc.PropertySets.Item(\"Design Tracking Properties\")\t\n\t\tFor Each oProp In oDTProperties\t\t\n\t\t\tIf TypeOf oProp.Value Is Integer Then\n\t\t\t\toProp.Value = oInteger\n\t\t\tElse If TypeOf oProp.Value Is Date Then\n\t\t\t\tiProperties.Value(\"Status\", oProp.Name) = oDate\t\n\t\t\tElse If TypeOf oProp.Value Is Boolean Then\n\t\t\t\toProp.Value = oBool\n\t\t\tElse If TypeOf oProp.Value Is String Then\n\t\t\t\toProp.Value = oString\n\t\t\tElse\n\t\t\tEnd If\n\t\t\t\n\t\t\t'Set creation time and design status\n\t\t\t'Currently being reset the same as anything else\n\t\t\t'But at one point these were being \"reset\" differently \n\t\t\tIf oProp.Name = \"Creation Time\" Then\n\t\t\tiProperties.Value(\"Project\", \"Creation Time\") = oDate\n\t\t\tElseIf oProp.Name = \"Design Status\"\n\t\t\tiProperties.Value(\"Status\", \"Design Status\") = oInteger\n\t\t\tEnd If\t\t\t\t\n\t\tNext\n\t']\n\t\n\t'[ 'define Document Summary property collection\n\tDim oDocSUMProperties As PropertySet\n\toDocSUMProperties = oDoc.PropertySets.Item(\"Inventor Document Summary Information\")\t\n\t\tFor Each oProp In oDocSUMProperties\t\t\n\t\t\tIf TypeOf oProp.Value Is Integer Then\n\t\t\t\toProp.Value = oInteger\n\t\t\tElse If TypeOf oProp.Value Is Boolean Then\n\t\t\t\toProp.Value = oBool\n\t\t\tElse If TypeOf oProp.Value Is String Then\n\t\t\t\toProp.Value = oString\n\t\t\tElse\n\t\t\tEnd If\n\t\tNext\t\n\t']\n\t\n\tiLogicVb.UpdateWhenDone = True\noApp.TransactionManager.EndTransaction\n ']\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: API - Adding text on drawing that moves with view\n                    ", "solution": ["Public Sub AddLeaderNote()\n    ' Set a reference to the drawing document.\n    ' This assumes a drawing document is active.\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n\n    ' Set a reference to the active sheet.\n    Dim oActiveSheet As Sheet\n    Set oActiveSheet = oDrawDoc.ActiveSheet\n\n    ' Set a reference to the drawing curve segment.\n    ' This assumes that a drawing curve is selected.\n    Dim oDrawingCurveSegment As DrawingCurveSegment\n    Set oDrawingCurveSegment = oDrawDoc.SelectSet.Item(1)\n\n    ' Set a reference to the drawing curve.\n    Dim oDrawingCurve As DrawingCurve\n    Set oDrawingCurve = oDrawingCurveSegment.Parent\n\n    ' Get the mid point of the selected curve\n    ' assuming that the selected curve is linear\n    Dim oMidPoint As Point2d\n    Set oMidPoint = oDrawingCurve.MidPoint\n\n    ' Set a reference to the TransientGeometry object.\n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n\n    Dim oLeaderPoints As ObjectCollection\n    Set oLeaderPoints = ThisApplication.TransientObjects.CreateObjectCollection\n\n    ' Create a leader point to define the position of the text.\n    Call oLeaderPoints.Add(oTG.CreatePoint2d(oMidPoint.x, oMidPoint.y + 1))\n\n    ' Create an intent and add to the leader points collection.\n    ' This is the geometry that the leader text will attach to.\n    Dim oGeometryIntent As GeometryIntent\n    Set oGeometryIntent = oActiveSheet.CreateGeometryIntent(oDrawingCurve)\n\n    Call oLeaderPoints.Add(oGeometryIntent)\n\n    ' Create text with simple string as input. Since this doesn't use\n    ' any text overrides, it will default to the active text style.\n    Dim sText As String\n    sText = \"API Leader Note\"\n\n    Dim oLeaderNote As LeaderNote\n    Set oLeaderNote = oActiveSheet.DrawingNotes.LeaderNotes.Add(oLeaderPoints, sText)\n\n    oLeaderNote.Leader.AllNodes.Item(1).Delete\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: I logic to change all layer line wieghts to 0.01\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n\nFor Each oLayer In oDrawDoc.StylesManager.Layers\noLayer.LineWeight = 0.01 / 0.393701\nNext", "ThisDrawing.Document.StylesManager.Layers(\"Layer1\").LineWeight = 0.01 / 0.393701\nThisDrawing.Document.StylesManager.Layers(\"Layer2\").LineWeight = 0.01 / 0.393701\nThisDrawing.Document.StylesManager.Layers(\"Layer3\").LineWeight = 0.01 / 0.393701\nThisDrawing.Document.StylesManager.Layers(\"Layer4\").LineWeight = 0.01 / 0.393701"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: SketchedSymbolDefinitions error\n                    ", "solution": [], "author": "JamieVJohnson2"},
{"created at": [], "solution Title": "\n                        Re: OnFileResolution not called when part file not relative to assembly file\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: ilogic , Exclude from printing\n                    ", "solution": ["Dim oCurrentNumber  As Sheet\noCurrentNumber = ThisApplication.ActiveDocument.ActiveSheet\n\t\n' Iterate through the sheets\nDim oSheet As Sheet\nFor Each oSheet In ThisApplication.ActiveDocument.Sheets\n\toSheet.Activate\n\tIf oSheet.ExcludeFromPrinting = False Then\n\t\n\t'run DXF code here\n\tMessageBox.Show(\"DXF output...\", \"iLogic\")\n\n\tEnd If\nNext\n' Return to original active sheet\noCurrentNumber.Activate"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Accessing application via external hard drive\n                    ", "solution": [], "author": "jeffrey.sin"},
{"created at": [], "solution Title": "\n                        Re: How to grab \"Base Quantity\" with iLogic\n                    ", "solution": ["'Get the document UnitOfMeasure object to facilitate unit conversions", "Dim", " ", "uom", " ", "As", " ", "UnitsOfMeasure", " ", "=", " ", "ThisDoc", ".", "Document", ".", "UnitsOfMeasure", "'Check to be sure we are on a part document", "If ThisDoc.Document.DocumentType = kPartDocumentObject Then ", "    ", "'Initialize a variable for the type and to hold the BOMQuantity Object", "    Dim qType As BOMQuantityTypeEnum", "    Dim qQty As Object", "    ", "'Get the type and quantity object", "    ThisDoc.Document.ComponentDefinition.BOMQuantity.GetBaseQuantity(qType, qQty)", "    ", "'Determine what kind of Quantity type it is", "    'BOMQuantityTypeEnum.kParameterBOMQuantity : The qQty is the parameter that represents the BOM quantity value.", "    'BOMQuantityTypeEnum.kEachBOMQuantity : The qQty object is set to Nothing.", "    If qType = BOMQuantityTypeEnum.kParameterBOMQuantity Then", "        ", "'Get the Parameter", "        Dim qParam As Parameter = qQty", "        ", "'Determine what database units the parameter is set to using the UnitOfMeasure object.", "        Dim dbUnits As String = uom.GetDatabaseUnitsFromExpression(qParam.Expression, qParam.Units)", "        'qParam.ModelValue will be returned in database units, the value needs to be converted to desired output", "        'units. In this case it's output in the same units as the parameter is set to.", "        'The iProperty MAT_Qty is set as a numeric value to whatever the converted value is.", "        iProperties.Value(\"Custom\",\"MAT_Qty\") = uom.ConvertUnits(qParam.ModelValue, dbUnits, qParam.Units)", "    End If", "End If", "  Dim doc As PartDocument\n  Set doc = ThisApplication.ActiveDocument\n  \n  Call doc.ComponentDefinition.BOMQuantity.SetBaseQuantity(kEachBOMQuantity)", "  Dim baseUnit As String\n  baseUnit = doc.ComponentDefinition.BOMQuantity.BaseUnits"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Change Titleblock\n                    ", "solution": [], "author": "drfleau"},
{"created at": [], "solution Title": "\n                        Re: iLogic - return file path without last folder\n                    ", "solution": ["Imports System.IO\noPath = \"C:\\_Vault-WIP\\Work Files\\Job Number\\01\"\noParentDir = Directory.GetParent(oPath).FullName\nMessageBox.Show(oParentDir, \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Run iLogic rule from an external part file.\n                    ", "solution": ["'''Run ilogic rule in file\n\n'define path and name\nDim sFilePath As String \nsFilePath = \"C:\\TEMP\\777.ipt\" \n\n'name of ilogic rule\nDim oRuleName As String = \"TestRule\" \n\n'open the file invisibly\noFile =  ThisApplication.Documents.Open(sFilePath, False) \n\n'define the ilogicAutomation\nDim iLogicAuto As Object \niLogicAuto = iLogicVb.Automation \n\n'get the rule\nDim oRule As Object \noRule = iLogicAuto.GetRule(oFile, oRuleName) \n\n'run the rule\niLogicAuto.RunRuleDirect(oRule) \n\n'close the file\noFile.Close "], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: itrigger not working?\n                    ", "solution": [], "author": "tony"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Excel Next Available Line\n                    ", "solution": ["'open the spreadsheet\nGoExcel.Open(\"MyExcelFile.xls\"), \"Sheet1\")\n\n'Define Range\noRowStart = 2\noRowEnd = 2000\nDim count As Double\nFor count = oRowStart To oRowEnd\n\t' If it's blank count it\n\tIf String.IsNullOrEmpty(GoExcel.CellValue(\"A\" & count)) Then \n\t\ti = i + 1\n\tEnd If\nNext\n' Next empty row is max rows minus blank rows plus one\noEmptyRow = oRowEnd - i + 1\t", "GoExcel.CellValue(\"B\" & oEmptyRow) = iProperties.Value(\"Project\", \"Part Number\") \nGoExcel.CellValue(\"C\" & oEmptyRow) = iProperties.Value(\"Project\", \"Revision Number\")\nGoExcel.CellValue(\"D\" & oEmptyRow) = iProperties.Value(\"Status\", \"Engr Date Approved\") "], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic fun - Creating a jpg in the idw drawing environment.\n                    ", "solution": ["Public Sub Main SaveAsJPG()\n\n' Get the active document\nDim oDoc As Document = ThisApplication.ActiveDocument\nDim CloseFlag As Boolean = False\n\n' Check if the document is drawing\nIf oDoc.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then\n\n    ' Find the first referenced document\n\tDim oModelRef As Document\n\tDim ModelFileName As String\n\t\n\tTry\n\t\toModelRef = ThisDrawing.ModelDocument\n\t\tModelFileName = oModelRef.FullFileName\n\tCatch\n\t\tMessageBox.Show(\"Error, Referenced Model not found.\", \"iLogic\")\n\t\tExit Sub\n\tEnd Try\n\t\n    ' Open it\n\tDim rDoc As Document = ThisApplication.Documents.Open(ModelFileName, True)\n    CloseFlag = True\n\n\tDim path As String = ThisDoc.PathAndFileName\n\tDim jpeg As String = path & \".jpg\"\n\n\t' Get the active view.\n\tThisApplication.CommandManager.ControlDefinitions.\u200bItem(\"AppIsometricViewCmd\").Execute\n\toView = ThisApplication.ActiveView\n\n\t' Save the view as a jpg file.\n\toView.SaveAsBitmap(jpeg, 1200, 0)\n\n\t' Close the referenced document\n\tIf CloseFlag Then rDoc.Close(True)\n\nEnd If\n\nEnd Sub", "Public Sub Main SaveAsJPG()\n\n    ", "' Get the active document", "\n    Dim oDoc As Document = ThisApplication.ActiveDocument\n    Dim CloseFlag As Boolean = False", "    Dim rDoc As Document", "\n    ", "' Check if the document is drawing", "\n    If oDoc.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then", "        Try\n            ", "' Find the first view and it's model's name", "            Dim", " ", "oDrawView", " ", "As", " ", "DrawingView", " ", "=", " ", "oDoc", ".", "ActiveSheet", ".", "DrawingViews", ".", "Item", "(", "1", ")", "            Dim ModelFileName As String = ", "oDrawView", ".", "ReferencedFile", ".", "FullFileName", "            ", "' Open the document by model name", "\n            rDoc = ThisApplication.Documents.Open(ModelFileName, True)\n            CloseFlag = True", "        Catch", "            MsgBox(\"Couldn't open the referenced file.\", \"iLogic\")", "            Exit Sub", "        End Try\n    End If\n\n    Dim path As String = ThisDoc.PathAndFileName\n    Dim jpeg As String = path & \".jpg\"\n\n    ", "' Get the Isometric view.", "\n    ThisApplication.CommandManager.ControlDefinitions.Item(\"AppIsometricViewCmd\").Execute\n    oView = ThisApplication.ActiveView\n\n    ", "' Save the view as a jpg file.", "\n    oView.SaveAsBitmap(jpeg, 1200, 0)\n\n    ", "' Close the referenced document", "\n    If CloseFlag Then rDoc.Close(True)\n\nEnd Sub"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Problem finding attributes during dimensioning of GA drawings\n                    ", "solution": [], "author": "peter"},
{"created at": [], "solution Title": "\n                        Re: Switch iPart using iLogic\n                    ", "solution": ["iPart.ChangeRow(\"\", \"Solid_Volume-02\")"], "author": "danijel.radenko"},
{"created at": [], "solution Title": "\n                        Re: Update views\n                    ", "solution": ["Sub Main\n\tUpdateView(\"View1\")\nEnd Sub\n\nSub UpdateView(strView as string)\n\ndoc = ThisApplication.ActiveDocument\noSheet =  doc.ActiveSheet\noViews = oSheet.DrawingViews\n\tFor Each oView In oViews\n\t\t", "oView.", "SetDesignViewRepresentation(strView, False)\n    Next\n\t\nEnd Sub\n\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Addin load/unload behavior\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: iLogic Text Box in Sketch\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to save a IDW as PDF\n                    ", "solution": [], "author": "Marco.Takx"},
{"created at": [], "solution Title": "\n                        Re: Sort .idw based on custom iproperty\n                    ", "solution": ["' Define the open document", "\nDim oDoc As Document = ThisApplication.ActiveDocument\nIf Not oDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n    MsgBox(\"This rule is only for assemblies.\")\n    Exit Sub\nEnd If\n\n", "' Define the target folder", "\nDim oProject As String = ThisApplication.FileLocations.FileLocationsFile\nDim FNP As Integer = InStrRev(oProject, \"\\\", -1)\nDim oFolder As String = Left(oProject, FNP) & \"LaserCut\\\"\n\n", "' Go throught all documents", "\nDim allDocs As DocumentsEnumerator = oDoc.AllReferencedDocuments\nDim aDoc As Document\nFor Each aDoc In allDocs\n    Dim oPropsets As PropertySets = aDoc.PropertySets\n    Dim oPropSet As PropertySet = oPropsets.Item(\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\")\n    Dim iPro As Inventor.Property\n", "    ' Try to reach iProperty named \"LaserCut\"", "\n    Try\n        iPro = oPropSet.Item(\"LaserCut\")\n    Catch\n        ", "' If the iProperty \"LaserCut\" is missing, go to next document", "\n        Continue For\n    End Try\n    ", "' Set source and target for copying", "\n    Dim oSource As String = aDoc.FullFileName\n    oSource = Left(oSource, Len(oSource) - 3) & \"idw\"\n    Dim oFNP1 As Integer = InStrRev(oSource, \"\\\", -1)\n    Dim oTarget As String = oFolder & Mid(oSource, oFNP1 + 1)\n    ", "' Attempt to copy the file (true = overwrite)", "\n    Try\n        System.IO.File.Copy(oSource, oTarget, True)\n    Catch\n    End Try\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Calling out Feature Occurrences Using iLogic\n                    ", "solution": ["' Define the document and check if it is assembly", "Dim oAssy As Document = ThisApplication.ActiveDocument\nIf oAssy.DocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then\n    MsgBox(\"This rule is for assembly only\")\n    Exit Sub\nEnd If\n\nDim myString As String = \"", "MySearchedText", "\"\n", "' Loop throught all documents in the assembly", "\nDim allDocs As DocumentsEnumerator = oAssy.AllReferencedDocuments\nDim oDoc As Document\nDim oFeat As PartFeature\nFor Each oDoc In allDocs\n    For Each oFeat In oDoc.ComponentDefinition.Features\n        ", "' Check if myString is in the feature name", "\n        If inStr(oFeat.Name, myString) > 0 Then\n            ", "'''Do Something'''", "\n        Else \n            ", "'''Do Something else'''", "\n        End If\n    Next\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic InputBox loop\n                    ", "solution": ["While width < 300 Or width > 2200\n    width = InputBox(\"Light bar width ranges from 300mm - 2200mm and comes in 100mm increments. Please enter valid width.\", \"WIDTH OUTWITH RANGE\", \"\")\n\nEnd While "], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: iLogic coding help NEEDED!!!!\n                    ", "solution": ["Sub Main()\n   ", "' Open the excel file", "   Dim ExcelFile As String = \"C:\\Users\\Desktop\\INVENTOR_EXCEL\\Parameter_Sheet\\", "MyExcel.xlsx", "\"", "   GoExcel.Open(ExcelFile, \"Sheet1\")\n", "   ", "' Write in the parameters", "   WriteToExcel(\"(Part):1\", 1)", "   WriteToExcel(\"(Part):2\", 2)", "   WriteToExcel(\"(Part):3\", 3)\n   ", "'... etc ...", "   ", "' Save and close the excel file", "   GoExcel.Save", "   GoExcel.Close\nEnd Sub", "Private Sub WriteToExcel(oPart As String, Row As Integer)", "   ", "' \"Try\" means it'll atempt to do the action", "   Try", "      If Parameter(oPart, \"d51\") > 0 Then", "         GoExcel.CellValue(\"A\" & Row) = oPart", "         GoExcel.CellValue(\"B\" & Row) = Parameter(oPart, \"d51\")", "      End If", "   Catch", "   End Try", "End Sub", "Sub Main()\n   ", "' Open the excel file", "\n   Dim ExcelFile As String = \"C:\\Users\\Desktop\\INVENTOR_EXCEL\\Parameter_Sheet\\MyExcel.xlsx\"\n   GoExcel.Open(ExcelFile, \"Sheet1\")\n\n   ", "' Write in the parameters", "\n   For i = 1 To 3 ", "' change the \"3\" to the actual amount of parts", "      WriteToExcel(\"(Part):\" & i, i)\n   Next\n\n   ", "' Save and close the excel file", "\n   GoExcel.Save\n   GoExcel.Close\nEnd Sub\n\nPrivate Sub WriteToExcel(oPart As String, Row As Integer)\n   ", "' \"Try\" means it'll atempt to do the action", "\n   Try\n      If Parameter(oPart, \"d51\") > 0 Then\n         GoExcel.CellValue(\"A\" & Row) = oPart\n         GoExcel.CellValue(\"B\" & Row) = Parameter(oPart, \"d51\")\n      End If\n   Catch\n   End Try\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Center on Arc Lenght\n                    ", "solution": ["ArcLength = ( angle / 360 ) * ( 2 * PI * radius )", "SketchArc.CenterSketchPoint() As SketchPoint"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: Show if there is an DWG associated or not\n                    ", "solution": ["On Error Resume Next\nDim oAss As AssemblyDocument = ThisApplication.ActiveEditDocument\nDim bp As BrowserPane = ThisApplication.ActiveDocument.BrowserPanes.ActivePane\nDim node As BrowserNode\nDim oName As String\n\nFor Each node In bp.TopNode.BrowserNodes\n    oName = Left(node.NativeObject.Definition.Document.FullFileName, _\n                Len(node.NativeObject.Definition.Document.FullFileName) - 3)\n    If System.IO.File.Exists(oName & \"idw\") Then\n        node.NativeObject.Name = node.NativeObject.Name.Replace(\"(IDW) \", \"\")\n        node.NativeObject.Name = (\"(IDW) \" & node.BrowserNodeDefinition.Label)\n    End If\n    If System.IO.File.Exists(oName & \"dwg\") Then\n        node.NativeObject.Name = node.NativeObject.Name.Replace(\"(DWG) \", \"\")\n        node.NativeObject.Name = (\"(DWG) \" & node.BrowserNodeDefinition.Label)\n    End If\nNext", "On Error Resume Next\nDim oAss As AssemblyDocument = ThisApplication.ActiveEditDocument\nDim bp As BrowserPane = ThisApplication.ActiveDocument.BrowserPanes.ActivePane\nDim node As BrowserNode\nDim oName As String\n\nFor Each node In bp.TopNode.BrowserNodes\n    If InStr(1, node.BrowserNodeDefinition.Label, \"(DWG) \") > 0 Then\n        node.NativeObject.Name = node.BrowserNodeDefinition.Label.Replace( \"(DWG) \", \"\")\n    End If\n    If InStr(1, node.BrowserNodeDefinition.Label, \"(IDW) \") > 0 Then\n        node.NativeObject.Name = node.BrowserNodeDefinition.Label.Replace( \"(IDW) \", \"\")\n    End If\nNext"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Inventor-Excel Integration\n                    ", "solution": ["i = GoExcel.FindRow(\"data.xlsx\", \"Sheet1\", \"Description\", \"=\", \"ABC\")\niProperties.Value(\"Custom\", \"Purchase number\")= GoExcel.CurrentRowValue(\"Purcahse Number\")"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Assembly Mate Part Axes\n                    ", "solution": ["        ' Constraint the Y-Axis\n        ' Get the Axis from the selected part.\n        ' The Axis plane obtained is in the context of the part, not the assembly.\n        Dim oPartAxis1 As WorkAxis\n        oPartAxis1 = oOccurrence.Definition.WorkAxes.Item(2) 'Component Y Axis\n\n        'Get the Axis from the assembly\n        Dim oAsmAxis1 As WorkAxis\n        oAsmAxis1 = oAsmCompDef.WorkAxes.Item(2) 'Assembly Y Axis \n\n        ' Create proxies for the work planes of the part.\n        ' The proxies represent the part work planes in the context of the assembly.\n        Dim oObj As Object = Nothing\n        oOccurrence.CreateGeometryProxy(oPartAxis1, oObj)\n\n        Dim oAsmAxis4 As WorkAxisProxy\n        oAsmAxis4 = oObj\n\n        ' Create the constraint using the part axis proxies.\n        Dim oConstraint As AssemblyConstraint\n        oConstraint = oAsmCompDef.Constraints.AddMateConstraint(oAsmAxis1, oObj, 0)"], "author": "Jef_E"},
{"created at": [], "solution Title": "\n                        Re: oLogic - Rectangular pattern of multiple parts in assembly\n                    ", "solution": ["' ...", "\nIf nbrla  Mod 2 = 0 Then\n\noParentOccs.Clear", "\n", "For Each oOccurrence In oAsmCompDef.Occurrences\n    oParentOccs.Add(oOccurrence)\nNext", "\n  \noRectOccPattern = oAsmCompDef.OccurrencePatterns.AddRectangularPattern(oParentOccs, oYAxis, True, oRowSpacing, oRowCount)\n\n'oRectOccPattern = oAsmCompDef.OccurrencePatterns.AddRectangularPattern _\n'(oParentOccs, oYAxis, True, 2* oRowSpacing /10, oRowCount /10)\n\t\t\nEnd If\n", "' ..."], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: ilogic iproperty equations\n                    ", "solution": ["    oDoc = ThisApplication.ActiveDocument\n    \n    ' Get the design tracking property set.\n    Dim invDesignProps As PropertySet\n    invDesignProps = oDoc.PropertySets.Item(\"Design Tracking Properties\")\n\t\n\tFor Each invProperty As Inventor.Property In InvDesignProps\n\t\n\t\t'check if the expression starts with an \"=\" sign\n\t\tIf Left(invProperty.Expression, 1)= \"=\" Then\n\t\t\t' the value returns only the expressions result, so it can then be set to override the expression, replacing it\n\t\t\tinvProperty.Value = invProperty.Value \n\t\tEnd If\n\t\n\tNext"], "author": "NSBowser"},
{"created at": [], "solution Title": "\n                        Re: Prop set\n                    ", "solution": ["Sub Main()\n    CreatePropertySet(\"My Stuff\",\"PN\",\"PropertyValue5\")\n    ReadProperty(\"My Stuff\",\"PN\")\nEnd Sub\n\nSub CreatePropertySet(PropSetName As String,PropName As String,PropValue As String)\n' Get the custom property set.\nDim customSet As Inventor.PropertySet\nDim InvProperty As Inventor.Property\nDim doc As Document = ThisApplication.ActiveDocument\n\nIf doc.PropertySets.PropertySetExists(PropSetName) Then\n        'customset already exist\n        MsgBox (\"Customset already exist\")\nElse\n        ' Add missing propertyset and prop.\n        customSet = doc.PropertySets.Add(PropSetName)\nEnd If\nTry\n    InvProperty = doc.PropertySets.Item(PropSetName).Add(PropValue, PropName)\nCatch\nEnd Try\n'MessageBox.Show(\"Message 1\" & PropSetName & PropName & PropValue, \"Title\") '???????? this get variables values\nEnd Sub\n\nSub ReadProperty(PropSetName As String,PropName As String)\nTry\n    stuffvalue = iProperties.Value(PropSetName, PropName)\n    MsgBox (\"Property alredy exists (Read)   \" & stuffvalue)\nCatch\n\tMsgBox (\"Property doesn't exists (Read)!\")\nEnd Try\nEnd Sub"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: VBA: Finding the TitleBlockname in Active Sheet?\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Multiple Inventor vba automations in parallel\n                    ", "solution": ["Dim _invApp1 As Inventor.Application\nDim _invApp2 As Inventor.Application\n\nDim invAppType As Type = GetTypeFromProgID(\"Inventor.Application\")\n\n_invApp1 = CreateInstance(invAppType)\n_invApp2 = CreateInstance(invAppType)\n\n_invApp1.Visible = True\n_invApp2.Visible = True", "Inventor.Application _invApp1;\nInventor.Application _invApp2;\n\nType invAppType = Type.GetTypeFromProgID(\"Inventor.Application\");\n\n_invApp1 = (Inventor.Application)System.Activator.CreateInstance(invAppType);\n_invApp2 = (Inventor.Application)System.Activator.CreateInstance(invAppType);\n\n_invApp1.Visible = true;\n_invApp2.Visible = true;\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Inventor View Annotation Style\n                    ", "solution": [], "author": "Jesper_S"},
{"created at": [], "solution Title": "\n                        Re: custom properties\n                    ", "solution": ["'...\nPros.Add(oPro.Name & \" - \" & oPro.Expression)\n'..."], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Inventor API VBA 3D Loft with Rails\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Unable to use my own drawing as default template\n                    ", "solution": [], "author": "tschaeferZNBXX"},
{"created at": [], "solution Title": "\n                        Re: Clear Appearance\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: parameter in title block\n                    ", "solution": [], "author": "cadmanagershat"},
{"created at": [], "solution Title": "\n                        Re: My first Addon (HELP!!!!)\n                    ", "solution": ["Module Globals\n\t\n\tPublic InventorApplication As Inventor.Application\n    \nEnd Module", "Imports Inventor\nImports System.Runtime.InteropServices\nImports System.Configuration\n\nNamespace MyAwesomeAddin\n    <ProgId(\"MyAwesomeAddin.StandardAddInServer\"), _\n    GuidAttribute(\"XXXXXXXX-XXXX-XXXX-XXX-XXXXXXXXXXXX\")> _\n    Public Class StandardAddInServer\n        Implements Inventor.ApplicationAddInServer", " \u00a0\u00a0\u00a0", "Private", "\u00a0m_AppEvents\u00a0", "As", "\u00a0ApplicationEvents \n\n    Public Sub Activate(ByVal AddInSiteObject As Inventor.ApplicationAddInSite, ByVal FirstTime As Boolean) Implements Inventor.ApplicationAddInServer.Activate\n        ", "' Initialize AddIn members", "\n        InventorApplication = AddInSiteObject.Application\n\t\t\t   \n\t", "' Add event handlers", "\n        m_AppEvents = InventorApplication.ApplicationEvents\n        AddHandler m_AppEvents.OnSaveDocument, AddressOf Me.m_Events_OnSaveDocument\n        AddHandler m_AppEvents.OnOpenDocument, AddressOf Me.m_Events_OnOpenDocument", "        AddHandler m_AppEvents.OnNewDocument, AddresOf Me.m_Events_OnNewDocument\n    End Sub", "\n    Public Sub Deactivate() Implements Inventor.ApplicationAddInServer.Deactivate\n        ", "' Remove event handlers", "\n\tRemoveHandler m_AppEvents.OnSaveDocument, AddressOf Me.m_Events_OnSaveDocument\n\tRemoveHandler m_AppEvents.OnOpenDocument, AddressOf Me.m_Events_OnOpenDocument", "        RemoveHandler m_AppEvents.OnNewDocument, AddressOf Me.m_Events_OnNewDocument\n\tm_AppEvents = Nothing\n\n        Marshal.ReleaseComObject(InventorApplication)\n        InventorApplication = Nothing\n\n        System.GC.WaitForPendingFinalizers()\n        System.GC.Collect()\n    End Sub\n\n    Private Sub m_Events_OnSaveDocument(ByVal DocumentObject As Inventor._Document, ByVal BeforeOrAfter As Inventor.EventTimingEnum, _\n        ByVal Context As Inventor.NameValueMap, ByRef HandlingCode As Inventor.HandlingCodeEnum)\n        If BeforeOrAfter = EventTimingEnum.kBefore Then\n        \t", "' Something to do before document saves", "\n        Else If BeforeOrAfter = EventTimingEnum.kAfter Then\n        \t", "' Something to do after document saves", "\n        End If\n    End Sub", "    Private Sub m_Events_OnNewDocument(ByVal DocumentObject As Inventor._Document)", "        If DocumentObject.DocumentType = DocumentTypeEnum.kPartDocumentObject Then", "            Dim DwgForm As New Form1()", "            ", "' .ShowDialog for modal form, .Show for non-modal form", "            DwgForm.ShowDialog()", "        End If", "    End Sub", " \u00a0\u00a0\u00a0", "End", "\u00a0", "Class", " ", "End", "\u00a0", "Namespace", " ", "Imports Inventor\n\nPublic Class Form1\n", "    Private oDoc As Inventor.Document", "    Public Sub New()", "        ", "Me", ".InitializeComponent()", "        oDoc = InventorApplication.ActiveDocument", "    End Sub", "\n    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click\n        ", "' It'll show you the document's display name on Button1 click", "        ", "' It's just to test it...", "        MsgBox(oDoc.DisplayName)\n    End Sub", "\nEnd Class"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Place autocad filename into inventor description\n                    ", "solution": ["Sub Main\niProperties.Value(\"Project\", \"Description\") = DwgName()\nEnd Sub\n\nFunction DwgName() As String\nDim doc As Document = ThisApplication.ActiveDocument\nDim bp As BrowserPane = doc.BrowserPanes.ActivePane\nDim node As BrowserNode\n\nOn Error Resume Next\nFor Each node In bp.TopNode.BrowserNodes\n    If InStr(node.NativeObject.Name.ToUpper,\".DWG\") Then\n        DwgName = node.NativeObject.Name.Replace(\".dwg\", \"\")\n    End If\nNext\nEnd Function"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Export Excel With Different Name If Revision\n                    ", "solution": ["' export the Partslist to Excel with options\nIf iProperties.Value(\"Project\", \"Revision Number\") = 0 Then\n\toCustomTable.Export(path_and_name & \".xls\", FileFormatEnum.kMicrosoftExcelformat, oOptions)\nEnd If\n\nIf iProperties.Value(\"Project\", \"Revision Number\") > 0 Then\n\toCustomTable.Export(path_and_name & \" R_\" & iProperties.Value(\"Project\", \"Revision Number\") & \".xls\", FileFormatEnum.kMicrosoftExcelformat, oOptions)\nEnd If\n'check for existing XLS file and delete it if found"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: pick a point in drawingsketch\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: external ilogic rule to creat custom iproperty\n                    ", "solution": ["Dim PropertyName1 As String = \"EtchNumber\"\noCustomPropertySet = ThisApplication.ActiveDocument.PropertySets.Item(\"Inventor User Defined Properties\")\n\n'look for custom iproperty and try to use it\nTry\noProp = oCustomPropertySet.Item(PropertyName1)\nCatch\n' iproperty not found , create and assign value\noCustomPropertySet.Add(\"\",PropertyName1)\nEnd Try\niProperties.Value(\"Custom\",\"EtchNumber\") = \"TempEtchNumber\""], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Rule ilogic o VBA in Inventor 2015 to subtitute and rename a mass of assembl\n                    ", "solution": ["Sub Test()\n    Dim TextToFind As String\n    ", "TextToFind", " = \"", "ed0", "\"\n    Dim TextToReplace As String\n    ", "TextToReplace", " = \"", "_logo_ed1", "\"", "    Dim NewFolder As String", "    ", "' Leave this string empty to copy to current folder", "    ", "NewFolder", " = \"", "C:\\MyFiles\\", "\"", "\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    Dim oOcc As ComponentOccurrence\n    For Each oOcc In oDoc.ComponentDefinition.Occurrences\n        Dim aDoc As Document\n        Set aDoc = oOcc.Definition.Document\n        If aDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n            Dim oName As String\n            oName = aDoc.FullFileName\n            Dim xDoc As Document\n            Set xDoc = ThisApplication.Documents.Open(oName, True)\n            Dim FNP As Integer\n            FNP = InStrRev(oName, \"\\\", -1)\n            Dim oPath As String\n            ", "If NewFolder = \"\" Then", "                oPath = Left(oName, FNP)", "            Else", "                oPath = NewFolder", "            End If", "\n            Dim oNewName As String\n            oNewName = Mid(oName, FNP + 1)\n            oNewName = Replace(oNewName, TextToFind, TextToReplace)\n            xDoc.SaveAs (oPath & oNewName), False\n            xDoc.Close (True)\n        End If\n    Next\nEnd Sub"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: add-in\n                    ", "solution": ["Imports Inventor\nImports System.Runtime.InteropServices\nImports System.Configuration\n\nNamespace CustomCC\n    <ProgId(\"CustomCC.StandardAddInServer\"), _\n    GuidAttribute(\"C5D5A7EE-1D23-4387-ABFD-F99CB48D3905\")> _\n    Public Class StandardAddInServer\n        Implements Inventor.ApplicationAddInServer\n\n#Region \"Data Members\"\n\n        ", "' Buttons", "\n        Private m_Button_1 As ButtonOne\n        Private m_Button_2 As ButtonTwo\n        Private m_Button_3 As ButtonTwo\n\n        ", "' Events", "\n        Private m_UserInterfaceEvents As UserInterfaceEvents\n        Private m_AddInCLSIDString As String\n        Private oAsmPanel As String = \"Assembly\"\n        Private oPartPanel As String = \"Part\"\n        Private oSMPanel As String = \"SM\"\n        Private oDrwPanel As String = \"Drawing\"\n        Private oCustomPanel As String = \"CustomCC\"\n#End Region\n\n#Region \"ApplicationAddInServer Members\"\n\n        Public Sub Activate(ByVal AddInSiteObject As Inventor.ApplicationAddInSite, ByVal FirstTime As Boolean) Implements Inventor.ApplicationAddInServer.Activate\n            ", "' Initialize AddIn members", "\n            InventorApplication = AddInSiteObject.Application\n\t\t\t\n            ", "' Initialize event handlers", "\n            m_UserInterfaceEvents = InventorApplication.UserInterfaceManager.UserInterfaceEvents\n            AddHandler m_UserInterfaceEvents.OnResetCommandBars, AddressOf Me.UserInterfaceEvents_OnResetCommandBars\n            AddHandler m_UserInterfaceEvents.OnResetRibbonInterface, AddressOf Me.UserInterfaceEvents_OnResetRibbonInterface\n\n            ", "' Retrieve the GUID for this class", "\n            Dim AddInCLSID As GuidAttribute\n            AddInCLSID = CType(System.Attribute.GetCustomAttribute(GetType(StandardAddInServer), GetType(GuidAttribute)), GuidAttribute)\n\n            m_AddInCLSIDString = \"{\" & AddInCLSID.Value & \"}\"\n\t\t\t\n            ", "' Create New buttons", "\n            m_Button_1 = New ButtonOne(\"Insert CC\", _\n                         \"Autodesk:CC:ButtonOneCmd\", _\n                         CommandTypesEnum.kNonShapeEditCmdType, _\n                         m_AddInCLSIDString, _\n                         \"Custom CC\", _\n                         \"Opens custom content center\", _\n                         \"CustomCC.IconA.bmp\", _\n                         \"CustomCC.IconA.bmp\", _\n                         ButtonDisplayEnum.kDisplayTextInLearningMode)\n            m_Button_1.CreateButton()\n            m_Button_2 = New ButtonTwo(\"Add new\", _\n                         \"Autodesk:CC:ButtonTwoCmd\", _\n                         CommandTypesEnum.kNonShapeEditCmdType, _\n                         m_AddInCLSIDString, _\n                         \"Add something new\", _\n                         \"Adds something new\", _\n                         \"CustomCC.IconB.bmp\", _\n                         \"CustomCC.IconB.bmp\", _\n                         ButtonDisplayEnum.kDisplayTextInLearningMode, _\n                         \"Add_new\")", "                         ' Im ussing this last line as optional parameter in the button command,", "                         ' to run specific piece of code from the button Two command,", "                         ' so I don't need to create another button", "            m_Button_2.CreateButton()\n            m_Button_3 = New ButtonTwo(\"Description\", _\n                         \"Autodesk:Drawing:ButtonTwoCmd\", _\n                         CommandTypesEnum.kNonShapeEditCmdType, _\n                         m_AddInCLSIDString, _\n                         \"Description\", _\n                         \"Opens a form to fill in the drawing's description\", _\n                         \"CustomCC.IconD.bmp\", _\n                         \"CustomCC.IconD.bmp\", _\n                         ButtonDisplayEnum.kDisplayTextInLearningMode, _\n                         \"Description\")\n            m_Button_3.CreateButton()\n\t\t\t\n            ", "' Create command category", "\n            Dim CustomToolsCmdCategory As CommandCategory\n            CustomToolsCmdCategory = InventorApplication.CommandManager.CommandCategories.Add(\"CustomCC\", \"Autodesk:CustomCC:CustomToolsCmdCat\", m_AddInCLSIDString)\n\t\t\t\n\t\t\tCustomToolsCmdCategory.Add(m_Button_1.Definition)\n\t\t\tCustomToolsCmdCategory.Add(m_Button_2.Definition)\n\t\t\tCustomToolsCmdCategory.Add(m_Button_3.Definition)\n\t\t\t\n            ", "' Get change manager", "\n            Dim changeManager As ChangeManager\n            changeManager = InventorApplication.ChangeManager\n\t\t\t\n            ", "' Create change definitions collection for this addin", "\n            Dim changeDefinitions As ChangeDefinitions\n            changeDefinitions = changeManager.Add(m_AddInCLSIDString)\n\t\t\t\n            ", "' Add the tool's button into proper commandbar", "\n            If FirstTime = True Then\n            \tm_Button_1.AddButtonToCommandBar(oAsmPanel, oCustomPanel, True)  ", "'Add button One to Assembly Ribbon", "\n            \tm_Button_2.AddButtonToCommandBar(oAsmPanel, oCustomPanel, True)  ", "'Add button Two to Assembly Ribbon", "\n            \tm_Button_2.AddButtonToCommandBar(oPartPanel, oCustomPanel, True) ", "'Add button Two to Part Ribbon", "\n            \tm_Button_2.AddButtonToCommandBar(oSMPanel, oCustomPanel, True)   ", "'Add button Two to Sheet Metal Part Ribbon", "\n            \tm_Button_3.AddButtonToCommandBar(oDrwPanel, oCustomPanel, True)  ", "'Add button Three to Drawing Ribbon", "\n            End If\n        End Sub\n\n        Public Sub Deactivate() Implements Inventor.ApplicationAddInServer.Deactivate\n            Try\n                ", "' Delete the command category", "\n                Dim CustomToolsCmdCategory As CommandCategory = InventorApplication.CommandManager.CommandCategories.Item(\"Autodesk:CustomCC:CustomToolsCmdCat\")\n                CustomToolsCmdCategory.Delete()\n            Catch\n            End Try\n\n            ", "' Delete button definitions", "\n            m_Button_1.DeleteButton()\n            m_Button_2.DeleteButton()\n            m_Button_3.DeleteButton()\n\n            ", "' Delete change definition(s)", "\n            Dim changeManager As ChangeManager\n            changeManager = InventorApplication.ChangeManager\n\n            Dim changeDefinitions As ChangeDefinitions\n            changeDefinitions = changeManager.Item(m_AddInCLSIDString)\n\n            ", "' Release objects", "\n            RemoveHandler m_UserInterfaceEvents.OnResetCommandBars, AddressOf Me.UserInterfaceEvents_OnResetCommandBars\n            RemoveHandler m_UserInterfaceEvents.OnResetRibbonInterface, AddressOf Me.UserInterfaceEvents_OnResetRibbonInterface\n\n            m_UserInterfaceEvents = Nothing\n\n            Marshal.ReleaseComObject(InventorApplication)\n            InventorApplication = Nothing\n\n            System.GC.WaitForPendingFinalizers()\n            System.GC.Collect()\n        End Sub\n\n        Public ReadOnly Property Automation() As Object Implements Inventor.ApplicationAddInServer.Automation\n            ", "' If you want to return an interface to another client of this addin,\n            ' implement that interface in a class and return that class object \n            ' through this property", "\n            Get\n                Return Nothing\n            End Get\n        End Property\n\n        Public Sub ExecuteCommand(ByVal CommandID As Integer) Implements Inventor.ApplicationAddInServer.ExecuteCommand\n            \n        End Sub\n\n        Public Sub UserInterfaceEvents_OnResetCommandBars(ByVal CommandBars As ObjectsEnumerator, ByVal Context As NameValueMap)\n            Try\n            \tm_Button_1.AddButtonToCommandBar(oAsmPanel, oCustomPanel, True)  ", "'Add button One to Assembly Ribbon", "\n            \tm_Button_2.AddButtonToCommandBar(oAsmPanel, oCustomPanel, True)  ", "'Add button Two to Assembly Ribbon", "\n            \tm_Button_2.AddButtonToCommandBar(oPartPanel, oCustomPanel, True) ", "'Add button Two to Part Ribbon", "\n            \tm_Button_2.AddButtonToCommandBar(oSMPanel, oCustomPanel, True)   ", "'Add button Two to Sheet Metal Part Ribbon", "\n            \tm_Button_3.AddButtonToCommandBar(oDrwPanel, oCustomPanel, True)  ", "'Add button Three to Drawing Ribbon", "\n            Catch\n            End Try\n        End Sub\n\n        Public Sub UserInterfaceEvents_OnResetRibbonInterface(ByVal context As NameValueMap)\n            ", "' For future use", "\n        End Sub\n        \n#End Region\n    End Class\n\nEnd Namespace"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Shorten filename and path\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Reference the features underlying a solid body\n                    ", "solution": ["oBody", ".", "AffectedByFeatures", ".", "Item", "(", "i", ")", ".", "Name"], "author": "rogmitch"},
{"created at": [], "solution Title": "\n                        Re: Select line using two points\n                    ", "solution": ["Sub Main()\n\tsPointOneX = 3\n\tsPointOneY = 5\n\tsPointTwoX = 25\n\tsPointTwoY = 5\n\t", "' Now we have to convert \"mm\" to \"cm\", because Inventor is measuring in \"cm\"", "\n\tsPointOneX = sPointOneX * 0.1\n\tsPointOneY = sPointOneY * 0.1\n\tsPointTwoX = sPointTwoX * 0.1\n\tsPointTwoY = sPointTwoY * 0.1\n\tDim oDoc As Document = ThisApplication.ActiveDocument\n\tDim oCD As ComponentDefinition = oDoc.ComponentDefinition\n\t", "' Use this line to pick the first sketch in part", "\n\tDim oSketch As Sketch = oCD.Sketches.Item(1)\n\t", "' Or use this line to pick the sketch by name", "\n\t'Dim oSketch As Sketch = oCD.Sketches.Item(\"Sketch1\")\n\tDim dCon As DimensionConstraint\n\tDim oPoint As Point2D\n\tDim oPara As Parameter\n\tFor Each dCon In oSketch.DimensionConstraints\n\t\tDim oPoints As ObjectCollection = dCon.AnchorPoints()\n\t\tDim TryNext As Boolean = False\n\t\tDim OurCon As Boolean = False\n\t\tFor Each oPoint In oPoints\n\t\t\tIf oPoint.X = sPointOneX And oPoint.Y = sPointOneY Then\n\t\t\t\tIf TryNext Then\n\t\t\t\t\tOurCon = CheckSecond(oPoint)\n\t\t\t\tElse\n\t\t\t\t\tTryNext = True\n\t\t\t\tEnd If\n\t\t\tElse If oPoint.X = sPointTwoX And oPoint.Y = sPointTwoY Then\n\t\t\t\tIf TryNext Then\n\t\t\t\t\tOurCon = CheckSecond(oPoint)\n\t\t\t\tElse\n\t\t\t\t\tTryNext = True\n\t\t\t\tEnd If\n\t\t\tEnd If\n\t\tNext\n\t\tIf OurCon = True Then\n\t\t\toPara = dCon.Parameter\n\t\t\tExit For\n\t\tEnd If\n\tNext\n\tIf Not oPara Is Nothing Then\n\t\tMsgBox(oPara.Name & vbLf & oPara.Value * 10) ", "'value multiplicated by 10 to convert units from \"cm\" to \"mm\"", "\n\tEnd If\nEnd Sub\n\nPrivate sPointOneX As Double\nPrivate sPointOneY As Double\nPrivate sPointTwoX As Double\nPrivate sPointTwoY As Double\n\nPrivate Function CheckSecond(oPoint As Point2d) As Boolean\n\tIf oPoint.X = sPointOneX And oPoint.Y = sPointOneY Then\n\t\tReturn True\n\tElse If oPoint.X = sPointTwoX And oPoint.Y = sPointTwoY\n\t\tReturn True\n\tEnd If\n\tReturn False\nEnd Function"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Open, Save as and Close with iLogic Hidden\n                    ", "solution": ["part = Component.InventorComponent(\"Glashalter oben:1\")\ndoc = ThisApplication.Documents.Open(part.Definition.Document.FullDocumentName, False)\noPath = ThisDoc.Path & \"\\Glashalter\\\"\ndoc.SaveAs(oPath & \"Glashalter oben position_\" & Position & \".stp\" , True)\ndoc.Close()", "part = ThisApplication.Documents.Open(ThisDoc.Path & \"\\Glashalter oben.idw\", False)\npart.SaveAs(ThisDoc.Path & \"\\Glashalter\\Glashalter_oben_Position\" & Position & \".pdf\",True)\npart.Close() "], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Getting creation and modified date in ilogic\n                    ", "solution": ["Dim strFileName As String\nstrFileName = ThisDoc.Document.FullFileName", "Dim oFS As Object\noFS = CreateObject(\"Scripting.FileSystemObject\")\nDim oDate1 As String\nDim oDate2 As String\noDate1 = oFS.GetFile(strFileName).DateLastModified\noDate2 = oFS.GetFile(strFileName).DateCreated"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Use ILogic to get an Iproperty from a file and set it in another file\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Error message The parameter is incorrect. (Exception from HRESULT: 0x8007005\n                    ", "solution": ["For", " ", "Each", " ", "tb", " ", "As", " ", "Textbox", " ", "In", " ", "ThisApplication", ".", "ActiveDocument", ".", "ActiveSheet", ".", "TitleBlock", ".", "Definition", ".", "Sketch", ".", "Textboxes", "\n    ", "MsgBox", "(", "tb", ".", "text", " ", "&", " ", "vbLf", " ", "&", " ", "vbLf", " ", "&", " ", "\"", "FORMATTEDTEXT: ", "\"", " ", "&", " ", "tb", ".", "FormattedText", ")", "\n", "Next"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Select ClientGraphics objects without ClientID\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: VBA code to iLogic code - run before Save\n                    ", "solution": ["Option Explicit\n\nSub Main()\n    Massstab()\n    WieGezSpiegelbildlich()\n    WerkstoffZugewiesen()\nEnd Sub\n\n'===========================================================\nPrivate Function EE_FormatScale(ByVal S As Double) As String\n  If S >= 1 Then\n    If (10 * S Mod 10) = 0 Then\n      EE_FormatScale = ", "Microsoft.VisualBasic.Strings.", "Format(S, \"0\") + \":1\"\n    Else\n      EE_FormatScale = ", "Microsoft.VisualBasic.Strings.", "Format(S, \"0.0\") + \":1\"\n    End If\n  Else\n    If (10 * (1 / S) Mod 10) = 0 Then\n      EE_FormatScale = \"1:\" + ", "Microsoft.VisualBasic.Strings.", "Format(1 / S, \"0\")\n    Else\n      EE_FormatScale = \"1:\" + ", "Microsoft.VisualBasic.Strings.", "Format(1 / S, \"0.0\")\n    End If\n  End If\nEnd Function\n\nSub WerkstoffZugewiesen()\n    \nEnd Sub\n\nSub WieGezSpiegelbildlich()\n    On Error Resume Next\n    Dim oDoc As Document\n    Dim sName As String\n\n    'Objekt herstellen\n    oDoc = ThisApplication.ActiveDocument\n    \n    sName = Mid(GetFilename(oDoc.ReferencedDocuments.Item(1).FullDocumentName), 1, Len(ThisApplication.ActiveDocument.ReferencedDocuments.Item(1).FullDocumentName) - 6)\n    sName = Mid(sName, 1, 11)\n    \n    'F\u00fcge Zeichenfolge ein\n    oDoc.PropertySets(\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\").Item(\"Bauteilnummer\").Value = sName & \"01\"\n    oDoc.PropertySets(\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\").Item(\"Bauteilnummer gespiegelt\").Value = sName & \"02\"\nEnd Sub\n\nSub Massstab()\n  Dim I, J, K As Integer\n  Dim EE_MainScale, EE_TestScale As Double\n  Dim EE_SiteScale(10) As Double\n  Dim EE_Text As String\n  Dim EE_Da As Boolean\n  Dim EE_Prop As Property\n  Dim oDoc As Document\n  \n  'Objekt herstellen\n  oDoc = ThisApplication.ActiveDocument\n  \n  'Funktioniert nur, wenn Drawing und mindestens eine Ansicht vorhanden ist:\n  If oDoc.DocumentType <> kDrawingDocumentObject Then Exit Sub\n  If oDoc.ActiveSheet.DrawingViews.Count = 0 Then Exit Sub\n  \n    'Ermittle die Hauptansicht und Hauptma\u00dfstab\n    EE_MainScale = oDoc.ActiveSheet.DrawingViews(1).Scale\n  \n  'Ermittle weitere Ansichten\n  J = 0\n  For I = 1 To oDoc.ActiveSheet.DrawingViews.Count\n    'Ermittle weitere Ma\u00dfst\u00e4be\n    EE_TestScale = oDoc.ActiveSheet.DrawingViews(I).Scale\n    'Pr\u00fcfe, ob gleich hauptma\u00dfstab\n    If EE_TestScale <> EE_MainScale Then\n      'Pr\u00fcfe, ob schon als Nebenma\u00dfstab vorhanden\n      If J > 0 Then\n        For K = 0 To J\n          If EE_TestScale = EE_SiteScale(K) Then\n            EE_TestScale = 0\n            Exit For\n          End If\n        Next K\n      End If\n      If EE_TestScale <> 0 Then\n        'Nimm in die Liste auf\n        EE_SiteScale(J) = EE_TestScale\n        J = J + 1\n        'Die liste ist begrenzt...\n        If J = 11 Then Exit For\n      End If\n    End If\n  Next I\n  \n  EE_Text = EE_FormatScale(EE_MainScale)\n  If J > 0 Then\n    EE_Text = EE_Text + \" (\"\n    For I = 0 To J - 1\n      If (I > 0) And (I < 2) Then\n        EE_Text = EE_Text + \" \"\n      End If\n      If (I > 1) Then\n        EE_Text = EE_Text + \", \"\n      End If\n      EE_Text = EE_Text + EE_FormatScale(EE_SiteScale(I))\n    Next I\n    EE_Text = EE_Text + \")\"\n  End If\n\n  \n  \n  'F\u00fcge Zeichenfolge ein\n  'Ma\u00dfstab vorhanden?\n  EE_Da = False\n  For Each EE_Prop In oDoc.PropertySets(\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\") 'Benutzerdefiniert\n    If EE_Prop.Name = \"Massstab\" Then\n      EE_Da = True\n      Exit For\n    End If\n  Next\n  If EE_Da Then\n    oDoc.PropertySets(\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\").Item(\"Massstab\").Value = EE_Text\n  Else\n    oDoc.PropertySets(\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\").Add", "(", "EE_Text, \"Massstab\"", ")", "\n  End If\n  \nEnd Sub\n\n\nPublic Function GetFilename(ByVal Path As String) As String\n    On Error Resume Next\n    GetFilename = Mid(Path, Len(GetPath(Path)) + 1, Len(Path) - Len(GetPath(Path)))\nEnd Function\n\n\nPublic Function GetPath(ByVal Pfad As String) As String\n    On Error Resume Next\n    Dim I As Integer\n    Dim iPos As Integer \n    iPos = InStrRev(Pfad, \"\\\", , vbBinaryCompare)\n    GetPath = Mid(Pfad, 1, iPos)\nEnd Function"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Varying printed line weights in Inventor 2016\n                    ", "solution": [], "author": "F.Goncalves"},
{"created at": [], "solution Title": "\n                        Re: Change Sheet Format - iLogic\n                    ", "solution": [], "author": "F.Goncalves"},
{"created at": [], "solution Title": "\n                        Re: Mass from different Levels of Detail\n                    ", "solution": ["'get RepresentationsManager\nDim repMgr As RepresentationsManager = ThisApplication.ActiveDocument.ComponentDefinition.RepresentationsManager\n\n'record current LevelOfDetailRepresentation\nDim oCurrentRepName As String  = repMgr.ActiveLevelOfDetailRepresentation.Name \n\nDim oRep As LevelOfDetailRepresentation\nDim oRepName  \nDim oMass \n\nFor Each oRep In repMgr.LevelOfDetailRepresentations\n    oRepName = oRep.Name\n    'activate this LOD\n    repMgr.LevelOfDetailRepresentations.Item(oRepName).Activate\n    'get mass\n     oMass = iProperties.Mass\n     'update value of custom property\n     iProperties.Value(\"Custom\", oRepName) = iProperties.Mass\nNext\n\n'restore \nrepMgr.LevelOfDetailRepresentations.Item(oCurrentRepName).Activate\n"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Passing variables between ilogic subs\n                    ", "solution": ["Sub Main\n     Dim x As Integer = 5\n     Dim y As Integer = 2\n\n     Call MathSub(x,y)\n     FunctionResult = MathFunction(x,y)\n     MsgBox(\"This is in main sub. The result of the function call is: \" & FunctionResult)\nEnd Sub\n\n'note the sub does not have a type\nSub MathSub(var1 as Integer, var2 as Integer)\n\n         Dim resultvar As Integer\n         resultvar = var1 + var2\n         MsgBox(\"I am in the sub MathSub. The result I give is: \" & resultvar)\nEnd Sub\n\n'note the function has to have a type\nFunction MathFunction(var1 as Integer, var2 as Integer) As Integer\n       Dim result As Integer\n       result =  var1-var2\n       Return result\nEnd Function", "'Need to put all of the rule inside of a class in order to be able to use the shared variable.\nClass TestShared\n\t'This shared access modifier keyword makes the information accessible to all subs/functions/properties in this class\n\tShared oResult As Integer\n\t\n\t\tSub Main\n\t\t\toResult = 0\n\t\t\tDim x As Integer = 5\n\t\t\tDim y As Integer = 2\n\t\t\tMsgBox(\"Before sub call result: \" & vbLf & oResult)\n\t\t\tPerformMath(x, y)\n\t\t\tMsgBox(\"After sub call result: \" & vbLf & oResult)\n\t\tEnd Sub\n\t\t\n\t\t'note the sub does not have a type\n\t\tSub PerformMath(var1 as Integer, var2 as Integer)\n\t\t\t\toResult = var1 + var2\n\t\tEnd Sub\nEnd Class\n"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Getting Thumbnail from BOM Row\n                    ", "solution": [], "author": "Raider_007"},
{"created at": [], "solution Title": "\n                        Re: Open part with iLogic\n                    ", "solution": ["' Get user input", "\nDim oSelection As String = Parameter(\"ActiveParts\")\n\n", "' Catch null selection", "\nIf oSelection = vbNullString Then", "    MessageBox", ".", "Show", "(", "\"", "No FileName found to open", "\"", ", ", "\"", "ERROR", "\"", ")", "    Return ' Exit rule\nEnd If\n", "' Go throught the selection", "\nDim oAsmCompDef As ComponentDefinition = ThisApplication.ActiveDocument.ComponentDefinition\nDim oOcc As ComponentOccurrence\nDim oDoc As Document\nDim sTS As String\nDim FNP As Integer\nDim FName As String\nFor Each oOcc In oAsmCompDef.Occurrences\n    sTS = oOcc.Name\n    FNP = InStrRev(sTS, \":\", -1)\n    FName = Microsoft.VisualBasic.Left(sTS, FNP - 1)\n    If oOcc.DefinitionDocumentType = DocumentTypeEnum.kPartDocumentObject Then\n        FName = FName & \".ipt\"\n    ElseIf oOcc.DefinitionDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n        FName = FName & \".iam\"\n    End If\n    If FName = oSelection Then\n        oDoc = oOcc.Definition.Document\n        ThisApplication.Documents.Open(oDoc.FullFileName, True)\n    End If\nNext", "' Clear the selection", "Parameter(\"ActiveParts\") = \"\""], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: ilogic - list all custom properties\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nDim Docs As DocumentsEnumerator = oDoc.AllReferencedDocuments\nDim aDoc As Document\nDim Pros As New ArrayList\nDim item As String\nFor Each aDoc In Docs\n    Dim oPropsets As PropertySets\n    oPropsets = oDoc.PropertySets\n    Dim oPropSet As PropertySet\n    oPropSet = oPropsets.Item(\"Inventor User Defined Properties\")\n    Dim oPro As Inventor.Property\n    For Each oPro In oPropSet\n        Dim Found As Boolean = False\n        For Each item In Pros\n            If oPro.Name = item Then Found = True\n        Next\n        If Found = False Then\n            Pros.Add(oPro.Name)\n        End If\n    Next\nNext\n\nDim AllPros As String = \"List of all used iProperties:\"\nFor Each item In Pros\n    AllPros = AllPros & vbLf & item\nNext\nMsgBox(AllPros)"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: iLogic Printing - another one.\n                    ", "solution": ["Dim oDrawDoc As Document\noDrawDoc = ThisApplication.ActiveDocument\n \n \n Dim oPrintMgr As PrintManager\n oPrintMgr = oDrawDoc.PrintManager\n 'specify your printer name\n oPrintMgr.Printer = \"Canon iR2520 UFRII LT\"\n\noPrintMgr.ColorMode = kPrintDefaultColorMode\noPrintMgr.Orientation = kLandscapeOrientation\noPrintMgr.PaperSize = PaperSizeEnum.kPaperSizeA3\noPrintMgr.Scalemode = 13827\noPrintMgr.Scale = 0.5\noPrintMgr.SubmitPrint"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Edit Part number field in assembly and all children\n                    ", "solution": [], "author": "coreyparks"},
{"created at": [], "solution Title": "\n                        Re: Import sketched blocks from template\n                    ", "solution": ["'check file type \nIf ThisDoc.Document.DocumentType <> kDrawingDocumentObject Then\nReturn\nEnd If\n\n'identitfy the source template file\nDim SourceFile As String = \"\\\\server\\departments\\CAD\\Inventor\\Templates\\Standard.idw\" \n\n'define the drawing document\nDim oDrawDoc As DrawingDocument \noDrawDoc = ThisApplication.ActiveEditDocument\n\n'get the current browser pane name\nDim oCurrentPane As String\noCurrentPane = ThisApplication.ActiveDocument.BrowserPanes.ActivePane.Name\n\n'make sure the current browser pane is not the Vault pane to avoid error\nIf oCurrentPane = \"Vault\" Then\nThisApplication.ActiveDocument.BrowserPanes.Item(\"Model\").Activate\nEnd If\n\n'get the current sheet\nDim oCurrentNumber  As Sheet\noCurrentNumber = oDrawDoc.ActiveSheet\n\n'delete symbols not in use\nFor Each oSymbol In oDrawDoc.SketchedSymbolDefinitions\n\tIf oSymbol.IsReferenced = False Then\n\toSymbol.Delete()\n\tEnd If\t\nNext\t\n\n'create list of symbols in use \nDim oExistingSymbolsList As New ArrayList\nFor Each oExistingSymbol In oDrawDoc.SketchedSymbolDefinitions\n\toExistingSymbolsList.add(oExistingSymbol.Name)\nNext\n\n'Open the template         \nDim strSourceIDW As DrawingDocument\nstrSourceIDW = ThisApplication.Documents.Open(SourceFile, False)\n\n'iterate through the symbols\nFor Each oSymbol In strSourceIDW.SketchedSymbolDefinitions\n\t'look to see if the symbol is in the \"in use\" list\n\tIf oExistingSymbolsList.Contains(oSymbol.Name) Then\n\t\t'do nothing\n\tElse\n\t\t' Get the new definitions.\n\t\tDim oNewSymbol As SketchedSymbolDefinition\n\t\toNewSymbol = strSourceIDW.SketchedSymbolDefinitions.Item(oSymbol.Name)\n\t\t'place the definitions in the drawing resources folder\n\t\tDim oNewSymbolDef As SketchedSymbolDefinition\n\t\toNewSymbolDef = oNewSymbol.CopyTo(oDrawDoc)\n\tEnd If\nNext \n\n'activate the original current sheet\noCurrentNumber.activate \n\n'close the template/source file\nstrSourceIDW.Close()\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Change iPart member with iLogic\n                    ", "solution": ["oLength = InputBox(\"Enter the Length parameter\", \"iLogic\", \"3.0 in\")", "Dim oAsmDoc as Inventor.AssemblyDocument", "oAsmDoc = ThisDoc.Document", "Dim comp As Inventor.ComponentOccurrence ", "For Each comp In oAsmDoc.ComponentDefinition.Occurrences", "\u00a0\u00a0 \u00a0i = iPart.FindRow(comp.Name, \"Length\", \"=\", oLength) ", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0If i < 0 Then", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0MessageBox.Show(\"Some problem occurred\", \"iLogic\")", "\u00a0\u00a0 \u00a0Else", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0MessageBox.Show(\"iPart set to row: \" & oLength , \"iLogic\")", "\u00a0\u00a0 \u00a0End If", "Next\n"], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: MultiBody- part - Featurename - any name - colour change\n                    ", "solution": ["Dim oDoc As Document = ThisDoc.Document\nDim oFeat As PartFeature\nFor Each oFeat In oDoc.ComponentDefinition.Features\n    Feature.Color(oFeat.Name) = \"Cadet Blue\"\nNext"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: How to hide Surface Bodies in a Drawing using the API\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Template migration notification when exporting BIM (.adsk) data\n                    ", "solution": [], "author": "waynehelley"},
{"created at": [], "solution Title": "\n                        Re: WPF Window inside an Inventor Add-In\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: ilogic get full name of part in assembly\n                    ", "solution": ["'start of ilogic code\n' get the active assembly\nDim openDoc As Document\nopenDoc = ThisDoc.Document\nDim docFile As Document\ncount = 1\nFor Each docFile In openDoc.AllReferencedDocuments     \n 'Iterate through all of the occurrences and ground them.\n\n\nMessageBox.Show(count, \"Title\")\ncount = count +1\n\nDim FNamePos As Long\nFNamePos = InStrRev(docFile.FullFileName, \"\\\", -1) \nDim docFName As String \ndocFName = docFile.FullFileName\ndocFName = Right(docFile.FullFileName, Len(docFile.FullFileName) - FNamePos)\nMessageBox.Show(docFName, \"Title\")\n\n\nNext\n' end of ilogic code"], "author": "Ezekiel12"},
{"created at": [], "solution Title": "\n                        Betreff: Saving parts and sheet metal parts to different folders\n                    ", "solution": ["iProperties.Value(\"Project\", \"Document SubType Name\")=\"Sheet Metal\"", "If iProperties.Value(\"Project\", \"Document SubType Name\")<>\"Sheet Metal\" then\n'Save in Parts folder\nThisDoc.Document.SaveAs(oFolderPRT & oPN & \".ipt\" , True)\nMessageBox.Show(\"File: \" & oPN & \".ipt\"& vbLf & \"Succesfully saved in : \" & oFolderPRT , \"Succes\")\n'Goto Endrule\nElse\nThisDoc.Document.SaveAs(oFolderSM_PRT & oPN & \".ipt\" , True)\nEnd If\nGoto Endrule\nNO:MessageBox.Show(\"No Files are saved!\", \"ERROR\")\nEndrule:  "], "author": "frederik.vollbr"},
{"created at": [], "solution Title": "\n                        Re: Change BOM structure within part using iLogic\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Finding iFeature from iPart member\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Change BOM Structure to Reference at parts in assembly and subassembly\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Select an extruded face using VBA code???\n                    ", "solution": ["Public Sub CreateDwg() \n      DwgFileName = \"C:\\Test.dwg\"\n       ", "       Dim oDoc As PartDocument\n       Set oDoc = ThisApplication.ActiveDocument\n\n       Dim oExtrude As ExtrudeFeature\n       Set oExtrude = oDoc.ComponentDefinition.Features.Item(1)\n       Dim oBaseFace As Face\n       Set oBaseFace = oEx.EndFaces.Item(1)\n\n       Dim Cm As CommandManager\n       Set Cm = ThisApplication.CommandManager\n\n       Call Cm.PostPrivateEvent(PrivateEventTypeEnum.kFileNameEvent, DwgFileName)\n\n       Dim oDef As ButtonDefinition\n       Set oDef = ThisApplication.CommandManager.ControlDefinitions.Item(\"GeomToDXFCommand\")\n  \n    Call oDef.Execute\nEnd Sub"], "author": "tri_nguyen_bkhc"},
{"created at": [], "solution Title": "\n                        Betreff: addtitleblock --simplest test\n                    ", "solution": ["Public Sub addMyTitleBlock()\nDim oDrawDoc As DrawingDocument\nSet oDrawDoc = ThisApplication.ActiveDocument\n' get the Title blocks (definitions)\nDim oTitleBlks As TitleBlockDefinitions\nSet oTitleBlks = oDrawDoc.TitleBlockDefinitions\n\nDim osheet As Sheet\nSet osheet = oDrawDoc.ActiveSheet\n\n\nDim sPromptStrings(1 To 17) As String\nsPromptStrings(1) = \"\"\nsPromptStrings(2) = \"\"\nsPromptStrings(3) = \"\"\nsPromptStrings(4) = \"\"\nsPromptStrings(5) = \"\"\nsPromptStrings(6) = \"\"\nsPromptStrings(7) = \"\"\nsPromptStrings(8) = \"\"\nsPromptStrings(9) = \"\"\nsPromptStrings(10) = \"\"\nsPromptStrings(11) = \"\"\nsPromptStrings(12) = \"\"\nsPromptStrings(13) = \"\"\nsPromptStrings(14) = \"\"\nsPromptStrings(15) = \"\"\nsPromptStrings(16) = \"\"\nsPromptStrings(17) = \"\"\n\n\nDim otitleblock As titleblock\n'Set oNewTitleBlockDef = oDrawDoc.TitleBlockDefinitions.Item(\"myxTitleBlock\")\n'Set otitleblock = osheet.AddTitleBlock(oNewTitleBlockDef)\nSet oNewTitleBlockDef = oDrawDoc.TitleBlockDefinitions.Item(1) 'here you may put your titleblock name in (\"my titleblock name\")\nSet otitleblock = osheet.AddTitleBlock(oNewTitleBlockDef, , sPromptStrings)\n\nEnd Sub", "sPromptStrings(17) = \"\""], "author": "m.tworek"},
{"created at": [], "solution Title": "\n                        Re: iLogic - writing to custom column in part list\n                    ", "solution": [], "author": "JohnsonSigurt"},
{"created at": [], "solution Title": "\n                        Re: Need help on iLogic to convert BOM status in part level\n                    ", "solution": ["'", "BOM Stucture Options", "'", "BOMStructureEnum.kNormalBOMStructure", "'", "BOMStructureEnum.kInseparableBOMStructure", "'", "BOMStructureEnum.kNormalBOMStructure", "'", "BOMStructureEnum.kPhantomBOMStructure", "'", "BOMStructureEnum.kPurchasedBOMStructure", "'", "BOMStructureEnum.kReferenceBOMStructure", "\n", "ThisDoc", ".", "Document", ".", "ComponentDefinition", ".", "BOMStructure", " ", "=", " ", "BOMStructureEnum", ".", "kNormalBOMStructure"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Parameter Max Rule\n                    ", "solution": ["If myParameter > 240 Then\n   msgbox(\"Value too high\",vbOKOnly,\"No dice\")\n   myParameter = 240\nEnd If"], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Replace drawing dimension text\n                    ", "solution": ["\nIf cDim.Text.FormattedText.Contains(TXT1Find) Then\n\n  cDim.Text.FormattedText = cDim.Text.FormattedText.Replace(TXT1Find, NewTXT1)\n\nEnd If\n"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Appearance Asset - Image File Name & Offset Position & Rotation\n                    ", "solution": [], "author": "lando7189"},
{"created at": [], "solution Title": "\n                        Re: DesignViewRepresentation Object\n                    ", "solution": ["Public Sub addViewRep()\n\n    Dim doc As Document\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim compDef As ComponentDefinition\n    Set compDef = doc.ComponentDefinition\n    \n    Dim rep As DesignViewRepresentation\n    Set rep = compDef.RepresentationsManager.DesignViewRepresentations.Add\n    \n\nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Renumber BOM iLogic/API question\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: ilogic-Drawing\n                    ", "solution": [], "author": "theo.bot"},
{"created at": [], "solution Title": "\n                        Re: Frame Generator - Curved Member Length\n                    ", "solution": [], "author": "bob.holland"},
{"created at": [], "solution Title": "\n                        Re: iLogic Format ID for properties\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How do I change my default line weight in inventor?\n                    ", "solution": [], "author": "cadmanagershat"},
{"created at": [], "solution Title": "\n                        Re: Inventor Apprentice 2015 not reading files.\n                    ", "solution": [], "author": "gary.belisle"},
{"created at": [], "solution Title": "\n                        Re: Suppressing Folders\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How to read an ADSKLIB file ?\n                    ", "solution": ["Public Sub DumpAllAppearancesInAllLibraries()\n    ' Open a file to write the results.\n    Open \"C:\\Temp\\AllLibAppearanceDump.txt\" For Output As #1\n    \n    ' Iterate through the libraries.\n    Dim assetLib As AssetLibrary\n    For Each assetLib In ThisApplication.AssetLibraries\n        Print #1, \"Library\" & assetLib.DisplayName\n        Print #1, \"  DisplayName: \" & assetLib.DisplayName\n        Print #1, \"  FullFileName: \" & assetLib.FullFileName\n        Print #1, \"  InternalName: \" & assetLib.InternalName\n        Print #1, \"  IsReadOnly: \" & assetLib.IsReadOnly\n        \n        Dim appearance As Asset\n        For Each appearance In assetLib.AppearanceAssets\n            Print #1, \"    Appearance\"\n            Print #1, \"      DisplayName: \" & appearance.DisplayName\n            Print #1, \"      Category: \" & appearance.Category.DisplayName\n            Print #1, \"      HasTexture: \" & appearance.HasTexture\n            Print #1, \"      IsReadOnly: \" & appearance.IsReadOnly\n            Print #1, \"      Name: \" & appearance.Name\n            \n            Dim value As AssetValue\n            For Each value In appearance\n                Call PrintAssetValue(value, 8)\n            Next\n        Next\n    Next\n    \n    Close #1\n    \n    MsgBox \"Finished writing output to \"\"C:\\Temp\\AllLibAppearanceDump.txt\"\"\"\nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Rename component in model browser with ilogic after placing component\n                    ", "solution": ["Component", ".", "InventorComponent", "(", "\"", "default_name", "\"", ")", ".", "Name", " ", "=", " ", "\"", "new_name", "\""], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Hole table\n                    ", "solution": ["Public Sub Hole_Table_Title()\n\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    \n    Dim oTable As HoleTable\n    \n    For Each oTable In oSheet.HoleTables\n        oTable.Title = oTable.ParentView.Label.Text\n    Next\n    \nEnd Sub"], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: Changing the text in a textbox attached to a sketched symbol\n                    ", "solution": ["Sub ChangeSymbolPromptTextValue()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    If TypeName(oDoc.SelectSet(1)) = \"SketchedSymbol\" Then\n        Dim oSymbol As SketchedSymbol\n        Set oSymbol = oDoc.SelectSet(1)\n    \n        Dim oSymbolDef As SketchedSymbolDefinition\n        Set oSymbolDef = oSymbol.Definition\n        \n        Dim oSk As DrawingSketch\n        Set oSk = oSymbolDef.Sketch\n        \n        Dim oText As TextBox, oTempText As TextBox\n        For Each oTempText In oSk.TextBoxes\n            If InStr(1, LCase(oTempText.FormattedText), LCase(\"</Prompt>\")) Then\n                Set oText = oTempText\n                Exit For\n            End If\n        Next\n        \n        If Not oText Is Nothing Then\n            oSymbol.SetPromptResultText oText, \"999\"\n        End If\n    End If\nEnd Sub\n"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: start guide for VBA programming\n                    ", "solution": [], "author": "Kubuz"},
{"created at": [], "solution Title": "\n                        Re: Help me add a Fact of the Day to a User From!\n                    ", "solution": [], "author": "waynehelley"},
{"created at": [], "solution Title": "\n                        Re: Directory Folder Search\n                    ", "solution": ["Hi PhilShields. I think this will work:", "As you specified - the code will give you everything after the '-' in the folder name. If you've got multiple '-' characters in the folder name then it'll find the first one and give you everything after that. Makes sense?", "Imports", " ", "System", ".", "IO", "\n", "Imports", " ", "System", ".", "IO", ".", "File", "\n        \n", "Dim", " ", "EndOfFolderName", " ", "As", " ", "String", "Dim", " ", "StartOfFolderName", " ", "As", " ", "String", " ", "=", " ", "\"", "1499PAS", "\"", "\n", "Dim DirName", " ", "As", " ", "String", "\n", "' Loop through all folders in the defined directory        \n", "For", " ", "Each", " ", "dir", " ", "As", " ", "String", " ", "In", " ", "Directory", ".", "GetDirectories", "(", "\"", "N:\\14projects", "\"", ")", " ", "            ", "Dim", " ", "dirInfo", " ", "As", " ", "New", " ", "DirectoryInfo", "(", "Dir", ")", "\n            ", "DirName", " ", "=", " ", "dirInfo", ".", "Name", "\n            \n            ", "'", " Check to see if the folder name starts with the defined text", "            ", "            If", " ", "DirName", ".", "Contains", "(", "StartOfFolderName", ")", " ", "Then", "\n                ", "'", " Create a string containing folder name after the character '-'", "                ", "                EndOfFolderName", " ", "=", " ", "Right", "(", "DirName", ", ", "Len", "(", "DirName", ")", " ", "-", " ", "DirName", ".", "IndexOf", "(", "\"", "-", "\"", ")", " ", "-", " ", "2", ")", "\n                ", "MessageBox", ".", "Show", "(", "EndOfFolderName", ", ", "\"", "Title", "\"", ")", "\n            ", "End", " ", "If", "\n", "Next"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Control naming in place ilogic component command\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: problems making code stick\n                    ", "solution": ["If WALLTHICKNESS <=6  And FORMED = \"COLD\" Then\nCORNERRAD =2* WALLTHICKNESS\nElseIf WALLTHICKNESS<=10  And FORMED = \"COLD\" Then\nCORNERRAD =2.5* WALLTHICKNESS\nElseIf WALLTHICKNESS >10  And  FORMED = \"COLD\" Then\nCORNERRAD=3* WALLTHICKNESS\nEnd If\nIf FORMED = \"HOT\" Then CORNERRAD=1.5* WALLTHICKNESS"], "author": "cadmanagershat"},
{"created at": [], "solution Title": "\n                        Re: ilogic: problem to change material\n                    ", "solution": ["oDoc = ThisDoc.Document\naPath = ThisDoc.Path\n\nFor Each cOcc In oDoc.ComponentDefinition.Occurrences\noPath = Replace(cOcc.Definition.Document.File.FullFileName, _\n\t\t\t\t\t\"\\\" & cOcc.Definition.Document.DisplayName, \"\")\nIf oPath = aPath Then\n\tIf iProperties.Value (\"Custom\", \"Werkstoff\") = \"1.4301\" Then\n\t\tIf iProperties.MaterialOfComponent (cOcc.Name) = \"St 37-2\" Then\n\t\t\tiProperties.MaterialOfComponent (cOcc.Name) = \"1.4301\"\n\t\tEnd If\n\tEnd If\n\tIf iProperties.Value(\"Custom\", \"Werkstoff\") = \"St 37-2\" Then\n\t\tIf iProperties.MaterialOfComponent (cOcc.Name) = \"1.4301\" Then\n\t\t\tiProperties.MaterialOfComponent(cOcc.Name) = \"St 37-2\"\n\t\tEnd If\n\tEnd If\nEnd If\nNext"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: VB.net get iProperties from selected part/assembly in drawing\n                    ", "solution": [], "author": "prakasht66"},
{"created at": [], "solution Title": "\n                        Re: ThisDoc.Document.SaveAs error\n                    ", "solution": ["NewFileName = ThisDoc.Path & \"\\\" & \"NewAssembly.iam\"\n\nThisDoc.Document.SaveAs(Newfilename,True)"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Reference key of same Entity Flat Pattern v.s. Folded Model\n                    ", "solution": [], "author": "NL-Laurens"},
{"created at": [], "solution Title": "\n                        Re: Help with PDF and folder creation with iLogic\n                    ", "solution": [" '------start of iLogic-------\noDocument = ThisApplication.ActiveDocument\noPath = ThisDoc.Path\noFileName = ThisDoc.FileName(False) 'without extension\noPDFAddIn = ThisApplication.ApplicationAddIns.ItemById _\n(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\nDim oDrawing As DrawingDocument = ThisDoc.Document\n\nDim oSheet As Sheet\nDim lPos, rPos,sLen As Long\nDim sSheetName As String\nDim sSheetNumber As Integer\nDim sheetCount As Integer = oDrawing.Sheets.Count\n\noFolder = oPath & \"\\PDF\"\n\nIf Not System.IO.Directory.Exists(oFolder) Then \n    System.IO.Directory.CreateDirectory(oFolder)\nEnd If\n\nFor Each oSheet In oDrawing.Sheets\n\nlPos = InStr(oSheet.Name, \":\")\nsLen = Len(oSheet.Name)\nsSheetName = Left(oSheet.Name, lPos -1)\nsSheetNumber = Right(oSheet.Name, sLen -lPos)\n\nIf oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then\noOptions.Value(\"All_Color_AS_Black\") = 1\noOptions.Value(\"Remove_Line_Weights\") = 1\noOptions.Value(\"Vector_Resolution\") = 400\noOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintSheetRange\noOptions.Value(\"Custom_Begin_Sheet\") = sSheetNumber\noOptions.Value(\"Custom_End_Sheet\") = sSheetNumber\nEnd If\n\nIf sheetCount = 1 Then\n\toDataMedium.FileName = oFolder & \"\\\" & oFileName & \"R\" & iProperties.Value(\"Project\", \"Revision Number\") & \"\" & sSheetName & \".pdf\"\nElseIf sheetCount > 1\n\toDataMedium.FileName = oFolder & \"\\\" & oFileName & \"-0\" & sSheetNumber & \"R\" & iProperties.Value(\"Project\", \"Revision Number\") & \"\" & sSheetName & \".pdf\"\nEnd If\n\noPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n\nNext\n'------end of iLogic-------", "'Substitute this declaration\noDocument = ThisApplication.ActiveDocument\n\n'With this\nDim oDocument As inventor._Document = ThisApplication.documents.itembyname(ThisDoc.PathAndFileName(True))"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Short cuts for large assemblies\n                    ", "solution": [], "author": "brendan.henders"},
{"created at": [], "solution Title": "\n                        Re: Toggle Hole Types with iLogic\n                    ", "solution": ["oInput = InputRadioBox _", "(\"Select one:\", \"Make Countersink.\", \"Make Counterbore\", True, \u201ciLogic\")", "Dim oHole As HoleFeature", "oHole = ThisDoc.Document.ComponentDefinition.Features.Item(\"Hole1\")", "If oInput = True Then", "oHole.SetCSink(1 mm, 82*(PI/180)) '82 degrees", "Else", "oHole.SetCBore(2 mm, 1 mm) ", "End If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Demote selection set to sub-assembly\n                    ", "solution": ["        Dim oCommandMgr As CommandManager = _invApp.CommandManager\n\n        oCommandMgr.PostPrivateEvent(PrivateEventTypeEnum.kFileNameEvent, \"C:\\Temp\\NewAssembly.iam\")\n\n        Dim oControlDef As ControlDefinition = oCommandMgr.ControlDefinitions.Item(\"AssemblyDemoteCmd\")\n\n        Call oControlDef.Execute()"], "author": "gary.belisle"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule running multiple time\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Project sketch block entities from one occurence to another\n                    ", "solution": ["                foreach (Inventor.SketchEntity oSketchBlockEntity in oSketchBlockDef.SketchEntities)\n                {\n                    Inventor.SketchEntity fromBlockDef;\n                    fromBlockDef = (Inventor.SketchEntity)oSketchBlock.GetObject(oSketchBlockEntity);\n\n                    oSketchEntityNew = mySketchProxy.AddByProjectingEntity(fromBlockDef); \n                }"], "author": "C-Hoppen"},
{"created at": [], "solution Title": "\n                        Re: How to do add in for inventor 2011..\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Ribbonbar IV2015 position of button\n                    ", "solution": [], "author": "Rene.Gerlach"},
{"created at": [], "solution Title": "\n                        Re: iLogic Code for single sheet pdf creation\n                    ", "solution": ["oDoc", "=", "ThisDoc", ".", "Document", "oSheets", "=", "oDoc", ".", "Sheets", "    ", "For", "Each", "oSheet", "In", "oSheets", "        ", "oSheet", ".", "activate", "        ", "oView", "=", "oSheet", ".", "DrawingViews", ".", "Item", "(", "1", ")", "        ", "modelName", "=", "oView", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", "        ", "oProp", "=", "modelName", ".", "PropertySets", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", "        ", "ActiveSheet", ".", "Sheet", ".", "Name", "=", "oProp", ".", "Item", "(", "\"", "Part Number", "\"", ")", ".", "Value", "&", "\"", "\"", "&", "oProp", ".", "Item", "(", "\"", "Description", "\"", ")", ".", "Value", "&", "\"", "\"", "&", "oProp", ".", "Item", "(", "\"", "Authority", "\"", ")", ".", "Value", "    ", "Next", "oSheets", "(", "1", ")", ".", "activate"], "author": "ZdenkoS"},
{"created at": [], "solution Title": "\n                        Re: Error in code\n                    ", "solution": [], "author": "prakasht66"},
{"created at": [], "solution Title": "\n                        Re: iLogic error when triggered in a part within an assembly\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: VBA to Break Link to Table\n                    ", "solution": ["Sub BreakLinkToFactorySample()\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    If oDoc.ComponentDefinition.IsiAssemblyMember Then\n        oDoc.ComponentDefinition.iAssemblyMember.BreakLinkToFactory\n    End If\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: create dimension to workaxis in drawing (.idw)\n                    ", "solution": [], "author": "16101972"},
{"created at": [], "solution Title": "\n                        Re: iLogic updating query\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: linear diametric dimension not perpendicular to workaxis?\n                    ", "solution": [], "author": "MTHulli"},
{"created at": [], "solution Title": "\n                        Re: Ilogic codes and snippets, is there a list somewhere?\n                    ", "solution": [], "author": "tgrady"},
{"created at": [], "solution Title": "\n                        Re: unallooned parts\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Component Occurrences and Reference Keys\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Tranlate body in Part file Ilogic\n                    ", "solution": ["Dim partDoc As PartDocument\npartDoc = ThisApplication.ActiveDocument\nDim partDef As PartComponentDefinition\npartDef = partDoc.ComponentDefinition\n\nDim body As SurfaceBody\nbody = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kPartBodyFilter, _\n                                \"Select body to move.\")\n\nDim bodies As ObjectCollection\nbodies = ThisApplication.TransientObjects.CreateObjectCollection\nbodies.Add(body)\n\nDim moveDef As MoveDefinition\nmoveDef = partDef.Features.MoveFeatures.CreateMoveDefinition(bodies)\n\nmoveDef.AddFreeDrag(5, 8, 10)\npartDef.Features.MoveFeatures.Add(moveDef)"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: renumber partlist\n                    ", "solution": ["Sub RenumberPartslistSample()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    \n    ' In UI select a part list first\n    Dim oPL As PartsList\n    Set oPL = oDoc.SelectSet(1)\n    \n    ' Set which rows will be renumbered, like rows from 50 to 100\n    Dim iStart As Integer, iEnd As Integer, sInput As String\n    sInput = InputBox(\"Input the start row number for renumbering\", \"Input data\")\n    iStart = CInt(sInput)\n    sInput = InputBox(\"Input the end row number for renumbering\", \"Input data\")\n    iEnd = CInt(sInput)\n    \n    ' Set the start value for the renumbered rows and step value\n    Dim iRenumStartValue As Integer, iRenumStepValue As Integer\n    sInput = InputBox(\"Input the start value for renumbering\", \"Input data\")\n    iRenumStartValue = CInt(sInput)\n    sInput = InputBox(\"Input the step value for renumbering\", \"Input data\")\n    iRenumStepValue = CInt(sInput)\n    \n    Dim oRow As PartsListRow\n    Dim i As Integer: i = 1\n    For Each oRow In oPL.PartsListRows\n        If i > iStart - 1 And i < iEnd + 1 Then\n            oRow.Item(\"ITEM\").Value = iRenumStartValue + iRenumStepValue * (i - iStart)\n        End If\n        Debug.Print oRow.Item(\"ITEM\").Value\n        i = i + 1\n    Next\n    \n    oSheet.Update\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Rule to suppress features containg certain word\n                    ", "solution": ["Sub Main\n\tFsuppress(True)\n\tFsuppress(False)\nEnd Sub\n\nPrivate Sub Fsuppress(suppress As Boolean)\nmyparam = InputBox(\"Feature Name\", \"Feature suppress\", \"\")\nIf myparam <> \"\" Then\n\tDim oDoc as PartDocument\n\toDoc = ThisApplication.ActiveDocument\n\tDim oFeature As PartFeature\n\tFor Each oFeature In oDoc.ComponentDefinition.Features\n\t\tIf oFeature.Name.ToUpper.Contains(myparam.ToUpper) Then\n\t\t\toFeature.Suppressed = suppress\n\t\t\toDoc.Update\n\t\tEnd If\n\tNext\nEnd If\nEnd Sub"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Hybrid Configurator (iAssembly & Assembly)\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "Document", " ", "=", " ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "oComp", " ", "As", " ", "ComponentOccurrence", "\n", "Dim", " ", "oComps", " ", "As", " ", "ComponentOccurrences", " ", "=", " ", "oDoc", ".", "ComponentDefinition", ".", "Occurrences", "\n", "Dim", " ", "oCompList", " ", "As", " ", "String", "\n\n", "For", " ", "Each", " ", "oComp", " ", "In", " ", "oComps", "\n    ", "oCompList", " ", "=", " ", "oCompList", " ", "&", " vbLf ", "&", " ", "oComp", ".", "Name", "\n", "Next", "\n\n", "'", "MessageBox.Show(oCompList, \"Component List\")", "oOcc", " ", "=", " ", "oComps", ".", "Item", "(", "2", ")", "\n", "'", "MessageBox.Show(oOcc.Name, \"Arm Assembly\")", "\n", "If", " ", "oOcc", ".", "IsiAssemblyMember", " ", "=", " False ", "Then", "\n    ", "MessageBox", ".", "Show", "(", "\"", "Not iAssembly Member", "\"", ", ", "\"", "iAssembly Test", "\"", ")", "\n", "Exit Sub", "\n", "Else", "\n", "'", "MessageBox.Show(\"Is iAssembly Member\", \"iAssembly Test\")", "End", " ", "If", "\n\n", "Dim", " ", "oAssyDoc", " ", "As", " ", "AssemblyDocument", " ", "=", " ", "oOcc", ".", "Definition", ".", "Document", "\n", "Dim", " ", "oAssyDocDef", " ", "As", " ", "AssemblyComponentDefinition", " ", "=", " ", "oAssyDoc", ".", "ComponentDefinition", "\n\n", "Dim", " ", "oFactory", " ", "As", " ", "iAssemblyFactory", " ", "=", " ", "oAssyDocDef", ".", "iAssemblyMember", ".", "ParentFactory", "\n", "Dim", " ", "oTableRows", " ", "As", " ", "iAssemblyTableRows", " ", "=", " ", "oFactory", ".", "TableRows", "\n", "Dim", " ", "HolderList", " ", "As", " ", "String", "\n\n", "For", " ", "Each", " ", "oRow", " ", "As", " ", "iAssemblyTableRow", " ", "In", " ", "oTableRows", "\n    ", "HolderList", " ", "=", " ", "HolderList", " ", "&", " vbLf ", "&", " ", "oRow", ".", "MemberName", "\n", "Next", "\n", "MessageBox", ".", "Show", "(", "HolderList", ", ", "\"", "iAssembly Table List", "\"", ")"], "author": "gfunnybus"},
{"created at": [], "solution Title": "\n                        Re: Extract iFeature\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Macro for deleting certain types of sketch constraints\n                    ", "solution": ["oTransMgr = ThisApplication.TransactionManager\noTrans = oTransMgr.StartTransaction(ThisApplication.ActiveDocument, \"CancellaVincoli\")\noActiveEditObject = ThisApplication.ActiveEditObject\nDim entity As SketchEntity\n\nOn Error Resume Next\n\nIf oActiveEditObject.Type = ObjectTypeEnum.kPlanarSketchObject Then\n  For Each entity In oActiveEditObject.SketchEntities\n    For Each oCont In entity.Constraints\n\t  If Not oCont.Type = ObjectTypeEnum.kCoincidentConstraintObject Then\n\t\toCont.Delete\n      End If\n    Next\n  Next\nEnd If\noTrans.End"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Can't get OnExecute event to fire for my VB.Net add-in\n                    ", "solution": [], "author": "santoshr0114"},
{"created at": [], "solution Title": "\n                        Re: Constraining a sketch\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: reorder columns in parts list\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic help + Accessing the File name of a referenced document.\n                    ", "solution": ["Sub Main()\n\noWrite = System.IO.File.CreateText(\"d:\\test.txt\") ' Change the filename as you like\noDoc = ThisDoc.Document\n \nFor j = 1 To oDoc.AllReferencedDocuments.Count\n    oWrite.WriteLine(j & \") \" & oDoc.AllReferencedDocuments.Item(j).FullFileName)\nNext\n\n' ******* if you want the first level referenced documents then this is your option *********\n'For j = 1 To oDoc.AllReferencedDocuments.Count\n'    oWrite.WriteLine(j & \") \" & oDoc.AllReferencedDocuments.Item(j).FullFileName)\n'Next\n\noWrite.Close\nEnd Sub"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: check if it is derived part in vba\n                    ", "solution": ["  Public Sub ModifDerivedParams()\n\n        If ThisApplication.ActiveDocument.DocumentType <>\n\n           kPartDocumentObject Then\n\n            MsgBox(\"Make a Part Document the active document\")\n\n            End\n\n        End If\n\n \n\n        Dim oDerPart As PartDocument\n\n        oDerPart = ThisApplication.ActiveDocument\n\n \n\n        Dim oDerPartComp As DerivedPartComponent\n\n        If oDerPart.ComponentDefinition.ReferenceComponents.\n\n           DerivedPartComponents.Count < 1 Then\n\n            MsgBox(\"No Derived Part Components in this part\")\n\n            End\n\n        End If\n\n \n\n        oDerPartComp =\n\n         oDerPart.ComponentDefinition.\n\n          ReferenceComponents.DerivedPartComponents(1)\n\n \n\n        Dim oDerivedPartDef As DerivedPartUniformScaleDef\n\n        oDerivedPartDef = oDerPartComp.Definition\n\n \n\n        Dim oDerEntity As DerivedPartEntity\n\n        For Each oDerEntity In oDerivedPartDef.Parameters\n\n            If (oDerEntity.ReferencedEntity.Name = \"d1\") Then\n\n                oDerEntity.IncludeEntity = True\n\n                Exit For\n\n            End If\n\n        Next\n\n        'Set Definition back, so DerivedPart Document is updated\n\n        oDerPartComp.Definition = oDerivedPartDef\n\n    End Sub"], "author": "humberto"},
{"created at": [], "solution Title": "\n                        Re: Ilogic: Save Copy As Inventor DWG instead of exporting to AutoCAD DWG\n                    ", "solution": ["'True = Save off a copy as a DWG, and keeps the current file open\nThisDoc.Document.SaveAsInventorDWG(\"C:\\Temp\\Test_001.dwg\", True) "], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Replacing multiple file references in a single .idw using iLogic?\n                    ", "solution": ["Sub SAVEDETAIL (ByVal TemplateDrawing As String, ByVal PLAINPN As String, ByVal PNWSUFFIX As String, ByVal PTASSYPN As String, ByVal filePath As String)\n\n   DESTINATIONDOC = ThisApplication.DOCUMENTS.Open(TemplateDrawing, False)\n   DESTINATIONDOC.SAVEAS(filePath & PLAINPN & \".idw\", False)\n   Dim STRNEWREFNAME As String\n   Dim OREFFILE As FILEDESCRIPTOR\n\n      For Each OREFFILE In DESTINATIONDOC.FILE.REFERENCEDFILEDESCRIPTORS\n         Dim OORIGREFNAME As String\n\t OORIGREFNAME = OREFFILE.FULLFILENAME\n\t\t\t\n            If OORIGREFNAME.EndsWith(\"-001.ipt\") Then           \n\t      STRNEWREFNAME = filePath & PNWSUFFIX & \".ipt\"            \n\t      OREFFILE.REPLACEREFERENCE(STRNEWREFNAME)\n\n            ElseIf OORIGREFNAME.EndsWith(\"-002.ipt\") Then           \n\t      STRNEWREFNAME = filePath & PTASSYPN & \".ipt\"            \n\t      OREFFILE.REPLACEREFERENCE(STRNEWREFNAME)\n\n            ElseIf OORIGREFNAME.EndsWith(\".iam\") Then           \n\t      STRNEWREFNAME = filePath & PTASSYPN & \".iam\"            \n\t      OREFFILE.REPLACEREFERENCE(STRNEWREFNAME)\n\t\t\t\t\n\t    End If\n\n      Next\n\nDESTINATIONDOC.Update()\nDESTINATIONDOC.Save\nDESTINATIONDOC.Close\n\t  \nEnd Sub"], "author": "LOONYLEN"},
{"created at": [], "solution Title": "\n                        Re: Name in browser ?\n                    ", "solution": ["Lista = \"\"\nFor Each oOcc In ThisApplication.ActiveDocument.ComponentDefinition.Occurrences.AllLeafOccurrences\n\tLista &= oOcc.Name & vbCr\nNext\n\tMsgBox(Lista)"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: InvalidComObjectException\n                    ", "solution": [" Private Sub oApplicationEvents_OnSaveDocument(ByVal DocumentObject As Inventor._Document, ByVal BeforeOrAfter As Inventor.EventTimingEnum, ByVal Context As Inventor.NameValueMap, ByRef HandlingCode As Inventor.HandlingCodeEnum) Handles oApplicationEvents.OnSaveDocument\n\n        Try\n            ' BEFORE\n            If BeforeOrAfter = EventTimingEnum.kBefore Then\n                ' IDW Zoom Extents\n                If DocumentObject.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then"], "author": "KentKeller"},
{"created at": [], "solution Title": "\n                        Re: Add ifeature to workplane instead of face\n                    ", "solution": ["Public Sub PlaceMyiFeature()\n\n'Get the part document.\nDim oPartDoc As PartDocument: Set oPartDoc = ThisApplication.ActiveDocument\n\n'Get the XY Front plane\nDim oPlane As WorkPlane: Set oPlane = oPartDoc.ComponentDefinition.WorkPlanes.Item(\"XY Plane\")\n \n'Reference the part features collection\nDim oFeatures As PartFeatures: Set oFeatures = oPartDoc.ComponentDefinition.Features\n\n'Create an iFeatureDefinition object.\nDim oiFeatureDef As iFeatureDefinition\nSet oiFeatureDef = oFeatures.iFeatures.CreateiFeatureDefinition(\"C:\\Temp\\iFeatureTEST.ide\")\n\n'Set the input.\nDim oInput As iFeatureInput\nFor Each oInput In oiFeatureDef.iFeatureInputs\n    Dim oParamInput As iFeatureParameterInput\n    Select Case oInput.Name\n        Case \"Sketch Plane\"\n        Dim oPlaneInput As iFeatureSketchPlaneInput\n        Set oPlaneInput = oInput\n        oPlaneInput.PlaneInput = oPlane\n    End Select\nNext\n\n' Create the iFeature.\nDim oiFeature As iFeature\nSet oiFeature = oFeatures.iFeatures.Add(oiFeatureDef)\nEnd Sub\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Help! Marshal.GetActiveObject(\"Inventor.Application\") FAILS!\n                    ", "solution": [], "author": "liminma8458"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2014 object model\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: How to consume a workplane while creating work point\n                    ", "solution": ["    oWorkPoint.ConsumeInputs = True\n\n", "    oWorkPoint.ConsumeInputs = True\n    oWorkPoint.ConsumeInputs = False\n    oWorkPoint.ConsumeInputs = True"], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: ILogic Drawing Sheet Size Detection\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Call webservices from Inventor Addin\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: General Question:  Userforms, Modules and passing varibales between them\n                    ", "solution": ["MyForm f = new MyForm(myStuff);\n\nf.Show();\n\nor\n\nMyForm f = new MyForm(); //default ctor\n\nf.SetStuff(myStuff);\nf.StuffSomeMore(someMoreStuff);\n\nf.OtherStuff = stillMoreStuffVariable;\n\nf.Show();"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: VBA: Easiest way to retrieve values from excel\n                    ", "solution": ["Public Sub GetExcelData()\n    Dim excelApp As Excel.Application\n    ' Try to connect to a running instance of Excel.\n    On Error Resume Next\n    Set excelApp = GetObject(, \"Excel.Application\")\n    \n    If Err Then\n        Err.Clear\n        \n        ' Couldn't connect so start Excel.  It's started invisibly.\n        Set excelApp = CreateObject(\"Excel.Application\")\n        \n        If Err Then\n            MsgBox \"Cannot access excel.\"\n            Exit Sub\n        End If\n    End If\n    \n    ' You can make it visible if you want.  This is especially\n    ' helpful when debugging.\n    excelApp.Visible = True\n    \n    ' Open the spreadsheet.\n    Dim wb As Workbook\n    Set wb = excelApp.Workbooks.Open(\"C:\\Temp\\Thing.xlsx\")\n    If Err Then\n        MsgBox \"Unable to open the Excel document.\"\n        Exit Sub\n    End If\n    \n    ' Access a certain sheet.\n    Dim ws As Worksheet\n    Set ws = wb.Worksheets.Item(\"Numbers\")\n    If Err Then\n        MsgBox \"Unable to get the worksheet.\"\n        Exit Sub\n    End If\n    \n    ' Read some values from the sheet.\n    Dim row As Integer\n    Dim col As Integer\n    For row = 1 To 5\n        For col = 1 To 3\n            Debug.Print \"Row: \" & row & \", Col: \" & col & \" = \" & ws.Cells(row, col)\n        Next\n    Next\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Easy way to fillet two sketch lines?\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: iLogic - cancel Save operation by rule triggered by \"Before Save Docume\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How to set dimension display as tolerance?\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Name dim/parameter during creation (dimcontraints)\n                    ", "solution": ["Dim oDim As DimensionConstraint\nSet oCoord1 = oTG.CreatePoint2d(2.5, -3)\nSet oDim = oSketch.DimensionConstraints.AddOffset(oLine1, oCenterLine, oTG.CreatePoint2d(-5, 0), True, False)\noDim.Parameter.Name = \"TEST\""], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: Get Point in UserCoordinateSystem\n                    ", "solution": [], "author": "a.wagner"},
{"created at": [], "solution Title": "\n                        Re: Get/Set iProperty directly with Id Enum\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: iLogic Pick SelectionFilterEnum\n                    ", "solution": ["ThisApplication.CommandManager.Pick(kAssemblyLeafOccurrenceFilter,\"Select Beam\")"], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: How to add equational or reference dimension constraint with API?\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Multiple addins using the same ribbon tab and panel\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Weird behavior, tolerance, inch to cm, dim limits\n                    ", "solution": ["Sub TolTest()\n\n    Dim doc As PartDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim param As parameter\n    Set param = doc.ComponentDefinition.parameters(\"adn\")\n\n    Call param.tolerance.SetToLimits(kLimitsStackedTolerance, \"5 in\", \"3 in\")\n\nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: invalid conversion.\n                    ", "solution": ["oDataMedium.FileName =", "oDataMedium ="], "author": "danny"},
{"created at": [], "solution Title": "\n                        Re: Suppressing components based on part of their name\n                    ", "solution": ["' set a reference to the assembly component definintion.", "Dim oAsmCompDef As AssemblyComponentDefinition", "oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition", "Dim myString1 As String = \"380V\" ", "Dim myString2 As String = \"460V\" ", "Dim myString3 As String = \"575V\" ", "'Iterate through all of the occurrences", "Dim oOccurrence As ComponentOccurrence", "For Each oOccurrence In oAsmCompDef.Occurrences", "\u00a0\u00a0 \u00a0If oOccurrence.Name.Contains(myString1) Or _ ", "\u00a0\u00a0 \u00a0oOccurrence.Name.Contains(myString2) Or _ ", "\u00a0\u00a0 \u00a0oOccurrence.Name.Contains(myString3) Then", "\u00a0\u00a0 \u00a0'Show occurrence name in the message", "\u00a0\u00a0 \u00a0MessageBox.Show(\"Suppressing: \" & oOccurrence.Name, \"iLogic\")", "\u00a0\u00a0 \u00a0'suppress the component", "\u00a0\u00a0 \u00a0Component.IsActive(oOccurrence.Name) = False", "\u00a0\u00a0 \u00a0Else", "\u00a0\u00a0 \u00a0End If", "Next"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: InputRadioBox for exporting DXF's\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Using Linq with Inventor iLogic\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Detecting the presence of bends\n                    ", "solution": ["        ", "Dim", " ", "BendCount", " ", "As", " ", "Integer", " ", "=", " ", "ThisApplication", ".", "ActiveEditDocument", ".", "ComponentDefinition", ".", "Bends", ".", "Count", "\n        ", "MessageBox", ".", "Show", "(", "BendCount", ", ", "\"", "Title", "\"", ")"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to automatically set LevelofDetail to Master\n                    ", "solution": ["'activate Master LOD", "ThisApplication.ActiveDocument.ComponentDefinition. _", "RepresentationsManager.LevelofDetailRepresentations(\"Master\").Activate"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Help creating BreakOut View\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Bend Tags to view (Add Tags to View)\n                    ", "solution": [], "author": "WHassan"},
{"created at": [], "solution Title": "\n                        Re: PDF Export all open drawings wont iterate\n                    ", "solution": ["Dim oDoc As Inventor.Document", "For Each oDoc In ThisApplication.Documents.VisibleDocuments", "\u00a0\u00a0\u00a0\u00a0 If (oDoc.documenttype = kDrawingDocumentObject) Then 'Found a drawing", "\u00a0\u00a0 \u00a0 'find the postion of the last backslash in the path", "\u00a0\u00a0 \u00a0oFNamePos = InStrRev(oDoc.fullfileName, \"\\\", -1)\u00a0 \u00a0", "\u00a0\u00a0 \u00a0'get the file name with the file extension", "\u00a0\u00a0 \u00a0oName = Right(oDoc.fullfileName, Len(oDoc.fullfileName) - oFNamePos)", "\u00a0\u00a0 \u00a0'get the path of the folder containing the file", "\u00a0\u00a0 \u00a0oPath = Left(oDoc.fullfileName, Len(oDoc.fullfileName) - Len(oName))", "\u00a0\u00a0 \u00a0 'get the file name (without extension)", "\u00a0\u00a0 \u00a0oShortName = Left(oName, Len(oName) - 4)", "\u00a0\u00a0 \u00a0oPDFAddIn = ThisApplication.ApplicationAddIns.ItemById _", "\u00a0\u00a0 \u00a0(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")", "\u00a0\u00a0 \u00a0oContext = ThisApplication.TransientObjects.CreateTranslationContext", "\u00a0\u00a0 \u00a0oContext.Type = IOMechanismEnum.kFileBrowseIOMechanism", "\u00a0\u00a0 \u00a0oOptions = ThisApplication.TransientObjects.CreateNameValueMap", "\u00a0\u00a0 \u00a0oDataMedium = ThisApplication.TransientObjects.CreateDataMedium", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0If oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then", "\u00a0\u00a0 \u00a0'oOptions.Value(\"All_Color_AS_Black\") = 0", "\u00a0\u00a0 \u00a0'oOptions.Value(\"Remove_Line_Weights\") = 0", "\u00a0\u00a0 \u00a0oOptions.Value(\"Vector_Resolution\") = 400", "\u00a0\u00a0 \u00a0oOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets", "\u00a0\u00a0 \u00a0'oOptions.Value(\"Custom_Begin_Sheet\") = 2", "\u00a0\u00a0 \u00a0'oOptions.Value(\"Custom_End_Sheet\") = 4", "\u00a0\u00a0 \u00a0End If", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0'get PDF target folder path", "\u00a0\u00a0 \u00a0oFolder = oPath & \"\\PDF\"", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0'Check for the PDF folder and create it if it does not exist", "\u00a0\u00a0 \u00a0If Not System.IO.Directory.Exists(oFolder) Then", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.IO.Directory.CreateDirectory(oFolder)", "\u00a0\u00a0 \u00a0End If", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0'Set the PDF target file name", "\u00a0\u00a0 \u00a0oDataMedium.FileName = oFolder & \"\\\" & oShortName & \".pdf\"", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0On Error Goto handlePDFLock", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0'Publish document", "\u00a0\u00a0 \u00a0oPDFAddIn.SaveCopyAs(oDoc, oContext, oOptions, oDataMedium)", "\u00a0\u00a0\u00a0\u00a0\u00a0 End If", "Next oDoc", "'Show message box", "MessageBox.Show(\"PDF(s) exported to: \" & oFolder , \"iLogic\") ", "'--------------------------------------------------------------------------------", "Exit Sub", "handlePDFLock:", "MessageBox.Show(\"At least one PDF could not be saved, \" _", "& \"most likely someone else has it open.\", _", "\"No PDF for you \" & ThisApplication.GeneralOptions.UserName & \"!\")", "Resume Next\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: View Height and Width Drive View Scale?\n                    ", "solution": [], "author": "gadurai"},
{"created at": [], "solution Title": "\n                        Re: (iLogic ) Automatic Update Flat Pattern Extents\n                    ", "solution": ["Imports  Inventor.UnitsTypeEnum\n        \nDim oParams As Parameters\noParams=ThisDoc.Document.ComponentDefinition.Parameters\n                \nDim oUserParams As UserParameters\noUserParams=oParams.UserParameters     \n'look for user parameter and try to set it                \nTry\noUserParams(\"lengthExtents\").Value = SheetMetal.FlatExtentsLength /10\noUserParams(\"widthExtents\").Value = SheetMetal.FlatExtentsWidth /10\nCatch\n' assume error means not found and create it\noUserParams.AddByValue(\"lengthExtents\", SheetMetal.FlatExtentsLength /10, kmillimeterLengthUnits)\noUserParams.AddByValue(\"widthExtents\", SheetMetal.FlatExtentsWidth /10, kmillimeterLengthUnits)\nEnd Try\n'ensure the parameters are exported/exposed as custom iProperties\nParameter.Param(\"lengthExtents\").ExposedAsProperty = True\nParameter.Param(\"widthExtents\").ExposedAsProperty = True\nParameter.Param(\"Thickness\").ExposedAsProperty = True\n'set the description to read in the iProperties\niProperties.Value(\"Project\", \"Stock Number\") = \"=<Thickness>PL x <widthExtents> x <lengthExtents>\"\n\nParameter.Param(\"lengthExtents\").CustomPropertyFormat.ShowLeadingZeros = False\nParameter.Param(\"lengthExtents\").CustomPropertyFormat.ShowTrailingZeros = False\nParameter.Param(\"lengthExtents\").CustomPropertyFormat.ShowUnitsString = False\n\nParameter.Param(\"widthExtents\").CustomPropertyFormat.ShowLeadingZeros = False\nParameter.Param(\"widthExtents\").CustomPropertyFormat.ShowTrailingZeros = False\nParameter.Param(\"widthExtents\").CustomPropertyFormat.ShowUnitsString = False\n\nParameter.Param(\"Thickness\").CustomPropertyFormat.ShowLeadingZeros = False\nParameter.Param(\"Thickness\").CustomPropertyFormat.ShowTrailingZeros = False\nParameter.Param(\"Thickness\").CustomPropertyFormat.ShowUnitsString = False\n\n'update the file\niLogicVb.UpdateWhenDone = True\n\n", "Imports  Inventor.UnitsTypeEnum\n        \nDim oParams As Parameters\noParams=ThisDoc.Document.ComponentDefinition.Parameters\n                \nDim oUserParams As UserParameters\noUserParams=oParams.UserParameters     \n'look for user parameter and try to set it                \nTry\noUserParams(\"lengthExtents\").Value = Round(SheetMetal.FlatExtentsLength /10)\noUserParams(\"widthExtents\").Value = Round(SheetMetal.FlatExtentsWidth /10)\nCatch\n' assume error means not found and create it\noUserParams.AddByValue(\"lengthExtents\", Round(SheetMetal.FlatExtentsLength /10), kmillimeterLengthUnits)\noUserParams.AddByValue(\"widthExtents\", Round(SheetMetal.FlatExtentsWidth /10), kmillimeterLengthUnits)\noUserParams.AddByValue(\"Thickness\", Round(Thickness/10), kmillimeterLengthUnits)\nEnd Try\n'ensure the parameters are exported/exposed as custom iProperties\nParameter.Param(\"lengthExtents\").ExposedAsProperty = True\nParameter.Param(\"widthExtents\").ExposedAsProperty = True\nParameter.Param(\"Thickness\").ExposedAsProperty = True\n'set the description to read in the iProperties\niProperties.Value(\"Project\", \"Stock Number\") = \"=<Thickness>PL x <widthExtents> x <lengthExtents>\"\n\nParameter.Param(\"lengthExtents\").CustomPropertyFormat.ShowLeadingZeros = False\nParameter.Param(\"lengthExtents\").CustomPropertyFormat.ShowTrailingZeros = False\nParameter.Param(\"lengthExtents\").CustomPropertyFormat.ShowUnitsString = False\n\nParameter.Param(\"widthExtents\").CustomPropertyFormat.ShowLeadingZeros = False\nParameter.Param(\"widthExtents\").CustomPropertyFormat.ShowTrailingZeros = False\nParameter.Param(\"widthExtents\").CustomPropertyFormat.ShowUnitsString = False\n\nParameter.Param(\"Thickness\").CustomPropertyFormat.ShowLeadingZeros = False\nParameter.Param(\"Thickness\").CustomPropertyFormat.ShowTrailingZeros = False\nParameter.Param(\"Thickness\").CustomPropertyFormat.ShowUnitsString = False\n\n'update the file\niLogicVb.UpdateWhenDone = True"], "author": "humberto"},
{"created at": [], "solution Title": "\n                        Re: Hide Dimension when turning on a layer.\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Setup creation - Addin\n                    ", "solution": [], "author": "gadurai"},
{"created at": [], "solution Title": "\n                        Re: ilogic rectangular pattern\n                    ", "solution": ["'PartAQty = 2 ul\n'PartBQty = 2 ul\n'PartCQty = 2 ul\n'PartDQty = 2 ul\n'MultiValue.SetList(\"PartSelection\", \"A\", \"AB\", \"ABC\", \"ABCD\")\n'TotalParts = 8 ul\n\n\nSelect Case PartSelection\n\tCase = \"A\"\n\t\tPartAQty = TotalParts\n\t\tPartBQty = 0\n\t\tPartCQty = 0\n\t\tPartDQty = 0\n\tCase = \"AB\"\n\t\tPartAQty = Ceil(TotalParts / 2) 'Floor(TotalParts / 2) + (TotalParts Mod 2)\n\t\tPartBQty = Floor(TotalParts / 2) \n\t\tPartCQty = 0\n\t\tPartDQty = 0\n\tCase = \"ABC\"\n\t\tPartAQty = Ceil(TotalParts / 3)\n\t\tPartBQty = Floor(TotalParts / 3) + Floor((TotalParts Mod 3) / 2)\n\t\tPartCQty = Floor(TotalParts / 3)\n\t\tPartDQty = 0\n\tCase = \"ABCD\"\n\t\tPartAQty = Ceil(TotalParts / 4)\n\t\tPartBQty = Floor(TotalParts / 4) + Floor((TotalParts Mod 4) / 2)\n\t\tPartCQty = Floor(TotalParts / 4) + Floor((TotalParts Mod 4) / 3) \n\t\tPartDQty = Floor(TotalParts / 4)\n\tCase Else \n\t\tPartAQty = 0\n\t\tPartBQty = 0\n\t\tPartCQty = 0\n\t\tPartDQty = 0\nEnd Select ", "Component.IsActive(\"PatternPartAHere:1\") = PartAQty\nComponent.IsActive(\"PatternPartCHere:1\") = PartCQty\nComponent.IsActive(\"PatternPartBHere:1\") = PartBQty\nComponent.IsActive(\"PatternPartDHere:1\") = PartDQty\n\n"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: ApprenticeServerComponent minimal installation\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Need help with iLogic Rule to Rename drawing sheets. to input parameters\n                    ", "solution": ["Dim sInput1 As String", "sInput1 = \"Cover Sheet\"", "Dim sInput2 As String", "sInput2 = \"General Arangement\"", "Dim sInput3 As String", "sInput3 = \"Details\"", "Dim lPos As Long", "Dim lLen As Long", "Dim sShName As String", "Dim sShNum As String", "Dim oSheet As Sheet\u00a0\u00a0\u00a0\u00a0 \u00a0", "For Each oSheet In ThisApplication.ActiveDocument.Sheets", "\u00a0\u00a0 lPos = InStr(oSheet.Name, \":\") 'position of the colon", "\u00a0\u00a0 lLen = Len(oSheet.Name) 'length of sheet name", "\u00a0\u00a0 sShName = Left(oSheet.Name, lPos -1) 'string left of the colon", "\u00a0\u00a0 sShNum = Right(oSheet.Name, lLen -lPos ) 'string right of the colon", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 If sShNum = 1 Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oSheet.Name = sInput1", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ElseIf sShNum = 2 Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oSheet.Name = sInput2", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ElseIf sShNum = 3 Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oSheet.Name = sInput3", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 End If", "Next"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Setting Colors to complex parts with iLogic\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Get point on DrawingCurve\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Custom iProprerty expression =<MASS> =<VOLUME> is N/A\n                    ", "solution": [], "author": "p.rybar"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic/Rules with iParts and iAssembly\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Get assembly occurrence from edge selection\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Call part by name in assembly\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Looking for someone to write me some code\n                    ", "solution": ["Public Sub Del_Custom_iProp()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oCustomset As PropertySet\n    Set oCustomset = oDoc.PropertySets.Item(\"User Defined Properties\")\n    \n    Dim oProp As Property\n    For Each oProp In oCustomset\n        If oProp.Name = \"Not Needed\" Or oProp.Name = \"Also Not Needed\" Then\n            oProp.Delete\n        End If\n    Next\n            \nEnd Sub"], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: Method Argument Error\n                    ", "solution": [], "author": "tim.mulder"},
{"created at": [], "solution Title": "\n                        Re: DRAWINGS: How to make a default label for section view without scale?\n                    ", "solution": [], "author": "mslosar"},
{"created at": [], "solution Title": "\n                        Re: Coordinate Dimensioning\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: ViewCube rotation through API\n                    ", "solution": ["Dim oCamera As Camera \noCamera = ThisApplication.ActiveView.Camera \noCamera.ViewOrientationType = 10756 'Back View \noCamera.Apply", "\n'list of view enums:\n'  kTopViewOrientation = 10754\n'  kRightViewOrientation = 10755\n'  kBackViewOrientation = 10756\n'  kBottomViewOrientation = 10757\n'  kLeftViewOrientation = 10758\n'  kIsoTopRightViewOrientation = 10759\n'  kIsoTopLeftViewOrientation = 10760\n'  kIsoBottomRightViewOrientation = 10761\n'  kIsoBottomLeftViewOrientation = 10762\n'  kFrontViewOrientation = 10764\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Display custom ActiveSheet.Size in title block\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2014 /  Drawing (IDW, DWG) export to Picture\n                    ", "solution": ["' Saves the active sheet as a bmp.\n' Resolution - Specifies the output resolution of the bitmap in pixels per inch.\n' Filename - Specifies the output filename. It should have a .bmp extension.\nPublic Sub SaveDrawingAsBMP()\n\nDim Resolution As Long\nDim Filename As String\n\n Resolution = 400\n Filename = \"c:\\temp\\test.png\"\n\n' Get the active view.\nDim oView As View\nSet oView = ThisApplication.ActiveView\n' Determine if a drawing is active.\nIf Not oView.Document.DocumentType = kDrawingDocumentObject Then\n    MsgBox \"A drawing must be active when running this macro.\"\n    Exit Sub\n    End If\n    ' Get the drawing document and the active sheet.\n    Dim oDoc As DrawingDocument\n    Set oDoc = oView.Document\n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    ' Change the size of the window so it has the same aspect ratio\n    ' as the sheet. It changes the view such that it becomes smaller.\n    oView.WindowState = kNormalWindow\n    Dim dSheetAspectRatio As Double\n    dSheetAspectRatio = oSheet.Width / oSheet.Height\n    Dim dViewAspectRatio As Double\n    dViewAspectRatio = oView.Width / oView.Height\n    If dSheetAspectRatio > dViewAspectRatio Then\n        oView.Width = oView.Height / dSheetAspectRatio\n    Else\n        oView.Height = oView.Width / dSheetAspectRatio\n    End If\n    ' Get the camera and use it to zoom in so only the sheet is seen.\n    Dim oCamera As Camera\n    Set oCamera = oView.Camera\n    oCamera.Target = ThisApplication.TransientGeometry.CreatePoint(oSheet.Width / 2, oSheet.Height / 2, 0)\n    oCamera.Eye = ThisApplication.TransientGeometry.CreatePoint(oCamera.Target.X, oCamera.Target.Y, 1)\n    Call oCamera.SetExtents(oSheet.Width, oSheet.Height)\n    oCamera.ApplyWithoutTransition\n    ' Determine the number of pixels wide the output needs to be\n    ' to result in the desired resolution.\n    Dim lWidth As Long\n    lWidth = (oSheet.Width / 2.54) * Resolution\n    ' Save the bitmap.\n    Call oView.SaveAsBitmap(Filename, lWidth, 0)\n\nEnd Sub"], "author": "mario.lung"},
{"created at": [], "solution Title": "\n                        Re: DisplayName returns different values with standard and professional\n                    ", "solution": [], "author": "djreesing"},
{"created at": [], "solution Title": "\n                        Re: Inventor Developer Tools\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: BOM Sorting VBA\n                    ", "solution": [], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: VBA Macro to Toggle Enabled / Disabled Component\n                    ", "solution": ["Sub ToggleOccuEnabled()\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    If oDoc.DocumentType = kAssemblyDocumentObject Then\n        Dim oAssy As AssemblyDocument\n        Set oAssy = oDoc\n        \n        Dim oDef As AssemblyComponentDefinition\n        Set oDef = oAssy.ComponentDefinition\n        \n        If oAssy.SelectSet.Count <> 0 Then\n            Dim oObj As Object\n            Set oObj = oAssy.SelectSet(1)\n            \n            If TypeName(oObj) = \"ComponentOccurrence\" Then\n                Dim oOccu As ComponentOccurrence\n                Set oOccu = oObj\n                \n                ' Toggle the Enabled\n                oOccu.Enabled = Not (oOccu.Enabled)\n                \n            End If\n        End If\n    End If\n        \n    End\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: SheetmetalDef.Unfold() crashes on an invisible part\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Apprentice, access to objects on a drawing sheet\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Inventor VB Duplicate Option Explicit\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: API: Copying a SketchBlockDefinition from one part file to another\n                    ", "solution": ["Public Sub CopyBlocks()\n    ' Somehow get a reference to the document you want to copy from and the\n    ' one you're copying to.\n    Dim sourceDoc As PartDocument\n    Dim targetDoc As PartDocument\n    Set sourceDoc = ThisApplication.Documents.Item(4)\n    Set targetDoc = ThisApplication.Documents.Item(5)\n    \n    ' Get the sketch block definition you want to copy.\n    Dim sourceBlockDef As SketchBlockDefinition\n    Set sourceBlockDef = sourceDoc.ComponentDefinition.SketchBlockDefinitions.Item(1)\n    \n    ' Copy the sketch block definition into the other document.\n    Call sourceBlockDef.CopyTo(targetDoc)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Insert component at specific co-ordinates with iLogic\n                    ", "solution": ["Sub Main\n\tAddWP(100, 10, 20, \"Test\")\n\tAddComponent(100, 100, 0, ThisDoc.Path & \"\\Parte2.ipt\") 'change the partname as you like\n\tMsgBox(\"Now I move the Component\")\n\tMoveComponent(200, 300, 500, ComponentByName(\"Sfera\"))\nEnd Sub\n\nPrivate Sub AddWP(x As Double, y As Double, z As Double, oName As String) ' this routine work on the activedocument\n    ' Create a TransientGeometry\n\toTG = ThisApplication.TransientGeometry\n    ' Create 3 workpoints to define the origin, x-direction and y-direction points\n    oWorkPoint = ThisApplication.ActiveDocument.ComponentDefinition.WorkPoints.AddFixed(oTG.CreatePoint(x,y,z))\n\toWorkPoint.Name = oName\nEnd Sub\n\nPrivate Sub AddComponent(X As Double, Y As Double, Z As Double, oPath As String)\n\tIf System.IO.File.Exists(oPath) Then \n\t\t' Create a TransientGeometry\n\t\toTG = ThisApplication.TransientGeometry\n\t\toMatrix = oTG.CreateMatrix\n\t\toMatrix.SetTranslation(oTG.CreateVector(X, Y, Z)) \n\t\t' Add the occurrence\n\t\toOccurrence = ThisApplication.ActiveDocument.ComponentDefinition.Occurrences.Add(oPath, oMatrix)\n\t\toOccurrence.Grounded = False ' True to ground the component\n\t\toOccurrence.Name = \"Sfera\" ' if you like to rename the occurence you can add the new name as parameter of this Sub\n\tEnd If\nEnd Sub\n\nPrivate Sub MoveComponent(X As Double, Y As Double, Z As Double, oOccurrence As ComponentOccurrence)\n\tIf oOccurrence IsNot Nothing Then\n\t\t' Get the current transformation matrix from the occurrence.\n\t\tDim oTransform As Matrix\n\t\toTransform = oOccurrence.Transformation\n\t\t\n\t\t' Move the occurrence honoring any existing constraints.\n\t\t'oTransform.SetTranslation ThisApplication.TransientGeometry.CreateVector(oNOri.Point.X, oNOri.Point.Y, oNOri.Point.Z)\n\t\t'oOccurrence.Transformation = oTransform\n\t\t\n\t\t' Move the occurrence ignoring any constraints.\n\t\t' Anything that causes the assembly to recompute will cause the\n\t\t' occurrence to reposition itself to honor the constraints.\n\t\toTransform.SetTranslation(ThisApplication.TransientGeometry.CreateVector(X, Y, Z))\n\t\tCall oOccurrence.SetTransformWithoutConstraints(oTransform)\n\tEnd If\nEnd Sub\n\nPrivate Function ComponentByName(oCname As String) As ComponentOccurrence\n\tComponentByName = Nothing\n\tFor Each oOcc In ThisApplication.ActiveDocument.ComponentDefinition.Occurrences\n\t\tIf oOcc.Name = oCname Then\n\t\t\tComponentByName = oOcc\n\t\t\tExit Function\n\t\tEnd If\n\tNext\nEnd Function"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Strange error\n                    ", "solution": ["aPath = ThisDoc.Path\naFolder = aPath & \"\\DWG\\\"\niPropParNum = iProperties.Value(\"Project\", \"Part Number\")\nIf Not iPropParNum = \"\" Then\n\tIf Not System.IO.Directory.Exists(aFolder) Then\n\t\tSystem.IO.Directory.CreateDirectory(aFolder)\n\tEnd If\n\tiPropRevNum = iProperties.Value(\"Project\", \"Revision Number\")\n\taDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\taName = aFolder & iPropParNum & \" rev\" & iPropRevNum & \" - 2D drawing.dwg\"\n\taDataMedium.FileName = aName\n\taDWG = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\") \n\taDoc = ThisApplication.ActiveDocument  \n\ttransObjs = ThisApplication.TransientObjects \n\taContext = transObjs.CreateTranslationContext \n\taContext.Type = kFileBrowseIOMechanism \n\t\n\taOptions = transObjs.CreateNameValueMap \n'\tIf aDWG.HasSaveCopyAsOptions(aDoc, aContext, aOptions) Then\n'\tEnd If\n\n\taDWG.SaveCopyAs(aDoc, aContext, aOptions, aDataMedium)\n\t\n\tIf System.IO.File.Exists(aFolder & \" rev - 2D drawing.dwg\") = True Then\n\t\tSystem.IO.File.Delete(aFolder & \" rev - 2D drawing.dwg\")\n\tEnd If\n\t\n\tIf System.IO.File.Exists(aFolder & iPropParNum & \" rev - 2D drawing.dwg\") = True Then\n\t\tSystem.IO.File.Move(aFolder & iPropParNum & \" rev - 2D drawing.dwg\", aFolder & iPropParNum & \" - 2D drawing.dwg\")\n\tEnd If\nEnd If", "If aDWG.HasSaveCopyAsOptions(aDoc, aContext, aOptions) Then\n   strIniFile=\"NAME_OF_YOUR_INI_FILE.INI\"\n   oOptions.Value(\"Export_Acad_IniFile\") = strIniFile\nEnd If"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule to Rename Parameter NAMES (not values)\n                    ", "solution": ["Dim oDoc as PartDocument\noDoc = ThisApplication.ActiveDocument\nDim oParameter As Parameter\nFor Each oParameter In oDoc.ComponentDefinition.Parameters\n    If oParameter.Name = \"d0\" Then\n        oParameter.Name = \"test\"\n    End If\nNext"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: PartsList Export won't accept Options (NameValueMap) Object (.NET addin)\n                    ", "solution": [], "author": "gavin.b"},
{"created at": [], "solution Title": "\n                        Re: Trouble getting OnViewUpdate to fire\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Upper and Lower Limits of a Model Parameter - For Tolerance Stackup\n                    ", "solution": ["' First part - Read the parameter tolerance\nMsgBox(\"Upper Tolerance \" & Round(Parameter.Param(\"d3\").Tolerance.Upper,3) & vbCr & _\n\t\t \"Upper Tolerance \" & Round(Parameter.Param(\"d3\").Tolerance.Lower,3))\n\n' Second part - Set two Constants as tolerance\n'Const UpperLimit = 12.55\n'Const LowerLimit = 12.45\n'\n'If d3 > UpperLimit Or d3 < LowerLimit Then\n'\tMsgBox(\"The parameter \" & \"d3\" & \" Is out of limits!\")\n'End If"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Insert Letter Blocks with Ilogic\n                    ", "solution": [], "author": "Richard.Thompso"},
{"created at": [], "solution Title": "\n                        Re: Run a rule after a \"user parameter\" is changed\n                    ", "solution": [], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: Access View Label Defaults via Inventor API\n                    ", "solution": ["Sub GetViewLabelDefaultsSample()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oStylesManager As DrawingStylesManager\n    Set oStylesManager = oDoc.StylesManager\n    \n    Dim oStandard As DrawingStandardStyle\n    Set oStandard = oStylesManager.ActiveStandardStyle\n    \n    ' Get the view label defaults for draft view\n    Dim sPrefix As String, bVisible As Boolean, sFormattedText As String, bConstrainToBorder As Boolean, bPlaceBelowView As Boolean\n    Call oStandard.GetViewLabelDefaults(kDraftDrawingViewType, sPrefix, bVisible, sFormattedText, bConstrainToBorder, bPlaceBelowView)\n    \n    Debug.Print \"The prefix is: \" & sPrefix\n    Debug.Print \"The formatted text is: \" & sFormattedText\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: trim drawing filename\n                    ", "solution": ["Sub Main\noName = ThisDoc.PathAndFileName(False).Replace(\"\\mac-\",\"\\\") & \".pdf\" ' Assign the PathAndFilename variable to oName and then change the file extension\nDim oDocument As inventor._Document = ThisApplication.documents.itembyname(ThisDoc.PathAndFileName(True))\noDocument.SaveAs(oName, True)' Save the PDF in the same folder as idw\n'SaveAsPdf(oDocument,oName) ' This Subroutine have more options\nEnd Sub\n\nSub SaveAsPdf(oDocument As Inventor._Document, oFileName As String)\n\toPDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\toContext = ThisApplication.TransientObjects.CreateTranslationContext\n\toContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n\toOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\toDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n\tIf oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then\n\t\toOptions.Value(\"All_Color_AS_Black\") = 1\n\t\toOptions.Value(\"Remove_Line_Weights\") = 1\n\t\toOptions.Value(\"Vector_Resolution\") = 400\n\t\toOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintSheetRange\n\t\toOptions.Value(\"Custom_Begin_Sheet\") = 1\n\t\toOptions.Value(\"Custom_End_Sheet\") = oDocument.Sheets.Count\n\tEnd If\n\t\n\toDataMedium.FileName = oFileName\n\toPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium) 'Publish Document\nEnd Sub", "iLogicVb", ".", "RunExternalRule", "(", "\"", "ruleFileName", "\"", ")"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Mass as a custom property\n                    ", "solution": ["Dim mass As Decimal \nmass = iProperties.Mass\n\nDim massString As String\n\n\nSelect Case mass\n\tCase < 1 \n\tmassString = CStr(Round(mass, 2, MidpointRounding.AwayFromZero))& \" kg\"\n\tCase 1 To 10 \n\tmassString = CStr(Round(mass, 1, MidpointRounding.AwayFromZero))& \" kg\"\n\tCase > 10 \n\tmassString = CStr(Round(mass, 0, MidpointRounding.AwayFromZero))& \" kg\"\nEnd Select \n\niProperties.Value(\"Custom\", \"Mymass\")= massString"], "author": "cadmanagershat"},
{"created at": [], "solution Title": "\n                        Re: OnFileOpen kEventHandled not working\n                    ", "solution": [], "author": "santoshr0114"},
{"created at": [], "solution Title": "\n                        Re: Need help finding customization manual (2015) to download\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Use form buttons without dialog boxes?\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: iLogic \"copy to flat pattern\"\n                    ", "solution": ["ThisDoc.Document.ComponentDefinition.Sketches(\"SketchName\").CopyToFlatPattern = True"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Create each Part as a Layer Drawing\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: ilogic get parameter from selected component\n                    ", "solution": ["Try", "\n    ", "If", " ", "TypeOf", " ", "oOccurrence", " ", "Is", " ", "ComponentOccurrenceProxy", " ", "Then", "\n        ", "PortProp", " ", "=", " ", "Parameter", "(", "oOccurrence", ".", "NativeObject", ".", "Name", ", ", "\"", "PortSize", "\"", ")", "\n    ", "Else", " \n        ", "PortProp", " ", "=", " ", "Parameter", "(", "oOccurrence", ".", "Name", ", ", "\"", "PortSize", "\"", ")", "\n    ", "End", " ", "If", "\n", "Catch", "\n    ", "MessageBox", ".", "Show", "(", "\"", "Sort Your Fish Out Mate!", "\"", ", ", "\"", "TKSY", "\"", ")", "\n    ", "Return", "\n", "End", " ", "Try", "\n\n", "MessageBox", ".", "Show", "(", "PortProp", ", ", "\"", "TKSY", "\"", ")"], "author": "DRLTKSE"},
{"created at": [], "solution Title": "\n                        Re: iProperty List\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Tricky template using advanced API\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Do I need to run Visual Studio everytime I want to run my plugin\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: No Zoom effect on TransientGraphics\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Apprentice Server to access to virtual components\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Finding opposite face\n                    ", "solution": ["Public Sub TestFindDistance()\n    Dim planeFace As face\n    Set planeFace = ThisApplication.CommandManager.Pick(kPartFacePlanarFilter, \"Pick a planar face.\")\n    \n    Dim dist As Double\n    dist = findDistanceToOppositeFace(planeFace)\n    \n    MsgBox \"Distance: \" & dist\nEnd Sub\n\nPrivate Function findDistanceToOppositeFace(ByRef face As Inventor.face) As Double\n    findDistanceToOppositeFace = 0\n    \n    Dim origin As Inventor.Point\n    Set origin = face.PointOnFace\n    \n    Dim pt(2) As Double\n    pt(0) = origin.X: pt(1) = origin.Y: pt(2) = origin.Z\n    \n    ' Get the normal of the face and create a vector in the reverse direction\n    ' because the face normal points out of the solid.\n    Dim n(2) As Double\n    Call face.Evaluator.GetNormalAtPoint(pt, n)\n    Dim normal As Inventor.UnitVector\n    Set normal = ThisApplication.TransientGeometry.CreateUnitVector(-n(0), -n(1), -n(2))\n    \n    ' Get the parent body.\n    Dim body As SurfaceBody\n    Set body = face.Parent\n    \n    ' Find all faces intersected by a ray.\n    Dim objects As ObjectsEnumerator\n    Dim pts As ObjectsEnumerator\n    Call body.FindUsingRay(origin, normal, 0.001, objects, pts, True)\n    \n    ' Calculate the distance using the second face because the first one will\n    ' be the original input face.\n    findDistanceToOppositeFace = ThisApplication.MeasureTools.GetMinimumDistance(origin, objects.Item(2))\nEnd Function\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Fillet Rename\n                    ", "solution": [], "author": "prakasht66"},
{"created at": [], "solution Title": "\n                        Re: ComponentGraphics API\n                    ", "solution": ["Sub ComponentGraphicsDemo()\n\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = oAsmDoc.ComponentDefinition\n    \n    Dim oClientGraphics As ClientGraphics\n    \n    On Error Resume Next\n    Set oClientGraphics = oAsmDef.ClientGraphicsCollection.Item(\"ADN\")\n\n    If Err.Number = 0 Then\n        'delete client graphics collection\n        On Error GoTo 0\n        Call oClientGraphics.Delete\n        ThisApplication.ActiveView.Update\n        End\n    Else\n        Err.Clear\n        On Error GoTo 0\n        Set oClientGraphics = oAsmDef.ClientGraphicsCollection.Add(\"ADN\")\n        \n        Dim oNode As GraphicsNode\n        Set oNode = oClientGraphics.AddNode(1)\n    \n        Dim oOcc As ComponentOccurrence\n        Set oOcc = oAsmDef.Occurrences.Item(1)\n        Dim oDef As PartComponentDefinition\n        Set oDef = oOcc.Definition\n    \n        Dim oComponentGraphics As ComponentGraphics\n        Set oComponentGraphics = oNode.AddComponentGraphics(oDef)\n        \n        Dim oColor As color\n        Set oColor = ThisApplication.TransientObjects.CreateColor(255, 0, 0)\n        oColor.Opacity = 0.3\n\n        oComponentGraphics.color = oColor\n        \n        ThisApplication.ActiveView.Update\n    End If\n    \n    Beep\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: API for direct modelling in inventor 2015 and inventor fusion\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: How to change the ThreadDesignation of a Hole Feature with VBA\n                    ", "solution": [], "author": "rfink"},
{"created at": [], "solution Title": "\n                        Re: iLogic Assy BOM sort by 3 columns\n                    ", "solution": [], "author": "SoulAsasin"},
{"created at": [], "solution Title": "\n                        Re: Addin won't load on some computers\n                    ", "solution": [], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: passing a user parameter to a derived part\n                    ", "solution": [], "author": "cadmanagershat"},
{"created at": [], "solution Title": "\n                        Re: Custom Colour Schemes - Inventor Application Options\n                    ", "solution": [], "author": "ruthsteed"},
{"created at": [], "solution Title": "\n                        Re: sketch visibility in part bij ilogic\n                    ", "solution": ["Dim sketches As PlanarSketches = ThisApplication.ActiveDocument.ComponentDefinition.sketches\nDim oSketch As PlanarSketch\n\nFor Each oSketch In sketches\n\tSelect Case oSketch.Name\n\t\tCase \"Sketch1\"\n\t\t\tIf TestParam = \"A\" Then\n\t\t\t\toSketch.Visible = True\n\t\t\tElse\n\t\t\t\toSketch.Visible = False\n\t\t\tEnd If\n\t\tCase \"Sketch2\"\n\t\t\t\t\tIf TestParam = \"B\" Then\n\t\t\t\toSketch.Visible = True\n\t\t\tElse\n\t\t\t\toSketch.Visible = False\n\t\t\tEnd If\n\t\tCase \"Sketch3\"\n\t\t\t\t\tIf TestParam = \"C\" Then\n\t\t\t\toSketch.Visible = True\n\t\t\tElse\n\t\t\t\toSketch.Visible = False\n\t\t\tEnd If\n\t\tCase \"Sketch4\"\n\t\t\t\t\tIf TestParam = \"D\" Then\n\t\t\t\toSketch.Visible = True\n\t\t\tElse\n\t\t\t\toSketch.Visible = False\n\t\t\tEnd If\n\tEnd Select\nNext"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Addin does not load on some PCs - how to debug such case\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Open a file and check iproperties with iLogic\n                    ", "solution": ["TemPath= \"D:\\Projects\\Inventor\\Projects\\Example\\Example.ipt\" ", "'fullfilename with path", "\nDim oDocument As inventor.", "_", "Document = ThisApplication.documents.itembyname(TemPath)\n\nTestprop = ", "oDocument.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Value", "\nMessageBox.Show(Testprop)"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Forms calling upon embedded excel\n                    ", "solution": [], "author": "Jefkee"},
{"created at": [], "solution Title": "\n                        Re: Selecting 2D point from active sketch in inventor?\n                    ", "solution": ["Dim Nokta As Inventor.SketchPoint\n\nNokta = Form1.inv_App.CommandManager.Pick(SelectionFilterE\u200bnum.kSketchPointFilter, \"Select the point...\")\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Why does label and textbox not show in dockablewindow form\n                    ", "solution": ["        Public Shared Sub CreateDockableWindow(app As Inventor.Application)\n\n            Dim uiMan As UserInterfaceManager = app.UserInterfaceManager\n\n            Dim dockableWin As Inventor.DockableWindow = uiMan.DockableWindows.Add(Guid.NewGuid().ToString(), \"KB_DockableWindow1\", \"KB - DockableWindow #1\")\n\n            dockableWin.AddChild(CreateChildDialog())\n\n            dockableWin.DisabledDockingStates = Inventor.DockingStateEnum.kDockTop + Inventor.DockingStateEnum.kDockBottom\n\n            dockableWin.DockingState = DockingStateEnum.kDockLeft\n\n            dockableWin.ShowVisibilityCheckBox = True\n\n            dockableWin.ShowTitleBar = True\n\n            dockableWin.SetMinimumSize(100, 100)\n\n            dockableWin.Visible = True\n\n        End Sub\n\n        Public Shared Function CreateChildDialog() As Long\n\n            Dim dc As New Form1()\n\n            '   dc.Text = \"Child Dialog\"\n\n            '   dc.HelpButton = InlineAssignHelper(dc.MinimizeBox, InlineAssignHelper(dc.MaximizeBox, False))\n            '   dc.ShowIcon = InlineAssignHelper(dc.ShowInTaskbar, False)\n            '    dc.TopMost = True\n\n            '    dc.Height = 100\n            '    dc.Width = 300\n            '   dc.MinimumSize = New Size(dc.Width, dc.Height)\n\n            ' Dim margin As Integer = 5\n            'Dim size As Size = dc.ClientSize\n\n            'Dim tb As New System.Windows.Forms.TextBox()\n            '   tb.TextAlign = HorizontalAlignment.Right\n            '    tb.Height = 20\n            '  tb.Width = size.Width - 2 * margin\n            '   tb.Location = New System.Drawing.Point(margin, margin)\n            '   tb.Anchor = AnchorStyles.Top Or AnchorStyles.Left Or AnchorStyles.Right\n            '   dc.Controls.Add(tb)\n\n            dc.Show()\n\n            Return dc.Handle.ToInt64()\n\n        End Function"], "author": "kbo"},
{"created at": [], "solution Title": "\n                        Re: Assign component occurrence to variable\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: BOM row parent type\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule running with old version of parameters\n                    ", "solution": [], "author": "waynehelley"},
{"created at": [], "solution Title": "\n                        Re: How do I identify if a split command is an error?\n                    ", "solution": ["Option Explicit\nDim oWorkSurf As WorkSurface\nDim oWorkSurfs As WorkSurfaces\nDim oSurfBody As SurfaceBody\nDim oSurfBodies As SurfaceBodies\nDim oCompDef As ComponentDefinition\nDim oPartCompDef As PartComponentDefinition\nDim oPartDoc As PartDocument\nDim oSplitFeat As SplitFeature\n\n\nPublic Sub SplitAllFaces()\n    On Error GoTo err_SplitAllFaces\n\n    Set oPartDoc = ThisApplication.ActiveDocument\n    Set oPartCompDef = oPartDoc.ComponentDefinition\n    Set oSurfBodies = oPartCompDef.SurfaceBodies\n    Set oWorkSurfs = oPartCompDef.WorkSurfaces\n    \n    Set oWorkSurf = oWorkSurfs.Item(\"Srf5\")\n    \n    For Each oSurfBody In oSurfBodies\n        \n        Set oSplitFeat = oPartCompDef.Features.SplitFeatures.SplitBody(oWorkSurf, oSurfBody)\n    \n    Next oSurfBody\n    \nend_SplitAllFaces:\n    Exit Sub\n\nerr_SplitAllFaces:\n    Select Case Err.Number\n    Case -2147467259  'Place holder for no split surface\n        Resume Next\n    Case Else\n      MsgBox (\"Error \")\n      Resume end_SplitAllFaces\n    End Select\nEnd Sub"], "author": "jpblower"},
{"created at": [], "solution Title": "\n                        Re: AssemblyComponentDefinition throws member not found\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Patterning a part along a 3D Sketch using Pattern Component\n                    ", "solution": [], "author": "dkatz"},
{"created at": [], "solution Title": "\n                        Re: Making Copy of Parts\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: Inventor Dimensions - Spaces in Dimension Text\n                    ", "solution": [], "author": "Jon.Dean"},
{"created at": [], "solution Title": "\n                        Re: Working with the Event Watcher\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: count numbers of holes in the iam\n                    ", "solution": ["Sub Main()\n    Dim oAsmDoc As AssemblyDocument = ThisDoc.Document\n    Dim oAsmDef As AssemblyComponentDefinition = oAsmDoc.ComponentDefinition\n    \n    Dim N As Integer = 0    'holes counter\n    \n    For Each oOcc As ComponentOccurrence In oAsmDef.Occurrences.AllLeafOccurrences\n        If Not oOcc.Suppressed Then\n            If oOcc.DefinitionDocumentType = kPartDocumentObject Then\n                Dim oDef As PartComponentDefinition = oOcc.Definition\n                N += GetHolesQty(oDef)\n            End If\n        End If\n    Next\n    \n    Beep\n    MsgBox (\"The number of holes in the current part is:  \" & N)\nEnd Sub", "Sub Main()\n    Dim oAsmDoc As AssemblyDocument = ThisDoc.Document\n    Dim oAsmDef As AssemblyComponentDefinition = oAsmDoc.ComponentDefinition\n    Dim oOccs As ComponentOccurrences = oAsmDef.Occurrences\n    \n    Dim N As Integer = 0    'holes counter\n\n    For Each oDoc As Inventor.Document In oAsmDoc.AllReferencedDocuments        \n        If TypeOf oDoc Is PartDocument Then\n            Dim m As Integer = GetHolesQty(oDoc.ComponentDefinition)\n            N = N + m * oOccs.AllReferencedOccurrences(oDoc).Count\n        End If        \n    Next\n    \n    Beep\n    MsgBox (\"The number of holes in the current part is:  \" & N)\nEnd Sub", "'''Calculates holes in the part document\n'''Be careful: nested patterns are not analyzed!\nFunction GetHolesQty(ByVal oDef As PartComponentDefinition) As Integer\n    \n    Dim N As Integer = 0  'counter        \n    Dim oHoles As HoleFeatures = oDef.Features.HoleFeatures\n    For Each oH As HoleFeature In oHoles\n        If Not oH.Suppressed Then\n            N += oH.HoleCenterPoints.Count\n        End If\n    Next\n    \n    'have we any rectangular patterns ?\n    Dim oRectPatterns As RectangularPatternFeatures\n    oRectPatterns = oDef.Features.RectangularPatternFeatures\n    \n    For Each oRPF As RectangularPatternFeature In oRectPatterns\n        Dim m As Integer = 0\n        If Not oRPF.Suppressed Then\n            If (TypeOf oRPF.ParentFeatures.Item(1) Is HoleFeature) Then\n                Dim oH As HoleFeature = oRPF.ParentFeatures.Item(1)\n                If Not oH.Suppressed Then\n                    For Each oFPE As FeaturePatternElement In oRPF.PatternElements\n                        If Not oFPE.Suppressed Then m += 1\n                    Next\n                End If\n            End If\n            N += m - 1\n        Else\n            N += m\n        End If\n    Next\n    \n    'have we any circular patterns ?\n    Dim oCircPatterns As CircularPatternFeatures \n    oCircPatterns = oDef.Features.CircularPatternFeatures\n\n    For Each oCPF As CircularPatternFeature In oCircPatterns\n        Dim m As Integer = 0\n        If Not oCPF.Suppressed Then\n            If (TypeOf oCPF.ParentFeatures.Item(1) Is HoleFeature) Then\n                Dim oH As HoleFeature  = oCPF.ParentFeatures.Item(1)\n                If Not oH.Suppressed Then\n                    For Each oFPE As FeaturePatternElement In oCPF.PatternElements\n                        If Not oFPE.Suppressed Then m += 1\n                    Next\n                End If\n            End If\n            N += m - 1\n        Else\n            N += m\n        End If\n    Next    \n    Return N\nEnd Function"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Need to assign X, Y, X offset (0.000) and apply ground constraint\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: To toggle sketch dimension visibility using iLogic.\n                    ", "solution": ["Sub Main()\n   \n    Dim oDoc As Inventor.Document\n    oDoc = ThisApplication.ActiveDocument\n\n    Dim oSketch As Sketch\n    For Each oSketch In oDoc.ComponentDefinition.Sketches\n        'oSketch.DimensionsVisible = False 'R.H - Test Visible = OFF\n\toSketch.DimensionsVisible = True 'R.H - Test Visible = ON\n    Next\n\nEnd Sub", "'Definitions\nDim oDoc As Inventor.Document\nDim oSketch As Sketch\noDoc = ThisDoc.Document\n\n'Hide/show Dimensions\nFor Each oSketch In oDoc.ComponentDefinition.Sketches\n\toSketch.DimensionsVisible = Parameter(\"DIM_S\")\nNext\n\n'Hide/show Workplanes\nFor Each oWorkplane In oDoc.ComponentDefinition.Workplanes\noWorkplane.Visible = Parameter(\"WP_S\")\nNext\n\n'Hide/show WorkAxes\nFor Each oWorkaxes In oDoc.ComponentDefinition.Workaxes\noWorkaxes.Visible = Parameter(\"WA_S\")\nNext\n\n'Hide/show WorkPoints\nFor Each oWorkpoints In oDoc.ComponentDefinition.Workpoints\noWorkpoints.Visible = Parameter(\"WPT_S\")\nNext\n\n\n'Hide/show Sketched\nFor Each oSketch In oDoc.ComponentDefinition.Sketches\noSketch.Visible = Parameter(\"SKETCH_S\")\nNext\n\n'Hide/show 3D Geometry\nFor Each o3DSketch In oDoc.ComponentDefinition.Sketches3d\no3DSketch.Visible = Parameter(\"SKETCH3_S\")\no3DSketch.DimensionsVisible = Parameter(\"SKETCH3_S\")\nNext"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: CommandManager.Pick bug with ESC key\n                    ", "solution": [], "author": "BrianEkins"},
{"created at": [], "solution Title": "\n                        Re: Why do object options show up for some methods and not others?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Asymmetric Extrude\n                    ", "solution": ["Sub TestAsymmetricExtrusion()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    Dim oDef As PartComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    Dim oSketch As PlanarSketch\n    Set oSketch = oDef.Sketches.Item(1)\n    \n    ' Create a profile based on the sketch geometry\n    Dim oProfile As Profile\n    Set oProfile = oSketch.Profiles.AddForSurface\n \n    Dim oExtrudeDef As ExtrudeDefinition\n    Set oExtrudeDef = oDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, kSurfaceOperation)\n    Call oExtrudeDef.SetDistanceExtent(1, kPositiveExtentDirection)\n    Call oExtrudeDef.SetDistanceExtentTwo(4)\n        \n    Dim oExtrude As ExtrudeFeature\n    Set oExtrude = oDef.Features.ExtrudeFeatures.Add(oExtrudeDef)\n \nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Help w/ code creating iges of each part in an Assy\n                    ", "solution": ["    For Each oOcc In oAssyCompDef.Occurrences\n        oData.FileName = \"C:\\iges test\\Temptest_\" & i & \".igs\"\n        Call oIGESTranslator.SaveCopyAs(oOcc.Definition.Document, oContext, oOptions, oData)\n        i = i + 1\n    Next"], "author": "jpblower"},
{"created at": [], "solution Title": "\n                        Re: Autodesk Mesh Enabler.\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: retrieving material values from individual components at an assembly level\n                    ", "solution": [], "author": "prakasht66"},
{"created at": [], "solution Title": "\n                        Re: Sketch using curve generated by intersection of Surface and a face\n                    ", "solution": ["If Not otherMidsurface Is Nothing Then\n   Dim oSketch3d As Sketch3D = oCompDef.Sketches3D.Add\n   Dim oIntersectionCurve As IntersectionCurve = oSketch3d.IntersectionCurves _\n          .Add(otherMidsurface.Faces.", "Item(1).Geometry", "(), ", "f.Geometry()", ")", "Sub SketchWithIntersectionCurve_2()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    Dim oDef As PartComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    'Blue box surface body\n    Dim oBlueBoxBody As SurfaceBody\n    Set oBlueBoxBody = oDef.SurfaceBodies.Item(1)\n    \n    '3d intersection curve with the top face\n    Dim oSketch3d As Sketch3D\n    Set oSketch3d = oDef.Sketches3D.Add\n\n    'vertical cutting surface\n    Dim oSurf1 As WorkSurface\n    Set oSurf1 = oDef.WorkSurfaces.Item(1)\n    'horizontal cutting surface\n    Dim oSurf2 As WorkSurface\n    Set oSurf2 = oDef.WorkSurfaces.Item(2)\n\n    Dim oIntersectionCurve1  As IntersectionCurve\n    Set oIntersectionCurve1 = oSketch3d.IntersectionCurves _\n            .Add(oSurf1.SurfaceBodies.Item(1), oBlueBoxBody)\n            \n    Dim oIntersectionCurve2  As IntersectionCurve\n    Set oIntersectionCurve2 = oSketch3d.IntersectionCurves _\n            .Add(oSurf2.SurfaceBodies.Item(1), oBlueBoxBody)\n    Beep\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to Supress Flat Pattern Feature in a Part from assembly\n                    ", "solution": ["Dim oDoc As PartDocument = ThisDoc.Document"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Hole Note - Changing Decimal Seperator on Thread Pitches\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: add user path to projet file does not work (userpath is striked through)\n                    ", "solution": [], "author": "Frederic007"},
{"created at": [], "solution Title": "\n                        Re: Excel sheet not found: \"Sheet1\"\n                    ", "solution": ["Sub Main\niLogicForm.Show(\"iProperty Update\")\n'Open iProperty form\nCall CallData\n'Run sub to find correct sheet for data input\nEnd Sub\n\nSub CallData\n", "GoExcel.Open(\"K:\\Riley Vault\\New Riley Part Log.xlsx\")", " ", "'what you want to do with this line?", "\n'Open Excel file ", "'Why?", "\n", "...with this part of your code you are assigning variables and calling subroutines", "...you never use the excel document directly or indirectly", "...then in this routine you don't need to open the document", "\nEnd Sub\n\nSub AN_Value ", "'now you open the excel document", "\n", "SheetNo = (\"Angle\")\nPartNo = iProperties.Value(\"Project\", \"Part Number\")\nGoExcel.Open(\"K:\\Riley Vault\\New Riley Part Log.xlsx\", SheetNo)", "\n", "....blablabla....", "\nGoExcel.Save\nElseIf MsgBox(\"No DWG Number Found. Click 'OK' to proceed, and please wait.\") Then\nCall AN_NewRow ", "'now you call this subroutine and you open the excal document again", "\nEnd If\n End Sub\n\nSub AN_NewRow ", "'now you open the excel document", "\n ", "Worksheet = (\"K:\\Riley Vault\\New Riley Part Log.xlsx\")\n SheetNo = (\"Angle\")\n GoExcel.Open(Worksheet, SheetNo)", "....blablabla....", "\nGoExcel.Save\nEnd Sub "], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Global Inertia Properties API / ilogic\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: ILogic delete file in workspace\n                    ", "solution": ["sFile = \"C:\\Temp\\my_File.ipt\"\nTry\nMy.Computer.FileSystem.DeleteFile(sFile)\nCatch\nMessageBox.Show(sFile & vblf & \"    . . . can not delete file, or file not found.\", \"iLogic\")\nEnd Try\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Syntax for Extrude Surface\n                    ", "solution": [], "author": "RodrigoEiras"},
{"created at": [], "solution Title": "\n                        Re: iLogic/ Vb.net issues with a recursive function passing a list\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Batch Export Images\n                    ", "solution": ["Imports", " ", "System", ".", "Windows", ".", "Forms", "\n", "Imports", " ", "System", ".", "IO", "\n\n", "Sub", " ", "Main", "\n", "'", "sResultPathImage = selFolder(ThisApplication.DesignProjectManager.ActiveDesignProject.WorkspacePath) 'oDefaultPathImage)", "\n", "sResultPathBatch", " ", "=", " ", "selFolder", "(", "ThisApplication", ".", "DesignProjectManager", ".", "ActiveDesignProject", ".", "WorkspacePath", ")", " ", "'", "oDefaultPathBatch)", "\n\n", "'", "Dim oHolderList As String", "\n", "If", " ", "sResultPathBatch", " ", "<>", " ", "\"\"", " ", "Then", "\n    ", "Dim", " ", "oFiles", " ", "=", " ", "Directory", ".", "GetFiles", "(", "sResultPathBatch", ", ", "\"", "*.IPT", "\"", ")", "\n    ", "For", " ", "Each", " ", "FileName", " ", "As", " ", "String", " ", "In", " ", "oFiles", "\n        ", "On", " ", "Error", " ", "Resume", " ", "Next", "\n        ", "oDoc", " ", "=", " ", "ThisApplication", ".", "Documents", ".", "Open", "(", "FileName", ", ", "True", ")", "\n    ", "'", "    Dim sPartNumber As String = iProperties.Value(\"Project\",\"Description\")", "\n    ", "'", "    oCamera = InventorVb.Application.ActiveView.Camera", "\n    ", "'", "    oCamera.fit", "\n    ", "'", "    oCamera.apply", "\n    ", "'", "    InventorVb.Application.ActiveView.SaveAsBitmap(sPartNumber,1200,800)", "\n    ", "'", "    oDoc.Close()", "\n    ", "'", "    oHolderList = oHolderList & sPartNumber & vbLf", "\n    ", "Next", "\n", "End", " ", "If", "\n", "'", "MessageBox.Show(oHolderList)", "\n", "End Sub", "\n\n", "Private", " ", "Function", " ", "SelFolder", "(", "sPath", " ", "As", " ", "String", ")", " ", "As", " ", "String", "\n", "On", " ", "Error", " ", "Resume", " ", "Next", "\n    ", "If", " ", "sPath", " ", "=", " ", "\"\"", " ", "Then", " ", "sPath", " ", "=", " ", "ThisApplication", ".", "DesignProjectManager", ".", "ActiveDesignProject", ".", "WorkspacePath", "\n    ", "Dim", " ", "FBrowserDialog", " ", "As", " ", "New", " ", "FolderBrowserDialog", "\n    ", "FBrowserDialog", ".", "SelectedPath", " ", "=", " ", "sPath", "\n    ", "Dim", " ", "result", " ", "As", " ", "DialogResult", " ", "=", " ", "FBrowserDialog", ".", "ShowDialog", "()", "\n    ", "SelFolder", " ", "=", " ", "\"\"", "\n    ", "If", " ", "(", " ", "result", " ", "=", " ", "DialogResult", ".", "OK", " ", ")", " ", "Then", " ", "'", "And ( FBrowserDialog.SelectedPath <> sPath ) Then", "\n        ", "SelFolder", " ", "=", " ", "FBrowserDialog", ".", "SelectedPath", "\n    ", "End", " ", "If", "\n", "End Function"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Add Part Number to exported DXF Flat Pattern\n                    ", "solution": [], "author": "jdchakes"},
{"created at": [], "solution Title": "\n                        Re: OnEnvironmentChange event not fired.\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: contact solve API\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: ilogic code to display custom iproperty of selected  part\n                    ", "solution": ["Dim", " ", "oOccurrence", " ", "As", " ", "ComponentOccurrence", "\n", "Dim", " ", "Prop", " ", "As", " ", "String", "\n\n", "Try", "\n  ", "oOccurrence", " ", "=", " ", "ThisDoc", ".", "Document", ".", "SelectSet", ".", "Item", "(", "1", ")", "\n", "Catch", "\n  ", "MessageBox", ".", "Show", "(", "\"", "Please select a component before running this rule.", "\"", ", ", "\"", "iLogic", "\"", ")", "\n  ", "Return", "\n", "End", " ", "Try", "\n\n", "If", " ", "TypeOf", " ", "oOccurrence", " ", "Is", " ", "ComponentOccurrenceProxy", " ", "Then", "\n    ", "Prop", " ", "=", " ", "iProperties", ".", "Value", "(", "oOccurrence", ".", "NativeObject", ".", "Name", ", ", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", "\n", "Else", " \n    ", "Prop", " ", "=", " ", "iProperties", ".", "Value", "(", "oOccurrence", ".", "Name", ", ", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", "\n", "End", " ", "If", "\n\n", "'", "Display Property in Msg Box", "\n", "MessageBox", ".", "Show", "(", "Prop", ")"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Create DXF using Apprentice\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic problem\n                    ", "solution": ["map.Add(\"aPath\", ThisDoc.Path)", "map.Add(\"aFullFileName\", \"\")", "\nFor Each oOcc In oRefDocs\n", "        map.Value(\"aFullFileName\")= oOcc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Value & \".idw\"\n        ThisDoc.Launch(RuleArguments(\"aFullFilename\"))", "\n        iLogicVb.RunRule(\"PDF\", map)\nNext", "aPath = RuleArguments(\"aPath\")\n", "Dim aDocument As inventor._Document=ThisApplication.documents.itembyname(RuleArguments(\"aFullFileName\"))\n'aDocument = ThisApplication.ActiveDocument", "\niPropParNum = iProperties.Value(\"Project\", \"Part Number\")\niPropRevNum = iProperties.Value(\"Project\", \"Revision Number\")"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: oView.Label.FormattedText not working ?\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: Automate Inventor 2015 from Excel with VBA\n                    ", "solution": ["Sub Parametri()\n'On Error Resume Next\nMe.Application.WindowState = xlMinimized\n    Dim Inv, oDoc As Object\n    Dim Param As Inventor.Parameter\n    Set Inv = GetObject(, \"Inventor.Application\")\n    If Err.Number <> 0 Then\n        MsgBox (\"Errore di acquisizione controllo Inventor\" & vbCr & \"Inventor non attivo\")\n        Err.Number = 0\n        Exit Sub\n    End If\n    Set oDoc = Inv.ActiveDocument\n    For Each Param In oDoc.ComponentDefinition.Parameters.UserParameters\n      If Param.Name = \"test\" Then\n        If Param.Value = \"finito\" Then\n          Param.Value = \"iniziato\"\n        Else\n          Param.Value = \"finito\"\n        End If\n      End If\n    Next\nEnd Sub"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: VBA iPart - Value from iPart table\n                    ", "solution": ["Sub Replace_iPartMember_in_Asm()\n    'active assembly\n    Dim oAssyDoc As Inventor.Document\n    Set oAssyDoc = ThisApplication.ActiveDocument\n    Call oAssyDoc.Update\n    'assembly definition\n    Dim oAssyDef As AssemblyComponentDefinition\n    Set oAssyDef = oAssyDoc.ComponentDefinition\n    'reference to the occurrence that represent iPart member\n    '(here it is the first component in the browser)\n    Dim oOcc As ComponentOccurrence\n    Set oOcc = oAssyDef.Occurrences.Item(1)\n    'part definition\n    Dim oDef As PartComponentDefinition\n    Set oDef = oOcc.Definition\n\n    Dim oRow As iPartTableRow\n    Dim oColumn As iPartTableColumn\n    Dim i As Integer, j As Integer\n    \n    'reference to the iPart member\n    Dim oMember As iPartMember\n    Set oMember = oDef.iPartMember\n    'reference to the iPart factory\n    Dim oFactory As iPartFactory\n    Set oFactory = oMember.ParentFactory\n    'table columns list\n    Dim oColumns As iPartTableColumns\n    Set oColumns = oFactory.TableColumns\n    'table rows list\n    Dim oRows As iPartTableRows\n    Set oRows = oFactory.TableRows\n    \n    'print the  current table content\n    'headers\n    Debug.Print \"i\",\n    For j = 1 To oColumns.Count\n        Set oColumn = oColumns.Item(j)\n        Debug.Print oColumn.DisplayHeading,\n    Next j\n    Debug.Print\n    'table cells' values\n    For i = 1 To oRows.Count\n        Set oRow = oRows.Item(i)\n        Debug.Print i,\n        For j = 1 To oColumns.Count\n            Debug.Print oRow.Item(j).value,\n        Next j\n        Debug.Print\n    Next\n    \n    'current custom values in the given row (4th here)\n    Set oRow = oRows.Item(4)\n    Debug.Print oRow.Item(3).value, oRow.Item(4).value\n    'set new custom values\n    oRow.Item(3).value = \"2 in\"\n    oRow.Item(4).value = \"25 deg\"\n    Debug.Print oRow.Item(3).value, oRow.Item(4).value\n    \n    'new filename\n    Dim newFilename As String\n    newFilename = oFactory.MemberCacheDir & \"\\\" & \"A\" & oMember.Name\n    Debug.Print \"newFilename = \" & newFilename\n    \n    'create new member\n    Dim oNewMember As iPartMember\n    Set oNewMember = oFactory.CreateCustomMember(newFilename, 4)\n    oFactory.Parent.Update\n    oFactory.Parent.Save\n\n    'replace file reference\n    Call oOcc.Replace(newFilename, False)\n\n    'print the  current table content\n    'headers\n    Debug.Print \"i\",\n    For j = 1 To oColumns.Count\n        Set oColumn = oColumns.Item(j)\n        Debug.Print oColumn.DisplayHeading,\n    Next j\n    Debug.Print\n    'table cells' values\n    For i = 1 To oRows.Count\n        Set oRow = oRows.Item(i)\n        Debug.Print i,\n        For j = 1 To oColumns.Count\n            Debug.Print oRow.Item(j).value,\n        Next j\n        Debug.Print\n    Next\n    \n    Beep\nEnd Sub", "i             Member        Part Number   d0            d1            \n 1            Part1-01      Part1-01      3             0 deg         \n 2            Part1-03      Part1-03      2 in          5 deg         \n 3            Part1-04      Part1-04      3 in          10 deg        \n 4            Part1-02      Part1-02      4 in          10 deg        \n4 in          10 deg\n2 in          25 deg\nnewFilename = C:\\PR\\iPart_Demo\\iPart_Custom\\APart1-042.ipt\ni             Member        Part Number   d0            d1            \n 1            Part1-01      Part1-01      3             0 deg         \n 2            Part1-03      Part1-03      2 in          5 deg         \n 3            Part1-04      Part1-04      3 in          10 deg        \n 4            Part1-02      Part1-02      2 in          25 deg", "Dim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\nDim oDef As PartComponentDefinition\nSet oDef = oDoc.ComponentDefinition\n\n'reference to the iPart member\nDim oMember As iPartMember\nSet oMember = oDef.iPartMember\n'reference to the table row\nDim oRow As iPartTableRow\nSet oRow = oMember.Row\n'print some row properties\nDebug.Print \"MemberName: \" & oRow.MemberName\nDebug.Print \"PartName: \" & oRow.PartName\nDebug.Print \"Index: \" & oRow.index"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: VBA: Copy all files in the Active document to a new location\n                    ", "solution": ["Public Sub Copy()\n\n   ' Set references to active document, Target Directory, Filename.\n   Dim oDoc As Inventor.Document\n   Set oDoc = ThisApplication.ActiveDocument\n   \n   Dim sFullFileName As String\n   sFullFileName = oDoc.FullFileName\n\n   Dim sFilename As String\n   sFilename = Right(sFullFileName, Len(sFullFileName) - InStrRev(sFullFileName, \"\\\"))\n        \n   ' Set Target Directory & Filename\n   Dim sTargetDir As String\n   sTargetDir = \"C:\\Temp\\\"\n\n   Dim sTargetFile As String\n   sTargetFile = sTargetDir & sFilename", "\u00a0\u00a0 'Check to see if the file is already in the target directory\n   If sFullFileName = sTargetFile Then GoTo FileExists\n\n   ' Copy the Active Document\n   Call oDoc.SaveAs(sTargetFile, True)\n\n   ' Get all of the documents referenced by the active document.\n   Dim allRefDocs As Inventor.Documents\n\n   ' Dim oRefDoc As Inventor.Document\n   For Each oRefDoc In oDoc.AllReferencedDocuments\n   \n   ' Get the full filename of the current document.\n   Dim sRefFullFilename As String\n   sRefFullFilename = oRefDoc.FullFileName\n   \n   Dim sRefFilename As String\n   sRefFilename = Right(sRefFullFilename, Len(sRefFullFilename) - InStrRev(sRefFullFilename, \"\\\"))\n\n   Dim sRefTargetFile As String\n   sRefTargetFile = sTargetDir & sRefFilename\n\n   ' Copy the Reference Documents, check if they exist already\n   If Dir(sRefTargetFile) = \"\" Then\n   Call oRefDoc.SaveAs(sRefTargetFile, True)\n   End If\nNext\n\n   ' Close Current Document & Open New document\n   Call oDoc.Close\n   \n   Dim oNewDoc As Inventor.Document\n   Set oNewDoc = ThisApplication.Documents.Open(sTargetFile)\n\n   'ZoomAll\n   ThisApplication.ActiveView.Fit True\n\nGoTo Finished\n\nFileExists:\nMsgBox \"Your file is already in C:\\Temp...\"\n\nFinished:\n\nEnd Sub"], "author": "alasdair.currie"},
{"created at": [], "solution Title": "\n                        Re: Imitating section view API\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Error in rule\n                    ", "solution": ["'myXLSX = \"C:\\Customer.xlsx\"\nGoExcel.Open(\"C:\\Customer.xlsx\", \"Sheet1\")\nlastUsedRow = 2\n'set the list to be read from the XLS file\nDim myArrayList As New ArrayList\n'add the values from the Excel file to an array list\nWhile GoExcel.CellValue(\"A\" & lastUsedRow) <> \"\"\n\t\tmyarraylist.add(GoExcel.CellValue(\"A\" & lastUsedRow))\n\tlastUsedRow = lastUsedRow + 1\nEnd While\n\n'present the list to the user\nmyCust1 = InputListBox(\"Select Customer from list\", myArrayList, myArrayList, Title := \"iLogic\", ListName := \"Customer\")\n\n'set the iProperty\niProperties.Value(\"Summary\", \"Company\") = myCust1"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: convert inventor drgs to pdf files\n                    ", "solution": ["Sub FilesToPdf()\n  Dim oDoc As DrawingDocument\n  Dim aPath, FileName As String\n  Dim FSO, FSO_FOLDER, FSO_FILE As Object\n  \n  aPath = SelFolder\n  If aPath <> \"\" Then\n    Set FSO = CreateObject(\"Scripting.FileSystemObject\")\n    Set FSO_FOLDER = FSO.GetFolder(aPath & \"\\\")\n    If FSO_FOLDER.Files.Count > 0 Then\n      For Each FSO_FILE In FSO_FOLDER.Files\n        If FSO.GetExtensionName(FSO_FILE) = \"idw\" Then\n            Set oDoc = ThisApplication.Documents.Open(FSO_FILE)\n            Call SaveAsPdf(oDoc, Replace(FSO_FILE, \".idw\", \".pdf\"))\n            'Call oDoc.SaveAs(Replace(FSO_FILE, \".idw\", \".pdf\"), True)\n            oDoc.Close (True)\n        End If\n      Next\n    Else\n      MsgBox \"No Files Found at \" & aPath\n    End If\n    Set FSO = Nothing\n    Set FSO_FOLDER = Nothing\nEnd If\nEnd Sub\n\nSub SaveAsPdf(oDocument As Inventor.Document, oFileName As String)\n  Dim oOptions, oContext, oPDFAddIn, NameValueMapoDataMedium, oDataMedium\n  Set oPDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n  Set oContext = ThisApplication.TransientObjects.CreateTranslationContext\n  oContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n  Set oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n  Set oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n  oDataMedium.FileName = oFileName\n    If oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then\n      oOptions.Value(\"All_Color_AS_Black\") = 0  ' set to 0 for colors\n      'oOptions.Value(\"All_Color_AS_Black\") = 1 ' set to 1 for black/white\n      oOptions.Value(\"Remove_Line_Weights\") = 1\n      oOptions.Value(\"Vector_Resolution\") = 400\n      oOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintSheetRange\n      oOptions.Value(\"Custom_Begin_Sheet\") = 1\n      oOptions.Value(\"Custom_End_Sheet\") = oDocument.Sheets.Count\n    End If\n    Call oPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium) 'Publish Document\nEnd Sub\n\nPrivate Function SelFolder() As String\n  Dim folderDialog As FileDialog\n  Dim ShellApp, result\n  Set ShellApp = CreateObject(\"Shell.Application\").BrowseForFolder(0, \"Please choose a folder\", 1, _\n                              ThisApplication.FileLocations.Workspace)\n  SelFolder = \"\"\n  If (ShellApp.items.Item.Path <> \"\") Then\n    SelFolder = ShellApp.items.Item.Path\n  End If\nEnd Function"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Selecting items by either name and index\n                    ", "solution": [], "author": "16101972"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2015 API object model\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Select plane of part\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Iemitating Extrusion Feature\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Visible fence in the parent view of a detail view\n                    ", "solution": [], "author": "RodrigoEiras"},
{"created at": [], "solution Title": "\n                        Re: WorkPlane visibility using iLogic\n                    ", "solution": ["wp", " ", "=", " ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", ".", "WorkPlanes", "(", "\"", "Plane1", "\"", ")", "\n", "wp", ".", "Visible", " ", "=", " ", "Not", " ", "wp", ".", "Visible"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Sheet Metal - Find parallel bends\n                    ", "solution": ["Public Sub BendAngles()\n    \n    Dim doc As PartDocument\n    Set doc = ThisDocument\n    \n    Dim direction As UnitVector\n    Dim i As Integer\n    Dim bendLine As LineSegment\n    Dim allInSameDirection As Boolean\n    \n    allInSameDirection = True\n    \n    Dim compDef As SheetMetalComponentDefinition\n    Set compDef = doc.ComponentDefinition\n    \n    Dim bends As FlatBendResults\n    Set bends = compDef.FlatPattern.FlatBendResults\n    \n    Dim bend As FlatBendResult\n    \n    For i = 1 To bends.Count\n        Set bend = bends(i)\n        Set bendLine = bend.Edge.Geometry\n        If i = 1 Then\n            Set direction = bendLine.direction\n        Else\n            If Not bendLine.direction.IsParallelTo(direction, 0.001) Then\n                allInSameDirection = False\n                Exit For\n            End If\n        End If\n    Next i\n    \n    If allInSameDirection Then\n        MsgBox (\"Bend lines are all parallel\")\n    Else\n        MsgBox (\"Bend lines are not parallel\")\n    End If\n    \nEnd Sub"], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: Ilogic error member not found when access userparameters\n                    ", "solution": [" ", "Dim", " ", "oDoc", " ", "As", " ", "Document", " ", "=", " ", "ThisApplication", ".", "ActiveEditDocument", "\n ", "Dim", " ", "oPartDoc", " ", "As", " ", "PartDocument", "\n ", "Dim", " ", "oAsmDoc", " ", "As", " ", "AssemblyDocument", "\n ", "Dim", " ", "oMyParameter", " as ", "UserParameters", " \n \n", "If", " ", "oDoc", ".", "DocumentType", " ", "=", " ", "kPartDocumentObject", " ", "Then", "\n    ", "MsgBox", "(", "\"", "Its a part", "\"", ",,", "\"\"", ")", "\n    ", "oPartDoc", " ", "=", " ", "ThisApplication", ".", "ActiveEditDocument", "\n    ", "oMyParameter", " ", "=", " ", "oPartDoc", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", "\n", "Else", " ", "If", " ", "oDoc", ".", "DocumentType", " ", "=", " ", "kAssemblyDocumentObject", "\n    ", "MsgBox", "(", "\"", "Its an assembly", "\"", ",,", "\"\"", ")", "\n    ", "oAsmDoc", " ", "=", " ", "ThisApplication", ".", "ActiveEditDocument", "\n    ", "oMyParameter", " ", "=", " ", "oAsmDoc", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", "\n", "End", " ", "If", "\n\n", "MsgBox", "(", "\"", "User parameter count is ", "\"", " ", "&", " ", "oMyParameter", ".", "Count", ",,", "\"\"", ")"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Choose sketch visibility with a Macro\n                    ", "solution": ["Dim Sketch1, Sketch2, Sketch3 As PlanarSketch\nDim sketches As PlanarSketches\n\nSet sketches = ThisApplication.ActiveDocument.ComponentDefinition.sketches\n\nDim s1, s2, s3 As PlanarSketch\n\nFor Each s1 In sketches\n    If s1.Name = \"Sketch1\" Then\n        Set Sketch1 = s1\n        Exit For\n    End If\nNext\n    If CheckBox1.Value = 0 Then\n        s1.Visible = False\n    Else\n        s1.Visible = True\n    End If\n\nFor Each s2 In sketches\n    If s2.Name = \"Sketch2\" Then\n        Set Sketch2 = s2\n        Exit For\n    End If\nNext\n    If CheckBox2.Value = 0 Then\n        s2.Visible = False\n    Else\n        s2.Visible = True\n    End If\n\nFor Each s3 In sketches\n    If s3.Name = \"Sketch3\" Then\n        Set Sketch3 = s3\n        Exit For\n    End If\nNext\n    If CheckBox3.Value = 0 Then\n        s3.Visible = False\n    Else\n        s3.Visible = True\n    End If"], "author": "pabloiglesiasc"},
{"created at": [], "solution Title": "\n                        Re: iLogic not interpreting parameter value properly (for only one condition)\n                    ", "solution": ["Dim Thk as DoubleForEquals = Parameter(\"Thk\")\u00a0 \u2018single-precision value\nSelect Case Thk\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'Mild/Carbon Steel\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case 0.1345\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = \"10 GA.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case 0.1046\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = \"12 GA.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case 0.1196\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = \"11 GA.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case 0.0897\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = \"13 GA.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case 0.0747\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = \"14 GA.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'Stainless Steel\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case 0.1406\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = \"10 GA.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case 0.1251\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = \"11 GA.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case 0.1094\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = \"12 GA.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case 0.0937\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = \"13 GA.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case 0.0781\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = \"14 GA.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case Else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = Parameter(\"Thk\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 val_Thk = RoundToFraction(val_Thk, 1/16, RoundingMethod.Round) &\"\"\"\"\nEnd Select\n\u00a0\nextents_width = SheetMetal.FlatExtentsWidth\nextents_width = RoundToFraction(extents_width, 1/16, RoundingMethod.Round)\niProperties.Value(\"Project\", \"Description\") = \"PL \"&val_Thk&\" x \"&extents_width&\"\"\"\"\niProperties.Value(\"Custom\", \"BOM_Length\") = SheetMetal.FlatExtentsLength"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Can't Purge Unused Linetypes!.....AAARRRRGGGGHHHH\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Write out all appearance information to a file. API Sample\n                    ", "solution": ["Sub LoadAssetLibs()\n      \n    Debug.Print ThisApplication.AssetLibraries.Count\n    Dim olib As AssetLibrary\n    For Each olib In ThisApplication.AssetLibraries\n        Debug.Print olib.DisplayName\n    Next\n        \n    Dim oDP As DesignProject\n    Set oDP = ThisApplication.DesignProjectManager.ActiveDesignProject\n    \n    Dim oPAL As ProjectAssetLibrary\n    For Each oPAL In oDP.AppearanceLibraries\n        Call ThisApplication.AssetLibraries.Open(oPAL.LibraryFilename)\n    Next\n    \n    For Each oPAL In oDP.MaterialLibraries\n        Call ThisApplication.AssetLibraries.Open(oPAL.LibraryFilename)\n    Next\n    \n    Debug.Print ThisApplication.AssetLibraries.Count\n    For Each olib In ThisApplication.AssetLibraries\n        Debug.Print olib.DisplayName\n    Next\nEnd Sub\n"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: SelectSet, Part Priority, DrawingView\n                    ", "solution": ["    'Varibales needed for process the selected component and view.\n    Dim oView           As DrawingView\n    Dim oSelectedObj    As Object\n    Dim oGenObj         As GenericObject\n    'Varibles needed for the referenced assembly document\n    Dim oRefAssy        As AssemblyDocument\n    Dim oRefAssyOcc     As ComponentOccurrence\n    Dim i               As Integer\n    Dim Response        As VbMsgBoxResult\n\n    'Get a hook to the document.\n    Dim oDoc As Inventor.DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    'Test to see if its a drawing.\n    If oDoc.DocumentType <> kDrawingDocumentObject Then\n        Exit Sub\n    End If\n    \n    'Test to see the user has activated part priority.\n    If oDoc.SelectionPriority <> kPartSelectionPriority Then\n        MsgBox \"You must select PartPriority.\", vbInformation\n        Exit Sub\n    End If\n    \n    'Test to see if the user has selected a component occurrence.  This is a weak test as it cant be known if its a componentoccurrence\n    'until after the view is processed.  If they select anything other than a assembly's child part it will error.\n    If oDoc.SelectSet.Count <> 0 Then\n            On Error GoTo NotAComponentOcc:\n            Set oGenObj = oDoc.SelectSet(1)\n            Call oDoc.ProcessViewSelection(oGenObj, oView, oSelectedObj)\n            'Reset error trapping\n            On Error GoTo 0\n    End If\n    \n    'Find reference assembly file.\n    On Error GoTo NothingSelected:\n    Set oRefAssy = oView.ReferencedDocumentDescriptor.ReferencedDocument\n    'Reset error trapping\n    On Error GoTo 0"], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: Place tangent drawingdimension\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule\n                    ", "solution": ["doc", " ", "=", " ", "ThisDoc", ".", "Document", "\n", "Title", " ", "=", " ", "InputBox", "(", "\"", "Enter the title", "\"", ", ", "\"", "Title", "\"", ", ", "iProperties", ".", "Value", "(", "\"", "Summary", "\"", ", ", "\"", "Title", "\"", "))", "  \n", "iProperties", ".", "Value", "(", "\"", "Summary", "\"", ", ", "\"", "Title", "\"", ")", " ", "=", " ", "Title", "  \n", "If", " ", "doc", ".", "DocumentType", " ", "=", " ", "kDrawingDocumentObject", " ", "Then", "\n    ", "aModel", " ", "=", " ", "IO", ".", "Path", ".", "GetFileName", "(", "ThisDoc", ".", "ModelDocument", ".", "FullFileName", ")", "  \n    ", "iProperties", ".", "Value", "(", "aModel", ", ", "\"", "Summary", "\"", ", ", "\"", "Title", "\"", ")", " ", "=", " ", "iProperties", ".", "Value", "(", "\"", "Summary", "\"", ", ", "\"", "Title", "\"", ")", "  \n", "End", " ", "If", "  \n", "InventorVb", ".", "DocumentUpdate", "()"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: setting precision via ilogic\n                    ", "solution": ["Dim mass As Decimal \nmass = iProperties.Mass\n\nDim massString As String\n\n\nSelect Case mass\n\tCase < 1 \n\tmassString = CStr(Round(mass, 2, MidpointRounding.AwayFromZero))& \" kg\"\n\tCase 1 To 10 \n\tmassString = CStr(Round(mass, 1, MidpointRounding.AwayFromZero))& \" kg\"\n\tCase > 10 \n\tmassString = CStr(Round(mass, 0, MidpointRounding.AwayFromZero))& \" kg\"\nEnd Select \n\niProperties.Value(\"Custom\", \"Mymass\")= massString"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Rename Browser nodes from an Assembly and all Parts\n                    ", "solution": ["Public Sub ChangeDisplayName()\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    ' Change the name for the assembly.\n    asmDoc.DisplayName = BuildName(asmDoc)\n    \n    ' Change the name in every referenced document.\n    Dim doc As Document\n    For Each doc In asmDoc.AllReferencedDocuments\n        doc.DisplayName = BuildName(doc)\n    Next\nEnd Sub\n\nPrivate Function BuildName(doc As Document) As String\n    Dim name As String\n    Dim designTrackProps As PropertySet\n    Set designTrackProps = doc.PropertySets.Item(\"Design Tracking Properties\")\n    \n    name = designTrackProps.Item(\"Part Number\").Value & \" - \" & _\n           designTrackProps.Item(\"Description\").Value\n           \n    BuildName = name\nEnd Function"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Sheet Metal - Bend Table (vba)\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: client graphics selection\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Assembly X, Y Z rangebox\n                    ", "solution": ["Public Sub GetAssemblyRange()\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    Dim totalRange As Box\n    Set totalRange = asmDoc.ComponentDefinition.RangeBox\n    \n    Dim xSize As String\n    Dim ySize As String\n    Dim zSize As String\n    xSize = asmDoc.UnitsOfMeasure.GetStringFromValue(totalRange.MaxPoint.X - totalRange.MinPoint.X, kDefaultDisplayLengthUnits)\n    ySize = asmDoc.UnitsOfMeasure.GetStringFromValue(totalRange.MaxPoint.Y - totalRange.MinPoint.Y, kDefaultDisplayLengthUnits)\n    zSize = asmDoc.UnitsOfMeasure.GetStringFromValue(totalRange.MaxPoint.Z - totalRange.MinPoint.Z, kDefaultDisplayLengthUnits)\n    MsgBox (\"Assembly size: \" & xSize & \" x \" & ySize & \" x \" & zSize)\nEnd Sub\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Inventor Project File (.ipt)\n                    ", "solution": [], "author": "santoshr0114"},
{"created at": [], "solution Title": "\n                        Re: Select and activate sketch via iLogic\n                    ", "solution": ["Hi MK92,", "Paste the rule below into a part file, with a multi-value text parameter called TestParam, with values 'A', 'B', 'C', 'D'. Create 4 sketches in the part called Sketch1, Sketch2, Sketch3 and Sketch4. When you switch the value of that parameter it'll activate different sketches.", "Does that help?", "Luke", "Dim", " ", "oSketches", " ", "As", " ", "PlanarSketches", " ", "=", " ", "ThisApplication", ".", "ActiveEditDocument", ".", "ComponentDefinition", ".", "Sketches", "\n\n", "'", " Exit active sketch if we are currently editing a sketch", "If", " ", "TypeOf", " ", "ThisApplication", ".", "ActiveEditObject", " ", "Is", " ", "Sketch", " ", "Then", "\n    ", "'", " Set a reference to the active sketch.", "    ", "    Dim", " ", "oSketch", " ", "As", " ", "Sketch", " ", "=", " ", "ThisApplication", ".", "ActiveEditObject", "\n    ", "oSketch", ".", "ExitEdit", "\n", "End", " ", "If", "\n\n", "Select", " ", "Case", " ", "TestParam", "\n\n", "Case", " ", "\"", "A", "\"", " \n    ", "oSketches", "(", "\"", "Sketch1", "\"", ")", ".", "Edit", "\n", "Case", " ", "\"", "B", "\"", "\n    ", "oSketches", "(", "\"", "Sketch2", "\"", ")", ".", "Edit", "\n", "Case", " ", "\"", "C", "\"", "\n    ", "oSketches", "(", "\"", "Sketch3", "\"", ")", ".", "Edit", "\n", "Case", " ", "\"", "D", "\"", "\n    ", "oSketches", "(", "\"", "Sketch4", "\"", ")", ".", "Edit", "\n    \n", "End", " ", "Select", "\n\n"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Open .dwg with iLogic\n                    ", "solution": ["ThisApplication.Documents.Open(\"Full file path + extension here\")"], "author": "Jefkee"},
{"created at": [], "solution Title": "\n                        Re: Assign multiple parameters with the same value\n                    ", "solution": ["Public Sub SetScaleOnParameters()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n    \n    Dim modelParam As ModelParameter\n    For Each modelParam In partDef.Parameters.ModelParameters\n        ' Check to see that this parameter defines a distance.\n        If partDoc.UnitsOfMeasure.CompatibleUnits(\"1\", modelParam.Units, \"1\", \"in\") Then\n            ' Change the expression to include scale.\n            modelParam.Expression = modelParam.Expression & \" * Scale\"\n        End If\n    Next\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: In assembly or not\n                    ", "solution": ["If ThisDoc.Document Is ThisApplication.ActiveDocument Then\n\tMsgBox(\"Top-Level assembly is being edited.\")\nElse\n\tMsgBox(\"A component in the assembly is being edited\")\nEnd If"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: SketchLine Gemoetry Wrong Results\n                    ", "solution": [], "author": "mario.lung"},
{"created at": [], "solution Title": "\n                        Re: Flat Pattern Display Bend Numbers\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Unable to Update Default.ivb\n                    ", "solution": [], "author": "rob.j.ross"},
{"created at": [], "solution Title": "\n                        Re: I-Logic Suppress rule\n                    ", "solution": ["Try\n\tActiveLOD = ThisDoc.Document.ComponentDefinition.RepresentationsManager.activeLevelofDetailRepresentation.Name\n\tAuto = iLogicVb.Automation\n\tSelect Case ActiveLOD\n\t\tCase  \"LOD1\"\n\t\t\tAuto.GetRule(ThisDoc.Document, \"Regola0\").IsActive = False\n\t\t\tAuto.GetRule(ThisDoc.Document, \"Regola1\").IsActive = False\n\t\t\tAuto.GetRule(ThisDoc.Document, \"Regola2\").IsActive = True\n\t\t\tAuto.GetRule(ThisDoc.Document, \"Regola3\").IsActive = True\n\t\tCase \"LOD2\"\n\t\t\tAuto.GetRule(ThisDoc.Document, \"Regola0\").IsActive = True\n\t\t\tAuto.GetRule(ThisDoc.Document, \"Regola1\").IsActive = True\n\t\t\tAuto.GetRule(ThisDoc.Document, \"Regola2\").IsActive = False\n\t\t\tAuto.GetRule(ThisDoc.Document, \"Regola3\").IsActive = False\n\tEnd Select\n\nCatch ex As exception\n\nEnd Try"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Custom Add-In Folder is Missing\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Have to enter a form twice\n                    ", "solution": [], "author": "drguitarum2005"},
{"created at": [], "solution Title": "\n                        Re: ilogic code to change Active Default Standard\n                    ", "solution": [" ", "Const", " ", "kStandardName", " ", "=", " ", "\"", "ABC", "\"", " \n    ", "Const", " ", "kObjDefaultsName", " ", "=", " ", "\"", "My Defaults", "\"", " \n    ", "Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", " \n    \n    ", "On", " ", "Error", " ", "Resume", " ", "Next", " \n    \n    ", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", " \n    ", "Dim", " ", "oStylesMgr", " ", "As", " ", "DrawingStylesManager", " \n    ", "oStylesMgr", " ", "=", " ", "oDoc", ".", "StylesManager", " \n    ", "Dim", " ", "oStandard", " ", "As", " ", "DrawingStandardStyle", " \n    \n    ", "oStandard", " ", "=", " ", "oStylesMgr", ".", "StandardStyles", " ", "_", " \n                             .", "Item", "(", "kStandardName", ")", " \n    \n    ", "If", " ", "oStandard", " ", "Is", " ", "Nothing", " ", "Then", " \n        ", "oStandard", " ", "=", " ", "oStylesMgr", ".", "StandardStyles", " ", "_", " \n                       .", "Item", "(", "1", ")", ".", "Copy", "(", "kStandardName", ")", " \n    ", "End", " ", "If", " \n    \n    ", "oStylesMgr", ".", "ActiveStandardStyle", " ", "=", " ", "oStandard"], "author": "iancross"},
{"created at": [], "solution Title": "\n                        Re: Turn off 2D sketch via code\n                    ", "solution": ["Dim oDoc as Inventor.Document = _invApp.ActiveDocument\noDoc.ObjectVisibility.Sketches = False"], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: ILOGIC AUTOMATIC VIEW SCALE LABEL FOR EACH SHEET CREATED IN THE SAME FILEDRA\n                    ", "solution": ["Option Explicit\n' Set the scale on each sheet individual\nTry\n\tDim oActiveDoc As Document = _ \n\tTryCast(ThisApplication.ActiveDocument, Drawingdocument)\n\tDim sScaleText As String\n\t\n\t' Check if activedoc is nothing, if so than exit\n\tIf (oActiveDoc Is Nothing) Then Exit Sub\n\t\n\t' Loop thru the sheets and get scale from the first view\n\tFor Each oSheet As Sheet In oActiveDoc.Sheets\n\t\tIf (Not oSheet.DrawingViews.Count = 0) Then\n\t\t\tsScaleText = oSheet.DrawingViews(1).ScaleString.ToString\n\t\t\tFor Each oTextBox As TextBox In oSheet.TitleBlock.Definition.Sketch.TextBoxes\n        \t\tIf (Strings.Left(oTextBox.FormattedText, 7) = \"<Prompt\") Then\n\t\t\t\t\tIf (Strings.Instr(oTextBox.FormattedText, \"Scale\", _\n\t\t\t\t\t\tMicrosoft.VisualBasic.CompareMethod.Text) <> 0) Then\n\t\t\t\t\t\toSheet.TitleBlock.SetPromptResultText(oTextBox,sScaleText)\n\t\t\t\t\tEnd If\n        \t\tEnd If\n    \t\tNext oTextBox\t\t\n\t\tEnd If\n\tNext oSheet\n\t\nCatch ex As Exception\n\tMsgBox(\"Error info: \" & vbNewLine & ex.Message, vbOKOnly, \"Error: SetScale\")\nEnd Try"], "author": "ewiggers"},
{"created at": [], "solution Title": "\n                        Re: ilogic pdf rule\n                    ", "solution": ["' alternative oFileName value\noFileName = ThisDoc.PathAndFileName(False).Replace(ThisDoc.WorkspacePath(), \"J:\")\n\n' your code.....\n\n' oFolder \noFolder = oFileName.Replace(ThisDoc.FileName(False),\"\")\n\n' your code....\n\n' oDataMedium.FileName\noDataMedium.FileName = oFileName & \".pdf\""], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: ExecuteSaveCopyAs and migration\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How to run a rule with vb.net\n                    ", "solution": ["AddinGlobal.oInvApplication = addInSiteObject.Application", "Public Shared oInvApplication As Inventor.Application", "Public Shared Function GetiLogicAddin(_Application As Inventor.Application) As Object\nDim oAddIn As Inventor.ApplicationAddIn\nTry\n    oAddIn = _Application.ApplicationAddIns.ItemById(\"{3BDD8D79-2179-4B11-8A5A-257B1C0263AC}\")\n    If (oAddIn Is Nothing) Then\n        Return Nothing\n    End If\n    oAddIn.Activate()\n    Return oAddIn.Automation\nCatch\n    Return Nothing\nEnd Try\nEnd Function", "Public Shared Sub Button1_Execute()\nDim iLogicAuto As Object\nDim oDoc As Inventor.Document\n\n' Set active document\noDoc = AddinGlobal.oInvApplication.ActiveDocument\nIf (oDoc Is Nothing) Then\n    MsgBox(\"Missing Inventor Document\")\n    Exit Sub\nEnd If\n\niLogicAuto = AddinGlobal.GetiLogicAddin(AddinGlobal.oInvApplication)\nIf (iLogicAuto IsNot Nothing) Then\n    iLogicAuto.RunRule(oDoc, \"Show\")\nEnd If\nEnd Sub"], "author": "ewiggers"},
{"created at": [], "solution Title": "\n                        Re: Can't get API method to work\n                    ", "solution": ["Dim setid As String\nDim propid As String\noMassColumn.GetPropertyMap(setid, propid)", "Dim setid As String\nDim propid As String\noMassColumn.GetPropertyMap setid, propid"], "author": "Boorda"},
{"created at": [], "solution Title": "\n                        Betreff: iLogic - API access to Surface Bodies\n                    ", "solution": ["Public Sub SelectAllSurfaces()\n    'Get the active document.\n    Dim ActDoc As Document: Set ActDoc = ThisApplication.ActiveDocument\n    \n    'Lets check to make sure we are in a part or assembly document.\n    If ActDoc.DocumentType = kPartDocumentObject _\n    Or ActDoc.DocumentType = kAssemblyDocumentObject Then\n        'Do Nothing, we can continue...\n    Else\n        MsgBox \"This funtion can only be performed on a part or assembly document.\", vbInformation\n        Exit Sub\n    End If\n\n    'Create a select set to hold the selection.\n    Dim SelSet As SelectSet: Set SelSet = ActDoc.SelectSet\n    ActDoc.SelectionPriority = kBodySelectionPriority\n    \n    'We know we are working with a part or assembly file so lets grab its component definition.\n    Dim cDef As ComponentDefinition: Set cDef = ActDoc.ComponentDefinition\n    \n    'Get the surfacebodies for the current document.\n    Dim SrfBod As SurfaceBody\n    Dim SrfBods As SurfaceBodies: Set SrfBods = cDef.SurfaceBodies\n    \n    'Lets add the surfacebodies to the selection set.\n    For Each SrfBod In SrfBods\n        'We only want surfaces that are not also solids.\n        If Not SrfBod.IsSolid Then SelSet.Select SrfBod: SrfBod.Visible = True\n    Next\nEnd Sub"], "author": "Boorda"},
{"created at": [], "solution Title": "\n                        Re: Sketch Entities Mirror (involute curves)\n                    ", "solution": ["Public Function TestMirror()\n    Dim spline As SketchSpline\n    Set spline = ThisApplication.CommandManager.Pick(kSketchCurveSplineFilter, \"Select the spline\")\n    \n    Dim line As SketchLine\n    Set line = ThisApplication.CommandManager.Pick(kSketchCurveLinearFilter, \"Select the symmetry line\")\n    \n    Dim sp As SketchSpline\n    Set sp = CreateMirroredSpline(spline, line)\nEnd Function\n\nPrivate Function CreateMirroredSpline(spline As SketchSpline, Axis As SketchLine) As SketchSpline\n    ' Get the parent sketch.\n    Dim sk As sketch\n    Set sk = spline.Parent\n    \n    ' Create a copy of the existing spline.\n    Dim fitPoints As ObjectCollection\n    Set fitPoints = ThisApplication.TransientObjects.CreateObjectCollection\n    Dim i As Integer\n    For i = 1 To spline.FitPointCount\n        Dim newPoint As SketchPoint\n        Set newPoint = sk.SketchPoints.Add(spline.FitPoint(i).Geometry, False)\n        \n        ' Make each point symmetric.\n        Call sk.GeometricConstraints.AddSymmetry(spline.FitPoint(i), newPoint, Axis)\n        \n        ' Add the new point to a collection.\n        Call fitPoints.Add(newPoint)\n    Next\n    \n    ' Create a spline that fits through the new points.\n    Dim newSpline As SketchSpline\n    Set newSpline = sk.SketchSplines.Add(fitPoints, spline.FitMethod)\nEnd Function"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Exporting entire VBA projects to compare version changes\n                    ", "solution": ["Option Explicit\n\nPublic Sub DumpAllVbaProjectCode()\n  ' This utility was written for 64 bit Inventor 2015. Untested with 32 bit.\n  ' Make sure to reference VBE (Microsoft Visual Basic for Applications Extensibility 5.3\n  \n  ' You may have to browse to the file containing the reference:\n  ' C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VBA\\VB6\\VBE6EXT.OLB\n\n  Const vbext_ct_StdModule = 1\n  Const vbext_ct_ClassModule = 2\n  Const vbext_ct_MSForm = 3\n  Const vbext_ct_Document = 100\n  \n  Dim oModule As InventorVBAComponent\n  Dim sOut As String\n  \n  sOut = \"\"\n  For Each oModule In ThisApplication.VBAProjects(1).InventorVBAComponents\n    With oModule.VBComponent\n      If .Type >= vbext_ct_StdModule And .Type <= vbext_ct_Document Then\n        \n        Dim PadLine As String\n        If sOut = \"\" Then\n          PadLine = \"\"\n        Else\n          PadLine = vbCrLf\n        End If\n        \n        sOut = sOut & PadLine & \"' \\\\\\ \" & oModule.Name & \" ///\" & vbCrLf\n        \n        Dim oCodeModule As CodeModule\n        Set oCodeModule = oModule.VBComponent.CodeModule\n        \n        sOut = sOut & CleanString(oCodeModule.Lines(1, oCodeModule.CountOfLines)) & vbCrLf\n      End If\n    End With\n  Next\n\n  Open \"C:\\VBA_Dump.txt\" For Output As #1\n    Print #1, sOut\n  Close #1\n\n  MsgBox \"VBA Project Dumped\"\nEnd Sub\n\nPublic Function CleanString(STR As String) As String\n  ' Formalizes the output so it may be compared with other versions of the project.\n  Dim sLines() As String\n  Dim sOut As String\n  Dim i As Integer\n  \n  ' remove tabs\n  STR = Replace(STR, vbTab, \"\")\n\n  sLines = Split(STR, vbCrLf)\n  For i = 0 To UBound(sLines) - 1\n    sLines(i) = RTrim(sLines(i))\n    If Not (sLines(i) = RTrim(sLines(i + 1)) And sLines(i) = \"\") Then\n      ' construct new string\n      sOut = sOut & sLines(i) & vbCrLf\n    End If\n  Next i\n\n  Do\n    ' Clean up trailing newlines\n    If Right$(sOut, 2) = vbCrLf Then\n      sOut = Left$(sOut, Len(sOut) - 2)\n    End If\n  Loop Until Right$(sOut, 2) <> vbCrLf\n  \n  CleanString = Trim(sOut)\nEnd Function"], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: Macro to export in STEP like my macro PDF\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Title block of sheet 2 issue\n                    ", "solution": [], "author": "ewiggers"},
{"created at": [], "solution Title": "\n                        Re: Saveas all IDW sheets to PDF\n                    ", "solution": ["Sub Main\n\tprintsfileLocation=ThisDoc.Path\n\toMemberName=ThisDoc.FileName(False) 'without extension\n\texportPDF(printsfileLocation, oMemberName, ThisApplication.activedocument)\nEnd Sub\n\nSub exportPDF(oPath As String, oFileName As String, oDocument As Document)\n\tTry\n\t\toPDFAddIn = ThisApplication.ApplicationAddIns.ItemById _\n\t\t(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\t\toContext = ThisApplication.TransientObjects.CreateTranslationContext\n\t\toContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n\t\toOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\t\toDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\t\n\t\tDim oDrawing as DrawingDocument = oDocument\n\t\tDim sheetCount As Integer = oDrawing.Sheets.Count\n\t\n\t\tIf oPDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then\n\t\t\toOptions.Value(\"All_Color_AS_Black\") = 1\n\t\t\toOptions.Value(\"Remove_Line_Weights\") = 1\n\t\t\toOptions.Value(\"Vector_Resolution\") = 400\n\t\t\toOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintSheetRange\n\t\t\toOptions.Value(\"Custom_Begin_Sheet\") = 1\n\t\t\toOptions.Value(\"Custom_End_Sheet\") = sheetcount\n\t\tEnd If\n\t\n\t\toDataMedium.FileName = oPath & \"\\\" & oFileName & \".pdf\" ' check carefully this line\n\t\n\t\toPDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n\tCatch\n\tEnd Try\nEnd Sub"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: MultiValue-SetList with calculated list\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Apprentice vs Full Inv API\n                    ", "solution": [], "author": "Jon.Dean"},
{"created at": [], "solution Title": "\n                        Re: planarsketch ownedby feature\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic Values Input\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Feature.ThreadType\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Set TextStyle Bold option is not working\n                    ", "solution": ["Sub Main()\nDim oDoc As PartDocument\nDim oSketch As Sketch\nDim oTextBox As TextBox\nDim sText As String\nDim oBoldStyleParam As Parameter\n\n' Set the active document\nSet oDoc = ThisApplication.ActiveDocument\n\n' The used sketch name in the extrusion is Text\nSet oSketch = oDoc.ComponentDefinition.Sketches.Item(\"Sketch2\")\n\n' Set the desired textbox\nSet oTextBox = oSketch.TextBoxes.Item(1)\n' Get the existing text\nsText = oTextBox.Text\n' Set the bold style parameter\nSet oBoldStyleParam = oDoc.ComponentDefinition.Parameters.Item(\"BoldStyle\")\n' Set the text with formatted text to bold\noTextBox.FormattedText = \"<StyleOverride Bold=\" & \"'\" & oBoldStyleParam.Value & \"'>\" & sText & \"</StyleOverride>\"\n\nEnd Sub"], "author": "ewiggers"},
{"created at": [], "solution Title": "\n                        Re: How to kill display refresh while performing a task?\n                    ", "solution": [], "author": "ewiggers"},
{"created at": [], "solution Title": "\n                        Re: \"Object variable or With block variable not set\" error declaring a\n                    ", "solution": [], "author": "jpblower"},
{"created at": [], "solution Title": "\n                        Re: flat pattern runrule in part from the assembly Level fail and interface bug\n                    ", "solution": ["'for DWG, activate the parts in advance\nDim oAssDoc As AssemblyDocument\noAssDoc = ThisApplication.ActiveDocument\n\nDim oAssDef As AssemblyComponentDefinition\noAssDef = oAssDoc.ComponentDefinition\n\nDim oComp As ComponentOccurrence\n For Each oComp In oAssDef.Occurrences  \n     oComp.Edit()\n      oComp.ExitEdit(ExitTypeEnum.kExitToTop)\n Next\n"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Create Work Axis in Assembly\n                    ", "solution": ["Public Sub AssemblyWorkAxis()\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    Dim asmDef As AssemblyComponentDefinition\n    Set asmDef = asmDoc.ComponentDefinition\n    \n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    Dim wa As WorkAxis\n    Set wa = asmDef.WorkAxes.AddFixed(tg.CreatePoint(0, 0, 0), _\n                                      tg.CreateUnitVector(1, 1, 1))\n    wa.Grounded = True\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Triangle mesh winding of facets from the Inventor API\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic Capture View Label Line by Line\n                    ", "solution": ["                ", "If", " ", "InStr", "(", "sPLabelFix2", ", ", "\"", "<Br/>SCALE", "\"", ")", " ", "Then", "\n                    ", "Start", " ", "=", " ", "InStr", " ", "(", "sPLabelFix2", ", ", "\"", "<Br/>SCALE", "\"", ")", "\n                    ", "'", "MsgBox (Start,,\"Start\")", "\n                    ", "Finish", " ", "=", " ", "InStrRev", "(", "sPLabelFix2", ", ", "\"", "X<Br/>", "\"", ")", "\n                    ", "'", "MsgBox (Finish,,\"Finish\")", "\n                    ", "If", " ", "Finish", " ", "=", " ", "0", " ", "Then", "\n                        ", "sGrab", " ", "=", " ", "Mid", "(", "sPLabelFix2", ", ", "Start", ")", "\n                    ", "ElseIf", " ", "Finish", " ", "<>", " ", "0", " ", "Then", "\n                        ", "sGrab", " ", "=", " ", "Mid", "(", "sPLabelFix2", ", ", "Start", ", ", "Finish", "-", "Start", "+", "1", ")", "\n                    ", "End", " ", "If", "\n                    ", "'", "MsgBox (sGrab,,\"Grab\")", "\n                    ", "sPLabelFix3", " ", "=", " ", "Replace", "(", "sPLabelFix2", ", ", "sGrab", ", ", "\"\"", ")", "\n                    ", "oView", ".", "Label", ".", "FormattedText", " ", "=", " ", "(", "sPLabelFix3", ")", "\n                ", "End", " ", "If"], "author": "ebuckner"},
{"created at": [], "solution Title": "\n                        Re: To get the latest sketch in a partdocument\n                    ", "solution": ["Dim mApp As Inventor.Application = Marshal.GetActiveObject(\"Inventor.Application\")\nDim oDoc As Inventor.PartDocument = mApp.ActiveDocument\nDim oSketches As PlanarSketches = oDoc.ComponentDefinition.Sketches\nDim oLastSketch As Sketch = oSketches.Item(oSketches.Count)\nMsgBox(oLastSketch.Name)"], "author": "colli123"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule for assembly to generate a drawing list in excel\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Turn off Center of Gravity by code\n                    ", "solution": ["Public Sub TurnOffCofG()\n    Dim cmd As ButtonDefinition\n    Set cmd = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppCenterOfGravityCmd\")\n    \n    If cmd.Pressed Then\n        cmd.Execute\n    End If\nEnd Sub\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Invenotr VBA\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: How do I export my Pipe network Parts list to another drawing?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to make a parts BOM structure to Phantom from an assembly rule\n                    ", "solution": ["'get the reference to the component by its name\nDim oOcc As ComponentOccurrence = Component.InventorComponent(\"INNER_STIFFENING_RING\u200b_1\")\n' set BOM structure to Phantom\noOcc.Definition.BOMStructure = BOMStructureEnum.kPhantomBOMStructure", "\n'oOcc.Definition.BOMStructure = BOMStructureEnum.kNormalBOMStructure\n'oOcc.Definition.BOMStructure = BOMStructureEnum.kPurchasedBOMStructure\n'oOcc.Definition.BOMStructure = BOMStructureEnum.kInseparableBOMStructure"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: To get a line out of a sketch\n                    ", "solution": ["\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'Count = 6, bei zwei gezeichneten Geraden im sketch, sind die restlichen 4 die Umrisslinien der ausgew\u00e4hlten sketch-fl\u00e4che", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'Dim oAnzahl As Integer = oLastSketch.SketchLines.Count", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Dim oStartpunkt As WorkPoint = oCompDef.WorkPoints.AddByPoint(oLastSketch.SketchLines.Item(5).StartSketchPoint)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Dim oWorkPlane As WorkPlane", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oWorkPlane = oCompDef.WorkPlanes.AddByNormalToCurve(oLastSketch.SketchLines.Item(5), oStartpunkt)"], "author": "colli123"},
{"created at": [], "solution Title": "\n                        Re: iLogic not updating a  driven parameter\n                    ", "solution": ["Parameter.Param(\"ParameterName\").Value*10", "Parameter.UpdateAfterChange = True\nMultiValue.UpdateAfterChange = True"], "author": "TommySWE"},
{"created at": [], "solution Title": "\n                        Re: creating table on idw and importing file datas in it\n                    ", "solution": ["Public Sub CreateCustomTable()\n    ' Set a reference to the drawing document.\n    ' This assumes a drawing document is active.\n    Dim oDrawDoc As DrawingDocument\n    oDrawDoc = ThisApplication.ActiveDocument\n    \n    ' Set a reference to the active sheet.\n    Dim oSheet As Sheet\n    oSheet = oDrawDoc.ActiveSheet\n    \n    ' Set the column titles\n    Dim oTitles(0 To 2) As String\n    oTitles(0) = \"Part Number\"\n    oTitles(1) = \"Quantity\"\n    oTitles(2) = \"Material\"\n    \n    ' Set the contents of the custom table (contents are set row-wise)\n    Dim oContents(0 To 8) As String\n    oContents(0) = \"1\"\n    oContents(1) = \"1\"\n    oContents(2) = \"Brass\"\n    oContents(3) = \"2\"\n    oContents(4) = \"2\"\n    oContents(5) = \"Aluminium\"\n    oContents(6) = \"3\"\n    oContents(7) = \"1\"\n    oContents(8) = \"Steel\"\n    \n    ' Set the column widths (defaults to the column title width if not specified)\n    Dim oColumnWidths(0 To 2) As Double\n    oColumnWidths(0) = 2.5\n    oColumnWidths(1) = 2.5\n    oColumnWidths(2) = 4\n      \n    ' Create the custom table\n    Dim oCustomTable As CustomTable\n    oCustomTable = oSheet.CustomTables.Add(\"My Table\", ThisApplication.TransientGeometry.CreatePoint2d(15, 15), _\n                                        3, 3, oTitles, oContents, oColumnWidths)\n                                        \n\nEnd Sub\n "], "author": "dkatz"},
{"created at": [], "solution Title": "\n                        Re: Changing the distance between a fluch constrain with inventor vba\n                    ", "solution": [], "author": "dkatz"},
{"created at": [], "solution Title": "\n                        Re: Code to check if a file is open\n                    ", "solution": ["'excel file name\nDim Filename As String = \"c:\\temp\\GGGGG.xlsx\"\n\n'Step 1.  Close workbook if it is already opened\nDim excelApp As Object \nTry \n    excelApp = GetObject(, \"Excel.Application\")\n    For Each wb As Object In excelApp.workbooks\n        If UCase(wb.fullname) = UCase(filename) Then\n\t   'workbook is already opened: Save and close it\n\t   wb.Save\n\t   wb.Close   \n\t   Exit For\n        End If\n    Next\nCatch\nFinally\n    excelApp = Nothing\nEnd Try\n\n'Step 2.  Open file from disk and fill with iProperties\nGoExcel.Open(Filename)\nGoExcel.CellValue(\"A2\")=iProperties.Value(\"Project\", \"Part Number\")\t\t\nGoExcel.CellValue(\"A3\")=iProperties.Value(\"Project\", \"Description\")\t\t\nGoExcel.Save\nGoExcel.Close\n\nBeep\nMsgBox(\"FILE IS UPDATED\")"], "author": "RodrigoEiras"},
{"created at": [], "solution Title": "\n                        Re: How do I create a custom collection of surface bodies?\n                    ", "solution": ["        oCutSurfBodies.Add (oSurfBody)", "'To be replaced with\n\n        Call oCutSurfBodies.Add (oSurfBody)"], "author": "jpblower"},
{"created at": [], "solution Title": "\n                        Re: Automation of Inventor with VBA from Excel Hole Feature Thread Designation\n                    ", "solution": ["'", "This routine assignes the thread size to the holes used in a hole feature from an imported parameter", "\n\n", "Dim", " ", "ThreadSize", " ", "As", " ", "DoubleForEquals", "\n", "Dim", " ", "CurrentThreadFeature", " ", "As", " ", "String", "\n\n", "ThreadSize", "=", "ThrSize9", "                     ", "'", "Make it equal to applicable parameter", "\n", "CurrentThreadFeature", "=", "\"", "GunThreadedHole", "\"", "     ", "'", "make it equal to applicable thread feature name", "\n\n", "'", "MessageBox.Show(\"Thread size is \"&ThreadSize,\"Debugging\")", "\n\n", "Select", " ", "Case", " ", "ThreadSize", "\n", "Case", " ", "0.250", "      ", "'", "0.250 1/4\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 0.250\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "1/4-20 UNC", "\"", "\n", "Case", " ", "0.375", "      ", "'", "0.375 3/8\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 0.375\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "3/8-16 UNC", "\"", "\n", "Case", " ", "0.500", "         ", "'", "0.500 1/2\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 0.500\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "1/2-13 UNC", "\"", "\n", "Case", " ", "0.625", "         ", "'", "0.625 5/8\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 0.625\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "5/8-11 UNC", "\"", "\n", "Case", " ", "0.750", "         ", "'", "0.750 3/4\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 0.750\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "3/4-10 UNC", "\"", "\n", "Case", " ", "0.875", "         ", "'", "0.875 7/8\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 0.875\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "7/8-9 UNC", "\"", "\n", "Case", " ", "1.000", "         ", "'", "1.000 1\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 1.000\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "1-8 UNC", "\"", "\n", "Case", " ", "1.125", "         ", "'", "1.125 1 1/8\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 1.125\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "1 1/8-7 UNC", "\"", "    \n", "Case", " ", "1.250", "         ", "'", "1.250 1 1/4\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 1.250\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "1 1/4-7 UNC", "\"", "\n", "Case", " ", "1.375", "         ", "'", "1.375 1 3/8\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 1.375\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "1 3/8-6 UNC", "\"", "\n", "Case", " ", "1.500", "        ", "'", "1.500 1 1/2\"", "\n    ", "'", "MessageBox.Show(\"ThreadSize is recognized as 1.500\",\"Debugging\")", "\n    ", "Feature", ".", "ThreadDesignation", "(", "CurrentThreadFeature", ")", " ", "=", " ", "\"", "1 1/2-6 UNC", "\"", "\n", "Case", " ", "Else", "\n    ", "MessageBox", ".", "Show", "(", "\"", "ThreadSize not recognized", "\"", ",", "\"", "Debugging", "\"", ")", "\n", "End", " ", "Select", "\n\n", "InventorVb", ".", "DocumentUpdate", "()", "\n\n"], "author": "RodrigoEiras"},
{"created at": [], "solution Title": "\n                        Re: Ilogic New parameter in part\n                    ", "solution": ["Sub Main\n\t'active assembly\n\tDim asmDoc As AssemblyDocument = ThisDoc.Document   'ThisApplication.ActiveDocument \n\t'iterate the referenced documents\n    For Each doc As Inventor.Document In asmDoc.AllReferencedDocuments \n\t\t'add the multi-value parameter to every part document\n        If doc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then \n            AddMultiValueParameter(doc)\n        End If \n    Next \n\tasmDoc.update\n\tBeep\nEnd Sub\n\n\nSub AddMultiValueParameter(ByVal oDoc As PartDocument)\n\n    Dim ParName As String = \"AAA\"  'Parameter Name\n    Dim oList() As String = {\"11\", \"88\", \"77\", \"66\"}\n\n    Dim oPars As UserParameters = oDoc.ComponentDefinition.Parameters.UserParameters\n    Dim oPar As UserParameter = Nothing\n    Try\n        oPar = oPars.Item(ParName)\n        oPar.Delete()\n    Catch ex As Exception\n    End Try\n\n    'create parameter with the first value from the list\n    oPar = oPars.AddByExpression(ParName, oList(0), \"mm\")\n    'add expression list\n    For i As Integer = 0 To oList.Length - 1\n        oList(i) = \"\" & oList(i) & \"\"  '<-- required\n    Next\n    Dim oExprList As ExpressionList = oPar.ExpressionList\n    Call oExprList.SetExpressionList(oList, False)\n\n    oDoc.Update()\nEnd Sub", "For i = 0 to 5", "redim preserve strArr(i)", "strArr(i) = \"What ever \"& i", "next", "setParamValues", "(", "oOccurrence", ".", "Name", ", ", "\"ParameterName", "\"", ", ", "strArr", ")", "\n\n", "Public", " ", "Function", " ", "setParamValues", "(", "strPartName", " ", "As", " ", "String", ", ", "strParaName", " ", "As", " ", "String", ", ", "strValues", "()", " ", "As", " ", "String", ")", "\n\n    ", "MultiValue", ".", "SetListInComponent", "(", "strPartName", ",", "strParaName", ", ", "strValues", ")", "\n\n", "End Function"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Authoring Structural Shape\n                    ", "solution": [], "author": "jidickson"},
{"created at": [], "solution Title": "\n                        Re: AddTitleBlock is not functional\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: download inventor 2012 part2\n                    ", "solution": [], "author": "camilo.lemos"},
{"created at": [], "solution Title": "\n                        Re: Defer Update When Changing BOM Structure\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic - array with iProperties\n                    ", "solution": ["'", " array with iProperty names", "\n", "Dim", " ", "mijnArray1", "()", " ", "As", " ", "String", " ", "=", " {", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "customBouwjaar", "\"", ")", ", ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "customOntwerp_Type", "\"", ")", "}", "'", " array with variable names", "\n", "Dim", " ", "mijnArray2", "()", " ", "As", " ", "String", " ", "=", " {", "\"", "resultaat1", "\"", ", ", "\"", "resultaat2", "\"", "}\n\n", "Dim", " ", "n", " ", "As", " ", "Integer", "\n", "Dim", " ", "i", ", ", "j", " ", "As", " ", "String", "\n", "For", " ", "Each", " ", "ArrayWaarde", " ", "In", " ", "mijnArray1", "\n    ", "MessageBox", ".", "Show", "(", "ArrayWaarde", " ", "+", " ", "\"", " - ", "\"", " ", "+", " ", "mijnArray2", "(", "n", "))", "\n    ", "n", "=", "n", "+", "1", "\n", "Next"], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Changing 3d sketch color through API\n                    ", "solution": [], "author": "Carter.Mast"},
{"created at": [], "solution Title": "\n                        Re: How do I reverse the direction of a sculptfeature\n                    ", "solution": [], "author": "jpblower"},
{"created at": [], "solution Title": "\n                        Re: Automating  file names using a common project number\n                    ", "solution": ["oNAMEshort", " ", "=", " ", "(", "Left", "(", "oNAME", ",", "7", "))"], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Change value of textbox\n                    ", "solution": ["Dim", " ", "oDrawingDoc", "=", "ThisDrawing", ".", "Document", "\n", "Dim", " ", "oSketchedSymbolDef", "    ", "As", " ", "SketchedSymbolDefinition", "\n", "Dim", " ", "oSketch", " ", "As", " ", "Sketch", "\n\n", "For", " ", "Each", " ", "oSketchedSymbolDef", " ", "In", " ", "oDrawingDoc", ".", "SketchedSymbolDefinitions", "\n    \n    ", "MessageBox", ".", "Show", "(", "\"", "Symbol Name=", "\"", " ", "&", " ", "oSketchedSymbolDef", ".", "Name", " , ", "\"", "Debugging", "\"", ")", "\n    ", "If", " ", "oSketchedSymbolDef", ".", "Name", "=", "\"", "TestSymbol", "\"", " ", "Then", "\n        ", "oSketchedSymbolDef", ".", "Edit", "(", "oSketch", ")", "\n        ", "For", " ", "Each", " ", "oTextBox", " ", "In", " ", "oSketch", ".", "TextBoxes", "\n            ", "MessageBox", ".", "Show", "(", "\"", "Test Box Text=", "\"", " ", "&", " ", "oTextBox", ".", "Text", " , ", "\"", "Debugging", "\"", ")", "\n        ", "Next", "\n        ", "oSketchedSymbolDef", ".", "ExitEdit", "(", "True", ")", "\n    ", "Else", "\n     ", "'", "Do nothing", "\n    ", "End", " ", "If", "\n    \n", "Next"], "author": "RodrigoEiras"},
{"created at": [], "solution Title": "\n                        Re: Duplicate or copy as sketched symblol\n                    ", "solution": [], "author": "prakasht66"},
{"created at": [], "solution Title": "\n                        Re: Printing idw using Apprentice, no shading in output\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: MACRO PDF with revision number if exists in the drawing\n                    ", "solution": [], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: E_FAIL on PropertySets access\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Notch a FG part with a not-FG part\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Can somebody confirm that Tap does not work i dockable windows? inventor fre\n                    ", "solution": ["    Private Sub TapPressed()\n\n        If Me.txtPartNumber.Focused = True Then\n\n            Me.txtDescription1.Focus()\n\n        ElseIf Me.txtDescription1.Focused = True Then\n\n            Me.txtDescription2.Focus()\n\n        ElseIf Me.txtDescription2.Focused = True Then\n\n            Me.txtDesignationGB.Focus()\n\n        ElseIf Me.txtDesignationGB.Focused = True Then\n\n            Me.txtDesignationDE.Focus()\n\n        ElseIf Me.txtDesignationDE.Focused = True Then\n\n            Me.txtAxRohdim.Focus()\n\n        ElseIf Me.txtAxRohdim.Focused = True Then\n\n            Me.txtType.Focus()\n\n        ElseIf Me.txtType.Focused Then\n\n            txtOverallDim.Focus()\n\n        ElseIf Me.txtOverallDim.Focused = True Then\n\n            Me.txtRoh.Focus()\n\n        ElseIf Me.txtRoh.Focused = True Then\n\n            Me.txtOrderNo.Focus()\n\n        ElseIf Me.txtOrderNo.Focused = True Then\n\n            Me.txtCustomer.Focus()\n\n        End If\n\n    End Sub\n\n    Private Sub iPropsfrm_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles Me.KeyDown\n\n        If e.KeyCode = Keys.Escape Then\n\n            'MsgBox(\"Pressed ESC\")\n\n            'get rid of the annoying ding sound\n            e.SuppressKeyPress = True\n\n        End If\n\n        If e.KeyCode = Keys.Tab Then\n\n            'get rid of the annoying ding sound\n            e.SuppressKeyPress = True\n\n            TapPressed()\n\n            'MsgBox(\"Pressed TAB\")\n\n            \n        End If\n\n    End Sub"], "author": "kbo"},
{"created at": [], "solution Title": "\n                        Re: WindowsForm doesn't open again when closed in an add-in\n                    ", "solution": [], "author": "colli123"},
{"created at": [], "solution Title": "\n                        Re: How do I ask the user to select a part?\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Using Custom Functions in iLogic\n                    ", "solution": ["Sub", " ", "Main", "()", "\n    ", "showMessage", "()", "\n", "End Sub", "\n\n\n", "Function", " ", "showMessage", "\n    ", "MessageBox", ".", "Show", "(", "\"", "Some Message", "\"", ", ", "\"", "Title", "\"", ")", "\n", "End Function", "\n"], "author": "fsdolphin"},
{"created at": [], "solution Title": "\n                        Re: iLogic Insert OLE Object problem\n                    ", "solution": ["Option Explicit On\n\n'current document\nDim doc as Inventor.Document = ThisDoc.Document\n\n'Verify the current document has been saved.\nIf doc.FullFileName = \"\" Then\n\tMessageBox.Show(\"This document must be saved first.\")\n\tExit Sub\nEnd If\n\n'default folder\nDim FolderName As String  = Left$(doc.FullFileName, InStrRev(doc.FullFileName, \"\\\") )\t\nDim selectedfile As String = String.Empty\nDim oFileDlg As inventor.FileDialog = Nothing\nInventorVb.Application.CreateFileDialog(oFileDlg)\n'oFileDlg.Filter = \"Dwg files (*.dwg)|*.dwg|Excel files (*.xlsx)|*.xlsx|pdf files (*.pdf)|*.pdf|Inventor parts (*.ipt)|*.ipt\"\noFileDlg.InitialDirectory = FolderName\noFileDlg.CancelError = True\noFileDlg.MultiSelectEnabled = True\n\nTry\n\toFileDlg.ShowOpen()\n\tselectedfile = oFileDlg.FileName\nCatch\n\tReturn  'operation was cancelled by the user\nEnd Try\n\nDim oleReference As ReferencedOLEFileDescriptor\nIf selectedfile.Contains(\"|\") Then ' we have multiple files selected.\n\tDim file As String() = selectedfile.Split(\"|\")\n\tFor Each s as String in file\n\t\toleReference = doc.ReferencedOLEFileDescriptors _\n\t\t\t.Add(s, OLEDocumentTypeEnum.kOLEDocumentLinkObject)\n\t\toleReference.BrowserVisible = True\n\t\toleReference.Visible = False\n\t\toleReference.DisplayName = Mid$(s, InStrRev(s, \"\\\") + 1)\n\tNext\nElse\n\toleReference = doc.ReferencedOLEFileDescriptors _\n\t\t\t.Add(selectedFile,OLEDocumentTypeEnum.kOLEDocumentLinkObject)\n\toleReference.BrowserVisible = True\n\toleReference.Visible = False\n\toleReference.DisplayName = Mid$(selectedFile, InStrRev(selectedFile, \"\\\") + 1)\nEnd If"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: System.MissingMethodException\n                    ", "solution": [], "author": "mikew"},
{"created at": [], "solution Title": "\n                        Re: To the iLogic and VBA masters question\n                    ", "solution": [], "author": "R.I.Chernov"},
{"created at": [], "solution Title": "\n                        Re: Slice graphics method gone in Inventor 2014 API?\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Constraints keep flipping when using ilogic\n                    ", "solution": [], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: Question to Represantions in Inventor witk iLogic\n                    ", "solution": ["Dim compDef As AssemblyComponentDefinition\ncompDef = ThisDoc.Document.ComponentDefinition\n\nDim ar As New ArrayList\n\nDim rep As DesignViewRepresentation\nFor Each rep In compDef.RepresentationsManager.DesignViewRepresentations\n    ar.Add(rep.Name)\nNext\n\t\nMultiValue.List(\"param1\") = ar"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: iLogic for file naming and sheet naming\n                    ", "solution": [], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: Text in border not updating\n                    ", "solution": [], "author": "humberto"},
{"created at": [], "solution Title": "\n                        Re: Parts lists\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n   ' Set a reference to the first parts list on the active sheet.\n' This assumes that a parts list is on the active sheet.\nDim oPartList As PartsList\noPartList = oDrawDoc.ActiveSheet.PartsLists.Item(1)\n  ' Iterate through the contents of the parts list.\nDim i As Long\nFor i = 1 To oPartList.PartsListRows.Count\n'look at only the part number column\noCell  = oPartList.PartsListRows.Item(i).Item(\"ITEM\")\n'find a specific part number\nIf oCell.Value = \"1\" Then\noCell.Value = \"A\"\nEnd If\nNext"], "author": "ChristinaForest"},
{"created at": [], "solution Title": "\n                        Re: Tag Creation\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: 3DSketch Wrap To Surface\n                    ", "solution": ["Sub Main()\n    Dim partDoc As PartDocument = ThisApplication.ActiveDocument\n    Dim oParams As Parameters\n    oParams = partDoc.ComponentDefinition.Parameters\n\n    Dim oUserParams As UserParameters\n    oUserParams = oParams.UserParameters\n\n    ' Check to see if \"Radius\" exists and create it if it doesn't.\n    Try\n        Dim radParam As UserParameter = oUserParams.Item(\"Radius\")\n    Catch ex As Exception\n        oUserParams.AddByExpression(\"Radius\", \"3\", _\n                Inventor.UnitsTypeEnum.kDefaultDisplayLengthUnits)\n    End Try\n\n    Const_Radius_And_Const_Pitch(partDoc.ComponentDefinition)\n    Const_Radius_And_Vari_Pitch(partDoc.ComponentDefinition)\n    Vari_Radius_And_Const_Pitch(partDoc.ComponentDefinition)\n    Vari_Radius_And_Vari_Pitch(partDoc.ComponentDefinition)\nEnd Sub\n\nSub Const_Radius_And_Const_Pitch(partDef As PartComponentDefinition)\n    'Creating a 3D Sketch\n    Dim oSketch1 As Sketch3D\n    oSketch1 = partDef.Sketches3D.Add\n\n    Dim equationCurve2 As SketchEquationCurve3D\n    equationCurve2 = oSketch1.SketchEquationCurves3D.Add( _\n        CoordinateSystemTypeEnum.kCylindrical, _\n        \"Radius\", \"360*5*t\", \"5*2*t\", 0, 1)\n    ThisApplication.ActiveView.Fit()\nEnd Sub\n\nSub Const_Radius_And_Vari_Pitch(partDef As PartComponentDefinition)\n    'Creating a 3D Sketch\n    Dim oSketch1 As Sketch3D\n    oSketch1 = partDef.Sketches3D.Add\n\n    Dim equationCurve2 As SketchEquationCurve3D\n    equationCurve2 = oSketch1.SketchEquationCurves3D.Add( _\n        CoordinateSystemTypeEnum.kCylindrical, _\n        \"Radius\", \"360*5*t\", \"5*2*t*t\", 0, 1)\n    ThisApplication.ActiveView.Fit()\nEnd Sub\n\nSub Vari_Radius_And_Const_Pitch(partDef As PartComponentDefinition)\n    'Creating a 3D Sketch\n    Dim oSketch1 As Sketch3D\n    oSketch1 = partDef.Sketches3D.Add\n\n    Dim equationCurve2 As SketchEquationCurve3D\n    equationCurve2 = oSketch1.SketchEquationCurves3D.Add( _\n        CoordinateSystemTypeEnum.kCylindrical, _\n        \"Radius*t\", \"360*5*t\", \"5*2*t\", 0, 1)\n    ThisApplication.ActiveView.Fit()\nEnd Sub\n\nSub Vari_Radius_And_Vari_Pitch(partDef As PartComponentDefinition)\n    'Creating a 3D Sketch\n    Dim oSketch1 As Sketch3D\n    oSketch1 = partDef.Sketches3D.Add\n\n    Dim equationCurve2 As SketchEquationCurve3D\n    equationCurve2 = oSketch1.SketchEquationCurves3D.Add( _\n        CoordinateSystemTypeEnum.kCylindrical, _\n        \"Radius*t\", \"360*5*t\", \"5*2*t*t\", 0, 1)\n    ThisApplication.ActiveView.Fit()\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Use Autonumbering with save\n                    ", "solution": [], "author": "R.van.den.Bor"},
{"created at": [], "solution Title": "\n                        Re: VBA : detect Matrial or Appearance library\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2015 chancing default units [question]\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: Code required to get Windows user login name\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic to import BOM customization\n                    ", "solution": ["Sub BOM_ColumnCustomizasion_Export ()\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = oAsmDoc.ComponentDefinition\n    \n    Dim oBOM As BOM\n    Set oBOM = oAsmDef.BOM\n    \n    Dim filename As String\n    filename = \"c:\\temp\\BOM_Columns.xml\"\n    Call oBOM.ExportBOMCustomization(filename)\n\n    Beep\nEnd Sub\n\nSub BOM_ColumnCustomizasion_Import ()\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = oAsmDoc.ComponentDefinition\n    \n    Dim oBOM As BOM\n    Set oBOM = oAsmDef.BOM\n    \n    Dim filename As String    'assume the file exists\n    filename = \"c:\\temp\\BOM_Columns.xml\"  \n    Call oBOM.ImportBOMCustomization(filename)\n\n    Beep\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Deletingcustom properties with ilogic\n                    ", "solution": ["'define custom property collection\noCustomPropertySet = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\")\n'look at each property in the collection\nFor Each oCustProp in oCustomPropertySet\n'check for a property name that you don't want to delete\nIf Not oCustProp.name = \"HelloWorld\" Then\n'delete the custom iProperty\noCustProp.Delete \nElse \nEnd If\nNext", "Check also the following ", "thread", ".", "Jon."], "author": "Jon.Dean"},
{"created at": [], "solution Title": "\n                        Re\u00a0: Occurence Name\n                    ", "solution": [], "author": "Alainmorin"},
{"created at": [], "solution Title": "\n                        Re: FindUsingVector() in C#\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Enter command in iLogic\n                    ", "solution": ["Dim vendorProperty As String\nvendorProperty = \"\"\n\nDim vendorList As New ArrayList \nvendorList.add(\"Test1\")\nvendorList.add(\"Test2\")\nvendorList.add(\"Test3\")\n\nWhile vendorProperty = \"\" \n\tvendorProperty = InputListBox(\"Prompt\", vendorList, \"\", Title := \"New Title Here\", ListName := \"List Name Here\")\nEnd While\n\niProperties.Value(\"Project\", \"Vendor\") = vendorProperty\n\n\n''' You could even do something like : \n\n'If iProperties.Value(\"Project\", \"Vendor\") = \"\" Then \n'\tWhile vendorProperty = \"\"\n'\t\tvendorProperty = InputListBox.......\n'\tEnd While\n'\tiProperties.Value(\"Project\", \"Vendor\") = vendorProperty\n'End If\n\n''' that way, if the iProperty Value is already filled out, you won't \n''' even see the dialog to select a new one. \n''' It might not be useful, but I figured I would give an example.\n\n\n"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Inventor VBA Macro - Left justify the title text on a custom table?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: External Rule Directory - Browse for Folder won't show network location\n                    ", "solution": [], "author": "Sergio.Bertino"},
{"created at": [], "solution Title": "\n                        Re: start Inventor via command line\n                    ", "solution": [], "author": "paola.cacciotti"},
{"created at": [], "solution Title": "\n                        Re: Custom variable table\n                    ", "solution": ["Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", "\n\n\n", "Dim", " ", "IMB", " ", "As", " ", "String", " ", "=", " ", "Left", "(", "Parameter", "(", "\"", "IMB.ipt.IMB", "\"", ")", ",", "7", ")", "\n", "SPIDER_QTY", " ", "=", " ", "Parameter", "(", "\"", "BOT SPIDERS.iam.SPIDER_QTY", "\"", ")", "\n", "BCD", " ", "=", " ", "Parameter", "(", "\"", "BOT SPIDERS.iam.BCD", "\"", ")", "\n", "NOTCH", " ", "=", " ", "Parameter", "(", "\"", "IMB.ipt.NOTCH", "\"", ")", " ", "'", " 1 OR 0", "\n\n", "'", " logic start", "\n\n", "Dim", " ", "columnCount", " ", "As", " ", "Integer", "\n", "Dim", " ", "rowCount", " ", "As", " ", "Integer", "\n", "columnCount", " ", "=", " ", "4", "\n", "rowCount", " ", "=", " ", "0", "\n\n", "For", " ", "J", " ", "=", " ", "25", " ", "To", " ", "(", "SPIDER_QTY", "+", "24", ")", "\n    ", "If", " ", "Parameter", "(", "\"", "SPIDER", "\"", " ", "&", " ", "J", " ", "&", " ", "\"", ".ipt.MTG", "\"", ")", " ", "=", " ", "True", " ", "Then", "\n        ", "rowCount", " ", "=", " ", "rowCount", " ", "+", " ", "1", "\n    ", "End", " ", "If", "\n", "Next", "\n\n", "'", " Set the column titles", "\n", "Dim", " ", "titles", "()", " ", "As", " ", "String", "\n", "ReDim", " ", "titles", "(", "columnCount", " ", "-", " ", "1", ")", "\n", "titles", "(", "0", ")", " ", "=", " ", "\"", "SPIDER", "\"", "\n", "titles", "(", "1", ")", " ", "=", " ", "\"", "IMB", "\"", "\n", "titles", "(", "2", ")", " ", "=", " ", "\"", "PROCEDURE", "\"", "\n", "titles", "(", "3", ")", " ", "=", " ", "\"", "'A' DIMENSION", "\"", "\n\n", "Dim", " ", "contents", "()", " ", "As", " ", "String", "\n", "ReDim", " ", "contents", "(", "columnCount", " ", "*", "rowCount", "-", "1", ")", "\n", "Dim", " ", "row", " ", "As", " ", "Integer", "\n", "Dim", " ", "PROCEDURE", " ", "As", " ", "String", "\n\n", "row", " ", "=", " ", "0", "\n", "For", " ", "J", " ", "=", " ", "25", " ", "To", " ", "(", "SPIDER_QTY", "+", "24", ")", "\n    ", "If", " ", "Parameter", "(", "\"", "SPIDER", "\"", " ", "&", " ", "J", " ", "&", " ", "\"", ".ipt.MTG", "\"", ")", " ", "=", " ", "True", " ", "Then", "\n    \n        ", "If", " ", "IMB", " ", "=", " ", "\"", "S-10090", "\"", " ", "Then", "\n            ", "PROCEDURE", " ", "=", " ", "\"", "S-15020-", "\"", "\n        ", "ElseIf", " ", "IMB", " ", "=", " ", "\"", "S-10040", "\"", " ", "Then", "\n            ", "PROCEDURE", " ", "=", " ", "\"", "S-15021-", "\"", "\n        ", "ElseIf", " ", "IMB", " ", "=", " ", "\"", "S-10130", "\"", " ", "Or", " ", "IMB", " ", "=", " ", "\"", "S-10131", "\"", " ", "Then", "\n            ", "PROCEDURE", " ", "=", " ", "\"", "S-15022-", "\"", "\n        ", "Else", "\n            ", "MsgBox", "(", "\"", "IMB ERROR", "\"", ")", "\n        ", "End", " ", "If", "\n    \n        ", "If", " ", "Parameter", "(", "\"", "WELD_BEFORE", "\"", ")", " ", "=", " ", "True", " ", "Then", "\n            ", "PROCEDURE", " ", "=", " ", "PROCEDURE", " ", "&", " ", "\"", "WB", "\"", "\n        ", "ElseIf", " ", "Parameter", "(", "\"", "WELD_AFTER", "\"", ")", " ", "=", " ", "True", " ", "Then", "\n            ", "PROCEDURE", " ", "=", " ", "PROCEDURE", " ", "&", " ", "\"", "WA", "\"", "\n        ", "End", " ", "If", "\n        \n        ", "If", " ", "NOTCH", " ", "=", " ", "1", " ", "Then", "\n            ", "PROCEDURE", " ", "=", " ", "PROCEDURE", " ", "&", " ", "\"", "N", "\"", "\n        ", "End", " ", "If", "\n        \n        ", "AdimIN", " ", "=", " ", "BCD", " ", "/", " ", "2", "\n        ", "AdimMM", " ", "=", " ", "AdimIN", " ", "*", " ", "25.4", "\n        \n        ", "contents", "(", "4", " ", "*", " ", "row", ")", " ", "=", " ", "\"", "F", "\"", " ", "&", " ", "J", "\n        ", "contents", "(", "4", " ", "*", " ", "row", " ", "+", " ", "1", ")", " ", "=", " ", "Parameter", "(", "\"", "IMB.ipt.IMB", "\"", ")", "\n        ", "contents", "(", "4", " ", "*", " ", "row", " ", "+", " ", "2", ")", " ", "=", " ", "PROCEDURE", "\n        ", "contents", "(", "4", " ", "*", " ", "row", " ", "+", " ", "3", ")", " ", "=", " ", "AdimIN", " ", "&", " ", "\"", " [", "\"", " ", "&", " ", "AdimMM", " ", "&", " ", "\"", "]", "\"", "\n        ", "row", " ", "=", " ", "row", " ", "+", " ", "1", "\n    ", "End", " ", "If", "\n", "Next", "\n\n", "Dim", " ", "columnWidths", "()", " ", "As", " ", "Double", "\n", "ReDim", " ", "columnWidths", "(", "columnCount", " ", "-", " ", "1", ")", "\n", "columnWidths", "(", "0", ")", " ", "=", " ", "1.5", "\n", "columnWidths", "(", "1", ")", " ", "=", " ", "2", "\n", "columnWidths", "(", "2", ")", " ", "=", " ", "2", "\n", "columnWidths", "(", "3", ")", " ", "=", " ", "3", "\n\n", "Dim", " ", "oCustomTable", " ", "As", " ", "CustomTable", "\n", "oCustomTable", " ", "=", " ", "oSheet", ".", "CustomTables", ".", "Add", "(", "\"", "IMB WELDING", "\"", ", ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "15", ", ", "15", ")", ",", "columnCount", ", ", "rowCount", ", ", "titles", ", ", "contents", ", ", "columnWidths", ")", "\n"], "author": "S7RM7RPR"},
{"created at": [], "solution Title": "\n                        Re: Registering .NET COM Assembly in VBA\n                    ", "solution": [], "author": "danrullo"},
{"created at": [], "solution Title": "\n                        Re: iLogic Code to Create Gears\n                    ", "solution": [], "author": "Jon.Dean"},
{"created at": [], "solution Title": "\n                        Re: Deleting suppressed parts and assemblies\n                    ", "solution": [], "author": "VinodBalasubram"},
{"created at": [], "solution Title": "\n                        Re: BOM structured view in an txt\n                    ", "solution": ["Public Sub Main()\n    Dim oTopAss As AssemblyDocument\n    oTopAss = ThisApplication.ActiveDocument\n    Dim oEachRefDoc As Document\n\n    Dim CurFileName As String = oTopAss.FullFileName\n    Dim Name As String = System.IO.Path.GetFileName(CurFileName)\n    Dim ShortName As String = System.IO.Path.GetFileNameWithoutExtension(CurFileName)\n\n    liv = 0\n    'aggiunge il nome dell'assieme proncipale alla lista\n    GlobalVariables.bom.Add(ShortName)\n    cont = 1\n\n    'aggiunge alla variabile livelli il valore del livello zero per l'assieme principale\n    GlobalVariables.livelli.Add(liv)\n    liv = 1\n\n    'ciclo sulle parti/assiemi di livello 1\n    For Each oEachRefDoc In oTopAss.ReferencedDocuments\n        Dim oSubAssFullPath As String\n        oSubAssFullPath = oEachRefDoc.FullFileName\n\n        'definisce il nome dell assieme/parte trattata\n        CurFileName = oSubAssFullPath\n        Name = System.IO.Path.GetFileName(CurFileName)\n        ShortName = System.IO.Path.GetFileNameWithoutExtension(CurFileName)\n\n        ' Determine the number of times this document is used in the top assembly.\n        Dim refOccs As ComponentOccurrencesEnumerator\n        refOccs = oTopAss.ComponentDefinition.Occurrences.AllReferencedOccurrences(oEachRefDoc)\n        Dim count = refOccs.Count\n\n        'aggiunge al bom il nome della parte\n        GlobalVariables.bom.Add(ShortName & \" (\" & count & \")\")\n        cont = cont + 1\n\n        'aggiunge alla variabile livelli il valore del livello a cui si trova la parte\n        GlobalVariables.livelli.Add(liv)\n\n        'verifica se la parte \ufffd un assieme e fa partire la funzione ricorsiva\n        If TypeOf oEachRefDoc Is AssemblyDocument Then\n            liv = liv + 1\n            recurseSubAss(oEachRefDoc)\n        End If\n    Next\n\n    'crea il file di testo\n    Dim writer As System.IO.StreamWriter = System.IO.File.CreateText(\"c:\\prova\" & \".txt\")\n    writer.WriteLine(\"bom\")\n    writer.Close()\n\n    For i = 0 To cont - 1\n        'scrive nel file di testo\n        Dim oAppend As System.IO.StreamWriter\n        Dim filename As String = \"c:\\prova\" & \".txt\"\n        oAppend = IO.File.AppendText(filename)\n        oAppend.WriteLine(Space(GlobalVariables.livelli(i) * 3) & GlobalVariables.bom(i))\n        oAppend.Flush()\n        oAppend.Close()\n        'ThisDoc.Launch(oFile)\n    Next\nEnd Sub\n\n\nPublic Sub recurseSubAss(ByVal oParentDoc As AssemblyDocument)\n    Dim oAssDef As AssemblyComponentDefinition\n    oAssDef = oParentDoc.ComponentDefinition\n\n    Dim oEachRefDoc As Document\n    For Each oEachRefDoc In oParentDoc.ReferencedDocuments\n        Dim oSubAssFullPath As String\n        oSubAssFullPath = oEachRefDoc.FullFileName\n\n        'definisce il nome dell assieme/parte trattata\n        Dim CurFileName As String = oSubAssFullPath\n        Dim Name As String = System.IO.Path.GetFileName(CurFileName)\n        Dim ShortName As String = System.IO.Path.GetFileNameWithoutExtension(CurFileName)\n\n        ' Determine the number of times this document is used in the top assembly.\n        Dim refOccs As ComponentOccurrencesEnumerator\n        refOccs = oParentDoc.ComponentDefinition.Occurrences.AllReferencedOccurrences(oEachRefDoc)\n        Dim count = refOccs.Count\n\n        'aggiunge al bom il nome della parte\n        GlobalVariables.bom.Add(ShortName & \" (\" & count & \")\")\n        cont = cont + 1\n\n        'aggiunge alla variabile livelli il valore del livello a cui si trova la parte\n        GlobalVariables.livelli.add(liv)\n        If TypeOf oEachRefDoc Is AssemblyDocument Then\n            liv = liv + 1\n            recurseSubAss(oEachRefDoc)\n        End If\n    Next\n    liv = liv - 1\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Filling out Save As Filename\n                    ", "solution": [], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: I need help to write a rule...\n                    ", "solution": ["doc = ThisDoc.Document\n\n'Iterate through all \"leaf\" occurrences in an assembly i.e. Navigate the whole tree\nFor Each oComp As ComponentOccurrence In doc.ComponentDefinition.Occurrences.AllLeafOccurrences\n\tIf Component.Visible(oComp.Name) = False Or oComp.BOMStructure = BOMStructureEnum.kReferenceBOMStructure\n\t\t\n\t\t'Comment out these next 4 lines if you don't want to be prompted\n\t\tresponse = MessageBox.Show(\"Are you sure you want to delete \" & oComp.Name, \"Delete Component?\", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)\n\t\tIf response = vbYes\n\t\t\toComp.Delete\n\t\tEnd If\n\t\t\n\t\t'And then uncomment the next line\n\t\t'oComp.Delete\n\t\t\n\t\tInventorVb.DocumentUpdate()\n\t\n\tEnd If\t\nNext"], "author": "gavin.b"},
{"created at": [], "solution Title": "\n                        Re: Inventor iLogic - problem with a \"variant\"\n                    ", "solution": [], "author": "pcrawley"},
{"created at": [], "solution Title": "\n                        Re: Looking Rule to delete all Rules in ipt\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: How do you solve a non-closed form equation in iLogic?\n                    ", "solution": ["'", "Goal Seek for Headloss", "'", "Derived from Francis Formula Q=3.33(L-.2*H)*H^1.5", "\n", "HL", "=", "0", " : ", "Q", "=", "0", "'", "set inital value for HL", "\n", "While", " ", "CutpointCFS", "-", "Q", ">", ".", "001", "\n    ", "HL", "=", "HL", "+", ".", "00001", " ", "'", "Headloss is in Feet", "\n    ", "Q", "=", "3.33", "*", "(", "TankWidthDuctSide", "/", "12", "-", ".", "2", "*", "HL", ")", "*", "HL", "^", "1.5", "\n", "End", " ", "While"], "author": "josephcooley"},
{"created at": [], "solution Title": "\n                        Re: Dockable windows - show and hide\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic Round Function\n                    ", "solution": [], "author": "mark.hetheringt"},
{"created at": [], "solution Title": "\n                        Re: Length of non-frame generator part\n                    ", "solution": [], "author": "beardrafting"},
{"created at": [], "solution Title": "\n                        Re: Minitoolbar hide apply\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: What type of fitting should this be authored as?\n                    ", "solution": [], "author": "renderwerks"},
{"created at": [], "solution Title": "\n                        Re: Save Data from range of Excel file in idw property (by ilogc)\n                    ", "solution": ["For i=1 To 3\n\tiProperties.Value(\"Custom\", i)=GoExcel.CellValue(ThisDoc.WorkspacePath() & \"\\Your_file.xls\", \"Sheet1\", \"A\" & i)\nNext"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Use property value to define save directory\n                    ", "solution": ["strFolder", " ", "=", "\"J", ":\\Clients\\", "\"", " ", "&", " ", "propertyValue", " ", "&", " ", "\"", "\\Drawings\\", "\"", " ", "&", " ", "ThisDoc", ".", "FileName", " ", "(", "False", ")"], "author": "DRLTKSE"},
{"created at": [], "solution Title": "\n                        Re: Silence the save copy as dialog\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Inventor C# API does not detect property FaceCollection.Item\n                    ", "solution": [], "author": "phandyisp"},
{"created at": [], "solution Title": "\n                        Re: Redefine Work Axis via iLogic\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: User Parameters and Dimension Constraints\n                    ", "solution": ["Public Sub SetDimensionExpression()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    ' Create a new sketch on the x-y work plane.\n    Dim sk As PlanarSketch\n    Set sk = partDoc.ComponentDefinition.Sketches.Add( _\n                      partDoc.ComponentDefinition.WorkPlanes.Item(3))\n            \n    ' Draw a line.\n    Dim skLine As SketchLine\n    Set skLine = sk.SketchLines.AddByTwoPoints(tg.CreatePoint2d(0, 0), _\n                                               tg.CreatePoint2d(5, 3))\n                                               \n    ' Add a dimension.\n    Dim dimConstraint As DimensionConstraint\n    Set dimConstraint = sk.DimensionConstraints.AddTwoPointDistance(skLine.StartSketchPoint, _\n                                                                    skLine.EndSketchPoint, _\n                                                                    kAlignedDim, tg.CreatePoint2d(2.5, 3))\n                                                                    \n    ' Change the expression of the parameter that's drivig the dimension.\n    ' *** This assumes there is an existing parameter named \"Length\". ***\n    dimConstraint.Parameter.Expression = \"Length\"\n    \n    ' Update the document to force a compute.\n    partDoc.Update\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Exporting surfacebody to STL (solid or not)\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Embossed text with iLogic\n                    ", "solution": ["Option Explicit\n\nPublic Sub EmbossedText()\n    ' Create a new clsSelect object.\n    Dim oSelect As New clsSelect\n    \n    ' Set a reference to the part component definition.\n    ' This assumes that a part document is active.\n    Dim oCompDef As PartComponentDefinition\n    Set oCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n    ' Call the pick method of the clsSelect object and set\n    ' the filter to pick any face.\n    Dim oFace As Face\n    Set oFace = oSelect.Pick(kPartFaceFilter)\n    \n    ' Check to make sure an object was selected.\n    If Not oFace Is Nothing Then\n        Dim oSketch As PlanarSketch\n        Set oSketch = oCompDef.Sketches.Add(oFace, True)\n        oSketch.Name = \"Embossed text\"\n        \n    ' Create text with simple string as input.  Since this doesn't use\n    ' any text overrides, it will default to the active text style.\n    Dim sText As String\n    Dim oTextBox As TextBox\n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n    \n    ' Simple single line text.\n    sText = \"Here is the last and final line of text.\"\n    Set oTextBox = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(oSketch.OriginPointGeometry.X, _\n                                                oSketch.OriginPointGeometry.Y), sText)\n    With oTextBox\n        .VerticalJustification = kAlignTextMiddle\n        .HorizontalJustification = kAlignTextCenter\n    End With\n    \n    ' Add the text box to an object collection\n    Dim oPaths As ObjectCollection\n    Set oPaths = ThisApplication.TransientObjects.CreateObjectCollection\n    oPaths.Add oTextBox\n    \n    ' Create a profile. Calling the AddForSolid method without any\n    ' arguments will result in a profile containing all possible\n    ' paths in the sketch. By passing in the text box, the profile\n    ' is restricted to the input text path.\n    Dim oProfile As Profile\n    Set oProfile = oSketch.Profiles.AddForSolid(False, oPaths)\n\n    ' Extrude the text.\n    Dim oExtrudeDef As ExtrudeDefinition\n    Set oExtrudeDef = oCompDef.Features.ExtrudeFeatures.CreateExtrudeDefinition(oProfile, kCutOperation)\n    Call oExtrudeDef.SetDistanceExtent(0.25, kNegativeExtentDirection)\n    Dim oExtrude As ExtrudeFeature\n    Set oExtrude = oCompDef.Features.ExtrudeFeatures.Add(oExtrudeDef)\nEnd If\nEnd Sub", "Option Explicit\n\n' Declare the event objects\nPrivate WithEvents oInteractEvents As InteractionEvents\nPrivate WithEvents oSelectEvents As SelectEvents\n\n' Declare a flag that's used to determine when selection stops.\nPrivate bStillSelecting As Boolean\n\nPublic Function Pick(filter As SelectionFilterEnum) As Object\n    ' Initialize flag.\n    bStillSelecting = True\n\n    ' Create an InteractionEvents object.\n    Set oInteractEvents = ThisApplication.CommandManager.CreateInteractionEvents\n\n    ' Ensure interaction is enabled.\n    oInteractEvents.InteractionDisabled = False\n\n    ' Set a reference to the select events.\n    Set oSelectEvents = oInteractEvents.SelectEvents\n\n    ' Set the filter using the value passed in.\n    oSelectEvents.AddSelectionFilter filter\n\n    ' Start the InteractionEvents object.\n    oInteractEvents.Start\n\n    ' Loop until a selection is made.\n    Do While bStillSelecting\n        ThisApplication.UserInterfaceManager.DoEvents\n    Loop\n\n    ' Get the selected item. If more than one thing was selected,\n    ' just get the first item and ignore the rest.\n    Dim oSelectedEnts As ObjectsEnumerator\n    Set oSelectedEnts = oSelectEvents.SelectedEntities\n    If oSelectedEnts.Count > 0 Then\n        Set Pick = oSelectedEnts.Item(1)\n    Else\n        Set Pick = Nothing\n    End If\n\n    ' Stop the InteractionEvents object.\n    oInteractEvents.Stop\n\n    ' Clean up.\n    Set oSelectEvents = Nothing\n    Set oInteractEvents = Nothing\nEnd Function\n\nPrivate Sub oInteractEvents_OnTerminate()\n    ' Set the flag to indicate we're done.\n    bStillSelecting = False\nEnd Sub\n\nPrivate Sub oSelectEvents_OnSelect(ByVal JustSelectedEntities As ObjectsEnumerator, ByVal SelectionDevice As SelectionDeviceEnum, ByVal ModelPosition As Point, ByVal ViewPosition As Point2d, ByVal View As View)\n    ' Set the flag to indicate we're done.\n    bStillSelecting = False\nEnd Sub"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Problem with View.SaveAsBitmap\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Add parameter to drawing file through ilogic\n                    ", "solution": ["Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "Dim", " ", "oDrawParams", " ", "As", " ", "UserParameters", " ", "=", " ", "oDrawDoc", ".", "Parameters", ".", "UserParameters", "\n\n", "Dim", " ", "TestParam", " ", "As", " ", "UserParameter", " ", "=", " ", "oDrawParams", ".", "AddByValue", "(", "\"", "TestParam", "\"", " , ", "\"", "InitialValue", "\"", ", ", "UnitsTypeEnum", ".", "kTextUnits", ")"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: iLogic Table formatting error\n                    ", "solution": [], "author": "S7RM7RPR"},
{"created at": [], "solution Title": "\n                        Re: is Parameter Thickness appearing in every Inventor Language version?\n                    ", "solution": ["Dim oDoc As Document\noDoc = ThisApplication.ActiveDocument\nDim oCompDef As SheetMetalComponentDefinition\noCompDef = oDoc.ComponentDefinition\nIf oCompDef.UseSheetMetalStyleThickness Then Thck=oCompDef.Activesheetmetalstyle.Thickness"], "author": "eljoseppo"},
{"created at": [], "solution Title": "\n                        Re: Using property values to define save directory\n                    ", "solution": ["Option Explicit\n\n'active drawing document\nDim oDoc As Inventor.Document = ThisDoc.Document\n\nDim propertyName As String = \"Klantnaam\"\nDim oProp As Inventor.Property\nDim propertyValue As String\n\n'define the custom property \"Klantnaam\"\nDim oPropSet As PropertySet _\n\t= oDoc.PropertySets.Item(\"Inventor User Defined Properties\")\nTry\n\toProp = oPropSet.Item(propertyName)\n\tpropertyValue = oprop.Value\nCatch\n\t' Assume error means not found\n\toProp = oPropSet.Add(\"null\", propertyName)\nEnd Try\nIf oProp.Value = \"null\" Then\n    propertyValue = InputBox(\"Voer klantnaam in : \", \"Klantnaam\", \"\")\n    oProp.Value = propertyValue\nEnd If\n\n'folder path\nDim strFolder As String\n'strFolder =\"J:\\Contacten\\Klanten\\\" & propertyValue & \"\\Tekeningen\\\" & ThisDoc.FileName (False)\nstrFolder = \"c:\\temp\\Klanten\\\" & propertyValue & \"\\Tekeningen\\\" \n'MsgBox(strfolder)\n\nIf Not System.IO.Directory.Exists(strfolder) Then\n  \t'create folder\n     System.IO.Directory.CreateDirectory(strfolder)\n'\t MsgBox(\"folder was created\")\nElse\n\t\nEnd If\n\nDim fileName As String = strFolder & ThisDoc.FileName (False) & \".pdf\"\n'MsgBox(fileName)\n\n'save pdf\noDoc.SaveAs(fileName, True)\n\nBeep\n\n\n' Get the DWG translator Add-In.\nDim DWGAddIn As TranslatorAddIn _\n\t= ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\")\n'create a context object\nDim oContext As TranslationContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n' Create a NameValueMap object\nDim oOptions As NameValueMap = ThisApplication.TransientObjects.CreateNameValueMap\n' Create a DataMedium object\nDim oDataMedium As DataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n' Check whether the translator has 'SaveCopyAs' options\nIf DWGAddIn.HasSaveCopyAsOptions(oDoc, oContext, oOptions) Then\n\tDim strIniFile As String = \"C:\\temp\\acad.ini\"\t\n\t' Create the name-value that specifies the ini file to use.\n\toOptions.Value(\"Export_Acad_IniFile\") = strIniFile\nEnd If\n\n'Set the destination file name\nfileName  = ThisDoc.FileName(False) & \" -Rev \" &  _\n\tiProperties.Value(\"Project\", \"Revision Number\") & \" Section cut \"\n\noDataMedium.FileName = strFolder & filename & \".dwg\"\n'MsgBox(fileName)\n\n'Publish dwg document.\nCall DWGAddIn.SaveCopyAs(oDoc, oContext, oOptions, oDataMedium)\n\nBeep"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Betreff: OrdinateDimensionSets.Item\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Flyout menu\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: OnSaveDocument : save copy\n                    ", "solution": [], "author": "Raminasrl"},
{"created at": [], "solution Title": "\n                        Re: ilogic code to rename selected assembly browser nodes\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: How to attach sketched symbol leader to view in drawing using inventor API?\n                    ", "solution": ["Public Sub InsertSketchedSymboSample()\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n\n    ' Obtain a sketched symbol definition.\n    Dim oSketchedSymbolDef As SketchedSymbolDefinition\n    Set oSketchedSymbolDef = oDrawDoc.SketchedSymbolDefinitions.Item(1)\n\n    Dim oSheet As Sheet\n    Set oSheet = oDrawDoc.ActiveSheet\n    \n    Dim oDrawView As DrawingView\n    Set oDrawView = oSheet.DrawingViews(1)\n    \n    Dim oCurve As DrawingCurve\n    Set oCurve = oDrawView.DrawingCurves.Item(1)\n    \n    Dim oGeoIntent As GeometryIntent\n    ' Get the attached geometry for the sketched symbol leader\n    If oCurve.CurveType = kCircleCurve Or oCurve.CurveType = kEllipseFullCurve Then\n        Set oGeoIntent = oSheet.CreateGeometryIntent(oCurve, kCenterPointIntent)\n    Else\n        Set oGeoIntent = oSheet.CreateGeometryIntent(oCurve, kStartPointIntent)\n    End If\n    \n    Dim oTG As TransientGeometry\n    Set oTG = ThisApplication.TransientGeometry\n\n    Dim oLeaderPoints As ObjectCollection\n    Set oLeaderPoints = ThisApplication.TransientObjects.CreateObjectCollection\n    oLeaderPoints.Add oTG.CreatePoint2d(15, 15)\n    oLeaderPoints.Add oTG.CreatePoint2d(20, 16)\n    oLeaderPoints.Add oGeoIntent\n    \n    ' Create sketched symbol\n    Dim oSketchedSymbol As SketchedSymbol\n    Set oSketchedSymbol = oSheet.SketchedSymbols.AddWithLeader(oSketchedSymbolDef, oLeaderPoints, (3.14159 / 4))\nEnd Sub\n"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic Setting LOD Causing Error When Opening BOM\n                    ", "solution": [], "author": "kwalker1"},
{"created at": [], "solution Title": "\n                        Re: How to make iFeatures appear in the Bill of Materials\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Corrupt dwf when inventor is visible\n                    ", "solution": [], "author": "bjorn.nordle"},
{"created at": [], "solution Title": "\n                        Re: Linked Part Causing Inventor To Crash\n                    ", "solution": [], "author": "ASchlaack"},
{"created at": [], "solution Title": "\n                        Re: iTrigger launching an iLogic Form in the User Command window\n                    ", "solution": [], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: EXPORTING I-PROPERTIES TO AN EXCEL SPREADSHEET\n                    ", "solution": [], "author": "WilliamMothersh"},
{"created at": [], "solution Title": "\n                        Re: Rule to create Custom iProperty as function\n                    ", "solution": ["iProperties.Value(\"Custom\", \"C\") = \"Example Text\" ", "&", " PARAMETER1"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Find Component Location in assembly\n                    ", "solution": ["Option Explicit\n\nPublic Sub FindOccurrences()\n    ' Get the active assembly.\n    Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n\n    ' Get the definition of the assembly.\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = oAsmDoc.ComponentDefinition\n\n    ' Get the document to find occurrences for. Since it\u2019s assumed\n    ' there is at least one occurrence in the assembly that\n    ' references this document, it will already be open since it\n    ' was opened when the assembly was opened.\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.Documents.ItemByName(\"K:\\Component Library\\11806\\pt11806.ipt\") 'Replace with path to component you're looking for.\n\n    ' Get the occurrences that represent this document.\n    Dim oOccs As ComponentOccurrencesEnumerator\n    Set oOccs = oAsmDef.Occurrences.AllReferencedOccurrences(oDoc)\n\n    ' Print the occurrences to the Immediate window.\n    Dim oOcc As ComponentOccurrence\n    For Each oOcc In oOccs\n        Dim oMassProps As MassProperties\n        Set oMassProps = oOcc.MassProperties\n        MsgBox oOcc.Name & \" X: \" & oOcc.MassProperties.CenterOfMass.X & \" Y: \" & oOcc.MassProperties.CenterOfMass.Y & \" Z: \" & oOcc.MassProperties.CenterOfMass.Z\n    Next\nEnd Sub"], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: Seeking information or documentation on iLogic add-in\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: iLogic Form to Populate Titleblock on Multiple Sheets\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Problem solved disregard post   see .rgs post\n                    ", "solution": [], "author": "Braxton08"},
{"created at": [], "solution Title": "\n                        Re: Limiting addin to specific multiple releases\n                    ", "solution": ["<SupportedSoftwareVersionGreaterThan>17..</SupportedSoftwareVersionGreaterThan>", "<SupportedSoftwareVersionLessThan>20..</SupportedSoftwareLessGreaterThan>"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Connecting a ribbon button control to a SUB in vb.net addin.\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: LevelOfDetailRepresentation\n                    ", "solution": ["Public Sub AssemblyCount()\n    ' Set reference to active document.\n    ' This assumes the active document is an assembly\n    Dim oDoc As Inventor.AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    ' Get assembly component definition\n    Dim oCompDef As Inventor.ComponentDefinition\n    Set oCompDef = oDoc.ComponentDefinition\n\n    Dim sMsg As String\n    Dim iLeafNodes As Long\n    Dim iSubAssemblies As Long\n    \n    ' Get all occurrences from component definition for Assembly document\n    Dim oCompOcc As ComponentOccurrence\n    \n    Debug.Print \"--- Assembly: \" & oDoc.DisplayName\n    For Each oCompOcc In oCompDef.Occurrences\n        If Not oCompOcc.IsSubstituteOccurrence Then\n            If oCompOcc.Suppressed Then\n                Debug.Print \"suppressed:  \" & oCompOcc.Name\n                iLeafNodes = iLeafNodes + 1\n            Else\n                ' Check if it's child occurrence (leaf node)\n                If oCompOcc.SubOccurrences.Count = 0 Then\n                    'empty SubAssembly - do nothing\n                Else\n                    iSubAssemblies = iSubAssemblies + 1\n                    Call processAllSubOcc(oCompOcc, _\n                                        sMsg, _\n                                        iLeafNodes, _\n                                        iSubAssemblies) ' subassembly\n                End If\n            End If\n        End If\n    Next\n    \n    Debug.Print\n    Debug.Print \"No of suppressed nodes : \" + CStr(iLeafNodes)\n    Debug.Print \"No of sub assemblies   : \" + CStr(iSubAssemblies)\nEnd Sub\n\n' This function is called for processing sub assembly.  It is called recursively\n' to iterate through the entire assembly tree.\nPrivate Sub processAllSubOcc(ByVal oCompOcc As ComponentOccurrence, _\n                             ByRef sMsg As String, _\n                             ByRef iLeafNodes As Long, _\n                             ByRef iSubAssemblies As Long)\n    \n    Dim oSubCompOcc As ComponentOccurrence\n    Debug.Print \"--- SubAssembly: \" & oCompOcc.Name\n    \n    For Each oSubCompOcc In oCompOcc.SubOccurrences\n        If Not oSubCompOcc.IsSubstituteOccurrence Then\n            If oSubCompOcc.Suppressed Then\n                Debug.Print \"suppressed:  \" & oSubCompOcc.Name\n                iLeafNodes = iLeafNodes + 1\n            Else\n                ' Check if it's child occurrence (leaf node)\n                If oSubCompOcc.SubOccurrences.Count = 0 Then\n                    'empty SubAssembly - do nothing\n                Else\n                    sMsg = sMsg + oSubCompOcc.Name + vbCr\n                    iSubAssemblies = iSubAssemblies + 1\n        \n                    Call processAllSubOcc(oSubCompOcc, _\n                                          sMsg, _\n                                          iLeafNodes, _\n                                          iSubAssemblies)\n                End If\n            End If\n        End If\n    Next\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: flat pattern generation from assembly\n                    ", "solution": ["'define the active document as an assembly file\nDim oAsmDoc As AssemblyDocument\n\noAsmDoc = ThisApplication.ActiveDocument\n\noAsmName = Left(oAsmDoc.DisplayName, Len(oAsmDoc.DisplayName) -4)\n\n\n\n'check that the active document is an assembly file\nIf ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\n\n\tMessageBox.Show(\"Please run this rule from the assembly file.\", \"iLogic\")\n\t\n\tExit Sub\n\t\nEnd If\n\n'get user input\nRUsure = MessageBox.Show ( _\n\"This will create a DXF file for all of the asembly components that are sheet metal.\" _\n& vbLf & \"This rule expects that the part file is saved.\" _\n& vbLf & \" \" _\n& vbLf & \"Are you sure you want to create DXF for all of the assembly components?\" _\n& vbLf & \"This could take a while.\", \"iLogic  - Batch Output DXFs \",MessageBoxButtons.YesNo)\n\nIf RUsure = vbNo Then\n\n\tReturn\n\t\n\tElse\n\t\nEnd If\n\noPath = ThisDoc.Path\n\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\noContext = ThisApplication.TransientObjects.CreateTranslationContext\n\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n'get DXF target folder path\noFolder = oPath & \"\\\" & oAsmName & \" DXF Files\"\n\n'Check for the DXF folder and create it if it does not exist\nIf Not System.IO.Directory.Exists(oFolder) Then\n\n    System.IO.Directory.CreateDirectory(oFolder)\n\t\nEnd If\n'- - - - - - - - - - - - -\n\n'- - - - - - - - - - - - -Component  - - - - - - - - - - - -\n'look at the files referenced by the assembly\nDim oRefDocs As DocumentsEnumerator\n\noRefDocs = oAsmDoc.AllReferencedDocuments\n\nDim oRefDoc As Document\n\n\n'work the the drawing files for the referenced models\n'this expects that the model has been saved\n\t\tFor Each oRefDoc In oRefDocs\n\t\t\t\n\t\t\tiptPathName = Left(oRefDoc.FullDocumentName, Len(oRefDoc.FullDocumentName) - 3) & \"ipt\"\n\n    \t\t'check that model is saved\n\t\t\tIf(System.IO.File.Exists(iptPathName)) Then\n\t\t\t\n                Dim oDrawDoc As PartDocument\n\t\t\t\t\n                oDrawDoc = ThisApplication.Documents.Open(iptPathName, True)\n\t\t\t\t\n            \toFileName = Left(oRefDoc.DisplayName, Len(oRefDoc.DisplayName))\n\t\t\t\t\n\t\t\t\tTry\n\t\t\t\t\n                \t'Set the DXF target file name\n                \toDataMedium.FileName = oFolder & \"\\\" & oFileName & \".dxf\"\n\t\t\t\t\n\t\t\t\t\tDim oCompDef As SheetMetalComponentDefinition\n\t\t\t\t\n\t\t\t\t\toCompDef = oDrawDoc.ComponentDefinition\n\t\t\t\t\t\n\t\t\t\t\tIf oCompDef.HasFlatPattern = False Then\n\t\t\t\t\t\n\t\t\t\t\t\toCompDef.Unfold\n\t\t\t\t\t\t\n\t\t\t\t\tElse\n\t\t\t\t\t\n   \t\t\t\t\t\toCompDef.FlatPattern.Edit\n\t\t\t\t\t\t\n\t\t\t\t\tEnd If\n\n\t\t\t\t\tDim sOut As String\n\t\t\t\t\n\t\t\t\t\tsOut = \"FLAT PATTERN DXF?AcadVersion=2004&OuterProfileLayer=IV_OUTER_PROFILE\"\n\n\t\t\t\t\t\n\t\t\t\t\toCompDef.DataIO.WriteDataToFile( sOut, oDataMedium.FileName)\n\t\t\t\t\n\t\t\t\t\t'just for check its works coretcly\n\t\t\t\t\t'i=MessageBox.Show(oDataMedium.FileName, \"Title\",MessageBoxButtons.OKCancel)\n\t\t\t\t\t\n\t\t\t\t\t'MessageBox.Show(i,\"title\",MessageBoxButtons.OK)\n\t\t\t\t\n\t\t\t\t\t'If i=2 Then\n\t\t\t\t\n\t\t\t\t\t\t'Exit Sub\n\t\t\t\t\n\t\t\t\t\t'End If\n\n\t\t\t\t\toCompDef.FlatPattern.ExitEdit\n\t\t\t\t\n\t\t\t\tCatch\n\t\t\t\t\n\t\t\t\tEnd Try\n                \n\t\t\t\toDrawDoc.Close\n\t\t\t\t\n\t\t\tElse\n\t\t\t\t\t\n\t\t\tEnd If\n\t\t\t\n\t\tNext"], "author": "Tygrysek1220"},
{"created at": [], "solution Title": "\n                        Re: Select LevelOfDetailRepresentation by user\n                    ", "solution": ["\u00a0\u00a0\u00a0\u00a0'Sample of how to call function", "    Sub", "\u00a0Main", "()", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "Dim", "\u00a0lod\u00a0", "As", "\u00a0LevelOfDetailRepresentation\u00a0=\u00a0", "Nothing", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lod\u00a0=\u00a0GetSelectedLevelOfDetail", "(", "True", ")", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "If", "\u00a0", "Not", "\u00a0lod\u00a0", "Is", "\u00a0", "Nothing", "\u00a0", "Then", "\u00a0MessageBox.Show", "(", "lod.Name", ")", "\n\u00a0\u00a0\u00a0\u00a0", "End", "\u00a0", "Sub", "\n \n \n\u00a0\u00a0\u00a0\u00a0", "'Get\u00a0Current\u00a0Selected\u00a0LevelofDetail,\u00a0set\u00a0customOnly\u00a0to\u00a0True\u00a0to\u00a0only\u00a0return\u00a0custom\u00a0LODs", "\n\u00a0\u00a0\u00a0\u00a0", "Function", "\u00a0GetSelectedLevelOfDetail", "(", "customOnly\u00a0", "As", "\u00a0", "Boolean", ")", "\u00a0", "As", "\u00a0LevelOfDetailRepresentation\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "'Get\u00a0the\u00a0Document\u00a0Selection\u00a0Set", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "Dim", "\u00a0ss\u00a0", "As", "\u00a0SelectSet\u00a0=\u00a0ThisDoc.Document.SelectSet\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "Dim", "\u00a0selectedLOD\u00a0", "As", "\u00a0LevelOfDetailRepresentation\u00a0=\u00a0", "Nothing", "\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "'Check\u00a0that\u00a0only\u00a0one\u00a0item\u00a0is\u00a0selected", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "If", "\u00a0ss.Count\u00a0=\u00a01\u00a0", "Then", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "'Check\u00a0to\u00a0see\u00a0if\u00a0it's\u00a0a\u00a0level\u00a0of\u00a0detail\u00a0item\t", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "If", "\u00a0ss", "(", "1", ")", ".Type\u00a0=\u00a0ObjectTypeEnum.kLevelOfDetailRepresentationObject\u00a0", "Then", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "Dim", "\u00a0lod\u00a0", "As", "\u00a0LevelOfDetailRepresentation\u00a0=\u00a0ss", "(", "1", ")", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "If", "\u00a0customOnly\u00a0", "Then", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "'Set\u00a0only\u00a0if\u00a0its\u00a0a\u00a0custom\u00a0level\u00a0detail", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "If", "\u00a0", "(", "lod.LevelOfDetail\u00a0=\u00a0LevelOfDetailEnum.kCustomLevelOfDetail", ")", "\u00a0", "Then", "\u00a0selectedLOD\u00a0=\u00a0lod\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "Else", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "'Set\u00a0if\u00a0any\u00a0kind\u00a0will\u00a0do", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0selectedLOD\u00a0=\u00a0lod\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "End", "\u00a0", "If", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "End", "\u00a0", "If", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "End", "\u00a0", "If", "\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "Return", "\u00a0selectedLOD\n\u00a0\u00a0\u00a0\u00a0", "End", "\u00a0", "Function"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Using patterns and iLogix\n                    ", "solution": ["Dim", " ", "asmDef", " ", "=", " ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", "\n", "Dim", " ", "compPattern", " ", "As", " ", "OccurrencePattern", "\n", "Dim", " ", "compObj", " ", "As", " ", "ComponentOccurrence", "\n\n", "compObj", " ", "=", " ", "asmDef", ".", "Occurrences", ".", "ItemByName", "(", "\"ElementName", "\"", ")", "\n", "compPattern", " ", "=", " ", "asmDef", ".", "OccurrencePatterns", "(", "\"PatternName", "\"", ")", "\n\n", "If", " ", "Not", " ", "((", "compObj", " ", "Is", " ", "Nothing", ")", " ", "Or", " ", "(", "compPattern", " ", "Is", " ", "Nothing", "))", " ", "Then", "\n    ", "Dim", " ", "newCol", " ", "As", " ", "ObjectCollection", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateObjectCollection", "()", "\n    ", "For", " ", "Each", " ", "obj", " ", "As", " ", "Object", " ", "In", " ", "compPattern", ".", "ParentComponents", "\n        ", "If", " ", "Not", " ", "obj", " ", "Is", " ", "compObj", " ", "Then", " ", "newCol", ".", "Add", "(", "obj", ")", "\n    ", "Next", "\n    ", "newCol", ".", "Add", "(", "compObj", ")", "\n    ", "compPattern", ".", "ParentComponents", " ", "=", " ", "newCol", "\n", "End", " ", "If", "Dim", " ", "asmDef", " ", "=", " ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", "\n", "Dim", " ", "compPattern", " ", "As", " ", "OccurrencePattern", "\n", "Dim", " ", "compObj", " ", "As", " ", "ComponentOccurrence", "\n\n", "compObj", " ", "=", " ", "asmDef", ".", "Occurrences", ".", "ItemByName", "(", "\"ElementName", "\"", ")", "\n", "compPattern", " ", "=", " ", "asmDef", ".", "OccurrencePatterns", "(", "\"PatternName", "\"", ")", "\n\n", "If", " ", "Not", " ", "((", "compObj", " ", "Is", " ", "Nothing", ")", " ", "Or", " ", "(", "compPattern", " ", "Is", " ", "Nothing", "))", " ", "Then", "\n    ", "Dim", " ", "newCol", " ", "As", " ", "ObjectCollection", " ", "=", " ", "ThisApplication", ".", "TransientObjects", ".", "CreateObjectCollection", "()", "    Dim inPattern As Boolean = False\n    ", "For", " ", "Each", " ", "obj", " ", "As", " ", "Object", " ", "In", " ", "compPattern", ".", "ParentComponents", "\n        ", "If", " ", "obj", " ", "Is", " ", "compObj", " ", "Then", "            inPattern = True", "            Exit For", "        Else", "            newCol", ".", "Add", "(", "obj", ")", "        End If\n    ", "Next", "    If Not inPattern Then\n        ", "newCol", ".", "Add", "(", "compObj", ")", "\n        ", "compPattern", ".", "ParentComponents", " ", "=", " ", "newCol", "    End If\n", "End", " ", "If"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: iLogic Revision Table\n                    ", "solution": ["Option Explicit\nSub CreateRevTable()\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n \n    Dim oRTBs As RevisionTables\n    Set oRTBs = oDrawDoc.ActiveSheet.RevisionTables\n \n    Dim oLocation As Point2d\n    Set oLocation = ThisApplication.TransientGeometry.CreatePoint2d(10, 10)\n \n    'add a new table\n    Dim oRTB As RevisionTable\n    Set oRTB = oRTBs.Add2(oLocation, True, True, True, \"A\")\nEnd Sub"], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: Hide break lines in ISO view\n                    ", "solution": ["Private Sub HideBreakLinesInIso(ByRef oDrawingView As DrawingView)\n\n    Dim oDrawingCurves As DrawingCurvesEnumerator\n    Dim oDrawingCurve As DrawingCurve\n    Dim oDrawingCurveSegment As DrawingCurveSegment\n    Dim oBreakFace As Face\n    Dim oCreatedByFeature As PartFeature\n    Dim oBreakCurves As ObjectCollection\n    \n    Set oBreakCurves = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    Set oDrawingCurves = oDrawingView.DrawingCurves\n    \n    For Each oDrawingCurve In oDrawingCurves\n    \n        If TypeName(oDrawingCurve.ModelGeometry) = \"Face\" Then\n            Set oBreakFace = oDrawingCurve.ModelGeometry\n            \n            On Error Resume Next 'Turn error checking off\n            \n            Set oCreatedByFeature = oBreakFace.CreatedByFeature 'Throws error if no createdbyfeature\n\n            On Error GoTo 0 'Turn error checking on\n            \n            Select Case Err\n                Case 0 'No error occured\n                    If TypeName(oCreatedByFeature) = \"ReferenceFeature\" Then 'Edge belongs to the reference plane used in the break operation\n                        For Each oDrawingCurveSegment In oDrawingCurve.Segments\n                            oDrawingCurveSegment.Visible = False\n                        Next\n                    End If\n                Case -2147467259 'Method 'CreatedByFeature' of object 'Face' failed\n                    'Unhandled\n                Case Else\n                    Debug.Print \"ERROR: \" & Err.Number & \" \" & Err.Description\n                    Debug.Assert False\n            End Select\n\n        End If\n    \n    Next\n\nEnd Sub"], "author": "Payne530"},
{"created at": [], "solution Title": "\n                        Betreff: Porting GoExcel command from VBA to VB.Net add-in.\n                    ", "solution": [], "author": "dkatz"},
{"created at": [], "solution Title": "\n                        Betreff: VBA editor won't load/work correctly (everything is greyed out) invento\n                    ", "solution": [], "author": "RDBFIKE"},
{"created at": [], "solution Title": "\n                        Re: Exporting Parameters into Drawings\n                    ", "solution": ["IfActiveSheet.Sheet.DrawingViews.Count > 0 ThenSyntaxEditor Code Snippet", "    modelName", " ", "=", " ", "IO", ".", "Path", ".", "GetFileName", "(", "ThisDrawing", ".", "ModelDocument", ".", "FullFileName", ")", "    dwgParam", " ", "=", " ", "Parameter", "(", "modelName", ", ", "\"", "d0", "\"", ")", "    iProperties.Value(\"Project\", \"Part Number\") = dwgParam", "    'set more iproperties ", "End If"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: UnIncluding A Skeleton Frame in an idw\n                    ", "solution": ["Sub Main()\n  Dim dv As DrawingView\n  dv = ThisApplication.ActiveDocument.SelectSet(1)\n  \n  Dim doc As AssemblyDocument\n  doc = dv.ReferencedDocumentDescriptor.ReferencedDocument\n  \n  Dim tro As TransientObjects\n  tro = ThisApplication.TransientObjects\n  \n  Dim coll As ObjectCollection\n  coll = tro.CreateObjectCollection\n  \n  Call CollectAllSurfaces(doc.ComponentDefinition.Occurrences, coll)\n  \n  Dim wsp As WorkSurfaceProxy\n  For Each wsp In coll\n    Call dv.SetIncludeStatus(wsp, False)\n  Next\nEnd Sub\n\nSub CollectAllSurfaces( _\noccs As ComponentOccurrences, coll As ObjectCollection)\n  Dim occ As ComponentOccurrence\n  For Each occ In occs\n    If occ.SubOccurrences.count > 0 Then\n      Call CollectAllSurfaces(occ.SubOccurrences, coll)\n    End If\n    \n    If TypeOf occ.Definition Is PartComponentDefinition Then\n      Dim pcd As PartComponentDefinition\n      pcd = occ.Definition\n      \n      Dim ws As WorkSurface\n      For Each ws In pcd.WorkSurfaces\n        Dim wsp As WorkSurfaceProxy\n        Call occ.CreateGeometryProxy(ws, wsp)\n        Call coll.Add(wsp)\n      Next\n    End If\n  Next\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Create circular pattern feature\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Turn off table title\n                    ", "solution": ["ThisDoc", ".", "Document", ".", "ActiveSheet", ".", "CustomTables", ".", "Item", "(", "4", ")", ".", "ShowTitle", " ", "=", " ", "False"], "author": "S7RM7RPR"},
{"created at": [], "solution Title": "\n                        Re: Get file from Vault?\n                    ", "solution": ["VltService = SetupVaultService(server)\nVltService.LogIn(vault, user, pass) or LogInWindows(vault)\nDocService = VltService.GetDocService()\nFileInfo = DocService.GetFileInfo(\"$/root/project/folder/abcd.ipt\")\nDocService.Download(FileInfo.LatestVersionId, \"c:\\Temp\\abcd.ipt\")"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Get the parent of a feature created from a patterned occurance\n                    ", "solution": ["Public Sub FindPatternFeature()\n    ' Get the active part.\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    ' Have a face selected.\n    Dim selectedFace As Face\n    Set selectedFace = ThisApplication.CommandManager.Pick(kPartFaceFilter, \"Pick the face in the pattern.\")\n    \n    ' Get the feature that created this feature, which should be a circular pattern.\n    Dim circPattern As CircularPatternFeature\n    Set circPattern = selectedFace.CreatedByFeature\n    \n    ' Determine which pattern element this face is part of.\n    Dim element As FeaturePatternElement\n    Dim foundElem As FeaturePatternElement\n    For Each element In circPattern.PatternElements\n        Dim elemFace As Face\n        For Each elemFace In element.Faces\n            If elemFace Is selectedFace Then\n                Set foundElem = element\n                Exit For\n            End If\n        Next\n        \n        If Not foundElem Is Nothing Then\n            Exit For\n        End If\n    Next\n    \n    If Not foundElem Is Nothing Then\n        ' Get the transform of the pattern element.\n        ' This defines the tranform from the original\n        ' entity to this element.\n        Dim elemTransform As Matrix\n        Set elemTransform = foundElem.Transform\n        \n        ' Invert the transform to go from the element to\n        ' the orginal entity.\n        elemTransform.Invert\n        \n        ' Transform a point on the selected face which should\n        ' result in a point that lies on the original corresponding face.\n        Dim entPoint As Point\n        Set entPoint = selectedFace.PointOnFace\n        Call partDoc.ComponentDefinition.WorkPoints.AddFixed(entPoint)\n        Call entPoint.TransformBy(elemTransform)\n        Call partDoc.ComponentDefinition.WorkPoints.AddFixed(entPoint)\n        \n        ' Use this point to find the face.\n        Dim filter(0) As SelectionFilterEnum\n        filter(0) = kPartFaceFilter\n        Dim foundFaces As ObjectsEnumerator\n        Set foundFaces = partDoc.ComponentDefinition.FindUsingPoint(entPoint, filter, 0.001)\n        \n        If foundFaces.Count = 1 Then\n            Dim originalFace As Face\n            Set originalFace = foundFaces.Item(1)\n            \n            MsgBox \"The original feature is \" & originalFace.CreatedByFeature.name\n        End If\n    End If\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How do I copy a selection of objects to another part?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Using AddForSolid with SketchLInes.AddByTwoPoints\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: INVENTOR DRAWING DIMENSION PRECISION\n                    ", "solution": [], "author": "Jonathan.Lander"},
{"created at": [], "solution Title": "\n                        Re: Use iLogic to change parameter from driven to non Driven\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "oDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n\n", "Dim", " ", "oSketch", " ", "As", " ", "PlanarSketch", "\n", "oSketch", " ", "=", " ", "oDoc", ".", "ComponentDefinitions", ".", "Item", "(", "1", ")", ".", "Sketches", ".", "Item", "(", "\"", "NozzleCenterSketch", "\"", ")", "\n\n", "If", " ", "Driven", " ", "=", " ", "True", " ", "Then", "\n    ", "For", " ", "Each", " ", "DimCon", " ", "As", " ", "Object", " ", "In", " ", "oSketch", ".", "DimensionConstraints", "\n        ", "If", " ", "DimCon", ".", "Parameter", ".", "Name", " ", "=", " ", "\"", "DuctAngle", "\"", " ", "Then", "\n            ", "DimCon", ".", "Driven", " ", "=", " ", "True", "\n        ", "End", " ", "If", "\n    ", "Next", "\n", "Else", "\n    ", "For", " ", "Each", " ", "DimCon", " ", "As", " ", "Object", " ", "In", " ", "oSketch", ".", "DimensionConstraints", "\n        ", "If", " ", "DimCon", ".", "Parameter", ".", "Name", " ", "=", " ", "\"", "DuctAngle", "\"", " ", "Then", "\n            ", "DimCon", ".", "Driven", " ", "=", " ", "False", "\n            ", "DimCon", ".", "Parameter", ".", "Expression", " ", "=", " ", "\"", "30 deg", "\"", "\n        ", "End", " ", "If", "\n    ", "Next", "\n    \n", "End", " ", "If"], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: Best way to reference clsid\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Cannot call GraphicsNode.RenderStyle in C# using the Inventor API\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Component Error in rule\n                    ", "solution": [], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: T&P_Pipe Quantity or Unit of Measurement\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: How do I delete an occurrence from an assembly (vba)?\n                    ", "solution": [], "author": "jpblower"},
{"created at": [], "solution Title": "\n                        Re: Boolean Help\n                    ", "solution": [], "author": "theo.bot"},
{"created at": [], "solution Title": "\n                        Re: Iterating SheetMetal.SetActiveStyle(\"\") in Assembly\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: iLogic/Code To Open the \"Edit Field Text\" Dialog Box native to inv\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: all referenced documents and some non referenced documents\n                    ", "solution": ["Sub Main()\n\tDim docList As ArrayList = New ArrayList()\n\tDim oWrite As System.IO.StreamWriter = System.IO.File.CreateText(\"c:\\Temp\\sagome.txt\")\n\tFor Each co As ComponentOccurrence In ThisDoc.Document.ComponentDefinition.Occurrences\n\t\tWriteNames(co, docList, oWrite)\n\tNext co\n\toWrite.Flush()\n\toWrite.Close()\nEnd Sub\n\nSub WriteNames (co As ComponentOccurrence, docs As ArrayList, oWrite As System.IO.StreamWriter)\n\tDim cDocName As String\n\tDim cDoc As Document\n\tcDoc = co.ReferencedDocumentDescriptor.ReferencedDocument\n\tcDocName = cDoc.FullDocumentName\n\tIf Not docs.Contains(cDocName) Then\n\t\tdocs.Add(cDocName)\n\t\toWrite.WriteLine(cDocName)\n\t\tIf cDoc.DocumentType = kAssemblyDocumentObject Then\n\t\t\tFor Each subCo As ComponentOccurrence In cDoc.ComponentDefinition.Occurrences\n\t\t\t\tWriteNames(subCo, docs, oWrite)\n\t\t\tNext subCo\t\t\n\t\tEnd If\n\tEnd If\nEnd Sub"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Ilogic verification of everything  ballooned in an IDW\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument = ThisDoc.Document\nDim oSheet As Sheet = oDrawDoc.ActiveSheet\nDim oPartsList As PartsList = oSheet.PartsLists.Item(1)\n\nDim s As String\nDim msg as String = \"\"\n\nFor Each oRow As PartsListRow In oPartsList.PartsListRows\n    If Not oRow.Ballooned Then\n        s = \"\"\n        For Each oCell As PartsListCell In oRow\n            s = s & oCell.Value & \" \"\n        Next\n        msg = msg & s & vbNewLine\n    End If\nNext\n\n'show results\nMsgBox(msg)\nBeep"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: excel and inventor\n                    ", "solution": ["Dim Names(4) as string\nNames = {\"Display name\", \"Title\", \"Part Number\", \"Date\", \"Revision\"}"], "author": "jmhjones"},
{"created at": [], "solution Title": "\n                        Re: iLogic to change dimension style of certain dimensions\n                    ", "solution": ["'external rule\n\u00a0\n'change dim style for all dims less than specified value Threshold\nDim Threshold As Double = 1 ' inch\n'convert to centimeters - Inventor internal database length units\nThreshold = Threshold * 2.54\n\u00a0\nIf Not TypeOf ThisDoc.Document Is DrawingDocument Then\n\u00a0\u00a0\u00a0 MessageBox.Show(\"This rule is intended for drawing documents only.\", _\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"Change Style\", MessageBoxButtons.OK, MessageBoxIcon.Information)\n\u00a0\u00a0\u00a0 Exit Sub\nEnd If\n\u00a0\n'drawing document\nDim oDrawDoc As DrawingDocument = ThisDoc.Document\n'active sheet\nDim oSheet As Sheet = oDrawDoc.ActiveSheet\n\u00a0\nDim n As Integer = 0\u00a0 'counter\n\u00a0\n'reference to the style manager\nDim oStylesMgr As DrawingStylesManager = oDrawDoc.StylesManager\n'get the reference to the target dimension style (by name)\nDim oNewStyle As DimensionStyle _\n\u00a0\u00a0\u00a0 = oStylesMgr.DimensionStyles.Item(\"Architectural (No Zeros)\")\n\u00a0\n'transform general dimensions\nDim oDims As DrawingDimensions = oSheet.DrawingDimensions\nFor Each oDim As GeneralDimension In oDims\n\u00a0\u00a0\u00a0 'replace style if dim value is less than Threshold\n\u00a0\u00a0\u00a0 If oDim.ModelValue < Threshold Then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oDim.Style = oNewStyle\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 n += 1\n\u00a0\u00a0\u00a0 End If\nNext\n\u00a0\n'transform Hole Thread Notes\nDim oThreadNote As HoleThreadNote\nFor Each oThreadNote In oSheet.DrawingNotes.HoleThreadNotes\n\u00a0\u00a0\u00a0 If oThreadNote.ModelValue < Threshold Then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'replace style if dim value is less than Threshold\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oThreadNote.Style = oNewStyle\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 n += 1\n\u00a0\u00a0\u00a0 End If\nNext\n\u00a0\nMessageBox.Show(\"Done\" & vbNewLine & \"Dimensions changed: \" & n, _\n\u00a0\u00a0\u00a0 \"Change Style\", MessageBoxButtons.OK, MessageBoxIcon.Information)"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic Assy. In Vault\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Rangebox without workfeatures\n                    ", "solution": ["Public Sub VisibilityTest()\n    Dim doc As PartDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    doc.ObjectVisibility.AllWorkFeatures = False\n    \n    doc.ObjectVisibility.AllWorkFeatures = True\nEnd Sub\n", "Public Sub GetBodyRange()\n    Dim doc As PartDocument\n    Set doc = ThisApplication.ActiveDocument\n    Dim bodies As SurfaceBodies\n    Set bodies = doc.ComponentDefinition.SurfaceBodies\n    \n    ' Initialize the range with the first body.\n    Dim allRange As Box\n    Set allRange = bodies.Item(1).RangeBox\n    \n    Debug.Print \"(\" & Format(allRange.minPoint.X, \"0.000000\") _\n                & \", \" & Format(allRange.minPoint.Y, \"0.000000\") _\n                & \", \" & Format(allRange.minPoint.Z, \"0.000000\") _\n                & \")-(\" & Format(allRange.maxPoint.X, \"0.000000\") _\n                & \", \" & Format(allRange.maxPoint.Y, \"0.000000\") _\n                & \", \" & Format(allRange.maxPoint.Z, \"0.000000\") & \")\"\n    \n    ' Expand the range using any additional bodies.\n    Dim i As Integer\n    For i = 2 To bodies.Count\n        Dim bodyRange As Box\n        Set bodyRange = bodies.Item(i).RangeBox\n        Dim minPoint As Point\n        Dim maxPoint As Point\n        Set minPoint = allRange.minPoint\n        Set maxPoint = allRange.maxPoint\n        \n        If bodyRange.minPoint.X < allRange.minPoint.X Then\n            minPoint.X = bodyRange.minPoint.X\n        End If\n        \n        If bodyRange.minPoint.Y < allRange.minPoint.Y Then\n            minPoint.Y = bodyRange.minPoint.Y\n        End If\n        \n        If bodyRange.minPoint.Z < allRange.minPoint.Z Then\n            minPoint.Z = bodyRange.minPoint.Z\n        End If\n        \n        If bodyRange.maxPoint.X > allRange.maxPoint.X Then\n            maxPoint.X = bodyRange.maxPoint.X\n        End If\n        \n        If bodyRange.maxPoint.Y > allRange.maxPoint.Y Then\n            maxPoint.Y = bodyRange.maxPoint.Y\n        End If\n        \n        If bodyRange.maxPoint.Z > allRange.maxPoint.Z Then\n            maxPoint.Z = bodyRange.maxPoint.Z\n        End If\n    Next\n    \n    allRange.minPoint = minPoint\n    allRange.maxPoint = maxPoint\n    \n    Debug.Print \"(\" & Format(allRange.minPoint.X, \"0.000000\") _\n                & \", \" & Format(allRange.minPoint.Y, \"0.000000\") _\n                & \", \" & Format(allRange.minPoint.Z, \"0.000000\") _\n                & \")-(\" & Format(allRange.maxPoint.X, \"0.000000\") _\n                & \", \" & Format(allRange.maxPoint.Y, \"0.000000\") _\n                & \", \" & Format(allRange.maxPoint.Z, \"0.000000\") & \")\"\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Need help in Inventor vba to calculate distance between 2 points.\n                    ", "solution": ["Public Sub MeasurePointDistance()\n    ' Have the two points selected.\n    Dim points(1) As Object\n    Set points(0) = ThisApplication.CommandManager.Pick(kAllPointEntities, \"Select Point 1\")\n    Set points(1) = ThisApplication.CommandManager.Pick(kAllPointEntities, \"Select Point 2\")\n    \n    ' Use some code that gets the 3D coordinate from each point.\n    ' This varies depending on what was selected.\n    Dim resultPoints(1) As Point\n    Dim i As Integer\n    For i = 0 To 1\n        If TypeOf points(i) Is WorkPoint Then\n            Dim wkPnt As WorkPoint\n            Set wkPnt = points(i)\n            Set resultPoints(i) = wkPnt.Point\n        ElseIf TypeOf points(i) Is SketchPoint Then\n            Dim skPnt As SketchPoint\n            Set skPnt = points(i)\n            Set resultPoints(i) = skPnt.Geometry3d\n        ElseIf TypeOf points(i) Is SketchPoint3D Then\n            Dim skPnt3D As SketchPoint3D\n            Set skPnt3D = points(i)\n            Set resultPoints(i) = skPnt3D.Geometry\n        ElseIf TypeOf points(i) Is Vertex Then\n            Dim vert As Vertex\n            Set vert = points(i)\n            Set resultPoints(i) = vert.Point\n        End If\n    Next\n    \n    ' Display the distance between the points using the current document units.\n    Dim uom As UnitsOfMeasure\n    Set uom = ThisApplication.ActiveDocument.UnitsOfMeasure\n    \n    Dim result As String\n    result = \"Distance: \" & uom.GetStringFromValue(resultPoints(0).DistanceTo(resultPoints(1)), kDefaultDisplayLengthUnits)\n    \n    Call MsgBox(result, vbOKOnly, \"Distance Between Points\")\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: I logic rule run in assembly to effect parts?\n                    ", "solution": ["Dim oAssemCompDef As AssemblyComponentDefinition\noAssemCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\nDim oCompOcc As ComponentOccurrence\n\nFor Each oCompOcc In oAssemCompDef.Occurrences\n\n     Dim oParameters As Inventor.Parameters\n     oParameters = oCompOcc.Parameters\n     oParameters.SetAllToMedian()\n   \nNext", "Dim oAssemCompDef As AssemblyComponentDefinition\noAssemCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\nDim oCompOcc As ComponentOccurrence\n\nFor Each oCompOcc In oAssemCompDef.Occurrences\n\n     oCompOcc.Edit()\n     Dim oParameters As Inventor.Parameters\n     oParameters = oCompOcc.Parameters\n     oParameters.SetAllToMedian()\n     oCompOcc.ExitEdit(63746)\n   \nNext"], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: Adding part list problem  HRESULT: 0x80070057 (E_INVALIDARG))\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "Document", "\n", "oDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n", "'", "verifica se \ufffd un disegno", "\n", "If", " ", "oDoc", ".", "DocumentType", "=", "kDrawingDocumentObject", " ", "Then", "\n    ", "Dim", " ", "docFile", " ", "As", " ", "Document", "\n    ", "docFile", " ", "=", " ", "ThisDoc", ".", "ModelDocument", "\n    ", "Dim", " ", "FNamePos", " ", "As", " ", "Long", "\n    ", "dcc", "=", "ThisApplication", ".", "Documents", ".", "Open", "(", "docFile", ".", "FullFileName", ",", "False", ")", "\n    ", "'", "verifica che nel disegno sia caricato un assieme", "\n    ", "If", " ", "dcc", ".", "DocumentType", "=", "kAssemblyDocumentObject", " ", "Then", "\n    \n    ", "Dim", " ", "oBOM", " ", "As", " ", "BOM", "\n        ", "oBOM", " ", "=", " ", "dcc", ".", "ComponentDefinition", ".", "BOM", "\n        ", "oBOM", ".", "StructuredViewFirstLevelOnly", " ", "=", " ", "True", "\n        ", "oBOM", ".", "StructuredViewEnabled", " ", "=", " ", "False", "\n    \n        ", "'", "Per ogni pagina del disegno, se esiste una vista caricata, inserisce la part list", "\n        ", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n            ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDoc", ".", "Sheets", "\n            ", "oSheet", ".", "Activate", "\n            ", "cnt", "=", "oSheet", ".", "DrawingViews", ".", "count", "\n                ", "If", " ", "cnt", " ", ">", "0", " ", "Then", "\n                    ", "oDrawingView", " ", "=", " ", "oSheet", ".", "DrawingViews", "(", "1", ")", "\n                    ", "Try", "\n                        ", "Dim", " ", "oPartslist1", " ", "As", " ", "PartsList", "\n                        ", "oPartslist1", " ", "=", " ", "oSheet", ".", "PartsLists", "(", "1", ")", "\n                    ", "Catch", "\n                        ", "Dim", " ", "oPlacementPoint", " ", "As", " ", "Point2d", "\n", "'", "                        Dim oPartslist As PartsList", "'", "                        oPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(41, 10.825)", "'", "                        oPartsList = oSheet.PartsLists.Add(oDrawingView, oPlacementPoint)", "\n\n                        ", "oPlacementPoint", "=", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "oSheet", ".", "Width", ", ", "oSheet", ".", "Height", ")", "\n                        ", "Dim", " ", "oPartsList", " ", "As", " ", "PartsList", "\n                        ", "oPartsList", "=", "oSheet", ".", "PartsLists", ".", "Add", "(", "oDrawingView", ", ", "oPlacementPoint", ")", "\n                        ", "minXpoint", "=", "oSheet", ".", "TitleBlock", ".", "RangeBox", ".", "MinPoint", ".", "x", "\n                        ", "minYpoint", "=", "oSheet", ".", "TitleBlock", ".", "RangeBox", ".", "MaxPoint", ".", "Y", "\n                        ", "maxXpoint", "=", "oPlacementPoint", ".", "x", "\n                        ", "dPointx", "=", "oSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", ".", "RangeBox", ".", "MinPoint", ".", "X", "-", "minXpoint", "\n                        ", "dPointY", "=", "oSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", ".", "RangeBox", ".", "MinPoint", ".", "Y", "-", "minYpoint", "\n                        ", "maxYpoint", "=", "oPlacementPoint", ".", "Y", "-", "dPointY", "\n                        ", "Dim", " ", "newmin", ", ", "newmax", " ", "As", " ", "Point2d", "\n                        ", "newmin", "=", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "minXpoint", ", ", "minYpoint", ")", "\n                        ", "newmax", "=", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "41", ", ", "maxYpoint", ")", "\n                        ", "oSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", ".", "Delete", "\n                        ", "oPartsList", "=", "oSheet", ".", "PartsLists", ".", "Add", "(", "oDrawingView", ", ", "newmax", ")", "\n                    ", "End", " ", "Try", "\n                ", "End", " ", "If", "\n            ", "Next", "\n    ", "Else", " ", "MessageBox", ".", "Show", "(", "\"", "La regola funziona solo per disegni di assiemi", "\"", ", ", "\"", "iLogic", "\"", ")", "\n    ", "End", " ", "If", "\n", "Else", " ", "MessageBox", ".", "Show", "(", "\"", "La regola funziona solo per disegni", "\"", ", ", "\"", "iLogic", "\"", ")", "\n", "End", " ", "If"], "author": "RodrigoEiras"},
{"created at": [], "solution Title": "\n                        Re: Suppressing derived parts in drawing views\n                    ", "solution": ["Sub hideCurveOfDerivePart()\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n     \n    Dim oSheet As Sheet\n    Set oSheet = oDrawDoc.ActiveSheet\n     \n    Dim oView1 As DrawingView\n    Set oView1 = oSheet.DrawingViews(1)\n     \n    Dim oModelDoc As Document\n    Set oModelDoc = oView1.ReferencedDocumentDescriptor.ReferencedDocument\n     \n    If oModelDoc.DocumentType = kAssemblyDocumentObject Then\n        Dim oEachOcc As ComponentOccurrence\n        \n        For Each oEachOcc In oModelDoc.ComponentDefinition.Occurrences\n        \n            'native part document (this part has derived part)\n            If oEachOcc.ReferencedDocumentDescriptor.ReferencedDocument.DocumentType = kPartDocumentObject Then\n                Dim oNativePartDoc As PartDocument\n                Set oNativePartDoc = oEachOcc.ReferencedDocumentDescriptor.ReferencedDocument\n             \n                'check if the document has derived part\n                If oNativePartDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents.Count > 0 Then\n                    'hide the occurrence in the context of the drawing view.\n                    Call oView1.SetVisibility(oEachOcc, False)\n                End If\n            ElseIf oEachOcc.ReferencedDocumentDescriptor.ReferencedDocument.DocumentType = kAssemblyDocumentObject Then\n                Dim oSubOccu As ComponentOccurrence\n                For Each oSubOccu In oEachOcc.SubOccurrences\n                    HideDerivedComponent oSubOccu, oView1\n                Next\n            End If\n        Next\n    End If\nEnd Sub\n\n' Iterate all the sub occurrences and hide the derived part\nSub HideDerivedComponent(oOccu As ComponentOccurrence, oView As DrawingView)\n    Dim oEachOcc As ComponentOccurrence\n    \n    If oOccu.ReferencedDocumentDescriptor.ReferencedDocument.DocumentType = kPartDocumentObject Then\n        Dim oNativePartDoc As PartDocument\n        Set oNativePartDoc = oOccu.ReferencedDocumentDescriptor.ReferencedDocument\n \n        'check if the document has derived part\n        If oNativePartDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents.Count > 0 Then\n        'hide the occurrence in the context of the drawing view.\n            Call oView.SetVisibility(oOccu, False)\n        End If\n    ElseIf oOccu.ReferencedDocumentDescriptor.ReferencedDocument.DocumentType = kAssemblyDocumentObject Then\n        Dim oSubOccu As ComponentOccurrence\n        For Each oSubOccu In oOccu.SubOccurrences\n            HideDerivedComponent oSubOccu, oView\n        Next\n    End If\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: RevisionTable\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Issue with File Size when deriving Assembly to Single Part File\n                    ", "solution": [], "author": "djreesing"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Naming solid bodies\n                    ", "solution": ["'check for custom iProperty and add it if not found\nDim prefix As String = \"Prefix\"\ncustomPropertySet = ThisDoc.Document.PropertySets.Item _\n(\"Inventor User Defined Properties\")\n\nTry\n         prop= customPropertySet.Item(prefix)\nCatch\n      ' Assume error means not found\n            customPropertySet.Add(\"\", prefix)\nEnd Try\n\n'define the parameters to use\nmyParam1 = Width\nmyParam2 = Thickness\n\n'write the prefix\nprefix = myParam1 & \"cm x\" & myParam2 & \"cm\" & \"_\"\n\n'check that this active document is a part file   \nDim partDoc As PartDocument\nIf ThisApplication.ActiveDocument.DocumentType <> kPartDocumentObject Then\nMessageBox.Show (\"Please open a part document\", \"iLogic\")\nEnd If\n\n'define the active document\npartDoc = ThisApplication.ActiveDocument\nDim solid As SurfaceBody\nDim i As Integer\n\n'write input back to custom iProperty\niProperties.Value(\"Custom\", \"Prefix\") = prefix\ni = 1\n'rename all solid bodies incrementing suffix\nFor Each solid In partDoc.ComponentDefinition.SurfaceBodies\nsolid.Name = prefix + IIf(i < 10, \"0\" + CStr(i), CStr(i))\ni = i + 1\nNext\n\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: ilogic flat pattern & zeroing XYZ coordinates\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: 2016 Addin location\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Transfer iLogic rules to old parts\n                    ", "solution": [], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Pattern with assemblies view problem\n                    ", "solution": ["For Each obj As Object In compPattern.ParentComponents\n\tobj.SetDesignViewRepresentation(\"Default\", Nothing, True) 'View Default associative\nNext", "For Each element As OccurrencePatternElement in compPattern.OccurrencePatternElements", "    For Each obj As Object In element.Occurrences\n\t    obj.SetDesignViewRepresentation(\"Default\", Nothing, True) 'View Default associative\n    Next", "Next"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Print to PDF & Specify Output File Name Without Changing Registry\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Training or documentation on using the iLogic classes for vb.net?\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Leader Text\n                    ", "solution": [], "author": "kajobus"},
{"created at": [], "solution Title": "\n                        Re: Crashing Part\n                    ", "solution": [], "author": "ASchlaack"},
{"created at": [], "solution Title": "\n                        Re: User Parameter being limited - how did he do it?\n                    ", "solution": [], "author": "awatt"},
{"created at": [], "solution Title": "\n                        Re: Cenermark - change layer\n                    ", "solution": ["Dim", " ", "oDoc", " ", "As", " ", "DrawingDocument", "\n", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "sLayerLaserEngraveName", " ", "As", " ", "String", "\n", "sLayerLaserEngraveName", "=", "\"", "CM for laser", "\"", " ", "'", "enter your yellow layer name", "\n", "oLayerLaserEngrave", " ", "=", " ", "oDoc", ".", "StylesManager", ".", "Layers", ".", "Item", "(", "sLayerLaserEngraveName", ")", " \n\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", "=", "oDoc", ".", "ActiveSheet", "\n\n", "Dim", " ", "oCenterline", " ", "As", " ", "Centerline", "\n", "For", " ", "Each", " ", "oCenterline", " ", "In", " ", "oSheet", ".", "Centerlines", "\n    ", "oCenterline", ".", "Layer", " ", "=", " ", "oLayerLaserEngrave", "\n", "Next", "    \n\n", "Dim", " ", "oCentermark", " ", "As", " ", "Centermark", "\n\n", "For", " ", "Each", " ", "oCentermark", " ", "In", " ", "oSheet", ".", "Centermarks", "\n    ", "oCentermark", ".", "Layer", " ", "=", " ", "oLayerLaserEngrave", "\n", "Next", "\n"], "author": "RodrigoEiras"},
{"created at": [], "solution Title": "\n                        Re: Export Part Lists from multiple sheets\n                    ", "solution": ["Dim oDoc As Inventor.DrawingDocument\noDoc = ThisDoc.Document\nDim oPartslist As PartsList\nDim oSheet As Inventor.Sheet\n\n'get folder (using the same path as this doc)\nfolderName = ThisDoc.Path\n\n\n\t'look at each sheet\n\tFor Each oSheet in oDoc.Sheets\n\t'get the first parts list on the sheet\n\tTry\n\toPartslist = oSheet.PartsLists(1)\n\t'replace colon in sheet name with underscore\n\toName = Replace(oSheet.Name, \":\",\"_\") \n\t'export each parts list\n\toPartslist.Export(folderName & \"\\\" & oName  & \".xls\", PartsListFileFormatEnum.kMicrosoftExcel)\n\tCatch\n\tEnd Try\n\tNext \n\n\n'tell the user the files were created\nMessageBox.Show(\"New *.xls files created in: \" _\n&vblf & folderName, \"iLogic\")\n\n'open the folder where the new folders are saved\nShell(\"explorer.exe \" & folderName & \"\\\" ,vbNormalFocus)"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Browser Folders in iLogic\n                    ", "solution": ["oPane = ThisApplication.ActiveDocument.BrowserPanes(\"Model\")\n\nSelect Case Angle\n\tCase < 20 ul \n    \t  oFolder = oPane.TopNode.BrowserFolders.Item(\"ON/OFF HARDWARE\")\n\n'Get the component nodes in the folder\noFolderNodes = oFolder.BrowserNode.BrowserNodes \n\n'look at each item in the folder\nFor Each oNode As BrowserNode In oFolderNodes \noComp = oNode.NativeObject\noComp.Visible = False\noComp.BOMStructure = BOMStructureEnum.kReferenceBOMStructure\nNext\n\n    \n\tCase >= 20 ul\n    \t  oFolder = oPane.TopNode.BrowserFolders.Item(\"ON/OFF HARDWARE\") \n\n\n'Get the component nodes in the folder\noFolderNodes = oFolder.BrowserNode.BrowserNodes \n\n'look at each item in the folder\nFor Each oNode As BrowserNode In oFolderNodes \noComp = oNode.NativeObject\noComp.Visible = True\noComp.BOMStructure = BOMStructureEnum.kDefaultBOMStructure\nNext\n\nEnd Select"], "author": "ASchlaack"},
{"created at": [], "solution Title": "\n                        Re: Add-In Security for Inventor 2016\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Copy iProperties\n                    ", "solution": ["Imports System.Windows.Forms\n \nSub Main\n  Dim Description As String = iProperties.Value(\"Project\", \"Description\")\n  Clipboard.SetText(Description)\nEnd Sub"], "author": "nike_bytom"},
{"created at": [], "solution Title": "\n                        Re: Inventor Event Handling\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: Open model from drawing [VBA]\n                    ", "solution": ["Dim oDwgDoc As DrawingDocument\n    Set oDwgDoc = ThisApplication.ActiveDocument\nDim oSheet As Sheet\nDim oDrawingView As DrawingView\nDim oModelDoc As Document\n\nFor Each oSheet In oDwgDoc.Sheets\noSheet.Activate\nSet oDrawingView = oSheet.DrawingViews.Item(1)\nSet oModelDoc = oDrawingView.ReferencedDocumentDescriptor.ReferencedDocument\nCall ThisApplication.Documents.Open(oModelDoc.FullDocumentName, True) ' False for invisbly opened\nNext"], "author": "nike_bytom"},
{"created at": [], "solution Title": "\n                        Re: Change Material and copy\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Ilogic code to get the area in sheet metal\n                    ", "solution": ["Dim oDoc As PartDocument\noDoc = ThisApplication.ActiveDocument\n   \nDim oDef As SheetMetalComponentDefinition\noDef = oDoc.ComponentDefinition\n   \nDim oFlatPattern As FlatPattern\noFlatPattern = oDef.FlatPattern\n   \nDim oTransaction As Transaction\noTransaction = ThisApplication.TransactionManager.StartTransaction(oDoc, \"Find area\")\n   \nDim oSketch As PlanarSketch\noSketch = oFlatPattern.Sketches.Add(oFlatPattern.TopFace)\n   \n\nDim oEdgeLoop As EdgeLoop\n    For Each oEdgeLoop In oFlatPattern.TopFace.EdgeLoops\n        If oEdgeLoop.IsOuterEdgeLoop Then\n            Exit For\n        End If\n    Next\n   \nDim oEdge As Edge\n    For Each oEdge In oEdgeLoop.Edges\n        Call oSketch.AddByProjectingEntity(oEdge)\n   Next\n   \nDim oProfile As Profile\noProfile = oSketch.Profiles.AddForSolid\n   \nDim dArea As Double\n    dArea = oProfile.RegionProperties.Area\n   \n   \noTransaction.Abort\nMessageBox.Show(\"External surface area = \" & dArea & \" cm^2\", \"iLogic\")\n   \n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How to call iLogic function from VB.NET addin?\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Automatic maximum dimensions in part list update\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: What's the type of a DocumentSubType? (vb.net)\n                    ", "solution": [], "author": "raith-mb"},
{"created at": [], "solution Title": "\n                        Re: Running Part's Rule\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Export DXF options\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Trigger \"create simplified part\" via API/macro\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Update for Inventor-Training-Material?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Update When Done\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Problem with PartFeature.Delete() time and memory performance.\n                    ", "solution": ["ObjectCollection oc = invApp.TransientObjects.CreateObjectCollection();\nforeach (CombineFeature c in combineFeatures) {\n\toc.Add(c);\n}\npartDoc.ComponentDefinition.DeleteObjects(oc);"], "author": "squebler"},
{"created at": [], "solution Title": "\n                        Re: Flat or folded model\n                    ", "solution": [], "author": "andrewwhiteinc"},
{"created at": [], "solution Title": "\n                        Betreff: Why is Inventor 2016 Overwriting Files with a Save-As????\n                    ", "solution": [], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: split button -  separator\n                    ", "solution": ["Sub AddPanelToToolsTab()\n    ' Get the ribbon associated with the part document\n    Dim oPartRibbon As Ribbon\n    Set oPartRibbon = ThisApplication.UserInterfaceManager.Ribbons.Item(\"Part\")\n\n    ' Get the \"Tools\" tab\n    Dim oTab As RibbonTab\n    Set oTab = oPartRibbon.RibbonTabs.Item(\"id_TabTools\")\n\n    ' Create a panel named \"Update\", positioned after the \"Measure\" panel in the Tools tab.\n    Dim oPanel As RibbonPanel\n    Set oPanel = oTab.RibbonPanels.Add(\"Update\", \"ToolsTabUpdatePanel\", \"SampleClientId\", \"id_PanelP_ToolsMeasure\")\n\n    ' Get the update commands\n    Dim oDef1 As ButtonDefinition\n    Set oDef1 = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppLocalUpdateCmd\")\n\n    Dim oDef2 As ButtonDefinition\n    Set oDef2 = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppUpdateMassPropertiesCmd\")\n\n    Dim oDefs As ObjectCollection\n    Set oDefs = ThisApplication.TransientObjects.CreateObjectCollection\n\n    oDefs.Add oDef1\n    oDefs.Add oDef2\n\n    ' Create a split button control\n    Dim oSplitBtn As CommandControl\n    Set oSplitBtn = oPanel.CommandControls.AddSplitButton(oDef1, oDefs, True)\n    \n    Call oSplitBtn.ChildControls.AddSeparator(\"AppUpdateMassPropertiesCmd\", True)\n    \n    ' Get the rebuild command\n    Dim oDef3 As ButtonDefinition\n    Set oDef3 = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppRebuildAllWrapperCmd\")\n\n    ' Create a button control\n    Call oPanel.CommandControls.AddButton(oDef3, True)\nEnd Sub"], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: Use YES od NO rune to rune a runle\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Change font size with VB.net\n                    ", "solution": ["oTextBox", ".", "FormattedText", " ", "=", " ", "\"", "<StyleOverride FontSize = '", "\"", " ", "&", " ", "dTextSize", " ", "&", " ", "\"", "'>", "\"", " ", "&", " ", "\"", "TOP", "\"", " ", "&", " ", "\"", "</StyleOverride>", "\""], "author": "RodrigoEiras"},
{"created at": [], "solution Title": "\n                        Re: Close active Drawing\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Ilogic drawing dimension object\n                    ", "solution": ["oDrawing", " ", "=", " ", "ThisDrawing", "\n", "oSheet", " ", "=", " ", "ActiveSheet", ".", "Sheet", "\n\n\n\n", "For", " ", "Each", " ", "oDrawingDimension", " ", "In", " ", "oSheet", ".", "DrawingDimensions", "\n\n    ", "Trace", ".", "writeline", "(", "oDrawingDimension", ".", "ModelValue", ")", "\n    \n    ", "ParameterX", " ", "=", " ", "oDrawingDimension", ".", "ModelValue", "\n\n\n", "Next"], "author": "RodrigoEiras"},
{"created at": ["\u200e03-01-2019 12:31 AM"], "solution Title": "\n                        Re: Export into \"dxf\" the flat pattern part since the drawing part (VB\n                    ", "solution": ["Public Sub PublishDXF()\n\n    'Get the part from drawing\n    Dim dwg As DrawingDocument\n    Set dwg = ThisApplication.ActiveDocument\n\n    Dim baseView As DrawingView\n    Set baseView = dwg.Sheets(1).DrawingViews(1)\n\n    Dim mainPRT As PartDocument\n    Set mainPRT = baseView.ReferencedDocumentDescriptor.ReferencedDocument\n\n    ' Get the DataIO object.\n    Dim oDataIO As DataIO\n    Set oDataIO = mainPRT.ComponentDefinition.DataIO\n\n    ' Build the string that defines the format of the DXF file.\n    Dim sOut As String\n\n    sOut = \"FLAT PATTERN DXF?&AcadVersion=2004\"\n    sOut = sOut & \"&OuterProfileLayer=DECOUPE_EXTERNE\"\n    sOut = sOut & \"&InteriorProfilesLayer=DECOUPE_INTERNE\"\n    sOut = sOut & \"&FeatureProfilesLayer=GRAVURE\"\n    sOut = sOut & \"&FeatureProfilesUpLayerColor=255;0;0\"\n    sOut = sOut & \"&FeatureProfilesDownLayerColor=255;0;0\"\n    sOut = sOut & \"&UnconsumedSketchesLayer=GRAVURE_ESQUISSE\"\n    sOut = sOut & \"&UnconsumedSketchesLayerColor=255;0;0\"\n    sOut = sOut & \"&BendLayer=LIGNE_PLIAGE\"\n    sOut = sOut & \"&BendUpLayerColor=0;255;0\"\n    sOut = sOut & \"&BendUpLayerLineType=37644\"\n    sOut = sOut & \"&BendDownLayerColor=0;255;0\"\n    sOut = sOut & \"&BendDownLayerLineType=37644\"\n    sOut = sOut & \"&ToolCenterLayer=CENTRE_OUTILS\"\n    sOut = sOut & \"&ToolCenterUpLayerColor=255;0;255\"\n    sOut = sOut & \"&ToolCenterDownLayerColor=255;0;255\"\n    sOut = sOut & \"&ArcCentersLayer=CENTRE\"\n    sOut = sOut & \"&ArcCentersLayerColor=255;0;255\"\n    sOut = sOut & \"&InvisibleLayers=IV_TANGENT;IV_ALTREP_FRONT;IV_ALTREP_BACK;IV_ROLL_TANGENT;IV_ROLL\"\n    sOut = sOut & \"&SplineTolerance=0,001\"\n\n    'Set a reference to the active document (the document to be published).\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    'Set destination and filename with part number and revision\n    Dim oPartNumber As Property\n    Dim PartNumber As String\n    Set oPartNumber = oDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\")\n    PartNumber = CStr(oPartNumber.Value)\n    \n    Dim oRevision As Property\n    Dim Revision As String\n    Set oRevision = oDoc.PropertySets.Item(\"Inventor Summary Information\").Item(\"Revision Number\")\n    \n    Dim oRevisionValue As String\n    oRevisionValue = CStr(oRevision.Value)\n    \n    If oRevision.Value = \"\" Then\n    Revision = CStr(oRevision.Value)\n    Else\n    Revision = \"_\" & CStr(oRevision.Value)\n    End If\n    oDataIO.WriteDataToFile sOut, \"C:\\TEMP\\\" & PartNumber & Revision & \".dxf\"\nEnd Sub"], "author": "amartin.r"},
{"created at": [], "solution Title": "\n                        Re: changing model units API\n                    ", "solution": [], "author": "cadmanagershat"},
{"created at": [], "solution Title": "\n                        Re: Create Copy with ilogic\n                    ", "solution": ["doc = ThisDoc.Document\n\nDim oAssyDoc As AssemblyDocument\noAssyDoc = doc\n\nDim oAssyDef As AssemblyComponentDefinition\noAssyDef = oAssyDoc.ComponentDefinition\n\nDim oSubAssyOcc As ComponentOccurrence \noSubAssyOcc = oAssyDef.Occurrences(1)\n\nIf    oSubAssyOcc.Suppressed = True Then\n    oSubAssyOcc.Delete\nEnd If\n    \nDim newPartPath As String\nDim newSubAssyPath As String\n\nIf (oSubAssyOcc.DefinitionDocumentType = DocumentTypeEnum.kAssemblyDocumentObject) Then\n\n    Dim oSubAssyDef As AssemblyComponentDefinition\n    oSubAssyDef = oSubAssyOcc.Definition\n\n    Dim oSubAssyDoc As AssemblyDocument \n    oSubAssyDoc = oSubAssyDef.Document\n    \n    Dim cnt As String\n    cnt = NN\n\n    If (System.IO.File.Exists(oSubAssyDoc.FullFileName)) Then\n        Dim fi As New System.IO.FileInfo(oSubAssyDoc.FullFileName)\n        newSubAssyPath = System.IO.Path.Combine(New System.String() {fi.DirectoryName, fi.Name.Replace(fi.Extension, [String].Format(\"_{0}{1}\", cnt, fi.Extension))})\n    End If\n            \n    System.IO.File.Copy(oSubAssyDoc.FullFileName, newSubAssyPath, True)\n    \n    If (System.IO.File.Exists(newSubAssyPath) = False) Then\n        MessageBox.Show(String.Format(\"Error copying the SubAssembly file {0}{1}\", oSubAssyDoc.FullFileName))\n        Return\n    End If\n          \n\tDim oList As Collection = New Collection\n\t\t\t\n    ' Create a copy Of the all the parts in the Sub-Assembly\n    Dim oSubOcc As ComponentOccurrence\n    For Each oSubOcc In oSubAssyOcc.SubOccurrences\n        If (oSubOcc.DefinitionDocumentType = DocumentTypeEnum.kPartDocumentObject) Then\n            Dim oPartDef As PartComponentDefinition \n\t\t\t\n\t\t\tDim wasSuppressed As Boolean\n            wasSuppressed = False\n\n            If oSubOcc.Suppressed Then\n                oSubOcc.Unsuppress()\n                wasSuppressed = True\n            End If\n\t\t\t\t\t\t\t\t\n            oPartDef = oSubOcc.Definition \n                \n            Dim oPartDoc As PartDocument \n            oPartDoc = oPartDef.Document\n            \n            If (System.IO.File.Exists(oPartDoc.FullFileName)) Then\n                Dim fi As New System.IO.FileInfo(oPartDoc.FullFileName)\n                newPartPath = System.IO.Path.Combine(New System.String() {fi.DirectoryName, fi.Name.Replace(fi.Extension, [String].Format(\"_{0}{1}\", cnt, fi.Extension))})\n            End If\n            \n            System.IO.File.Copy(oPartDoc.FullFileName, newPartPath, True)\n            \n            If (System.IO.File.Exists(newPartPath) = False) Then\n                MessageBox.Show(String.Format(\"Error copying the part file {0}{1}\", oPartDoc.FullFileName))\n                Return\n            End If\n\t\t\t\n\t\t \tIf wasSuppressed Then\n\t\t\t\toList.Add(newPartPath)\n            \toSubOcc.Suppress()\n            End If\n    \n        ElseIf (oSubOcc.DefinitionDocumentType = DocumentTypeEnum.kAssemblyDocumentObject) Then\n            MessageBox.Show(String.Format(\"SubAssembly {0}{1} inside a SubAssembly. This case is not yet handled.\", oSubOcc.Name))\n            Return\n        End If\n    Next\n    \n    ' Create a New occurrence Of the Sub-Assembly\n    Dim oPosition As Matrix \n    oPosition = ThisApplication.TransientGeometry.CreateMatrix() \n    oTG = ThisApplication.TransientGeometry\n    oPosition.SetTranslation(oTG.CreateVector(0, (NELV-SF)/10, 0))\n    \n    Dim oNewSubAssyOcc As ComponentOccurrence \n    oNewSubAssyOcc = oAssyDoc.ComponentDefinition.Occurrences.Add(newSubAssyPath, oPosition)\n    \n    ' Replace the parts in the New Sub-Assembly and suppress them if needed\n    For Each oSubOcc In oNewSubAssyOcc.SubOccurrences\n        If (oSubOcc.DefinitionDocumentType = DocumentTypeEnum.kPartDocumentObject) Then\n            Dim oPartDef As PartComponentDefinition \n            oPartDef = oSubOcc.Definition\n\n            Dim oPartDoc As PartDocument \n            oPartDoc = oPartDef.Document\n            \n              If (System.IO.File.Exists(oPartDoc.FullFileName)) Then\n                Dim fi As New System.IO.FileInfo(oPartDoc.FullFileName)\n                newPartPath = System.IO.Path.Combine(New System.String() {fi.DirectoryName, fi.Name.Replace(fi.Extension, [String].Format(\"_{0}{1}\", cnt, fi.Extension))})\n            End If\n            \n            If (System.IO.File.Exists(newPartPath)) Then\n                oSubOcc.Replace(newPartPath, True)\n            End If\n\t\t\t\n\t\t\t' Suppress if needed\n\t\t\tFor Each PartName As String In oList\n\t\t\t\tIf (PartName = newPartPath) Then\n\t\t\t\t\toSubOcc.Suppress()\n\t\t\t\t\tExit For\n\t\t\t\tEnd If\n\t\t\tNext\n\t\tEnd If\n    Next\nElseIf (oSubAssyOcc.DefinitionDocumentType = DocumentTypeEnum.kPartDocumentObject) Then\n    MessageBox.Show(\"Sorry, Expecting a subassembly to copy, but found \" & UCase(oSubAssyOcc.Name))\nEnd If"], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: Sclae on tile block with Ilogic\n                    ", "solution": ["For Each Osheet In ThisApplication.activedocument.sheets\n  If osheet.TitleBlock Is Nothing Or osheet.drawingviews.count=0 Then Exit Sub\n    otitleblock=osheet.TitleBlock\n    otextboxes=otitleblock.definition.sketch.textboxes\n    For Each otextbox In otextboxes\n      If otextbox.text= \"<\u00c9CHELLE>\" Then\n        drawingviewname =ThisApplication.activedocument.ActiveSheet.drawingviews.item(1).Name\n        otitleblock.setpromptresulttext(otextbox, ActiveSheet.View(drawingviewname).ScaleString)\n      End If  \n    Next\nNext\nInventorVb.DocumentUpdate()"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Template Errors\n                    ", "solution": [], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Export DWF, BoM table fails on 2nd Excluded from Count sheet\n                    ", "solution": ["                ' Adam\n                Debug.Print \"Before ShowSaveCopyAsOptions\"\n                Call PrintInfo(Options, 1)\n                Call DWFAddIn.ShowSaveCopyAsOptions(SourceObject, Context, Options)\n                Debug.Print \"Ater ShowSaveCopyAsOptions\"\n                Call PrintInfo(Options, 1)\n                \n                'Publish document\n                Call DWFAddIn.SaveCopyAs(SourceObject, Context, Options, file)", "                'Set sheet options\n                Set oSheets = ThisApplication.TransientObjects.CreateNameValueMap\n                Set oSheet1Options = Nothing\n                Set oSheet1Options = ThisApplication.TransientObjects.CreateNameValueMap\n                oSheet1Options.Clear\n                ' Adam\n                Dim sheetName As String\n                sheetName = SourceObject.Sheets(iSheet).Name\n                If InStr(1, sheetName, \":\", vbTextCompare) < 1 Then\n                  sheetName = sheetName + \":\"\n                End If\n                \n                oSheet1Options.Add \"Name\", sheetName\n                oSheet1Options.Add \"3DModel\", False\n                oSheets.Value(\"Sheet1\") = oSheet1Options"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Betreff: Can Bootrec.exe damage licence?\n                    ", "solution": [], "author": "wh"},
{"created at": [], "solution Title": "\n                        Re: VBA text to parameter\n                    ", "solution": [], "author": "Jacques.Grobler"},
{"created at": [], "solution Title": "\n                        Re: Can't Print with Apprentice After Installing Inventor View 2016\n                    ", "solution": [], "author": "andrewwhiteinc"},
{"created at": [], "solution Title": "\n                        Re: Get selected occurrence without interaction\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Code (VB) for : If \"value\" contains \"textA\" then\n                    ", "solution": ["Sub StringSearchTest()\n\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.activeDocument\n    \n    Dim oPartNumber As Property\n    Set oPartNumber = oDoc.PropertySets.Item _\n    (\"Design Tracking Properties\").Item(\"Part Number\")\n    \n    Dim oPartNumberValue As String\n    oPartNumberValue = CStr(oPartNumber.value)\n    \n    Dim searchTerm As String\n    searchTerm = \"text\"\n    \n    If InStr(1, oPartNumberValue, searchTerm) > 0 Then\n        Debug.Print (\"We found \"\"\" & searchTerm & \"\"\" :)\")\n    Else\n        Debug.Print (\"We didn't find \"\"\" & searchTerm & \"\"\" :(\")\n    End If\n     \nEnd Sub\n"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: custom arrowheads\n                    ", "solution": [], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: Send all files in a folder as e mail attach with folder path\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Create new Inventor 2015 Addin\n                    ", "solution": [], "author": "jbarajas"},
{"created at": [], "solution Title": "\n                        Re: Attach a folder to email\n                    ", "solution": ["AddReference \"F:\\Progetti\\Inventor\\Progetti_2015\\Compressione\\dll\\InvMyZip.dll\" ' change the path with the correct dll location\n\nSub Main\n\tcFolder = \"f:\\TestZip\" ' the folder to compress\n\toZip = \"f:\\TestZip.zip\" ' compressed file location and name\nDim CompressFolder As New InvMyZip.InvMyZip \n\tCompressFolder.oZip(cFolder, oZip)\n\tIf System.IO.File.Exists(oZip) Then\n\t\tSendMail(\"spam@dshortway.com\", \"SendMail Ilogic Rule Test Message\", oZip, _\n\t\t\t\t\"Test message from Ilogic rule SendMail\" & vbCr _\n\t\t\t\t\t& \"With multiline text in the body message!\")\n\tEnd If\nCompressFolder = Nothing\nEnd Sub\n\nPrivate Sub SendMail(ToAdress as String, tSubject As String, aFile As String, tBody As String)\nDim OlApp As Object = CreateObject(\"Outlook.Application\")\nDim eMail As Object = OlApp.CreateItem(0)\n\tWith eMail\n\t\t.To = ToAdress\n\t\t.Subject = tSubject\n\t\t.attachments.Add(aFile)\n\t\t.Body = tBody\n\t\t.Display\n\t\t'.Mail.Send ' uncomment this line if you want send your message immediately\n\tEnd With\nOlApp = Nothing\neMail = Nothing\nEnd Sub"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Parameters driven by iLogic not updating.\n                    ", "solution": [], "author": "arek.rusiecki"},
{"created at": [], "solution Title": "\n                        Re: delete all files in a folder with iLogic\n                    ", "solution": ["Sub Main\nInventorVb.DocumentUpdate()\n\nIf Old_Position <> Position Then\n\tRootPath = ThisDoc.Path\n\t\tCreate(RootPath & \"\\Steps\")\n\t\tCreate(RootPath & \"\\Steps\\OLD\")\n\t\tCreate(RootPath & \"\\Zeichnungen\")\n\t\tCreate(RootPath & \"\\Zeichnungen\\OLD\")\n\t\n\tStepNames = New String(){\"Glashalter mittig:1\", \"Glashalter oben:1\", \"Glashalter unten:1\"}\n\t\n\tFor Each Name In StepNames\n\t\tpart = Component.InventorComponent(Name).Definition.Document.FullDocumentName\n\t\toFileName = System.IO.Path.GetFileNameWithoutExtension(part)\n\t\tdoc = ThisApplication.Documents.Open(part)\n\t\t\tcFile(\"dm\", RootPath & \"\\Steps\\\" & oFileName & \"_\" & Old_Position & \".stp\",RootPath & _\n\t\t\t\t\"\\Steps\\OLD\\\" & oFileName & \"_\" & Old_Position & \".stp\" )\n\t\tdoc.saveas(RootPath & \"\\Steps\\\" & oFileName & \"_\" & Position & \".stp\", True)\n\t\tdoc.Close\n\tNext\n\t\n\tPdfNames = New String(){\"Glashalter oben\", \"Glashalter unten\", \"Glashalter mitte\", \"Glas\", \"Glas mit Mittelfosten\"}\n\t\n\tFor Each PdfName In PdfNames\n\t\tdoc = ThisApplication.Documents.Open(RootPath & \"\\Zeichnungen\\\" & PdfName & \".idw\")\n\t\t\tcFile(\"dm\", RootPath & \"\\Zeichnungen\\\" & PdfName & \"_\" & Old_Position & \".pdf\",RootPath & _\n\t\t\t\t\"\\Zeichnungen\\OLD\\\" & PdfName & \"_\" & Old_Position & \".pdf\" )\n\t\tdoc.saveas(RootPath & \"\\Zeichnungen\\\" & PdfName & \"_\" & Position & \".pdf\", True)\n\t\tdoc.Close\n\tNext\n\tOld_Position = Position\nEnd If\nEnd Sub\n\nPrivate Sub cFile(Action As String, aExist As String, oLocation As String)\n\t' Action is the required action:\n\t'\t\"D\"\t\tfor delete\n\t'\t\"M\"\t\tfor move\n\t'\t\"DM\"\tfor delete and move\n\t' aExist is the name of the file to check/move/delete\n\t' oLocation is the destination/deleted filename\n\tTry\n\t\tIf System.IO.File.Exists(aExist) = True Then\n\t\t\tSelect Case UCase(Action)\n\t\t\tCase \"D\"\n\t\t\t\tSystem.IO.File.Delete(oLocation)\n\t\t\tCase \"M\"\n\t\t\t\tSystem.IO.File.Move(aExist, oLocation)\n\t\t\tCase \"DM\"\n\t\t\t\tSystem.IO.File.Delete(oLocation)\n\t\t\t\tSystem.IO.File.Move(aExist, oLocation)\n\t\t\tEnd Select\n\t\tEnd If\n\n\tCatch e As exception\n\tMessageBox.Show(\"An error occurred in cFile.\", \"iLogic\", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1)\n\tEnd Try\nEnd Sub\n\nPrivate Sub Create(oPath As String)\n\tTry\n\t\tIf Not System.IO.Directory.Exists(oPath) Then\n\t\t\tSystem.IO.Directory.CreateDirectory(oPath)\n\t\tEnd If\n\tCatch e As exception\n\tMessageBox.Show(\"An error occurred in Create.\", \"iLogic\", MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1)\n\tEnd Try\nEnd Sub\n\nPrivate Sub DeleteAllFiles(sourceDir As String)\nTry\n\tDim FileList As String() = System.IO.Directory.GetFiles(sourceDir, \"*.*\")\n\t\n\tFor Each f As String In FileList\n\t\tSystem.IO.File.Delete(f)\n\tNext\n\t\t\t\t\t\nCatch dirNotFound As DirectoryNotFoundException\n\tMsgBox(dirNotFound.Message)\nEnd Try\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Hem Control\n                    ", "solution": ["Dim curDoc = ThisDoc.Document\n\nOn Error Resume Next\t\n\nDim oSheetMetalCompDef As SheetMetalComponentDefinition\noSheetMetalCompDef = curdoc.ComponentDefinition\n\nDim Hems As HemFeatures\nHems = oSheetMetalCompDef.Features.HemFeatures\n\nDim oHemFeature As HemFeature\t", "\n'Assuming you have Hem1,Hem2,Hem3 in your Modell and a Boolean Parameter named \"HEMSIDE\"", "\noHemFeature = Hems(\"Hem1\")\noHemFeature.Definition.IsOnEdgeSide = HEMSIDE\n\noHemFeature = Hems(\"Hem2\")\noHemFeature.Definition.IsOnEdgeSide = Not HEMSIDE\n\noHemFeature = Hems(\"Hem3\")\noHemFeature.Definition.IsOnEdgeSide =  HEMSIDE"], "author": "daniel.balogh"},
{"created at": [], "solution Title": "\n                        Re: iLogic PrintManager list collection\n                    ", "solution": ["AddReference \"System.Drawing.dll\"\n\nFor Each oPrinter As Object In System.Drawing.Printing.PrinterSettings.InstalledPrinters\n    MessageBox.Show(oPrinter, \"Title\")\nNext\n"], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: Customization XML Files\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Embossed Text\n                    ", "solution": [], "author": "alanrichardson"},
{"created at": [], "solution Title": "\n                        Re: Delete unresolved files\n                    ", "solution": ["Public Sub DelOccurrence()\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n    Dim ref As ComponentOccurrence\nFor Each ref In oAsmCompDef.Occurrences\n    If ref.ReferencedDocumentDescriptor.ReferenceMissing = True Then\n        ref.Delete\n    End If\nNext\nEnd Sub"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: International names of materials and appearances?\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Example of creating a dimension in a sheet from objects in an assembly\n                    ", "solution": ["// Retrieve only a few of the retrievable dimensions\nCComPtr<ObjectCollection> pObjCollection; \nhr = pInvApp->TransientObjects->CreateObjectCollection(CComVariant(), &pObjCollection); \n\nIDispatchPtr pDim;\nhr = pObjColl->get_Item(_variant_t(1), &pDim);\npObjCollection->Add(pDim);\nCComPtr<GeneralDimensionsEnumerator> pGenDimsEnum1;\nhr = pGenDimensions->Retrieve(pDrawingView, CComVariant(pObjCollection), &pGenDimsEnum1);"], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: Change parameter to key parameter through iLogic\n                    ", "solution": ["   ", "'", " Define parameter", "\n    ", "MyParam", " ", "=", " ", "Parameter", ".", "Param", "(", "\"", "d7", "\"", ")", "\n    ", "'", " Make parameter key", "\n    ", "MyParam", ".", "IsKey", " ", "=", " ", "True"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: .AddTitleBlock Help\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Supress with iLogic with If funktion\n                    ", "solution": ["Select", " ", "Case", " ", "Mittelpfosten_vorhanden", "\n    ", "Case", " ", "0", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:1", "\"", ")", " ", "=", " ", "False", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:2", "\"", ")", " ", "=", " ", "False", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:3", "\"", ")", " ", "=", " ", "False", "\n    ", "Case", " ", "1", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:1", "\"", ")", " ", "=", " ", "True", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:2", "\"", ")", " ", "=", " ", "False", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:3", "\"", ")", " ", "=", " ", "False", "\n    ", "Case", " ", "2", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:1", "\"", ")", " ", "=", " ", "True", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:2", "\"", ")", " ", "=", " ", "True", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:3", "\"", ")", " ", "=", " ", "False", "\n    ", "Case", " ", "3", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:1", "\"", ")", " ", "=", " ", "True", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:2", "\"", ")", " ", "=", " ", "True", "\n        ", "Component", ".", "IsActive", "(", "\"", "Mittelpfosten:3", "\"", ")", " ", "=", " ", "True", "\n", "End", " ", "Select", "\n"], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Sheet Metal Unfold rule\n                    ", "solution": ["iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "UnfoldMethod", "\"", ")", " ", "=", " ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", ".", "UnfoldMethod.Name"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Sheet Metal: Untick 'Use Thickness From Rule'\n                    ", "solution": ["ThisDoc", ".", "Document", ".", "ComponentDefinition", ".", "UseSheetMetalStyleThickness", " ", "=", " False"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: sPromptStrings Not Working\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Making An .ipt Rule Run From An .iam\n                    ", "solution": ["iLogicVb.RunRule(\"Angle\", \"Length\")", "Parameter", "(", "\"Angle", "\"", ", ", "\"length", "\"", ")", " ", "=", " ", "2.0", " ", "in"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Set View Representation\n                    ", "solution": ["Dim doc as AssemblyDocument = ThisDoc.Document  \nDim oAsmCompDef As ComponentDefinition  \noAsmCompDef = doc.ComponentDefinition \nDim oCompOcc As Inventor.ComponentOccurrence\n\nFor Each oCompOcc in oAsmCompDef.Occurrences\n\nIf oCompOcc.Visible = True Then\n        oCompOcc.SetDesignViewRepresentation(\"Default\", True)\nEnd If\n", "\nOn Error Resume Next\nNext", "\nThisApplication.ActiveView.Fit"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: change raster view to exact view\n                    ", "solution": ["For", " ", "Each", " ", "sheet", " ", "As", " ", "Sheet", " ", "In", " ", "ThisDrawing", ".", "Document", ".", "Sheets", "\n    ", "If", " ", "sheet", ".", "DrawingViews", ".", "Count", " ", ">", " ", "0", " ", "Then", "\n        ", "For", " ", "Each", " ", "view", " ", "As", " ", "DrawingView", " ", "In", " ", "sheet", ".", "DrawingViews", "\n            ", "view", ".", "IsRasterView", " ", "=", " ", "False", "\n        ", "Next", "\n    ", "End", " ", "If", "\n", "Next"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Display the \"Sheet Metal Defaults\" dialog box using an Inventor VB\n                    ", "solution": ["Sub Test()\n    Dim oCMD As ControlDefinition\n    Set oCMD = ThisApplication.CommandManager.ControlDefinitions(\"SheetMetalStylesCmd\")\n    \n    oCMD.Execute\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Event for changes in new feature dialog\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Dot.: VBA code - Step export from idw\n                    ", "solution": [], "author": "tri_nguyen_bkhc"},
{"created at": [], "solution Title": "\n                        Re: Turning A View In An .idw Off Rule\n                    ", "solution": [], "author": "ASchlaack"},
{"created at": [], "solution Title": "\n                        Re: iLogic Help\n                    ", "solution": ["If", " ", "Gores", " ", "=", " ", "3", " ", "Or", " ", "Gores", " ", "=", " ", "5", " ", "Or", " ", "Gores", " ", "=", " ", "7", " ", "Then", "\n    ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", " ", "=", " ", "\"", "Enter Value Here", "\"", "\n", "Else", " ", "If", " ", "Gores", " ", "=", " ", "4", " ", "Or", " ", "Gores", " ", "=", " ", "6", " ", "Then", "\n    ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", " ", "=", " ", "\"", "Enter Value Here", "\"", "\n", "End", " ", "If", "Select", " ", "Case", " ", "Gores", "\n    ", "Case", " ", "3", ",", "5", ",", "7", "\n        ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", " ", "=", " ", "\"", "Enter Value Here", "\"", "\n    ", "Case", " ", "4", ",", "6", "\n        ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", " ", "=", " ", "\"", "Enter Value Here", "\"", "\n", "End", " ", "Select"], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: Solid bodies\n                    ", "solution": ["Option Explicit\n\nSub Props2TxtFile()\n        Dim partDoc As PartDocument\n        Set partDoc = ThisApplication.ActiveDocument\n        Dim partDef As PartComponentDefinition\n        Set partDef = partDoc.ComponentDefinition\n        Dim fso As Object\n        Set fso = CreateObject(\"Scripting.FileSystemObject\")\n        Dim oFile As Object\n        Set oFile = fso.CreateTextFile(ThisApplication.ActiveDocument.FullFileName & \"Properties.txt\")\n        Dim body As SurfaceBody\n   \n   For Each body In partDoc.ComponentDefinition.SurfaceBodies\n    If body.Visible Then\n        body.Visible = False\n    End If\n   Next\n   \n    For Each body In partDoc.ComponentDefinition.SurfaceBodies\n       \n       Call SaveAsSTP(body)\n       Call OpenSTP(body, fso, oFile)\n       \n        Next\n  For Each body In partDoc.ComponentDefinition.SurfaceBodies\n    If Not body.Visible Then\n        body.Visible = True\n    End If\n  Next\n        oFile.Close\n        Set fso = Nothing\n        Set oFile = Nothing\n        MsgBox \"Complete!\"\n    \nEnd Sub\n    \n Private Sub OpenSTP(body As SurfaceBody, fso As Object, oFile As Object)\n       Dim partDef As PartComponentDefinition\n       \n       Dim dblMass As Double\n       Dim dblGrams As Double\n       Dim dblVolume As Double\n       Dim dblArea As Double\n       Dim oInv As Document\n       \n        Set oInv = ThisApplication.Documents.Open(ThisApplication.ActiveDocument.FullFileName & body.Name & \".stp\")\n        Dim oCommandMgr As CommandManager\n        Set oCommandMgr = ThisApplication.CommandManager\n\n        Dim oControlDef As ControlDefinition\n        Set oControlDef = oCommandMgr.ControlDefinitions.Item(\"AppLocalUpdateCmd\")\n        Call oControlDef.Execute\n\n       Set partDef = ThisApplication.ActiveDocument.ComponentDefinition\n       dblMass = partDef.MassProperties.Mass\n       dblGrams = dblMass * 1000\n       dblVolume = partDef.MassProperties.Volume\n       dblArea = partDef.MassProperties.Area\n       oFile.WriteLine \"Body: \" & body.Name & \" - Mass: \" & CStr(dblGrams * 0.00220462) & \" lbs\" & \" | Volume: \" & CStr(dblVolume * 0.061024) & \" in^3\" & \" | Area: \" & CStr(dblArea * 0.15500031) & \" in^2\"\n       ThisApplication.ActiveDocument.Close (True)\n          \n End Sub\n \nSub SaveAsSTP(body As SurfaceBody)\n\n        Dim partDoc As Document\n        Set partDoc = ThisApplication.ActiveDocument\n        body.Visible = True\n    \n    Call partDoc.SaveAs(partDoc.FullFileName & body.Name & \".stp\", True)\n    body.Visible = False\nEnd Sub"], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: auto checkin\n                    ", "solution": [], "author": "humberto"},
{"created at": [], "solution Title": "\n                        Re: Revision Reminder\n                    ", "solution": ["'Start of iLogic Code---------------------------\n\nIf Revision = \"\" Then\niLogicForm.Show(\"REV_REMINDER\")\nElse\n'Do Nothing\nEnd If\n'end of iLogic Code-----------------------------"], "author": "yvandelafontain"},
{"created at": [], "solution Title": "\n                        Re: Best Way to Define Seperate Documents\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Attribute Helper Error (deleted elements)\n                    ", "solution": ["Private Sub PurgeAttributeSet()\n\t'Removes/Deletes all unused Attributes \n    Try\n\t\tDim oApp = ThisApplication\n        If oApp.ActiveDocument.DocumentType <> _\n            DocumentTypeEnum.kDrawingDocumentObject Then\n            MsgBox(\"Need to have an Drawing document active\")\n            Exit Sub\n        End If\n\n        Dim oDrawDoc As DrawingDocument\n        oDrawDoc = oApp.ActiveDocument\n        Dim oAttbMan = oDrawDoc.AttributeManager\n        oAttbMan.PurgeAttributeSets(\"*\")\n\n    Catch ex As Exception\n        MsgBox(ex.ToString())\n    End Try\n\nEnd Sub"], "author": "Paul__H"},
{"created at": [], "solution Title": "\n                        Re: iLogic detect ipart\n                    ", "solution": ["Dim oAsmDoc As AssemblyDocument\n\noAsmDoc = ThisDoc.Document\n\n'Get the assembly component definition.\n\nDim oAsmDef As AssemblyComponentDefinition\n\noAsmDef = oAsmDoc.ComponentDefinition\n\n' Get all of the leaf occurrences of the assembly.\n\nDim oLeafOccs As ComponentOccurrencesEnumerator\n\noLeafOccs = oAsmDef.Occurrences.AllLeafOccurrences\n\nDim oOcc As ComponentOccurrence\n\nFor Each oOcc In oLeafOccs\n\nIf ", "oOcc.Definition", ".IsiPartFactory Or ", "oOcc.Definition", ".IsiPartMember Then\n\n'DO NOTHING\n\nElse 'DO SOMETHING HERE\n\nEnd If\n\nNext "], "author": "ApostolosJK"},
{"created at": [], "solution Title": "\n                        Re: Vault Access Through Inventor\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule to Change PartNumber\n                    ", "solution": [], "author": "cadmanagershat"},
{"created at": [], "solution Title": "\n                        Re: Suppressing Views in an .idw\n                    ", "solution": ["oDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "Dim", " ", "oView", " ", "As", " ", "DrawingView", "\n\n", "Select", " ", "Case", " ", "Parameter", "(", "\"", "15-1-0000.iam.Length_1", "\"", ")", "\n    ", "Case", " ", "<=", " ", "60", "\n        ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDoc", ".", "Sheets", "            \n            ", "For", " ", "Each", " ", "oView", " ", "In", " ", "oSheet", ".", "DrawingViews", "        \n                ", "Select", " ", "Case", " ", "oView", ".", "Name", "\n                    ", "Case", " ", "\"", "VIEW69", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "True", "\n                    ", "Case", " ", "\"", "VIEW70", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "True", "\n                    ", "Case", " ", "\"", "VIEW72", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "True", "\n                    ", "Case", " ", "\"", "VIEW73", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "True", "\n                ", "End", " ", "Select", "\n            ", "Next", "\n        ", "Next", "\n    ", "Case", " <= ", "120", "\n        ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDoc", ".", "Sheets", "\n            ", "For", " ", "Each", " ", "oView", " ", "In", " ", "oSheet", ".", "DrawingViews", "        \n                ", "Select", " ", "Case", " ", "oView", ".", "Name", "\n                    ", "Case", " ", "\"", "VIEW69", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "False", "\n                    ", "Case", " ", "\"", "VIEW70", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "False", "\n                    ", "Case", " ", "\"", "VIEW72", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "True", "\n                    ", "Case", " ", "\"", "VIEW73", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "True", "\n                ", "End", " ", "Select", "\n            ", "Next", "\n        ", "Next", "\n    ", "Case", " <= ", "180", "\n        ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDoc", ".", "Sheets", "\n            ", "For", " ", "Each", " ", "oView", " ", "In", " ", "oSheet", ".", "DrawingViews", "        \n                ", "Select", " ", "Case", " ", "oView", ".", "Name", "\n                    ", "Case", " ", "\"", "VIEW69", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "True", "\n                    ", "Case", " ", "\"", "VIEW70", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "True", "\n                    ", "Case", " ", "\"", "VIEW72", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "False", "\n                    ", "Case", " ", "\"", "VIEW73", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "False", "\n                ", "End", " ", "Select", "\n            ", "Next", "\n        ", "Next", "\n    ", "Case", " ", ">", " ", "180", "\n        ", "For", " ", "Each", " ", "oSheet", " ", "In", " ", "oDoc", ".", "Sheets", "\n            ", "For", " ", "Each", " ", "oView", " ", "In", " ", "oSheet", ".", "DrawingViews", "        \n                ", "Select", " ", "Case", " ", "oView", ".", "Name", "\n                    ", "Case", " ", "\"", "VIEW69", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "False", "\n                    ", "Case", " ", "\"", "VIEW70", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "False", "\n                    ", "Case", " ", "\"", "VIEW72", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "False", "\n                    ", "Case", " ", "\"", "VIEW73", "\"", "\n                        ", "oView", ".", "Suppressed", " ", "=", " ", "False", "\n                ", "End", " ", "Select", "\n            ", "Next", "\n        ", "Next", "\n", "End", " ", "Select"], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: Which version of Visual Studio C++ to use with Inventor?\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Add own properties in Title Block?\n                    ", "solution": [], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: layer control with ilogic form\n                    ", "solution": ["If", " ", "Material", " ", "=", " ", "\"", "Stainless Steel", "\"", " ", "Then", "\n    ", "ThisDrawing", ".", "Document", ".", "StylesManager", ".", "Layers", "(", "\"", "Layer Name", "\"", ")", ".", "Visible", " ", "=", " ", "True", "\n", "Else", "\n    ", "ThisDrawing", ".", "Document", ".", "StylesManager", ".", "Layers", "(", "\"", "Layer Name", "\"", ")", ".", "Visible", " ", "=", " ", "False", "\n", "End", " ", "If"], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: User Work Plane Labels\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Color per face by new renderstyle\n                    ", "solution": ["Dim oDocument As PartDocument\noDocument = ThisApplication.ActiveDocument\n\nDim oAttributeManager As AttributeManager\noAttributeManager = oDocument.AttributeManager\n\nDim oAttributeSets As AttributeSets\noAttributeSets = oDocument.AttributeSets\n\nDim oAttributeSet As AttributeSet\nDim oAttribute As Attribute\n\nDim oObjectsFinish As ObjectCollection\nDim oObjectsNotFinish As ObjectCollection\n\nDim oFace As Face\n\nDim oColor As Asset\noColor = oDocument.Assets.Item(\"BlueTest\")\n\nDim oDefaultColor As Asset\noDefaultColor = oDocument.Assets.Item(\"Default\")\n\nDim oFinish As String\noFinish = \"Something\"\n\noDocument.ComponentDefinition.ClearAppearanceOverrides\n\nIf Parameter(\"FinishSide\") = \"Both\" Then\noAttributeManager.FindAttributes(\"FaceSideLeft\", \"Color\", \"*\").Item(1).Value = oFinish\noAttributeManager.FindAttributes(\"FaceSideRight\", \"Color\", \"*\").Item(1).Value = oFinish\nElse If Parameter(\"FinishSide\") = \"Right\" Then\noAttributeManager.FindAttributes(\"FaceSideLeft\", \"Color\", \"*\").Item(1).Value = \"Default\"\noAttributeManager.FindAttributes(\"FaceSideRight\", \"Color\", \"*\").Item(1).Value = oFinish\nElse If Parameter(\"FinishSide\") = \"Left\" Then\noAttributeManager.FindAttributes(\"FaceSideLeft\", \"Color\", \"*\").Item(1).Value = oFinish\noAttributeManager.FindAttributes(\"FaceSideRight\", \"Color\", \"*\").Item(1).Value = \"Default\"\nElse If Parameter(\"FinishSide\") = \"None\" Then\noAttributeManager.FindAttributes(\"FaceSideLeft\", \"Color\", \"*\").Item(1).Value = \"Default\"\noAttributeManager.FindAttributes(\"FaceSideRight\", \"Color\", \"*\").Item(1).Value = \"Default\"\nEnd If\n\noObjectsFinish = oAttributeManager.FindObjects(\"*\", \"*\", oFinish)\nFor Each oFace In oObjectsFinish\noFace.Appearance = oColor\nNext\n\noObjectsNotFinish = oAttributeManager.FindObjects(\"*\", \"*\", \"Default\")\nFor Each oFace In oObjectsNotFinish\noFace.Appearance = oDefaultColor\nNext\n\niLogicVb.UpdateWhenDone = True"], "author": "BrandonBG"},
{"created at": [], "solution Title": "\n                        Re: VB.net GUI\n                    ", "solution": [], "author": "J-SHould"},
{"created at": [], "solution Title": "\n                        Re: Copy iProperties values to clipboard.\n                    ", "solution": ["Imports System.Windows.Forms\n \nSub Main\n  Dim PartNo As String = iProperties.Value(\"Project\", \"Part Number\")\n  Dim Revision As String = iProperties.Value(\"Project\", \"Revision Number\")\n  Dim Description As String = iProperties.Value(\"Project\", \"Description\")\n  ", "  Dim oCopiedString As String = PartNo & \" \" & Revision & \" \" & Description", "\n  Clipboard.SetText(oCopiedString)\nEnd Sub", "Imports System.Windows.Forms\n \nSub Main\n  Dim PartNo As String = iProperties.Value(\"Project\", \"Part Number\")\n  Dim Revision As String = iProperties.Value(\"Project\", \"Revision Number\")\n  Dim Description As String = iProperties.Value(\"Project\", \"Description\")\n\n  Clipboard.SetText(PartNo & \" \" & Revision & \" \" & Description)\nEnd Sub"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Managing offsets in iProperties with VBA\n                    ", "solution": ["Public Sub Test_Occurrence()\n\n' Set a reference to the assembly component definition.\nDim oAsmCompDef As AssemblyComponentDefinition\nSet oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n'Get an occurrence from the select set.\nDim oOccurrence As ComponentOccurrence\n\ni = 1\nFor Each oOccurrence In oAsmCompDef.Occurrences\n\n    'Set oOccurrence = ThisApplication.ActiveDocument.SelectSet.Item(1)\n    'Set oOccurrence = ThisApplication.ActiveDocument.\n    \n    oName = oOccurrence.Name\n    \n    ' Get the current transformation matrix from the occurrence.\n    Dim oTransform As Matrix\n    Set oTransform = oOccurrence.Transformation\n    \n    ' Move the occurrence ignoring any constraints.\n    ' Anything that causes the assembly to recompute will cause the\n    ' occurrence to reposition itself to honor the constraints.\n    oTransform.SetTranslation ThisApplication.TransientGeometry.CreateVector(i * 5, 0, 0)\n    Call oOccurrence.SetTransformWithoutConstraints(oTransform)\n    \n    i = i + 1\n  \nNext\n  \nEnd Sub"], "author": "GeorgK"},
{"created at": [], "solution Title": "\n                        Re: iProperty Thumbnail to Image\n                    ", "solution": ["<DllImport(\"oleaut32.dll\", EntryPoint:=\"OleSavePictureFile\", ExactSpelling:=True, PreserveSig:=False, SetLastError:=True)> _\n        Public Shared Sub OleSavePictureFile(Picture As stdole.IPictureDisp, <MarshalAs(UnmanagedType.BStr)> filename As String)\n        End Sub\n\nDim oPD As Inventor.IPictureDisp\noPD = thumbProp.Value\n\n\n'Check that an image was returned.  It's possible for a \n                'file to not have a thumbnail. \n                If oPD Is Nothing Then\n                    MsgBox(\"The active document doesn't have a thumbnail.\")\n                    Return\n                End If\n\n                Dim fileName As String\n                fileName = \"D:\\Temp\\PartThumbnail.wmf\"\n                OleSavePictureFile(oPD, fileName)\n\n                Dim img As System.Drawing.Image\n                img = System.Drawing.Image.FromFile(fileName, True)"], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: Default templates and the Infinite Search\n                    ", "solution": [], "author": "SutherNe"},
{"created at": [], "solution Title": "\n                        Re: VBA Insert holess from existing sketch points\n                    ", "solution": ["Public Sub HoleSample()\n    ' Check that a part is active and get it.\n    Dim oPartDoc As PartDocument\n    If ThisApplication.ActiveDocumentType = kPartDocumentObject Then\n        Set oPartDoc = ThisApplication.ActiveDocument\n    Else\n        MsgBox \"A part must be active.\"\n        Exit Sub\n    End If\n                    \n    ' Set a reference to the component definition.\n    Dim oCompDef As PartComponentDefinition\n    Set oCompDef = oPartDoc.ComponentDefinition\n    \n    ' Have the user select a sketch.\n    Dim oSketch As PlanarSketch\n    Set oSketch = ThisApplication.CommandManager.Pick(kSketchObjectFilter, \"Select a sketch with hole centers\")\n       \n    ' Create an object collection for the hole center points.\n    Dim oHoleCenters As ObjectCollection\n    Set oHoleCenters = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    ' Find the hole centers in the existing sketch and add them to the collection.\n    Dim oPoint As SketchPoint\n    For Each oPoint In oSketch.SketchPoints\n        If oPoint.HoleCenter Then\n            Call oHoleCenters.Add(oPoint)\n        End If\n    Next\n    \n    ' Create the hole feature.\n    Call oCompDef.Features.HoleFeatures.AddDrilledByThroughAllExtent( _\n                            oHoleCenters, \"1 cm\", kPositiveExtentDirection)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How to select \"Thread\" feature\n                    ", "solution": [], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: iLogic create virtual components\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: VB code for deleting files\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: iLogic to get Vault Lifecycle state for drawing\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic with CASE and ELSE?\n                    ", "solution": ["Select", " ", "Case", " ", "par_name", "\n    ", "Case", " ", "1", "\n        ", "'", "Code", "\n    ", "Case", " ", "2", "\n        ", "'", "code", "\n    ", "Case", " ", "3", "\n        ", "'", "code", "\n    ", "Case", " ", "Else", "\n        ", "'", "code", "\n", "End", " ", "Select"], "author": "bretrick30"},
{"created at": [], "solution Title": "\n                        Re: iproperty custom as text\n                    ", "solution": ["iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "MyArraylist", ".", "item", "(", "0", "))", " ", "=", " ", "CStr", "(", "strCustom1", ")"], "author": "KaufmanS"},
{"created at": [], "solution Title": "\n                        Re: Workplane visibility\n                    ", "solution": [], "author": "keithjk"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2014 Add-in won't load automatically\n                    ", "solution": [], "author": "trumpet24601"},
{"created at": [], "solution Title": "\n                        Re: Get points of tangency on circle\n                    ", "solution": [], "author": "Balaji_Ram"},
{"created at": [], "solution Title": "\n                        Re: Select-Event - Strange Behavior\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule to execute all rules in an assembly and sub-assemblies\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: [VBA] Get back the current path of active document\n                    ", "solution": ["Function mpath(oDoc As Inventor.Document) As String\n    mpath = Left(oDoc.File.FullFileName, InStrRev(oDoc.File.FullFileName, \"\\\"))\nEnd Function"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: A Reference to 'Autodesk Inventor Object Library' Could not be added Inv 201\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: API fails under Inventor 2016 and Visual Studio 2010. Help!\n                    ", "solution": [], "author": "liminma8458"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Access Surface Bodies\n                    ", "solution": ["         For Each SurfaceBody In CompDef.WorkSurfaces\n            oBody = oCompDef.WorkSurfaces.Item(i).SurfaceBodies.Item(1)\n            MsgBox(oBody.Name)\n            i = i + 1\n        Next"], "author": "CAD_CAM_MAN"},
{"created at": [], "solution Title": "\n                        Re: Open a file with VBA Inventor\n                    ", "solution": ["Set objExcel = CreateObject(\"Excel.Application\")\nSet objWorkbook = objExcel.Workbooks.Open(\"c:\\test.xls\")\n\nobjExcel.Application.Visible = True\n\nobjExcel.ActiveWorkbook.Close\nobjExcel.Application.Quit"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: rule to save an *iam\n                    ", "solution": [], "author": "Balaji_07"},
{"created at": [], "solution Title": "\n                        Re: Issues with FormattedText\n                    ", "solution": [], "author": "gilsdorf.e"},
{"created at": [], "solution Title": "\n                        Re: Launch userfomr from Ribbon\n                    ", "solution": ["Sub test()", " Dim iLogicAddinGuid As String", " iLogicAddinGuid = \"{3BDD8D79-2179-4B11-8A5A-257B1C0263AC}\"", " ", " Dim addin As Inventor.ApplicationAddIn", " Dim tempaddin As Inventor.ApplicationAddIn", " For Each addin In ThisApplication.ApplicationAddIns", "  If addin.ClassIdString = iLogicAddinGuid Then", "   Exit For", "  End If", " Next", " ", " If (addin.Activated = False) Then", "  addin.Activate", " End If", " ", " addin.Automation.RunRule ThisApplication.ActiveDocument, \"MyRule\"", " ", "End Sub", "iLogicForm", ".", "Show", "(", "\"", "Form 1", "\"", ")", "\n"], "author": "pberube"},
{"created at": [], "solution Title": "\n                        Re: ILOGIC TO CHANGE BOM STRUCTURE\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Close parameters window with API\n                    ", "solution": ["    Dim selectCmd As ControlDefinition\n    selectCmd = invApp.CommandManager.ControlDefinitions.Item(\"AppSelectNorthwestArrowCmd\")\n    selectCmd.Execute"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Drallnut\n                    ", "solution": [], "author": "ASchlaack"},
{"created at": [], "solution Title": "\n                        Re: edit color of drawing layers with materials from parts\n                    ", "solution": [], "author": "salariua"},
{"created at": [], "solution Title": "\n                        Re: Create Contour Flange\n                    ", "solution": ["Sub Test()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As SheetMetalComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    Dim oSketch As PlanarSketch\n    Set oSketch = oDef.Sketches.Item(1)\n    \n    ' Create a path.\n    Dim oPath As Path\n    Set oPath = oDef.Features.CreatePath(oSketch.SketchLines.Item(1))\n    \n    Dim oContourFlangeFeatures As ContourFlangeFeatures\n    Set oContourFlangeFeatures = oDef.Features.ContourFlangeFeatures\n\n    ' Create the flange definition.\n    Dim cfDef As ContourFlangeDefinition\n    Set cfDef = oContourFlangeFeatures.CreateContourFlangeDefinition(oPath)\n    'set the distance extent\n    Call cfDef.SetDistanceExtent(5, PartFeatureExtentDirectionEnum.kSymmetricExtentDirection)\n    \n    Dim oCF As ContourFlangeFeature\n    Set oCF = oContourFlangeFeatures.Add(cfDef)\n\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Extract bendID or bendorder number from flatpattern\n                    ", "solution": ["        Dim oBendorderNumber As Long\n        Dim oBendorderSource As BendOrderSourceTypeEnum\n        Call oBendresult.GetBendOrder(oBendorderNumber, oBendorderSource)"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: dwg sheet size in custom model iprop\n                    ", "solution": [], "author": "JamieS"},
{"created at": [], "solution Title": "\n                        Re: Public member 'Visible' on type 'BrowserFolder' not found.\n                    ", "solution": [], "author": "ASchlaack"},
{"created at": [], "solution Title": "\n                        Re: How to assign Structured Item numbers to a Iproperties field\n                    ", "solution": ["Sub Main\nDim oAssemblyDocument As AssemblyDocument\noAssemblyDocument = ThisDoc.Document\n\nDim oAssemblyComponentDefinition As AssemblyComponentDefinition\noAssemblyComponentDefinition = oAssemblyDocument.ComponentDefinition\n\nDim oBOM As BOM\noBOM = oAssemblyComponentDefinition.BOM\noBom.StructuredViewEnabled = True\nDim oBOMView As BOMView\noBOMView = oBom.BOMViews(2) 'Structured view\noBom.StructuredViewFirstLevelOnly = False\noBom.StructuredViewDelimiter = \".\"\n\nCall RecursiveCheckAndSetProps(oBOMView.BOMRows)\n\nEnd Sub\n\nSub RecursiveCheckAndSetProps(ByVal oRowsElements As BOMRowsEnumerator)\n\n        For Each oBOMRow As BOMRow In oRowsElements\n            Dim oComponentDefinition As ComponentDefinition\n            oComponentDefinition = oBOMRow.ComponentDefinitions.Item(1)\n\n            Dim oBOMItemNumber As String\n            oBOMItemNumber = oBOMRow.ItemNumber() 'this is item number in the BOM\n           ' MessageBox.Show(oBOMItemNumber, \"BOM Number\") 'just to show what's going on\n            Dim oComponentDefinitionPropertySet As PropertySet\n            oComponentDefinitionPropertySet = oComponentDefinition.Document.PropertySets.Item(\"Inventor User Defined Properties\")\n            'custom property tab\n \t\t\tTry\n                'if already exists then set it \n                oComponentDefinitionPropertySet.Item(\"BOM Number\").Value = oBOMItemNumber\n            Catch ex As Exception\n                'else add it\n                oComponentDefinitionPropertySet.Add(oBOMItemNumber, \"BOM Number\")\n            End Try\n            'creates the custom property and inputs the value\n            If Not oBOMRow.ChildRows Is Nothing Then\n\t\t\t\tCall RecursiveCheckAndSetProps(oBOMRow.ChildRows)\n            End If\n        Next\nEnd Sub\n\t\t", "PropertySets.Item(3)'correct  instead of (2)'wrong", "    Sub Main()\n        Dim oAssemblyDocument As AssemblyDocument\n        oAssemblyDocument = ThisDoc.Document\n\n        Dim oAssemblyComponentDefinition As AssemblyComponentDefinition\n        oAssemblyComponentDefinition = oAssemblyDocument.ComponentDefinition\n\n        Dim oBOM As BOM\n        oBOM = oAssemblyComponentDefinition.BOM\n        oBom.StructuredViewEnabled = True\n        Dim oBOMView As BOMView\n        oBOMView = oBom.BOMViews(2) 'Structured view\n        oBom.StructuredViewFirstLevelOnly = False\n        oBom.StructuredViewDelimiter = \".\"\n\n        Call RecursiveCheckAndSetProps(oBOMView.BOMRows)\n\n    End Sub\n\n    Sub RecursiveCheckAndSetProps(ByVal oRowsElements As BOMRowsEnumerator)\n\n        For Each oBOMRow As BOMRow In oRowsElements\n            Dim oComponentDefinition As ComponentDefinition\n            oComponentDefinition = oBOMRow.ComponentDefinitions.Item(1)\n\n            Dim oBOMItemNumber As String\n            oBOMItemNumber = oBOMRow.ItemNumber() 'this is item number in the BOM\n            ' MessageBox.Show(oBOMItemNumber, \"BOM Number\") 'just to show what's going on\n\t\t\t\n'\t\t\t'if you want standard iproperty (e.g. \"project\")        \n            Dim oComponentDefinitionPropertySet As PropertySet\n            oComponentDefinitionPropertySet = oComponentDefinition.Document.PropertySets.Item(3) 'design tracking\n            oComponentDefinitionPropertySet.ItemByPropId(7).Value = oBOMItemNumber  '7 is project property\n\t\t\t\n'\t\t\t'if you want custom iproperty then\n'\t\t\tDim oComponentDefinitionPropertySet As PropertySet\n'            oComponentDefinitionPropertySet = oComponentDefinition.Document.PropertySets.Item(\"Inventor User Defined Properties\")\n'            'custom property tab\n' \t\t\tTry\n'                'if already exists then set it \n'                oComponentDefinitionPropertySet.Item(\"BOM Number\").Value = oBOMItemNumber\n'            Catch ex As Exception\n'                'else add it\n'                oComponentDefinitionPropertySet.Add(oBOMItemNumber, \"BOM Number\")\n'            End Try\n'            'creates the custom property and inputs the value\n\n            If Not oBOMRow.ChildRows Is Nothing Then\n                Call RecursiveCheckAndSetProps(oBOMRow.ChildRows)\n            End If\n        Next\n    End Sub"], "author": "fulvio81"},
{"created at": [], "solution Title": "\n                        Re: inventor.application.caption\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Suppression component in Sub-Assembly\n                    ", "solution": [], "author": "jam_bhatti"},
{"created at": [], "solution Title": "\n                        Re: Parts reappearing\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Ilogic batch output PDFs from assembly file\n                    ", "solution": [], "author": "r.vangurp"},
{"created at": [], "solution Title": "\n                        Re: Level of Detail VS View Reps\n                    ", "solution": [], "author": "beardrafting"},
{"created at": [], "solution Title": "\n                        Re: Change hole type with iLogic\n                    ", "solution": ["CBoreDiameter Input Variant that defines the diameter of the counterbore. This can be either a numeric value or a string. A parameter for this value will be created and the supplied string or value is assigned to the parameter. If a value is input, the units are centimeters. ", "If a string is input, the units can be specified as part of the string or it will default to the current length units.", " ", "Trigger = HoleType\n\nDim partDoc As PartDocument\npartDoc = ThisApplication.ActiveDocument\nDim partDef As PartComponentDefinition\npartDef = partDoc.ComponentDefinition\nDim hole As HoleFeature\nhole = partDef.Features.Item(\"Hole2\")\n\n\n    If HoleType = \"CBore\" Then\n        hole.SetCBore(\"0.2 in\", \"0.0625 in\")\n\tElse If HoleType = \"CSink\" Then\n        hole.SetCSink(\"0.2 in\", \"82 deg\")\n\tElse If HoleType = \"SpotFace\" Then\n        hole.SetSpotFace(\"0.2 in\", \"0.0625 in\")\n\tElse If HoleType = \"Drilled\" Then\n        hole.SetDrilled()\n    End If"], "author": "Ken.Jones"},
{"created at": [], "solution Title": "\n                        Re: My Firs Add- In Inventor\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: When Run iLogic rule got pop up box: Excel is already open\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Get iLogic to wait for form completion\n                    ", "solution": [], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Run iLogic from Assembly to affect all parts\n                    ", "solution": ["Dim oParams As Inventor.Parameters = docFile.ComponentDefinition.Parameters"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Changing flush constraint offset with VB.NET\n                    ", "solution": [], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Creating materials with accurate properties\n                    ", "solution": [], "author": "ccarreiras"},
{"created at": [], "solution Title": "\n                        Re: Access to Content Center part source files\n                    ", "solution": [], "author": "M"},
{"created at": [], "solution Title": "\n                        Re: Bend Note\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Task Scheduler doesn't have function about Vault\n                    ", "solution": [], "author": "FlynnZou"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2015 loses connection with VBA when calling an AddIn\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Export sat file in mm how to do this\n                    ", "solution": ["Imports Inventor\n\nModule CreateSatFile\n\n    Private m_invApp As Inventor.Application\n\n    Public Sub ExportToSat()\n\n        m_invApp = GetObject(, \"Inventor.Application\")\n\n        ' Get the SAT translator Add-In.  \n        Dim oSATTrans As TranslatorAddIn\n\n        oSATTrans = m_invApp.ApplicationAddIns.ItemById(\"{89162634-02B6-11D5-8E80-0010B541CD80}\")\n\n        If oSATTrans Is Nothing Then\n            MsgBox(\"Could not access SAT translator.\")\n            Exit Sub\n        End If\n\n        Dim oContext As TranslationContext\n        oContext = m_invApp.TransientObjects.CreateTranslationContext\n        Dim oOptions As NameValueMap\n        oOptions = m_invApp.TransientObjects.CreateNameValueMap\n\n        If oSATTrans.HasSaveCopyAsOptions(m_invApp.ActiveDocument, oContext, oOptions) Then\n\n            oOptions.Value(\"ExportUnits\") = 5\n\n            oContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n\n            Dim oData As DataMedium\n\n            oData = m_invApp.TransientObjects.CreateDataMedium\n\n            oData.FileName = \"C:\\PublishFolderLocal\\TEST.sat\"\n\n            Call oSATTrans.SaveCopyAs(m_invApp.ActiveDocument, oContext, oOptions, oData)\n\n        End If\n\n    End Sub\n\nEnd Module"], "author": "kbo"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Pick List\n                    ", "solution": [], "author": "douthett"},
{"created at": [], "solution Title": "\n                        Re: File name to iProperties on save\n                    ", "solution": ["If m_inventorApplication.ActiveDocument.DocumentType = DocumentTypeEnum.kPartDocumentObject Or m_inventorApplication.ActiveDocument.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then\n\tDim FileName As String\n\tFileName = System.IO.Path.GetFileNameWithoutExtension(RuleArguments(\"SaveFileName\"))\n\tIf String.IsNullOrEmpty(FileName) Then\n\t\tFileName = ThisDoc.FileName(False)\n\tEnd If\n\tDim Split As String() = FileName.Split(\" \".ToCharArray(), 2)\n\tIf (Split.Length > 1) Then\n\t\tiProperties.Value(\"Project\", \"Part Number\") = Split(0)\n\t\tiProperties.Value(\"Project\", \"Description\") = Split(1)\n\tElseIf (Split(0).Length > 0) Then\n\t\tiProperties.Value(\"Project\", \"Description\") = Split(0)\n\tEnd If\nEnd If", "\u00a0", "\u00a0", "\u00a0"], "author": "Owner2229"},
{"created at": [], "solution Title": "\n                        Re: Display custom iproperties in Message box\n                    ", "solution": ["Dim", " ", "sMessage", " ", "As", " ", "String", "\n\n", "sMessage", " ", "=", " ", "\"", "Do you want to change the Critical or Product code?", "\"", " ", "&", " ", "vbNewLine", " ", "&", " ", "\"", "Critical = ", "\"", " ", "&", " ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ",", "\"", "Critical", "\"", ")", " ", "&", " ", "vbNewLine", " ", "&", " ", "\"", "Product = ", "\"", " ", "&", " ", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ",", "\"", "Product", "\"", ")", "\n \n\n\n", "Question", " ", "=", " ", "MessageBox", ".", "Show", "(", "sMessage", ", ", "\"", "Critical and Product Codes", "\"", ", ", "MessageBoxButtons", ".", "YesNo", ")", "\n\n\n", "If", " ", "question", " ", "=", " ", "vbNo", " ", "Then", "\n", "Return", "\n", "Else", "\n", "MultiValue", ".", "SetList", "(", "\"", "vParam_Product", "\"", ", ", "\"", "AFC", "\"", ", ", "\"", "Batch Haulage", "\"", ", ", "\"", "Bolters", "\"", ", ", "\"", "C&A", "\"", ", ", "\"", "Continuous Haulage", "\"", ", ", "\"", "Converyors", "\"", ", ", "\"", "Cutting & Chain", "\"", ", ", "\"", "Hard Rock", "\"", ", ", "\"", "Joy Global Librarian", "\"", ", ", "\"", "Mine Air", "\"", ", ", "\"", "Miners", "\"", ", ", "\"", "PRS", "\"", ", ", "\"", "Road Header", "\"", ", ", "\"", "Shearers", "\"", ")", "\n\n", "'", "shows the form for Critical and Product code", "\n", "iLogicForm", ".", "ShowGlobal", "(", "\"", "Critical and Product Codes", "\"", ")", "\n\n", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ",", "\"", "Product", "\"", ")", " ", "=", "vParam_Product", "\n", "End", " ", "If"], "author": "RodrigoEiras"},
{"created at": [], "solution Title": "\n                        Re: Ilogic rule with vba\n                    ", "solution": [], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Not finding a edge loop that IsOuterEdgeLoop using vb.net, Inventor 2015\n                    ", "solution": [], "author": "awatt"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2016 enumerating outer edges\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic (or VBA) to revise display appearance of part(s)\n                    ", "solution": ["    ", "Dim", " ", "oAssy", " ", "As", " ", "Inventor", ".", "AssemblyDocument", "\n    ", "Dim", " ", "oCompOc", " ", "As", " ", "Inventor", ".", "ComponentOccurrence", "\n    ", "Dim", " ", "oSubDoc", " ", "As", " ", "Inventor", ".", "Document", "\n    ", "Dim", " ", "oCompDef", " ", "As", " ", "ComponentDefinition", "\n    ", "Dim", " ", "oPart", " ", "As", " ", "Inventor", ".", "PartDocument", "\n    \n    ", "Dim", " ", "oAsset", " ", "As", " ", "Asset", "\n    ", "Dim", " ", "oLib", " ", "As", " ", "AssetLibrary", "\n    ", "Dim", " ", "sAppearance", " ", "As", " ", "String", "\n    \n    ", "Dim", " ", "invCustomPropertySet", " ", "As", " ", "PropertySet", "\n    ", "Dim", " ", "invAppearanceProperty", " ", "As", " ", "Inventor", ".", "Property", "\n    \n    ", "oLib", " ", "=", " ", "ThisApplication", ".", "AssetLibraries", "(", "\"", "Autodesk Appearance Library", "\"", ")", "\n    ", "oDoc", " ", "=", " ", "ThisDoc", ".", "Document", "\n\n    ", "If", " ", "oDoc", ".", "DocumentType", " ", "=", " ", "Inventor", ".", "DocumentTypeEnum", ".", "kAssemblyDocumentObject", " ", "Then", "\n      ", "oAssy", " ", "=", " ", "oDoc", "\n      ", "For", " ", "Each", " ", "oCompOc", " ", "In", " ", "oAssy", ".", "ComponentDefinition", ".", "Occurrences", "\n        ", "Select", " ", "Case", " ", "oCompOc", ".", "Name", "\n            ", "Case", " ", "\"", "TestCylinder:1", "\"", "\n                ", "oCompDef", " ", "=", " ", "oCompOc", ".", "Definition", "\n                ", "oPart", " ", "=", " ", "oCompDef", ".", "Document", "\n    \n                ", "invCustomPropertySet", " ", "=", " ", "oPart", ".", "PropertySets", ".", "Item", "(", "\"", "Inventor User Defined Properties", "\"", ")", "\n                ", "invAppearanceProperty", " ", "=", " ", "invCustomPropertySet", ".", "Item", "(", "\"", "Appearance", "\"", ")", "\n                ", "sAppearance", " ", "=", " ", "invAppearanceProperty", ".", "Value", "\n                ", "oAsset", " ", "=", " ", "oLib", ".", "AppearanceAssets", "(", "sAppearance", ")", "\n                \n                ", "oPart", ".", "ActiveAppearance", " ", "=", " ", "oAsset", "\n                        \n        ", "End", " ", "Select", "        \n\n      ", "Next", "\n      \n    ", "End", " ", "If"], "author": "yosso22"},
{"created at": [], "solution Title": "\n                        Re: Check if file is open/inuse when saving as PDF using iLogic\n                    ", "solution": ["Function IsFileInUse(filePath As String) As Boolean\n\tIsFileInUse = False\n\tIf System.IO.File.Exists(filePath) Then\n\t\tDim fileInfo As System.IO.FileInfo\n\t\tDim stream As System.IO.FileStream\n\t\t\n\t\tfileInfo = New System.IO.FileInfo(filePath)\n\t\tTry\n\t\t\tstream = fileInfo.Open(System.IO.FileMode.Open, System.IO.FileAccess.ReadWrite, System.IO.FileShare.None)\n\t\tCatch\n\t\t\tIsFileInUse = True\n\t\tFinally\n\t\t\tIf stream IsNot Nothing Then\n\t\t\t\tstream.Close()\n\t\t\tEnd If\n\t\tEnd Try\n\tEnd If\nEnd Function"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Parts List \"Is ballooned\" boolean\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Another ilogic Print Problem\n                    ", "solution": ["oPrintMgr.PaperSize = PaperSizeEnum.kPaperSizeA3", "oPrintMgr", ".", "Scalemode", " ", "=", " ", "kCustomScale", "\n", "oPrintMgr", ".", "ScaleMode", " ", "=", " ", "PrintScaleModeEnum", ".", "kPrintBestFitScale"], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Inventor Add-in Templates for 2015\n                    ", "solution": [], "author": "ebuckner"},
{"created at": [], "solution Title": "\n                        Re: Saving drawing title block templates\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: api support for frame analysis\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Count Inspection Dimensions for use in custom inspection dim table\n                    ", "solution": ["    oGenDimCount = 0\n    Dim oDim As DrawingDimension\n    For Each oDim In oSheet.DrawingDimensions\n        If oInspDim.IsInspectionDimension Then\n            oGenDimCount = oGenDimCount + 1\n        End If\n    Next"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Event trigger \"after document opens\" is enacted before the parts l\n                    ", "solution": [], "author": "santoshr0114"},
{"created at": [], "solution Title": "\n                        Re: Get ComponentOccurence from BOMRow\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Drawing view scales\n                    ", "solution": ["'active drawing document\nDim oDrawDoc As DrawingDocument=ThisDrawing.Document", "\n'get scale of all views in the active sheet\nDim oSheet As Sheet = oDrawDoc.ActiveSheet\n\nDim St As String = \"Sheet:   \" & oSheet.Name & vbNewLine & vbNewLine\n\nFor Each oView As DrawingView In oSheet.DrawingViews\n\tSt = St & \"View:   \" & oView.Name & \"   \" & _ \n\t\t       \"Scale:  \" & oView.Scale & vbNewLine \nNext\n\nMessageBox.Show( St, \"View Scale\" )"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic string\n                    ", "solution": ["Flpath", "=", "(", "Mid", "(", "ThisDoc", ".", "WorkspacePath", "()", ",16", "))", "Flpdir", "=", "\"", "\\", "\"", "Folderpos", "=", "InStr", "(", "Flpath", ", ", "Flpdir", ")", "oFolder", "=", "Folderpos", "-", "1", "Flp", "=", "(", "Left", "(", "Flpath", ",", "oFolder", "))"], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: vb.net - determine iLogic Rules and Events on the active document\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Edit solid bodies color\n                    ", "solution": ["Public Sub SetBodyColor()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    Dim body As SurfaceBody\n    For Each body In partDoc.ComponentDefinition.SurfaceBodies\n        ' Get the Autodesk Material Library.\n        Dim lib As AssetLibrary\n        Set lib = ThisApplication.AssetLibraries.item(\"AD121259-C03E-4A1D-92D8-59A22B4807AD\")\n        \n        ' Randomly generate an index for an item within the libary.\n        Dim index As Long\n        index = Int((lib.AppearanceAssets.Count * Rnd) + 1)\n        \n        ' Get the random appearance.\n        Dim libAppearance As Asset\n        Set libAppearance = lib.AppearanceAssets.item(index)\n        \n        ' Get the local version of the appearance, if it exists.\n        Dim localAppearance As Asset\n        On Error Resume Next\n        Set localAppearance = partDoc.AppearanceAssets.item(libAppearance.Name)\n        If Err.Number <> 0 Then\n            ' Copy the asset into the part.\n            Set localAppearance = libAppearance.CopyTo(partDoc)\n        End If\n        On Error GoTo 0\n        \n        ' Assign the appearance to the body.\n        body.appearance = localAppearance\n    Next\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Capture active window\n                    ", "solution": ["Public Sub SaveCurrentWindowAsThumbnail()\n    Dim window As View\n    Set window = ThisApplication.ActiveView\n    \n    Dim filename As String\n    filename = \"C:\\Temp\\IVWindow.png\"\n    Call window.SaveAsBitmap(filename, 250, 250)\n    \n    Dim doc As Document\n    Set doc = ThisApplication.ActiveDocument\n    \n    Call doc.SetThumbnailSaveOption(kImportFromFile, filename)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How to set work plane visibility false programmatically ?\n                    ", "solution": ["For Each oWP In ThisDoc.Document.ComponentDefinition.WorkPlanes\n\tIf oWP.Visible = True Then\n\t\toWP.Visible = False\n\tEnd If\nNext"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Camera.SaveAsBitmap Resets Background Color\n                    ", "solution": ["Sub CamSaveAsBitmap1()\n\n    Dim view As view\n    Set view = ThisApplication.ActiveView\n    \n    Dim camera As camera\n    Set camera = view.camera\n    \n    Dim topClr As color\n    Set topClr = ThisApplication.TransientObjects.CreateColor(255, 0, 0)\n    \n    Dim bottomClr As color\n    Set bottomClr = ThisApplication.TransientObjects.CreateColor(0, 255, 0)\n    \n    Call camera.SaveAsBitmap(\"C:\\Temp\\test.png\", view.width, view.height, topClr, bottomClr)\n\nEnd Sub\n\nSub CamSaveAsBitmap2()\n\n    Dim doc As Document\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim view As view\n    Set view = doc.views.Add\n    \n    Dim camera As camera\n    Set camera = view.camera\n    \n    Dim topClr As color\n    Set topClr = ThisApplication.TransientObjects.CreateColor(255, 0, 0)\n    \n    Dim bottomClr As color\n    Set bottomClr = ThisApplication.TransientObjects.CreateColor(0, 255, 0)\n    \n    Call camera.SaveAsBitmap(\"C:\\Temp\\test.png\", view.width, view.height, topClr, bottomClr)\n\n    view.Close\n\nEnd Sub\n\nSub CamSaveAsBitmap3()\n\n    Dim doc As Document\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim view As view\n    Set view = ThisApplication.ActiveView\n\n    Dim camera As camera\n    Set camera = ThisApplication.TransientObjects.CreateCamera\n    \n    camera.SceneObject = doc.ComponentDefinition\n    \n    camera.ViewOrientationType = kIsoTopLeftViewOrientation\n    camera.Fit\n    camera.ApplyWithoutTransition\n    \n    Dim topClr As color\n    Set topClr = ThisApplication.TransientObjects.CreateColor(255, 0, 0)\n    \n    Dim bottomClr As color\n    Set bottomClr = ThisApplication.TransientObjects.CreateColor(0, 255, 0)\n    \n    Call camera.SaveAsBitmap(\"C:\\Temp\\test.png\", view.width, view.height, topClr, bottomClr)\n\nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Find and list with ilogic\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: WorkPoint @ Intersecting Axis and Face\n                    ", "solution": ["Public Sub AddWorkPointAtIntersection()\n    Dim fc As face\n    Set fc = ThisApplication.CommandManager.Pick(kPartFaceFilter, \"Select a face.\")\n    \n    Dim axis As WorkAxis\n    Set axis = ThisApplication.CommandManager.Pick(kWorkAxisFilter, \"Select a work axis.\")\n    \n    Dim partDef As PartComponentDefinition\n    Set partDef = axis.Parent\n    \n    Dim wp As WorkPoint\n    Set wp = partDef.WorkPoints.AddByCurveAndEntity(axis, fc)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Material Asset Inventor 2014\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: OverrideQuantity using iLogic\n                    ", "solution": ["dim NN as integer = 99\nThisBOM.OverrideQuantity(\"Model Data\", \"Steps\", NN)"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Access objects available to Select Other command\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: rgs file for AddIns\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: If regsvr32 registers my AddIn why does the .AddIn file require the Assembly\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Import Parameter from Part/Assembly\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: iLogic title block customization\n                    ", "solution": ["Project,Client", "Dim FileName As String = \"C:\\Setup.ini\" \nDim objReader As New System.IO.StreamReader(FileName)\nLineOfText = objReader.ReadLine()\nAryline = LineOfText.Split(\",\")\nDim Project As String = Aryline(0)\nDim Client As String = Aryline(1)\niProperties.Value(\"Project\", \"Part Number\") = Project\niProperties.Value(\"Custom\", \"Client\") = Client\nobjReader.Close()"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: VBA script to constrain multiple parts\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: macro for copying material\n                    ", "solution": ["Public Sub MatCopy()\n'JDK 2013\n    On Error Resume Next\n    \n    ' Get the Assy Document\n    Dim oAssDoc As AssemblyDocument\n    Set oAssDoc = ThisApplication.ActiveDocument\n    \n    ' Select occurrence\n    Dim oOccurrence As ComponentOccurrence\n    Set oOccurrence = oAssDoc.SelectSet.Item(1)\n        If Err Then\n            MsgBox \"An occurrence must be selected.\"\n            Err.Clear\n            On Error GoTo 0\n            Exit Sub\n        End If\n    \n    ' Define name and material as strings\n    sName = oOccurrence.name\n    sMat = oOccurrence.Definition.Material.name\n    \n    ' Get custom property set\n    Dim customPropSet As PropertySet\n    Set customPropSet = oAssDoc.PropertySets( _\n    \"Inventor User Defined Properties\")\n    \n    ' Add new property with name and material\n    Call customPropSet.Add(sMat, sName)\n    \n    ' Msg the material\n    MsgBox (sName & \" = \" & sMat)\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Virtual Parts - Materials\n                    ", "solution": ["' Change Material\noVirt.Material = oAssDoc.Materials.Item(\"Solid Wood\")", "Dim oAssDoc As AssemblyDocument = ThisApplication.ActiveDocument\nDim oAssDef As AssemblyComponentDefinition = oAssDoc.ComponentDefinition\n\n' virtual component\nDim sName As String = \"Right_Side\"\n\nDim oOccurrence As ComponentOccurrence\n\tFor Each oOccurrence In oAssDef.Occurrences\n\t\t' Look for virtual components\n\t\tIf TypeOf oOccurrence.Definition Is VirtualComponentDefinition Then\n\t\t\t' Look for name match\n\t\t\tsNameS = Split(oOccurrence.Name, \":\")\n\t\t\tIf sName & \":\" & sNameS(1) = oOccurrence.Name Then\n\t\t\t\tMsgBox(\"We found the right one\")\n\t\t\t\t' Define Comp Def\n\t\t\t\tDim oVirt As VirtualComponentDefinition \n\t\t\t\toVirt = oOccurrence.Definition\n\t\t\t\t' Change Material\n\t\t\t\toVirt.Material = oAssDoc.Materials.Item(\"Solid Wood\")\n\t\t\t\tMsgBox(\"Mat is \" & oVirt.Material.Name)\n\t\t\tEnd If\n\t\tEnd If\n\tNext"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: copy and paste symbols in one idw to another idw\n                    ", "solution": ["Public Sub CopySymbols()\n'JDK 2013\n    Dim oApp As Inventor.Application\n    Set oApp = ThisApplication\n    Dim thisIDW As DrawingDocument\n    Set thisIDW = oApp.ActiveDocument\n    \n    'Define source path of Symbol Drawing\n    Dim pathIDW As String\n    pathIDW = \"J:\\\\Templates\\Symbols.idw\"\n    \n    Dim sourceIDW As DrawingDocument\n    Set sourceIDW = oApp.Documents.Open(pathIDW, False)\n    \n    Dim symbolDef As SketchedSymbolDefinition\n    \n    'Copy all the symbols into active drawing\n    For Each symbolDef In sourceIDW.SketchedSymbolDefinitions\n        Call symbolDef.CopyTo(thisIDW, ReplaceExisting:=True)\n    Next\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Inv 2014 Removes support for VBA auto-run Macros\n                    ", "solution": [], "author": "karthur1"},
{"created at": [], "solution Title": "\n                        Re: Global Form Directory Issue\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Code to load *.ivb files\n                    ", "solution": ["ThisApplication.VBAProjects.Open \"J:\\PathToProject\\VBProject\\YourProject.ivb\""], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: GetExistingFacets VBA 7 and VB.NET showsdifferent and fails in VB.net\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Get \"IDW\" base view type using a VBA Macro\n                    ", "solution": ["Public Sub BVType()\n' JDK 2013\nDim oIDW As DrawingDocument\nSet oIDW = ThisApplication.ActiveDocument\nDim oSheet As Sheet\nSet oSheet = oIDW.ActiveSheet\nDim oView As DrawingView\n    For Each oView In oSheet.DrawingViews\n        If oView.ViewType = kStandardDrawingViewType Then\n            Select Case oView.ReferencedFile.DocumentType\n                Case kAssemblyDocumentObject:\n                    MsgBox (oView.name & \" Is A Assembly\")\n                Case kPartDocumentObject:\n                    MsgBox (oView.name & \" Is A Part\")\n            End Select\n        End If\n    Next\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: How do you change the browser node name in a drawing?\n                    ", "solution": ["oDoc = ThisDoc.Document\noSheets = oDoc.Sheets\n\tFor Each oSheet In oSheets\n\t\toSheet.activate\n\t\toView = oSheet.DrawingViews.Item(1)\n\t\tmodelName = oView.ReferencedDocumentDescriptor.ReferencedDocument\n\t\toProp = modelName.PropertySets.Item(\"Design Tracking Properties\")\n\t\tActiveSheet.Sheet.Name = oProp.Item(\"Part Number\").Value \n\tNext\noSheets(1).activate"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: change position of representation with shortcut\n                    ", "solution": ["Sub ActivateNextPositionalRepresentation()\n    Dim doc As AssemblyDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim rm As RepresentationsManager\n    Set rm = doc.ComponentDefinition.RepresentationsManager\n    \n    Dim prs As PositionalRepresentations\n    Set prs = rm.PositionalRepresentations\n    \n    Dim index As Integer\n    For index = 1 To prs.Count\n        If rm.ActivePositionalRepresentation Is prs(index) Then Exit For\n    Next\n    \n    index = index Mod prs.Count + 1\n    \n    Call prs(index).Activate\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: \"No Browser\" when creaing a new part from scratch\n                    ", "solution": ["HRESULT CreateNewPartDoc(\n\tCComPtr<Application> pInventorApp, \n\tCComPtr<PartDocument> &pPartDoc)\n{\n\tHRESULT hr = S_OK;\n\n\tCComVariant pSubDocType;\n\tCComBSTR sTemplate;\n\n\thr = pInventorApp->GetTemplateFile(\n\t\tkPartDocumentObject, \n\t\tkDefaultSystemOfMeasure, \n\t\tkDefault_DraftingStandard, \n\t\tpSubDocType, \n\t\t&sTemplate);\n\n\tif(hr != S_OK)\n\t{\n\t\treturn hr;\n\t}\n\n    CComPtr<Document> pDoc; \n\n\thr = pInventorApp->Documents->Add(\n\t\tkPartDocumentObject, \n\t\tsTemplate, \n\t\tVARIANT_TRUE, \n\t\t&pDoc);\n\n\tif(hr != S_OK)\n\t{\n\t\treturn hr;\n\t}\n        \n\tpPartDoc = CComQIPtr<PartDocument>(pDoc);\n\n\treturn hr;\n}"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: AddByCenterRadius, can the last parameter be NULL in C++?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: A global transient geometry object?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: no inventor  add in template 2014\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Dimensions of Assembly in idw Drawing\n                    ", "solution": [], "author": "chris.atherton"},
{"created at": [], "solution Title": "\n                        Re: Symbol Insertion point\n                    ", "solution": ["Dim oApp As Inventor.Application = ThisApplication\nDim thisIDW As DrawingDocument = oApp.ActiveDocument\nDim oSheet As Sheet = thisIDW.ActiveSheet\nDim oSymDef As SketchedSymbolDefinition = thisIDW.SketchedSymbolDefinitions.Item(\"APPROVAL STAMP\")\nDim myPoint As Point2d = oApp.TransientGeometry.CreatePoint2d(1, 6)\nDim oSymbol As SketchedSymbol = oSheet.SketchedSymbols.Add(oSymDef, myPoint)"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to change parts list style\n                    ", "solution": [], "author": "streharg"},
{"created at": [], "solution Title": "\n                        Re: ILogic: how to query which environment I am in\n                    ", "solution": ["Select Case ThisDoc.Document.DocumentType\n\tCase 12289: MSG = \"Unknown Document\"\n\tCase 12290: MSG = \"Part Document\"\n\tCase 12291: MSG = \"Assembly Document\"\n\tCase 12292: MSG = \"Drawing Document\"\n\tCase 12293: MSG = \"Design Element\"\n\tCase 12294: MSG = \"Presentation Document\"\n\tCase 12295: MSG = \"Foreign Model\"\n\tCase 12296: MSG = \"SAT File\"\nEnd Select\n\nIf TypeOf ThisApplication.ActiveEditObject Is Sketch Then\n\tMsgBox(MSG & \" with sketch active\")\nElse\n\tMsgBox(MSG)\nEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Material change using Inventor API\n                    ", "solution": ["oDoc.ComponentDefinition.Material = oDoc.Materials.Item(\"Titanium\")"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: how to open custom properties window using vba\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: Sketch Redefine\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: LOD of subassemblies\n                    ", "solution": ["For Each oOcc As ComponentOccurrence In oMainAssyDef.Occurrences\n  If oOcc.Suppressed Then Continue For\n  Try\n    If oOcc.DefinitionDocumentType _\n         = DocumentTypeEnum.kAssemblyDocumentObject Then\n      oOcc.SetLevelOfDetailRepresentation(TargetLODName)\n    End If\n  Catch\n  End Try\nNext"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Caterpillar weld problems\n                    ", "solution": ["Private Sub modifyView(ByVal invDoc As DrawingDocument)\n        Dim view_1 As DrawingView\n        Dim sheet_1 As Sheet\n       \n        sheet_1 = invDoc.Sheets(1)\n        For Each view_1 In sheet_1.DrawingViews\n            If view_1.DisplayThreadFeatures = True Then\n                view_1.DisplayThreadFeatures = False\n            ElseIf view_1.DisplayThreadFeatures = False Then\n                view_1.DisplayThreadFeatures = True\n            End If\n            invDoc.Save2()\n        Next\n    End Sub"], "author": "vince_123"},
{"created at": [], "solution Title": "\n                        Re: How to judge a Components or drawing file is OPen?\n                    ", "solution": [], "author": "Stakin"},
{"created at": [], "solution Title": "\n                        Re: how to delete value in iproperties using vba\n                    ", "solution": ["Public Sub ClearDescription(Doc As Inventor.Document)\n    Dim propSet As PropertySet\n    Set propSet = Doc.PropertySets.Item(\"Design Tracking Properties\")\n    \n    Dim descProp As Property\n    Set descProp = propSet.Item(\"Description\")\n    \n    descProp.value = \"\"\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Placing multiple Instances of a component at once\n                    ", "solution": ["' File path to use\noPath = \"C:\\Temp\\insert.iam\"\n\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\nDim oTG As TransientGeometry = ThisApplication.TransientGeometry\nDim oMatrix As Matrix = oTG.CreateMatrix\nDim oOccurrence As ComponentOccurrence\n\n' Insert Loop\nDim Total As Integer\nTotal = InputBox(\"Type How Many\", \"Insert\", \"1\")\nFor X = 1 To Total \n\t' Place Assy\n\toOccurrence = oAsmCompDef.Occurrences.Add(oPath, oMatrix)\n\toMatrix.SetTranslation(oTG.CreateVector(0, 0, 0)) \n\toOccurrence.Grounded = True \nNext\nThisApplication.ActiveView.Fit", "'present a File Selection dialog\nDim oFileDlg As inventor.FileDialog = Nothing\nInventorVb.Application.CreateFileDialog(oFileDlg)\noFileDlg.InitialDirectory = oOrigRefName\noFileDlg.CancelError = True\n' Define the filter to select part and assembly files or any file.\n'oFileDlg.Filter = \"Inventor Files (*.iam;*.ipt)|*.iam;*.ipt|All Files (*.*)|*.*\"\noFileDlg.Filter = \"Inventor Files (*.iam;*.ipt)|*.iam;*.ipt\"\n' Set the title for the dialog.\noFileDlg.DialogTitle = \"Choose File to Insert\"\nOn Error Resume Next\noFileDlg.ShowOpen()\nIf Err.Number <> 0 Then\nReturn\nElseIf oFileDlg.FileName <> \"\" Then\nselectedfile = oFileDlg.FileName\nEnd If\n'MessageBox.Show(\"You selected: \" & selectedfile , \"iLogic\")\n\n' File path to use\noPath=selectedfile\n\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\nDim oTG As TransientGeometry = ThisApplication.TransientGeometry\nDim oMatrix As Matrix = oTG.CreateMatrix\nDim oOccurrence As ComponentOccurrence\n\n' Insert Loop\nDim Total As Integer\nTotal = InputBox(\"Type How Many\", \"Insert\", \"1\")\nIf Err.Number <> 0 Then  'if there is an error it returns out\nReturn\nElseIf Err.Number = 0 Then 'if there is no error, it keeps working, else returns out\nFor X = 1 To Total \n\t' Place Assy\n\toOccurrence = oAsmCompDef.Occurrences.Add(oPath, oMatrix)\n\toMatrix.SetTranslation(oTG.CreateVector(0, 0, 0)) \n\toOccurrence.Grounded = True \nNext\nEnd If\nThisApplication.ActiveView.Fit"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: data cards\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Macro to create a revolved part\n                    ", "solution": ["Public Sub CreateRevolve()\n    ' Create a new part.\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.Documents.Add(kPartDocumentObject, _\n                  ThisApplication.FileManager.GetTemplateFile(kPartDocumentObject))\n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n                  \n    ' Create a sketch on the x-y plane.\n    Dim sk As PlanarSketch\n    Set sk = partDef.Sketches.Add(partDef.WorkPlanes.Item(3))\n    \n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    ' Draw some geometry.\n    Dim points(5) As SketchPoint\n    Set points(0) = sk.SketchPoints.Add(tg.CreatePoint2d(0, 0), False)\n    Set points(1) = sk.SketchPoints.Add(tg.CreatePoint2d(5, 0), False)\n    Set points(2) = sk.SketchPoints.Add(tg.CreatePoint2d(5, 2), False)\n    Set points(3) = sk.SketchPoints.Add(tg.CreatePoint2d(4, 2), False)\n    Set points(4) = sk.SketchPoints.Add(tg.CreatePoint2d(4, 3), False)\n    Set points(5) = sk.SketchPoints.Add(tg.CreatePoint2d(0, 3), False)\n    \n    Dim centerLine As SketchLine\n    Set centerLine = sk.SketchLines.AddByTwoPoints(points(0), points(1))\n    Call sk.SketchLines.AddByTwoPoints(points(1), points(2))\n    Call sk.SketchArcs.AddByCenterStartEndPoint(points(3), points(2), points(4))\n    Call sk.SketchLines.AddByTwoPoints(points(4), points(5))\n    Call sk.SketchLines.AddByTwoPoints(points(5), points(0))\n    \n    ' Create a profile from the sketch.\n    Dim prof As Profile\n    Set prof = sk.Profiles.AddForSolid\n    \n    ' Create the revolution.\n    Dim rev As RevolveFeature\n    Set rev = partDef.Features.RevolveFeatures.AddFull(prof, centerLine, kJoinOperation)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Number of Constraints Needed to fully constrain a sketch\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Set Rev table row to Static, add row\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument = ThisApplication.ActiveDocument\n\n' Get the revision table\nDim oRevTable As RevisionTable = oDrawDoc.ActiveSheet.RevisionTables.Item(1)\n\n' Get last row\nDim oRow As RevisionTableRow\noRow = oRevTable.RevisionTableRows.Item(oRevTable.RevisionTableRows.Count)\n\n' Make sure we have the active row\nIf oRow.IsActiveRow Then\n\t' Go through all columns in that row\n\tFor i = 1 To oRevTable.RevisionTableColumns.Count\n\t\tDim oCell As RevisionTableCell = oRow.Item(i)\n\t\t' Set all cells to static\n\t\toCell.Text = oCell.Text\n\t\t' or static and blank\n\t\t'oCell.Text = \"\"\n\tNext\nEnd If\n\n' Add another row at the end\nDim oRows As RevisionTableRows = oRevTable.RevisionTableRows\noRows.Add()"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Styles Editor , sheet metal rule\n                    ", "solution": ["//....other codes.", "If", " ", "ShThk", " ", "=", " ", "0.313", " in ", "Then", "\n        ", "SheetMetal", ".", "SetActiveStyle", "(", "\"", "5/16", "\"", "&", " ", "Chr", "(", "34", "))", "\n        \n    ", "Else", " ", "If", " ", "ShThk", " ", "=", " ", "0.25", " ", "Then", "\n        ", "SheetMetal", ".", "SetActiveStyle", "(", "\"", "1/4", "\"", "&", " ", "Chr", "(", "34", "))", "\n        \n    ", "Else", " ", "If", " ", "ShThk", " ", "=", " ", "0.1345", " ", "Then", "\n        ", "SheetMetal", ".", "SetActiveStyle", "(", "\"", "10ga", "\"", ")", "\n        \n    ", "Else", " ", "If", " ", "ShThk", " ", "=", " ", "0.105", " ", "Then", " \n        ", "SheetMetal", ".", "SetActiveStyle", "(", "\"", "12ga", "\"", ")", "\n         \n\n        \n    ", "Else", " ", "If", " ", "ShThk", " ", "=", " ", "0.1793", " ", "Then", "\n        ", "SheetMetal", ".", "SetActiveStyle", "(", "\"", "7ga", "\"", ")", "\n    \n    ", "End", " ", "If", "\n    \n    'add these code to update iProperty\n", "     doc = ThisDoc.Document\n     oDef=  doc.ComponentDefinition \n     currentStyle = oDef.SheetMetalStyles(SheetMetal.GetActiveStyle())     \n     MsgBox(currentStyle.Material.Name)\n     iProperties.Material = currentStyle.Material.Name", "   //....other codes"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Should I release any BSTR objects which the Inventor API gives me?\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: How to suppress items in a rectangular pattern?\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: copy part *.ipt to clipboard\n                    ", "solution": ["Public Sub CopyPaste()\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n\n    Dim occ As ComponentOccurrence\n    Set occ = asmDoc.ComponentDefinition.Occurrences.ItemByName(\"L:1\")\n    \n    ' Get references to the copy and paste commands.\n    Dim controlDefs As ControlDefinitions\n    Set controlDefs = ThisApplication.CommandManager.ControlDefinitions\n    Dim copyCommand As ControlDefinition\n    Set copyCommand = controlDefs.Item(\"AppCopyCmd\")\n    Dim pasteCommand As ControlDefinition\n    Set pasteCommand = controlDefs.Item(\"AppPasteCmd\")\n\n    ' Select the occurrence.\n    asmDoc.SelectSet.Clear\n    Call asmDoc.SelectSet.Select(occ)\n    \n    ' Execute the copy command.\n    copyCommand.Execute\n    \n    ' Execute the paste command.\n    pasteCommand.Execute\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Can iAssembly configuration list appear in an iLogic form?\n                    ", "solution": ["'CreateMembersList rule in Drawing Document\n\n'Active drawing sheet\nDim oSheet As Sheet = ThisDrawing.Document.ActiveSheet\n'get the reference to the desired drawing view\nDim oView As DrawingView = oSheet.DrawingViews.Item(1)\n\n' get the reference to the assembly doc \nDim oAssyDoc as AssemblyDocument = oView _\n      .ReferencedDocumentDescriptor.ReferencedDocument\n'assembly definition\nDim oAsmCompDef As AssemblyComponentDefinition = oAssyDoc.ComponentDefinition\n\n' Make sure we have an iAssembly member.\nIf oAsmCompDef.IsiAssemblyMember = False Then\n    MessageBox.Show( \"Chosen document is not an iAssembly Member.\", _\n        \"Members\",MessageBoxButtons.OK,MessageBoxIcon.Exclamation)\n    Exit Sub\nEnd If\n\n\nDim oFactory As iAssemblyFactory _\n    = oAsmCompDef.iAssemblyMember.ParentFactory\n\nDim oTableRows As iAssemblyTableRows = oFactory.TableRows\nDim St As String = \"\"\nFor Each oRow As iAssemblyTableRow In oTableRows\n  St = St & oRow.MemberName & vbNewLine\nNext\n\nMessageBox.Show( St,\"Members List\", _\n    MessageBoxButtons.OK, MessageBoxIcon.Information)"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: External iLogic rule with user parameters\n                    ", "solution": [], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Add Rule to All Parts in an Assembly\n                    ", "solution": ["ThisApplication.Documents.Open(docFile.FullFileName, True)", "ThisApplication.Documents.Open(docFile.FullFileName, False)", "''' We need to tell this rule that we'll be referencing\n''' something from a file outside of this rule. \n''' In this instance, that file is an External Rule named\n''' ExternalRuleTest2.iLogicVb\n\n\nAddVbFile \"ExternalRuleTest2.iLogicVb\" \n\n''' Before we start creating Objects, let's make sure that the user \n''' has an Assembly Document open and active! \n\nIf Not ThisApplication.ActiveDocument.DocumentType = kAssemblyDocumentObject Then \n\tReturn\nEnd If\n\n''' Now that we know we're inside of an Assembly Document\n''' we can outright declare an AssemblyDocument Object, \n''' and set said object to the Active Document.\n\nDim aDoc As AssemblyDocument\naDoc = ThisApplication.ActiveDocument\n\n\n''' Now let's make an empty Document Object named iDoc\nDim iDoc As Document\n\n''' This should be familiar teritory for you. \n''' We just want to loop through all of the referenced\n''' documents found inside of our currently active assembly\n\nFor Each iDoc In aDoc.AllReferencedDocuments\n\n\t''' Let's check to see what sort of SubType our document is. \n\t''' SubTypes are pre-defined, and so we know that the SheetMetal\n\t''' subtype will return a GUID of -----\n\t''' \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" \n\t''' Using this knowledge, we can check beforehand what sort\n\t''' of SubType our document is. Based on that, we can do some \n\t''' conditional work. \n\t\n\tIf iDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then \n\t\n\t\t''' If the SubType is SheetMetal then we can call out this\n\t\t''' Public Function (called - ShowDocType) from our \n\t\t''' External Rule (which we pointed to at the beginning of\n\t\t''' this rule. \n\t\tShowDocType(iDoc)\n\tEnd If \nNext", "''' let's make this all rather public. \nPublic Module ExternalRuleTest2\n\t''' We're going to need a means of processing our incoming\n\t''' Inventor Document, so here I've made a public Function. \n\t''' In this case, our Function is named 'ShowDocType'\n\t''' which you should remember from the Rule used inside of\n\t''' of the Assembly. \n\t''' This Function requires 1 parameter, in this case, an\n\t''' Inventor Document. 'oDoc' is the name given to that\n\t''' object. \n\t''' Though near the end, you see that it returns a String \n\t''' I have not included anything to give a value\n\t''' to that String, as I have no need to send information back\n\t''' to the main Assembly rule (for this example at least).\n\t\n\tPublic Function ShowDocType(oDoc As Inventor.Document) As String \n\t\t''' inside of here, we're just going to do some real simple\n\t\t''' queries of this document. Nothing is being written as of yet\n\t\t''' but we certainly could if we wanted to.\n\n\t\tMsgBox(oDoc.DocumentType.ToString() & \" --- \" & oDoc.SubType)\n\t\t\n\t\t''' Try writing out some changes to the document here! \n\t\t''' Remember to check and see if the file is writable beforehand!\n\t\t\n\tEnd Function \nEnd Module "], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: iPropertie\n                    ", "solution": ["Dim oDoc As Document = ThisDoc.Document\nDim oRefDoc As Document\nFor Each oRefDoc In oDoc.AllReferencedDocuments\n\tIf oRefDoc.DocumentType = kPartDocumentObject Then\n\t\tmodelName = IO.Path.GetFileName(oRefDoc.FullFileName)\n\tTry\n\t\t' Set the value \n\t\tiProperties.Value(\"Project\", \"Authority\") = iProperties.Value(modelName, \"Custom\", \"partx\")\n\tCatch\n\tEnd Try\n\tEnd If\nNext\niLogicVb.UpdateWhenDone = True"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Query Parts List Filtering via API\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Drawing file - how to identify a TextBox with unique Id or by name\n                    ", "solution": ["static void test()\n{\n  Application = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\") as Inventor.Application;\n\n  if (Application.ActiveDocument == null)\n    Console.WriteLine(\"There is no active document in Inventor.\");\n  else\n    if (!(Application.ActiveDocument is DrawingDocument))\n      Console.WriteLine(\"Active document should be a drawing document.\");\n    else\n    {\n      // Get active drawing document\n      Document = Application.ActiveDocument as DrawingDocument;\n\n      // Get ANSI large title block definition \n      TitleBlockDefinitions titleBlockDefinitions = Document.TitleBlockDefinitions;\n      TitleBlockDefinition titleBlockDef1 = titleBlockDefinitions[1];\n\n      // Show counts of attribute set and attribute (should be 0)\n      TextBox textBox = titleBlockDef1.Sketch.TextBoxes[1];\n      Console.WriteLine(\"AttributeSets.Count => \" + textBox.AttributeSets.Count.ToString() + \" , Expected = 0 (Before creating)\");\n\n      ///////////////////////////////////////////////////////////////////\n      // Real modification, adding the Attribute set\n      ///////////////////////////////////////////////////////////////////\n\n      // Edit sketch\n      DrawingSketch sketch;\n      titleBlockDef1.Edit(out sketch);\n\n      // Add Attribute set and attribute\n      textBox = sketch.TextBoxes[1]; \n      AttributeSet myAttributeSet = textBox.AttributeSets.Add(\"MySet\", true);\n      Inventor.Attribute myAttribute = myAttributeSet.Add(\"MyAttribute\", ValueTypeEnum.kStringType, \"MyAttributeValue\");\n\n      // Exit sketch with saving\n      titleBlockDef1.ExitEdit(true);\n\n      // Show counts of attribute set and attribute (should be 1)\n      textBox = titleBlockDef1.Sketch.TextBoxes[1];\n      Console.WriteLine(\"AttributeSets.Count => \" + textBox.AttributeSets.Count.ToString() + \" , Expected = 1 (After creating, before editing sketch)\");\n\n      ///////////////////////////////////////////////////////////////////\n      // Fake modification, just for testing that the Attribute remains\n      ///////////////////////////////////////////////////////////////////\n\n      //DrawingSketch sketch;\n      titleBlockDef1.Edit(out sketch);\n\n      // Exit sketch with saving\n      titleBlockDef1.ExitEdit(true);\n\n      // Show counts (ERROR USED TO BE HERE => should be 1 but previously showed 0)\n      textBox = titleBlockDef1.Sketch.TextBoxes[1];\n      Console.WriteLine(\"AttributeSets.Count => \" + textBox.AttributeSets.Count.ToString() + \" , Expected = 1 (After ExitEdit)\");\n      Console.ReadKey();\n    }\n}"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: get item from SelectSet in c#\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Need a VB.net example to toggle the custom button image\n                    ", "solution": [], "author": "djreesing"},
{"created at": [], "solution Title": "\n                        Re: End of Statement Expected & Math issue\n                    ", "solution": [], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: Opening drawing file invisible causes code to crash\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: String from DocumentTypeEnum in C++\n                    ", "solution": ["typedef struct {\n    DocumentTypeEnum eEnum ;\n    const char* const pszDesc ;\n} DocDesc_t;\n\nconst DocDesc_t kDocDescs [] = {\n    {kAssemblyDocumentObject,      \"Assembly Document\"}, \n    {kDesignElementDocumentObject, \"Design Element Document\"}, \n    {kDrawingDocumentObject,       \"Drawing Document\"},\n    {kForeignModelDocumentObject,  \"Foreign Model Document\"}, \n    {kNoDocument,                  \"No Document\"},\n    {kPartDocumentObject,          \"Part Document\"}, \n    {kPresentationDocumentObject,  \"Presentation Document\"}, \n    {kSATFileDocumentObject,       \"SAT File Document\"},\n    {kUnknownDocumentObject,       \"Unknown Document\"}\n} ;\n\nstatic const UINT ikNumDocTypeDescs = sizeof (kDocDescs)/sizeof(kDocDescs[0]) ;\n\n\nconst char* const GetInventorDocTypeDesc(const DocumentTypeEnum eDocTypeEnum) \n{\n    for (UINT i = 0 ; i < ikNumDocTypeDescs ; i++) {\n        if (kDocDescs[i].eEnum == eDocTypeEnum) {\n            return kDocDescs[i].pszDesc ;\n        }\n    }\n\n    // This is an error, I handle it recursively...\n    return (GetInventorDocTypeDesc(kUnknownDocumentObject)) ;\n}"], "author": "oransen"},
{"created at": [], "solution Title": "\n                        Re: Mirroring about assembly plane VBA\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Add Multiple Virtual Components\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: formatting text for Email\n                    ", "solution": [".BodyFormat = olFormatHTML\n.HTMLBody = \"<Font Size='20'>Test this</Font>\"", ".", "HTMLBody", "=", " .", "HTMLBody", "&", "\"", "<TD ALIGN=CENTER>Drawing/Part Number</TD>", "\"", " \n    .", "HTMLBody", "=", " .", "HTMLBody", "&", "\"", "<TD ALIGN=CENTER>Rev</TD>", "\"", " \n    .", "HTMLBody", "=", " .", "HTMLBody", "&", "\"", "<TD ALIGN=CENTER>Description</TD>", "\"", " \n    .", "HTMLBody", "=", " .", "HTMLBody", "&", "\"", "<TD ALIGN=CENTER>Status</TD>", "\"", " \n    .", "HTMLBody", "=", " .", "HTMLBody", "&", "\"", "</TR><TR>", "\"", " \n    .", "HTMLBody", "=", " .", "HTMLBody", "&", "\"", "<TD ALIGN=CENTER>", "\"", "&", "MyNum", "&", "\"", "</TD>", "\"", " \n    .", "HTMLBody", "=", " .", "HTMLBody", "&", "\"", "<TD ALIGN=CENTER>", "\"", "&", "MyDwgRev", "&", "\"", "</TD>", "\"", " \n    .", "HTMLBody", "=", " .", "HTMLBody", "&", "\"", "<TD ALIGN=CENTER>", "\"", "&", "MyDesc", "&", "\"", "</TD>", "\"", " \n        .", "HTMLBody", "=", " .", "HTMLBody", "&", "\"", "<TD ALIGN=CENTER><span style='color:red'>HIGH</TD>", "\"", " \n    .", "HTMLBody", "=", " .", "HTMLBody", "&", "\"", "</TR></TABLE>", "\""], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Align part to assembly ucs\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: open a part from a drawing to see update\n                    ", "solution": ["Dim File As String\nFile = \"Circ Flat Membrane.ipt\"\niLogicVb.RunRule(File, \"NoHoles\")\nThisDoc.Launch(File)"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Layer Visibility On Different Sheets\n                    ", "solution": ["Sub TurnOffHidden()\nDim oDrawingDoc As DrawingDocument\nSet oDrawingDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\n'Define which sheet\nSet oSheet = oDrawingDoc.Sheets.Item(1)\n\nDim oView As DrawingView\n    For Each oView In oSheet.DrawingViews\n        oView.ViewStyle = kHiddenLineRemovedDrawingViewStyle\n    Next\nEnd Sub", "Sub NixHiddenBend()\nDim oDrawingDoc As DrawingDocument\nSet oDrawingDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\n'Define which sheet\nSet oSheet = oDrawingDoc.Sheets.Item(1)\nDim oView As DrawingView\n    For Each oView In oSheet.DrawingViews\n        oView.ViewStyle = kHiddenLineRemovedDrawingViewStyle\n        'If it's a flatpattern view\n        If oView.IsFlatPatternView = True Then\n            Dim oViewCurves As DrawingCurvesEnumerator\n            Set oViewCurves = oView.DrawingCurves()\n            Dim oBendLine As DrawingCurve\n                'Find all the lines\n                For count = 1 To oViewCurves.count\n                    Set oBendLine = oViewCurves.Item(count)\n                    'If it's a bendline\n                    If oBendLine.EdgeType = kBendDownEdge Or oBendLine.EdgeType = kBendUpEdge Then\n                        MsgBox (\"Found you pesky bendline\")\n                    End If\n                Next\n        End If\n    Next\nEnd Sub", "Sub NixHiddenBend()\nDim oDrawingDoc As DrawingDocument\nSet oDrawingDoc = ThisApplication.ActiveDocument\n\n", "Dim oSel As SelectSet\nSet oSel = oDrawingDoc.SelectSet\noSel.Clear", "\n\nDim oSheet As Sheet\n'Define which sheet\nSet oSheet = oDrawingDoc.Sheets.Item(1)\nDim oView As DrawingView\n    For Each oView In oSheet.DrawingViews\n        oView.ViewStyle = kHiddenLineRemovedDrawingViewStyle\n        'If it's a flatpattern view\n        If oView.IsFlatPatternView = True Then\n            Dim oViewCurves As DrawingCurvesEnumerator\n            Set oViewCurves = oView.DrawingCurves()\n            Dim oBendLine As DrawingCurve\n                'Find all the lines\n                For Count = 1 To oViewCurves.Count\n                    Set oBendLine = oViewCurves.Item(Count)\n                    'If it's a bendline\n                    If oBendLine.EdgeType = kBendDownEdge Or oBendLine.EdgeType = kBendUpEdge Then\n                        'MsgBox (\"Found you pesky bendline\")\n                      ", "  Dim oSeg As DrawingCurveSegment\n                        For Each oSeg In oBendLine.Segments\n                            oSel.Select oSeg\n                        Next", "\n                    End If\n                Next\n        End If\n    Next\n    \n    \n", "     ThisApplication.CommandManager.ControlDefinitions(\"DrawingEntityVisibilityCtxCmd\").Execute\n", "End Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: HELP changing layer color for template\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Get the origin workplane of a FaceProxy\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: wchar_t in Inventor C++ code\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Document.SaveAs partnumber not updated\n                    ", "solution": ["Sub CreateNewPartAndSave()\n    Dim doc As PartDocument\n    Set doc = ThisApplication.Documents.Add(kPartDocumentObject)\n    \n    ' I can use false here since I'm saving a part that\n    ' has never been saved before\n    Call doc.SaveAs(\"C:\\NewPart.ipt\", False)\n    \n    ' The Part Number is the same as the filename I passed to SaveAs\n    MsgBox (doc.PropertySets(\"{32853F0F-3444-11D1-9E93-0060B03C1CA6}\")(\"Part Number\").value)\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Help with adding message box to i-logic rule\n                    ", "solution": ["i = MessageBox.Show(\"DO YOU WANT TO SAVE PDF OF REVISION?\", \"My iLogic Dialog\", MessageBoxButtons.YesNoCancel, MessageBoxIcon.question, MessageBoxDefaultButton.Button1)\nIf i = vbYes Then\n  'they clicked yes, add code here\nEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Help with going through all parts Recursively in bom view (\"Unnamed&amp\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Derive iMate from multi body part\n                    ", "solution": ["Public Sub editDerived()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim derivedPartComp As DerivedPartComponent\n    Set derivedPartComp = oDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents.item(1)\n    \n    Dim oderivdef As DerivedPartUniformScaleDef\n    Set oderivdef = derivedPartComp.Definition\n    \n    Dim derivedEntity As DerivedPartEntity\n    For Each derivedEntity In oderivdef.iMateDefinitions\n    \n        Dim iMateDef As iMateDefinition\n        Set iMateDef = derivedEntity.ReferencedEntity\n    \n        Dim bodyName As String\n        bodyName = iMateDef.entity.Parent.name\n    \n        Dim derivedSolidEntity As DerivedPartEntity\n        For Each derivedSolidEntity In oderivdef.Solids\n            \n            Dim surfbody As SurfaceBody\n            Set surfbody = derivedSolidEntity.ReferencedEntity\n            \n            If surfbody.name = bodyName Then\n                derivedEntity.IncludeEntity = derivedSolidEntity.IncludeEntity\n            End If\n        \n        Next\n       \n    Next\n    \n    oderivdef.DeriveStyle = kDeriveAsMultipleBodies\n    derivedPartComp.Definition = oderivdef\n    \nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Assigning material to parts\n                    ", "solution": ["Public Sub AssignMat()\n    Dim oPart As PartDocument\n    Set oPart = ThisApplication.ActiveDocument\n    Dim oMat As Material\n    'Name of material\n    Set oMat = oPart.Materials.Item(\"Hastelloy\")\n    oPart.ComponentDefinition.Material = oMat\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: error with ThisApplication.ApplicationAddIns.ItemById\n                    ", "solution": ["            Dim oSTEPTranslator As TranslatorAddIn", " \t    oSTEPTranslator = ThisApplication.ApplicationAddIns.ItemById(\"{90AF7F40-0C01-11D5-8E83-0010B541CD80}\")"], "author": "sellis"},
{"created at": [], "solution Title": "\n                        Re: AnchorPoints\n                    ", "solution": ["Private Sub Sketch_Dims_Test()\n\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As PartComponentDefinition\n    Set oDef = oDoc.ComponentDefinition\n    \n    Dim oSketch As PlanarSketch\n    Set oSketch = oDef.Sketches.Item(1)\n    \n    Dim oDims As DimensionConstraints\n    Set oDims = oSketch.DimensionConstraints\n    \n    'reference to 3-point angular dimension\n    Dim oDim As ThreePointAngleDimConstraint\n    Set oDim = oDims.Item(1)\n    \n    'coordinates of anchor 2d-points\n    Dim oP As Point2d\n    For Each oP In oDim.AnchorPoints\n        Debug.Print oP.X, oP.Y\n    Next\n    Debug.Print\n    \n    'anchor sketch points\n    Dim oSkp As SketchPoint\n    \n    Set oSkp = oDim.PointOne\n    Debug.Print oSkp.Geometry.X, oSkp.Geometry.Y\n    Set oSkp = oDim.PointTwo\n    Debug.Print oSkp.Geometry.X, oSkp.Geometry.Y\n    Set oSkp = oDim.PointThree\n    Debug.Print oSkp.Geometry.X, oSkp.Geometry.Y\n    \n    Beep\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Design View Representation - Add Using iMates\n                    ", "solution": [], "author": "FiniteMatt"},
{"created at": [], "solution Title": "\n                        Re: Sketched Symbol with Sheet number\n                    ", "solution": [], "author": "djreesing"},
{"created at": [], "solution Title": "\n                        Re: Inventor commandmanager.Pick method problem\n                    ", "solution": [], "author": "karthikkumar_ml"},
{"created at": [], "solution Title": "\n                        Re: Is running from an external EXE to an invisible Inventor faster...\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: LoadOnStartup ignored from Inventor 2013 onwards?\n                    ", "solution": [], "author": "augusto.goncalv"},
{"created at": [], "solution Title": "\n                        Re: Version mismatch when exporting from Inventor to CATIA by the API\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: refresh vault status ( in vaultAddin ) via API\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Assembly within assembly Detection\n                    ", "solution": ["Dim oDoc As Document = ThisDoc.Document\nDim oRefDoc As Document\nDim AsmFound As Boolean\nFor Each oRefDoc In oDoc.AllReferencedDocuments\n\tIf oRefDoc.DocumentType = kAssemblyDocumentObject Then\n\t\tAsmFound = True\n\t\tExit For\n\tEnd If\nNext\nIf AsmFound = False Then\n\tiLogicVb.RunRule(\"MyRule\")\nEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: how to find parts that start with an \"S\" in an assembly using vba\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: ilogic Math Tan\n                    ", "solution": ["MessageBox", ".", "Show", "(", "Atan", "(", "35", "))"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Export to PDF fails\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Assigning weight to downloaded part files\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Change parameters in a part occurrence which is inside an assembly\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: VBA Macro - OLE Database Connection Error\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Advanced search problem\n                    ", "solution": [], "author": "philip.s"},
{"created at": [], "solution Title": "\n                        Re: IN C++ : Given a component occurrence how to get the part document. IN C++\n                    ", "solution": ["CComPtr<Document> pDoc;\nHRESULT hr = pInventorApp->get_ActiveDocument(&pDoc);\n\nCComPtr<AssemblyDocument> pAsmDoc;\npAsmDoc = CComQIPtr<AssemblyDocument>(pDoc);\n\nCComPtr<AssemblyComponentDefinition> pAsmCompDef;\npAsmCompDef = CComQIPtr<AssemblyComponentDefinition>(pAsmDoc->ComponentDefinition);\n\nCComPtr<ComponentOccurrences> pOccurrences = pAsmCompDef->Occurrences;\n\nint i = 1;\n\nCComPtr<ComponentOccurrence> pCompOcc;\npOccurrences->get_Item(i, &pCompOcc);\n\nCComPtr<PartComponentDefinition> pCompDef;\npCompDef = CComQIPtr<PartComponentDefinition>(pCompOcc->Definition);\n\nCComPtr<PartDocument> pPartDoc = CComQIPtr<PartDocument>(pCompDef->Document);\n\nBSTR bstrFileName = NULL;\nhr = pPartDoc->get_FullFileName(&bstrFileName);"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Strange File open behavior with automatic step file Ilogic script\n                    ", "solution": ["Windows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\Software\\Classes\\stp_auto_file]\n@=\"\"\n\n[HKEY_CURRENT_USER\\Software\\Classes\\stp_auto_file\\shell]\n\n[HKEY_CURRENT_USER\\Software\\Classes\\stp_auto_file\\shell\\open]\n\n[HKEY_CURRENT_USER\\Software\\Classes\\stp_auto_file\\shell\\open\\command]\n@=\"\\\"C:\\\\Program Files\\\\Autodesk\\\\Inventor 2014\\\\Bin\\\\Inventor.exe\\\" /dde\"\n\n[HKEY_CURRENT_USER\\Software\\Classes\\stp_auto_file\\shell\\open\\ddeexec]\n@=\"[open(\\\"%1\\\")]\"", "ThisApplication.Documents.Open(NFName & \".stp\")"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic: How to run an Assembly-level rule from a component rule?\n                    ", "solution": ["Dim myDoc As Document\nmyDoc = ThisApplication.ActiveDocument\n\nDim myEdit As Document\nmyEdit = ThisApplication.ActiveEditDocument\n\nDim addIns As ApplicationAddIns\naddIns = ThisApplication.ApplicationAddIns\n\nDim addIn As ApplicationAddIn\naddIn = ThisApplication. _", "ApplicationAddIns.ItemById(\"{3bdd8d79-2179-4b11-8a5a-257b1c0263ac}\")\n        \nDim iLogic As Object\niLogic = addIn.Automation\n\nDim oDoc As Document\n\nIf myDoc Is myEdit Then\n    oDoc = ThisApplication.Documents.Open(\"C:\\MegaFolder\\Jerk.iam\", False)\n    Else\n    oDoc = myDoc\n    If oDoc.Dirty = True Then\n        MessageBox.Show(\"Please save the parent document before running!\")\n\toDoc = Nothing\n\tReturn\n    End If\nEnd If\n\nTry \n\tCall iLogic.RunRule(oDoc, \"RULE_TEST_NAME\")\n\tCatch \n\tMessageBox.Show(\"Unable to run the rule\", \"RunRule Error\") \n\tFinally \n\toDoc = Nothing\nEnd Try"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Modify Project Names in iProperties\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Moving Bodies in .net\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Created Part Shows as Unresolved\n                    ", "solution": [], "author": "larry.daubenspe"},
{"created at": [], "solution Title": "\n                        Re: Close other child windows of Inventor\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Help me please my browser and panel is gone follow my pic plzz\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Assembly Constraint Entities\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: kDrawingDocumentObject Usage failure\n                    ", "solution": ["modelName = IO.Path.GetFileName(ThisDoc.ModelDocument.FullFileName)", "doc", " ", "=", " ", "ThisDoc", ".", "Document", "'", "12292 Drawing Document", "If", " ", "doc", ".", "DocumentType", " ", "=", " ", "12292", " ", "Then", "    ", "modelName", " ", "=", " ", "IO", ".", "Path", ".", "GetFileName", "(", "ThisDoc", ".", "ModelDocument", ".", "FullFileName", ")", "    ", "MsgBox", "(", "modelName", ")", "End", " ", "If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: iLogic: reference all curves on a Drawing\n                    ", "solution": ["'sheet with a  drawing view\nDim oSheet As Sheet =  ActiveSheet.Sheet\n\n'reference to the first drawing view\nDim oView As DrawingView = oSheet.DrawingViews.Item(1)\n\nDim oCurves As DrawingCurvesEnumerator = oView.DrawingCurves\n\nDim n1 As Integer = 0 'counter for circles\nDim n2 As Integer = 0 'counter for circular arcs\n\nFor Each oC As DrawingCurve In oCurves\n\tIf oC.CurveType = CurveTypeEnum.kCircleCurve Then\n\t\tn1 += 1\n\tElseIf oC.CurveType = CurveTypeEnum.kCircularArcCurve Then\n\t\tn2 += 1\n\tEnd If\nNext\n\nMsgBox(\"Circles: \" & n1 & vbNewLine & \"Arcs: \" & n2)\nBeep"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: New Ideas for Inventor\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Get Hole Notes From IDW\n                    ", "solution": ["  Dim oHoleNote As Inventor.HoleThreadNote\n  For Each oHoleNote In invActSHT.DrawingNotes.HoleThreadNotes\n    Debug.Print oHoleNote.Text.Text\n  Next"], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: Replace family template option missing on Vaulted CC???\n                    ", "solution": [], "author": "theo.bot"},
{"created at": [], "solution Title": "\n                        Re: Ilogic to handle Angle - imate Constraint\n                    ", "solution": ["Private Sub AngleConstraint()\n\n    Dim oAssyDef As AssemblyComponentDefinition\n    Set oAssyDef = ThisApplication.ActiveDocument.ComponentDefinition\n    \n    Dim Pi As Double:  Pi = Math.Atn(1) * 4\n    \n    Dim oOccs As ComponentOccurrences\n    Set oOccs = oAssyDef.Occurrences\n    \n    Dim oOcc As ComponentOccurrence\n    Set oOcc = oOccs.ItemByName(\"ANSI-ASME B36.19M Pipe 1-8 - Schedule 10S:1\")\n    Dim oAngleConstr As AngleConstraint\n    Set oAngleConstr = oOcc.Constraints.Item(1)\n    \n    Dim AnglePar As ModelParameter\n    Set AnglePar = oAngleConstr.Angle\n    Debug.Print \"Initial angle = \" & AnglePar.Value * 180 / Pi\n    \n    AnglePar.Value = 45 * Pi / 180\n    oAssyDef.Document.Update\n    \n    Debug.Print \"Initial angle = \" & AnglePar.Value * 180 / Pi\n\n    Beep\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Change the project file\n                    ", "solution": ["Public Sub SetActiveProject()\n    ' Check to make sure a document isn't open.\n    If ThisApplication.Documents.Count > 0 Then\n        MsgBox \"All documents must be closed before changing the project.\"\n        Exit Sub\n    End If\n\n    ' Set a reference to the DesignProjectManager object.\n    Dim oDesignProjectMgr As DesignProjectManager\n    Set oDesignProjectMgr = ThisApplication.DesignProjectManager\n\n    ' Show the current project.\n    Debug.Print \"Old active project: \" & oDesignProjectMgr.ActiveDesignProject.FullFileName\n\n    ' Get the project to activate\n    ' This assumes that \"C:\\Temp\\MyProject.ipj\" exists.\n    Dim oProject As DesignProject\n    Set oProject = oDesignProjectMgr.DesignProjects.ItemByName(\"C:\\temp\\MyProject.ipj\")\n\n    ' Activate the project\n    oProject.Activate\n\n    ' Show the current project after making the project change.\n    Debug.Print \"New active project: \" & oDesignProjectMgr.ActiveDesignProject.FullFileName\nEnd Sub\n \n\n\n"], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: vba help!!\n                    ", "solution": ["Sub SketchSel()\nDim prtdoc As PartDocument\nSet prtdoc = ThisApplication.ActiveDocument\nDim prtdef As PartComponentDefinition\nSet prtdef = prtdoc.ComponentDefinition\n\nDim sk As PlanarSketches\nSet sk = prtdef.Sketches\nDim osk As PlanarSketch\nFor i = 1 To prtdef.Sketches.count\n   Set osk = prtdef.Sketches(i)\n    For j = 1 To osk.SketchBlocks.count\n        If InStr(osk.SketchBlocks(j).Name, \"Steel\") Then\n            prtdoc.SelectSet.Select prtdoc.ComponentDefinition.Sketches(i).SketchBlocks(j)\n        End If\n    Next\nNext\nEnd Sub"], "author": "ADNpati"},
{"created at": [], "solution Title": "\n                        Re: Folder Browser Needed for VBA 7 64 bit.\n                    ", "solution": [], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: How to write-out parameters in correct units in iLogic:\n                    ", "solution": ["Dim uom As UnitsOfMeasure\nSet uom = doc.UnitsOfMeasure\n    \nDebug.Print uom.GetStringFromValue(5, kDefaultDisplayLengthUnits)\nDebug.Print uom.GetStringFromValue(3.14, kDefaultDisplayAngleUnits)\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Could Not Load An Object Error - Inventor 2014\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Autoproject edges during curve creation\n                    ", "solution": [], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: Changing a NonParametricBaseFeature without destroying references?\n                    ", "solution": ["Public Sub CreateBrep()\n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    Dim b As Box\n    Set b = tg.CreateBox\n    b.MinPoint = tg.CreatePoint(0, 0, 0)\n    b.MaxPoint = tg.CreatePoint(5, 4, 2)\n    Dim body As SurfaceBody\n    Set body = ThisApplication.TransientBRep.CreateSolidBlock(b)\n    \n    Dim f As Face\n    Dim cnt As Integer\n    cnt = 1\n    For Each f In body.Faces\n        f.AssociativeID = cnt\n        cnt = cnt + 1\n    Next\n    \n    Dim part As PartDocument\n    Set part = ThisApplication.ActiveDocument\n    \n    Call part.ComponentDefinition.Features.NonParametricBaseFeatures.Add(body)\nEnd Sub\n\n\nPublic Sub ReplaceBrep()\n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    Dim b As Box\n    Set b = tg.CreateBox\n    b.MinPoint = tg.CreatePoint(0, 0, 0)\n    b.MaxPoint = tg.CreatePoint(5, 2, 3)\n    Dim body As SurfaceBody\n    Set body = ThisApplication.TransientBRep.CreateSolidBlock(b)\n    \n    Dim f As Face\n    Dim cnt As Integer\n    cnt = 1\n    For Each f In body.Faces\n        f.AssociativeID = cnt\n        cnt = cnt + 1\n    Next\n    \n    Dim part As PartDocument\n    Set part = ThisApplication.ActiveDocument\n\n    Dim baseFeature As NonParametricBaseFeature\n    Set baseFeature = part.ComponentDefinition.Features.NonParametricBaseFeatures.Item(1)\n    Call baseFeature.Redefine(body)\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Insert Sketch Symbol using ilogic\n                    ", "solution": ["'Sub Main() \n' Set a reference to the drawing document.\n' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument = ThisDrawing.Document\n \n' Obtain a reference to the desired sketched symbol definition.\nDim oSketchedSymbolDef As SketchedSymbolDefinition _\n       = oDrawDoc.SketchedSymbolDefinitions.Item(\"SymbolA\")\n \nDim oSheet As Sheet = oDrawDoc.ActiveSheet\n \n'create insertion point, coordinates - in cm !\nDim oTG As TransientGeometry = ThisApplication.TransientGeometry\nDim oInsertionPoint As Point2d = oTG.CreatePoint2d(10, 10)\n \n' Add an instance of the sketched symbol definition to the sheet.\n' Rotate angle = 0 radians,\n' scale = 1 when adding\n' no prompt text\nDim oSketchedSymbol As SketchedSymbol _\n       = oSheet.SketchedSymbols.Add( _\n             oSketchedSymbolDef, _\n             oInsertionPoint, _\n             0, 1, Nothing)\n'End Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Can't connect to an Inventor Addin from an external application\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Code to create Virtual part\n                    ", "solution": ["Public Sub AddVirtual()\n  Dim oAssemblyDoc As Inventor.AssemblyDocument\n  Set oAssemblyDoc = ThisApplication.ActiveDocument\n  \n  Dim oCompDef As Inventor.ComponentDefinition\n  Set oCompDef = oAssemblyDoc.ComponentDefinition\n  \n  Dim oPosition As Inventor.Matrix\n  Set oPosition = ThisApplication.TransientGeometry.CreateMatrix()\n  \n  Dim oVirtual As ComponentOccurrence\n  Set oVirtual = oAssemblyDoc.ComponentDefinition.Occurrences.AddVirtual(\"TEST\", oPosition)\nEnd Sub"], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: add part border dont work....\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: vba code for catching opening wrong type of file\n                    ", "solution": [], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: Ilogic move and rename parts\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Sheet metal: is it flat?\n                    ", "solution": ["Dim", " ", "SMPart", " ", "As", " ", "SheetMetalComponentDefinition", "\n", "SMPart", " ", "=", " ", "ThisDoc", ".", "Document", ".", "ComponentDefinition", "\n\n", "If", "(", "SMPart", ".", "Bends", ".", "Count", " ", ">", " ", "0", ")", " ", "Then", "\n    ", "MessageBox", ".", "Show", "(", "\"", "Has Bends", "\"", ")", "\n", "Else", "\n    ", "MessageBox", ".", "Show", "(", "\"", "Part Has no bends", "\"", ")", "\n", "End", " ", "If", "Public Sub TestFlat()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    ' Get the sheet metal component definition.\n    ' This will fail if the active document isn't a sheet metal document.\n    Dim smDef As SheetMetalComponentDefinition\n    Set smDef = partDoc.ComponentDefinition\n    \n    Dim hasBend As Boolean\n    hasBend = False\n    Dim testBend As Bend\n    For Each testBend In smDef.Bends\n        If Not testBend.IsFlat Then\n            hasBend = True\n            Exit For\n        End If\n    Next\n    \n    If hasBend Then\n        MsgBox \"Part is NOT flat.\"\n    Else\n        MsgBox \"Part is flat.\"\n    End If\nEnd Sub"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: How to avoid derived base part?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic code to close ipt file....\n                    ", "solution": ["Dim oPart As PartDocument\n\noPart = ThisApplication.Documents.Open(filename, False)\n\noPart.Close"], "author": "achmidt"},
{"created at": [], "solution Title": "\n                        Re: How to close an Instance of an inventor using inventor api?\n                    ", "solution": ["inventorApp.Quit\nset inventorApp = Nothing"], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: Can I name SketchPoints like I name WorkPlanes (for example)? C++ COM\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Editing iProp rules to always open\n                    ", "solution": ["'Main Rule \u201cFill iProps\u201d\n'fills iProperties\n\nDim OK As Boolean = False\n\n'required 1st call\niLogicForm.Show(\"Edit iProperties\", FormMode.Modal)\n\nDo\n  Dim Descr As String = iProperties.Value(\"Project\", \"Description\")\n  Dim CustomProp As String = iProperties.Value(\"Custom\", \"AAA\")     \n  If (Trim(Descr) = \"\") Or (Trim(CustomProp) = \"\") Then\n    MsgBox(\"Empty iProperties are not allowed\")\n    iLogicForm.Show(\"Edit iProperties\", FormMode.Modal)\n  Else\n    OK = True\n  End If\nLoop Until OK \n\nMsgBox(\"iProperties test is successful\")\n"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to change drawing view layer\n                    ", "solution": ["' JDK 2013\nDim oDoc As DrawingDocument = ThisDoc.Document\nDim oSheet As Sheet = oDoc.ActiveSheet\nDim oView As DrawingView\n\tFor Each oView In oSheet.DrawingViews\n\t\t' If it's a flatpattern view\n\t\tIf oView.IsFlatPatternView = True Then\n\t\t\t' Get Layers\n\t\t\tDim oLayers As LayersEnumerator = oView.Parent.Parent.StylesManager.layers\n\t\t\t' Get CNC layer\n\t\t\tDim oLayer As Layer = oLayers.Item(\"CNC\")\n\t\t\t' Get lines\n\t\t\tDim oCurves As DrawingCurvesEnumerator = oView.DrawingCurves()\n\t\t\tDim oCurve As DrawingCurve\n\t\t\t\t' For each line\n\t\t\t\tFor Each oCurve In oCurves\n\t\t\t\t\t' Change the layer\n\t\t\t\t\toCurve.Segments.Item(1).Layer = oLayer\n\t\t\t\tNext\n\t\tEnd If\n\tNext"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Drawing dimension\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: dxf again\n                    ", "solution": ["oDrawing = ThisApplication.ActiveDocument\n\nDim Answer As MsgboxResult\n\nFor Each oSheet In oDrawing.Sheets\nAnswer = Msgbox(\"Yes = Save or No = Continue to next Sheet?\",MsgBoxStyle.YesNo,\"Question\")\nIf Answer = MsgBoxResult.Yes\n'Save Function\nElse if Answer = MsgBoxResult.No\n'Continue to the next Page\nEnd if\nNext", "        oPath = ThisDoc.Path\n\n        oFileName = ThisDoc.FileName(False) 'without extension\n\n        oDXFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC4-122E-11D5-8E91-0010B541CD80}\")\n\n        oDocument = ThisApplication.ActiveDocument\n\n        oContext = ThisApplication.TransientObjects.CreateTranslationContext\n\n        oContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n\n        oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n        oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n\n\n\n\n        'Define the drawing \n\n        Dim oDrawing As DrawingDocument\n\n        oDrawing = ThisDoc.Document\n\n\n\n        Dim oSheet As Sheet\n\n        Dim lPos As Long\n\n        Dim rPos As Long\n\n        Dim sLen As Long\n\n        Dim sSheetName As String\n\n        Dim sSheetNumber As Integer\n\n\n\n        'step through each drawing sheet\n\nDim Response As MsgboxResult\n\n        For Each oSheet In oDrawing.Sheets\n\n            Response = MsgBox(\"Yes = Save or No = Continue to next Sheet?\", MsgBoxStyle.YesNo, \"Question\")\n            If Response = MsgBoxResult.Yes Then\n\n                'find the seperator in the sheet name:number\n\n                lPos = InStr(oSheet.Name, \":\")\n\n\n\n                'find the number of characters in the sheet name\n\n                sLen = Len(oSheet.Name)\n\n\n\n                'find the sheet name\n\n                sSheetName = Left(oSheet.Name, lPos - 1)\n\n\n\n                'find the sheet number\n\n                sSheetNumber = Right(oSheet.Name, sLen - lPos)\n\n\n\n                'get DXF target folder path\n\n                oFolder = \"C:\\Test Folder\"\n\n\n\n                'Set the DXF target file name\n\n                oDataMedium.FileName = oFolder & \"\\\" & \" \" & sSheetName & \" \" & sSheetNumber & \".dxf\"\n\n\n                MessageBox.Show(\"DXF SAVED TO: \" & oDataMedium.FileName, \"DXF Saved\", MessageBoxButtons.OK)\n\n                'Publish document\n\n                oDXFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n\n            End If\n        Next"], "author": "Passi"},
{"created at": [], "solution Title": "\n                        Re: Ilogic 2010, Change active sheet\n                    ", "solution": ["'create list", "'assumes your drawing has at least 3 sheets", "myList = new integer(){1,2,3}", "'get user input", "mySheet = InputListBox(\"Select a sheet number.\", myList, myList(0), \"iLogic\", \"Sheet Numbers\")", "Dim oDoc As DrawingDocument", "oDoc = ThisApplication.ActiveDocument", "Dim oSheet As Sheet", "Dim lPos As Long", "Dim rPos As Long", "Dim sLen As Long", "Dim sSheetName As String", "Dim sSheetNumber As String", "\u00a0", "For Each oSheet In oDoc.Sheets", "\u00a0\u00a0\u00a0 lPos = InStr(oSheet.Name, \":\")", "\u00a0\u00a0\u00a0 sLen = Len(oSheet.Name)", "\u00a0\u00a0\u00a0 sSheetName = Left(oSheet.Name, lPos -1)", "\u00a0\u00a0\u00a0 sSheetNumber = Right(oSheet.Name, sLen -lPos )", "\u00a0\u00a0\u00a0 'compare list selection to sheet number", "\u00a0\u00a0\u00a0 If mySheet = sSheetNumber Then", "\u00a0\u00a0\u00a0 'activate sheet", "\u00a0\u00a0\u00a0 oSheet.Activate", "\u00a0\u00a0\u00a0 Else", "\u00a0\u00a0\u00a0 End If", "Next", "Dim oDoc As DrawingDocument", "oDoc = ThisApplication.ActiveDocument", "Dim oSheet As Sheet", "Dim lPos As Long", "Dim rPos As Long", "Dim sLen As Long", "Dim sSheetName As String", "Dim sSheetNumber As String", "'create sheet number list", "Dim oSheetList As New ArrayList", "i = 0", "For Each oSheet In oDoc.Sheets", "i = i +1", "oSheetList.add(i)", "Next", "'get user input", "mySheet = InputListBox(\"Select a sheet number.\", oSheetList, oSheetList(0), \"iLogic\", \"Sheet Numbers\")", "For Each oSheet In oDoc.Sheets", "\u00a0\u00a0 \u00a0lPos = InStr(oSheet.Name, \":\")", "\u00a0\u00a0 \u00a0sLen = Len(oSheet.Name)", "\u00a0\u00a0 \u00a0sSheetName = Left(oSheet.Name, lPos -1)", "\u00a0\u00a0 \u00a0sSheetNumber = Right(oSheet.Name, sLen -lPos )", "\u00a0\u00a0 \u00a0'compare list selection to sheet number", "\u00a0\u00a0 \u00a0If mySheet = sSheetNumber Then", "\u00a0\u00a0 \u00a0'activate sheet", "\u00a0\u00a0 \u00a0oSheet.Activate", "\u00a0\u00a0 \u00a0End If\u00a0\u00a0 \u00a0", "Next"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Renaming an extrusion feature\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: get_Count and get_XCount\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Need a way to Automate a change to an iProperty of multiple parts\n                    ", "solution": ["Sub Main() \n\t'JDK 2013\n\tDim oAsmDoc As AssemblyDocument = ThisDoc.Document\n\n\t' Get the project number from user\n\tProjectNo = InputBox(\"Project Number\", \"Project\", ProjectNo)\n\t\n\t' Change Project iProperty in Main Assemblhy\n\tiProperties.Value(\"Project\", \"Project\") = ProjectNo\n\t\n\t' Call recursion function\n\tCall TraverseAssembly(oAsmDoc.ComponentDefinition.Occurrences, 1, ProjectNo)\n\tCall oAsmDoc.Update\nEnd Sub \nPrivate Sub TraverseAssembly(Occurrences As ComponentOccurrences, _ \nLevel As Integer, ProjectNo As String) \n\nDim oOcc As ComponentOccurrence \n\tFor Each oOcc In Occurrences \n\n\t\t'Change Project iProperty for all\n\t\tiProperties.Value(oOcc.Name, \"Project\", \"Project\") = ProjectNo\n\t\t\n\t\t' Check to see if this occurrence represents a subassembly \n\t\t' and recursively call this function to traverse through it. \n\t\tIf oOcc.DefinitionDocumentType = kAssemblyDocumentObject Then\n\t\t\tCall TraverseAssembly(oOcc.SubOccurrences, Level + 1, ProjectNo) \n\t\tEnd If \n\tNext \nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: The difference between MethodAdd and Add?\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: RectangularPatternFeature Add function parameters, 2d or 3d?\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Get the suppress status of Workplane via vb.net\n                    ", "solution": ["Private Sub Test_IfWorkplanesSuppressed()\n\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim odef As PartComponentDefinition\n  Set odef = oDoc.ComponentDefinition\n  Dim oWPs As WorkPlanes\n  Set oWPs = odef.WorkPlanes\n\n  Dim wp As WorkPlane\n  Set wp = oWPs.Item(4)  ' <-- some workplane\n  Select Case wp.HealthStatus\n    Case HealthStatusEnum.kUpToDateHealth\n      Debug.Print \"Unsuppressed\"\n    Case HealthStatusEnum.kSuppressedHealth\n      Debug.Print \"Suppressed\"\n    End Select\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic driven part not updating after parameter change.\n                    ", "solution": ["ThisDoc.Document.Rebuild()\n\niLogicVb.UpdateWhenDone = True"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Document settings\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLOGIC to change properties on top level Asm components only\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: iLogic code to turn sketch block visibility on and off\n                    ", "solution": ["Dim oSketches As PlanarSketches", "oSketches = ThisApplication.ActiveDocument.ComponentDefinition.Sketches", "Dim oSketch As PlanarSketch", "oSketch = oSketches.Item(\"Sketch2\")", "Dim MyArrayList As New ArrayList", "MyArrayList.add(\"Back Edged\")", "MyArrayList.add(\"Base Edged\")", "MyArrayList.add(\"Front Edged\")", "MyArrayList.add(\"Top Edged\")", "MyArrayList.add(\"Turn ON all blocks\")", "MyArrayList.add(\"Turn OFF all blocks\")", "myBlock = InputListBox(\"Select a block to turn ON\", _", "MyArrayList, MyArrayList.item(0),\"iLogic\", \"Sketch Block Names\")", "Dim oSketchBlock As SketchBlock", "For Each oSketchBlock\u00a0 In oSketch.SketchBlocks", "\u00a0\u00a0 \u00a0'get position of colon, example: MyBlock:2 returns 8", "\u00a0\u00a0 \u00a0iPos = InStr(oSketchBlock.Name, \":\")", "\u00a0\u00a0 \u00a0'get block name, example: MyBlock:2 returns MyBlock", "\u00a0\u00a0 \u00a0sBlockName = Left(oSketchBlock.Name, iPos -1)", "\u00a0\u00a0 \u00a0If myBlock = \"Turn ON all blocks\" Then", "\u00a0\u00a0 \u00a0oSketchBlock.Visible = True", "\u00a0\u00a0 \u00a0Else If myBlock = \"Turn OFF all blocks\" Then", "\u00a0\u00a0 \u00a0oSketchBlock.Visible = False", "\u00a0\u00a0 \u00a0Else If myBlock = sBlockName Then", "\u00a0\u00a0 \u00a0oSketchBlock.Visible = True", "\u00a0\u00a0 \u00a0End If", "\u00a0\u00a0 \u00a0'if any sketch block is visible make the sketch visible", "\u00a0\u00a0 \u00a0If oSketchBlock.Visible = true Then oSketch.Visible = True", "Next"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic : check only one checkbox\n                    ", "solution": [], "author": "jddickson"},
{"created at": [], "solution Title": "\n                        Re: adding to existing KnitFeature\n                    ", "solution": ["Public Sub AddToKnit()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    Dim existingKnit As KnitFeature\n    Do\n        Dim selectedFeature As PartFeature\n        Set selectedFeature = ThisApplication.CommandManager.Pick( _\n                        kPartFeatureFilter, \"Select a stitch feature.\")\n        \n        If selectedFeature Is Nothing Then\n            Exit Sub\n        End If\n        \n        If TypeOf selectedFeature Is KnitFeature Then\n            Set existingKnit = selectedFeature\n        Else\n            MsgBox \"The selected feature must be a stitch feature.\"\n        End If\n    Loop While existingKnit Is Nothing\n    \n    Dim surfaceFeature As WorkSurface\n    Set surfaceFeature = ThisApplication.CommandManager.Pick( _\n         kPartBodyFilter, \"Select a body to add to the stitch feature.\")\n    Dim newBody As Object\n    Set newBody = surfaceFeature.SurfaceBodies.Item(1)\n    \n    Dim bodies As ObjectCollection\n    Set bodies = existingKnit.Surfaces\n    \n    Call bodies.Add(surfaceFeature)\n    existingKnit.Surfaces = bodies\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Parameter types\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Test to see if document has changed\n                    ", "solution": ["Public Sub Drawing_Change()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n   \n    If oDoc.Dirty = True Then\n        MsgBox (\"Changes Have been made\")\n    Else\n        MsgBox (\"No changes made\")\n    End If\nEnd Sub"], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: Find ilogic sketched symbol bounding box\n                    ", "solution": ["Dim oIDW As DrawingDocument = ThisDoc.Document\nDim oSheet As Sheet\nDim oSheets As Sheets = oIDW.Sheets\nDim oViews As DrawingViews\nDim oView As DrawingView\nDim oSymbol As SketchedSymbol\nDim oSymbols As SketchedSymbols\n\tFor Each oSheet In oSheets\n\t\tFor Each oSymbol In oSheet.SketchedSymbols\n\t\t\tIf oSymbol.Name = \"TEST\" Then\n\t\t\t\tDim oPoint As Point2d = oSymbol.Position\n\t\t\t\tMsgBox (\"X: \" & oPoint.x & \" Y: \" & oPoint.Y)\n\t\t\tEnd If\n\t\tNext\n\tNext"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: iLogic to create copy\n                    ", "solution": ["Dim Path As String = \"C:\\Temp\\\"\nDim FileName As String = \"yourfilename\"\nDim ext() = Split(ThisDoc.FileName(True), \".\")\nThisDoc.Document.SaveAs(Path & FileName & \".\" & ext(1), True)"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Change Font for all text-elements\n                    ", "solution": ["Sub OverrideTextFont ()\n  Dim oDoc As DrawingDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  \n  Dim oSheet As Sheet\n  Set oSheet = oDoc.ActiveSheet\n  \n  Dim oTB As TitleBlock\n  Set oTB = oSheet.TitleBlock\n\n  Dim oTBDef As TitleBlockDefinition\n  Set oTBDef = oTB.Definition\n  \n  Dim oSketch As DrawingSketch\n  Set oSketch = oTBDef.Sketch\n  \n  'dump texts in this title block\n  Dim oTextBox As TextBox\n  Dim i As Integer\n  For i = 1 To oSketch.TextBoxes.Count\n    Set oTextBox = oSketch.TextBoxes.Item(i)\n    Debug.Print i, oTextBox.Text\n    Debug.Print i, oTextBox.FormattedText\n    Debug.Print oTextBox.Style.Name\n    Debug.Print\n  Next\n  \n  ' change formatted text for box #9  ('Author' in my case)\n  ' override font family and size\n  Call oTBDef.Edit(oSketch)   ' enter edit mode\n  Set oTextBox = oSketch.TextBoxes.Item(9)\n  ' text value is derived from to iPropertyc \"Author\"\n  oTextBox.FormattedText = \"<StyleOverride Font='Chiller' FontSize='1'><Property Document='drawing' PropertySet='Inventor Summary Information' Property='Author' FormatID='{F29F85E0-4FF9-1068-AB91-08002B27B3D9}' PropertyID='4'>AUTHOR</Property></StyleOverride>\"\n  Call oTBDef.ExitEdit(True)  ' exit edit mode\n\n  Beep\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Negative Angle Parameters\n                    ", "solution": [], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: Activate the vault check in box hidden and pass predifined options?\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Rename & Replace Component\n                    ", "solution": ["If ThisDoc.Document.DocumentType = 12291 Then 'If Assy Doc\n\tDim oAssy As AssemblyDocument = ThisApplication.ActiveDocument\n\tDim thisOcc As Integer\n\t\t'Go through all Occurrences\n\t\tFor thisOcc = 1 To oAssy.ComponentDefinition.Occurrences.count\n\t\t\t'Reset name to default\n\t\t\toAssy.ComponentDefinition.Occurrences(thisOcc).Name = \"\"\n\t\tNext thisOcc\nEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Delete worksurface\n                    ", "solution": ["Public Sub FindCoincidentPlanes()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    ' Have the user select a face.\n    Dim selFace As Face\n    Set selFace = ThisApplication.CommandManager.Pick(kPartFacePlanarFilter, _\n                                                      \"Select a face.\")\n    \n    ' Get the plane geometry from the face.\n    Dim selPlane As Plane\n    Set selPlane = selFace.Geometry\n    \n    Dim coincFaces As FaceCollection\n    Set coincFaces = ThisApplication.TransientObjects.CreateFaceCollection\n    \n    ' Iterate through all of the work surfaces and their faces\n    ' looking for coincident faces.\n    Dim workSurf As WorkSurface\n    For Each workSurf In partDoc.ComponentDefinition.WorkSurfaces\n        Dim checkFace As Face\n        For Each checkFace In workSurf.SurfaceBodies.Item(1).Faces\n            ' Make sure this face is a plane.\n            If checkFace.SurfaceType = kPlaneSurface Then\n                Dim checkPlane As Plane\n                Set checkPlane = checkFace.Geometry\n                \n                ' Check to see if the normals fo this face and selected face are parallel.\n                Dim pi As Double\n                pi = Atn(1) * 4\n                If selPlane.Normal.IsParallelTo(checkPlane.Normal, 10 * (pi / 180)) Then\n                    ' Check to see if they're coincident.\n                    Dim dist As Double\n                    dist = ThisApplication.MeasureTools.GetMinimumDistance(checkPlane, _\n                                                                    selPlane.RootPoint)\n                    \n                    If dist < 10 Then\n                        ' Face is coincident, so add it to the collection.\n                        Call coincFaces.Add(checkFace)\n                    End If\n                End If\n            End If\n        Next\n    Next\n    \n    ' Check to see if there were coincident faces and select all of them.\n    If coincFaces.Count > 0 Then\n        Call partDoc.SelectSet.SelectMultiple(coincFaces)\n    End If\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How to copy a Level of Detail to a Design View\n                    ", "solution": ["ThisApplication.CommandManager.ControlDefinitions.Item(\"AssemblyCopyLODRepToViewRepCommand\").Execute", "Public Sub LOD()\n    If ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then Exit Sub\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = ThisApplication.ActiveDocument.ComponentDefinition\n    Dim oRepManager As RepresentationsManager\n    Set oRepManager = oAsmDef.RepresentationsManager\n    ' Name of LOD\n    Dim oLODRep As LevelOfDetailRepresentation\n    Set oLODRep = oRepManager.LevelOfDetailRepresentations.Item(\"LevelofDetail1\")\n    ' Activate LOD\n    Call oLODRep.Activate\n    ' Select the LOD...\n    ' Copy the LOD\n    ThisApplication.CommandManager.ControlDefinitions.Item(\"AssemblyCopyLODRepToViewRepCommand\").Execute\nEnd Sub", "If ThisDoc.Document.DocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n  Dim RepName=\"iLogic\"\n  Dim doc As AssemblyDocument = ThisDoc.Document\n  Try      ' Delete Design View if one exist prior\n    doc.ComponentDefinition.RepresentationsManager.DesignViewRepresentations.Item(\"Master\").activate\n    doc.ComponentDefinition.RepresentationsManager.DesignViewRepresentations.Item(RepName).delete\n  Catch\n  End Try\n  ' Find LOD in browser and give it focus\n  Dim oLODRep As LevelOfDetailRepresentation = _\n      doc.ComponentDefinition.RepresentationsManager.LevelOfDetailRepresentations.Item(RepName)\n  doc.BrowserPanes.Item(\"Model\").Activate\n  Dim oNativeBrowserNodeDef As NativeBrowserNodeDefinition  = doc.BrowserPanes.GetNativeBrowserNodeDefinition(oLODRep)\n  doc.BrowserPanes.ActivePane.TopNode.AllReferencedNodes(oNativeBrowserNodeDef).Item(1).DoSelect\n  ' Copy LOD to Design View\n  ThisApplication.CommandManager.ControlDefinitions.Item(\"AssemblyCopyLODRepToViewRepCommand\").Execute\nEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: system.runtime.interopservices.comexception type mismatch - Please Help\n                    ", "solution": [], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: how to remove dash with ilogic\n                    ", "solution": ["String.Replace(\"CharacterToReplace\", \"\")", "If booleanParam = True Then\n\tDim PartNumber As String = iProperties.Value(\"Project\", \"Part Number\")\n\tiProperties.Value(\"Custom\", \"Program\") = PartNumber.Replace(\"-\", \"\")\nElse\n\tbooleanParam = False\n\tiProperties.Value(\"Custom\", \"Program\") = \"\"\nEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: name to show in vba code\n                    ", "solution": ["Public Sub NameThat()\nDim oAssDoc As AssemblyDocument\nSet oAssDoc = ThisApplication.ActiveDocument\nDim oAssDef As AssemblyComponentDefinition\nSet oAssDef = oAssDoc.ComponentDefinition\nDim oOccurrence As ComponentOccurrence\n\tFor Each oOccurrence In oAssDef.Occurrences\n\t\tsName = Split(oOccurrence.Name, \":\")\n\t\tMsgBox (sName(0) & \" in \" & oAssDoc.DisplayName)\n\tNext\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Export ipt list\n                    ", "solution": ["' JDK 2013\n' If this is Assy Doc\nIf ThisDoc.Document.DocumentType = 12291 Then \n\t' Define txt doc name\n\tDim sPath As String = \"C:\\test.txt\"\n\tDim oAssDoc As AssemblyDocument = ThisApplication.ActiveDocument\n\tDim oAssDef As AssemblyComponentDefinition = oAssDoc.ComponentDefinition\n\tDim oOccurrence As ComponentOccurrence\n\tDim i As Integer\n\t' If txt doc exists\n\tIf System.IO.File.Exists(sPath) = True Then \n\t\t' Open stream to txt doc\n\t\tDim objWriter As New System.IO.StreamWriter(sPath)\n\t\t\t' Look at each occurrence in Assy\n\t\t\tFor Each oOccurrence In oAssDef.Occurrences\n\t\t\t\t'If it's a part file\n\t\t\t\tIf TypeOf oOccurrence.Definition Is PartComponentDefinition Then\n\t\t\t\t\ti = i + 1\n\t\t\t\t\tsName = Split(oOccurrence.Name, \":\")\n\t\t\t\t\t' Write occurrence name to txt doc\n\t\t\t\t\tobjWriter.Write(\"Part \" & i & \": \" & sName(0) & vbNewLine)\n\t\t\t\tEnd If\n\t\t\tNext\n\t\t' Close txt doc\n\t\tobjWriter.Close()\n\t\tMsgBox(\"List Written to File\")\n\tElse\n\t\tMsgBox(\"File Does Not Exist\")\n\tEnd If\nEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: iLogic to change feature occurrence upon opening part by user\n                    ", "solution": ["Length = 6.1 mm * QTY - 3.6 mm"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: CUSTOM IPROP TO SHOW USING VBA\n                    ", "solution": ["Public Sub cPropCheck()\n\tDim oDoc As Document\n\tSet oDoc = ThisApplication.ActiveDocument\n\tDim customPropSet As PropertySet\n\tSet customPropSet = oDoc.PropertySets.Item( _\n\t\"Inventor User Defined Properties\")\n\tDim iProp As Property\n\tDim sName As String\n\t' Define name here\n\tsName = \"MyCustomProp\"\n\t\tFor Each iProp In customPropSet\n\t\t\tIf iProp.Name = sName Then\n\t\t\t\tMsgBox (sName & \" already exists\")\n\t\t\tEnd If\n\t\tNext iProp\nEnd Sub", "Public Sub cPropCheck()\n\tDim oDoc As Document\n\tSet oDoc = ThisApplication.ActiveDocument\n\tDim customPropSet As PropertySet\n\tSet customPropSet = oDoc.PropertySets.Item( _\n\t\"Inventor User Defined Properties\")\n\tDim iProp As Property\n\tDim sName As String\n\t' Define name here\n\tsName = \"MyCustomProp\"\n\tDim Status As Boolean\n\tStatus = False\n\t\tFor Each iProp In customPropSet\n\t\t\tIf iProp.Name = sName Then\n\t\t\t\tStatus = True 'Prop Exists\n\t\t\t\tExit For 'Stop Loop\n\t\t\tEnd If\n\t\tNext iProp\n\tMsgBox (sName & \" exists \" & Status)\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: VBA - Get a sketches associated \"rectangular\" or \"circular&qu\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Is this behaviour of get_ActiveDocument by design?\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: iLogic:  Modify iProperties of a 'model' that is associated to the drawing v\n                    ", "solution": ["modelName = IO.Path.GetFileName(ActiveSheet.View(\"VIEW1\").ModelDocument.FullFileName)\niProperties.Value(modelName, \"Summary\", \"Title\") = \"Test\"\niLogicVb.UpdateWhenDone = True"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Addin 'DoEvents' Doesn't work\n                    ", "solution": ["Handles oMouseEvents.OnMouseClick"], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule for subassembly constraints\n                    ", "solution": [], "author": "swordmaster"},
{"created at": [], "solution Title": "\n                        Re: Adding an iLogic Rule to an Event Trigger with VBA\n                    ", "solution": ["On Error Resume Next\n        Set customIPropSet =  cDocument.PropertySets.Item(\"iLogicEventsRules\")\n        If customIPropSet.InternalName <> \"{2C540830-0723-455E-A8E2-891722EB4C3E}\" Then\n            Call customIPropSet.Delete\n            Set customIPropSet = cDocument. _\n            PropertySets.Add(\"iLogicEventsRules\", _\n            \"{2C540830-0723-455E-A8E2-891722EB4C3E}\")\n        End If\n\n        \n        If customIPropSet Is Nothing Then\n            Set customIPropSet = cDocument.PropertySets.Add(\"iLogicEventsRules\", _\n            \"{2C540830-0723-455E-A8E2-891722EB4C3E}\")\n        End If\n        If customIPropSet Is Nothing Then\n            MsgBox \"Unable to create the Event Triggers property for this file!\", _\n            , \"Event Triggers Not Set\"\n            Exit Sub\n        End If", "        On Error Resume Next\n        Set customIPropSet = cDocument.PropertySets.Item(\"iLogicEventsRules\")\n        If customIPropSet Is Nothing Then\n            Set customIPropSet = cDocument.PropertySets.Item(\"_iLogicEventsRules\")\n        End If\n        \n        If customIPropSet.InternalName <> \"{2C540830-0723-455E-A8E2-891722EB4C3E}\" Then\n            Call customIPropSet.Delete\n            Set customIPropSet = cDocument.PropertySets.Add(\"iLogicEventsRules\", \"{2C540830-0723-455E-A8E2-891722EB4C3E}\")\n        End If\n\n        \n        If customIPropSet Is Nothing Then\n            Set customIPropSet = cDocument.PropertySets.Add(\"iLogicEventsRules\", \"{2C540830-0723-455E-A8E2-891722EB4C3E}\")\n        End If\n        If customIPropSet Is Nothing Then\n            MsgBox \"Unable to create the Event Triggers property for this file!\", , \"Event Triggers Not Set\"\n            Exit Sub\n        End If", "Set customIPropSet = cDocument.PropertySets.Item(\"_iLogicEventsRules\")", "Option Explicit\n\nPublic Sub ReadProperty()\n \n    Dim doc As Document\n    Set doc = ThisApplication.ActiveDocument\n\n    Dim customPropSets As PropertySets\n    Set customPropSets = doc.PropertySets\n\n    Dim customPropSet As PropertySet\n    Set customPropSet = customPropSets.Item(\"{2C540830-0723-455E-A8E2-891722EB4C3E}\")\nEnd Sub \n\n", "Set customPropSet = customPropSets.Item(\"_iLogicEventsRules\")"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Where can I  find the ControlDefinitions Cmd list in Red String?\n                    ", "solution": ["Sub PrintCommandNames() \n    ' Get the CommandManager object. \n    Dim oCommandMgr As CommandManager \n    Set oCommandMgr = ThisApplication.CommandManager \n    \n    ' Get the collection of control definitions. \n    Dim oControlDefs As ControlDefinitions \n    Set oControlDefs = oCommandMgr.ControlDefinitions \n\n    ' Open the file and print out a header line. \n    Dim oControlDef As ControlDefinition \n    Open \"C:\\temp\\CommandNames.txt\" For Output As #1 \n    Print #1, Tab(10); \"Command Name\"; Tab(75); _ \n              \"Description\"; vbNewLine \n\n    ' Iterate through the controls and write out the name. \n    For Each oControlDef In oControlDefs \n        Print #1, oControlDef.InternalName; Tab(55); _ \n                  oControlDef.DescriptionText \n    Next \n\n    ' Close the file. \n    Close #1 \nEnd Sub", "Dim sPath As String = \"C:\\temp\\CommandNames.txt\" \nDim oCommandMgr As CommandManager = ThisApplication.CommandManager \nDim oControlDefs As ControlDefinitions = oCommandMgr.ControlDefinitions \nDim oControlDef As ControlDefinition \n\tIf System.IO.File.Exists(sPath) = True Then \n\t\tDim objWriter As New System.IO.StreamWriter(sPath)\n\t\t\tFor Each oControlDef In oControlDefs \n\t\tobjWriter.WriteLine(oControlDef.InternalName & \" | | \" & oControlDef.DescriptionText)\n\t\t\tNext\n\t\tobjWriter.Close()\n\t\tMsgBox(\"List Written to File\")\n\tElse\n\t\tMsgBox(\"File Does Not Exist\")\n\tEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Document settings with rule (Form)\n                    ", "solution": ["' Get part component definition\nDim oCompDef As PartComponentDefinition = ThisDoc.Document.ComponentDefinition\n\n' Change BOM Structure based on multi value parameter\n' BOM Structure Enumerator values are available in the programming help menu in Inventor.\nSelect Case BOMStructureParam\nCase \"Normal\"\n\toCompDef.BOMStructure = \"51970\"\nCase \"Phantom\"\n\toCompDef.BOMStructure = \"51971\"\nCase \"Reference\"\n\toCompDef.BOMStructure = \"51972\"\nCase \"Purchased\"\n\toCompDef.BOMStructure = \"51973\"\nCase \"Inseparable\"\n\toCompDef.BOMStructure = \"51974\"\nEnd Select", "' Get part component definition\nDim oCompDef As PartComponentDefinition = ThisDoc.Document.ComponentDefinition\n\n' Change BOM Structure based on multi value parameter\n' BOM Structure Enumerator values are available in the programming help menu in Inventor.\nSelect Case oCompDef.BOMStructure\nCase \"51970\"\n\tBOMStructureParam = \"Normal\"\nCase \"51971\"\n\tBOMStructureParam = \"Phantom\"\nCase \"51972\"\n\tBOMStructureParam = \"Reference\"\nCase \"51973\"\n\tBOMStructureParam = \"Purchased\"\nCase \"51974\"\n\tBOMStructureParam = \"Inseparable\"\nEnd Select"], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: Client Feature Right Click Menu\n                    ", "solution": ["void OnLinearMarkingMenu(ObjectsEnumerator selectedEntities, SelectionDeviceEnum selectionDevice, CommandControls linearMenu, NameValueMap additionalInfo)\n{\n    AssemblyDocument assembly = Addin.Application.ActiveEditDocument as AssemblyDocument;\n    if (assembly != null && selectedEntities.Count == 1 && new NotchDefinitionFeature(assembly, selectedEntities[1]).Exists)\n        linearMenu.AddButton(m_editButton.ButtonDefinition, false, true, \"AssemblyShowAssemblyFeatureDimsCtxCmd\", false);\n}", "void OnExecute(ButtonDefinition events, NameValueMap context)\n{\n    AssemblyDocument assembly = Addin.Application.ActiveEditDocument as AssemblyDocument;\n    if(assembly==null)\n        throw new Exception(events.DisplayName + \" requires an active assembly document.\");\n\n    object selected = (events.InternalName==m_editButton.InternalName && assembly.SelectSet.Count==1) ? assembly.SelectSet[1] : null;\n    NotchDefinitionFeature clientFeature = new NotchDefinitionFeature(assembly, selected);\n    new NotchDefinitionDialog(clientFeature);\n}"], "author": "cadull_rb"},
{"created at": [], "solution Title": "\n                        Re: How to change the name of a document programaticlly (C++ & COM)\n                    ", "solution": [], "author": "oransen"},
{"created at": [], "solution Title": "\n                        Re: Rotate View icon?\n                    ", "solution": ["Dim oDoc As DrawingDocument = ThisDoc.Document\nDim oView As DrawingView = oDoc.SelectSet(1)\noView.Rotation = 90\n'oView.RotateByAngle(90, True)", "Public Sub RotateView()\n\tDim oDoc As DrawingDocument\n\tSet oDoc = ThisApplication.ActiveDocument\n\t\tIf oDoc.SelectSet.count > 1 Then\n\t\t\tMsgBox (\"Please select a View\")\n\t\t\tExit Sub\n\t\tEnd If\n\tDim oView As DrawingView\n\tSet oView = oDoc.SelectSet(1)\n\tCall oView.RotateByAngle(90, True)\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Set all surfacebodies to invisible. VBA code attached.\n                    ", "solution": ["'catch and skip errors\nOn Error Resume Next\n'define the active assembly\nDim oAssyDoc As AssemblyDocument\noAssyDoc = ThisApplication.ActiveDocument  \n\n\n'get user input as True or False\nwfBoolean = InputRadioBox(\"Turn all Work Features On/Off\", \"On\", \"Off\", False, \"iLogic\")\n\n\n'Check all referenced docs \nDim oDoc As Inventor.Document", "Dim oWS As WorkSurface", "\nFor Each oDoc In oAssyDoc.AllReferencedDocuments\n    'set surface bodies visibility\n    For Each oWS In oDoc.ComponentDefinition.WorkSurfaces\n    oSurfaceBodies.Visible = wfBoolean\n    Next\n   Next\n'update the files\nInventorVb.DocumentUpdate()"], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: Setting Dimension Method Selectively\n                    ", "solution": ["' JKRIEK 2013\nDim oDoc As DrawingDocument = ThisDoc.Document\n\t' Check to make sure a dim was selected.\n\tIf oDoc.SelectSet.count = 0 Then\n\t\tMsgBox (\"A drawing dimension must be selected\")\n\t\tReturn\n\tEnd If\nDim oDim As DrawingDimension\noDim = oDoc.SelectSet.Item(1)\n\tSelect Case oDim.Tolerance.ToleranceType\n\t\tCase 31233: DimMethod = \"Default Method\"\n\t\tCase 31245: DimMethod = \"Basic Method\"\n\t\tCase 31246: DimMethod = \"Ref Method\"\n\t\tCase 31235: DimMethod = \"Symetric Method\"\n\t\tCase 31236: DimMethod = \"Deviation Method\"\n\t\tCase 31237: DimMethod = \"Limits Stacked Method\"\n\t\tCase 31238: DimMethod = \"Limits Linear Method\"\n\t\tCase 31239: DimMethod = \"MAX Method\"\n\tEnd Select\nMsgBox (DimMethod)", "' JKRIEK 2013\nDim oDoc As DrawingDocument = ThisDoc.Document\nDim oDim As DrawingDimension\n\tFor Each oDim in oDoc.ActiveSheet.DrawingDimensions\n\t\tSelect Case oDim.Tolerance.ToleranceType\n\t\t\tCase 31233: DimMethod = \"Default Method\"\n\t\t\tCase 31245: DimMethod = \"Basic Method\"\n\t\t\tCase 31246: DimMethod = \"Ref Method\"\n\t\t\tCase 31235: DimMethod = \"Symetric Method\"\n\t\t\tCase 31236: DimMethod = \"Deviation Method\"\n\t\t\tCase 31237: DimMethod = \"Limits Stacked Method\"\n\t\t\tCase 31238: DimMethod = \"Limits Linear Method\"\n\t\t\tCase 31239: DimMethod = \"MAX Method\"\n\t\tEnd Select\n\t\tMsgBox(DimMethod)\n\tNext"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Bad VBInventorAddInTemplate File?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Adding a part to Frame Generator with iLogic rules for features\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Example of use of AddByPlaneAndOffset in C++...\n                    ", "solution": ["    hRes = pWorkPlanesList->AddByPlaneAndOffset (_variant_t((IDispatch *)pWorkPlane),\n                                                 CComVariant(2.3),\n                                                 VARIANT_FALSE,\n                                                 &pOffsetWorkPlane) ;"], "author": "oransen"},
{"created at": [], "solution Title": "\n                        Re: derived part material\n                    ", "solution": ["Public Sub Derived_Material()\n    Dim oPartDoc As PartDocument\n    Set oPartDoc = ThisApplication.ActiveDocument\n    \n    Dim oderivedPart As DerivedPartComponent\n    Set oderivedPart = oPartDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents.Item(1)\n    \n    Dim oRefPart As PartDocument\n    Set oRefPart = oderivedPart.ReferencedDocumentDescriptor.ReferencedDocument\n    \n    Dim oRefPartDef As PartComponentDefinition\n    Set oRefPartDef = oRefPart.ComponentDefinition\n            \n    Dim oMaterial As Material\n    Set oMaterial = oRefPartDef.Material\n    \n    MsgBox (oMaterial.Name)\nEnd Sub"], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: Are occurences in Inventor like Xrefs in AutoCAD?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Creating a custom dialogue to edit a sketch symbol's text\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Is it possible to show the user only the result of a process?\n                    ", "solution": ["Sub PerformanceIncrease()\n\n    Dim Invapp As Inventor.Application\n    Set Invapp = ThisApplication\n\n    Dim oDoc As Inventor.Document\n    Set oDoc = Invapp.ActiveDocument\n\n    '' Turn off user interaction so that inventor can focus on your API calls exclusively\n    Invapp.UserInterfaceManager.UserInteractionDisabled = True\n    \n    '' Turn off screenupdating to speed up performance\n    Invapp.ScreenUpdating = False\n    \n    '' Set Defer updates to true and force an update when you're finished with your API commands\n    '' This can be done on drawings and sketches as well\n    Invapp.AssemblyOptions.DeferUpdate = True\n  \n    ''Wrap your command into a global transaction so only one undo point is created.\n    Dim oTrans As Inventor.Transaction\n    Set oTrans = Invapp.TransactionManager.StartGlobalTransaction(oAssDoc, _\n        \"My API Calls\")\n        \n    '' perform your functions here\n    \n    '' Be sure to end a global transaction when you are finished\n    oTrans.End\n        \n    '' Wrap up\n    Invapp.ScreenUpdating = True\n    Invapp.UserInterfaceManager.UserInteractionDisabled = False\n    Call oDoc.Update\n    Invapp.AssemblyOptions.DeferUpdate = False\n    "], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: ilogic drawing rule\n                    ", "solution": ["Dim oSheets As Sheets", "Dim oSheet As Sheet", "Dim oViews As DrawingViews", "Dim oView As DrawingView", "oSheets = ThisDoc.Document.Sheets", "i = 0", "For Each oSheet In oSheets", "\u00a0\u00a0 \u00a0oViews = oSheet.DrawingViews", "\u00a0\u00a0 \u00a0For Each oView In oViews", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0If oView.IsFlatPatternView = True Then", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0'count the view", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0i = i +1", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Else", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0End if", "\u00a0\u00a0 \u00a0Next", "Next", "If i > 0 Then", "MessageBox.Show(\"This drawing contains a flat pattern view.\", \"iLogic\")", "'run additional rule", "'iLogicVb.RunRule(\"ruleName\")", "Else ", "MessageBox.Show(\"This drawing does NOT contain a flat pattern view.\", \"iLogic\")", "End If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How to Hide suppressed elements?\n                    ", "solution": ["  Dim strFullFileName As String\n        strFullFileName = \"F:\\Arun\\Master\\Master_RF-VH-ZZ-0800-0500-0600.iam\"\n\n\n        Dim oFileManager As FileManager\n        oFileManager = ThisApplication.FileManager\n\n        Dim strLastActiveLOD As String\n        strLastActiveLOD = oFileManager.GetLastActiveLevelOfDetailRepresentation(strFullFileName)\n\n\n        Dim strFullDocumentName As String\n        strFullDocumentName = oFileManager.GetFullDocumentName(strFullFileName, strLastActiveLOD)\n\n        Dim oDocOpenOptions As NameValueMap\n        oDocOpenOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n        Dim oDoc As Document\n        oDoc = ThisApplication.Documents.OpenWithOptions(strFullDocumentName, oDocOpenOptions, True)"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: OnDocumentChange event not firing\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Flush constraint between two workplanes in an assembly with two parts...?\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Change Parameter in any Part that is not a component\n                    ", "solution": ["Dim fName As String = \"C:\\Workspace\\my_prog\\chan\\F_BB_L.ipt\"\nDim pDoc as PartDocument = ThisApplication.Documents.Open(fName, False)\npDoc.ComponentDefinition.Parameters.Item(\"TKNS2\").Value = 8\npDoc.Update\npDoc.Save\npDoc.Close "], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: AddiPartMember\n                    ", "solution": ["\u00a0\u00a0\u00a0 CComPtr<TransientGeometry> pTransGeom = ...", "\u00a0\u00a0\u00a0 CComPtr<Matrix> pPosMatrix;", "\u00a0\u00a0\u00a0 pTransGeom->CreateMatrix(&pPosMatrix); // Defaults to 0 0 0", "\u00a0\u00a0\u00a0 CComPtr<ComponentOccurrence> pTroncOcc = nullptr ;", "\u00a0\u00a0\u00a0 CComBSTR bstrTronchettiFile (L\"C:\\\\TEST\\\\TEST_IPART.ipt\") ;", "\u00a0\u00a0\u00a0 CComBSTR bstrMember (L\"30086486\") ; // the Member value", "\u00a0\u00a0\u00a0 pOccurrencesList->AddiPartMember (bstrTronchettiFile,pPosMatrix,_variant_t(bstrMember),&pTroncOcc) ;", "\n"], "author": "oransen"},
{"created at": [], "solution Title": "\n                        Re: sketch in assmebly\n                    ", "solution": ["Dim ents As SketchEntitiesEnumerator\nSet ents = oSketch.SketchLines.AddAsTwoPointRectangle(oTransGeom.CreatePoint2d(0, 0), oTransGeom.CreatePoint2d(", "100, 100", "))"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Subtype Sheet Metal file changed in Inventor 2014\n                    ", "solution": ["If IV.ActiveEditDocument.DocumentSubType.DocumentSubTypeID= \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then"], "author": "muratkaratas"},
{"created at": [], "solution Title": "\n                        Re: Imports sheet metall rule from ilogic\n                    ", "solution": ["Try\n   fSt = ThisDoc.Document.ComponentDefinition.SheetMetalStyles(\"myStyle\")\nCatch\n   fSt = ThisDoc.Document.ComponentDefinition.SheetMetalStyles(\"\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\")\n   fSt = fSt.Copy(\"myStyle\")\n   '\u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0438\u043b\u044c\n   fSt.Thickness = \"3 \u043c\u043c\"\n   '\u0438 \u0442.\u0434.\nEnd Try"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Changing Material\n                    ", "solution": [], "author": "rob.j.ross"},
{"created at": [], "solution Title": "\n                        Re: Save As PDF AddIn Hangs\n                    ", "solution": [], "author": "rob.j.ross"},
{"created at": [], "solution Title": "\n                        Re: Why does enabling a constraint limit cause parent assemblies to be edited?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: External ilogic rule is not working\n                    ", "solution": ["name = \"\"\nFor Each par In ThisDoc.Document.ComponentDefinition.Parameters.UserParameters\n   If par.Name = \"SMR\" Then\n      name = par.Name\n      Exit For\n   End If\nNext\n \nIf name = \"\" Then\n        'try to create new multi-value user parameter\n   Dim MyArrayList As New ArrayList\n   For Each st In ThisDoc.Document.ComponentDefinition.SheetMetalStyles\n      MyArrayList.add(st.Name)\n   Next\n   MultiValue.SetValueOptions(True, DefaultIndex := 0, NumericCompare := \"=\")\n   ThisDoc.Document.ComponentDefinition.Parameters _\n               .UserParameters.AddByValue(\"SMR\", \"aaaaa\", UnitsTypeEnum.kTextUnits)\n   MultiValue.List(\"SMR\") = MyArrayList\n   Parameter(\"SMR\") = SheetMetal.GetActiveStyle()\nEnd If\nSheetMetal.SetActiveStyle(Parameter(\"SMR\"))\niLogicVb.UpdateWhenDone =True\nBeep"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: editing macro\n                    ", "solution": ["@ECHO OFF \n\n:: VBA Project Copy Example\nC:\nDEL \"C:\\Local Files\\Master.ivb\"\nCOPY /Y \"\\\\network\\VBProject\\Master.ivb\" \"C:\\Local Files\"\n\n:: Start Inventor \nSTART /B \"\" \"C:\\PathToInventor\\Inventor.exe\"\n\nEXIT"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Need help to setup a list with iLogic\n                    ", "solution": ["'present the preset list of width values to the user for selection ", "'example list values are 0,1,2,3,4,5,6\nwidth = InputListBox(\"Select from the list\", MultiValue.List(\"width\"),width , \"iLogic\", \"Standard widths\")\n\n\n      ' Start the Select Case structure.\n      Select Case width\n\n         ' Test to see if width = 1\n         Case 1\n         'set values\n         height = 2\n         thickness = 1.3\n         part_color = \"blue\"\n         hole_diameter = 2.5 \n         corner_radius = 5 \n            \n\t ' Test to see if width = 2\n         Case 2\n         'set values\n         height = 2.5\n         thickness = 1.8\n         part_color = \"red\"\n         hole_diameter = 2.9 \n         corner_radius = 4 \n            \n\t ' Test to see if width = 3\n         Case 3\n         'set values\n         height = 2.8\n         thickness = 1.1\n         part_color = \"green\"\n         hole_diameter = 2.2\n         corner_radius = 3 \n         \n         ' Test to see if width = 4\n         Case 4\n         'set values\n         height = 1.8\n         thickness = 2.1\n         part_color = \"yellow\"\n         hole_diameter = 2.8\n         corner_radius = 3.5 \n         \n \t ' Test to see if width = 5\n         Case 5\n         'set values\n         height = 1.22\n         thickness = 2.75\n         part_color = \"black\"\n         hole_diameter = 2.85\n         corner_radius = 9.5 \n\n         ' If none of the above tests returned true.\n         Case Else\n         MessageBox.Show(\"Selection does not fall within the range\", \"iLogic\")\n\n      End Select\n      \n 'zoom all\nThisApplication.ActiveView.Fit\niLogicVb.UpdateWhenDone = True"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: EntityOne and EntityTwo in a FlushConstraint, C++\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Resort Hole Table\n                    ", "solution": ["Public Sub ResortTable()\n    Dim drawDoc As DrawingDocument\n    Set drawDoc = ThisApplication.ActiveDocument\n    \n    Dim currentSheet As Sheet\n    Set currentSheet = drawDoc.ActiveSheet\n    \n    ' Get the hole table to sort.\n    Dim table As HoleTable\n    Set table = currentSheet.HoleTables.Item(1)\n    \n    ' Add it to the select set.\n    drawDoc.SelectSet.Clear\n    Call drawDoc.SelectSet.Select(table)\n    \n    ' Get the re-sort command and execute it.\n    ThisApplication.CommandManager.ControlDefinitions. _\n               Item(\"DrawingHoleTableResortCtxCmd\").Execute\nEnd Sub\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Error checking with parameters\n                    ", "solution": ["        Dim invParameterName As String\n        invParameterName = oParam.Item(\"Thickness_A_FX\").Name\n\n\n        If Err.Number <> 0 Then\n            MsgBox(\"Error\")\n            ' Failed to get the property, which means it doesn't exist \n            ' so we'll create it and give it a reasonable initial value.\n            oParam = oUserParams.AddByExpression _\n                 (\"Thickness_A_FX\", \".875\", \"in\")\n            'Get the value of Thickness_A_FX into the TextBox on the form \n            Thickness_A_FX = oParam.Item(\"Thickness_A_FX\")\n        Else\n            Thickness_A_FX = oParam.Item(\"Thickness_A_FX\")\n        End If"], "author": "MRanda"},
{"created at": [], "solution Title": "\n                        Re: Trying to use AddByProjectingEntity with a DrawingSketch\n                    ", "solution": ["Public Sub ProjectEntity()\n    'Get the drawing document.\n    Dim thisDwg As DrawingDocument\n    Set thisDwg = ThisApplication.ActiveDocument\n\n    'Get the sheet.\n    Dim thisSheet As Sheet\n    Set thisSheet = thisDwg.ActiveSheet\n\n    'Get the active view.\n    Dim thisView As DrawingView\n    Set thisView = ThisApplication.CommandManager.Pick(kDrawingViewFilter, _\n                                                    \"Select the drawing view.\")\n\n    'Create a sketch on the view.\n    Dim thisDwgSketch As DrawingSketch\n    Set thisDwgSketch = thisView.Sketches.Add\n\n    ' Get the referenced assembly.\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = thisView.ReferencedDocumentDescriptor.ReferencedDocument\n    \n    ' Get the occurrence named \"BoxInPocket\"\n    Dim boxOcc As ComponentOccurrence\n    For Each boxOcc In asmDoc.ComponentDefinition.Occurrences\n    'For Each boxOcc In asmDoc.ComponentDefinition.Occurrences\n        If InStr(boxOcc.Name, \"Assembly1:1\") Then\n            ' Iterate over the the edges in the part.\n            ' Since the surface body is obtained from the occurence\n            ' it is a SurfaceBodyProxy and will return proxy edges\n            ' in the context of the top-level assembly.\n            \n            '\n             Call recurse_occ(boxOcc, thisView, thisDwgSketch)\n        End If\n    Next\nEnd Sub\n\n\n\nSub recurse_occ(oParentOcc As ComponentOccurrence, thisView As DrawingView, thisDwgSketch As DrawingSketch)\n\n    If TypeOf oParentOcc.Definition Is PartComponentDefinition Then\n                Dim partEdge As Edge\n                For Each partEdge In oParentOcc.SurfaceBodies.Item(1).Edges\n                    ' Attempt to get any drawing curves associated with this edge.\n                    ' This will return curves if the edge is visible in the view.\n                    Dim drawCurves As DrawingCurvesEnumerator\n                    Set drawCurves = thisView.DrawingCurves(partEdge)\n                    \n                    ' Project each drawing curve onto the sketch.\n                    Dim drawCurve As DrawingCurve\n                    For Each drawCurve In drawCurves\n                        Dim ent As SketchEntity\n                        Set ent = thisDwgSketch.AddByProjectingEntity(drawCurve)\n                    Next\n                Next\n             Else\n               ' if this occurrence is a sub assembly\n                Dim oSubOcc As ComponentOccurrence\n                \n                For Each oSubOcc In oParentOcc.SubOccurrences\n                    Call recurse_occ(oSubOcc, thisView, thisDwgSketch)\n                Next\n                 \n            End If\nEnd Sub\n"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: ObjectsEnumerator, get_Item: What is the type of the item?\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Proxy of a workplane inside a pattern inside a part inside an assembly\n                    ", "solution": ["Sub ExplorePatternInComponent()\n\n  Dim oAsmDoc As AssemblyDocument\n  Set oAsmDoc = ThisApplication.ActiveDocument\n  Dim oAsmDef As AssemblyComponentDefinition\n  Set oAsmDef = oAsmDoc.ComponentDefinition\n  Dim oOccs As ComponentOccurrences\n  Set oOccs = oAsmDef.Occurrences\n  Dim oOcc As ComponentOccurrence\n  Set oOcc = oOccs.ItemByName(\"Block-with-hole-pattern:1\")\n  \n  Dim oDef As PartComponentDefinition\n  Set oDef = oOcc.Definition\n  \n  Dim oFeatures As PartFeatures\n  Set oFeatures = oDef.features\n  \n  Dim RecFeatures As RectangularPatternFeatures\n  Set RecFeatures = oFeatures.RectangularPatternFeatures\n  \n  Dim RecPattern As RectangularPatternFeature\n  Set RecPattern = RecFeatures.Item(1)\n  \n  Dim Nx As Integer, Ny As Integer\n  \n  Dim Xparam As Parameter\n  Set Xparam = RecPattern.XCount\n  If Not Xparam Is Nothing Then\n    Nx = Xparam.value\n  Else\n    Nx = 1\n  End If\n  \n  Dim Yparam As Parameter\n  Set Yparam = RecPattern.YCount\n  If Not Yparam Is Nothing Then\n    Ny = Yparam.value\n  Else\n    Ny = 1\n  End If\n\n  Debug.Print (\"This pattern has \" & Nx & \" x \" & Ny & \" elements\")\n\n  Dim oPatternElements As FeaturePatternElements\n  Set oPatternElements = RecPattern.PatternElements\n  Dim oElt As FeaturePatternElement\n\n  Dim sset As SelectSet\n  Set sset = oAsmDoc.SelectSet\n  \n  Dim i As Integer\n  \n  For i = 2 To Nx\n    Set oElt = oPatternElements.Item(i)\n'    Debug.Print oElt.ResultFeatures.Item(1).Name\n\n    'get work plane object (assume it is the first object \n    'in the collection ResultFeatures)\n    Dim oWP As WorkPlane\n    Set oWP = oElt.ResultFeatures.Item(1)\n    'Debug.Print oWP.Name\n\n    'get proxy object\n    Dim oWpProxy As WorkPlaneProxy\n    Set oWpProxy = Nothing\n    Call oOcc.CreateGeometryProxy(oWP, oWpProxy)\n\n    'now you can do something useful with oWpProxy\n    Call sset.Select(oWpProxy)\n  Next     \n  Beep    \nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: API to add perpendicular distance between sketch entities\n                    ", "solution": [], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: Non standard workplanes in inserted iParts?\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Qty in bom\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: .Net Is there anyway to use the Assembly Selection Tools?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: AddIn - Active Document Issue\n                    ", "solution": [], "author": "rob.j.ross"},
{"created at": [], "solution Title": "\n                        Re: Sample Code does not work\n                    ", "solution": ["    Public Sub CreateSketchedSymbolDefinition()\n\n        ' Set a reference to the drawing document.\n        ' This assumes a drawing document is active.\n        Dim oDrawDoc As DrawingDocument = ThisApplication.ActiveDocument\n\n        ' Create the new sketched symbol definition.\n        Dim oSketchedSymbolDef As SketchedSymbolDefinition _\n            = oDrawDoc.SketchedSymbolDefinitions.Add(\"Circular Callout\")\n\n        ' Open the sketched symbol definition's sketch for edit. This is done by calling the Edit\n        ' method of the SketchedSymbolDefinition to obtain a DrawingSketch. This actually creates\n        ' a copy of the sketched symbol definition's and opens it for edit.\n        Dim oSketch As DrawingSketch = Nothing\n        Call oSketchedSymbolDef.Edit(oSketch)\n\n        Dim oTG As TransientGeometry = ThisApplication.TransientGeometry\n\n        ' Use the functionality of the sketch to add sketched symbol graphics.\n        Dim oSketchLine As SketchLine = oSketch.SketchLines _\n            .AddByTwoPoints(oTG.CreatePoint2d(0, 0), oTG.CreatePoint2d(20, 0))\n\n        Dim oSketchCircle As SketchCircle = oSketch.SketchCircles _\n            .AddByCenterRadius(oTG.CreatePoint2d(22, 0), 2)\n\n        Call oSketch.GeometricConstraints.AddCoincident( _\n                oSketchLine.EndSketchPoint, oSketchCircle)\n\n        ' Make the starting point of the sketch line the insertion point\n        oSketchLine.StartSketchPoint.InsertionPoint = True\n\n        ' Add a prompted text field at the center of the sketch circle.\n        Dim sText As String = \"<Prompt>Enter text 1</Prompt>\"\n\n        Dim oTextBox As Inventor.TextBox\n        oTextBox = oSketch.TextBoxes.AddFitted(oTG.CreatePoint2d(22, 0), sText)\n        oTextBox.VerticalJustification = VerticalTextAlignmentEnum.kAlignTextMiddle\n        oTextBox.HorizontalJustification = HorizontalTextAlignmentEnum.kAlignTextCenter\n\n        Call oSketchedSymbolDef.ExitEdit(True)\n\n    End Sub\n\n\n    Public Sub InsertSketchedSymbolOnSheet()\n\n        ' Set a reference to the drawing document.\n        ' This assumes a drawing document is active.\n        Dim oDrawDoc As DrawingDocument = ThisApplication.ActiveDocument\n\n        ' Obtain a reference to the desired sketched symbol definition.\n        Dim oSketchedSymbolDef As SketchedSymbolDefinition _\n            = oDrawDoc.SketchedSymbolDefinitions.Item(\"Circular Callout\")\n\n        Dim oSheet As Sheet = oDrawDoc.ActiveSheet\n\n        ' This sketched symbol definition contains one prompted string input. An array\n        ' must be input that contains the strings for the prompted strings.\n\n        Dim sPromptStrings(0) As String\n        sPromptStrings(0) = \"AAAAA\"\n\n        Dim oTG As TransientGeometry = ThisApplication.TransientGeometry\n\n        ' Add an instance of the sketched symbol definition to the sheet.\n        ' Rotate the instance by 45 degrees and scale by .75 when adding.\n        ' The symbol will be inserted at (0,0) on the sheet. Since the\n        ' start point of the line was marked as the insertion point, the\n        ' start point should end up at (0,0).\n        Dim oSketchedSymbol As SketchedSymbol = oSheet.SketchedSymbols.Add( _\n                oSketchedSymbolDef, _\n                oTG.CreatePoint2d(0, 0), _\n                (3.14159 / 4), _\n                0.75, _\n                sPromptStrings)\n    End Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: (VBA) Write multiple Prompted Entry Fields in one pass?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Workplane visibility within clientfeature\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Change the parameters of a custom ipart inserted into an assembly\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: symbol to show in the toolbar\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: iLogic - STL Translator Specific Parameters Info\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iProperty, iLogic, event trigger and Content Center\n                    ", "solution": ["If iProperties.Value(\"Custom\", \"PropertyName\")=\"\" Then Exit Sub"], "author": "eljoseppo"},
{"created at": [], "solution Title": "\n                        Re: ipt: how to get mass of one solid (not iPropety mass of all solids in part)\n                    ", "solution": ["Private Sub Test()\n\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  \n  Dim oDef As PartComponentDefinition\n  Set oDef = oDoc.ComponentDefinition\n  \n  Dim RelErr As Double\n  RelErr = 0.01\n  \n  Dim oBody As SurfaceBody\n  Dim V1 As Double, V2 As Double\n\n  Set oBody = oDef.SurfaceBodies.Item(1)\n  V1 = oBody.Volume(RelErr)\n  Debug.Print V1\n  \n  Set oBody = oDef.SurfaceBodies.Item(2)\n  V2 = oBody.Volume(RelErr)\n  Debug.Print V2\n\nEnd Sub", "'define the document as a component definition\nDim oCompDef as ComponentDefinition\noCompDef = ThisDoc.Document.ComponentDefinition\n\n'define the solidbody\nDim oBody As SurfaceBody\n\n'define the solid body name to look for\nDim body As String\nsBody = \"Solid1\"\n\nDim oVolume As Double\nDim oDensity As Double\noDensity = oCompDef.Material.Density\n\noConversion = 0.00220462 'gram to lbs\n\n'get mass of named solid body\ni = 1\nFor Each SurfaceBody In oCompDef.SurfaceBodies\n\toBody = oCompDef.SurfaceBodies.Item(i)\n\tIf sBody = oBody.Name Then\n\t\toVolume = oBody.Volume(0.001) ' (g/mm^3)\n\t\toMass = Round(oVolume * oDensity * oConversion,2)\n\t\tMessageBox.Show(\"Mass of \" & oBody.Name & \" = \" & oMass & \" lbmass\", \"iLogic\")\n\tEnd If\ni = i +1\nNext"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: read item in udp of a part from assy using vba\n                    ", "solution": ["Public Sub GetiPropertiesOfTopLevel()\n    ' Get the active assembly.\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    ' Iterate through the files referenced by the assembly.\n    ' These are only direct references so parts and assemblies\n    ' in subassemblies will be ignored.\n    Dim doc As Document\n    For Each doc In asmDoc.ReferencedFiles\n        ' Get the \"Customer Code\" iProperty\n        Dim customPropSet As PropertySet\n        Set customPropSet = doc.PropertySets.item( _\n                            \"Inventor User Defined Properties\")\n        \n        Dim prop As Inventor.Property\n        On Error Resume Next\n        Set prop = customPropSet.item(\"Customer Code\")\n        If Err.Number = 0 Then\n            Debug.Print \"The file \"\"\" & doc.FullFileName & \"\"\" has the value: \" & prop.Value\n        Else\n            Debug.Print \"The file \"\"\" & doc.FullFileName & _\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"\"\" does not have the \"\"Customer Code\"\" iProperty\"\n        End If\n        On Error GoTo 0\n    Next\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: sketch command in vba\n                    ", "solution": ["Public Sub ActivateSketch()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    ' Create a new sketch on the X-Y base work plane.\n    Dim sk As Sketch\n    Set sk = partDoc.ComponentDefinition.Sketches.Add( _\n             partDoc.ComponentDefinition.WorkPlanes.item(3))\n    \n    ' Bring the sketch into edit mode.\n    sk.Edit\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Dockable Window Help Button\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Create Addin with Compatibility Inventor Versions and OS 32 and 64 bits\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Skip rule\n                    ", "solution": ["If NeedRule Then\n  iLogicVb.RunRule(\"ruleName\")\nEnd If", "This rule came from Vladimir Ananyjev", "It is working very well. Thank you", "MsgBox(\"Start of Main Rule\")\n\n'Run rule 1\niLogicVb.RunRule(\"Rule1\")\n\n'Run rule 2\niLogicVb.RunRule(\"Rule2\")\n\n\nR = MessageBox.Show(\"Do you want to run Rule3 ?\", _\n\t\"Ask user for decision\", _\n\tMessageBoxButtons.YesNo, _\n\tMessageBoxIcon.Question)\n\nIf R = vbYes Then\n\t'Run rule 3\n\tiLogicVb.RunRule(\"Rule3\")\nElse \n\tMsgBox(\"Skip Rule3\")\nEnd If"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Method 'Reorder' for Demoting Pattern to New Sub-Assembly Fails\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic to control End of Part\n                    ", "solution": ["Feature", ".", "InventorFeature", "(", "\"", "Feature Name", "\"", ")", ".", "SetEndOfPart", "(", "True", ")"], "author": "fakeru"},
{"created at": [], "solution Title": "\n                        Re: Section Participation\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: iLogic Code part iproperties to custom iproperties\n                    ", "solution": ["'This iLogic rule gets components quantities from BOMView \"Parts Only\"\nSub Main()\n\n    ' a reference to the assembly document.\n    ' This assumes an assembly document is active.\n    Dim oAssyDoc As AssemblyDocument = ThisDoc.Document\n    Dim oAssyDef As AssemblyComponentDefinition = oAssyDoc.ComponentDefinition\n    \n    ' Get the Representations Manager object.\n    Dim repMgr As RepresentationsManager = oAssyDef.RepresentationsManager\n    \n    ' activate LOD Master - necessary to get BOM object !!!\n    Dim oMasterLOD As LevelOfDetailRepresentation = repMgr.LevelOfDetailRepresentations.Item(1)\n    \n    'set  a reference to the BOM\n    Dim oBOM As BOM = oAssyDef.BOM\n    \n    ' Make sure that the \"Parts Only\" view is enabled.\n    oBOM.PartsOnlyViewEnabled = True\n    \n    'set a reference to the \"Parts Only\" BOMView\n    Dim oBOMView As BOMView = oBOM.BOMViews.Item(\"Parts Only\")\n    \n    For Each oBOMRow As BOMRow In oBOMView.BOMRows\n    \n        'Set a reference to the primary ComponentDefinition of the row\n        Dim oCompDef As ComponentDefinition = oBOMRow.ComponentDefinitions.Item(1)        \n        \n        Dim oPartNumProperty As Inventor.Property\n        Dim oDescripProperty As Inventor.Property\n        Dim Qty As String\n        \n        If TypeOf oCompDef Is VirtualComponentDefinition Then\n            'Get the Virtual Component property that contains the \"Part Number\"\n            oPartNumProperty = oCompDef.PropertySets _\n                .Item(\"Design Tracking Properties\").Item(\"Part Number\")\n        \n            'Get the  Virtual Component property that contains the \"Description\"\n            oDescripProperty = oCompDef.PropertySets _\n                .Item(\"Design Tracking Properties\").Item(\"Description\")\n                \n            Qty = oBOMRow.TotalQuantity\n            SetCustomProperty(oCompDef, \"QUANTITY\", Qty)\n                \n        Else\n            'Get the file property that contains the \"Part Number\"\n            'The file property is obtained from the parent\n            'document of the associated ComponentDefinition.\n            oPartNumProperty = oCompDef.Document.PropertySets _\n                .Item(\"Design Tracking Properties\").Item(\"Part Number\")\n        \n            'Get the file property that contains the \"Description\"\n            oDescripProperty = oCompDef.Document.PropertySets _\n                .Item(\"Design Tracking Properties\").Item(\"Description\")\n            \n            Qty = oBOMRow.TotalQuantity\n            \n            SetCustomProperty(oCompDef, \"QUANTITY\", Qty)\n\n        End If\n    Next\n    \n    Beep    \n    MsgBox(\"Done\")\nEnd Sub 'Main\n\n\n\nPrivate Sub SetCustomProperty( _\n                ByVal oCompDef as ComponentDefinition, _\n                ByVal PropName As String, _\n                ByVal Qty As String)\n\n    Dim PropSetNAme As String = \"Inventor User Defined Properties\"\n    Dim oCustomPropertySet As PropertySet\n    \n    If TypeOf oCompDef Is VirtualComponentDefinition Then\n        ' Get the user defined (custom) property set.\n        oCustomPropertySet = oCompDef.PropertySets.Item(PropSetNAme)    \n    Else\n        ' Get the active document.\n        Dim oDoc as Inventor.PartDocument = oCompDef.Document    \n        ' Get the user defined (custom) property set.\n        oCustomPropertySet = oDoc.PropertySets.Item(PropSetNAme)    \n    End If\n\n    Dim oProperty As Inventor.Property    \n    Try    \n        'property exists, set new value\n           oProperty = oCustomPropertySet.Item(PropName)\n        oProperty.Value = Qty\n    Catch\n        ' Create the properties.\n        oProperty = oCustomPropertySet.Add(Qty, PropName)\n    End Try\nEnd Sub  'SetCustomProperty"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Associative body copy API Sample - problem\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: how to change the partlist insert point. Upper right point is sucks :-(\n                    ", "solution": ["Dim oDoc As DrawingDocument = ThisDrawing.Document\nDim oSheet As Sheet =  oDoc.ActiveSheet\nDim oBorder As Border = oSheet.Border\nDim oPlacementPoint As Point2d\noModelDoc = ThisDrawing.ModelDocument\n   \nIf Not oBorder Is Nothing Then\n\toPlacementPoint = oBorder.RangeBox.MaxPoint\nElse\n\toPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d(oSheet.Width, oSheet.Height)\nEnd If\n    \nFor i = 1 To oSheet.PartsLists.Count\n\toSheet.PartsLists.Item(1).Delete\nNext i\n\nDim oPartsList As PartsList\noPartsList = oSheet.PartsLists.Add(oModelDoc, oPlacementPoint)\n\nminXpoint = oSheet.TitleBlock.RangeBox.MinPoint.x\nminYpoint = oSheet.TitleBlock.RangeBox.MaxPoint.Y\nmaxXpoint = oPlacementPoint.x\ndPointY = oSheet.PartsLists.Item(1).RangeBox.MinPoint.Y - minYpoint\nmaxYpoint = oPlacementPoint.Y - dPointY\n    \nDim newmin, newmax As Point2d\nnewmin = ThisApplication.TransientGeometry.CreatePoint2d(minXpoint, minYpoint)\nnewmax = ThisApplication.TransientGeometry.CreatePoint2d(maxXpoint, maxYpoint)\noSheet.PartsLists.Item(1).Delete\noPartsList = oSheet.PartsLists.Add(oModelDoc, newmax)"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Searching whole assembly stack\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: Views in DWG\n                    ", "solution": ["Dim oList As String() = {\"AAA\",\"BBB\",\"CCC\"}\nDim LabelName As String = InputListBox( _\n\t\t\"Select Label Name and then Pick Drawing View\", _\n\t\toList, \"\", Title := \"Label Names\")\nIf LabelName <> \"\" Then\t\t\n\t' Get a drawing view selection from the user\n\tDim oObject As Object\n\toObject = ThisApplication.CommandManager.Pick( _\n\t\tSelectionFilterEnum.kDrawingViewFilter, \"Pick a feature\")\n\t\n\tDim oView As DrawingView = oObject\n\toView.ShowLabel = True\n\toView.Label.FormattedText = LabelName\nEnd If\nBeep"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Starting Inventor from another machine\n                    ", "solution": ["Try\n    Dim options As New System.Management.ConnectionOptions\n    options.Username = userNameBox.Text\n    options.Password = passwordBox.Text\n\n    Dim path As New System.Management.ManagementPath(\"\\\\\" + ip + \"\\root\\CIMV2:Win32_Process\")\n    Dim scope As New System.Management.ManagementScope(path, options)\n    Dim opt As New System.Management.ObjectGetOptions()\n    Dim classInstance As New System.Management.ManagementClass(scope, path, opt)\n\n    Dim inParams As System.Management.ManagementBaseObject = classInstance.GetMethodParameters(\"Create\")\n    inParams(\"CommandLine\") = ExeBox.Text\n\n    ' Execute the method and obtain the return values.\n    Dim outParams As System.Management.ManagementBaseObject = classInstance.InvokeMethod(\"Create\", inParams, Nothing)\n\n    Return \"ReturnValue:\" & outParams(\"returnValue\") & \" Process ID: {0}\" & outParams(\"processId\") & \" IP = \" & ip\n    Catch err As Exception\n    execproc = \"Starting process has been failed on \" & ip & \" \" & err.Message\n    MessageBox.Show(\"An error occured while trying\" & _\n    \" to execute the WMI method: \" & err.Message)\nEnd Try"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Imports Inventor and Imports SYSTEM.IO\n                    ", "solution": [], "author": "achmidt"},
{"created at": [], "solution Title": "\n                        Re: iLogic - delete a suppressed component pattern\n                    ", "solution": ["  Dim oAsmDoc As AssemblyDocument = ThisDoc.Document\n  Dim oAsmDef As AssemblyComponentDefinition _\n  \t= oAsmDoc.ComponentDefinition\n    \nRunAgain:\n  oAsmDoc.Update\n  Dim oOccs As ComponentOccurrences = oAsmDef.Occurrences\n\n  For Each oOcc As ComponentOccurrence In oOccs\n    If oOcc.Suppressed Then\n      If oOcc.IsPatternElement Then\n        Dim oPattern As RectangularOccurrencePattern _\n        \t= oOcc.PatternElement.Parent\n        oPattern.Delete\n        Goto RunAgain\n      End If\n    End If\n  Next"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: add ins\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Open document from drawing partslistrow\n                    ", "solution": ["Public Sub OpenPartFromList()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    ' Get the part list\n    Dim oPartList As PartsList\n    Set oPartList = oDoc.ActiveSheet.PartsLists.Item(1)\n    \n    ' Find the first row\n    Dim oRow As PartsListRow\n    Set oRow = oPartList.PartsListRows.Item(1)\n    \n    ' Get Ref Doc\n    Dim oRefDoc As Document\n    Set oRefDoc = oRow.ReferencedFiles.Item(1).ReferencedDocument\n    \n    ' Open the doc\n    ThisApplication.Documents.Open (oRefDoc.FullDocumentName)\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: vb.net plugin How to change iProperties for virtual part?\n                    ", "solution": [], "author": "achmidt"},
{"created at": [], "solution Title": "\n                        Re: Ilogic form\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: derived parts detection\n                    ", "solution": ["Dim doc As Document\nSet doc = ThisApplication.ActiveDocument\n    \nDim derivedPartComp As DerivedPartComponent\nSet derivedPartComp = doc.ComponentDefinition.ReferenceComponents.DerivedPartComponents(1)\n    \nderivedPartComp.SuppressLinkToFile = False"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Application Options editing from API code?\n                    ", "solution": ["If ThisApplication.GeneralOptions.UserName = \"KRIEKJ\" Then\n\tThisApplication.GeneralOptions.UserName = \"JDK\"\nEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Convert to weldment assembly with iLogic\n                    ", "solution": [], "author": "DannyVanDuijn"},
{"created at": [], "solution Title": "\n                        Re: IsIPartFactory and IsIPartMember\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: FindUsingPoint in Sub Assembly\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: API to check if file is AutoCAD DWG\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Exported Parameters updated through ilogic in a a part rounding to whole num\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Rule to measure loop length\n                    ", "solution": ["Parameter(\"Length\")= ThisDoc.Document.ComponentDefinition.Sketches.Item(1).Profiles.Item(1).RegionProperties.Perimeter * 10"], "author": "eljoseppo"},
{"created at": [], "solution Title": "\n                        Re: [VBA] Identify Parts and their location in Space\n                    ", "solution": [], "author": "lemensk"},
{"created at": [], "solution Title": "\n                        Re: Ilogic code to update sheet metal thickness parameter not working\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: VBA code for opening referenced files (dirty) in an assembly\n                    ", "solution": [], "author": "j.r.a.koning"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Sheet metal rule\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: send custom iproperties from selected assembly view in drawing to all parts\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Finding the Sin of a Number in Ilogic\n                    ", "solution": ["angle_rad=angle_deeg/180*PI\nsin_deeg=Sin(angle_rad)"], "author": "eljoseppo"},
{"created at": [], "solution Title": "\n                        Re: How to get the BOM of item leader is attached to\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: [VBA] Compart Local WorkAxes to Global WorkAxes\n                    ", "solution": [], "author": "lemensk"},
{"created at": [], "solution Title": "\n                        Re: help - cannot replace Washer & Nut in assy by ilogic\n                    ", "solution": ["Private Sub CompensateForComDefect()\n\t' The Content Center API will remember a previous child node, and it will not enumerate other siblings of the same parent.\n\t'  They are counting on the caller to release the reference.\n\tSystem.GC.Collect()\nEnd Sub"], "author": "cadull_rb"},
{"created at": [], "solution Title": "\n                        Re: Changing text in description column of a HoleTable\n                    ", "solution": [], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: [VBA] Location of a part in an assembly file\n                    ", "solution": [], "author": "lemensk"},
{"created at": [], "solution Title": "\n                        Re: System.Environment.SetEnvironmentVariable\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: [VBA] Creating a WorkPoint?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Filter Problem - Can\u2019t add two different filters\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic Format a Number\n                    ", "solution": ["Dim value As Double = 2.125\nMessageBox.Show(Microsoft.VisualBasic.Strings.Format(value,\"00.00\"), \"iLogic\")\nMessageBox.Show(value.ToString(\"00.##\"), \"iLogic 2\")"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Disable BOMs of a 3D-model in a DWF\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: [API] Traverse an Assembly and Print off minRange Location for Each Part\n                    ", "solution": [], "author": "lemensk"},
{"created at": [], "solution Title": "\n                        Re: Inventor API Training Lesson\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: Ilogic min or max ?\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: Removing Sketch Image from Drawing Border Definition\n                    ", "solution": [], "author": "kmiller"},
{"created at": [], "solution Title": "\n                        Re: Appearances Attributes in the Library\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Clientfeature.HiddenParameters\n                    ", "solution": ["Sub CfParamsVisibility()\n\n    Dim doc As Document\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim features As PartFeatures\n    Set features = doc.ComponentDefinition.features\n    \n    Dim def As ClientFeatureDefinition\n    Set def = features.ClientFeatures.CreateDefinition\n    \n    Call def.ClientFeatureElements.Add(features(1), True)\n\n    Dim cf As ClientFeature\n    Set cf = features.ClientFeatures.Add(def, \"ADN\")\n    \n    Dim col As ObjectCollection\n    Set col = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    Dim param As parameter\n    For Each param In cf.parameters\n        col.Add param\n    Next\n    \n    cf.HiddenParameters = col\n    \nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: SaveCopyAs with bypassing export dialog\n                    ", "solution": [], "author": "kmiller"},
{"created at": [], "solution Title": "\n                        Re: AddCoincident constraint for multiple sketch entities\n                    ", "solution": ["Public Sub SketchConstraints()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    Dim sketch As PlanarSketch\n    Set sketch = partDoc.ComponentDefinition.Sketches.Add( _\n                 partDoc.ComponentDefinition.WorkPlanes.Item(3))\n    \n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    Dim line1 As SketchLine\n    Dim line2 As SketchLine\n    Dim circ As SketchCircle\n    Dim arc As SketchArc\n    \n    Set circ = sketch.SketchCircles.AddByCenterRadius( _\n                                           tg.CreatePoint2d(0, 0), 5)\n    \n    Set line1 = sketch.SketchLines.AddByTwoPoints( _\n                                           tg.CreatePoint2d(1, 1), _\n                                           tg.CreatePoint2d(6, 6))\n    Set line2 = sketch.SketchLines.AddByTwoPoints( _\n                                           tg.CreatePoint2d(-1, 1), _\n                                           tg.CreatePoint2d(-6, 6))\n    \n    Set arc = sketch.SketchArcs.AddByThreePoints( _\n                                           circ.CenterSketchPoint, _\n                                           tg.CreatePoint2d(1, -3), _\n                                           tg.CreatePoint2d(4, -4))\n                                                  \n    Call circ.CenterSketchPoint.Merge(line1.StartSketchPoint)\n    Call circ.CenterSketchPoint.Merge(line2.StartSketchPoint)\n    \n    sketch.Solve\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: UserParamter\n                    ", "solution": ["Dim", " ", "oParam", " ", "As", " ", "Parameter", " ", "doc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "        ", "For", " ", "Each", " ", "oParam", " ", "In", " ", "doc", ".", "ComponentDefinition", ".", "Parameters", "        ", "MsgBox", "(", "oParam", ".", "Name", " ", "+", "\"", " -- ", "\"", " ", "+", "oParam", ".", "Expression", ")", "            ", "If", " ", "oParam", ".", "Name", " ", "=", " ", "\"", "Printer_Name", "\"", "  ", "Then", "                ", "If", " ", "oParam", ".", "Expression", " ", "=", " ", "\"", "\"\"3DPrinter\"\"", "\"", " ", "Then", "                               ", "MsgBox", "(", "oParam", ".", "Expression", ")", "                ", "End", " ", "If", "            ", "End", " ", "If", "        ", "Next", " ", " "], "author": "Carthik_Babu"},
{"created at": [], "solution Title": "\n                        Re: Mallfunction of the forums.autodesk.com!\n                    ", "solution": ["If Not System.IO.Directory.Exists(oFolder) Then \nSystem.IO.Directory.CreateDirectory(oFolder) \nEnd If ", "If Not System.IO.Directory.Exists(oNewFolder) Then \nSystem.IO.Directory.CreateDirectory(oNewFolder) \nEnd If"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Get area of assembly\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: ilogic and composite imate suppress issue\n                    ", "solution": [], "author": "jletcher"},
{"created at": [], "solution Title": "\n                        Re: Clicking Escape button disables the Selection events\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Does anyone have this page?\n                    ", "solution": ["Public Sub Main()\n    \n    ' Test to make sure this is being run from an Assembly Document\n    \n    If ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\n        Exit Sub\n    End If\n    \n    ' Creating the objects that represent our Active Assembly Document\n    ' and our Component Definition object\n    \n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oCompDef As AssemblyComponentDefinition\n    oCompDef = oDoc.ComponentDefinition\n    \n    ' If we've used this code before, then we want to clear out\n    ' any patterns that we've made thus far.\n    \n    While oCompDef.OccurrencePatterns.Count > 0\n        oCompDef.OccurrencePatterns.Item(1).Delete\n    End While\n    \n    ' Because this is a test, some of the information below will be\n    ' slightly more hard-coded than what you would expect to see in\n    ' production. This test requires no user interaction.\n    \n    ' We need to define our two Components, and the ComponentDefinition\n    ' for the one part that contains the features that we'd like to use\n    ' to build our Associative Feature Assembly Pattern from.\n        \n    Dim patternOcc As ComponentOccurrence\n    Dim featureOcc As ComponentOccurrence\n    Dim oPartCompDef As PartComponentDefinition\n    \n    ' In this test we only use the Rectangular Pattern Feature, though\n    ' I have taken the liberty to establish a few placeholders for\n    ' the Circular Pattern Feature / Proxy, they can be ignored.\n    \n    ' The Proxy Geometry is only used if we end up wanting to create\n    ' an Associative Feature Pattern, however it must exist if we do.\n    \n    ''' *****************************************************************\n    ''' * To read more about Proxies, search for 'Proxies' (without quotes)\n    ''' * in the Index of the Inventor API Help File. You can also find\n    ''' * the page directly by going to the Overview Articles page, and\n    ''' * clicking on Objects in Context - Proxies in the General Concepts\n    ''' * listing.\n    ''' *****************************************************************\n    \n    Dim oProxyObject As Object\n    \n    Dim oRectPatternFeature As RectangularPatternFeature\n    Dim oRectPatternFeatureProxy As RectangularPatternFeatureProxy\n    \n    Dim oCircPatternFeature As CircularPatternFeature\n    Dim oCircPatternFeatureProxy As CircularPatternFeatureProxy\n    \n    ' We still need to actually point to our part occurrences, and we\n    ' do so below.\n    \n    patternOcc = oCompDef.Occurrences.ItemByName(\"Part2:1\")\n    featureOcc = oCompDef.Occurrences.ItemByName(\"Part1:1\")\n    \n    ' Let's allow the user to choose the Pattern Type.\n    \n    Dim patternType As String\n    Dim patternTypes(2) As String\n\t\n\tpatternTypes(0) = \"Rectangular\"\n\tpatternTypes(1) = \"Circular\"\n\tpatternTypes(2) = \"Associative\"\n\t\n\tpatternType = InputListBox(\"Please select a Pattern Type\", patternTypes, patternTypes, Title := \"Pattern Selector\", ListName := \"Pattern Types\")\n\t\n\tIf patternType = \"\" Then \n\t\tMessageBox.Show(\"You didn't select anything! What's wrong with you?\", \"You've Hurt Inventor's Feelings :(\")\n\t\tExit Sub \t\t\n\tEnd If \n\n    \n    ' Feel free to cheat and skip this If / Then statement, if you're\n    ' not ready to learn about / deal with the Associative Feature Pattern\n    ' Type / Proxy Geometry. :D\n    \n    If patternType = \"Associative\" Then\n    \n        ' Here we are hard coding it so that it grabs the only feature pattern\n        ' that exists on the part. In this scenario, the oCircPatternProxy is\n        ' never needed.\n        \n        oPartCompDef = featureOcc.Definition\n        oRectPatternFeature = oPartCompDef.Features.RectangularPatternFeatures.Item(1)\n        \n        ' Now we need to make our Proxy Geometry!\n        ' Pay attention to this step. We create the proxy using the method that\n        ' is found on the Part Occurrence, which is found inside of the Occurrence\n        ' list in our Assembly! This essentially gives us some geometrical context\n        ' that jives on the Assembly level, rather than pertaining to the specifics\n        ' of the Part Geometry.\n        \n        Call featureOcc.CreateGeometryProxy(oRectPatternFeature, oRectPatternFeatureProxy)\n        \n        ' Because in the real world, you could end up with either a Circular Pattern Feature\n        ' or a Rectangular, and because I want to end up using only ONE call statement to my\n        ' sub-routine, we will make oProxyObject = the one defined proxy objects out of the\n        ' two (despite the fact that we already know that we're defining only ONE in this\n        ' example.\n    \n        \n        \n        If Not oCircPatternFeatureProxy Is Nothing Then\n            oProxyObject = oCircPatternFeatureProxy\n            Else\n            oProxyObject = oRectPatternFeatureProxy\n        End If\n    End If\n    \n    ' Let's take all of the information gathered above and send it off to a Sub-Routine\n    ' that actually makes the pattern.\n    \n    Call CreatePattern(patternType, oDoc, patternOcc, oProxyObject)\n    \nEnd Sub\n\n' This Sub requires a String with the user selected Pattern Type, the Assembly our Parts reside in, the Occurrence that we wish to Pattern,\n' and the Geometry Proxy that we created if the user decided to create an Associative Feature Pattern.\n\nPublic Sub CreatePattern(targetPatternType As String, targetAssembly As AssemblyDocument, targetOcc As ComponentOccurrence, targetProxy As Object)\n    \n    ' Because this test requires no human interaction, we need to state\n    ' the direction of our soon to be made patterns. In this case I have opted\n    ' to use the default Work-Axes to do this.\n    \n    Dim axisX As WorkAxis\n    Dim axisY As WorkAxis\n    Dim axisZ As WorkAxis\n    \n    ' At this point I decided that I would attempt to make a Golden Axe joke because there aren't enough\n    ' Golden Axe references in iLogic Code examples, but it fell a bit flat. Perhaps next time...\n\n    Dim goldenAxis As WorkAxis\n    \n    ' This loops through all of the axes in our assembly, and will assign\n    ' our variables above to the appropriate axis.\n    \n    For Each goldenAxis In targetAssembly.ComponentDefinition.WorkAxes\n        Select Case goldenAxis.Name\n        Case \"X Axis\"\n            axisX = goldenAxis\n        Case \"Y Axis\"\n            axisY = goldenAxis\n        Case \"Z Axis\"\n            axisZ = goldenAxis\n        End Select\n    Next\n    \n    ' Just like how our Associative Feature Pattern requires the Proxy Geometry of the\n    ' feature used to guide the pattern, ALL patterns need a similar reference to the\n    ' occurrences that will be patterned.\n    '\n    ' This is done much with many of the same intentions as the Proxy stuffs. We can't\n    ' simply tell the assembly that we want to pattern an occurrence, without any context\n    ' of what that occurrence is doing in regards to our Assembly. The ObjectCollection\n    ' is simply an easy way of storing several objects (in this case - Occurrences) in\n    ' one easy to find place.\n    \n    ''' *****************************************************************\n    ''' * To learn more about geometry & the API in Inventor, refer to the following link:\n    ''' * ", "http://modthemachine.typepad.com/files/mathgeometry.pdf", "\n    ''' *****************************************************************\n    \n    Dim oObCollection As ObjectCollection\n    oObCollection = ThisApplication.TransientObjects.CreateObjectCollection\n\n    ' In this test, we only add one Occurrence.\n    \n    Call oObCollection.Add(targetOcc)\n    \n    ' Below we create an easy entry point for creating a new Pattern.\n    \n    Dim oOccPatterns As OccurrencePatterns\n    oOccPatterns = targetAssembly.ComponentDefinition.OccurrencePatterns\n    \n    ' Based on the user's selection, we'll create a specific type of Pattern.\n    \n    Select Case targetPatternType\n        Case \"Rectangular\"\n            \n            ' Note that this is using the X and Y axis as guides, and shows the range of how math behaves\n            ' for this Pattern Method. Please reference the OccurrencePatterns portion of the Inventor API Help\n            ' file for a full listing and explanation of what each argument pertains to.\n            \n            ' Note : If you wanted to have only a single direction Rectangular Pattern, you would end up\n            ' with something that looks like :\n            '\n            ' Call oOccPatterns.AddRectangularPattern(oObCollection, axisX, True, 2.54, 3)\n            \n            Call oOccPatterns.AddRectangularPattern(oObCollection, axisX, True, 2.54, 3, axisY, True, \"5 in\", \"3 ul\")\n        Case \"Circular\"\n        \n            ' WOW! That's a lot of instances! I did this to show just how Inventor is patterning out\n            ' the elements inside of a Circular Pattern. If you were to use the Angle Measuring tool\n            ' along the outside (or inside) edge of the part, you would see that they differ by the\n            ' angle specified in the Angle Offset field. Play around with the values to see it work!\n            \n            Call oOccPatterns.AddCircularPattern(oObCollection, axisZ, False, \"1 deg\", \"90 ul\")\n        Case \"Associative\"\n        \n            ' Because we do a lot of the work ahead of time to make sure that this Pattern works,\n            ' it results in having the simplest of methods. It will result in the patterned elements\n            ' mimicking the pattern of the feature specified way up in the code above.\n            \n            Call oOccPatterns.AddFeatureBasedPattern(oObCollection, targetProxy)\n            \n        Case Else\n    End Select\nEnd Sub", "   Public Sub PatternTest()\n\n    ' Test to make sure this is being run from an Assembly Document\n\n    If ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject Then\n        Exit Sub\n    End If\n\n    ' Creating the objects that represent our Active Assembly Document\n    ' and our Component Definition object\n\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n\n    Dim oCompDef As AssemblyComponentDefinition\n    Set oCompDef = oDoc.ComponentDefinition\n\n    ' If we've used this code before, then we want to clear out\n    ' any patterns that we've made thus far.\n\n    While oCompDef.OccurrencePatterns.Count > 0\n        oCompDef.OccurrencePatterns.Item(1).Delete\n    Wend\n\n    ' Because this is a test, some of the information below will be\n    ' slightly more hard-coded than what you would expect to see in\n    ' production. This test requires no user interaction.\n\n    ' We need to define our two Components, and the ComponentDefinition\n    ' for the one part that contains the features that we'd like to use\n    ' to build our Associative Feature Assembly Pattern from.\n\n    Dim patternOcc As ComponentOccurrence\n    Dim featureOcc As ComponentOccurrence\n    Dim oPartCompDef As PartComponentDefinition\n\n    ' In this test we only use the Rectangular Pattern Feature, though\n    ' I have taken the liberty to establish a few placeholders for\n    ' the Circular Pattern Feature / Proxy, they can be ignored.\n\n    ' The Proxy Geometry is only used if we end up wanting to create\n    ' an Associative Feature Pattern, however it must exist if we do.\n\n    ' *****************************************************************\n    ' * To read more about Proxies, search for 'Proxies' (without quotes)\n    ' * in the Index of the Inventor API Help File. You can also find\n    ' * the page directly by going to the Overview Articles page, and\n    ' * clicking on Objects in Context - Proxies in the General Concepts\n    ' * listing.\n    ' *****************************************************************\n\n    Dim oProxyObject As Object\n\n    Dim oRectPatternFeature As RectangularPatternFeature\n    Dim oRectPatternFeatureProxy As RectangularPatternFeatureProxy\n\n    Dim oCircPatternFeature As CircularPatternFeature\n    Dim oCircPatternFeatureProxy As CircularPatternFeatureProxy\n\n    ' We still need to actually point to our part occurrences, and we\n    ' do so below.\n\n    Set patternOcc = oCompDef.Occurrences.ItemByName(\"Part2:1\")\n    Set featureOcc = oCompDef.Occurrences.ItemByName(\"Part1:1\")\n\n    ' Let's allow the user to choose the Pattern Type.\n\n    Dim patternType As String\n\n    ' patternType = \"Rectangular\"\n    ' patternType = \"Circular\"\n    patternType = \"Associative\"\n\n    ' Feel free to cheat and skip this If / Then statement, if you're\n    ' not ready to learn about / deal with the Associative Feature Pattern\n    ' Type / Proxy Geometry. :D\n\n    If patternType = \"Associative\" Then\n\n        ' Here we are hard coding it so that it grabs the only feature pattern\n        ' that exists on the part. In this scenario, the oCircPatternProxy is\n        ' never needed.\n\n        Set oPartCompDef = featureOcc.Definition\n        Set oRectPatternFeature = oPartCompDef.Features.RectangularPatternFeatures.Item(1)\n\n        ' Now we need to make our Proxy Geometry!\n        ' Pay attention to this step. We create the proxy using the method that\n        ' is found on the Part Occurrence, which is found inside of the Occurrence\n        ' list in our Assembly! This essentially gives us some geometrical context\n        ' that jives on the Assembly level, rather than pertaining to the specifics\n        ' of the Part Geometry.\n\n        Call featureOcc.CreateGeometryProxy(oRectPatternFeature, oRectPatternFeatureProxy)\n\n        ' Because in the real world, you could end up with either a Circular Pattern Feature\n        ' or a Rectangular, and because I want to end up using only ONE call statement to my\n        ' sub-routine, we will make oProxyObject = the one defined proxy objects out of the\n        ' two (despite the fact that we already know that we're defining only ONE in this\n        ' example.\n\n\n\n        If Not oCircPatternFeatureProxy Is Nothing Then\n            Set oProxyObject = oCircPatternFeatureProxy\n            Else\n            Set oProxyObject = oRectPatternFeatureProxy\n        End If\n    End If\n\n    ' Let's take all of the information gathered above and send it off to a Sub-Routine\n    ' that actually makes the pattern.\n\n    Call CreatePattern(patternType, oDoc, patternOcc, oProxyObject)\n\nEnd Sub\n\n' This Sub requires a String with the user selected Pattern Type, the Assembly our Parts reside in, the Occurrence that we wish to Pattern,\n' and the Geometry Proxy that we created if the user decided to create an Associative Feature Pattern.\n\nPublic Sub CreatePattern(targetPatternType As String, targetAssembly As AssemblyDocument, targetOcc As ComponentOccurrence, targetProxy As Object)\n\n    ' Because this test requires no human interaction, we need to state\n    ' the direction of our soon to be made patterns. In this case I have opted\n    ' to use the default Work-Axes to do this.\n\n    Dim axisX As WorkAxis\n    Dim axisY As WorkAxis\n    Dim axisZ As WorkAxis\n\n    ' At this point I decided that I would attempt to make a Golden Axe joke because there aren't enough\n    ' Golden Axe references in iLogic Code examples, but it fell a bit flat. Perhaps next time...\n\n    Dim goldenAxis As WorkAxis\n\n    ' This loops through all of the axes in our assembly, and will assign\n    ' our variables above to the appropriate axis.\n\n    For Each goldenAxis In targetAssembly.ComponentDefinition.WorkAxes\n        Select Case goldenAxis.Name\n        Case \"X Axis\"\n            Set axisX = goldenAxis\n        Case \"Y Axis\"\n            Set axisY = goldenAxis\n        Case \"Z Axis\"\n            Set axisZ = goldenAxis\n        End Select\n    Next\n\n    ' Just like how our Associative Feature Pattern requires the Proxy Geometry of the\n    ' feature used to guide the pattern, ALL patterns need a similar reference to the\n    ' occurrences that will be patterned.\n    '\n    ' This is done much with many of the same intentions as the Proxy stuffs. We can't\n    ' simply tell the assembly that we want to pattern an occurrence, without any context\n    ' of what that occurrence is doing in regards to our Assembly. The ObjectCollection\n    ' is simply an easy way of storing several objects (in this case - Occurrences) in\n    ' one easy to find place.\n\n    ' *****************************************************************\n    ' * To learn more about geometry & the API in Inventor, refer to the following link:\n    ' * ", "http://modthemachine.typepad.com/files/mathgeometry.pdf", "\n    ' *****************************************************************\n\n    Dim oObCollection As ObjectCollection\n    Set oObCollection = ThisApplication.TransientObjects.CreateObjectCollection\n\n    ' In this test, we only add one Occurrence.\n\n    Call oObCollection.Add(targetOcc)\n\n    ' Below we create an easy entry point for creating a new Pattern.\n\n    Dim oOccPatterns As OccurrencePatterns\n    Set oOccPatterns = targetAssembly.ComponentDefinition.OccurrencePatterns\n\n    ' Based on the user's selection, we'll create a specific type of Pattern.\n\n    Select Case targetPatternType\n        Case \"Rectangular\"\n\n            ' Note that this is using the X and Y axis as guides, and shows the range of how math behaves\n            ' for this Pattern Method. Please reference the OccurrencePatterns portion of the Inventor API Help\n            ' file for a full listing and explanation of what each argument pertains to.\n\n            ' Note : If you wanted to have only a single direction Rectangular Pattern, you would end up\n            ' with something that looks like :\n            '\n            ' Call oOccPatterns.AddRectangularPattern(oObCollection, axisX, True, 2.54, 3)\n\n            Call oOccPatterns.AddRectangularPattern(oObCollection, axisX, True, 2.54, 3, axisY, True, \"5 in\", \"3 ul\")\n        Case \"Circular\"\n\n            ' WOW! That's a lot of instances! I did this to show just how Inventor is patterning out\n            ' the elements inside of a Circular Pattern. If you were to use the Angle Measuring tool\n            ' along the outside (or inside) edge of the part, you would see that they differ by the\n            ' angle specified in the Angle Offset field. Play around with the values to see it work!\n\n            Call oOccPatterns.AddCircularPattern(oObCollection, axisZ, False, \"1 deg\", \"90 ul\")\n        Case \"Associative\"\n\n            ' Because we do a lot of the work ahead of time to make sure that this Pattern works,\n            ' it results in having the simplest of methods. It will result in the patterned elements\n            ' mimicking the pattern of the feature specified way up in the code above.\n\n            Call oOccPatterns.AddFeatureBasedPattern(oObCollection, targetProxy)\n\n        Case Else\n    End Select\nEnd Sub"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: [VBA] Macro starting time\n                    ", "solution": [], "author": "jletcher"},
{"created at": [], "solution Title": "\n                        Re: Add-in stops getting events in Windows 8 (Enterprise) when Running as Admin\n                    ", "solution": [], "author": "timurt"},
{"created at": [], "solution Title": "\n                        Re: inventor and AutoCAD dwg file difference\n                    ", "solution": [], "author": "santoshr0114"},
{"created at": [], "solution Title": "\n                        Re: How to Truncate ActiveSheet.Name with Ilogic\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: File path lenght in BOM\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: Addin Loading Multiple Times\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: iLogic View Representation\n                    ", "solution": ["Dim", " ", "doc", " as ", "AssemblyDocument", " ", "=", " ", "ThisDoc", ".", "Document", "  ", "Dim", " ", "oAsmCompDef", " ", "As", " ", "ComponentDefinition", "  ", "oAsmCompDef", " ", "=", " ", "doc", ".", "ComponentDefinition", " ", "Dim", " ", "oCompOcc", " ", "As", " ", "Inventor", ".", "ComponentOccurrence", "For", " ", "Each", " ", "oCompOcc", " in ", "oAsmCompDef", ".", "Occurrences", "oCompOcc", ".", "SetDesignViewRepresentation", "(", "\"", "Default", "\"", ", True", ")", "Next", "ThisApplication", ".", "ActiveView", ".", "Fit"], "author": "Carthik_Babu"},
{"created at": [], "solution Title": "\n                        Re: InputListBox gives an unhandled exception error\n                    ", "solution": ["Keuze= InputListBox(\"Huidige keuze: \"& iProperties.Value(\"Project\", \"Description\"), MultiValue.List(\"Keuze\"), \"Test 1\", Title := \"Keuzelijst:\", ListName := \"Type keuze\")"], "author": "Carthik_Babu"},
{"created at": [], "solution Title": "\n                        Re: Setting the color of a sketchedSymbol\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Procuring points of closest distance [GetMinimumDistance]\n                    ", "solution": ["Sub AllCylinderFaces()\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim oDef As PartComponentDefinition\n  Set oDef = oDoc.ComponentDefinition\n  Dim oBody As SurfaceBody\n  Dim oFace As Face\n  For Each oBody In oDef.SurfaceBodies\n    For Each oFace In oBody.Faces\n      If oFace.SurfaceType = kCylinderSurface Then\n        'Do something useful here\n        Debug.Print \"Area = \" & oFace.Evaluator.Area   '   cm^2\n      End If\n    Next\n  Next\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Trigger event\n                    ", "solution": [], "author": "afredrik"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Copy of Sketched Symbol from template IDW to IDW\n                    ", "solution": [" 'Query stamp insertion requirement\n        question = MessageBox.Show(\"Do you want to insert a stamp?\", \"Stamp Requirement\", MessageBoxButtons.YesNo, MessageBoxIcon.Question)\n\n        If question = vbYes Then\n            Dim strSelectedStamp As String = \"Result2\"\n            Dim strStampList As New ArrayList\n            strStampRequired = True\n            'strStampList.Add(\"F&C Stamp Round\")\n            'strStampList.Add(\"As-Built Stamp Round\")\n            'strStampList.Add(\"Test\")\n            'strSelectedStamp = InputListBox(\"Please select a stamp.\", strStampList, strSelectedStamp, \"Stamp Selection\", \"Available Stamps\")\n            Dim strDrawDoc As Inventor.DrawingDocument = ThisApplication.ActiveDocument\n            Dim SourceFile As String = \"D:\\Local Server\\Data\\Autodesk Customization\\Templates\\IV2014Stamps.idw\"\n                     \n            Dim strSourceIDW As DrawingDocument\n            strSourceIDW = ThisApplication.Documents.Open(SourceFile, False)\n            Dim symbolDef As SketchedSymbolDefinition\n\n            For Each symbolDef In strSourceIDW.SketchedSymbolDefinitions\n                strStampList.Add(symbolDef.Name)\n            Next\nstrSelectedStamp = InputListBox(\"Please select a stamp.\", strStampList, strSelectedStamp, \"Stamp Selection\", \"Available Stamps\")\n            For Each symbolDef In strSourceIDW.SketchedSymbolDefinitions\n                If (StrComp(symbolDef.Name, strSelectedStamp, vbTextCompare) = 0) Then\n                    CopyFrom = symbolDef.CopyTo(strDrawDoc, True)\n                End If\n            Next\n            strSourceIDW.Close()\n\n        End If", "    Public Sub Main()\n        'Check if publish rule intentional\n        Dim SymbolName As String = Nothing ' we are going to declare this and set it to nothing early in the game and use it later\n        question = MessageBox.Show(\"Ready to commence publishing?\", \"Confirm Publish\", MessageBoxButtons.YesNo, MessageBoxIcon.Question)\n\n        If question = vbNo Then\n            Return\n        Else\n        End If\n\n        'Define pdf and dwg file locations\n\n        strPublishedFolder = ThisDoc.Path & \"\\Published\"\n\n        'Make output folders if they don't exist\n        strPdfFolder = strPublishedFolder & \"\\PDF\"\n        If Dir(strPdfFolder, vbDirectory) = \"\" Then MkDir(strPdfFolder)\n        strDwgFolder = strPublishedFolder & \"\\DWG\"\n        If Dir(strDwgFolder, vbDirectory) = \"\" Then MkDir(strDwgFolder)\n\n        'Title block selection from external file\n        ThisDrawing.ResourceFileName = \"D:\\Local Server\\Data\\Autodesk Customization\\Templates\\IV2014TitleBlocks.idw\"\n        ThisDrawing.KeepExtraResources = False\n\n        Dim strSelectedTB As String = \"Result\"\n        Dim strTitleBlock As New ArrayList\n        strTitleBlock.Add(\"EMAL\")\n        strTitleBlock.Add(\"EmalP2\")\n        strTitleBlock.Add(\"KMP\")\n\n        strSelectedTB = InputListBox(\"Select a Title Block\", strTitleBlock, strSelectedTB, \"Title Block Selection\", \"Available Title Blocks\")\n\n        'Query stamp insertion requirement\n        question = MessageBox.Show(\"Do you want to insert a stamp?\", \"Stamp Requirement\", MessageBoxButtons.YesNo, MessageBoxIcon.Question)\n\n        If question = vbYes Then\n            Dim strSelectedStamp As String = \"Result2\"\n            Dim strStampList As New ArrayList\n            strStampRequired = True\n            Dim strDrawDoc As Inventor.DrawingDocument = ThisApplication.ActiveDocument\n            Dim SourceFile As String = \"D:\\Local Server\\Data\\Autodesk Customization\\Templates\\IV2014Stamps.idw\"\n\n            Dim strSourceIDW As DrawingDocument\n            strSourceIDW = ThisApplication.Documents.Open(SourceFile, False)\n            Dim symbolDef As SketchedSymbolDefinition\n\n            For Each symbolDef In strSourceIDW.SketchedSymbolDefinitions\n                strStampList.Add(symbolDef.Name)\n            Next\n            strSelectedStamp = InputListBox(\"Please select a stamp.\", strStampList, strSelectedStamp, \"Stamp Selection\", \"Available Stamps\")\n            For Each symbolDef In strSourceIDW.SketchedSymbolDefinitions\n                If (StrComp(symbolDef.Name, strSelectedStamp, vbTextCompare) = 0) Then\n                    CopyFrom = symbolDef.CopyTo(strDrawDoc, True)\n                    SymbolName = symbolDef.Name\n                End If\n            Next\n            strSourceIDW.Close()\n            MessageBox.Show(\"You have selected \" & strSelectedStamp, \"Stamp Selection Feedback\")\n        Else\n            strStampRequired = False\n        End If\n\n        'Step through each sheet in the IDW\n        Dim strSheets As Sheets\n        strSheets = ThisDoc.Document.sheets\n        Dim strSheet As Sheet\n        For Each strSheet In strSheets\n            strSheet.activate()\n\n            'Truncate the sheet instance from the sheet name, keeping the digits before the colon\n            SheetName = ActiveSheet.Name\n            ColonIndex = SheetName.LastindexOf(\":\")\n            strCurrentSeqNum = SheetName.substring(0, ColonIndex)\n\n            'Access the Titleblock Data spreadsheet and select the row corresponding to the active drawing sheet\n            i = GoExcel.FindRow(\"TBData.xlsx\", \"Sheet1\", \"SEQNO\", \"=\", strCurrentSeqNum)\n\n            'Get the cell values for the designated row\n            strArea = GoExcel.CurrentRowValue(\"AREA\")\n            '<snipped for length>\n            strDocType = GoExcel.CurrentRowValue(\"DOC/TYPE\")\n\n            'Populate the Custom iProperties with the TBData values\n            iProperties.Value(\"Custom\", \"AREA\") = strArea\n            '<snipped for length>\n            iProperties.Value(\"Custom\", \"DOC/TYPE\") = strDocType\n\n            'Insert the border on the active sheet\n            ActiveSheet.Border = \"HEL\"\n\n            'Insert the titleblock on the active sheet\n            ActiveSheet.TitleBlock = strSelectedTB\n\n            'Insert stamp if required \n            If strStampRequired = True And Not SymbolName Is Nothing Then ' we will make sure it is wanted and also check that the property declared \n                ' at the top of this sub was set to something so we dont pass an empty string\n                InsertSymbol(SymbolName)\n                'Dim strDrawDoc As DrawingDocument = ThisDrawing.Document\n                'Dim strSketchedSymbolDef As SketchedSymbolDefinition = strDrawDoc.SketchedSymbolDefinitions.Item(strSelectedStamp)\n                'Dim strTransGeom = ThisApplication.TransientGeometry\n                'Dim strInsertionPoint As Point2d = strTransGeom.CreatePoint2d(5.5,13)\n                'Dim strSketchedSymbol As SketchedSymbol = strSheet.SketchedSymbols.Add(strSketchedSymbolDef,strInsertionPoint,0,0.75,Nothing)\n            Else\n            End If\n\n            MessageBox.Show(\"All properties have been applied to \" & strCurrentSeqNum, \"Title Block Data Status\")\n\n            '---------------Export the sheet to pdf------------------------\n\n            'Assign path and file name\n            strFullFileName = strPdfFolder & \"\\\" & strFileNum2 & \".pdf\"\n\n            strPDFAddIn = ThisApplication.ApplicationAddIns.ItemById _\n            (\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n            strDocument = ThisApplication.ActiveDocument\n            strContext = ThisApplication.TransientObjects.CreateTranslationContext\n            strContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n            strOptions = ThisApplication.TransientObjects.CreateNameValueMap\n            strDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n            If strPDFAddIn.HasSaveCopyAsOptions(strDataMedium, strContext, strOptions) Then\n                strOptions.Value(\"All_Color_AS_Black\") = 0\n                strOptions.Value(\"Remove_Line_Weights\") = 0\n                strOptions.Value(\"Vector_Resolution\") = 400\n                strOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintCurrentSheet\n            End If\n\n            'Set the PDF target file name\n            strDataMedium.FileName = strFullFileName\n\n            'Publish document as PDF\n            strPDFAddIn.SaveCopyAs(strDocument, strContext, strOptions, strDataMedium)\n\n            '----------- export the sheet to dwg -------------------\n            'Assign path and file name\n            strFullFileName = strDwgFolder & \"\\\" & strFileNum2 & \".dwg\"\n\n            ' Get the DWG translator Add-In. \n            strDWGAddIn = ThisApplication.ApplicationAddIns.ItemById _\n            (\"{C24E3AC4-122E-11D5-8E91-0010B541CD80}\")\n            strContext = ThisApplication.TransientObjects.CreateTranslationContext\n            strContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n            strOptions = ThisApplication.TransientObjects.CreateNameValueMap\n            strDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n            ' Check whether the translator has 'SaveCopyAs' options \n            If strDWGAddIn.HasSaveCopyAsOptions(strDocument, strContext, strOptions) Then\n                ' DWG version.\n                ' 23 = ACAD 2000\n                ' 25 = ACAD 2004\n                ' 27 = ACAD 2007\n                ' 29 = ACAD 2010 \n                strOptions.Value(\"DwgVersion\") = 27\n                Dim strIniFile As String\n                strIniFile = \"D:\\Local Server\\Data\\Heaslip Autodesk Customization\\Templates\\DWGSubmittalConfig.ini\"\n\n                ' Create the name-value that specifies the ini file to use. \n                strOptions.Value(\"Export_Acad_IniFile\") = strIniFile\n            End If\n\n            'Set the DWG target file name\n            strDataMedium.FileName = strFullFileName\n\n            'Publish the active sheet as DWG 2007\n            strDWGAddIn.SaveCopyAs(strDocument, strContext, strOptions, strDataMedium)\n\n            'Delete the titleblock, border, and stamp from the current sheet before continuing to the next sheet\n            strSheet.TitleBlock.Delete()\n            strSheet.Border.Delete()\n\n            'MessageBox.Show(\"Sheet \" & strCurrentSeqNum & \" has successfully been exported\", \"Sheet Publish Status\")\n\n        Next\n\n        MessageBox.Show(\"Publishing Completed\", \"\")\nEnd Sub\n\n    Private Sub InsertSymbol(ByVal SymbName As String)\n\n        Dim strDrawDoc As DrawingDocument = ThisDrawing.Document\n        Dim strSheet As Sheet = strDrawDoc.ActiveSheet\n        Dim strSketchedSymbolDef As SketchedSymbolDefinition = strDrawDoc.SketchedSymbolDefinitions.Item(SymbName)\n        Dim strTransGeom = ThisApplication.TransientGeometry\n        Dim strInsertionPoint As Point2d = strTransGeom.CreatePoint2d(5.5, 13)\n        Dim strSketchedSymbol As SketchedSymbol = strSheet.SketchedSymbols.Add(strSketchedSymbolDef, strInsertionPoint, 0, 0.75, Nothing)\n    End Sub"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Not able to install SDK\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Graphics Card Utilization in Silent / Non Visible Mode?\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Ilogic set parameters based on initial multivalue parameter instance\n                    ", "solution": ["MultiValue.SetList(\"Tank_Lifting_Lug_WWL_Tonnes\", 2, 3, 4, 5, 6, 8, 10)\nMultiValue.SetList(\"Tank_Lifting_Lug_Hole_DIA\", 28, 36, 39, 42, 46, 57, 60)\nMultiValue.SetList (\"Tank_Lifting_Lug_Hole_to_Base\", 36, 44, 50, 54, 62, 67, 76)\nMultiValue.SetList(\"Tank_Lifting_Lug_Edge_Flat_Length\", 14, 17, 22, 22, 24, 28, 31)\nMultiValue.SetList (\"Tank_Lifting_Lug_Base_Width\", 100, 127, 141, 151, 184, 203, 215)\nMultiValue.SetList (\"Tank_Lifting_Lug_Plate_THK\", 16, 20, 25, 25, 28, 32, 36)\nMultiValue.SetList(\"Tank_Lifting_Lug_Outside_RAD\", 42, 54, 59, 63, 69, 86, 90)", "' This returns an array of strings\nDim weights As ArrayList = MultiValue.List(\"Tank_Lifting_Lug_WWL_Tonnes\")\n\n' Get back current value as a string\nDim weight As String = Tank_Lifting_Lug_WWL_Tonnes\n\n' Find its index in the list\nDim n As Integer = weights.IndexOf(weight)\n\n' Set the given index for all parameters\nTank_Lifting_Lug_Hole_DIA = MultiValue.List(\"Tank_Lifting_Lug_Hole_DIA\")(n)\nTank_Lifting_Lug_Hole_to_Base = MultiValue.List(\"Tank_Lifting_Lug_Hole_to_Base\")(n)\nTank_Lifting_Lug_Edge_Flat_Length = MultiValue.List(\"Tank_Lifting_Lug_Edge_Flat_Length\")(n)\nTank_Lifting_Lug_Base_Width = MultiValue.List(\"Tank_Lifting_Lug_Base_Width\")(n)\nTank_Lifting_Lug_Plate_THK = MultiValue.List(\"Tank_Lifting_Lug_Plate_THK\")(n)\nTank_Lifting_Lug_Outside_RAD = MultiValue.List(\"Tank_Lifting_Lug_Outside_RAD\")(n)"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Clearance.xls Rounding Issue\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Editing Prompted Entry values with iLogic\n                    ", "solution": ["Sub UpdatePromptedEntries(oDoc As DrawingDocument)\n'assumes the oDoc is activated\nDim oPromptEntry\nDim actSheet As Sheet = ThisApplication.ActiveDocument.ActiveSheet\n'For Each oSheet In ThisApplication.ActiveDocument.Sheets\nFor Each oSheet In oDoc.Sheets\n    ActiveSheet=ThisDrawing.Sheet(oSheet.Name)\n    If oSheet.TitleBlock Is Nothing Then Exit Sub\n    oTitleBlock=oSheet.TitleBlock\n    oTextBoxes=oTitleBlock.Definition.Sketch.TextBoxes\n    For Each oTextBox In oTitleBlock.Definition.Sketch.TextBoxes\n\t\t'comment this ASAP otherwise it will break! ALOT!\n'\t\tIf Not oTitleBlock.GetResultText(oTextBox) = String.Empty Then\n'\t\t\tMessageBox.Show(oTitleBlock.GetResultText(oTextBox), oTextBox.Text)\n'\t\tElse\n'\t\t\tMessageBox.Show(oTextBox.Text, \"Empty PE Found!\")\n'\t\tEnd If\nOn Error Resume Next\n\t\tIf otextbox.Text <>\"\" Then\n\t\t\tSelect oTextBox.Text\n\t\t\t\tCase \"PROJECT REF No\":\n\t\t\t\t\toPromptEntry = ThisProjectNo\n\t\t\t\t\tCall oTitleBlock.SetPromptResultText(oTextBox, oPromptEntry)\n\t\t\t\tCase \"PURPOSE OF ISSUE\":\n\t\t\t\t\toPromptEntry = ThisPurposeForIssue\n\t\t\t\t\t'MessageBox.Show(oTitleBlock.GetResultText(oTextBox), \"PURPOSE OF ISSUE\")\n\t\t\t\t\tMessageBox.Show(\"BEFORE Intended Purpose for issue: \" & ThisPurposeForIssue, \"PURPOSE OF ISSUE\")\n\t\t\t\t\tCall oTitleBlock.SetPromptResultText(oTextBox, oPromptEntry)\n\t\t\t\t\tMessageBox.Show(\"AFTER Intended Purpose for issue: \" & ThisPurposeForIssue, \"PURPOSE OF ISSUE\")\t\t\t\t\n\t\t\t\tCase \"DELETEME\":\n\t\t\t\t\toPromptEntry = \"BUGGER ME IT WORKS!\"\n\t\t\t\t\tCall oTitleBlock.SetPromptResultText(oTextBox, oPromptEntry)\n\t\t\t\tCase \"DELETE ME\":\n\t\t\t\t\toPromptEntry = \"WTF DUDES?\"\n\t\t\t\t\tCall oTitleBlock.SetPromptResultText(oTextBox, oPromptEntry)\n\t\t\tEnd Select\n\t\tEnd If\n    Next\nNext\nactSheet.Activate\nInventorVb.DocumentUpdate()\nEnd Sub"], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: To create single SketchPoint at coincident point\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic 2014: pattern suppression\n                    ", "solution": [], "author": "Allen_Hart"},
{"created at": [], "solution Title": "\n                        Re: ilogic errors on one machine only out of 10\n                    ", "solution": ["path = ThisDoc.WorkspacePath()"], "author": "jletcher"},
{"created at": [], "solution Title": "\n                        Re: Interface not registered: Broken connection with Excel within Ilogic command\n                    ", "solution": [], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: ilogic-content centre-iProperties\n                    ", "solution": [], "author": "JamieS"},
{"created at": [], "solution Title": "\n                        Re: Command manager not executing\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Repeat projection of axis causes System.Runtime.Interopservices.COMException\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: ILogic-save as rule\n                    ", "solution": ["Imports SysIO = System.IO\nSub Main()\n\t'See if there are any open views\n\tIf (ThisApplication.Views.Count > 0) Then\n\t\n\t\t'Setup Translator to dwg\n\t\tDim DWGAddIn As TranslatorAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC2-122E-11D5-8E91-0010B541CD80}\")\n\t\n\t\tDim oContext As TranslationContext = ThisApplication.TransientObjects.CreateTranslationContext\n\t\toContext.Type = kFileBrowseIOMechanism\n\t\n\t\t' Create a NameValueMap object\n\t\tDim oOptions As NameValueMap = ThisApplication.TransientObjects.CreateNameValueMap\n\t\n\t\t' Create a DataMedium object\n\t\tDim oDataMedium As DataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\t\n\t\t\t\t\n\t\t'Go through each view and save if it's a drawing document\n\t\tFor Each view As View In ThisApplication.Views\n\t\t\tIf view.Document.DocumentType = kDrawingDocumentObject Then\n\t\t\t\t'Get the directory file is saved in. Can replace this with specific directory\n\t\t\t\tDim dwgDir = SysIO.Path.GetDirectoryName(view.Document.FullFileName)\n\t\t\t\t'Get name of file without the extension and add _acad2k to it.\n\t\t\t\toDataMedium.MediumType = kFileNameMedium\n\t\t\t\toDataMedium.FileName = dwgDir & \"\\\\\" & _", "                                    SysIO.Path.GetFileNameWithoutExtension(view.Document.FullFileName) & _", "                                     \"_acad2k.dwg\"\n\t\t\t\t' Check whether the translator has 'SaveCopyAs' options\n\t\t\t\tIf DWGAddIn.HasSaveCopyAsOptions(view.Document, oContext, oOptions) Then\n\t\t\t\t\t'Use Export To DWG to save drawing configuration and set here\n\t\t\t\t\tDim strIniFile As String = \"C:\\\\Temp\\\\DWGOut.ini\"\n\t\t\t\t\t' Create the name-value that specifies the ini file to use.\n\t\t\t\t\toOptions.Value(\"Export_Acad_IniFile\") = strIniFile\n\t\t\t\t\t'Save File\n\t\t\t\t\tDWGAddIn.SaveCopyAs(view.Document, oContext, oOptions, oDataMedium)\n\t\t\t\tEnd If\n\t\t\tEnd If\n\t\tNext\n\tEnd If\nEnd Sub"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Turn on/off layer text in each sheet\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Adding buttons to the same custom ribbon panel from two seperate add-ins.\n                    ", "solution": ["Dim oPanel As Inventor.RibbonPanel\n Try\n               \n                    oPanel = DWGToolsTab.RibbonPanels.Item(\"id_RibbonTab\")\n\n\n                Catch ex As Exception\n                oPanel = DWGToolsTab.RibbonPanels.Add(\"Panel Name\", \"id_RibbonTab\", \"{GUID}\")\n                End Try\n\n                '## Add the button to the panel\n                oPanel.CommandControls.AddButton(m_ButtonDefinition, True)"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2014 and json export\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: DWF(X) Publish Settings 2014\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Need macro/plug in to project planes on sketch\n                    ", "solution": ["Public Sub ProjectPerpendicularOriginPlanes()\n  Dim doc As Document\n  ' This works even if the part document is activated inside\n  ' an assembly and not opened in its own window\n  Set doc = ThisApplication.ActiveEditDocument\n  \n  If Not TypeOf doc Is PartDocument Then\n    Call MsgBox(\"You need to be inside a part document\")\n    Exit Sub\n  End If\n    \n  Dim ao As PlanarSketch\n  Set ao = ThisApplication.ActiveEditObject\n  \n  If Not TypeOf ao Is PlanarSketch Then\n    Call MsgBox(\"You need to be inside a sketch\")\n    Exit Sub\n  End If\n  \n  Dim pd As PartDocument\n  Set pd = doc\n  \n  Dim cd As PartComponentDefinition\n  Set cd = pd.ComponentDefinition\n  \n  Dim sk As PlanarSketch\n  Set sk = ao\n \n  ' The origin planes are the first 3\n  ' in the WorkPlanes collection\n  Dim i As Integer\n  For i = 1 To 3\n    Dim wp As WorkPlane\n    Set wp = cd.WorkPlanes(i)\n      \n    ' If the WorkPlane was already added\n    ' then AddByProjectingEntity would throw\n    ' an error.\n    ' To avoid that we can do error handling:\n    On Error Resume Next\n    \n    If wp.Plane.IsPerpendicularTo(sk.PlanarEntityGeometry) Then\n      ' Checking if the workplane is perpendicular might\n      ' be an overkill because if not, then the below\n      ' function would throw an error.\n      ' But I think it's nicer if we check :)\n      Dim se As SketchEntity\n      Set se = sk.AddByProjectingEntity(wp)\n      ' Make the line a construction line\n      se.Construction = True\n    End If\n    \n    On Error GoTo 0\n  Next i\n  \n  ' Get things updated so the new sketch lines show\n  ' even if the part document is modified inside an assembly\n  ThisApplication.ActiveDocument.Update\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Inventor View Control .ocx add in VS2012 on Windows 7 64 bit computer\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Replacing titleblocks, Code will only replace 1st and last page\n                    ", "solution": [], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: iLogic, switching a layer on or off\n                    ", "solution": [], "author": "waynefisher"},
{"created at": [], "solution Title": "\n                        Re: iLogic Select all dimensions and arrange\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: Block user access to custom in iProperty\n                    ", "solution": ["Dim secretPropSet As Inventor.PropertySet = mDocument.PropertySets.Add(\"Secret Property Set\")\nDim secretProp As Inventor.Property = secretPropSet.Add(\"ABC-XYZ\", \"Secret Property\")"], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: Drawing Dimension Object\n                    ", "solution": ["    Dim oApp As Inventor.Application\n    Set oApp = ThisApplication\n   \n    Dim oDoc As Inventor.Document\n    Set oDoc = oApp.ActiveEditDocument\n   \n    Dim dimension As GeneralDimension\n    Set dimension = oDoc.SelectSet(1)\n   \n    Dim shape As InspectionDimensionShapeEnum\n    Dim label As String\n    Dim rate As String\n    Call dimension.GetInspectionDimensionData(shape, label, rate)"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Using User Params that are created with iLogic\n                    ", "solution": ["auto = iLogicVb.Automation\nrule0 = auto.GetRule(ThisDoc.Document, \"Rule0\")\n' Reset the rule text. This clears the list of referenced parameters.\nrule0.Text = rule0.Text \nauto.RunRuleDirect(rule0)"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: API - save as FLAT PATTERN\n                    ", "solution": [], "author": "humberto"},
{"created at": [], "solution Title": "\n                        Re: lumpdefinition\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: ClientGraphics and SurfaceGraphics\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Disable radial marking menu control\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Animating sweep length using parameter\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Creating a custom context menu pop up\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: How to edit IFeature parameters via VBA?\n                    ", "solution": ["Sub Edit_iFeature_Parameters_Sample()\n'edit spur gear sample\n'C:\\Program Files\\Autodesk\\Inventor 2014\\Design Accelerator\\Models\\FD-SpurGearMM.ipt\n\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n\n  'reference to the iFeature object by name\n  Dim oiFeature As iFeature\n  Set oiFeature = oDoc.ComponentDefinition.features.iFeatures.Item(\"Spur Gear\")\n\n  'reference to the iFeature definition\n  Dim iDef As iFeatureDefinition\n  Set iDef = oiFeature.iFeatureDefinition\n\n  'inputs collection\n  Dim oInputs As iFeatureInputs\n  Set oInputs = iDef.iFeatureInputs\n\n  'iterate inputs collection\n  Dim oInput As iFeatureInput\n\n  For Each oInput In oInputs\n  \n    'we need in parameter inputs only\n    If oInput.Type = kiFeatureParameterInputObject Then\n      Dim oParInput As iFeatureParameterInput\n      Set oParInput = oInput\n\n      Dim oPar As Parameter\n      Set oPar = oParInput.Parameter\n      \n      Select Case UCase(oParInput.Name)\n        Case UCase(\"da_z\")\n            oPar.Expression = \"15 ul\"\n        Case UCase(\"da_z2\")\n            oPar.Expression = \"21 ul\"\n      End Select\n    End If\n  Next\n  oDoc.Update\n  Beep\nEnd Sub", "  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n\n  Dim oPars As Parameters\n  Set oPars = oDoc.ComponentDefinition.Parameters\n\n  Dim oPar As Parameter\n  Set oPar = oPars.Item(\"da_z\")\n  oPar.Expression = \"15 ul\"\n\n  Set oPar = oPars.Item(\"da_z2\")\n  oPar.Expression = \"21 ul\"\n  \n  oDoc.Update  ' apply new values"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic Change drawing borders from assembly\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How to capture radial marking menu command?\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Get Parent Assembly Name\n                    ", "solution": [], "author": "amitnkukanur"},
{"created at": [], "solution Title": "\n                        Re: How to select an entity from a global x,y,z position?\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Retrieve iProperties from IDW to IPT\n                    ", "solution": [], "author": "afredrik"},
{"created at": [], "solution Title": "\n                        Re: 2014 add-in only loads if target CPU is x64\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Update user parameter with ilogic\n                    ", "solution": [], "author": "kolesaa"},
{"created at": [], "solution Title": "\n                        Re: RubberBand Effect\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: I can\u2019t get the clsMeasure example class to work.\n                    ", "solution": ["  Public Class clsMeasure\n    '*************************************************************\n    ' The declarations and functions below need to be copied into\n    ' a class module whose name is \"clsMeasure\". The name can be\n    ' changed but you'll need to change the declaration in the\n    ' calling function \"InteractiveMeasureDistance\" and\n    ' \"InteractiveMeasureAngle\" to use the new name.\n\n    ' Declare the event objects\n    Private WithEvents oInteractEvents As InteractionEvents\n    Private WithEvents oMeasureEvents As MeasureEvents\n\n    ' Declare a flag that's used to determine when measuring stops.\n    Private bStillMeasuring As Boolean\n    Private eMeasureType As MeasureTypeEnum\n\n    Private ReadOnly Property ThisApplication As Application\n      Get\n        Return StandardAddInServer._inventorApplication\n      End Get\n    End Property\n\n    Public Sub Measure(MeasureType As MeasureTypeEnum)\n\n      eMeasureType = MeasureType\n\n      ' Initialize flag.\n      bStillMeasuring = True\n\n      ' Create an InteractionEvents object.\n      oInteractEvents = ThisApplication.CommandManager.CreateInteractionEvents\n\n      ' Set a reference to the measure events.\n      oMeasureEvents = oInteractEvents.MeasureEvents\n      oMeasureEvents.Enabled = True\n\n      ' Start the InteractionEvents object.\n      oInteractEvents.Start()\n\n      ' Start measure tool\n      If eMeasureType = MeasureTypeEnum.kDistanceMeasure Then\n        oMeasureEvents.Measure(MeasureTypeEnum.kDistanceMeasure)\n      Else\n        oMeasureEvents.Measure(MeasureTypeEnum.kAngleMeasure)\n      End If\n\n      ' Loop until a selection is made.\n      Do While bStillMeasuring\n        ThisApplication.UserInterfaceManager.DoEvents()\n      Loop\n\n      ' Stop the InteractionEvents object.\n      oInteractEvents.Stop()\n\n      ' Clean up.\n      oMeasureEvents = Nothing\n      oInteractEvents = Nothing\n    End Sub\n\n    Private Sub oInteractEvents_OnTerminate() Handles oInteractEvents.OnTerminate \n      ' Set the flag to indicate we're done.\n      bStillMeasuring = False\n    End Sub\n\n    Private Sub oMeasureEvents_OnMeasure(ByVal MeasureType As MeasureTypeEnum, ByVal MeasuredValue As Double, ByVal Context As NameValueMap) Handles oMeasureEvents.OnMeasure \n\n      Dim strMeasuredValue As String\n\n      If eMeasureType = MeasureTypeEnum.kDistanceMeasure Then\n        strMeasuredValue = ThisApplication.ActiveDocument.UnitsOfMeasure.GetStringFromValue(MeasuredValue, UnitsTypeEnum.kDefaultDisplayLengthUnits)\n        MsgBox(\"Distance = \" & strMeasuredValue, vbOKOnly, \"Measure Distance\")\n      Else\n        strMeasuredValue = ThisApplication.ActiveDocument.UnitsOfMeasure.GetStringFromValue(MeasuredValue, UnitsTypeEnum.kDefaultDisplayAngleUnits)\n        MsgBox(\"Angle = \" & strMeasuredValue, vbOKOnly, \"Measure Angle\")\n      End If\n\n      ' Set the flag to indicate we're done.\n      bStillMeasuring = False\n\n    End Sub\n  End Class\n\n  ' Functionality of the command button on the Ribbon \n  Protected Overrides Sub ButtonDefinition_OnExecute(ByVal context As NameValueMap)\n    ' Create a new clsMeasure object.\n    Dim oMeasure As New clsMeasure\n\n    ' Call the Measure method of the clsMeasure object\n    Call oMeasure.Measure(MeasureTypeEnum.kDistanceMeasure)\n  End Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Need help deleting suppressed features...\n                    ", "solution": [], "author": "jestclair"},
{"created at": [], "solution Title": "\n                        Re: Adding Text to Inventor Dimension with iLogic or VBA\n                    ", "solution": ["'get model document (part or assembly) from the parent DrawingDocument\nmodelName = IO.Path.GetFileName(ThisDrawing.ModelDocument.FullFileName)\n'save text parameter \"MyText\" value in the string variable Value\nDim Value As String = Parameter(modelName, \"MyText\")\n'Note:  this string Value could be read from any source (e.g., excel sheet).\n\nDim oDoc As DrawingDocument = ThisDrawing.Document\nDim oSSet As SelectSet = oDoc.SelectSet\n\nIf oSSet.Count = 0 Then\n    MessageBox.Show(\"Select at least one dimension please\", \"DIM\", _\n        MessageBoxButtons.OK,MessageBoxIcon.Information)\nElse\n    For Each obj As Object In oSSet\n        'filter dimensions, ignore other selected entities\n        If TypeOf obj Is GeneralDimension Then\n            'reference to the selected dimension\n            Dim oDim As GeneralDimension = obj\n            'refrence to the DimensionText object\n            Dim oDimensionText As DimensionText = oDim.Text        \n            'change dimension text\n            oDimensionText.FormattedText = \"<DimensionValue/>\" & \"<br/>\" & Value\n        End If\n    Next\nEnd If\nBeep\n"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2012 to Inventor 2014 iLogic codes\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Inventor ilogic create assebmyl constraints\n                    ", "solution": ["   ' get the active component definition\n        Dim oAsmCompDef As AssemblyComponentDefinition\n        oAsmCompDef = oAssyDoc.ComponentDefinition\n\n        ' create geometry proxy 1\n        Dim oOcc1 As ComponentOccurrence\n        oOcc1 = oAsmCompDef.Occurrences(1)\n        Dim oPartPlaneXZ As WorkPlane\n        oPartPlaneXZ = oOcc1.Definition.WorkPlanes(2)\n        Dim oPartPlane1 As WorkPlaneProxy = Nothing\n        oOcc1.CreateGeometryProxy(oPartPlaneXZ, oPartPlane1)\n\n        ' create geometry proxy 2\n        Dim oOcc2 As ComponentOccurrence\n        oOcc2 = oAsmCompDef.Occurrences(2)\n        Dim oPart2PlaneXZ As WorkPlane\n        oPart2PlaneXZ = oOcc2.Definition.WorkPlanes(2)\n        Dim oPart2Plane1 As WorkPlaneProxy = Nothing\n        oOcc2.CreateGeometryProxy(oPart2PlaneXZ, oPart2Plane1)\n\n        ' and finally add the constraint\n        oAsmCompDef.Constraints.AddMateConstraint(oPartPlane1, oPart2Plane1, 0)"], "author": "craigzcool"},
{"created at": [], "solution Title": "\n                        Re: Apprentice from Add-in\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2014 Developer Tools msi corrupted Visual Studio 2010\n                    ", "solution": [], "author": "rusmwb"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Inventor not recognizes option selected in Forms\n                    ", "solution": [], "author": "ceflamarion"},
{"created at": [], "solution Title": "\n                        Re: Weld - XML Info\n                    ", "solution": [], "author": "henrik.peters"},
{"created at": [], "solution Title": "\n                        Re: ilogic replace component with multiple different components\n                    ", "solution": [], "author": "Ben-Cornelius"},
{"created at": [], "solution Title": "\n                        Re: ThisDoc.Save alternative\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: ETO Install Builder Wizard: Got \"The path is not of a legal form.\"\n                    ", "solution": [], "author": "lwebb"},
{"created at": [], "solution Title": "\n                        Re: Letters mm in Bom\n                    ", "solution": [], "author": "mslosar"},
{"created at": [], "solution Title": "\n                        Re: Invoke the iLogic Editor\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Compress lines of code in iLogic\n                    ", "solution": [], "author": "cwhetten"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule Trouble with CC Parts\n                    ", "solution": ["oDoc = ThisDoc.Document\n\nFor Each oView In oDoc.ActiveSheet.DrawingViews\n\t' Retrieve the name of the model referenced by the view.\n\tModelDoc = ActiveSheet.View(oView.Name).ModelDocument\n\t\n\t'MsgBox(ModelDoc.displayName)\n\tIf ModelDoc.DocumentType = kPartDocumentObject Then\n\t\t' Fill in the SK property for the referenced model\n\t\t'iProperties.Value(ModelDoc.displayname, \"Custom\", \"SK\") = \"(SK)\"\n\t\tModelDoc.PropertySets(\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\")(\"SK\").Expression = \"(SK)\"\n\tEnd If\nNext\n\niLogicVb.UpdateWhenDone = True"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: why is this ilogic rule failing\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Vault browser not updating correct with vault 2014 subscription release\n                    ", "solution": [], "author": "noontz"},
{"created at": [], "solution Title": "\n                        Re: Can a rule be removed from event triggers through iLogic?\n                    ", "solution": ["'capture current document\nDim oiLDoc As ThisApplication.ActiveDocument\n'load up ilogic automation\nDim oiLogicAuto As Object = iLogicVb.Automation\n'get container for all of the ilogic rules\nDim oRules As Object = oiLogicAuto.rules(oiLDoc)\n'variable for the events rules\nDim oiLPropSet As PropertySet\n'set up a counter\nDim iPropCount As Integer\n'if there are no rules, then there is no need for event triggers\n'if there are no even rules, no need to go further\n'if not a part, I'm not interested\nIf oRules Is Nothing And oiLDoc.PropertySets.PropertySetExists(\"iLogicEventsRules\") And oiLDoc.DocumentType = 12290 Then\n\t'set our property set since we know it exists now\n\toiLPropSet = oiLDoc.PropertySets.Item(\"iLogicEventsRules\")\n\t'only iPart Members seem to be plagued with orphaned triggers\n\t'if there aren't any triggers, then we're done\n\tIf oiLDoc.ComponentDefinition.IsiPartMember And oiLPropSet.Count > 0 Then\n\t\t'iterate through the triggers and delete each\n\t\tFor iPropCount = 1 To oiLPropSet.Count\n\t\t\toiLPropSet.Item(iPropCount).Delete\n\t\tNext iPropCount\n\tEnd If\nEnd If"], "author": "wood.isbell"},
{"created at": [], "solution Title": "\n                        Re: GeometryIntents and leader AttachedEntity\n                    ", "solution": ["Public Sub AddLeaderNote()\n\n    ' Set a reference to the drawing document.\n    ' This assumes a drawing document is active.\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n\n    ' Set a reference to the active sheet.\n    Dim oActiveSheet As sheet\n    Set oActiveSheet = oDrawDoc.ActiveSheet\n\n    ' Set a reference to the drawing curve segment.\n    ' This assumes that a drawing curve is selected.\n    Dim oDrawingCurveSegment As DrawingCurveSegment\n    Set oDrawingCurveSegment = oDrawDoc.SelectSet.item(1)\n\n    ' Set a reference to the drawing curve.\n    Dim oDrawingCurve As DrawingCurve\n    Set oDrawingCurve = oDrawingCurveSegment.Parent\n\n    ' Get the mid point of the selected curve\n    ' assuming that the selected curve is linear\n    Dim oMidPoint As point2d\n    Set oMidPoint = oDrawingCurve.MidPoint\n    \n    Dim oLeaderPoints As ObjectCollection\n    Set oLeaderPoints = ThisApplication.TransientObjects.CreateObjectCollection\n\n    ' Create an intent and add to the leader points collection.\n    ' This is the geometry that the leader text will attach to.\n    Dim oGeometryIntent As GeometryIntent\n    Set oGeometryIntent = oActiveSheet.CreateGeometryIntent(oDrawingCurve, oMidPoint)\n    \n\n    Call oLeaderPoints.Add(oGeometryIntent)\n\n    Dim oLeaderNote As LeaderNote\n    Set oLeaderNote = oActiveSheet.DrawingNotes.LeaderNotes.Add(oLeaderPoints, \"API\")\n    \nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: How to change Projection from Orthographic to Perspective View using VB.Net\n                    ", "solution": [], "author": "joe"},
{"created at": [], "solution Title": "\n                        Re: Referenced Document Descriptor of a PartsList Row?\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Request user interaction before save and close\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Control Positional Reps With ILogic\n                    ", "solution": ["Dim oDoc As Document = ThisApplication.ActiveDocument\nDim oOcc As ComponentOccurrences = ThisApplication.ActiveDocument.ComponentDefinition.Occurrences\nDim oCyl2 As ComponentOccurrence\n\noCyl2 = oOcc.ItemByName(\"Cylinder:1\")\n\t\noCyl2.ActivePositionalRepresentation = \"EXTENDED\"\noCyl2.Edit\noCyl2.ExitEdit(ExitTypeEnum.kExitToParent)"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Using My.Resources to get a button icon\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Attribute Helper for Inventor 2012\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Part list export without header\n                    ", "solution": ["Valid inputs for Options parameter: \nName                       Value Type           Valid for export formats \n-------------------       -----------       -------------------------------- \nTableName                 String              kMicrosoftExcel, kMicrosoftAccess \nExportedColumns          String              All containing semicolon separated column titles \nIncludeTitle                 Boolean           kMicrosoftExcel, kTextFileCommaDelimited, kTextFileTabDelimited, kUnicodeTextFileCommaDelimited, kUnicodeTextFileTabDelimited \nStartingCell                 String              kMicrosoftExcel \nTemplate                    String             kMicrosoftExcel \nAutoFitColumnWidth      Boolean           kMicrosoftExcel"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic form\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Making Views Precise\n                    ", "solution": ["For Each sheet As Sheet In ThisDrawing.Document.Sheets\n    If sheet.DrawingViews.Count > 0 Then\n        For Each view As DrawingView In sheet.DrawingViews\n            view.IsRasterView = False\n        Next\n    End If\nNext"], "author": "cadmanagershat"},
{"created at": [], "solution Title": "\n                        Re: What is the correct syntax for Component.Replace?\n                    ", "solution": ["'Using just file paths\nSub ReplaceComponentByPath(oldPath As String, newPath As String)\n  For Each occ In ThisApplication.ActiveDocument.ComponentDefinition.Occurrences\n    If occ.ReferencedDocumentDescriptor.FullDocumentName = oldPath Then\n      occ.Replace newPath, True 'Replaces all occurences\n      Exit For\n    End If\n  Next occ\nEnd Sub\n\n'Using occurnce name and path\nSub ReplaceComponentByName(occName As String, newPath As String)\n  For Each occ In ThisApplication.ActiveDocument.ComponentDefinition.Occurrences\n    If occ.Name = occName Then\n      occ.Replace newPath, True 'Replaces all occurences\n      Exit For\n    End If\n  Next occ\nEnd Sub", "        Dim f As File\n        Set f = ThisApplication.ActiveDocument.File\n        ", "        Dim fd As FileDescriptor\n        For Each fd In f.", "ReferencedFileDescriptors", "            If fd.FullFileName = OldNamePath Then\n                fd.", "ReplaceReference", " (NewNamePath)\n            End If\n        Next"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Active method is not called\n                    ", "solution": [], "author": "jordanmarr"},
{"created at": [], "solution Title": "\n                        Re: Rounding the value of a (decimal) driven parameter in a par tlist.\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Talking to Inventor: Wait!\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Occurrence and DWFx\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Subspressing all chamfer or fillets with iLogic\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: How do i get the bom referenced view vb.net\n                    ", "solution": ["Sub GetDrawingBOM()\n  Dim oDrawDoc As DrawingDocument\n  Set oDrawDoc = ThisApplication.ActiveDocument\n  Dim oSheet As Sheet\n  Set oSheet = oDrawDoc.ActiveSheet\n  Dim oPartsList As PartsList\n  Set oPartsList = oSheet.PartsLists.Item(1)\n  Dim oView As DrawingView\n  Set oView = oPartsList.ParentView\n  Beep\n  MsgBox oView.Name\nEnd Sub\n"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: API code to Suppress Assembly constraints\n                    ", "solution": [], "author": "luismestre"},
{"created at": [], "solution Title": "\n                        Re: Use iLogic to uncheck the Checked Date iProperty\n                    ", "solution": ["iProperties.Value(\"Status\", \"Checked By\") = Nothing\niProperties.Value(\"Status\", \"Checked Date\") = Nothing\n\n'iProperties.Value(\"Status\", \"Eng. Approved By\") = Nothing\n'iProperties.Value(\"Status\", \"Eng. Approved Date\") = Nothing\n\n'iProperties.Value(\"Status\", \"Mfg. Approved By\") = Nothing\n'iProperties.Value(\"Status\", \"Mfg. Approved Date\") = Nothing\n\nInventorVb.DocumentUpdate()  "], "author": "DeerSpotter"},
{"created at": [], "solution Title": "\n                        Re: Place & Constrain to Origin Macro\n                    ", "solution": ["Sub selectPartAndPlace()\n\n    'assume an assembly is opened\n     Dim oAssDoc As AssemblyDocument\n     Set oAssDoc = ThisApplication.ActiveDocument\n        \n    ' Create a new FileDialog object.\n    Dim oFileDlg As FileDialog\n    Call ThisApplication.CreateFileDialog(oFileDlg)\n\n    ' Define the filter to select part and assembly files or any file.\n    oFileDlg.Filter = \"Inventor Files (*.iam;*.ipt)|*.iam;*.ipt|All Files (*.*)|*.*\"\n\n    ' Define the part and assembly files filter to be the default filter.\n    oFileDlg.FilterIndex = 1\n\n    ' Set the title for the dialog.\n    oFileDlg.DialogTitle = \"Open File Test\"\n\n    ' Set the initial directory that will be displayed in the dialog.\n    oFileDlg.InitialDirectory = \"C:\\Temp\"\n\n    ' Set the flag so an error will be raised if the user clicks the Cancel button.\n    oFileDlg.CancelError = True\n\n    ' Show the open dialog.  The same procedure is also used for the Save dialog.\n    ' The commented code can be used for the Save dialog.\n    On Error Resume Next\n    oFileDlg.ShowOpen\n'    oFileDlg.ShowSave\n\n    ' If an error was raised, the user clicked cancel, otherwise display the filename.\n    If Err Then\n        MsgBox \"User cancelled out of dialog\"\n    ElseIf oFileDlg.FileName <> \"\" Then\n        'MsgBox \"File \" & oFileDlg.FileName & \" was selected.\"\n        \n        Dim oAssDef As AssemblyComponentDefinition\n        Set oAssDef = oAssDoc.ComponentDefinition\n        \n        Dim oM As Matrix\n        Set oM = ThisApplication.TransientGeometry.CreateMatrix()\n        \n        Dim oNewOcc As ComponentOccurrence\n        Set oNewOcc = oAssDef.Occurrences.Add(oFileDlg.FileName, oM)\n        \n        'if you need to ground it\n        'oNewOcc.Grounded = True\n        \n    End If\n\n\nEnd Sub"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: VBA Excel error\n                    ", "solution": ["Sub BOM_Export() 'Esportazione DB completo e funzionante\n\n    Dim oApp As Application\n    Set oApp = ThisApplication\n    Dim invDoc As Document\n    Set invDoc = ThisApplication.ActiveDocument\n    Dim oDocument As Inventor.Document\n    Set oDocument = ThisApplication.ActiveDocument\n    Dim invDesignInfo As PropertySet\n    Set invDesignInfo = invDoc.PropertySets.Item(\"Design Tracking Properties\")\n    Dim invPartNumberProperty As Property\n    Set invPartNumberProperty = invDesignInfo.Item(\"Part Number\")\n    NumeroParte = invPartNumberProperty.Value\n    Estensione = (\".csv\")\n    Patch = GetFilePatch(oDocument.FullFileName)\n    PercaorsoNomeEst = (Patch & NumeroParte & Estensione)\n    'Data\n    Dim DataCmp As String\n    'DataCmp = (Day(Date) & \"/\" & Month(Date) & \"/\" & Year(Date))\n    DataCmp = Date$\n    'DataCmp = (Month(Date) & \"/\" & Day(Date) & \"/\" & Year(Date))\n   \n       \n    \n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    Dim oBOM As BOM\n    Set oBOM = oDoc.ComponentDefinition.BOM\n    \n     ' Imposta corrente il livello Principale\n    Dim oAsmDef As AssemblyComponentDefinition\n    Set oAsmDef = ThisApplication.ActiveDocument.ComponentDefinition\n    oAsmDef.RepresentationsManager.LevelOfDetailRepresentations.Item(\"Principale\").Activate\n\n    If oApp.ActiveDocument.DocumentType = kAssemblyDocumentObject Then\n        Dim oAssyDoc As AssemblyDocument\n        Set oAssyDoc = oApp.ActiveDocument\n    \n        Dim oAssyCompDef As AssemblyComponentDefinition\n        Set oAssyCompDef = oAssyDoc.ComponentDefinition\n    \n        Dim excel_app As Excel.Application\n        \n        ' Setta la propriet\u00e0 della vista strutturale al solo di primo livello\n        oBOM.StructuredViewFirstLevelOnly = True\n        \n        ' Attiva la vista strutturata della distinata componenti\n        oBOM.StructuredViewEnabled = True\n\n        ' Crea l'applicazione Excel\n        Set excel_app = CreateObject(\"Excel.Application\")\n\n        ' Commenta questa linea se vuoi excel invisibile\n        excel_app.Visible = False\n        \n        'Crea il foglio di lavoro\n        Call excel_app.Workbooks.Add\n        Dim oBomR As BOMRow\n        Dim oBOMPartNo As String\n    \n        With excel_app\n            .Range(\"A1\").Select\n            .ActiveCell.Value = \"Quantity\"\n            .Range(\"B1\").Select\n            .ActiveCell.Value = \"Part Number\"\n            '.Range(\"R1\").Select\n            '.ActiveCell.Value = \"Inizio Validit\u00e0\"\n        \n            'Iterate through parts only BOM View\n            Dim i As Integer\n            For i = 1 To oAssyCompDef.BOM.BOMViews(2).BOMRows.Count\n                \n                'Set oBomR to current BOM Row\n                Set oBomR = oAssyCompDef.BOM.BOMViews(2).BOMRows(i)\n                \n                'Get Current Row part number from part\n                oBOMPartNo = oBomR.ComponentDefinitions(1).Document.PropertySets(3).ItemByPropId(5).Value\n                \n                'Write values to spreadsheet\n                .Range(\"A\" & i + 1).Select\n                .ActiveCell.Value = oBomR.TotalQuantity 'Quantity value\n                .Range(\"B\" & i + 1).Select\n                .ActiveCell.Value = oBOMPartNo\n                '.Range(\"R\" & i + 1).Select\n                '.ActiveCell.Value = DataCmp\n            Next i\n        End With\n    Else\n        Exit Sub\n    End If\n    \n    'Ordina le righe per ordine alfabetico secondo il codice\n    'Sheets(\"Foglio1\").Select\n    ActiveSheet.Select\n    Columns(\"A:R\").Select\n    Range(\"A21\").Activate\n    ActiveWorkbook.Worksheets(\"Foglio1\").Sort.SortFields.Clear\n    ActiveWorkbook.Worksheets(\"Foglio1\").Sort.SortFields.Add Key:=Range(\"B2:B200\") _\n        , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal\n    With ActiveWorkbook.Worksheets(\"Foglio1\").Sort\n        .SetRange Range(\"A1:R200\")\n        .Header = xlYes\n        .MatchCase = False\n        .Orientation = xlTopToBottom\n        .SortMethod = xlPinYin\n        .Apply\n    End With\n    \n    ActiveWorkbook.SaveAs filename:=(PercaorsoNomeEst), FileFormat:=xlCSVWindows, CreateBackup:=False, Local:=True\n    Application.DisplayAlerts = False\n    ActiveWorkbook.Close\n    excel_app.Quit 'Chiude definitivamente l'applicazione excel\n    MsgBox \"La distinta \u00e8 stata esportata correttamente!\"\n    \n    End ' <== THIS IS THE MISSING END\nEnd Sub\n\n'Funzione che estrae il percorso completo nel quale si trova il file attualmente in uso\nPrivate Function GetFilePatch(ByVal sFullFileName As String) As String\n\n  Dim sFilePatch As String\n\n  Dim nPos1  As Integer\n  Dim nPosf1 As Integer\n  Dim nPos2 As Integer\n \n  sFilePatch = sFullFileName\n\n  nPos1 = InStrRev(sFullFileName, \"\\\")\n  nPos2 = InStrRev(sFullFileName, \".\")\n\n  If nPos1 > 0 Then\n\n    sFilePacth = Mid$(sFullFileName, nPos1 + 1)\n\n  End If\n\n  nPosf1 = InStr(sFullFileName, \".\")\n\n  If nPos1 > 0 Then\n\n    sFilePatch = Left$(sFilePatch, nPosf1 - (nPos2 - nPos1))\n\n  End If\n\n  GetFilePatch = sFilePatch\n  \nEnd Function\n\n"], "author": "varga_zsolt"},
{"created at": [], "solution Title": "\n                        Re: how to prevent double click a user defined button in an addin?\n                    ", "solution": [], "author": "liminma8458"},
{"created at": [], "solution Title": "\n                        Re: Trigger an existing rule in all parts from assembly level with ilogic.\n                    ", "solution": ["Dim oComp As ComponentOccurrence\nDim oComps As ComponentOccurrences\n\noComps = ThisDoc.Document.ComponentDefinition.Occurrences\n\nFor Each oComp In oComps\n\tiLogicVb.RunRule(oComp, \"ruleName\")\nNext"], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Content Center File Naming issue (FDS Ultimate 2014)\n                    ", "solution": [], "author": "Dennis.Ossadnik"},
{"created at": [], "solution Title": "\n                        Re: .net addin - final stages\n                    ", "solution": [], "author": "NachoUK"},
{"created at": [], "solution Title": "\n                        Re: Editing part from within Assembly error\n                    ", "solution": [], "author": "mslosar"},
{"created at": [], "solution Title": "\n                        Re: Inventor, Part, Assembly...Defining Where I Am using VBA\n                    ", "solution": ["Sub WhatAmI()\n  Dim ThisDocument As Document\n  ThisDocument = ThisApplication.ActiveDocument\n\n  If ThisDocument.DocumentType = kAssemblyDocumentObject Then\n    MsgBox \"I'm an assembly document.\"\n  ElseIf ThisDocument.DocumentType = kPartDocumentObject Then\n    MsgBox \"I'm a part document.\"\n  ElseIf ThisDocument.DocumentType = kDrawingDocumentObject Then\n    MsgBox \"I'm a part document.\"\n  End If\nEnd Sub"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Set GeneralNote.fitted\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: How to get Parameter's unit in C#.Net\n                    ", "solution": ["string units = oParam.get_Units();"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: select 1 occurrence from multiple\n                    ", "solution": [], "author": "alyssaweaver"},
{"created at": [], "solution Title": "\n                        Re: Weld Configurations\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Classes Dll Workaxis\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic to change sheet name to equal Part Number.\n                    ", "solution": ["Sub", " ", "Main", "\n    ", "If", " ", "TypeOf", " ", "ThisDoc", ".", "Document", " ", "Is", " ", "DrawingDocument", " ", "Then", "\n        ", "Dim", " ", "dwgDoc", " as ", "DrawingDocument", " ", "=", " ", "ThisDoc", ".", "Document", "\n        ", "For", " ", "Each", " ", "dwgSheet", " ", "As", " ", "Sheet", " ", "In", " ", "dwgDoc", ".", "Sheets", "\n            ", "If", " ", "dwgSheet", ".", "DrawingViews", ".", "Count", " ", ">", " ", "0", " ", "Then", "\n                ", "modelFile", " ", "=", " ", "dwgSheet", ".", "DrawingViews", "(", "1", ")", ".", "ReferencedDocumentDescriptor", ".", "FullDocumentName", "\n                ", "modelDoc", " ", "=", " ", "dwgSheet", ".", "DrawingViews", "(", "1", ")", ".", "ReferencedDocumentDescriptor", ".", "ReferencedDocument", "\n                ", "prtNumber", " ", "=", " ", "modelDoc", ".", "PropertySets", "(", "\"", "{32853F0F-3444-11D1-9E93-0060B03C1CA6}", "\"", ")", ".", "ItemByPropId", "(", "5", ")", ".", "Value", "\n                ", "If", " ", "Not", " ", "String", ".", "IsNullOrEmpty", "(", "prtNumber", ")", " ", "Then", "\n                    ", "dwgSheet", ".", "Name", " ", "=", " ", "prtNumber", "\n                ", "End", " ", "If", "\n            ", "End", " ", "If", "\n        ", "Next", "\n    ", "End", " ", "If", "\n", "End Sub", "\n"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Run-Time Error 91?\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Filesystemobject in ilogic\n                    ", "solution": ["Imports SysIO = System.IO"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Question about Microsoft VB 2008 express\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Ilogic - Select all closed loops in a specific Sketch & Revolve around X\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Cannot load an .IVB file -> Inventor chrashes\n                    ", "solution": [], "author": "ChrisVandeVoord"},
{"created at": [], "solution Title": "\n                        Re: How to detect if ctrl is pressed in the OnRadialMarkerMenu event?\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Find Drawing View Orientation ilogic\n                    ", "solution": ["Using the DrawingView.Camera.ViewOrientationType might be good enough for you. The below code works fine for me - the only problem is if your ISO view is not a base view (its a projected or auxiliary view perhaps) then it won't be recognised as ISO in the ViewOrientationType Enum, just as 'Arbitrary'. ", " ", "Sub", " ", "Main", "\n        ", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n        ", "For", " ", "Each", " ", "oView", " ", "As", " ", "DrawingView", " ", "In", " ", "oDrawDoc", ".", "Sheets", ".", "Item", "(", "1", ")", ".", "DrawingViews", "\n            \n            ", "'", "Define camera", "            ", "Dim", " ", "cam", " ", "As", " ", "Camera", " ", "=", " ", "oView", ".", "Camera", "\n\n            ", "If", " ", "Not", " ", "oView", ".", "Camera", ".", "ViewOrientationType", " ", "=", " ", "10762", " ", "AndAlso", " ", "_", "\n            ", "Not", " ", "oView", ".", "Camera", ".", "ViewOrientationType", " ", "=", " ", "10761", " ", "AndAlso", " ", "_", "\n            ", "Not", " ", "oView", ".", "Camera", ".", "ViewOrientationType", " ", "=", " ", "10760", " ", "AndAlso", " ", "_", "\n            ", "Not", " ", "oView", ".", "Camera", ".", "ViewOrientationType", " ", "=", " ", "10759", " ", "Then", "\n\n                ", "MessageBox", ".", "Show", "(", "\"", "Not an ISO base view", "\"", ", ", "\"", "Title", "\"", ")", "\n                \n                ", "oView", ".", "Scale", " ", "=", " ", "0.1", "\n\n            ", "End", " ", "If", "\n        ", "Next", "\n    ", "End Sub"], "author": "LukeDavenport"},
{"created at": [], "solution Title": "\n                        Re: Turn off 'Use Thickness from Rule' in 'Sheet Metal Defaults' with VBA?\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: How to delete existing user parameters\n                    ", "solution": ["'Parameter name:\nDim Name As String = \"AAA\"\n\nDim oDoc as Inventor.Document = ThisDoc.Document\nDim oDef as ComponentDefinition = oDoc.ComponentDefinition\nDim oPar As UserParameter = oDef.Parameters.UserParameters.item(Name)\noPar.Delete\noDoc.update\n\nMsgBox(\"DONE\")"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Controlling the camera using Ilogic\n                    ", "solution": ["Public Sub RotateCamMacro()\n \n    Dim pi As Double\n    pi = Math.Atn(1) * 4\n    \n    'Rotation speed in Rad/Sec\n    Dim rotSpeedRad As Double\n    rotSpeedRad = 40 * pi / 180\n    \n    'Get part document\n    Dim doc As Document\n    Set doc = ThisApplication.ActiveDocument\n    \n    'Get range box center point\n    Dim centerPoint As point\n    Set centerPoint = GetRangeBoxCenter(doc)\n    \n    'Set camera orientation\n    Call SetCameraOrientation( _\n        centerPoint, _\n        ViewOrientationTypeEnum.kIsoTopRightViewOrientation)\n    \n    'Get Inventor camera\n    Dim camera As Inventor.camera\n    Set camera = ThisApplication.ActiveView.camera\n    \n    Dim totalRot As Double\n    totalRot = 0\n    \n    Dim offsetRad As Double\n    \n    Dim rotAxis As vector\n    Set rotAxis = ThisApplication.TransientGeometry.CreateVector(0, 1, 0)\n    \n    Dim upVector As UnitVector\n    Set upVector = ThisApplication.TransientGeometry.CreateUnitVector(0, 1, 0)\n    \n    Do While (totalRot < 2 * pi)\n    \n        offsetRad = 0.05 * rotSpeedRad\n        \n        RotateCam camera, offsetRad, rotAxis, centerPoint, upVector\n        \n        totalRot = totalRot + offsetRad\n        \n    Loop\n    \n    Call SetCameraOrientation( _\n        centerPoint, _\n        ViewOrientationTypeEnum.kIsoTopRightViewOrientation)\n    \nEnd Sub\n\nPublic Function GetRangeBoxCenter(ByVal doc As Document) As point\n\n    Dim minPoint As point\n    Set minPoint = doc.ComponentDefinition.RangeBox.minPoint\n    \n    Dim maxPoint As point\n    Set maxPoint = doc.ComponentDefinition.RangeBox.maxPoint\n    \n    Set GetRangeBoxCenter = ThisApplication.TransientGeometry.CreatePoint( _\n        (minPoint.X + maxPoint.X) * 0.5, _\n        (minPoint.Y + maxPoint.Y) * 0.5, _\n        (minPoint.Z + maxPoint.Z) * 0.5)\n\nEnd Function\n\nPublic Sub SetCameraOrientation( _\n    ByVal targetPoint As point, _\n    ByVal viewOrientation As ViewOrientationTypeEnum)\n\n    Dim camera As Inventor.camera\n    Set camera = ThisApplication.ActiveView.camera\n    \n    camera.ViewOrientationType = viewOrientation\n    camera.target = targetPoint\n    \n    Call camera.Fit\n    Call camera.ApplyWithoutTransition\n\nEnd Sub\n\nPublic Sub RotateCam( _\n    camera As camera, _\n    ByVal offsetRad As Double, _\n    rotAxis As vector, _\n    center As point, _\n    upVector As UnitVector)\n\n    Dim matrix As matrix\n    Set matrix = ThisApplication.TransientGeometry.CreateMatrix\n    \n    Call matrix.SetToRotation(offsetRad, rotAxis, center)\n    \n    Dim newEye As point\n    Set newEye = camera.eye\n    \n    Call newEye.TransformBy(matrix)\n    \n    camera.eye = newEye\n    \n    camera.upVector = upVector\n    \n    Call camera.ApplyWithoutTransition\n    \nEnd Sub"], "author": "SGPViewer"},
{"created at": [], "solution Title": "\n                        Re: Part iLogic yes, within an assembly no.\n                    ", "solution": ["If ThisApplication.ActiveDocument.DocumentType <> _\nkPartDocumentObject Then \n\tReturn\nEnd If"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Form to populate title block\n                    ", "solution": ["         ", "'", "???? Set Prompted entry To = oDrwNo  ????", "         ", "Call", " ", "oDrawDoc", ".", "ActiveSheet", ".", "TitleBlock", ".", "SetPromptResultText", "(", "tb", ", ", "oDrwNo", ")"], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Determine Inventor file version\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: To create new layers in the drawing document.\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: rule to set part discription\n                    ", "solution": [], "author": "admaiora"},
{"created at": [], "solution Title": "\n                        Re: How can I find valid color style names for use in iLogic rules\n                    ", "solution": ["MultiValue.SetValueOptions(True, DefaultIndex := 0) \n\nDim colorList As New ArrayList\nFor Each style As RenderStyle In ThisDoc.Document.RenderStyles\n    colorList.Add(Style.Name)\nNext\nMultiValue.List(\"primary_color\") = colorList\n\nBeep\nMsgBox(\"Done\")", "iProperties.PartColor =  primary_color\niProperties.Value(\"Summary\", \"Comments\") = _", "     ThisDoc.Document.ActiveRenderStyle.Name"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Parallel View of Sketch\n                    ", "solution": [], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Macro to hide sketch\n                    ", "solution": [], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Rotate Sketched Symbol with iLogic\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Returning borrowed licenses\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Programmatically Select Assembly Component in VBA\n                    ", "solution": ["Call ThisApplication.ActiveDocument.SelectSet.Select(compOcc)"], "author": "nannerdw"},
{"created at": [], "solution Title": "\n                        Re: iLogic code to change the flat pattern orientation.\n                    ", "solution": ["Public Sub SheetMetalOrientFlat()\n\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    Dim smDef As SheetMetalComponentDefinition\n    Set smDef = partDoc.ComponentDefinition\n    \n    If Not smDef.HasFlatPattern Then\n        smDef.Unfold\n    End If\n    \n    Dim orientation As FlatPatternOrientation\n    Set orientation = smDef.FlatPattern.FlatPatternOrientations.ActiveFlatPatternOrientation.Copy(\"New Orientation\")\n    \n    ' Find an linear edge that lies along the flattened plane.\n    Dim flatEdge As Edge\n    Dim tempEdge As Edge\n    For Each tempEdge In smDef.FlatPattern.Body.Edges\n        If tempEdge.GeometryType = kLineSegmentCurve Then\n            If Abs(tempEdge.StartVertex.Point.Z - tempEdge.StopVertex.Point.Z) < 0.0001 Then\n                Set flatEdge = tempEdge\n                Exit For\n            End If\n        End If\n    Next\n    \n    orientation.Activate\n    orientation.AlignmentRotation.Expression = \"30 deg\"\n    orientation.AlignmentAxis = flatEdge\n    \nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: iLogic measure of non UCS orientated parts & assemblies\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: API for Frame Generator in Inventor 2015?\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic Form problem with numerical data\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule - Add Description value after file name for Member display Name\n                    ", "solution": ["doc = ThisDoc.Document\nFilename_Description = iProperties.Value(\"Project\", \"Part Number\") _\n& \"_\" & iProperties.Value(\"Project\", \"Description\")\n'check for a description iProperty value\n'Trim removes spaces in case the description is just a space\nIf Trim(iProperties.Value(\"Project\", \"Description\")) <> \"\" Then\n'set the display name\ndoc.DisplayName = Filename_Description\nElse \n'reset the display name\ndoc.DisplayName = \"\"\nEnd If", "'Define the open document\nDim openDoc As Document\nopenDoc = ThisDoc.Document\niLogicVb.UpdateWhenDone = True\n'Look at all of the files referenced in the open document\nDim docFile As Document\nFor Each docFile In openDoc.AllReferencedDocuments                \n'format  file name                   \nDim FNamePos As Long\nFNamePos = InStrRev(docFile.FullFileName, \"\\\", -1)                        \nDim docFName As String \ndocFName = Right(docFile.FullFileName, Len(docFile.FullFileName) - FNamePos) \nFilename_Description = iProperties.Value(docFName, \"Project\", \"Part Number\") _\n& \"_\" & iProperties.Value(docFName, \"Project\", \"Description\")\n   'check for a description iProperty value\n   'Trim removes spaces in case the description is just a space\n   If Trim(iProperties.Value(docFName, \"Project\", \"Description\")) <> \"\" Then\n   'set the display name\n    docFile.DisplayName = Filename_Description\n    Else \n    'reset the display name\n     docFile.DisplayName = \"\"\n    End If\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Close Documents Documents opened by API\n                    ", "solution": [], "author": "santoshr0114"},
{"created at": [], "solution Title": "\n                        Re: Mapping to a date property from Visual Studio to Vault\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Inventor macro \u2013 Export workpoints to CSV file inside assembly\n                    ", "solution": [], "author": "hreuvers"},
{"created at": [], "solution Title": "\n                        Re: Can I test for the drawing view being the base view?\n                    ", "solution": [], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: GetParamAtPoint in C#\n                    ", "solution": [], "author": "MTHulli"},
{"created at": [], "solution Title": "\n                        Re: Save multivalue itens automatically in iLogic\n                    ", "solution": ["'Get Multivalue Parameter Values\nvalues = MultiValue.List(\"Tag_Bomba\")\n\nFor Each ", "value", " In values\n    Parameter(\"Tag_Bomba\") = ", "value", "\n    InventorVb.DocumentUpdate()\n    ThisDoc.Document.SaveAs (\"..\\3D_Pumps\\\" & ", "value", " & \".ipt\", True)\nNext value"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Savecopyas or export dwg from iam or ipt\n                    ", "solution": [], "author": "mttb"},
{"created at": [], "solution Title": "\n                        Re: VBA / HALFSECTION VIEW\n                    ", "solution": [], "author": "pberube"},
{"created at": [], "solution Title": "\n                        Re: Add flange to part in assembly\n                    ", "solution": [], "author": "askokk"},
{"created at": [], "solution Title": "\n                        Re: Make a parts list column invisible\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Getting started with Inventor API and COM reference\n                    ", "solution": [], "author": "adhurjaty"},
{"created at": [], "solution Title": "\n                        Re: Numbers on Parts\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Save Embedding image from part\n                    ", "solution": ["Sub Test_DECAL()\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim oDef As PartComponentDefinition\n  Set oDef = oDoc.ComponentDefinition\n  \n  Dim oDecal As DecalFeature\n  Set oDecal = oDef.features.DecalFeatures.Item(1)\n  \n  Dim oSketchImage As SketchImage\n  Set oSketchImage = oDecal.Image\n  \n  Dim oImage As IPictureDisp\n  Set oImage = oSketchImage.Image\n\n  Dim Filename As String\n  Filename = \"c:\\temp\\AAA.bmp\"  \n  Call SavePicture(oImage, Filename)\n  Beep\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Open existing idw and replace model from iam iLogic assembly.\n                    ", "solution": ["Dim asmDoc as Document\nasmDoc = ThisApplication.Documents.Open(\"Asmdoc.iam\")\nasmDoc.SaveAs(\"NewAsmdoc.iam\")\nasmDoc.Close()"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: C# create geometric constraint in sketch\n                    ", "solution": [], "author": "gadurai"},
{"created at": [], "solution Title": "\n                        Re: Revision Cloud / Drawing Tools not working\n                    ", "solution": [], "author": "Niftythang"},
{"created at": [], "solution Title": "\n                        Re: Adding user parameters to a simulation\n                    ", "solution": [], "author": "scottmoyse"},
{"created at": [], "solution Title": "\n                        Re: Ellipsoid\n                    ", "solution": ["Sub CreateEllipsoid()\n\n  Dim oTG As TransientGeometry\n  Set oTG = ThisApplication.TransientGeometry\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim oDef As PartComponentDefinition\n  Set oDef = oDoc.ComponentDefinition\n  \n  Dim oSketch As PlanarSketch\n  Set oSketch = oDoc.ComponentDefinition.Sketches.Add(oDef.WorkPlanes.Item(3), False)\n  \n  Dim oFitPoints As ObjectCollection\n  Set oFitPoints = ThisApplication.TransientObjects.CreateObjectCollection()\n  \n  Dim Pi As Double\n  Pi = Math.Atn(1) * 4#\n  \n  Dim unitvextorx_90, unitvextory_90 As Double\n  unitvextorx_90 = Math.Cos((60 + 0) * Pi / 180#)\n  unitvextory_90 = Math.Sin((60 + 0) * Pi / 180#)\n  \n  Dim unitvextorx_180, unitvextory_180 As Double\n  unitvextorx_180 = Math.Cos((60 + 90) * Pi / 180#)\n  unitvextory_180 = Math.Sin((60 + 90) * Pi / 180#)\n  \n  Dim oUniVector As UnitVector2d\n  Set oUniVector = oTG.CreateUnitVector2d(unitvextorx_90, unitvextory_90)\n  \n  Dim oPoint2d_a As Point2d\n  Set oPoint2d_a = ThisApplication.TransientGeometry.CreatePoint2d(0, 0)\n  \n  ' Create the elliptical arc\n  Dim oEllipticalArc As SketchEllipticalArc\n  Set oEllipticalArc = oSketch.SketchEllipticalArcs _\n    .Add(oPoint2d_a, oUniVector, 3# / 10#, 2# / 10#, 0, Pi)\n  \n  Dim oAxis As sketchLine\n  Set oAxis = oSketch.sketchLines.AddByTwoPoints( _\n      oEllipticalArc.StartSketchPoint, _\n      oEllipticalArc.EndSketchPoint)\n  \n  Dim oProfile As Profile\n  Set oProfile = oSketch.Profiles.AddForSolid()\n  \n  Dim oRevolve As RevolveFeature\n  Set oRevolve = oDoc.ComponentDefinition.features.RevolveFeatures _\n    .AddFull(oProfile, oAxis, PartFeatureOperationEnum.kJoinOperation)\n    \n    Beep\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule Issue:  Ignore Projected Views or Add Custom iProperty\n                    ", "solution": ["skProp", " ", "=", " ", "customProps", ".", "Add", "(", "\"", "(SK)", "\"", ", ", "\"", "SK", "\"", ")"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Add a CustomTable to an IDW programatically using C++/COM, example anywhere?\n                    ", "solution": ["    wchar_t* ColNames[128] = {L\"Column One\",L\"Column Two\",L\"Column Three\"};\n\n    SAFEARRAY* pstrColumns = CreateSafeStringArray(3, ColNames);\n\n    CComPtr<CustomTables> pCustomTables = nullptr ;\n    pSheet->get_CustomTables (&pCustomTables) ;\n\n    CComPtr<Point2d> ptTable; // Create a 2d point\n    theApp.GetTransGeomPtr()->CreatePoint2d(10.0,10.0,&ptTable);   \n\n    const int ikNumCols = 3 ;\n    const int ikNumRows = 6 ;\n\n    /*double Widths[] = {10,10,10} ;\n    SAFEARRAY* pWidths = CreateSafeDoubleArray(3, Widths) ;\n\n    double Heights[] = {10,10,10} ;\n    SAFEARRAY* pHeights = CreateSafeDoubleArray(3, Heights) ;*/\n\n    CComVariant varEmpty ;   \n    CComPtr<CustomTable> pCustomTable = nullptr ;\n    pCustomTables->Add (CComBSTR(L\"HOLES\"),ptTable,ikNumCols,ikNumRows,&pstrColumns,\n                        varEmpty, // contents?\n                        varEmpty, // widths?\n                        varEmpty, // heights?\n                        varEmpty, // more info\n                        &pCustomTable) ; // table returned\n    \n    SafeArrayDestroy (pstrColumns) ;\n    \n    return true ;\n\n", "SAFEARRAY* CreateSafeStringArray(long nElements, TCHAR *elements[])\n{\n    SAFEARRAYBOUND saBound[1];\n\n    saBound[0].cElements = nElements;\n    saBound[0].lLbound = 0;\n\n    SAFEARRAY *pSA = SafeArrayCreate(VT_BSTR, 1, saBound);\n\n    if (pSA == NULL)\n    {\n        return NULL;\n    }\n\n    for (int ix = 0; ix < nElements; ix++)\n    {\n        BSTR pData = SysAllocString(elements[ix]);\n\n        long rgIndicies[1];\n\n        rgIndicies[0] = saBound[0].lLbound + ix;\n\n        HRESULT hr = SafeArrayPutElement(pSA, rgIndicies, pData);\n    }\n\n    return pSA;\n}"], "author": "oransen"},
{"created at": [], "solution Title": "\n                        Re: Text File append\n                    ", "solution": [], "author": "OkieWolf"},
{"created at": [], "solution Title": "\n                        Re: VBA - QUERY 'FX PARAMETER' VALUE FOR A SHEET METAL ITEM\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Vault Lifecycle.\n                    ", "solution": [], "author": "brendan.henders"},
{"created at": [], "solution Title": "\n                        Re: Change Parts list item via iLogic\n                    ", "solution": ["Sub Main()\n' Set a reference to the drawing document.\n' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n'''---------------------\n'define custom property collection\noCustomPropertySet = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\")\nTry\n'set property value\noProp = oCustomPropertySet.Item(\"ASSQTY\")\nCatch\n' Assume error means not found so create it\noCustomPropertySet.Add(\"\", \"ASSQTY\")\nEnd Try\n'''-----------------------\n\n' Set a reference to the first parts list on the active sheet.\nDim oPartList As PartsList\noPartList = oDrawDoc.ActiveSheet.PartsLists.Item(1)\noASSQTY = InputBox(\"Prompt\", \"Title\",iProperties.Value(\"Custom\", \"ASSQTY\") )\niProperties.Value(\"Custom\", \"ASSQTY\") = oASSQTY\n' Iterate through the contents of the parts list.\nDim i As Long\nFor i = 1 To oPartList.PartsListRows.Count\noCell = oPartList.PartsListRows.Item(i).Item(\"AS*\") ' Note to Forum, my text has been censored, replace * with \"S\"\noCell2  = oPartList.PartsListRows.Item(i).Item(\"LENGTH\")\n'write to the target cell\noCell.Value = iProperties.Value(\"Custom\", \"ASSQTY\")\nIf oCell2.Value = \"0\" Or oCell2.Value = \"\" Then\noCell2.Value = \"-\"\nEnd If\nNext \n'Next Sub Routine\n'Removed because it has been incorporated above.\n'length\nEnd Sub"], "author": "rhasell"},
{"created at": [], "solution Title": "\n                        Re: Find cell in custom table\n                    ", "solution": ["'look at only the DWG NO. column\noCell  = table.Rows.Item(i).Item(\"DWG NO.\")"], "author": "gadurai"},
{"created at": [], "solution Title": "\n                        Re: CustomTable cells with multiline contents\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Choose dimension style and converting all dimensions of a drawing using ilog\n                    ", "solution": [], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: Transformation Matrix\n                    ", "solution": [], "author": "MPQInvent"},
{"created at": [], "solution Title": "\n                        Re: Inventor Pro 2014: iLogic: Assign a Keystroke to open a form or run a Rule\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Populate Listbox from OpenFileDialog Multi-Select\n                    ", "solution": ["    ElseIf Not oFileDlg.fileName = \"\" Then\n        Dim fNames As Variant\n        fNames = Split(oFileDlg.fileName, \"|\")\n        Dim curName As Variant\n        For Each curName In fNames\n            lstSource.AddItem curName\n        Next curName\n    End If\n\n"], "author": "alyssaweaver"},
{"created at": [], "solution Title": "\n                        Re: Link parameter from drawing sketch to parameter from user parameter\n                    ", "solution": [], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Create a iLogic document Rule with External Rule\n                    ", "solution": [], "author": "sgwilliams"},
{"created at": [], "solution Title": "\n                        Re: iLogic Link 3rd party Excel\n                    ", "solution": ["Dim doc As Document\ndoc = ThisApplication.ActiveDocument\n\nDim d As ReferencedOLEFileDescriptor\nFor Each d In doc.ReferencedOLEFileDescriptors\n\tCall MsgBox(d.FullFileName)\nNext"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Placing part list tabel over title block\n                    ", "solution": ["'", " add partslist table", "oDrawDoc", "=", "ThisDoc", ".", "Document", " ", "'", "Set a reference to the active sheet.", "Dim", "oSheet", "As", "Sheet", "      ", "oSheet", "=", "oDrawDoc", ".", "ActiveSheet", "    ", "Dim", "oBorder", "As", "Border", "=", "oSheet", ".", "Border", "    ", "'", " Set a reference to the first drawing view ", " ", "    ", "Dim", "oDrawingView", "As", "DrawingView", "      ", "oDrawingView", "=", "oSheet", ".", "DrawingViews", "(", "1", ")", "      ", "If", "Not", "oBorder", "Is", "Nothing", "Then", "    ", "oPlacementPoint", "=", "oBorder", ".", "RangeBox", ".", "MaxPoint", "Else", "    ", "oPlacementPoint", "=", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "oSheet", ".", "Width", ", ", "oSheet", ".", "Height", ")", "End", "If", "    ", "   ", "    ", "'", " Create the parts list.", "Dim", "oPartsList", "As", "PartsList", "     ", "oPartsList", "=", "oSheet", ".", "PartsLists", ".", "Add", "(", "oDrawingView", ", ", "oPlacementPoint", ")", "     ", "   ", "minXpoint", "=", "oSheet", ".", "TitleBlock", ".", "RangeBox", ".", "MinPoint", ".", "x", "minYpoint", "=", "oSheet", ".", "TitleBlock", ".", "RangeBox", ".", "MaxPoint", ".", "Y", "maxXpoint", "=", "oPlacementPoint", ".", "x", "dPointx", "=", "oSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", ".", "RangeBox", ".", "MinPoint", ".", "X", "-", "minXpoint", "dPointY", "=", "oSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", ".", "RangeBox", ".", "MinPoint", ".", "Y", "-", "minYpoint", "maxYpoint", "=", "oPlacementPoint", ".", "Y", "-", "dPointY", "    ", "Dim", "newmin", ", ", "newmax", "As", "Point2d", "newmin", "=", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "minXpoint", ", ", "minYpoint", ")", "newmax", "=", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", "(", "maxXpoint", ", ", "maxYpoint", ")", "oSheet", ".", "PartsLists", ".", "Item", "(", "1", ")", ".", "Delete", "oPartsList", "=", "oSheet", ".", "PartsLists", ".", "Add", "(", "oDrawingView", ", ", "newmax", ")"], "author": "ZdenkoS"},
{"created at": [], "solution Title": "\n                        Re: Apprentice AddFileToSave Failure\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Trying to get image of ContentTreeViewNode.Icon\n                    ", "solution": [" [DllImport(\n    \"oleaut32.dll\",\n    EntryPoint = \"OleSavePictureFile\",\n    ExactSpelling = true,\n    PreserveSig = false,\n    SetLastError = true)]\npublic static extern void OleSavePictureFile(\n    stdole.IPictureDisp Picture,\n    [MarshalAs(UnmanagedType.BStr)] string filename);\n\nvoid SavePic(stdole.IPictureDisp pic, string dest)\n{\n    string filename = System.IO.Path.GetTempFileName();\n\n    OleSavePictureFile(pic, filename);\n\n    System.Drawing.Image img = System.Drawing.Image.FromFile(\n        filename, true);\n\n    img.Save(dest,\n        System.Drawing.Imaging.ImageFormat.Png);\n\n    // exception temp file in use ...\n    //System.IO.File.Delete(filename);\n}\n\npublic void Activate(", "    Inventor.ApplicationAddInSite addInSiteObject, ", "    bool firstTime)\n{\n    m_inventorApplication = addInSiteObject.Application;\n\n    PartDocument doc = m_inventorApplication.ActiveDocument as PartDocument;\n\n    var feature = doc.ComponentDefinition.Features[1];\n\n    var def = doc.BrowserPanes.GetNativeBrowserNodeDefinition(feature);\n\n    stdole.IPictureDisp pic = def.Icon;\n\n    SavePic(pic, @\"C:\\Temp\\icon.png\");\n}"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: FindUsingVector in VB.NET\n                    ", "solution": ["Sub FindUsingVector_Test\n  Try\n    Dim oApp As Application = GetObject(, \"Inventor.Application\")\n\n    Dim oPartDoc As PartDocument\n    oPartDoc = oApp.ActiveDocument\n\n    Dim oTG As TransientGeometry\n    oTG = ThisApplication.TransientGeometry\n  \n    Dim oPoint As Point \n    oPoint = oTG.CreatePoint()\n \n    Dim oUV As UnitVector \n    oUV = oTG.CreateUnitVector(0, 0, 1) \n\n    Dim oFilter(0) As SelectionFilterEnum\n    oFilter(0) = SelectionFilterEnum.kPartFaceFilter    \n\n    ' a) Early-binding: if you use this then\n    ' FindUsingVector will throw a DISP_E_BADCALLEE error\n    'Dim oPartDef As PartComponentDefinition\n    ' b) Late-binding: if you use this then\n    ' FindUsingVector works fine\n    Dim oPartDef As Object\n    oPartDef = oPartDoc.ComponentDefinition  \n\n    ' In case of early-binding this throws DISP_E_BADCALLEE error\n    oPartDef.FindUsingVector(oPoint, oUV, oFilter) \n  Catch ex As Exception\n    MsgBox(ex.Message) \n  End Try\nEnd Sub\n"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Ilogic rule: replace character in string\n                    ", "solution": [], "author": "humberto"},
{"created at": [], "solution Title": "\n                        Re: Applying asset to client feature - client graphics failure\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: VBA - Prompt User for Selection\n                    ", "solution": [], "author": "rogmitch"},
{"created at": [], "solution Title": "\n                        Re: VBA Save and replace all instances of a part\n                    ", "solution": ["Public Sub Save_Replace_All()\n    'Checks if open document is assembly\n    If (ThisApplication.ActiveDocument.DocumentType <> kAssemblyDocumentObject) Then\n        MsgBox \"This is NOT an assembly document!\", vbExclamation\n        Exit Sub\n    End If\n    \n    Dim oPart As ComponentOccurrence\n    Dim opartdoc As Document\n    Dim oPartdoc2 As Document\n    Dim NewFileName As String\n    Dim NewFilePath As String\n    \n    Set oPart = ThisApplication.CommandManager.Pick(kAssemblyOccurrenceFilter, \"Select the part to save and replace all.\")\n    Set opartdoc = oPart.Definition.Document\n        \n    NewFileName = InputBox(\"What is the new file name for \" & filename_noext(opartdoc.FullFileName) & \"?\", \"New File Name\", filename_noext(opartdoc.FullFileName))\n    NewFilePath = ThisApplication.FileLocations.Workspace & \"\\\" & NewFileName & \".\" & file_ext(opartdoc.FullFileName)\n    \n    If (fileExists(NewFilePath)) Or (NewFileName = \"\") Then\n        MsgBox (\"Error! Either file exists or no filename given\")\n        Exit Sub\n    End If\n\n    Call opartdoc.SaveAs(NewFilePath, True)\n\n    Dim fd As DocumentDescriptor\n    For Each fd In ThisApplication.ActiveEditDocument.ReferencedDocumentDescriptors\n        If (fd.FullDocumentName = opartdoc.FullFileName) Then fd.ReferencedFileDescriptor.ReplaceReference (NewFilePath)\n    Next\nEnd Sub"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: File Browser in VBA Editor\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Check if BOM Dialog is Open\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: ThisApplication in vb.net on 3rd level\n                    ", "solution": ["Public Class myModule\n  Private Sub mySub1(ByVal InventorApp As Inventor.Application)\n    mySub2(InventorApp, \"ABC\")\n  End Sub\n\n  Private Sub mySub2(ByVal InventorApp As Inventor.Application, ByVal Text As String)\n    MsgBox(InventorApp.Caption & Text)\n  End Sub\nEnd Class"], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: Isolate part: iLogic or VBA command?\n                    ", "solution": ["'isolate currently selected parts\nrun_cmd(\"AssemblyIsolateCmd\")\n\n'undo isolation\nrun_cmd(\"AssemblyIsolateundoCmd\")\n\n'function to run commands\nFunction Run_CMD(ByVal cmd As String) As Boolean\n    ' Get the CommandManager object.\n    Dim oCommandMgr As CommandManager\n    Set oCommandMgr = ThisApplication.CommandManager\n\n    ' Get control definition for the line command.\n    Dim oControlDef As ControlDefinition\n    Set oControlDef = oCommandMgr.ControlDefinitions.Item(cmd)\n    ' Execute the command.\n    Call oControlDef.Execute\nEnd Function"], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: create my browser in inventor\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: 16x16 icons showing as 1/4 of the 32x32 icons\n                    ", "solution": ["Dim mIPictureDisp2 As IPictureDisp = PictureDispConverter.ToIPictureDisp (New System.Drawing.Icon(My.Resources.wbTest, 16, 16))"], "author": "djreesing"},
{"created at": [], "solution Title": "\n                        Re: Talking to Inventor from VBA \"Replace Component\"\n                    ", "solution": [], "author": "earlgreyspartan"},
{"created at": [], "solution Title": "\n                        Re: Passing a string argument from VBA to iLogic.\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: IDW: select all file occurences in current view\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Protect iLogic-form from entering wrong entry/parameter\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: iLogic material update\n                    ", "solution": [], "author": "ChristinaForest"},
{"created at": [], "solution Title": "\n                        Re: Can you distinguish Cropped views from sketch views?\n                    ", "solution": [], "author": "mslosar"},
{"created at": [], "solution Title": "\n                        Re: Balloon Properties\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Automating Inventor Buttons?\n                    ", "solution": [], "author": "alyssaweaver"},
{"created at": [], "solution Title": "\n                        Re: Place iLogic components; renamed files are deleted\n                    ", "solution": [], "author": "ygingras"},
{"created at": [], "solution Title": "\n                        Re: Project sketch onto curved surface\n                    ", "solution": ["' This sample demonstrates several new curve creation techniques", "' introduced in Inventor 2014. It creates a new part and then ", "' create a 2d control point spline and a 2d equation curve.\n' Surfaces are created from these two curves by extruding them.  ", "' A 3d intersection curve is created between the extrusions.", "\nPublic Sub SketchCurves()\n\n    ' Create a new part.\n    Dim partDoc As PartDocument\n    Set partDoc = _\n        ThisApplication.Documents.Add( _\n            kPartDocumentObject, _\n            ThisApplication.FileManager.GetTemplateFile(kPartDocumentObject))\n                  \n    Dim partDef As PartComponentDefinition\n    Set partDef = partDoc.ComponentDefinition\n                  \n    ' Create a 2D sketch on the X-Y plane.\n    Dim sketch1 As PlanarSketch\n    Set sketch1 = partDef.Sketches.Add(partDef.WorkPlanes.item(3))\n    \n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n    \n    ' Create a spline based on control points.\n    Dim pnts As ObjectCollection\n    Set pnts = ThisApplication.TransientObjects.CreateObjectCollection\n    Call pnts.Add(tg.CreatePoint2d(2, 0))\n    Call pnts.Add(tg.CreatePoint2d(4, 1))\n    Call pnts.Add(tg.CreatePoint2d(4, 2))\n    Call pnts.Add(tg.CreatePoint2d(6, 3))\n    Call pnts.Add(tg.CreatePoint2d(8, 1))\n    \n    Dim controlPointSpline As SketchControlPointSpline\n    Set controlPointSpline = sketch1.SketchControlPointSplines.Add(pnts)\n    \n    ' Create a 2D sketch on the Y-Z plane.\n    Dim sketch2 As PlanarSketch\n    Set sketch2 = partDef.Sketches.Add(partDef.WorkPlanes.item(1))\n    \n    ' Create a spline based on an equation.\n    Dim equationCurve As SketchEquationCurve\n    Set equationCurve = sketch2.SketchEquationCurves.Add(kParametric, kCartesian, _\n                                \".001*t * cos(t)\", \".001*t * sin(t)\", 0, 360 * 3)\n                                \n                            \n    ThisApplication.ActiveView.Fit\n    \n    ' Extrude the 2d curves.\n    Dim prof As profile\n    Set prof = sketch1.Profiles.AddForSurface(controlPointSpline)\n    Dim extrudeDef As ExtrudeDefinition\n    Set extrudeDef = partDef.features.ExtrudeFeatures.CreateExtrudeDefinition(prof, kSurfaceOperation)\n    Call extrudeDef.SetDistanceExtent(6, kSymmetricExtentDirection)\n    Dim extrude1 As ExtrudeFeature\n    Set extrude1 = partDef.features.ExtrudeFeatures.Add(extrudeDef)\n    \n    ' Change the work surface to not be transparent.\n    Dim surf As worksurface\n    Set surf = extrude1.SurfaceBodies.item(1).Parent\n    surf.Translucent = False\n    \n    Set prof = sketch2.Profiles.AddForSurface(equationCurve)\n    Set extrudeDef = partDef.features.ExtrudeFeatures.CreateExtrudeDefinition(prof, kSurfaceOperation)\n    Call extrudeDef.SetDistanceExtent(9, kPositiveExtentDirection)\n    Dim extrude2 As ExtrudeFeature\n    Set extrude2 = partDef.features.ExtrudeFeatures.Add(extrudeDef)\n    \n    ' Create a new sketch and an intersection curve.\n    Dim interSketch As sketch3d\n    Set interSketch = partDef.Sketches3D.Add\n    \n    Call interSketch.IntersectionCurves.Add(extrude1.SurfaceBodies(1), extrude2.SurfaceBodies(1))\n    \nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Link Resolve Brainstorming / Efficiency\n                    ", "solution": [], "author": "alyssaweaver"},
{"created at": [], "solution Title": "\n                        Re: Crash on CurveEvaluator.GetStrokes and Edge.CalculateStrokes\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule from Part to change .idw TitleBlocks\n                    ", "solution": [], "author": "Garrett.Sudicky"},
{"created at": [], "solution Title": "\n                        Re: link excel file to inventor with vb.net\n                    ", "solution": [], "author": "Burnit87"},
{"created at": [], "solution Title": "\n                        Re: iLogic Crash on Vault Check-in\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic Triggers\n                    ", "solution": [], "author": "b.mccarthy"},
{"created at": [], "solution Title": "\n                        Re: ReferencedDocumentDescriptor.ReferencedDocument doesn't do the trick\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: AddButtonPopup versus AddSplitButtonMRU\n                    ", "solution": ["CommandControl cmdCtrl = null;\n\nControlDefinition oCtrlDef1 = m_inventorApplication.CommandManager.ControlDefinitions[\"AppAddInManagerCmd\"];\nControlDefinition oCtrlDef2 = m_inventorApplication.CommandManager.ControlDefinitions[\"AppVBAEditorCmd\"];\nControlDefinition oCtrlDef3 = m_inventorApplication.CommandManager.ControlDefinitions[\"AppApplicationOptionsCmd\"];\n\ncmdCtrl = oPanel.CommandControls.AddButton(mButtonDef as ButtonDefinition, true, true, \"\", true);\n\ncmdCtrl = oPanel.CommandControls.AddComboBox(mComboDef, cmdCtrl.InternalName, false);\n\nObjectCollection collec =\n    m_inventorApplication.TransientObjects.CreateObjectCollection(null);\n\ncollec.Add(oCtrlDef1);\ncollec.Add(oCtrlDef2);\ncollec.Add(oCtrlDef3);\n\n//oPanel.CommandControls.AddButtonPopup(collec, true, true, \"\", false);\n\noPanel.CommandControls.AddSeparator(\"\", false);\n\n//!!You can't create a split button that has as its first control \n//that uses an internal name that's the same as another in that panel\noPanel.CommandControls.AddSplitButtonMRU(collec,\n    true,\n    true,\n    cmdCtrl.InternalName,\n    false);"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: iLogic Export BOM to specific folder?\n                    ", "solution": ["Dim oDoc As AssemblyDocument", "oDoc = ThisApplication.ActiveDocument", "'activate the Master LOD ", "Dim oACDef As AssemblyComponentDefinition", "oACDef = oDoc.ComponentDefinition", "oACDef.RepresentationsManager.LevelOfDetailRepresentations(\"Master\").Activate", "'set a reference to the BOM\u00a0\u00a0\u00a0 \u00a0", "Dim oBOM As BOM", "oBOM = oDoc.ComponentDefinition.BOM", "'get the Path", "Dim sPath As String\u00a0 \u00a0", "sPath = ThisDoc.Path ", "'set the folder to save to", "Dim sFolder as String", "sFolder = Left(sPath, InStrRev(sPath, \"\\\")) & \"TAKE-OFF\"", "'check for the folder and create it if it does not exist", "If Not System.IO.Directory.Exists(sFolder) Then", "System.IO.Directory.CreateDirectory(sFolder)", "End If", "'make sure that the parts only view is enabled. ", "oBOM.PartsOnlyViewEnabled = True", "'set a reference to the \"Parts Only\" BOMView \u00a0", "Dim oBOMView As BOMView", "oBOMView = oBOM.BOMViews.Item(\"Parts Only\")", "'export the BOM\u00a0\u00a0 \u00a0", "oBOMView.Export (sFolder & \"\\\" & _", "ThisDoc.FileName(False) & \".xls\", kMicrosoftExcelFormat)", "'tell the user where the file was created", "MessageBox.Show(\"BOM exported to: \" _", "& vblf & sFolder, \"iLogic\")", "'open the folder where the new file is saved", "Shell(\"explorer.exe \" & sFolder ,vbNormalFocus)"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: equation curve by iLogic\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: accessing hidden partlistrows\n                    ", "solution": ["Dim hiddenRowCnt As Long\nDim visibleRowCnt As Long\nDim dwgDoc As DrawingDocument\nDim prtList As PartsList\n\ndwgDoc = ThisDoc.Document\nIf dwgDoc.ActiveSheet.PartsLists.Count > 0 Then\n\tprtList = dwgDoc.ActiveSheet.PartsLists.Item(1)\n\tDim prtListRow As PartsListRow\n\tFor Each prtListRow In prtList.PartsListRows\n\t\tIf prtListRow.Visible Then\n\t\t\tvisibleRowCnt = visibleRowCnt + 1\n\t\tElse\n\t\t\thiddenRowCnt = hiddenRowCnt + 1\n\t\tEnd If\n\tNext\n\tMessageBox.Show(String.Format(\"Rows:\" + vbCrLf + \"Hidden: {0}\" + vbCrLf + \"Visible: {1}\", hiddenRowCnt, visibleRowCnt))\nEnd If"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Face used to create a plane\n                    ", "solution": ["For Each oWorkPlane In oPartCompDef.WorkPlanes\n                            If oWorkPlane.DrivenBy.Count <> 0 Then\n                                If oWorkPlane.DrivenBy.Item(2) Is oFace Then\n                                    Createplane = False\n                                    PlaneCreated = False\n                                End If\n                            End If\n                        Next\n                        If Createplane = True Then\n                            Set newPlane = oPartCompDef.WorkPlanes.AddByPlaneAndOffset(oFace, 0)\n                            Set normal = GetNormal(newPlane)\n                            PlaneCreated = True\n                        End If\n                    End If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Finding the endpoints of a selected set of Sketch Entities\n                    ", "solution": ["Public Sub PathTest()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument\n    \n    Dim skEnt As SketchEntity\n    Set skEnt = ThisApplication.CommandManager.Pick(kSketchCurveFilter, \"Select sketch curve\")\n    \n    Dim startPoint As SketchPoint\n    Dim endPoint As SketchPoint\n    \n    If GetEndPointsOfPath(skEnt, startPoint, endPoint) = True Then\n        Dim hs As HighlightSet\n        Set hs = partDoc.CreateHighlightSet\n    \n        hs.AddItem startPoint\n        hs.AddItem endPoint\n    \n        MsgBox \"Test\"\n        hs.Clear\n    End If\nEnd Sub\n\n\n\n\nPublic Function GetEndPointsOfPath(ByVal SeedCurve As SketchEntity, ByRef Point1 As SketchPoint, ByRef Point2 As SketchPoint) As Boolean\n    On Error GoTo ErrorFound\n    \n    Dim partDef As PartComponentDefinition\n    Set partDef = SeedCurve.Parent.Parent\n    \n    Dim pth As Path\n    Set pth = partDef.Features.CreatePath(SeedCurve)\n    \n    Dim pathEnt As PathEntity\n    Set pathEnt = pth.Item(1)\n    If pathEnt.SketchEntity.StartSketchPoint.AttachedEntities.Count = 1 Then\n        Set Point1 = pathEnt.SketchEntity.StartSketchPoint\n    Else\n        Set Point1 = pathEnt.SketchEntity.EndSketchPoint\n    End If\n    \n    Set pathEnt = pth.Item(pth.Count)\n    If pathEnt.SketchEntity.StartSketchPoint.AttachedEntities.Count = 1 Then\n        Set Point2 = pathEnt.SketchEntity.StartSketchPoint\n    Else\n        Set Point2 = pathEnt.SketchEntity.EndSketchPoint\n    End If\n    \n    GetEndPointsOfPath = True\n    Exit Function\n    \nErrorFound:\n    If Err Then\n        GetEndPointsOfPath = False\n        Exit Function\n    End If\nEnd Function"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: UpdateFromGlobal for Materials\n                    ", "solution": [], "author": "VGonsalves"},
{"created at": [], "solution Title": "\n                        Re: OnNew Work Feature Event\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: Bug? Seting Sheet.Height value actually sets Sheet.Width\n                    ", "solution": ["With oSheet\n        If docHeight > docWidth Then\n            .Orientation = kPortraitPageOrientation\n            .Height = docHeight\n            .Width = docWidth\n            \n        Else\n            .Orientation = kLandscapePageOrientation\n            .Width = docWidth\n            .Height = docHeight\n        End If\n    End With"], "author": "c.silby"},
{"created at": [], "solution Title": "\n                        Re: Save drawing document as AutoCAD dwg\n                    ", "solution": [], "author": "sthambir"},
{"created at": [], "solution Title": "\n                        Re: iLogic Generator(?) Instead of Configurator\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Removing Characters from Part Number\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: How to add a &quot;PopupButton&quot; in OnLinearMarkingMenu\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: ACCESS violation during invApplication.Documents.Open\n                    ", "solution": [], "author": "p.rybar"},
{"created at": [], "solution Title": "\n                        Re: custom property columns  Bill of Material\n                    ", "solution": [], "author": "santoshr0114"},
{"created at": [], "solution Title": "\n                        Re: Flange Feature bend radius though API\n                    ", "solution": [], "author": "cadsupport"},
{"created at": [], "solution Title": "\n                        Re: iLogic to change Design State\n                    ", "solution": [], "author": "lesmfunk"},
{"created at": [], "solution Title": "\n                        Re: Problem with ilogic and paramters\n                    ", "solution": ["ilength = Length\niwidth = Width\niheight = Height"], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Assembly Browsernode Constraint Relationships Reoder? (VB.NET)\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Problem Installing SDK Development tools\n                    ", "solution": [], "author": "mslosar"},
{"created at": [], "solution Title": "\n                        Re: Feature Information Extent ToNext References\n                    ", "solution": ["If TypeOf toExt.ToEntity Is Faces Then\n                Dim f As Face\n                For Each f In toExt.ToEntity\n                    Call oHightlightSetNew.AddItem(f)\n                    Call doc.SelectSet.Select(f)\n                Next\n            Else\n                Call oHightlightSetNew.AddItem(toExt.ToEntity)\n                Call doc.SelectSet.Select(toExt.ToEntity)\n            End If"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: ClientFeature in Weldment\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Select all parts in assembly and change iproperty\n                    ", "solution": ["Dim AsmCompDef As AssemblyComponentDefinition \nAsmCompDef= ThisApplication.ActiveDocument.ComponentDefinition\nDim openDoc As Document\nopenDoc = ThisDoc.Document\nDim docFile As Document\nDim FNamePos As Long\nDim docFName As String\nDim oDesignState As Integer\noDesignState = iProperties.Value(\"Status\", \"Design State\")\n\tFor Each docFile In openDoc.AllReferencedDocuments\n\t\t\tFNamePos = InStrRev(docFile.FullFileName, \"\\\", -1)                    \n \t\t\tdocFName = Right(docFile.FullFileName, Len(docFile.FullFileName) - FNamePos)\n\t\t\tiProperties.Value(docFName, \"Status\", \"Design State\")= oDesignState\n\t\tInventorVb.DocumentUpdate()\n\tNext\nReturn\niLogicVb.UpdateWhenDone = True "], "author": "Ktomberlin"},
{"created at": [], "solution Title": "\n                        Re: Inventor ETO\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: iLogic to create True/False User Parameter\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Inventor 32bits and 64bits API\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: frame generator components not suppressing, ilogic\n                    ", "solution": [], "author": "SSmith1247"},
{"created at": [], "solution Title": "\n                        Re: Inventor Drawing => Barcode => Export PDF\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Use Inventor 2015 API with VStudio2010\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Activate the \"Master\" view of a part\n                    ", "solution": ["Sub Part_Switch2ViewMaster()\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  \n  Dim oDef As PartComponentDefinition\n  Set oDef = oDoc.ComponentDefinition\n  \n  Dim oRepMgr As RepresentationsManager\n  Set oRepMgr = oDef.RepresentationsManager\n  \n  Dim oViewReps As DesignViewRepresentations\n  Set oViewReps = oRepMgr.DesignViewRepresentations\n  \n  Dim oView As DesignViewRepresentation\n  Set oView = oRepMgr.ActiveDesignViewRepresentation\n  MsgBox (oView.Name)\n  \n  Set oView = oViewReps.Item(\"Master\")\n  oView.Activate\n  MsgBox (oView.Name)\n\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Open .iam in project folder ilogic?\n                    ", "solution": ["ThisDoc.Path", "ThisDoc.WorkspacePath()", "Dim fullName1 As String\nfullName1 = ThisDoc.Path & \"\\\" & \"DETAIL B 26310C.iam\"\nThisApplication.Documents.Open(fullName1, True)", "MessageBox.Show(\"Doc Path: \" & ThisDoc.Path & VbCrLf & \"Workspace Path: \" & ThisDoc.WorkspacePath)", "Dim fullName as String\nfullName = ThisDoc.WorkspacePath & \"\\shell outer _ 26310c rev - (Ilogic)\\DETAIL B 26310C.iam\"", "ThisApplicationDocuments.Open(fullName, True)", "Dim fullName as String\nfullName = ThisDoc.Path & \"\\DETAIL B 26310C.iam\"\nThisApplicationDocuments.Open(fullName, True)"], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Scaling after parts are bigger or smaller\n                    ", "solution": ["'setscale to 0,8 if you want to make drawings smaller 1,25 if you want them bigger\nscale=iProperties.Value(\"Custom\", \"scale\")\nscale=Replace(scale,\",\",\".\")\nscale_v=Val(scale)\nDrawings=ThisApplication.ActiveDocument.ActiveSheet.DrawingViews\nFor Each DV In Drawings\nDV.Scale=DV.Scale*scale_v\nNext DV\nInventorVb.DocumentUpdate()", "'setscale to 0,8 if you want to make drawings smaller 1,25 if you want them bigger\nscale=iProperties.Value(\"Custom\", \"scale\")\nscale=Replace(scale,\",\",\".\")\nscale_v=Val(scale)\n\nDrawings=ThisApplication.ActiveDocument.ActiveSheet.DrawingViews\nFor Each DV In Drawings\n  Try\n    DV.Scale=DV.Scale*scale_v\n  Catch\n    MessageBox.Show(DV.Name, \"Drawing View Name\")\n  End Try\nNext DV\n\nInventorVb.DocumentUpdate()", "scale=InputBox(\"New view scale\", \"Specify Scale\", \"1.0\")", "' in case of \"Cancel\" the scale would be empty\nIf scale <> \"\" Then\n  scale=Replace(scale,\",\",\".\")\n  scale_v=Val(scale)\n\n  Drawings=ThisApplication.ActiveDocument.ActiveSheet.DrawingViews\n  For Each DV In Drawings\n    Try\n      DV.Scale=scale_v\n    Catch\n      'MessageBox.Show(DV.Name, \"Drawing View Name\")\n    End Try\n  Next DV\n\n  InventorVb.DocumentUpdate()\nEnd If"], "author": "eljoseppo"},
{"created at": [], "solution Title": "\n                        Re: iLogic, comparing one list against another\n                    ", "solution": ["'%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n' === Generator rule ===\n\n'==========================================\n'This rule Main() creates new trigger rule that is initiated by the\n'all desired parameters changes (model or user)\n'It is convenient to fire this rule by the event BeforeSave\n'==========================================\n\nSub Main()\n\n  'name of trigger rule\n  Dim TriggerRuleName As String = \"MyTrigger\"\n  'name of the rule that should be initiated by the trigger rule\n  Dim FiredRuleName As String = \"MAIN_RULE\"\n\n  'reference to iLogic Automation object\n  Dim iLogicAuto As Object  = iLogicVb.Automation\n  \n  'current document \n  Dim oDoc As Inventor.Document = ThisDoc.Document\n  \n'  Create the trigger rule in auto mode\n  Dim oRule As Object = iLogicAuto.GetRule(oDoc, TriggerRuleName)\n  Dim sText As String = \"'create the rule on-the-fly\"\n  'if the rule TriggerRuleName is absent then create it\n  If oRule Is Nothing Then \n    oRule = iLogicAuto.AddRule(oDoc, TriggerRuleName, sText)\n  End If\n  \n  sText = CreateRuleText(oDoc, FiredRuleName)  \n  If sText Is Nothing Then\n\tMessageBox.Show(\"Active document has not key parameters\", _\n\t\t\"Generator\", MessageBoxButtons.OK, MessageBoxIcon.Error)\n  Else\n\toRule.Text = sText\n\toDoc.Save  \t\n\tCall iLogicAuto.RunRule(oDoc, TriggerRuleName)\n  End If  \nEnd Sub 'Main\n\n\n         \nFunction CreateRuleText( _\n              ByVal oDoc As Inventor.Document, _\n              ByVal FiredRuleName As String) As String\n  'get the list of key parameters\n  Dim oColl As Collection = GetParametersList(oDoc)\n  \n  If oColl.Count = 0 Then\n\tReturn Nothing\n  End If\n  \n''DummyVar = Cross _\n''         & vbNewLine & CrossThickness _\n''         & vbNewLine & material _\n''         & vbNewLine & Ready _\n''         & vbNewLine & InitialLength\n\n  Dim sText As String\n  sText = \"'Automatically generated trigger rule\" & vbNewLine\n  sText = sText & \"DummyVar = \"\n  If oColl.Count = 1 Then\n    sText = sText & oColl.Item(1).tostring \n  Else    \n\tFor i As Integer = 1 To oColl.Count\n\t\tDim St As String = oColl.Item(i).tostring\n\t\tIf i = 1 Then\n\t\tsText = sText & St & \" _\"\n\t\tElseIf i < oColl.Count Then\n\t\tsText = sText & vbNewLine & \"        & vbNewLine & \" & St & \" _\"\n\t\tElse\n\t\tsText = sText & vbNewLine & \"        & vbNewLine & \" & St\n\t\tEnd If\n\tNext\n  End If\t\n  Return sText & vbNewLine & \"iLogicVb.RunRule(\"\"\" & FiredRuleName & \"\"\")\"\nEnd Function 'CreateRuleText\n\n\nFunction GetParametersList(ByRef oDoc As Inventor.Document) As Collection\n  'creates the list of parameters that must trigger the rule\n  'Criteria is up to you.\n  'In this sample all key parameters are included in the list\n  \n  Dim oColl As New Collection\n  Dim oPar As Inventor.Parameter\n  For Each oPar In oDoc.ComponentDefinition.Parameters\n    If oPar.IsKey Then oColl.Add (oPar.Name)\n  Next\n  Return oColl\nEnd Function 'GetParametersList\n", "'%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n' === MyTrigger ===\n\n'Automatically generated trigger rule\nDummyVar = InputLength _\n        & vbNewLine & Ready _\n        & vbNewLine & Color\niLogicVb.RunRule(\"MAIN_RULE\")"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: code for catching error if the material doesnt exist\n                    ", "solution": ["Public Sub Material_Add()\n    Dim oPartDoc As PartDocument\n    Set oPartDoc = ThisApplication.ActiveDocument\n    \n    Dim oPartCompDef As PartComponentDefinition\n    Set oPartCompDef = oPartDoc.ComponentDefinition\n    \n    Dim oMaterial As material\n    Set oMaterial = oPartCompDef.material\n    \n    Dim strMaterial As String\n    strMaterial = oMaterial.Name\n       \n    On Error Resume Next\n    oMaterial.SaveToGlobal\n    \n    If Err.Number <> 0 Then\n        MsgBox (\"Material \" & strMaterial & \"already exists in Library\")\n        Err.Clear\n        Exit Sub\n    Else\n        MsgBox (\"Material \" & strMaterial & \"Added to Library\")\n    End If\n    \nEnd Sub"], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: How can you pass a variable from one addin to another using vb.net\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Work Point Proxy Type Mismatch\n                    ", "solution": ["Dim oOcc1 As ComponentOccurrence\noOcc1 = oCurrAssy.Occurrences.Item(1)\n' ...............\nDim oOcc2 As ComponentOccurrence\noOcc2 = oCurrAssy.Occurrences.Item(1)"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic to Rename Browser Nodes\n                    ", "solution": ["Sub", " ", "Main", "()", "\n\n", "'", "Grab the Assembly Document", "Dim", " ", "oDoc", " ", "As", " ", "AssemblyDocument", "\n", "oDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n\n", "'", "Grab the Active Assembly Component Definition", "Dim", " ", "oAsmCompDef", " ", "As", " ", "AssemblyComponentDefinition", "\n", "oAsmCompDef", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", "\n\n", "'", " Get the model browser", "Dim", " ", "oPane", " ", "As", " ", "BrowserPane", "\n", "oPane", " ", "=", " ", "oDoc", ".", "BrowserPanes", ".", "Item", "(", "\"", "Model", "\"", ")", "\n\n", "'", " Grab the occurrence of the object", "\n    ", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", "\n    ", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "oDoc", ".", "ComponentDefinition", ".", "Occurrences", "\n\n    ", "'", "Grab Document from Occurrence", "    ", "    Dim", " ", "oOccDoc", " ", "As", " ", "Document", "\n    ", "oOccDoc", " ", "=", " ", "oOcc", ".", "Definition", ".", "Document", "\n    \n    ", "'", "get design properties set'", "    ", "    Dim", " ", "invDesignInfo", " ", "As", " ", "PropertySet", "\n    ", "invDesignInfo", " ", "=", " ", "oOccDoc", ".", "PropertySets", ".", "Item", "(", "\"", "Design Tracking Properties", "\"", ")", "\n    \n    ", "'", " Get the part number property.", "    ", "Dim", " ", "invPartNumberProperty", " ", "As", " ", "Inventor", ".", "Property", "\n    ", "invPartNumberProperty", " ", "=", " ", "invDesignInfo", ".", "Item", "(", "\"", "Part Number", "\"", ")", "\n\n    ", "'", " Get the browser node that corresponds to the new item", "    ", "Dim", " ", "oSubAssyNode", " ", "As", " ", "BrowserNode", "\n    ", "oSubAssyNode", " ", "=", " ", "oPane", ".", "GetBrowserNodeFromObject", "(", "oOcc", ")", "\n\n    ", "If", " ", "oSubAssyNode", ".", "NativeObject", ".", "Name", " ", "<>", " ", "invPartNumberProperty", ".", "Value", " ", "Then", "\n        ", "'", "Set The name", "        ", "        oSubAssyNode", ".", "NativeObject", ".", "Name", " ", "=", " ", "(", "invPartNumberProperty", ".", "Value", ")", "\n    ", "End", " ", "If", "\n\n", "Next", "\n", "End Sub"], "author": "kakers"},
{"created at": [], "solution Title": "\n                        Re: Macros / VBA Editor button not working\n                    ", "solution": [], "author": "ADNpati"},
{"created at": [], "solution Title": "\n                        Re: codes for grayed out  particular option in ilogicforms\n                    ", "solution": [], "author": "JoAnn_Hogan"},
{"created at": [], "solution Title": "\n                        Re: Open document according to \"Parts only\" BOM\n                    ", "solution": ["  Private Sub PartsListFromBOM()\n\n    'Assembly Document must be opened in LoD \"Master\" !\n    Dim oAssyDoc As AssemblyDocument _\n          = TryCast(oApp.ActiveDocument, AssemblyDocument)\n    Dim oAssyDef As AssemblyComponentDefinition _\n          = oAssyDoc.ComponentDefinition\n    Dim oBOM As BOM = oAssyDef.BOM\n\n    'enable BOM view \"Parts only\"\n    oBOM.PartsOnlyViewEnabled = True\n\n    'get the reference to the BOM view \"Parts only\"\n    Dim oBOMView As BOMView = Nothing\n    For Each oBOMView In oBOM.BOMViews\n      If oBOMView.ViewType = BOMViewTypeEnum _\n            .kPartsOnlyBOMViewType Then Exit For\n    Next\n\n    If oBOMView IsNot Nothing Then\n      For Each oBomRow As BOMRow In oBOMView.BOMRows\n        Dim oDef As ComponentDefinition _\n            = oBomRow.ComponentDefinitions.Item(1)\n        If TypeOf oDef Is PartComponentDefinition Then\n          Dim oPartDoc As PartDocument _\n              = CType(oDef.Document, PartDocument)\n          'now we have the reference to the part \n          'document and can do someting useful\n          Debug.Print(oPartDoc.FullFileName)\n        End If\n      Next\n    End If\n\n  End Sub", "Dim oAssyDoc As AssemblyDocument _\n      = TryCast(oApp.ActiveDocument, AssemblyDocument)\nFor Each oDoc As Inventor.Document In oAssyDoc.AllReferencedDocuments\n  If oDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n    Debug.Print(oDoc.FullFileName)\n  End If\nNext"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Sketch AddWithOrientation in an assembly\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Workpoint on midpoint of a curve/curved edge\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Parallel threading in iLogic\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: ilogic oPath in workgroup!\n                    ", "solution": ["Dim oDocument As Inventor.DrawingDocument\noDocument = ThisApplication.ActiveDocument\n\n'find workgroup\nDim asNames() As String = {}\nDim asPaths() As String = {}\nDim iNumWorkgroups As Long\nThisApplication.FileLocations.Workgroups(iNumWorkgroups, asNames, asPaths)\n\nIf iNumWorkgroups = 0 Then\nMessageBox.Show(\"No Workgroups are defined in the current project.\", \"iLogic\")\nReturn\nEnd If\n\n'Save PDF with options\nPDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n'set PDF options\nIf PDFAddIn.HasSaveCopyAsOptions(oDataMedium, oContext, oOptions) Then\noOptions.Value(\"Remove_Line_Weights\") = 1\noOptions.Value(\"Vector_Resolution\") = 400\noOptions.Value(\"Sheet_Range\") = Inventor.PrintRangeEnum.kPrintAllSheets\nEnd If\n\n'set document name\ndocName = ThisDoc.FileName(False) 'without extension\n\n'Set the destination file name\noDataMedium.FileName = asPaths(0) & \"\\\" & docName  & \".pdf\"\n\n'Publish document.\nCall PDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\n\nMessageBox.Show(\"PDF saved to: \" & oDataMedium.FileName, \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Renew thumbnails for Inventor\n                    ", "solution": ["Sub test()\n    \n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.activeDocument\n    \n    Dim view As view\n    Set view = ThisApplication.ActiveView\n    \n    Dim camera As camera\n    Set camera = view.camera\n    \n    camera.ViewOrientationType = kRightViewOrientation\n    \n    camera.Fit\n    camera.Apply\n    \n    oDoc.SetThumbnailSaveOption kActiveWindowOnSave\n    oDoc.Save\n    \nEnd Sub", "Public Function ChangeThumbnail(FullFileName As String) \n\n' Set a reference to the active document \nDim odoc As Document \nSet odoc = ThisApplication.ActiveDocument \n\n' Get the \"Summary Information\" property set \nDim oPropSet As propertySet \nSet oPropSet = odoc.propertySets(\"{F29F85E0-4FF9-1068-AB91-08002B27B3D9}\") \n\n' Get the \"Thumbnail\" property \nDim oProp As Property \nSet oProp = oPropSet.ItemByPropId(17) \n\nDim oDisp As IPictureDisp \nSet oDisp = LoadPicture(FullFileName) \n\n' Set the value of the thumbnail file property \noProp.value = oDisp \n\n' Save the document \nodoc.Save \n\nEnd Function "], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Printing with VB .Net\n                    ", "solution": [" Private Sub oButtonAutoPrint_OnExecute(Context As Inventor.NameValueMap) Handles oButtonAutoPrint.OnExecute\n            Try\n                Dim oDoc As Inventor.DrawingDocument\n                oDoc = m_inventorApplication.ActiveDocument\n\n                Dim oSheet As Inventor.Sheet\n                oSheet = oDoc.ActiveSheet\n\n                Dim oPM As Inventor.PrintManager\n                oPM = oDoc.PrintManager\n\n                Dim strPrinter As String = Nothing\n\n                If oSheet.Border.Name = \"IP-A4R\" Then\n                    oPM.Printer = \"HP LaserJet 1022\"\n                    oPM.ColorMode = PrintColorModeEnum.kPrintGrayScale\n                    oPM.PaperSize = PaperSizeEnum.kPaperSizeA4\n                    oPM.Orientation = PrintOrientationEnum.kLandscapeOrientation\n                    oPM.NumberOfCopies = 1\n                    oPM.scalemode = Inventor.PrintScaleModeEnum.kPrintBestFitScale\n                    oPM.printrange = Inventor.PrintRangeEnum.kPrintCurrentSheet\n                    oPM.RemoveLineWeights = True\n                ElseIf oSheet.Border.Name = \"IP-A4\" Then\n                    oPM.Printer = \"HP LaserJet 1022\"\n                    oPM.ColorMode = PrintColorModeEnum.kPrintGrayScale\n                    oPM.PaperSize = PaperSizeEnum.kPaperSizeA4\n                    oPM.Orientation = PrintOrientationEnum.kPortraitOrientation\n                    oPM.NumberOfCopies = 1\n                    oPM.scalemode = Inventor.PrintScaleModeEnum.kPrintBestFitScale\n                    oPM.printrange = Inventor.PrintRangeEnum.kPrintCurrentSheet\n                    oPM.RemoveLineWeights = True\n                ElseIf oSheet.Border.Name = \"IP-A3\" Then\n                    oPM.Printer = \"HP Officejet Pro K850 Series\"\n                    oPM.ColorMode = PrintColorModeEnum.kPrintColorPalette\n                    oPM.PaperSize = PaperSizeEnum.kPaperSizeA3\n                    oPM.Orientation = PrintOrientationEnum.kLandscapeOrientation\n                    oPM.NumberOfCopies = 1\n                    oPM.scalemode = Inventor.PrintScaleModeEnum.kPrintBestFitScale\n                    oPM.printrange = Inventor.PrintRangeEnum.kPrintCurrentSheet\n                    oPM.RemoveLineWeights = True\n                ElseIf oSheet.Border.Name = \"IP-A2\" Then\n                    oPM.Printer = \"HP Designjet 500 42+HPGL2 Card\"\n                    oPM.ColorMode = PrintColorModeEnum.kPrintColorPalette\n                    oPM.PaperSize = PaperSizeEnum.kPaperSizeA2\n                    oPM.Rotate90Degrees = True\n                    oPM.Orientation = PrintOrientationEnum.kPortraitOrientation\n                    oPM.NumberOfCopies = 1\n                    oPM.scalemode = Inventor.PrintScaleModeEnum.kPrintBestFitScale\n                    oPM.printrange = Inventor.PrintRangeEnum.kPrintCurrentSheet\n                    oPM.RemoveLineWeights = True\n                ElseIf oSheet.Border.Name = \"IP-A1\" Then\n                    oPM.Printer = \"HP Designjet 500 42+HPGL2 Card\"\n                    oPM.ColorMode = PrintColorModeEnum.kPrintColorPalette\n                    oPM.PaperSize = PaperSizeEnum.kPaperSizeA1\n                    oPM.Rotate90Degrees = True\n                    oPM.Orientation = PrintOrientationEnum.kPortraitOrientation\n                    oPM.NumberOfCopies = 1\n                    oPM.scalemode = Inventor.PrintScaleModeEnum.kPrintBestFitScale\n                    oPM.printrange = Inventor.PrintRangeEnum.kPrintCurrentSheet\n                    oPM.RemoveLineWeights = True\n                ElseIf oSheet.Border.Name = \"IP-A0\" Then\n                    oPM.Printer = \"HP Designjet 500 42+HPGL2 Card\"\n                    oPM.ColorMode = PrintColorModeEnum.kPrintColorPalette\n                    oPM.PaperSize = PaperSizeEnum.kPaperSizeA0\n                    oPM.Rotate90Degrees = True\n                    oPM.Orientation = PrintOrientationEnum.kPortraitOrientation\n                    oPM.NumberOfCopies = 1\n                    oPM.scalemode = Inventor.PrintScaleModeEnum.kPrintBestFitScale\n                    oPM.printrange = Inventor.PrintRangeEnum.kPrintCurrentSheet\n                    oPM.RemoveLineWeights = True\n                End If\n\n                oPM.SubmitPrint()\n\n                If oSheet.Border.Name = \"IP-A2\" Then\n                    MsgBox(\"Please Load A2 Paper (Portrait) on \" & strPrinter, MsgBoxStyle.Information, \" Automated Printing\")\n                ElseIf oSheet.Border.Name = \"IP-A1\" Then\n                    MsgBox(\"Please Load A1 Paper (Portrait) on \" & strPrinter, MsgBoxStyle.Information, \" Automated Printing\")\n                ElseIf oSheet.Border.Name = \"IP-A0\" Then\n                    MsgBox(\"Please Load A0 Paper (Roll) on \" & strPrinter, MsgBoxStyle.Information, \" Automated Printing\")\n                End If\n\n            Catch ex As Exception\n                MsgBox(ex.Message)\n            End Try\n        End Sub"], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: Form-want to change parameters of skeletal file then update assembly\n                    ", "solution": [], "author": "SeanFarr"},
{"created at": [], "solution Title": "\n                        Re: Automatically add external rule to list\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: CalculateStrokes generates a COM exception\n                    ", "solution": ["int VertexCount;\nint SegmentCount;\nint[] VertexIndices = {};\ndouble[] VertexCoordinates = {};\n \nbody.CalculateStrokes(.1, \n       out VertexCount, \n       out SegmentCount, \n       out VertexCoordinates, \n       out VertexIndices);"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How to connect to MS Access database from iLogic?\n                    ", "solution": [], "author": "mehatfie"},
{"created at": [], "solution Title": "\n                        Re: Supress entire folder. How?\n                    ", "solution": ["'J.Kriek 2012\noApp = ThisApplication\noDoc = oApp.ActiveDocument\noPane = oDoc.BrowserPanes(\"Model\")\noTopNode = oPane.TopNode\n    \n'Define which folder to suppress\nfolder = oTopNode.BrowserFolders.Item(\"test\")\n\noSelectSet = oDoc.SelectSet\noSelectSet.Clear\n    \n'Select the folder automaticly\noSelectSet.Select(folder)\n\nMsgBox (folder.Name & \" is selected.\")\nDim oCommandMgr As CommandManager\noCommandMgr = oApp.CommandManager\n\n'Toggle suppress or unsuppress\noCommandMgr.ControlDefinitions.Item(\"AssemblyCompSuppressionCtxCmd\").Execute2(True)"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Modify referenced model by iLogic\n                    ", "solution": [" doc = ThisDoc.Document\n Dim oFD As FileDescriptor\n oFD = doc.ReferencedFileDescriptors(1).DocumentDescriptor.ReferencedFileDescriptor\n oFD.ReplaceReference(\"c:\\NewPart.ipt\")\n doc.Update()"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Replacing Title Block (odd error)\n                    ", "solution": [], "author": "desidubajic"},
{"created at": [], "solution Title": "\n                        Re: HelpManager.HelpEvents Property\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: INSERT SKETCHED SYMBOL IF PART IN IDW IS SHEETMETAL\n                    ", "solution": ["Dim oIDW As DrawingDocument = ThisDoc.Document\nDim oSheet As Sheet = oIDW.ActiveSheet\n\n' First view\nDim oView As DrawingView = oSheet.DrawingViews.Item(1)\n\t\n\t' If base view\n\tIf oView.ViewType <> kStandardDrawingViewType Then\n\t\n\t\t' If ref file is sheet metal\n\t\tDim oRefFile As Document = oIDW.ReferencedDocuments.Item(1)\n\t\tIf oRefFile.DocumentSubType.DocumentSubTypeID = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n\t\t\n\t\t\t' Define which symbol\n\t\t\tDim oSymDef As SketchedSymbolDefinition\n\t\t\toSymDef = oIDW.SketchedSymbolDefinitions.Item(\"NOTES\")\n\t\t\t\n\t\t\t' Set position\n\t\t\tDim oPosition As Point2d = ThisApplication.TransientGeometry.CreatePoint2d(10,10)\n\t\t\t\n\t\t\t' Insert symbol\n\t\t\tDim oSymbol As SketchedSymbol\n\t\t\toSymbol = oSheet.SketchedSymbols.Add(oSymDef, oPosition)\n\t\tEnd If\n\tEnd If", "Dim oIDW As DrawingDocument = ThisDoc.Document\nDim oSheet As Sheet = oIDW.ActiveSheet\n\n' Check that there is a view on the sheet\nIf oSheet.DrawingViews.Count = 0 Then Exit Sub\n\n' First view\nDim oView As DrawingView = oSheet.DrawingViews.Item(1)\n\t\n\t' If base view\n\tIf oView.ViewType <> kStandardDrawingViewType Then\n\t\n\t\t' If ref file is sheet metal\n\t\tDim oRefFile As Document = oIDW.ReferencedDocuments.Item(1)\n\t\tIf oRefFile.DocumentSubType.DocumentSubTypeID = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n\t\t\n\t\t\t' Define which symbol\n\t\t\tDim oSymDef As SketchedSymbolDefinition\n\t\t\toSymDef = oIDW.SketchedSymbolDefinitions.Item(\"NOTES\")\n\t\t\t\n\t\t\t' Check if symbol has been used\n\t\t\tIf oSymDef.IsReferenced Then Exit Sub\n\t\t\t\n\t\t\t' Set position\n\t\t\tDim oPosition As Point2d = ThisApplication.TransientGeometry.CreatePoint2d(10,10)\n\t\t\t\n\t\t\t' Insert symbol\n\t\t\tDim oSymbol As SketchedSymbol\n\t\t\toSymbol = oSheet.SketchedSymbols.Add(oSymDef, oPosition)\n\t\tEnd If\n\tEnd If "], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Detecting if a component occurrence is a virtual component\n                    ", "solution": ["' set a reference to the assembly component definintion.\n' This assumes an assembly document is open.\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n'Iterate through all of the occurrences\nDim oOccurrence As ComponentOccurrence\nFor Each oOccurrence In oAsmCompDef.Occurrences\n'check for and skip virtual components\n'(in case a virtual component trips things up)\nIf Not TypeOf oOccurrence.Definition Is VirtualComponentDefinition Then\n'Show occurrence name In the message box body\nMessageBox.Show(oOccurrence.Name, \"iLogic\")\nElse\nEnd If\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Cannot find COM Reference VS2010 Express\n                    ", "solution": [], "author": "andrewwhiteinc"},
{"created at": [], "solution Title": "\n                        Re: Invalid Cast Exception Error When Running VB Code\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Sheet Count\n                    ", "solution": ["Dim oApp As Application: oApp = ThisApplication\nDim oDoc As Inventor.DrawingDocument: oDoc = oApp.ActiveDocument\nDim oSheets As Sheets: oSheets = oDoc.Sheets\nTry \n\tDim oSheet As Sheet: oSheet = oSheets.Item(\"remove:1\")\n\toSheet.Activate\n\toSheet.Delete\nCatch\n'Do nothing, the sheet is gone.\nEnd Try"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Inventor SDK Output result not really appropriate.\n                    ", "solution": [], "author": "Fleuve"},
{"created at": [], "solution Title": "\n                        Re: ThisApplication.ActiveDocument fails?\n                    ", "solution": [], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Delete a iPart Table row Programatically\n                    ", "solution": ["Public Sub DeleteIPartRow()\n    Dim partDoc As PartDocument\n    Set partDoc = ThisApplication.ActiveDocument    \n\n    If Not partDoc.ComponentDefinition.IsiPartFactory Then\n        MsgBox \"Must be an iPart factory.\"\n        Exit Sub\n    End If\n\n    Dim factory As iPartFactory\n    Set factory = partDoc.ComponentDefinition.iPartFactory\n\n    factory.TableRows.Item(factory.TableRows.Count).Delete\nEnd Sub\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How to get a parts list?\n                    ", "solution": ["            BOM oBOM = asmDoc.ComponentDefinition.BOM;\n            oBOM.StructuredViewFirstLevelOnly = true;\n            oBOM.StructuredViewEnabled = true;\n            BOMView oStructuredBOMView = oBOM.BOMViews[\"Structured\"];\n\n            foreach (BOMRow row in oStructuredBOMView.BOMRows)\n            {\n                ComponentDefinition compDef = row.ComponentDefinitions[1];\n                string partName;\n                if (compDef is VirtualComponentDefinition)\n                {\n                    VirtualComponentDefinition virtualDef = (VirtualComponentDefinition)compDef;\n                    partName = virtualDef.PropertySets[\"Design Tracking Properties\"][\"Part Number\"].Value;\n                }\n                else\n                {\n                    Inventor.Document doc = (Inventor.Document)compDef.Document;\n                    partName = doc.PropertySets[\"Design Tracking Properties\"][\"Part Number\"].Value;\n                }\n            }\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Insert a row in iPart\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Non-Defined (Dynamic) Arrays in iLogic\n                    ", "solution": ["Dim", " ", "holder", " ", "As", " ", "Object", "Dim", " ", "fakeArray", "(", "0", ")", " ", "As", " ", "String", "Dim", " ", "i", " ", "As", " ", "Integer", "Dim", " ", "holderList", " ", "As", " ", "String", " ", "i", " ", "=", " ", "0", " ", "holder", " ", "=", " ", "InputBox", "(", "\"", "Please Enter Your Channel Possitions", "\"", ", ", "\"", "Number Muncher", "\"", ", ", "\"\"", ")", " ", "If", " ", "IsNumeric", "(", "holder", ")", " ", "=", " True ", "Then", "fakeArray", "(", "i", ")", " ", "=", " ", "holder", "While", " ", "holder", " ", "<>", " ", "\"\"", " ", "holderList", " ", "=", " ", "Join", "(", "fakeArray", ",", "\"", ",", "\"", ")", " ", "holder", " ", "=", " ", "InputBox", "(", "\"", "Please Enter Your Next Value", "\"", " ", "&", " vbCrLf ", "&", "\"", " The Current Values are : ", "\"", " ", "&", " ", "holderList", ", ", "\"", "Number Muncher", "\"", ", ", "\"\"", ")", "  ", "'", "If", " ", "IsNumeric", "(", "holder", ")", " ", "=", " True ", "Then", "i", " ", "=", " ", "i", "+", "1", "ReDim", " ", "Preserve", " ", "fakeArray", "(", "i", ")", "fakeArray", "(", "i", ")", " ", "=", " ", "holder", "Else", " ", "ButtonValueTest", "=", "MsgBox", "(", "\"", "Would You Like To Stop Entering Values?", "\"", ", vbYesNo,", "\"", "Question Time!", "\"", ")", "If", " ", "ButtonValueTest", " ", "=", " vbYes ", "Then", "'", "MessageBox.Show(\"You pressed : Yes\",\"Results\") ", "Exit", " ", "While", "Else", "'", "MessageBox.Show(\"You pressed : No\",\"Results\") ", "holder", " ", "=", " ", "\"", "1", "\"", "End", " ", "If", " ", "End", " ", "If", " ", "End", " ", "While", "End", " ", "If", " ", "'", "MessageBox.Show(UBound(fakeArray),\"\")", "Dim", " ", "ArraySize", " ", "As", " ", "Integer", " ", "ArraySize", " ", "=", " ", "UBound", "(", "fakeArray", ")", " ", "Dim", " ", "slot1", ", ", "slot2", ", ", "swapped", " ", "As", " ", "Double", "Dim", " ", "APos", " ", "As", " ", "Integer", "Dim", " ", "IdentCount", " ", "As", " ", "Integer", "swapped", " ", "=", " ", "2", "If", " ", "ArraySize", " ", "<", " 1", "Then", " ", "    ", "MessageBox", ".", "Show", "(", "\"", "Array has been sorted: ", "\"", " ", "&", " ", "holderList", ", ", "\"\"", ")", " ", "Else", " ", "If", " ", "ArraySize", " ", ">", " ", "0", " ", "And", " ", "ArraySize", " ", "<", " ", "2", " ", "Then", "    ", "slot1", " ", "=", " ", "fakeArray", "(", "0", ")", "    ", "slot2", " ", "=", " ", "fakeArray", "(", "1", ")", "        ", "If", " ", "slot1", " ", "<", " ", "slot2", " ", "Then", "            ", "holderList", " ", "=", " ", "Join", "(", "fakeArray", ",", "\"", ",", "\"", ")", "            ", "MessageBox", ".", "Show", "(", "\"", "Array has been sorted: ", "\"", " ", "&", " ", "holderList", ",", "\"\"", ")", " ", "        ", "Else", " ", "If", " ", "slot1", " ", ">", " ", "slot2", " ", "Then", "            ", "fakeArray", "(", "0", ")", " ", "=", " ", "slot2", "            ", "fakeArray", "(", "1", ")", " ", "=", " ", "slot1", "            ", "holderList", " ", "=", " ", "Join", "(", "fakeArray", ",", "\"", ",", "\"", ")", "            ", "MessageBox", ".", "Show", "(", "\"", "Array has been sorted: ", "\"", " ", "&", " ", "holderList", ",", "\"\"", ")", " ", "        ", "Else", " ", "If", " ", "slot1", " ", "=", " ", "slot2", " ", "Then", " ", "            ", "'", "Remove(fakeArray(1))", "            ", "ReDim", " ", "Preserve", " ", "fakeArray", "(", "0", ")", "            ", "holderList", " ", "=", " ", "Join", "(", "fakeArray", ",", "\"", ",", "\"", ")", "            ", "MessageBox", ".", "Show", "(", "\"", "An Array has been changed to: ", "\"", " ", "&", " ", "holderList", ",", "\"\"", ")", "        ", "End", " ", "If", " ", "Else", " ", "If", " ", "ArraySize", " ", ">", " ", "1", " ", "Then", " ", "'", "MessageBox.Show(\"Array Larger Than 1\", \"\") ", "    ", "While", " ", "swapped", " ", ">", " ", "1", "        ", "swapped", " ", "=", " ", "1", "        ", "        ", "For", " ", "APos", " ", "=", " ", "1", " ", "To", " ", "UBound", "(", "fakeArray", ")", " ", "Step", " ", "1", "            ", "'", "MessageBox.Show(\"Looping through Array\",\"\") ", "            ", "             ", "slot1", " ", "=", " ", "fakeArray", "(", "Apos", "-", "1", ")", "            ", "slot2", " ", "=", " ", "fakeArray", "(", "Apos", ")", "            ", "            ", "If", " ", "slot2", " ", "<", " ", "slot1", " ", "Then", " ", "                ", "fakeArray", "(", "Apos", "-", "1", ")", " ", "=", " ", "slot2", "                ", "fakeArray", "(", "Apos", ")", " ", "=", " ", "slot1", "                ", "swapped", " ", "=", " ", "2", "            ", "Else", " ", "If", " ", "slot2", " ", "=", " ", "slot1", " ", "Then", "    ", "            ", "                ", "For", " ", "IdentCount", " ", "=", " ", "APos", " ", "To", " ", "UBound", "(", "fakeArray", ")", " ", "Step", " ", "1", " ", "                    ", "'", "MessageBox.Show(\"Upper Bound: \" & UBound(fakeArray) & \" And Ident \" & IdentCount, \"\") ", "                    ", "If", " ", "IdentCount", " ", "=", " ", "UBound", "(", "fakeArray", ")", " ", "Then", " ", "                        ", "ReDim", " ", "Preserve", " ", "fakeArray", "(", "IdentCount", " ", "-", " ", "1", ")", "                        ", "Apos", " ", "=", " ", "1", "                        ", "'", "MessageBox.Show(\"New UBound: \" & UBound(fakeArray),\"\") ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "Exit", " ", "For", "                    ", "End", " ", "If", " ", "                    ", "fakeArray", "(", "IdentCount", ")", " ", "=", " ", "fakeArray", "(", "IdentCount", " ", "+", " ", "1", ")", "                    ", "                ", "Next", "            ", "                ", "swapped", " ", "=", " ", "2", "    ", "            ", "End", " ", "If", " ", "            ", "'", "MessageBox.Show(\"APos : \" & APos,\"\")", "            ", "If", " ", "APos", " ", ">=", " ", "UBound", "(", "fakeArray", ")", "            ", "Exit", " ", "For", "            ", "End", " ", "If", " ", "            ", "        ", "Next", "        ", "        ", "If", " ", "swapped", " ", "<>", " ", "2", " ", "Then", " ", "        ", "swapped", " ", "=", " ", "0", " ", "        ", "End", " ", "If", " ", "    ", "End", " ", "While", "holderList", " ", "=", " ", "Join", "(", "fakeArray", ",", "\"", ",", "\"", ")", "MessageBox", ".", "Show", "(", "\"", "Array has been sorted down to: ", "\"", " ", "&", " ", "holderList", ",", "\"\"", ")", "End", " ", "If", " "], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: need Surface GetParamAtPoint and GetPointAtParam Advice?\n                    ", "solution": [], "author": "Fleuve"},
{"created at": [], "solution Title": "\n                        Re: VB Code to Disable / Bypass Update Prompt at File Open\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Insert ACAD File into Sketch API\n                    ", "solution": ["Dim StartCounter As Integer\n\t\tDim PointItemMaster As SketchPoint\n\t\tDim PointItemClient As SketchPoint\n\t\t\n\t\tFor Each PointItemMaster In oSketch.SketchPoints\n\t\t\tStartCounter = 0\n\t\t\tFor Each PointItemClient In oSketch.SketchPoints\n\t\t\t\tIf Round(PointItemClient.Geometry.x,4) = Round(PointItemMaster.Geometry.x,4) And Round(PointItemClient.Geometry.y,4) = Round(PointItemMaster.Geometry.y,4) Then\n\t\t\t\t\tStartCounter = StartCounter + 1\n\t\t\t\t\t\n\t\t\t\t\tIf StartCounter = 2 Then\n\t\t\t\t\t\tPointItemMaster.Merge(PointItemClient)\n\t\t\t\t\t\tStartCounter = 0\n\t\t\t\t\t\tExit For\n\t\t\t\t\tEnd If\n\t\t\t\tEnd If\n\t\t\tNext PointItemClient\n\t\tNext PointItemMaster"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Sketch update using WHILE command\n                    ", "solution": [], "author": "chris.atherton"},
{"created at": [], "solution Title": "\n                        Re: Autodesk 2013 iLogic issue with inputboxes\n                    ", "solution": ["Imports System.Globalization\nImports System.Threading\n\nDim value, userInputString As String\nDim userInputDouble As Double\nDim InputBool As Boolean \nDim oNumber As Decimal\n\n'Thread.CurrentThread.CurrentCulture = New CultureInfo(\"fr-FR\")\t\t''' French language culture!\nThread.CurrentThread.CurrentCulture = New CultureInfo(\"en-GB\")\t\t''' English language (with a UK twist!)\n'Thread.CurrentThread.CurrentCulture = New CultureInfo(\"en-US\")\t\t''' English language (with a Southern Twang!) \n'Thread.CurrentThread.CurrentCulture = New CultureInfo(\"de-DE\")\t\t''' German language from the Father Land! \n\n'''/////////////////////////////////////////////////////////////////////////////////////////////////////\n'''\n''' Here are some culture codes ''' \n''' en-GB - (English - Great Britain) \n''' en-US - (English - United States)\n''' fr-FR - (French - France) \n''' de-DE - (German - Germany) \n'''\n'''\n''' Simply replace the above 'New CultureInfo(\"??-??\") with one of the codes to change\n''' how this document reacts. \n'''\n''' More culture codes can be found here : \n''' \n''' ", "http://msdn.microsoft.com/en-us/library/System.globalization.cultureinfo(v=vs.71).aspx", "\n''' \n'''/////////////////////////////////////////////////////////////////////////////////////////////////////\n'''\n'''\n'''/////////////////////////////////////////////////////////////////////////////////////////////////////\n'''\n''' In this comment section are some simple tests to see if your current culture is working\n''' based on if the following value returns true or false. \n'''\n'''\tUncomment the code section you'd like to test with, if you'd like to test.\n''' Only uncomment *one*. Specifically the one pertaining to the culture that you've set.\n'''\n'''\t(Test for ENGLISH language culture. Should return true) \n'''\n'''\tvalue = \"0.2\"\n'''\n'''\tIf IsNumeric(value) = True Then\n'''\t\tMessagebox.Show(\"True\",\"\")\n'''\t\tElse\n'''\t\tMessageBox.Show(\"False\",\"\")\n'''\tEnd If \n'''\n'''\n'''\t(Test for NON-ENGLISH language culture. Should return true) \n'''\n'''\tvalue = \"0,2\"\n'''\n'''\tIf IsNumeric(value) = True Then\n'''\t\tMessagebox.Show(\"True\",\"\")\n'''\t\tElse\n'''\t\tMessageBox.Show(\"False\",\"\")\n'''\tEnd If \n'''\n'''/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nInputBool = False\nWhile InputBool = False \n\n\tuserInputString = InputBox(\"Please Enter a Number. Your Current Culture is set to : \" _\n\t\t\t\t\t\t\t\t\t\t\t\t& Thread.CurrentThread.CurrentCulture.Name, \"Title\", \"\")\n\tIf IsNumeric(userInputString) = True Then\n\t\tInputBool = True\n\t\tuserInputDouble = CDbl(userInputString)\n\t\tElse \n\t\tInputBool = False\n\t\tMessageBox.Show(\"The number you entered - \" & userInputString & _\n\t\t\t\t\t\t\t\t\t\" - was not recognized as valid. Please try again.\",\"\") \n\tEnd If \nEnd While\n\nMessageBox.Show(\"Your input, multiplied by 2 = \" & userInputDouble * 2, \"Result\") "], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Parts Visibility\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iProperty Location\n                    ", "solution": [" Dim Path As String = oDoc.FullDocumentName.Substring(0, oDoc.FullDocumentName.LastIndexOf(\"\\\") + 1)"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Vault Add-in (Check-in)\n                    ", "solution": ["ControlDefinitions.Item(\"VaultCheckinTop\").", "Execute2(True)"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Possible to extract part revision and place in IDW revision?\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: API to detect which version of Autodesk Inventor has been launched\n                    ", "solution": [], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: VB to change filename as loop progresses\n                    ", "solution": [], "author": "nickv02"},
{"created at": [], "solution Title": "\n                        Re: Registry free addin won't load\n                    ", "solution": [], "author": "bsee1"},
{"created at": [], "solution Title": "\n                        Re: External rules performance\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: MACRO WITH FILE NAME STRIPPING PROBLEM\n                    ", "solution": [], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: Autofill Scale?\n                    ", "solution": ["' Define Document & First Sheet\n\tDim oDrg As DrawingDocument = ThisDrawing.Document\n\tDim oSheet As Sheet = oDrg.Sheets.Item(1)\n\t\n' Check if there are any views on the sheet\n\tIf oSheet.DrawingViews.Count = 0 Then\n\t\tExit Sub\n\tEnd If\n\n' Get the first view on the sheet\n\tDim oView As DrawingView = oSheet.DrawingViews.Item(1)\n\n' Update Scale iProperty\n\tiProperties.Value(\"Custom\", \"Scale\") = oView.ScaleString\n\n' Update Drawing to reflect changes\n\tInventorVb.DocumentUpdate()"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Updating  document tabs\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: ActiveDesignViewRepresentation how to set it?\n                    ", "solution": ["oCompOcc.SetDesignViewRepresentation(\"Default\",, True)  ", "oCompOcc.SetLevelOfDetailRepresentation(\"Default\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Progressive Tooltip on button\n                    ", "solution": ["Public Sub ProgressiveToolTips()\n\n  Dim g_FilePath As String\n  g_FilePath = \"C:\\temp\\\"\n  \n    ' Create the button definition.\n    Dim smallIcon As IPictureDisp\n    Set smallIcon = LoadPicture(g_FilePath & \"SmallProgTooltip.bmp\")\n    Dim largeIcon As IPictureDisp\n    Set largeIcon = LoadPicture(g_FilePath & \"LargeProgTooltip.bmp\")\n    Dim buttonDef As ButtonDefinition\n    Set buttonDef = ThisApplication.CommandManager.ControlDefinitions.AddButtonDefinition(\"Sample\", \"SampleCommand\", kQueryOnlyCmdType, \"\", \"Sample command to show progressive tool tips.\", \"Sample\", smallIcon, largeIcon)\n    \n    ' Add a control to the Work Feature panel of the Model tab of the Part ribbon.\n    Call ThisApplication.UserInterfaceManager.Ribbons.Item(\"Part\").RibbonTabs.Item(\"id_TabModel\").RibbonPanels.Item(\"id_PanelA_ModelWorkFeatures\").CommandControls.AddButton(buttonDef, True)\n    \n    ' Define the progressive tooltip.  This would typically be done in the\n    ' same section of code where the button definition is created but there's\n    ' a problem with the beta version where the progressive tooltip can only\n    ' be defined on a control has been created.\n    With buttonDef.ProgressiveToolTip\n        .Description = \"The short description.\"\n        .ExpandedDescription = \"This is the long expaned version of the description that could have a more complete description to accompany the picture.\"\n        Dim progImage As IPictureDisp\n        Set progImage = LoadPicture(g_FilePath & \"ProgTooltip.bmp\")\n        .Image = progImage\n        .IsProgressive = True\n        .Title = \"Sample\"\n    End With\nEnd Sub"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Recurssive BOM\n                    ", "solution": ["' a reference to the assembly document.\n' This assumes an assembly document is active.\nDim oDoc As AssemblyDocument\noDoc = ThisApplication.ActiveDocument\n\n'set  a reference to the BOM\nDim oBOM As BOM\noBOM = oDoc.ComponentDefinition.BOM\n\n'set the structured view to 'all levels'\noBOM.StructuredViewFirstLevelOnly = False\n\n' Make sure that the structured view is enabled.\noBOM.StructuredViewEnabled = True\n\n'set a reference to the \"Structured\" BOMView\nDim oStructuredBOMView As BOMView\noStructuredBOMView = oBOM.BOMViews.Item(\"Structured\")\n\n' Export the BOM view to an Excel file\noStructuredBOMView.Export (\"C:\\temp\\BOM-StructuredAllLevels.xls\", kMicrosoftExcelFormat)\n\n'define Excel Application object\nexcelApp = CreateObject(\"Excel.Application\")\n'set Excel to run visibly\n'change to false if you want to run it invisibly\nexcelApp.Visible = True", "'open the workbook\nwb = excelApp.Workbooks.Open(\"C:\\temp\\BOM-StructuredAllLevels.xls\")", "'set all of the columns to autofit", "excelApp.Columns.AutoFit\n'suppress prompts (such as the compatibility checker)\nexcelApp.DisplayAlerts = false\n'save the workbook\nwb.Save\n\n''close the workbook, uncomment if you want to close the xls file at the end\n''wb.Close"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: VS2010 Express Startup Application\n                    ", "solution": [], "author": "gerhick"},
{"created at": [], "solution Title": "\n                        Re: IPN properties in drawing\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Change DimStyle to Active Standard\n                    ", "solution": ["Sub ChangeDimStyle()\n'J.Kriek 2012\n    Set oApp = ThisApplication\n    Set oIDW = oApp.ActiveDocument\n    Set oDimStyle = oIDW.StylesManager.ActiveStandardStyle\n    For Each oSheet In oIDW.Sheets\n        For Each oDim In oSheet.DrawingDimensions\n\n            'Add more Dim Styles here\n            'Debug.Print \"Name, Val: \" & oDim.Style.Name & \", \" & oDim.ModelValue\n            If oDim.Style.Name <> oDimStyle.ActiveObjectDefaults.LinearDimensionStyle.Name Then\n                oDim.Style = oDimStyle.ActiveObjectDefaults.LinearDimensionStyle\n            End If\n            If oDim.Style.Name <> oDimStyle.ActiveObjectDefaults.AngularDimensionStyle.Name Then\n                oDim.Style = oDimStyle.ActiveObjectDefaults.AngularDimensionStyle\n            End If\n            If oDim.Style.Name <> oDimStyle.ActiveObjectDefaults.ChamferNoteStyle.Name Then\n                oDim.Style = oDimStyle.ActiveObjectDefaults.ChamferNoteStyle\n            End If\n            If oDim.Style.Name <> oDimStyle.ActiveObjectDefaults.DiameterDimensionStyle.Name Then\n                oDim.Style = oDimStyle.ActiveObjectDefaults.DiameterDimensionStyle\n            End If\n            If oDim.Style.Name <> oDimStyle.ActiveObjectDefaults.LeaderTextStyle.Name Then\n                oDim.Style = oDimStyle.ActiveObjectDefaults.LeaderTextStyle\n            End If\n            If oDim.Style.Name <> oDimStyle.ActiveObjectDefaults.BendNoteStyle.Name Then\n                oDim.Style = oDimStyle.ActiveObjectDefaults.BendNoteStyle\n            End If\n            If oDim.Style.Name <> oDimStyle.ActiveObjectDefaults.OrdinateDimensionStyle.Name Then\n                oDim.Style = oDimStyle.ActiveObjectDefaults.OrdinateDimensionStyle\n            End If\n            If oDim.Style.Name <> oDimStyle.ActiveObjectDefaults.OrdinateDimensionStyle.Name Then\n                oDim.Style = oDimStyle.ActiveObjectDefaults.OrdinateDimensionStyle\n            End If\n            \n            'Set automaticly because it doesn't support compare\n            oDim.Style = oDimStyle.ActiveObjectDefaults.ChamferNoteStyle\n            \n        Next\n        For Each oBalloon In oSheet.Balloons\n            'Debug.Print \"Name: \" & oBalloon.Style.Name\n            If oBalloon.Style.Name <> oDimStyle.ActiveObjectDefaults.BalloonStyle.Name Then\n                oBalloon.Style = oDimStyle.ActiveObjectDefaults.BalloonStyle\n            End If\n        Next\n        Dim i As Integer\n        For i = 1 To oSheet.DrawingViews.count\n            Set oView = oSheet.DrawingViews.Item(i)\n                If oView.ShowLabel = True Then\n                    'B Size: .396 = .156 Text\n                    'D Dize: .458 = .180in Text\n                    Dim LabelB As String\n                    Dim LabelD As String\n                    'Added detection for type of view 9/5/2012 - JDK\n                    Select Case oView.ViewType\n                        Case kDetailDrawingViewType\n                            LabelB = \"<StyleOverride FontSize='.396' Underline='True'>DETAIL <DrawingViewName/></StyleOverride>\"\n                            LabelD = \"<StyleOverride FontSize='.458' Underline='True'>DETAIL <DrawingViewName/></StyleOverride>\"\n                        Case kSectionDrawingViewType\n                            LabelB = \"<StyleOverride FontSize='.396' Underline='True'>SECTION <DrawingViewName/>-<DrawingViewName/></StyleOverride>\"\n                            LabelD = \"<StyleOverride FontSize='.458' Underline='True'>SECTION <DrawingViewName/>-<DrawingViewName/></StyleOverride>\"\n                        Case kProjectedDrawingViewType\n                            LabelB = \"<StyleOverride FontSize='.396' Underline='True'>VIEW <DrawingViewName/>-<DrawingViewName/></StyleOverride>\"\n                            LabelD = \"<StyleOverride FontSize='.458' Underline='True'>VIEW <DrawingViewName/>-<DrawingViewName/></StyleOverride>\"\n                        Case kStandardDrawingViewType\n                            'oView.ShowLabel = False\n                           LabelB = \"<StyleOverride FontSize='.396' Underline='True'><DrawingViewName/></StyleOverride>\"\n                            LabelD = \"<StyleOverride FontSize='.458' Underline='True'><DrawingViewName/></StyleOverride>\"\n                    End Select\n                    \n                    'Set automaticly because it doesn't support compare\n                    oView.Label.TextStyle = oDimStyle.ActiveObjectDefaults.ViewLabelStyle\n                    \n                    'Debug.Print \"Name: \" & oView.Label.TextStyle.Name\n                    Select Case oView.Label.TextStyle.Name\n                        Case \"LABEL_B\"\n                            oView.Label.FormattedText = LabelB\n                        Case \"LABEL_B_16\"\n                            oView.Label.FormattedText = LabelB\n                        Case \"LABEL_D\"\n                            oView.Label.FormattedText = LabelD\n                        Case \"LABEL_D_16\"\n                            oView.Label.FormattedText = LabelD\n                    End Select\n                    End If\n                End If\n       Next\n   Next\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: ilogic and derive\n                    ", "solution": ["doc = ThisDoc.Document", "path_and_name = ThisDoc.PathAndFileName(False) ' without extension", "oQuestion = MessageBox.Show(\"Do you want to derive this file?\", \"iLogic\",MessageBoxButtons.YesNo)", "If oQuestion = vbNo Then", "Return", "Else", "' Create a new part file to derive the selected part into ", "'note: kPartDocumentObject is the default template", "Dim oPartDoc As PartDocument", "oPartDoc = ThisApplication.Documents.Add(kPartDocumentObject, ThisApplication.FileManager.GetTemplateFile(kPartDocumentObject)) ", "'Create a derived definition for the selected part", "Dim oDerivedPartDef As DerivedPartUniformScaleDef", "oDerivedPartDef = oPartDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents.CreateUniformScaleDef(ThisDoc.PathAndFileName(True) )", "' set the scale to use", "oDerivedPartDef.ScaleFactor = 1", "'define the mirror plane", "'kDerivedPartMirrorPlaneXY = 27393 ", "'kDerivedPartMirrorPlaneYZ = 27394 ", "'kDerivedPartMirrorPlaneXZ = 27395 ", "oDerivedPartDef.MirrorPlane = 27394 ", "' Create the derived part.", "oPartDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents.Add(oDerivedPartDef)", "' Save the new derived part.", "oPartDoc.SaveAs(path_and_name & \"_derived.ipt\", False)", "oPartDoc.Close", "MessageBox.Show(\"New file created at:\" & vblf & path_and_name & \"_derived.ipt\", \"iLogic\")", "End If "], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: wanted: macro to delete unresolved sketch items\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: ilogic form 2012\n                    ", "solution": [], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: How to programatically update Units of Measure for a part?\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Place VBA program on toolbar / ribbon\n                    ", "solution": [], "author": "zsc100"},
{"created at": [], "solution Title": "\n                        Re: Link a standard iProperty to a Custom iProperty\n                    ", "solution": [], "author": "jletcher"},
{"created at": [], "solution Title": "\n                        Re: Extract part qty with ilogic\n                    ", "solution": [], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Covert decimal to fractions in ilogic\n                    ", "solution": ["If Hole_F_Type = \"NONE\" Then\niProperties.Value(\"Custom\", \"F\")= \"-\"\nElseIf Hole_F_Type = \"2-Hole\" Then\niProperties.Value(\"Custom\", \"F\")= RoundToFraction(Dim_F, 1/32, RoundingMethod.Round)\nElseIf Hole_F_Type = \"S1\" Then\niProperties.Value(\"Custom\", \"F\")= \"S1\"& \"-\" & RoundToFraction(Dim_F, 1/32, RoundingMethod.Round)\nElseIf Hole_F_Type = \"S2\" Then\niProperties.Value(\"Custom\", \"F\")= \"S2\"& \"-\" & RoundToFraction(Dim_F, 1/32, RoundingMethod.Round)\nElseIf Hole_F_Type = \"S3\" Then\niProperties.Value(\"Custom\", \"F\")= \"S3\"& \"-\" & RoundToFraction(Dim_F, 1/32, RoundingMethod.Round)\nEnd If"], "author": "jletcher"},
{"created at": [], "solution Title": "\n                        Re: Stack In ilogic ?\n                    ", "solution": [], "author": "jletcher"},
{"created at": [], "solution Title": "\n                        Re: Dismissing/ Bypassing the Excel Save prompt\n                    ", "solution": ["excelApp.DisplayAlerts = false"], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Developertools for Inventor 2013 under VS 2010 Express\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: VB.Net - How do I find 3d Linear Dimensions on a drawing\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: How to transform occurrence to match another occurrence's UCS\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Change document settings on several files at once. ilogic?\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic mass properties update\n                    ", "solution": ["ThisApplication.CommandManager.ControlDefinitions.Item(\"AppUpdateMassPropertiesCmd\").Execute\nmyMass = iProperties.Mass\n\nMessageBox.Show(\"Mass = \" & myMass, \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: API Obkect Model\n                    ", "solution": [], "author": "skyngu"},
{"created at": [], "solution Title": "\n                        Re: iLogic: How to trigger a standalone .exe\n                    ", "solution": ["Shell(\"C:\\TEMP\\NameOf.exe\")"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: isolate an occurrence\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: VB Code help with Custom Table Text Style\n                    ", "solution": [], "author": "barbara.han"},
{"created at": [], "solution Title": "\n                        Re: how to change drawingnote format\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Excel LookUp problems\n                    ", "solution": ["'LookUp value\nDisBeamOffset = 43  'this value doesn\u2019t exists\n\nRow = GoExcel.FindRow(\"drop over common parts.xls\", _\n    \"Sheet1\", \"DISCHARGE\", \"=\", DisBeamOffset)\nMsgBox(Row)\n\nIf Row >=1  Then\nNUM = GoExcel.CellValue(\"B\" & CStr(Row))\n    MsgBox(NUM)\nElse\n    MsgBox(\"DisBeamOffset = \" & DisBeamOffset & _\n \"  was not found in Excel sheet\")\nEnd If"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Total number of piercings in a sheet metal part\n                    ", "solution": ["Sub GetIntExtPerimeters()\n\n    Dim oPartDoc As Document\n    Set oPartDoc = ThisApplication.ActiveDocument\n    Dim oFlatPattern As FlatPattern\n\n    ' Check for a non-part document\n    If oPartDoc.DocumentType <> kPartDocumentObject Then\n        MsgBox \"The Active document must be a 'Part'!\"\n        Exit Sub\n    End If\n\n    ' The Active document must be a Sheet metal Part\n    If oPartDoc.SubType <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n        MsgBox \"The 'Part' must be a Sheet Metal Part!\"\n        Exit Sub\n    End If\n       \n    ' Check to see if the flat pattern exists.\n    Set oFlatPattern = oPartDoc.ComponentDefinition.FlatPattern\n    If oFlatPattern Is Nothing Then\n        MsgBox \"No flat pattern exists for this part!\"\n        Exit Sub\n    End If\n    \n    Dim oSheetMetalCompDef As SheetMetalComponentDefinition\n    Set oSheetMetalCompDef = oPartDoc.ComponentDefinition\n\n    ' Get the cut length\n    Dim oFace As Face\n    Set oFace = oSheetMetalCompDef.FlatPattern.TopFace\n\n    ' Find the outer loop.\n    Dim dOuterLength As Double\n    dOuterLength = 0\n    Dim oLoop As EdgeLoop\n    For Each oLoop In oFace.EdgeLoops\n        If oLoop.IsOuterEdgeLoop Then\n            Dim oEdge As Edge\n            For Each oEdge In oLoop.Edges\n                ' Get the length of the current edge.\n                Dim dMin As Double, dMax As Double\n                Call oEdge.Evaluator.GetParamExtents(dMin, dMax)\n                Dim dLength As Double\n                Call oEdge.Evaluator.GetLengthAtParam(dMin, dMax, dLength)\n                dOuterLength = dOuterLength + dLength\n            Next\n            'MsgBox \"Outer Loop is \" & FormatNumber(dOuterLength, 1)\n            Exit For\n        End If\n    Next\n\n    ' Iterate through the inner loops.\n    Dim iLoopCount As Long\n    iLoopCount = 0\n    Dim dTotalLength As Double\n    For Each oLoop In oFace.EdgeLoops\n        Dim dLoopLength As Double\n        dLoopLength = 0\n        If Not oLoop.IsOuterEdgeLoop Then\n            For Each oEdge In oLoop.Edges\n                ' Get the length of the current edge.\n                Call oEdge.Evaluator.GetParamExtents(dMin, dMax)\n                Call oEdge.Evaluator.GetLengthAtParam(dMin, dMax, dLength)\n                dLoopLength = dLoopLength + dLength\n            Next\n\n            ' Add this loop to the total length.\n            dTotalLength = dTotalLength + dLoopLength\n            'MsgBox \"Inner Loops are \" & FormatNumber(dTotalLength, 1)\n        End If\n    Next\n    \n'added by BH 13-07-2011-count edges to calculate peirces\nDim oDoc As PartDocument\nSet oDoc = ThisApplication.ActiveDocument\n\nDim oDef As SheetMetalComponentDefinition\nSet oDef = oDoc.ComponentDefinition\n\nSet oFlatPattern = oDef.FlatPattern\n\nDim oTransaction As Transaction\nSet oTransaction = ThisApplication.TransactionManager.StartTransaction(oDoc, \"FindArea \")\n\nDim oSketch As PlanarSketch\nSet oSketch = oFlatPattern.Sketches.Add(oFlatPattern.TopFace)\n\nDim oEdgeLoop As EdgeLoop\n\nnumLoops = 1\nFor Each oEdgeLoop In oFlatPattern.TopFace.EdgeLoops\n    If oEdgeLoop.IsOuterEdgeLoop = False Then\n        numLoops = numLoops + 1\n    End If\nNext\n\nTotalPierces = numLoops\n\nFor Each oEdgeLoop In oFlatPattern.TopFace.EdgeLoops\n    If oEdgeLoop.IsOuterEdgeLoop Then\n        Exit For\n    End If\nNext\n\nFor Each oEdge In oEdgeLoop.Edges\n    Call oSketch.AddByProjectingEntity(oEdge)\nNext\n\nDim oProfile As Profile\nSet oProfile = oSketch.Profiles.AddForSolid\n\noTransaction.Abort\n'end\n\n    Dim oUOM As UnitsOfMeasure\n    Set oUOM = oPartDoc.UnitsOfMeasure\n    outerCutlength = oUOM.GetStringFromValue(dOuterLength, kMillimeterLengthUnits)\n    innerCutlength = oUOM.GetStringFromValue(dTotalLength, kMillimeterLengthUnits)\n    TotalCutLength = oUOM.GetStringFromValue(dTotalLength + dOuterLength, kMillimeterLengthUnits)\n    \n    'Write data to properties, creating or updating (if property exists)\n    Dim oCustomPropSet As PropertySet\n    Set oCustomPropSet = oPartDoc.PropertySets.Item(\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\")\n\n    On Error Resume Next\n    oCustomPropSet.Item(\"OuterPerimeter\").Value = outerCutlength\n    If Err Then\n        Err.Clear\n        Call oCustomPropSet.Add(outerCutlength, \"OuterPerimeter\")\n    End If\n    oCustomPropSet.Item(\"InnerPerimeters\").Value = innerCutlength\n    If Err Then\n        Err.Clear\n        Call oCustomPropSet.Add(innerCutlength, \"InnerPerimeters\")\n    End If\n    oCustomPropSet.Item(\"TotalPerimeter\").Value = TotalCutLength\n    If Err Then\n        Err.Clear\n        Call oCustomPropSet.Add(TotalCutLength, \"TotalPerimeter\")\n    End If\n    \n    'added by BH 13-07-2011\n    oCustomPropSet.Item(\"Pierces\").Value = TotalPierces\n    If Err Then\n        Err.Clear\n        Call oCustomPropSet.Add(TotalPierces, \"Pierces\")\n    End If\n    End\n    \nEnd Sub"], "author": "brendan.henders"},
{"created at": [], "solution Title": "\n                        Re: TransMatrix.SetCoordinateSystem vb to c# conversion error\n                    ", "solution": [], "author": "herrwolf1"},
{"created at": [], "solution Title": "\n                        Re: Edit part in Assembly\n                    ", "solution": ["Imports System.Windows.Forms\n\nPublic Class ParameterEditDialog\n    Public oParamEditingDocument As Object\n       Private Sub OK_Button_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OK_Button.Click\n        Try\n            For Each oParameter As Inventor.Parameter In oParamEditingDocument.ComponentDefinition.Parameters\n                If oParameter.Name = Label1.Text Then\n                    oParameter.Expression = TextBox1.Text\n                    Me.DialogResult = System.Windows.Forms.DialogResult.OK\n\n                End If\n            Next\n        Catch ex As Exception\n            MsgBox(ex.Message)\n        End Try\n        If DialogResult = Windows.Forms.DialogResult.OK Then\n            Me.Close()\n        Else\n            MsgBox(\"The parameter was not able to be set!\")\n        End If\n    End Sub\n\n    Private Sub Cancel_Button_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Cancel_Button.Click\n        Me.DialogResult = System.Windows.Forms.DialogResult.Cancel\n        Me.Close()\n    End Sub\nEnd Class", "    Private Sub DataGridView1_CellClick(sender As Object, e As System.Windows.Forms.DataGridViewCellEventArgs) Handles DataGridView1.CellClick\n        If e.ColumnIndex = 1 Then\n            Dim oCell As DataGridViewCell = DataGridView1.SelectedCells.Item(0)\n            Dim ParamEditor As New ParameterEditDialog\n            ParamEditor.oParamEditingDocument = ThisApplication.Documents.ItemByName(TreeView1.SelectedNode.Tag.ToString)\n            ParamEditor.Label1.Text = DataGridView1.Item(0, DataGridView1.CurrentRow.Index).Value\n            ParamEditor.TextBox1.Text = oCell.Value\n            If ParamEditor.ShowDialog = Windows.Forms.DialogResult.OK Then\n                oCell.Value = ParamEditor.TextBox1.Text\n            End If\n        End If\n    End Sub", "    Private Sub TreeView1_AfterSelect(sender As Object, e As System.Windows.Forms.TreeViewEventArgs) Handles TreeView1.AfterSelect\n        'when the item is clicked we will get the parameters and display them in a data grid view\n        DataGridView1.Rows.Clear()\n        Dim SelectedItem As Object = ThisApplication.Documents.ItemByName(e.Node.Tag.ToString)\n        For Each oParam As Parameter In SelectedItem.ComponentDefinition.Parameters\n            DataGridView1.Rows.Add(New String() {oParam.Name, oParam.Expression})\n        Next\n    End Sub"], "author": "amitnkukanur"},
{"created at": [], "solution Title": "\n                        Re: Changing Circular Pattern Orientation with iLogic\n                    ", "solution": ["app = ThisApplication\n\n'flip rectangular pattern direction\nif Feature.InventorFeature(\"Rectangular Pattern1\").NaturalXDirection  = True then\nFeature.InventorFeature(\"Rectangular Pattern1\").NaturalXDirection  = False\nElse Feature.InventorFeature(\"Rectangular Pattern1\").NaturalXDirection  = True\nEnd if\n\n'flip circular pattern direction\nif Feature.InventorFeature(\"Circular Pattern1\").NaturalAxisDirection  = True then\nFeature.InventorFeature(\"Circular Pattern1\").NaturalAxisDirection  = False\nElse Feature.InventorFeature(\"Circular Pattern1\").NaturalAxisDirection  = True\nEnd if", "Dim doc = ThisDoc.Document\n\nDim oDef As PartComponentDefinition\noDef = doc.ComponentDefinition\n\nIf oDef.Features.CircularPatternFeatures.Item(\"Circular Pattern1\").NaturalAxisDirection = False Then\n\toDef.Features.CircularPatternFeatures.Item(\"Circular Pattern1\").NaturalAxisDirection = True\nElse\n\toDef.Features.CircularPatternFeatures.Item(\"Circular Pattern1\").NaturalAxisDirection = False\nEnd If", "Dim oDoc = ThisDoc.Document\n\nDim oDef As AssemblyComponentDefinition\noDef = oDoc.ComponentDefinition\n\nDim oPattern As CircularOccurrencePattern\noPattern = oDef.OccurrencePatterns.Item(\"Component Pattern 1:1\")\n\nIf oPattern.AxisEntityNaturalDirection = True Then\n\toPattern.AxisEntityNaturalDirection = False \nElse\n\toPattern.AxisEntityNaturalDirection = True \nEnd If", "Sub Main()\n    Dim oDoc As AssemblyDocument\n    oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDef As AssemblyComponentDefinition\n    oDef = oDoc.ComponentDefinition\n    \n    Dim oTopPattern As OccurrencePattern\n    oTopPattern = oDef.OccurrencePatterns(1)\n    \n    Dim oPatternElement As OccurrencePatternElement\n    oPatternElement = oTopPattern.OccurrencePatternElements(1)\n    \n    Dim oSubPattern As OccurrencePattern\n    oSubPattern = oPatternElement.Components(1)\n\t\n\tIf oSubPattern.AxisEntityNaturalDirection = True Then\n\t\toSubPattern.AxisEntityNaturalDirection = False \n\tElse\n\t\toSubPattern.AxisEntityNaturalDirection = True \n\tEnd If\n    \nEnd Sub", "Sub Main()", " Dim oDoc As AssemblyDocument", " oDoc = ThisDoc.Document", " ", " Dim oDef As AssemblyComponentDefinition", " oDef = oDoc.ComponentDefinition", " ", " Dim oTopPattern As OccurrencePattern", " oTopPattern = oDef.OccurrencePatterns(1)", " ", " Dim oPatternElement As OccurrencePatternElement", " oPatternElement = oTopPattern.OccurrencePatternElements(1)", " ", " Dim oSubPattern As OccurrencePattern", " oSubPattern = oPatternElement.Components(1)", "  ", " If OrientationNumeric = 1 Then", " \toSubPattern.AxisEntityNaturalDirection = True", " Else", " \toSubPattern.AxisEntityNaturalDirection = False", " End If", " ", "End Sub"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: ilogic to count features\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Description Content Center - Descri\u00e7\u00e3o Content Center\n                    ", "solution": [], "author": "KristopherReave"},
{"created at": [], "solution Title": "\n                        Re: Editing a component in an assembly.\n                    ", "solution": [], "author": "tclayton"},
{"created at": [], "solution Title": "\n                        Re: Show a Icon on a macro Button not works in Inventor 2011\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic. How to place flat pattern on the drawing?\n                    ", "solution": ["Imports Inventor.ViewOrientationTypeEnum\nImports Inventor.DrawingViewStyleEnum\n\nDim oDrawingDoc as DrawingDocument    \nDim oPartDoc as Document\nDim oSheet As sheet\nDim oView1 as DrawingView\nDim oView2 as DrawingView\nDim oView3 as DrawingView\nDim oView4 as DrawingView \n\n\nViewScale = 1\n\n'Ask to create drawing?\ndwgQuery=MsgBox(\"Would you like to Create a drawing for this MODEL?\", vbYesNo,\"Drawing Selection\")\n\nIf dwgQuery = vbYes Then\n    oPartDoc = ThisDoc.Document\n    \n    'Define IDW Template File Location\n    'oDrawingDoc = ThisApplication.Documents.Add(kDrawingDocumentObject, \"C:\\Temp\\my template.idw\", True)\n    oDrawingDoc = ThisApplication.Documents.Add(kDrawingDocumentObject, \"\", True)\n   oSheet = oDrawingDoc.Sheets.Item(1)\n    \n      ' Create a new NameValueMap object\n  Dim oBaseViewOptions As NameValueMap\n  oBaseViewOptions = ThisApplication.TransientObjects.CreateNameValueMap\n \n 'True = folded view \n 'False = flat pattern view\n  oBaseViewOptions.Add(\"SheetMetalFoldedModel\", False) \n   \n'Define 2d view bottom left corner points for four views\noPoint1 = ThisApplication.TransientGeometry.CreatePoint2d(9, 10) ' front view\noPoint2 = ThisApplication.TransientGeometry.CreatePoint2d(9, 14) ' top view\noPoint3 = ThisApplication.TransientGeometry.CreatePoint2d(18, 10)' right view\noPoint4 = ThisApplication.TransientGeometry.CreatePoint2d(20, 18)' flat pattern\n    \noBaseView = oSheet.DrawingViews.AddBaseView(oPartDoc,oPoint1, ViewScale,kFrontViewOrientation, kHiddenLineDrawingViewStyle, \"My View\")\noView2 = oSheet.DrawingViews.AddProjectedView(oBaseView,oPoint2, kHiddenLineDrawingViewStyle, ViewScale)\noView3 = oSheet.DrawingViews.AddProjectedView(oBaseView,oPoint3, kHiddenLineDrawingViewStyle, ViewScale)  \n\n'kDefaultViewOrientation = 10753 (default folded or flat pattern view)\n'kFlatPivotRightViewOrientation = 10767\n'kFlatPivotLeftViewOrientation = 10768\n'kFlatPivot180ViewOrientation = 10769\n'kFlatBacksideViewOrientation = 10770\n'kFlatBacksidePivotRightViewOrientation = 10771\n'kFlatBacksidePivotLeftViewOrientation = 10772\n'kFlatBacksidePivot180ViewOrientation = 10773 \n\noView4 = oSheet.DrawingViews.AddBaseView(oPartDoc,oPoint4, ViewScale,kDefaultViewOrientation, kHiddenLineDrawingViewStyle,,, oBaseViewOptions)\nEnd If", "Imports Inventor.ViewOrientationTypeEnum", "Imports Inventor.DrawingViewStyleEnum", "Dim oDrawingDoc as DrawingDocument\u00a0\u00a0 \u00a0", "Dim oPartDoc as Document", "Dim oSheet As sheet", "Dim oView1 as DrawingView", "Dim oView2 as DrawingView", "Dim oView3 as DrawingView", "Dim oView4 as DrawingView ", "ViewScale = 1", "'Ask to create drawing?", "dwgQuery=MsgBox(\"Would you like to Create a drawing for this MODEL?\", vbYesNo,\"Drawing Selection\")", "If dwgQuery = vbYes Then", "\u00a0\u00a0\u00a0 oPartDoc = ThisDoc.Document", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0\u00a0 'Check to see if part is a sheetmetal part", "\u00a0 \u00a0 If oPartDoc.SubType <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then ", "\u00a0 \u00a0\u00a0\u00a0 \u00a0 'do nothing ", "\u00a0\u00a0 \u00a0Else", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0'ensure this part has a flat pattern", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Dim oSMDef As SheetMetalComponentDefinition", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oSMDef = oPartDoc.ComponentDefinition", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0If oSMDef.FlatPattern Is Nothing Then ", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0'create flat pattern", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oSMDef.Unfold", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0oSMDef.FlatPattern.ExitEdit", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Else", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0'do nothing", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0end if ", "\u00a0\u00a0 \u00a0End if", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0\u00a0 'Define IDW Template File Location", "\u00a0\u00a0\u00a0 'oDrawingDoc = ThisApplication.Documents.Add(kDrawingDocumentObject, \"C:\\Temp\\my template.idw\", True)", "\u00a0\u00a0\u00a0 oDrawingDoc = ThisApplication.Documents.Add(kDrawingDocumentObject, \"\", True)", "\u00a0\u00a0 oSheet = oDrawingDoc.Sheets.Item(1)", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0\u00a0\u00a0\u00a0 ' Create a new NameValueMap object", "\u00a0 Dim oBaseViewOptions As NameValueMap", "\u00a0 oBaseViewOptions = ThisApplication.TransientObjects.CreateNameValueMap", "\u00a0", "\u00a0'True = folded view ", "\u00a0'False = flat pattern view", "\u00a0 oBaseViewOptions.Add(\"SheetMetalFoldedModel\", False) ", "\u00a0 \u00a0", "'Define 2d view bottom left corner points for four views", "oPoint1 = ThisApplication.TransientGeometry.CreatePoint2d(9, 10) ' front view", "oPoint2 = ThisApplication.TransientGeometry.CreatePoint2d(9, 14) ' top view", "oPoint3 = ThisApplication.TransientGeometry.CreatePoint2d(18, 10)' right view", "oPoint4 = ThisApplication.TransientGeometry.CreatePoint2d(20, 18)' flat pattern", "\u00a0\u00a0 \u00a0", "oBaseView = oSheet.DrawingViews.AddBaseView(oPartDoc,oPoint1, ViewScale,kFrontViewOrientation, kHiddenLineDrawingViewStyle, \"My View\")", "oView2 = oSheet.DrawingViews.AddProjectedView(oBaseView,oPoint2, kHiddenLineDrawingViewStyle, ViewScale)", "oView3 = oSheet.DrawingViews.AddProjectedView(oBaseView,oPoint3, kHiddenLineDrawingViewStyle, ViewScale) \u00a0", "oView4 = oSheet.DrawingViews.AddBaseView(oPartDoc,oPoint4, ViewScale,kDefaultViewOrientation, kHiddenLineDrawingViewStyle,,, oBaseViewOptions)", "End If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Allow an engineer to specify a part from a drawing\n                    ", "solution": ["    private void GetAssemblyFromDrawing() {\n        Inventor.DrawingDocument oDrawDoc = ThisApplication.ActiveDocument;\n        Inventor.Sheet oSheet = oDrawDoc.ActiveSheet;\n        // lets get the first assembly in a view\n        foreach (Inventor.DrawingView oView in oSheet.DrawingViews) {\n            //  we are only looking for an assembly \n            if ((oView.ReferencedDocumentDescriptor.ReferencedDocumentType == Inventor.DocumentTypeEnum.kAssemblyDocumentObject)) {\n                Inventor.AssemblyDocument oAsmDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument;\n                // use your original code from here\n                // this next line can be removed if you want to look at all assemblies in the active sheet views\n                break;\n            }\n        }\n    }"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: How to locate orphaned Dimensions on Drawing Document\n                    ", "solution": ["'Auto-Reattach Annotation\nThisApplication.CommandManager.ControlDefinitions.Item(\"DLxAnnoReconnectCmd\").Execute\n'Auto-Reattach Orphaned Annotations\nThisApplication.CommandManager.ControlDefinitions.Item(\"DLxAutoReattachSickAnnotationsCmd\").Execute"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Sheet Metal Part Orientation and Flat Pattern Views to Correspond in Space\n                    ", "solution": ["'Flip Base Face", "' Set a reference to the active document.", "Dim oPartDoc As PartDocument", "oPartDoc = ThisApplication.ActiveDocument", "'ensure this part has a flat pattern", "Dim oSMDef As SheetMetalComponentDefinition", "oSMDef = oPartDoc.ComponentDefinition", "If oSMDef.FlatPattern Is Nothing Then ", "'create flat pattern", "oSMDef.Unfold", "Else", "oSMDef.FlatPattern.Edit", "end if ", "'flip the flat pattern base face", "oSMDef.FlatPattern.FlipBaseFace", "'zoom all", "ThisApplication.ActiveView.Fit", "'Flip Alignment Type", "' Set a reference to the active document.", "Dim oPartDoc As PartDocument", "oPartDoc = ThisApplication.ActiveDocument", "'ensure this part has a flat pattern", "Dim oSMDef As SheetMetalComponentDefinition", "oSMDef = oPartDoc.ComponentDefinition", "If oSMDef.FlatPattern Is Nothing Then ", "'create flat pattern", "oSMDef.Unfold", "Else", "end if ", "'define alignment parameters", "Dim oAlignmentType as AlignmentTypeEnum", "Dim oAlignedTo as Object", "Dim oAlignmentDirection as Boolean", "'get current alignment parameters", "oSMDef.FlatPattern.GetAlignment(oAlignmentType, oAlignedTo, oAlignmentDirection) ", "'toggle alignment horizontal/ vertical parameter", "'kHorizontalAlignment = 64257 ", "'kVerticalAlignment = 64258 ", "if oAlignmentType = 64257  then ", "oAlignmentType = 64258", "else", "oAlignmentType = 64257 ", "end if", "oSMDef.FlatPattern.SetAlignment(oAlignmentType, oAlignedTo, oAlignmentDirection) ", "'zoom all", "ThisApplication.ActiveView.Fit", "'Reverse Alignment Direction", "'Set a reference to the active document.", "Dim oPartDoc As PartDocument", "oPartDoc = ThisApplication.ActiveDocument", "'ensure this part has a flat pattern", "Dim oSMDef As SheetMetalComponentDefinition", "oSMDef = oPartDoc.ComponentDefinition", "If oSMDef.FlatPattern Is Nothing Then ", "'create flat pattern", "oSMDef.Unfold", "Else", "end if ", "'define alignment parameters", "Dim oAlignmentType as AlignmentTypeEnum", "Dim oAlignedTo as Object", "Dim oAlignmentDirection as Boolean", "'get current alignment parameters", "oSMDef.FlatPattern.GetAlignment(oAlignmentType, oAlignedTo, oAlignmentDirection) ", "'toggle alignment reverse direction parameter", "if oAlignmentDirection = True then ", "oSMDef.FlatPattern.SetAlignment(oAlignmentType, oAlignedTo, False) ", "else", "oSMDef.FlatPattern.SetAlignment(oAlignmentType, oAlignedTo, True) ", "end if", "'zoom all", "ThisApplication.ActiveView.Fit"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Ilogic and analyze interference\n                    ", "solution": ["Sub Main\nDim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument\n\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = oAsmDoc.ComponentDefinition\n\n' Add each occurrence in the assembly to the object collection.\nDim oCheckSet As ObjectCollection\noCheckSet= ThisApplication.TransientObjects.CreateObjectCollection\nDim oOcc As ComponentOccurrence\nFor Each oOcc In oAsmCompDef.Occurrences\noCheckSet.Add (oOcc)\nNext\n\n' Call the AnalyzeInterference method, passing in a single\n' collection. This will cause it to compare everything against\n' everything else.\nDim oResults As InterferenceResults\noResults = oAsmCompDef.AnalyzeInterference(oCheckSet)\n\n' Display the results of the interference.\nMessageBox.Show(oResults.Count & \" Interferences found \",\"iLogic\")\n\nDim oResult As InterferenceResult\nDim iCount As Integer\niCount = 0\nFor Each oResult In oResults\niCount = iCount + 1\nComponent.Color(FullOccurrenceName(oResult.OccurrenceOne)) = \"Yellow\"\nComponent.Color(FullOccurrenceName(oResult.OccurrenceTwo)) = \"Magenta\"\nMessageBox.Show(\"     \" & FullOccurrenceName(oResult.OccurrenceOne) & \"      (colored yellow)\" _\n& vblf & \"interferes with \" _\n& vblf & \"     \" & FullOccurrenceName(oResult.OccurrenceTwo) & \"      (colored magenta)\" _\n& vblf & \"\" _\n& vblf & \"Volume: \" & round(oResult.Volume,5) & \" cm^3\", _\n\" Interference \"& iCount)\nComponent.Color(FullOccurrenceName(oResult.OccurrenceOne)) = \"As Material\"\nComponent.Color(FullOccurrenceName(oResult.OccurrenceTwo)) = \"As Material\"\n\nNext\n\nEnd Sub\n\n' Used to display the full path of an occurrence. This is the path of the\n' occurrence within the assembly structure.\nPrivate Function FullOccurrenceName(Occ As ComponentOccurrence) As String\nDim i As Integer\nFor i = 1 To Occ.OccurrencePath.Count\nIf i = 1 Then\nFullOccurrenceName = Occ.OccurrencePath.Item(i).Name\nElse\nFullOccurrenceName = FullOccurrenceName & \"\\\" & Occ.OccurrencePath.Item(i).Name\nEnd If\nNext\nEnd Function", "\toResult.OccurrenceOne.SetRenderStyle(100609,oAsmDoc.RenderStyles.Item(\"Yellow\"))", "Sub Main\nDim oAsmDoc As AssemblyDocument\noAsmDoc = ThisApplication.ActiveDocument\n\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = oAsmDoc.ComponentDefinition\n\n' Add each occurrence in the assembly to the object collection.\nDim oCheckSet As ObjectCollection\noCheckSet= ThisApplication.TransientObjects.CreateObjectCollection\nDim oOcc As ComponentOccurrence\nFor Each oOcc In oAsmCompDef.Occurrences\n     oCheckSet.Add (oOcc)\nNext\n\n' Call the AnalyzeInterference method, passing in a single\n' collection. This will cause it to compare everything against\n' everything else.\nDim oResults As InterferenceResults\noResults = oAsmCompDef.AnalyzeInterference(oCheckSet)\n\nDim oResult As InterferenceResult\nDim iCount As Integer\niCount = 0\nFor Each oResult In oResults\n\tIf oResult.Volume > .0001 Then\n\t\tiCount = iCount + 1\n\tEnd If\nNext", "' Display the results of the interference.\nMessageBox.Show(iCount & \" Interferences found \",\"iLogic\")\n\niCount = 0\nFor Each oResult In oResults\n\tIf oResult.Volume > .0001 Then\n\t\tiCount = iCount + 1\n\t\toResult.OccurrenceOne.SetRenderStyle(100609,oAsmDoc.RenderStyles.Item(\"Yellow\"))\n\t\toResult.OccurrenceTwo.SetRenderStyle(100609,oAsmDoc.RenderStyles.Item(\"Magenta\"))\n\t\t\n\t\tMessageBox.Show(\"     \" & FullOccurrenceName(oResult.OccurrenceOne) & \"      (colored yellow)\" _\n\t\t& vbLf & \"interferes with \" _\n\t\t& vbLf & \"     \" & FullOccurrenceName(oResult.OccurrenceTwo) & \"      (colored magenta)\" _\n\t\t& vbLf & \"\" _\n\t\t& vbLf & \"Volume: \" & Round(oResult.Volume,5) & \" cm^3\", _\n\t\t\" Interference \"& iCount)\n\t\t\n\t\toResult.OccurrenceOne.AppearanceSourceType = 100612 'kPartAppearance\n\t\toResult.OccurrenceTwo.AppearanceSourceType = 100612 'kPartAppearance\n\t\t\n\tEnd If\nNext\n\nEnd Sub\n\n' Used to display the full path of an occurrence. This is the path of the\n' occurrence within the assembly structure.\nPrivate Function FullOccurrenceName(Occ As ComponentOccurrence) As String\nDim i As Integer\nFor i = 1 To Occ.OccurrencePath.Count\nIf i = 1 Then\nFullOccurrenceName = Occ.OccurrencePath.Item(i).Name\nElse\nFullOccurrenceName = FullOccurrenceName & \"\\\" & Occ.OccurrencePath.Item(i).Name\nEnd If\nNext\nEnd Function"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic Automatic Drawing view Scale Label\n                    ", "solution": ["Dim oApp As Application: oApp = ThisApplication\nDim oDoc As DrawingDocument: oDoc = oApp.ActiveDocument\n\nDim oSheets As Sheets\nDim oSheet As Sheet\nDim oViews As DrawingViews\nDim oView As DrawingView\n\noSheets = oDoc.Sheets\n\nFor Each oSheet In oSheets\noViews = oSheet.DrawingViews\n\tFor Each oView In oViews\n\t\tSelect Case ActiveSheet.View(oView.Name).ScaleString\n\t\t\tCase \"1 : 1\"\n            ActiveSheet.View(oView.Name).ScaleString = \"1'=1'-0\" & Chr(34)\n\t\tEnd Select\n    Next\nNext"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: iLogic to change the view representation in a part file\n                    ", "solution": ["Dim odoc As Document\nDim ocompdef As ComponentDefinition\nodoc = ThisApplication.ActiveDocument\nocompdef = odoc.ComponentDefinition\nTry\nocompdef.RepresentationsManager.DesignViewRepresentations.Item(\"View1\").Activate\nCatch\nMessageBox.Show(\"This viewrep does not exist\", \"Error\")\nEnd Try"], "author": "bobvdd"},
{"created at": [], "solution Title": "\n                        Re: Link Levels of Detail via API\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: iLogic Controlled Sketch Symbol\n                    ", "solution": ["Dim oApp As Application: oApp = ThisApplication\nDim oDoc As DrawingDocument: oDoc = oApp.ActiveDocument\nDim oSheet As Sheet: oSheet = oDoc.ActiveSheet\n\n'This uses a sketch symbol with the name \"label\"\nDim oSymDef As SketchedSymbolDefinition: oSymDef = oDoc.SketchedSymbolDefinitions.Item(\"label\")\n\n'This is the selected view\nDim oView As DrawingView: oView = oDoc.SelectSet.Item(1)\n\n'This takes the label items of the selected view \n'And adds it To an array that will link To the prompted entry\nDim sPromptStrings(1) As String\nsPromptStrings(0) = oView.Name\nsPromptStrings(1) = oView.Scale\n\n'This is the position for the sketched symbol under the selected view\nDim oPosition As Point2d: oPosition = oView.Center\noPosition.y = oPosition.y - (oView.Height / 2 + 0.5)\n\n'This inserts the sketched symbol and fills in the prompted entry\nDim oSymbol As SketchedSymbol: oSymbol = oSheet.SketchedSymbols.Add(oSymDef, oPosition, , ,sPromptStrings)"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Doing translation on an arrow of a leader\n                    ", "solution": [], "author": "planglais"},
{"created at": [], "solution Title": "\n                        Re: Custom/user properties in view label of drawing template/style library?\n                    ", "solution": ["'start of ilogic code\nDim oDoc As DrawingDocument:  oDoc = ThisDoc.Document\noModel = ThisDoc.ModelDocument\n\nDim oSheets As Sheets\nDim oSheet As Sheet\nDim oViews As DrawingViews\nDim oView As DrawingView\n\noSheets = oDoc.Sheets\n\nFor Each oSheet In oSheets\noViews = oSheet.DrawingViews\n\tFor Each oView In oViews\n\toView.ShowLabel = true\n\t\tTry\n\t\t'get the property ID for these custom iProperties from the model referenced by the view\n\t\to_iPropID_1 = oModel.PropertySets.Item(\"User Defined Properties\").Item(\"My_iProp_1\").PropId\n\t\to_iPropID_2 = oModel.PropertySets.Item(\"User Defined Properties\").Item(\"My_iProp_2\").PropId\n\t\tCatch\n\t\t'here you could add a message that one or more of the custom iProperties were not found\n\t\tEnd Try\n\t\t\n\t\tTry\n\t\t'format the custom iproperty string and add the property ID\n\t\toString1 = \"<Property Document='model' PropertySet='User Defined Properties' \" _\n\t\t&  \"Property='My_iProp_1' FormatID='{D5CDD505-2E9C-101B-9397-08002B2CF9AE}' PropertyID='\" _\n\t\t& o_iPropID_1  & \"'>My_iProp_1</Property><Br/>\"\n\t\t'format the custom iproperty string and add the property ID\n\t\toString2 = \"<Property Document='model' PropertySet='User Defined Properties' \" _\n\t\t&  \"Property='My_iProp_2' FormatID='{D5CDD505-2E9C-101B-9397-08002B2CF9AE}' PropertyID='\" _\n\t\t& o_iPropID_2  & \"'>My_iProp_2</Property><Br/>\"\n\n\t\t'add the custom iproperties to the view label\n\t\toView.Label.FormattedText = \"<DrawingViewName/><Br/>\"  &  oString1 &  oString2\n\t\tCatch\n\t\t'do nothing if error\n\t\tEnd Try\n\tNext\nNext\n'end of ilogic code"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How to catch \"Undo\"?\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: matrix woes\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Delete Feature\n                    ", "solution": ["oDoc = ThisDoc.Document\noFeatures = oDoc.ComponentDefinition.Features\nTry \noFeatures(\"NameOfYourFeature\").Delete \nCatch \nMsgBox(\"No feature exists with that name\")\nEnd Try", "Public Sub RemoveFeature()\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument\n    Dim oFeature As PartFeature\n    Dim oFeatures As PartFeatures\n    Set oFeatures = oDoc.ComponentDefinition.Features\n    For Each oFeature In oFeatures\n        If oFeature.Name = \"NameOfYourFeature\" Then\n            oFeature.Delete\n        End If\n    Next\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: iLogic Excel Lookup Multiple Possible Finds?\n                    ", "solution": ["i = GoExcel.FindRow(\"c:\\temp\\testbook.xls\", \"Sheet1\", \"Height\", \"=\", 1800, \"Width\", \"=\", 500, \"Thickness\", \"=\", 20)"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Create Multi-value parameter with iLogic\n                    ", "solution": ["Imports  Inventor.UnitsTypeEnum\n\n\nDim oPartDoc As Document\noPartDoc = ThisDoc.Document\n\nIf oPartDoc.DocumentType = kPartDocumentObject Then", "\n\tDim oPartCompDef As PartComponentDefinition\n\t\toPartCompDef = oPartDoc.ComponentDefinition\n\t\t", "Dim oParams As Parameters\n\t\toParams=oPartCompDef.Parameters\n\t\t\t\t\n\t\tDim oUserParams As UserParameters\n\t\toUserParams=oParams.UserParameters       \n\t\t\n\t\tDim oAwesomeParameter As Parameter                     \n\t\t\t\t\n\t\tTry\n\t\t\totester = oUserParams.Item(\"AwesomeParameter\")\n\t\t\tCatch\noInsulationType=oUserParams.AddByValue(\"AwesomeParameter\", \"Option1\", kTextUnits) \nMultiValue.SetList(\"AwesomeParameter\", \"Option1\", \"Option2\", \"Option3\", \"Option4\")\n\t\t\tEnd Try\n            End If\n\nParameter.Param(\"AwesomeParameter\").ExposedAsProperty = False\nParameter.Param(\"AwesomeParameter\").IsKey = True", "Public Enum UnitsTypeEnum\n  kUnitlessUnits = 11265\n  kDefaultDisplayLengthUnits = 11266\n  kDatabaseLengthUnits = 11267\n  kCentimeterLengthUnits = 11268\n  kMillimeterLengthUnits = 11269\n  kMeterLengthUnits = 11270\n  kMicronLengthUnits = 11271\n  kInchLengthUnits = 11272\n  kFootLengthUnits = 11273\n  kYardLengthUnits = 11274\n  kMileLengthUnits = 11275\n  kDefaultDisplayAngleUnits = 11276\n  kDatabaseAngleUnits = 11277\n  kRadianAngleUnits = 11278\n  kDegreeAngleUnits = 11279\n  kGradAngleUnits = 11280\n  kDefaultDisplayMassUnits = 11281\n  kDatabaseMassUnits = 11282\n  kKilogramMassUnits = 11283\n  kGramMassUnits = 11284\n  kSlugMassUnits = 11285\n  kLbMassMassUnits = 11286\n  kOunceMassUnits = 11287\n  kDefaultDisplayTimeUnits = 11288\n  kDatabaseTimeUnits = 11289\n  kSecondTimeUnits = 11290\n  kMinuteTimeUnits = 11291\n  kHourTimeUnits = 11292\n  kDefaultDisplayTemperatureUnits = 11293\n  kDatabaseTemperatureUnits = 11294\n  kKelvinTemperatureUnits = 11295\n  kCelsiusTemperatureUnits = 11296\n  kFahrenheitTemperatureUnits = 11297\n  kMetersPerSecondSpeedUnits = 11298\n  kFeetPerSecondSpeedUnits = 11299\n  kMilesPerHourSpeedUnits = 11300\n  kAcreAreaUnits = 11301\n  kLiterVolumeUnits = 11302\n  kGallonVolumeUnits = 11303\n  kQuartVolumeUnits = 11304\n  kPintVolumeUnits = 11305\n  kCupVolumeUnits = 11306\n  kOunceVolumeUnits = 11307\n  kPascalPressureUnits = 11308\n  kPSIPressureUnits = 11309\n  kKSIPressureUnits = 11310\n  kNewtonForceUnits = 11311\n  kDyneForceUnits = 11312\n  kLbForceUnits = 11313\n  kOunceForceUnits = 11314\n  kWattPowerUnits = 11315\n  kHorsePowerPowerUnits = 11316\n  kJouleWorkUnits = 11317\n  kErgWorkUnits = 11318\n  kCalorieWorkUnits = 11319\n  kBTUWorkUnits = 11320\n  kRPMAngularVelocityUnits = 11321\n  kCompositeUnits = 11322\n  kNauticalMileLengthUnits = 11323\n  kMilLengthUnits = 11324\n  kSteradianAngleUnits = 11325\n  kCircularMilAreaUnits = 11326\n  kAmpElectricalCurrentUnits = 11327\n  kVoltElectricalVoltageUnits = 11328\n  kOhmElectricalResistanceUnits = 11329\n  kCoulombElectricalChargeUnits = 11330\n  kFaradElectricalCapacitanceUnits = 11331\n  kSiemensElectricalConductanceUnits = 11332\n  kmhoElectricalConductanceUnits = 11333\n  kWeberMagneticFluxUnits = 11334\n  kMaxwellMagneticFluxUnits = 11335\n  kTeslaMagneticInductionUnits = 11336\n  kGammaMagneticInductionUnits = 11337\n  kGaussMagneticInductionUnits = 11338\n  kHenryElectricalInductanceUnits = 11339\n  kOerstedMagneticInductionUnits = 11340\n  kHertzFrequencyUnits = 11341\n  kCandelaLuminousIntensityUnits = 11342\n  kLumenLuminousFluxUnits = 11343\n  kLuxIlluminationUnits = 11344\n  kMoleSubstanceUnits = 11345\n  kTextUnits = 11346\n  kBooleanUnits = 11347\nEnd Enum"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Set the document as Active Document\n                    ", "solution": [], "author": "santoshr0114"},
{"created at": [], "solution Title": "\n                        Re: Trying to build a VBA code in inventor 2010...help needed\n                    ", "solution": [], "author": "wayne.brill"},
{"created at": [], "solution Title": "\n                        Re: PutLineSegmentData is not semmingly working\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: rules triggered by events\n                    ", "solution": [], "author": "SmokyRick"},
{"created at": [], "solution Title": "\n                        Re: Change LOD in component\n                    ", "solution": [" Option Explicit\n\nImports Inventor.LevelOfDetailEnum\n\nSub Main\n\niLogicVb.UpdateWhenDone = True\n\nDim doc As AssemblyDocument\nDim oLOD As LevelOfDetailRepresentation\nDim oAsmCompDef As ComponentDefinition\nDim oComp As ComponentOccurrence\nDim oComps As ComponentOccurrences\n\ndoc = ThisDoc.Document\nIf doc.ComponentDefinition.RepresentationsManager.ActiveLevelOfDetailRepresentation.LevelOfDetail <> kCustomLevelOfDetail Then \n\toAsmCompDef = doc.ComponentDefinition\n\toLOD = oAsmCompDef.RepresentationsManager.LevelOfDetailRepresentations.Item(\"Custom\")\n\toLOD.Activate(True)\nEnd If\noComps = doc.ComponentDefinition.Occurrences\nOn Error Goto handle\nFor Each oComp In oComps\n\tIf oComp.Suppressed = False Then\n\t\tIf Not TypeOf oComp.Definition Is VirtualComponentDefinition Then\n\t\t\tIf oComp.ReferencedDocumentDescriptor.ReferencedDocumentType = kAssemblyDocumentObject Then\n\t\t\t\tIf oComp.ActiveLevelOfDetailRepresentation <> \"Custom\" Then \n\t\t\t\t\toComp.SetLevelOfDetailRepresentation(\"Custom\", True)\n\t\t\t\tEnd If\n\t\t\tEnd If\n\t\tEnd If\n\tEnd If\nNext\n\nExit Sub\n\nhandle:\nMsgBox(\"LOD releated error in: \" & oComp.Name, vbOKOnly, \"LOD error\")\n\nEnd Sub"], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Getting User Name in a VBA script\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Get the parts list from the BOM\n                    ", "solution": ["List<string> partsList = new List<string> ();\nDrawingDocument aDoc = (DrawingDocument)m_inventorApplication.ActiveDocument;\nSheet oSheet = aDoc.ActiveSheet;\n\nPartsList oPartsList = oSheet.PartsLists[1];\nint counter = 0;\nforeach (PartsListColumn oColumn in oPartsList.PartsListColumns)\n{\n\tcounter++;\n\tif(oColumn.Title == \"PART NUMBER\")\n\t{\n\t\tforeach (PartsListRow oRow in oPartsList.PartsListRows)\n\t\tif (oRow[counter].Value != null)\n\t\t{\n\t\t\tpartsList.Add (oRow[counter].Value);\n\t\t}\n\t}\n}\npartsList.Distinct();"], "author": "bsee1"},
{"created at": [], "solution Title": "\n                        Re: Handle event for button added inside Inventor User Interface\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Part-Stock number\n                    ", "solution": ["iProperties", ".", "Value", " ", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", " ", "=", " ", "InputBox", " ", "(", "\"", "What is the Part Number", "\"", ", ", "\"", "Part Number", "\"", ", ", "\"", "Enter the part number here", "\"", ")", "Dim", " ", "placeholder", " ", "As", " ", "Integer", " ", "Dim", " ", "iPartNumber", ", ", "stringholder", " ", "As", " ", "String", "iPartNumber", " ", "=", " ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", "placeholder", " ", "=", " ", "InStr", "(", "iPartNumber", ",", "\"", "-", "\"", ")", "If", " ", "placeholder", " ", ">", " ", "0", " ", "Then", "stringholder", " ", "=", " ", "Left", "(", "iPartNumber", ", ", "placeholder", "-", "1", ")", "iProperties", ".", "Value", " ", "(", "\"", "Project", "\"", ", ", "\"", "Stock Number", "\"", ")", " ", "=", " ", "stringholder", "Else", " ", "MessageBox", ".", "Show", "(", "\"", "There is no dash in your part number", "\"", ")", " ", "End", " ", "If", " "], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: ipropertie in text on part\n                    ", "solution": [], "author": "j.vanderheijden"},
{"created at": [], "solution Title": "\n                        Re: Collecting data\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Listening to Events(Python)\n                    ", "solution": [], "author": "xcrx"},
{"created at": [], "solution Title": "\n                        Re: iLogic 2013 - Create Yes/No property type\n                    ", "solution": ["Dim propertyName1 As String = \"Paint Code\"\nDim propertyName2 As String = \"Size\"\nDim propertyName3 As String = \"Galvanized\"\nDim propertyName4 As String= \"Completion Date\"\n\n'define custom prp[erty collection\noCustomPropertySet = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\")\n\nTry\n'set property value\noProp = oCustomPropertySet.Item(propertyName1)\nCatch\n' Assume error means not found so create it\noCustomPropertySet.Add(\"\", propertyName1)\nEnd Try\n\nTry\n'look for property \noProp = oCustomPropertySet.Item(propertyName2)\nCatch\n' Assume error means not found so create it\noCustomPropertySet.Add(\"\", propertyName2)\nEnd Try\n\nTry\n'look for property \noProp = oCustomPropertySet.Item(propertyName3)\nCatch\n' Assume error means not found so create it\noCustomPropertySet.Add(\"\", propertyName3)\nEnd Try\n\nTry\noProp = oCustomPropertySet.Item(propertyName4)\nCatch\n' Assume error means not found so create it\noCustomPropertySet.Add(\"\", propertyName4)\nEnd Try\n\nDim strPaintCode As String \nDim dblSize As Double\nDim blGalv As Boolean\nDim dtDate As Date\n\n'get values from user\nstrPaintCode = InputBox(\"Enter the paint code.\", \"iLogic\", \"\") 'no default value\ndblSize = InputBox(\"Enter the size.\", \"iLogic\", 100) 'set default to 100\nblGalv = InputRadioBox(\"Is this thing galvanized?\", \"Yes\", \"No\", True, \"iLogic\") 'default is True (yes)\ndtDate = InputBox(\"When was this completed?\", \"iLogic\", Now.ToString(\"MM/dd/yyyy\")) 'set default to today's date \n\n'set custom property values\niProperties.Value(\"Custom\", \"Paint Code\") = strPaintCode\niProperties.Value(\"Custom\", \"Size\") = dblSize\niProperties.Value(\"Custom\", \"Galvanized\") = blGalv\niProperties.Value(\"Custom\", \"Completion Date\") = dtDate \n\niLogicVb.UpdateWhenDone = True"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How to secure ilogic rule?\n                    ", "solution": [], "author": "swordmaster"},
{"created at": [], "solution Title": "\n                        Re: How to acquire the Iproperties information without opening the file?\n                    ", "solution": [], "author": "KentKeller"},
{"created at": [], "solution Title": "\n                        Re: Hide Custom Table Border with VB\n                    ", "solution": ["oFormat.OutsideLineColor = m_inventorApp.TransientObjects.CreateColor(255, 255, 255)"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Help me find a method for replacing iPart in the assembly?\n                    ", "solution": ["Public Sub replace2()\n\nDim oDoc As AssemblyDocument\nSet oDoc = ThisApplication.ActiveDocument\n\nDim oCompOcc As ComponentOccurrence\nDim oCompOccs As ComponentOccurrences\n\nSet oCompOccs = oDoc.ComponentDefinition.Occurrences\n\nDim oRefDoc As Document\n\nFor Each oCompOcc In oCompOccs\nSet oRefDoc = oCompOcc.Definition.Document\nIf oRefDoc.FullFileName = \"Part1-04.ipt\" Then\nCall oCompOcc.Replace(\"C:\\filepath\\Part2-04.ipt\", False)\nEnd If\n\nNext\nEnd Sub "], "author": "filat"},
{"created at": [], "solution Title": "\n                        Re: Command Manager and iLogic.Automation not working\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: OnFileOpenDialog - HandlingCodeEnum.kEventCanceled does not work\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: How to create a excel file using ilogic? Thanks\n                    ", "solution": ["'define the file to create/open", "myXLS_File = \"C:\\Temp\\Best_Excel_File_Ever.xls\"", "\u2018get the Inventor user name from the Inventor Options", "myName= ThisApplication.GeneralOptions.UserName", "'define Excel Application object", "excelApp = CreateObject(\"Excel.Application\")", "'set Excel to run visibly, change to false if you want to run it invisibly", "excelApp.Visible = True", "'suppress prompts (such as the compatibility checker)", "excelApp.DisplayAlerts = false", "'check for existing file ", "If Dir(myXLS_File) <> \"\" Then", "'workbook exists, open it", "excelWorkbook = excelApp.Workbooks.Open(myXLS_File)", "ExcelSheet = ExcelWorkbook.Worksheets(1)", "Else", "'workbook does NOT exist, so create a new one", "excelWorkbook = excelApp.Workbooks.Add", "End if", "'Insert data into Excel.", "With excelApp", "\u00a0\u00a0 \u00a0.Range(\"A1\").Select", "\u00a0\u00a0 \u00a0.ActiveCell.FormulaR1C1 = \"Hello, \" & myName", "End With\u00a0 \u00a0", "'set all of the columns to autofit", "excelApp.Columns.AutoFit\u00a0 \u00a0", "'save the file", "excelWorkbook.SaveAs (myXLS_File)", "''close the workbook and the Excel Application", "''uncomment if you want to close the xls file at the end", "'excelWorkbook.Close", "'excelApp.Quit", "'excelApp = Nothing\u00a0\u00a0 \u00a0 "], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Saving parts to new file location.\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Custom Panel-Inventor 2012\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Sweep with Guide Rail using API ??\n                    ", "solution": ["Public Sub SweepFeature()\n\n'reference the part doc\nDim oPartDoc As PartDocument\nSet oPartDoc = ThisApplication.ActiveDocument\n\n'reference to the sketches\nDim oSketches As PlanarSketches\nSet oSketches = oPartDoc.ComponentDefinition.Sketches\n\n'get the TOOL 1 sketch\nDim oSketch As PlanarSketch\nSet oSketch = oSketches.Item(\"TOOL 1\")\n\n' Create a profile from oSketch (TOOL 1)\nDim oProfile As Profile\nSet oProfile = oSketch.Profiles.AddForSolid\n\n'get the PATH sketch\nDim oSketch2 As PlanarSketch\nSet oSketch2 = oSketches.Item(\"PATH\")\n\n'get the first line in the sketch\nDim oSketchLine1 As SketchLine\nSet oSketchLine1 = oSketch2.SketchLines.Item(1)\n\n'set oSketchLine1 as the path\nDim oPath As Path\nSet oPath = oPartDoc.ComponentDefinition.Features.CreatePath(oSketchLine1)\n\n'get the RAIL 1 sketch (a 3D sketch in this case, not a planar sketch)\nDim oSketches3D As Sketches3D\nSet oSketches3D = oPartDoc.ComponentDefinition.Sketches3D\nDim oSketch3D As Sketch3D\nSet oSketch3D = oSketches3D.Item(\"RAIL 1\")\n\n'get the first spline in the sketch\nDim oSketchSpline As SketchSpline3D\nSet oSketchSpline = oSketch3D.SketchSplines3D.Item(1)\n\n'set the spline as the guide path\nDim oGuide As Path\nSet oGuide = oPartDoc.ComponentDefinition.Features.CreatePath(oSketchSpline)\n\n'do the sweep feature with Path and Guide Rail\nDim oSweep As SweepFeature\nSet oSweep = oPartDoc.ComponentDefinition.Features.SweepFeatures.AddUsingPathAndGuideRail(oProfile, oPath, oGuide, PartFeatureOperationEnum.kCutOperation, SweepProfileScalingEnum.kNoProfileScaling)\n\nEnd Sub"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: How to automatically find the current project folder(address) with ilogic?\n                    ", "solution": ["Dim IPJ as String\nDim IPJ_Name as String\nDim IPJ_Path as String\nDim FNamePos As Long\n'set a reference to the FileLocations object. \nIPJ = ThisApplication.FileLocations.FileLocationsFile\n'get the location of the last backslash seperator \nFNamePos = InStrRev(ThisApplication.FileLocations.FileLocationsFile, \"\\\", -1)     \n'get the project file name with the file extension\nIPJ_Name = Right(IPJ, Len(IPJ) - FNamePos) \n'get the project name (without extension)\nIPJ_ShortName = Left(IPJ_Name, Len(IPJ_Name) - 4)\n'get the path of the folder containing the project file\nIPJ_Folder_Location = Left(ThisApplication.FileLocations.FileLocationsFile, Len(IPJ) - Len(IPJ_Name))\n\nMessageBox.Show(\"Project Name: \" & IPJ_ShortName _\n& vblf & \"Project File Name: \" & IPJ_Name _\n& vblf & \"Project Path: \" & IPJ_Folder_Location _\n& vblf & \"Project Path and File Name: \" & ThisApplication.FileLocations.FileLocationsFile _\n, \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Want to get component name by selecting it in graphic window (vb.net)\n                    ", "solution": ["'get currently selected component\nDim oOccurrence as ComponentOccurrence\nTry\n  oOccurrence = ThisDoc.Document.SelectSet.Item(1)\nCatch\n  MessageBox.Show(\"Please select a component before running this rule.\", \"iLogic\")\n  Return\nEnd Try\n\nDim doc As Document\nDim CurFileName As String\n\n'set the selected item\noOccurrence = ThisApplication.ActiveDocument.SelectSet.Item(1)\n\n'get the selected item document occurrence name\ndoc = oOccurrence.Definition.Document\n\n'get the path and file name of the selected item\nCurFileName = doc.FullFileName\n\n'defines backslash as the subdirectory separator\nDim strCharSep As String = System.IO.Path.DirectorySeparatorChar\n\n'find the postion of the last backslash in the path\nFNamePos = InStrRev(CurFileName, \"\\\", -1)    \n'get the file name with the file extension\nName = Right(CurFileName, Len(CurFileName) - FNamePos)\n'get the file name (without extension)\nShortName = Left(Name, Len(Name) - 4)\n'get the path of the folder containing the file\nFolder_Location = Left(CurFileName, Len(CurFileName) - Len(Name))\n\nMessageBox.Show(\"File Name: \" & Name _\n& vblf & \"File Name without extension: \" & ShortName _\n& vblf & \"File Path: \" & Folder_Location _\n& vblf & \"Path and File Name: \" & CurFileName, \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Are there any prebuild functions for Calculus in ilogic?\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How to create external ilogic rule?\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Check if file is Inventor DWG or Acad DWG.\n                    ", "solution": [], "author": "djreesing"},
{"created at": [], "solution Title": "\n                        Re: iLogic Multi-Value list from Materials\n                    ", "solution": [], "author": "mies07"},
{"created at": [], "solution Title": "\n                        Re: Problem with the running order of iLogic Rules.\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: The unit of 2d sketch...\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: The conflict in the Addin\n                    ", "solution": ["Private Sub m_Perv(ByVal m_Doc As Inventor._AssemblyDocument)\n...\n\nPrivate Sub m_Pokr(ByVal m_Doc As Inventor._PartDocument)\n..."], "author": "filat"},
{"created at": [], "solution Title": "\n                        Re: add rule to an external rule prblems\n                    ", "solution": ["iProperties.Value(\"Project\", \"Designer\")= System.Environment.UserName"], "author": "Radioflyer651"},
{"created at": [], "solution Title": "\n                        Re: Accessing componentdDefinition from suppressed part\n                    ", "solution": [], "author": "bsee1"},
{"created at": [], "solution Title": "\n                        Re: How to use the EnumType Object ???\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: The questions of Inventor API help document\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: If named parameter unexisting\n                    ", "solution": [], "author": "fox999"},
{"created at": [], "solution Title": "\n                        Re: Renumber Balloons for iLogic... continued\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Lost all iLogic References\n                    ", "solution": [], "author": "meck"},
{"created at": [], "solution Title": "\n                        Re: How to run a rule in a part file from a rule in the drawing file\n                    ", "solution": ["oDoc = ThisApplication.ActiveDocument", "oDoc = ThisDoc.Document"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Getting original part display name\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: export partnumber to excel\n                    ", "solution": ["GoExcel.CellValue(\"", "M", ":", "\\", "AutoCAD", "\\", "AutoCAD", " ", "2012\\", "Inteco3D", "\\", "File Test", "\\", "ExportPartNumber.xlsx", "\", \"", "Sheet1", "\", \"", "A1", "\") = iProperties.Value(\"Project\", \"Part Number\")"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: FORM - AUTO OPEN\n                    ", "solution": ["iLogicForm", ".", "Show", "(", "\"", "Form 1", "\"", ")"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Inventor2012 - saveas IGES Options\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Get Home Camera\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Active Sheet\n                    ", "solution": ["Dim oDoc As DrawingDocument\n oDoc = ThisApplication.ActiveDocument\n \nDim strSheetName As String\n strSheetName = Left$(oDoc.ActiveSheet.Name,InStrRev(oDoc.ActiveSheet.Name, \":\") - 1)\n \n \n\n oDoc.ActiveSheet.Name = InputBox(\"ENTER SHEET NAME\", \"NAME THAT SHEET\", \"GIVE ME A NAME PLEASE\")"], "author": "jletcher"},
{"created at": [], "solution Title": "\n                        Re: iLogic script to show Master view of the assembly\n                    ", "solution": ["oApp = ThisApplication\nIf oApp.ActiveDocument.DocumentType = kAssemblyDocumentObject Then\n\toAsmCompDef = oApp.ActiveDocument.ComponentDefinition\n\t\tFor Each oViewRep In oAsmCompDef.RepresentationsManager.DesignViewRepresentations\n\t\t\tIf oViewRep.Name = \"Master\"  Then\n\t\t\t\toViewRep.Activate\n\t\t\t\tOn Error Resume Next\n\t\t\tElse \n\t\t\tEnd If\n\t\tNext\nElse\n\tMsgBox(\"Assembly Document Is Not Open\")\nEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: iLogic code for Visual styles - Shaded with edges\n                    ", "solution": ["Dim oView As View = ThisApplication.ActiveView\noView.DisplayMode = DisplayModeEnum.kShadedWithEdgesRendering\noView.Update"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Get file names from folder?\n                    ", "solution": [], "author": "augusto.goncalv"},
{"created at": [], "solution Title": "\n                        Re: Camera rotation within an assembly\n                    ", "solution": ["Public Sub RotateCamMacro()\n \n    Dim pi As Double\n    pi = Math.Atn(1) * 4\n    \n    'Rotation speed in Rad/Sec\n    Dim rotSpeedRad As Double\n    rotSpeedRad = 40 * pi / 180\n    \n    'Get part document\n    Dim doc As Document\n    Set doc = ThisApplication.ActiveDocument\n    \n    'Get range box center point\n    Dim centerPoint As point\n    Set centerPoint = GetRangeBoxCenter(doc)\n    \n    'Set camera orientation\n    Call SetCameraOrientation( _\n        centerPoint, _\n        ViewOrientationTypeEnum.kIsoTopRightViewOrientation)\n    \n    'Get Inventor camera\n    Dim camera As Inventor.camera\n    Set camera = ThisApplication.ActiveView.camera\n    \n    Dim totalRot As Double\n    totalRot = 0\n    \n    Dim offsetRad As Double\n    \n    Dim rotAxis As vector\n    Set rotAxis = ThisApplication.TransientGeometry.CreateVector(0, 1, 0)\n    \n    Dim upVector As UnitVector\n    Set upVector = ThisApplication.TransientGeometry.CreateUnitVector(0, 1, 0)\n    \n    Dim hiTimer As New hiTimer\n    hiTimer.ElapsedSeconds\n    \n    Do While (totalRot < 2 * pi)\n    \n        offsetRad = hiTimer.ElapsedSeconds * rotSpeedRad\n        \n        RotateCam camera, offsetRad, rotAxis, centerPoint, upVector\n        \n        totalRot = totalRot + offsetRad\n        \n    Loop\n    \n    Call SetCameraOrientation( _\n        centerPoint, _\n        ViewOrientationTypeEnum.kIsoTopRightViewOrientation)\n    \nEnd Sub\n\nPublic Function GetRangeBoxCenter(ByVal doc As Document) As point\n\n    Dim minPoint As point\n    Set minPoint = doc.ComponentDefinition.RangeBox.minPoint\n    \n    Dim maxPoint As point\n    Set maxPoint = doc.ComponentDefinition.RangeBox.maxPoint\n    \n    Set GetRangeBoxCenter = ThisApplication.TransientGeometry.CreatePoint( _\n        (minPoint.X + maxPoint.X) * 0.5, _\n        (minPoint.Y + maxPoint.Y) * 0.5, _\n        (minPoint.Z + maxPoint.Z) * 0.5)\n\nEnd Function\n\nPublic Sub SetCameraOrientation( _\n    ByVal targetPoint As point, _\n    ByVal viewOrientation As ViewOrientationTypeEnum)\n\n    Dim camera As Inventor.camera\n    Set camera = ThisApplication.ActiveView.camera\n    \n    camera.ViewOrientationType = viewOrientation\n    camera.target = targetPoint\n    \n    Call camera.Fit\n    Call camera.ApplyWithoutTransition\n\nEnd Sub\n\nPublic Sub RotateCam( _\n    camera As camera, _\n    ByVal offsetRad As Double, _\n    rotAxis As vector, _\n    center As point, _\n    upVector As UnitVector)\n\n    Dim matrix As matrix\n    Set matrix = ThisApplication.TransientGeometry.CreateMatrix\n    \n    Call matrix.SetToRotation(offsetRad, rotAxis, center)\n    \n    Dim newEye As point\n    Set newEye = camera.eye\n    \n    Call newEye.TransformBy(matrix)\n    \n    camera.eye = newEye\n    \n    camera.upVector = upVector\n    \n    Call camera.ApplyWithoutTransition\n    \nEnd Sub", "Option Explicit\n\nPrivate Declare Function GetTickCount Lib \"kernel32\" () As Long\n\nPrivate Declare Function QueryPerformanceFrequency Lib \"kernel32\" (lpFrequency As Currency) As Long\nPrivate Declare Function QueryPerformanceCounter Lib \"kernel32\" (lpPerformanceCount As Currency) As Long\n\nPrivate dtStart As Long\nPrivate mHiFreq As Currency\nPrivate mHiStartTime As Currency\n\nPublic Function ElapsedSeconds() As Double\n\n    Dim elapsed As Double\n    Dim dtEnd As Long\n\n    dtEnd = GetTickCount\n   \n    elapsed = (dtEnd - dtStart) * 0.001\n    dtStart = dtEnd\n    \n    ElapsedSeconds = elapsed\n\nEnd Function\n\nPublic Sub start()\n\n    QueryPerformanceFrequency (mFreq)\n    QueryPerformanceCounter (mStartTime)\n    \n    ElapsedSeconds\n    \nEnd Sub\n \nPublic Property Get HiElapsedSeconds() As Double\n\n    Dim NewTime As Currency\n    QueryPerformanceCounter (NewTime)\n    \n    HiElapsedSeconds = (NewTime - mStartTime) / mFreq\n    \n    mStartTime = NewTime\n    \nEnd Property"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Open Drawing Update error\n                    ", "solution": [], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: change code\n                    ", "solution": ["Dim", " ", "PlaceHolder", " ", "As", " ", "Integer", "Dim", " ", "iPPartNumber", ", ", "StringHolder", ", ", "ItemPart", " ", "As", " ", "String", "Dim", " ", "BasePartNumber", ", ", "ItemCodeNumber", ", ", "TotalCodeNumber", " ", "As", " ", "Integer", "PlaceHolder", " ", "=", " ", "0", "While", " ", "PlaceHolder", " ", "<", " ", "1", "StringHolder", " ", "=", " ", "InputBox", " ", "(", "\"", "What is the Part Number?", "\"", ", ", "\"", "Part Number", "\"", ", ", "_", "\"", "Enter the part number here.", "\"", ")", " ", "PlaceHolder", " ", "=", " ", "InStr", "(", "StringHolder", ",", "\"", "-", "\"", ")", "If", " ", "PlaceHolder", " ", ">", " ", "0", " ", "Then", "    ", "If", " ", "PlaceHolder", "-", "1", " ", ">", " ", "3", " ", "Then", "        ", "If", " ", "IsNumeric", "(", "PlaceHolder", "-", "1", ")", " ", "=", " True", "            ", "BasePartNumber", " ", "=", " ", "Left", "(", "StringHolder", ", ", "3", ")", "            ", "ItemCodeNumber", " ", "=", " ", "Mid", "(", "StringHolder", ", ", "4", ", ", "PlaceHolder", "-", "4", ")", "            ", "TotalCodeNumber", " ", "=", " ", "BasePartNumber", " ", "+", " ", "ItemCodeNumber", "            ", "ItemPart", " ", "=", " ", "TotalCodeNumber", " ", "&", " ", "Mid", "(", "StringHolder", ", ", "_", "            ", "PlaceHolder", ", ", "Len", "(", "StringHolder", ")", " ", "-", " ", "(", "PlaceHolder", "-", "1", "))", "  ", "            ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", " ", "=", " ", "ItemPart", " ", "            ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Stock Number", "\"", ")", " ", "=", " ", "BasePartNumber", "            ", "Else", "            ", "MessageBox", ".", "Show", "(", "\"", "Please only use valid numbers for your part code!", "\"", ", ", "_", "            ", "\"", "Non-Numerical Entry", "\"", ")", "        ", "End", " ", "If", "    ", "Else", " ", "    ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", " ", "=", " ", "StringHolder", " ", "    ", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Stock Number", "\"", ")", " ", "=", " ", "_", "    ", "Left", "(", "StringHolder", ", ", "PlaceHolder", "-", "1", ")", "    ", "End", " ", "If", "Else", "MessageBox", ".", "Show", "(", "\"", "Please use a dash when creating your part number.", "\"", ",", "\"", "No Dash In Part Number", "\"", ")", "End", " ", "If", "End", " ", "While", "'", "            MessageBox.Show(\"Base Part Number : \" & BasePartNumber, \"\") ", "'", "            MessageBox.Show(\"Item Code Number : \" & ItemCodeNumber, \"\") ", "'", "            MessageBox.Show(\"TotalCodeNumber : \" & TotalCodeNumber, \"\") ", "'", "            MessageBox.Show(\"Item Part :\" & ItemPart, \"\")", "'", "StringHolder = iProperties.Value (\"Project\", \"Part Number\")"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: find macro\n                    ", "solution": [], "author": "ADNpati"},
{"created at": [], "solution Title": "\n                        Re: Panel width bug\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: iLogic - To skip saving a suppressed component / delete a suppressed compone\n                    ", "solution": ["oAsmDoc = ThisDoc.Document\noCompDef = oAsmDoc.ComponentDefinition\nDim oCompOcc As ComponentOccurrence\n    'Find all occurrences\n    For Each oCompOcc In oCompDef.Occurrences\n        'If the occurrence is a part and suppressed, delete it\n        If oCompOcc.DefinitionDocumentType = kPartDocumentObject And oCompOcc.Suppressed = True Then\n            oCompOcc.Delete\n        End If\n    Next"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: IV 2012 API (VBA) - Assembly Constraint Entity Type IDispatch\n                    ", "solution": ["Sub test()\n\n   Dim oAsmDoc As AssemblyDocument\n    Set oAsmDoc = ThisApplication.ActiveDocument\n\n     Dim oAsmCompDef As AssemblyComponentDefinition\n     Set oAsmCompDef = oAsmDoc.ComponentDefinition\n\n     Dim oConstraints As AssemblyConstraints\n    Set oConstraints = oAsmCompDef.Constraints\n\n     Dim oCons As AssemblyConstraint\n     Set oCons = oConstraints(1)\n        \n     Dim oEntityOne As Object\n     Set oEntityOne = oCons.EntityOne\n\n     'way1\n     If TypeOf oEntityOne Is EdgeProxy Then\n\n     End If\n\n     'way2\n     Dim objType As ObjectTypeEnum\n     objType = oEntityOne.Type\n     If objType = kEdgeProxyObject Then\n      \n     End If\n     \n    \nEnd Sub"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Part List Export Problem\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: IDW sheets to PDF by PDFAddIn - first 9 files are OK rest are 0 KB\n                    ", "solution": [], "author": "radugc"},
{"created at": [], "solution Title": "\n                        Re: automaticly save an assembly macro\n                    ", "solution": ["Sub SaveAssembly()\n    Dim oAssDoc As AssemblyDocument\n    Set oAssDoc = ThisApplication.ActiveDocument\n    Call oAssDoc.SaveAs (\"O:\\Projects\\clientName\\ClientProject1\\ClientProject1.iam\", False)\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Split a 3dline with Planes (3D sketch)\n                    ", "solution": ["Sub Split_Line_By_Workplane()\n\n  ' Set a reference to the transient geometry collection.\n  Dim oTG As TransientGeometry\n  Set oTG = ThisApplication.TransientGeometry\n  \n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim oDef As PartComponentDefinition\n  Set oDef = oDoc.ComponentDefinition\n  \n  ' Set a reference to the active sketch\n  Dim oSketch3D As Sketch3D\n  Set oSketch3D = oDef.Sketches3D.Item(1)\n  \n  'some workplane\n  Dim oWP As WorkPlane\n  Set oWP = oDef.WorkPlanes.Item(1)\n  \n  'some SketchLine3D object\n  Dim oSketchLine3D As SketchLine3D\n  Set oSketchLine3D = oSketch3D.SketchLines3D.Item(1)\n  \n  '--- find intersection point ---\n  \n  Dim oLineSegment As LineSegment\n  Set oLineSegment = oSketchLine3D.Geometry\n  Dim oObjectsEnumerator As ObjectsEnumerator\n  Set oObjectsEnumerator = oLineSegment.IntersectWithSurface(oWP.Plane)\n  If oObjectsEnumerator Is Nothing Then\n    MsgBox \"No intersection\"\n    Exit Sub\n  End If\n  \n  'sketch 3D-points collection\n  Dim oSkPoints3d As SketchPoints3D\n  Set oSkPoints3d = oSketch3D.SketchPoints3D\n  \n  'SketchPoint3D at the intersection point\n  Dim oPoint As Point\n  Set oPoint = oObjectsEnumerator.Item(1)\n  Dim oP0 As SketchPoint3D\n  Set oP0 = oSkPoints3d.Add(oPoint)\n  oP0.HoleCenter = False\n  \n  \n  'start point\n  Dim oP1 As SketchPoint3D\n  Set oP1 = oSketchLine3D.StartSketchPoint\n  \n  'end point\n  Dim oP2 As SketchPoint3D\n  Set oP2 = oSketchLine3D.EndSketchPoint\n  \n  'save end point in the new point\n  Dim oP3 As SketchPoint3D\n  Set oP3 = oSkPoints3d.Add(oSketchLine3D.EndSketchPoint.Geometry)\n  oP3.HoleCenter = False\n  \n  'shorten source line moving\n  'old end point to the intersection point\n  Call oP2.ConnectTo(oP0)\n  \n  'create the second line\n  Dim oSketchLine3d2 As SketchLine3D\n  Set oSketchLine3d2 = oSketch3D.SketchLines3D.AddByTwoPoints(oP0, oP3)\n  \n  'add collinear constraint if needed\n  Dim oGeomConstraints As GeometricConstraints3D\n  Set oGeomConstraints = oSketch3D.GeometricConstraints3D\n  Call oGeomConstraints.AddCollinear(oSketchLine3D, oSketchLine3d2)\n  \nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Counting UP and DOWN bends?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Unspecified error (Exception from HRESULT: 0x80004005 (E_FAIL))\n                    ", "solution": ["oDrawingSketch = oBaseView.Sketches.Add\n", "\u00a0\u00a0\u00a0 oDrawingSketch.Edit", "\u00a0\u00a0\u00a0 oSketchLine = oDrawingSketch.SketchLines.AddByTwoPoints(oPoint5, oPoint6)", "\u00a0\u00a0\u00a0 oDrawingSketch.ExitEdit"], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: Select Case in External ilogic rule\n                    ", "solution": ["Thickness = Parameter(\"Thickness\")\nMsgBox(\"Thickness is \" & Thickness)\nstock = iProperties.Value(\"Project\", \"Stock Number\")\nSelect Case Thickness\n\tCase 2: stock = 686001\n\tCase 4: stock = 686002\n\tCase 3: stock = 686003\nEnd Select\nMsgBox(\"Stock is \" & stock)\niLogicVb.UpdateWhenDone = True"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: VB to change Custom Table Title and Header Cell / Row Height\n                    ", "solution": ["Public Sub CreateCustomTable()\n    ' Set a reference to the drawing document.\n    ' This assumes a drawing document is active.\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n    \n    ' Set a reference to the active sheet.\n    Dim oSheet As Sheet\n    Set oSheet = oDrawDoc.ActiveSheet\n    \n    ' Set the column titles\n    Dim oTitles(1 To 3) As String\n    oTitles(1) = \"Part Number\"\n    oTitles(2) = \"Quantity\"\n    oTitles(3) = \"Material\"\n    \n    ' Set the contents of the custom table (contents are set row-wise)\n    Dim oContents(1 To 9) As String\n    oContents(1) = \"1\"\n    oContents(2) = \"1\"\n    oContents(3) = \"Brass\"\n    oContents(4) = \"2\"\n    oContents(5) = \"2\"\n    oContents(6) = \"Aluminium\"\n    oContents(7) = \"3\"\n    oContents(8) = \"1\"\n    oContents(9) = \"Steel\"\n    \n    ' Set the column widths (defaults to the column title width if not specified)\n    Dim oColumnWidths(1 To 3) As Double\n    oColumnWidths(1) = 2.5\n    oColumnWidths(2) = 2.5\n    oColumnWidths(3) = 4\n      \n      Dim oRowHeights_FS(2) As Double\noRowHeights_FS(0) = 1\noRowHeights_FS(1) = 1\noRowHeights_FS(2) = 1\n \n \n     oDrawDoc.StylesManager.ActiveStandardStyle.ActiveObjectDefaults.TableStyle.HeadingGap = 1\n    \n    ' Create the custom table\n    Dim oCustomTable As CustomTable\n    Set oCustomTable = oSheet.CustomTables.Add(\"My Table\", ThisApplication.TransientGeometry.CreatePoint2d(15, 15), _\n                                        3, 3, oTitles, oContents, oColumnWidths, oRowHeights_FS)\n   \n    \nEnd Sub"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Store object inside document\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Create Imates on Workpoints\n                    ", "solution": ["Private Sub CreateiMateDefinitionSample()\n    ' Set a reference to the active part document\n    Dim oPartDoc As PartDocument\n    Set oPartDoc = ThisApplication.ActiveDocument\n    ' Set a reference to the component definition.\n    Dim oCompDef As PartComponentDefinition\n    Set oCompDef = oPartDoc.ComponentDefinition\n    'some work axis\n    Dim oAxis As WorkAxis\n    Set oAxis = oCompDef.WorkAxes.Item(\"MyAxis\")\n    'some work point\n    Dim oWP As WorkPoint\n    Set oWP = oCompDef.WorkPoints.Item(\"MyPoint\")\n\n    ' Create a mate iMateDefinition on a work point\n    Dim oMateiMateDefinition1 As MateiMateDefinition\n    Set oMateiMateDefinition1 = oCompDef _\n      .iMateDefinitions.AddMateiMateDefinition( _\n          oWP, 0, , , \"MatePoint\")\n\n    ' Create a mate iMateDefinition on a work axis\n    Dim oMateiMateDefinition2 As MateiMateDefinition\n    Set oMateiMateDefinition2 = oCompDef _\n      .iMateDefinitions.AddMateiMateDefinition( _\n          oAxis, 0, , , \"MateAxis\")\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: COMException was unhandled when calling PDFAddin.SaveCopyAs\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Betreff: Highlight Part or Assembly\n                    ", "solution": ["Private Sub Sample()\n    Dim oAssyDoc As AssemblyDocument\n    Set oAssyDoc = ThisApplication.ActiveDocument\n    Dim oOcc As ComponentOccurrence\n    'Set oOcc = GetFirstOccMatchingName(oAssyDoc, \"C:\\path\\filename.ipt\")\n    Dim oOccs As ObjectCollection\n    Set oOccs = GetAllOccurencesMatchingFileName(oAssyDoc, \"C:\\path\\filename.ipt\")\n    Call oAssyDoc.SelectSet.SelectMultiple(oOccs)\nEnd Sub\n\nPrivate Function GetAllOccurencesMatchingFileName(oAssyDoc As AssemblyDocument, fullFileName As String) As ObjectCollection\n    Dim oOccs As ObjectCollection\n    Set oOccs = ThisApplication.TransientObjects.CreateObjectCollection()\n    Dim oOcc As ComponentOccurrence\n    Dim oDoc As Document\n    For Each oOcc In oAssyDoc.ComponentDefinition.Occurrences\n        Set oDoc = oOcc.Definition.Document\n        If oDoc.FullDocumentName Like fullFileName Then\n            Call oOccs.Add(oOcc)\n        End If\n    Next\n    Set GetAllOccurencesMatchingFileName = oOccs\nEnd Function"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: LineSegment2d.IntersectWithCurve Method with DrawingCurveSegment object\n                    ", "solution": [], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Generate derived part\n                    ", "solution": ["Sub Main\n\n    'Step 0:  reference to active part\n    Dim oSourcePartDoc As PartDocument _\n          = CType(ThisApplication.ActiveDocument, PartDocument)\n\t\t  \n'\tDim oSourcePartDoc As PartDocument = CType(ThisDoc.Document, PartDocument)\n\n    'Step 1:  create outer body Body2 using shrinkwrap\n    Dim oOuterPartDoc As PartDocument = ShrinkWrap(oSourcePartDoc)\n\n    'Step 2:  create new part derived source and shrinkwrap bodies\n    '         and subtract Body1 (source) from Body2 (outer)  \n    Dim oResultDoc As PartDocument = SubtractPart(oSourcePartDoc, oOuterPartDoc)\n\n    oResultDoc.Views.Add()\n\n    ThisApplication.SilentOperation = True\n    Call oOuterPartDoc.Save()\n    Call oOuterPartDoc.Close()\n    ThisApplication.SilentOperation = False\n\n    Beep()\nEnd Sub 'Main\n\n\n  Function ShrinkWrap(ByVal oSourcePartDoc As PartDocument) As PartDocument\n\n    Dim oTG As TransientGeometry = ThisApplication.TransientGeometry\n\n    'active project workspace path\n    Dim oProjectManager As DesignProjectManager = ThisApplication.DesignProjectManager\n    Dim oActiveDesignProject As DesignProject = oProjectManager.ActiveDesignProject\n    Dim WorkspacePath As String = oActiveDesignProject.WorkspacePath\n\n\n    ' Create new assembly document\n    Dim oAssyDoc As AssemblyDocument = CType(ThisApplication.Documents _\n        .Add(DocumentTypeEnum.kAssemblyDocumentObject, , False),  _\n             AssemblyDocument)\n    'assembly definition\n    Dim oAssyDef As AssemblyComponentDefinition = oAssyDoc.ComponentDefinition\n\n    'Add the source component\n    Dim oMatrix As Matrix = oTG.CreateMatrix\n    Dim oOcc As ComponentOccurrence = oAssyDef.Occurrences _\n          .AddByComponentDefinition(CType( _\n            oSourcePartDoc.ComponentDefinition,  _\n            ComponentDefinition), oMatrix)\n    oOcc.Name = \"Manifold\"\n\n    ' create filename for this assembly and save it\n    Dim AssyFilename As String = WorkspacePath & \"\\TemporaryAssy.iam\"\n\t\n'\tMsgBox(AssyFilename)\n\t\n    ThisApplication.SilentOperation = True\n    oAssyDoc.SaveAs(AssyFilename, False)\n    ThisApplication.SilentOperation = False\n\t\n'\tMsgBox(\"Saved\")\n\n    ' Create a new part document that will be the shrinkwrap substitute\n    Dim oPartDoc As PartDocument = CType(ThisApplication.Documents _\n        .Add(DocumentTypeEnum.kPartDocumentObject, , False),  _\n             PartDocument)\n\n    Dim oPartDef As PartComponentDefinition = oPartDoc.ComponentDefinition\n    Dim oDerivedAssemblyDef As DerivedAssemblyDefinition _\n        = oPartDef.ReferenceComponents.DerivedAssemblyComponents _\n            .CreateDefinition(oAssyDoc.FullDocumentName)\n\n    ' Set various shrinkwrap related options\n    oDerivedAssemblyDef.DeriveStyle _\n        = DerivedComponentStyleEnum.kDeriveAsSingleBodyNoSeams\n    oDerivedAssemblyDef.IncludeAllTopLeveliMateDefinitions _\n        = DerivedComponentOptionEnum.kDerivedExcludeAll\n    oDerivedAssemblyDef.IncludeAllTopLevelParameters _\n        = DerivedComponentOptionEnum.kDerivedExcludeAll\n    oDerivedAssemblyDef.ReducedMemoryMode = True\n\n    Call oDerivedAssemblyDef.SetHolePatchingOptions( _\n            DerivedHolePatchEnum.kDerivedPatchAll)\n\n\n    ' Create the shrinkwrap component\n    Dim oDerivedAssembly As DerivedAssemblyComponent _\n      = oPartDef.ReferenceComponents.DerivedAssemblyComponents _\n        .Add(oDerivedAssemblyDef)\n\n    ' Save the part\n    Dim PartFilename As String = WorkspacePath & \"\\OuterPart.ipt\"\n    ThisApplication.SilentOperation = True\n    Call oPartDoc.SaveAs(PartFilename, False)\n    ThisApplication.SilentOperation = False\n\n\n    ' Create a substitute level of detail using the shrinkwrap part.\n    Dim oSubstituteLOD As LevelOfDetailRepresentation = oAssyDef _\n         .RepresentationsManager.LevelOfDetailRepresentations _\n            .AddSubstitute(PartFilename)\n    oSubstituteLOD.Name = \"OuterBody\"\n\n    ThisApplication.SilentOperation = True\n    Call oAssyDoc.Save()\n    Call oAssyDoc.Close()\n    ThisApplication.SilentOperation = False\n\n    Return oPartDoc\n\n  End Function 'ShrinkWrap\n  \n  \n  \n\n  Function SubtractPart(ByVal oSourcePartDoc As PartDocument, _\n                        ByVal oOuterPartDoc As PartDocument) _\n                      As PartDocument\n    'create new part \n    Dim oDoc As PartDocument = CType(ThisApplication.Documents _\n        .Add(DocumentTypeEnum.kPartDocumentObject, , False),  _\n             PartDocument)\n    Dim oDef As PartComponentDefinition = oDoc.ComponentDefinition\n\n    ' Create the derived part 1 - Source body\n    Dim oDerivedPartDef As DerivedPartUniformScaleDef _\n          = oDef.ReferenceComponents.DerivedPartComponents _\n            .CreateUniformScaleDef(oSourcePartDoc.FullFileName)\n    Call oDef.ReferenceComponents.DerivedPartComponents _\n          .Add(CType(oDerivedPartDef, DerivedPartDefinition))\n\n    ' Create the derived part 2 - Outer body\n    oDerivedPartDef = oDef.ReferenceComponents.DerivedPartComponents _\n            .CreateUniformScaleDef(oOuterPartDoc.FullFileName)\n    Call oDef.ReferenceComponents.DerivedPartComponents _\n          .Add(CType(oDerivedPartDef, DerivedPartDefinition))\n\n\n    'Subtract bodies\n    Dim oColl As ObjectCollection = ThisApplication _\n          .TransientObjects.CreateObjectCollection\n\n    Dim oCombineFeatures As CombineFeatures = oDef.Features.CombineFeatures\n    Dim oBody1 As SurfaceBody = oDef.SurfaceBodies.Item(1)\n    Dim oBody2 As SurfaceBody = oDef.SurfaceBodies.Item(2)\n    Call oColl.Add(oBody1)\n\n    Dim oCF As CombineFeature = oCombineFeatures _\n        .Add(oBody2, oColl, PartFeatureOperationEnum.kCutOperation, False)\n\n    Return oDoc\n\n  End Function 'SubtractPart\n"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How to create a custom sketch ribbon\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Inventor Template Customization\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Imitating Full Navigation Wheel orbit/pan/zoom through COM API and VB.NET\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Get environment variable to run external iLogic rule\n                    ", "solution": [], "author": "mkoechl"},
{"created at": [], "solution Title": "\n                        Re: Ilogic : Perform a CODE using iproperty information\n                    ", "solution": ["Private Sub TestFormat()\n    Dim length As Integer\n    length = 600\n    Dim code As String\n    code = Format(600, \"000000000000\")\nEnd Sub"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: VBA: Access PartDocume\u200bnt object of iPart Factory, given iPart Member.\n                    ", "solution": ["Public Sub PartTest()\n    Dim oPartDoc As PartDocument\n    Set oPartDoc = ThisApplication.ActiveDocument\n    MsgBox (oPartDoc.ReferencedDocumentDescriptors(1).FullDocumentName)\nEnd Sub"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: Determining ipt file type\n                    ", "solution": ["Public Sub PartTest()\n    Dim oPartDoc As PartDocument\n    Set oPartDoc = ThisApplication.ActiveDocument\n    If oPartDoc.ComponentDefinition.Type = kPartComponentDefinitionObject Then\n        MsgBox (\"Standard part\")\n\n    ElseIf oPartDoc.ComponentDefinition.Type = kSheetMetalComponentDefinitionObject Then\n        MsgBox (\"SheetMetal\")\n    End If\nEnd Sub"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: Find Size of IDW File\n                    ", "solution": ["Private Sub Sample()\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n    Dim oSheet As Sheet\n    For Each oSheet In oDrawDoc.Sheets\n        MsgBox (oSheet.Size)\n    Next\nEnd Sub"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: Is there a way to target .net 4 for an Inventor 2012 add-in?\n                    ", "solution": [], "author": "FarrenYoung"},
{"created at": [], "solution Title": "\n                        Re: ilogic code to change View Label Text\n                    ", "solution": ["Dim oSSet As SelectSet = ThisDoc.Document.SelectSet\nIf oSSet.count = 0 Then\n\tMessageBox.Show(\"You must select a drawing view first\", \"iLogic\")\nExit Sub\nEnd If\n\n'Reference to the drawing view from the 1st selected object\nDim oView As DrawingView = trycast(oSSet.item(1), DrawingView)\n\nIf oView IsNot Nothing Then\noView.ShowLabel = True\n'format the model iproperties\t\noDescription = \"<StyleOverride Underline='True'><Property Document='model' PropertySet='Design Tracking Properties' Property='Description' FormatID='{32853F0F-3444-11D1-9E93-0060B03C1CA6}' PropertyID='29'>DESCRIPTION</Property></StyleOverride>\"\noPartNumber = \"<StyleOverride Underline='True'> - Mk <Property Document='model' PropertySet='Design Tracking Properties' Property='Part Number' FormatID='{32853F0F-3444-11D1-9E93-0060B03C1CA6}' PropertyID='5'>PART NUMBER</Property></StyleOverride>\"\noStringMass = \"<Br/><StyleOverride Underline='False' FontSize='0.35'>EST UNIT MASS = <PhysicalProperty PhysicalPropertyID='72449' Precision='2'>MASS</PhysicalProperty></StyleOverride>\"\noStringScale = \"<Br/><StyleOverride FontSize='0.3'>(Scale <DrawingViewScale/>)</StyleOverride>\"\n\n'add to the view label\noView.Label.FormattedText =  oDescription & oPartNumber & oStringMass & oStringScale\t    \n\nElse\n\tMessageBox.Show(\"The selected object is not a drawing view\", \"iLogic\")\nEnd If\n\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Marshal.GetActiveObject(\"Inventor.Application\") fails with CO_E_CL\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: MBP - deriving base dim\u00b4s into Assembly BOM of regular shapes\n                    ", "solution": ["' get ComponentDefinition of the assembly\nDim oAsmCompDef  \noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n'Iterate the occurrences\nDim oOcc As ComponentOccurrence\n\n'define a array to store the names of occurrences\nDim myArrayList As New ArrayList\nFor Each oOcc In oAsmCompDef.Occurrences\n  myArrayList.add(oOcc.Name) \nNext\n\n'ask  the user to select \noSelectV = InputListBox(\"Select from the list\", myArrayList, myArrayList.Item(0), \"iLogic\", \"Occurrence Names\")\n"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Custom Table coming out with garbled text ??\n                    ", "solution": ["Function TransformTitle(ByVal St As String) As String\n  Dim ChArray() As Char = { _\n        \"A\"c, \"B\"c, \"C\"c, \"F\"c, \"G\"c, \"H\"c, _\n        \"I\"c, \"L\"c, \"O\"c, \"S\"c, \"T\"c, \"W\"c, _\n        \"X\"c, \"Y\"c, \"b\"c, \"c\"c, \"f\"c, \"i\"c, _\n        \"l\"c, \"o\"c, \"q\"c, \"x\"c, \"y\"c}\n  For Each Ch As Char In ChArray\n    St = St.Replace(\"\\\" & Ch, \"\\\\\" & Ch)\n  Next\n  Return St\nEnd Function\n"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Part , Description,excel and ilogic\n                    ", "solution": ["'get list from XL using an arraylist\n'define the XLS to look at\n\nmyXLS = ThisDoc.WorkspacePath() & \"\\Mat Library.xls\"\nLastUsedRow = GoExcel.FindRow(myXLS, \"Sheet1\", \"PartMat\", \"=\", \"LAST\") - 1\nIf LastUsedRow < 0 Then\n\tMessageBox.Show(\"The column PartMat can't have empty cells before the LAST row!\", \"iLogic ERROR!\")\n\tGoto fine\nEnd If\nmyArrayList = GoExcel.CellValues(myXLS, \"Sheet1\", \"B2\", \"B\" & LastUsedRow)\n\n'present the list to the user\nmyMatDescription = InputListBox(\"Select from the list\", myArrayList, myArrayList.Item(0), \"iLogic\", \"Available Materials\")\n\n'set the iProperty\nMatCodeRow = GoExcel.FindRow(myXLS, \"Sheet1\", \"Material Description\", \"=\", myMatDescription)\nMatCode = GoExcel.CellValue(myXLS, \"Sheet1\", \"A\" & MatCodeRow)\n\nIf MatCode = \"\" Then \n\tMessageBox.Show(\"Material code not found!\" & vbCr & \"Iproperties not updated!\", \"iLogic ERROR!\")\n\tGoto fine\nEnd If\n\niProperties.Value(\"Custom\", \"PartMat\") = MatCode\niProperties.Value(\"Custom\", \"MATERIAL DESCRIPTION\") = myMatDescription\n''present the result\nresult = \"The Code is: \" & iProperties.Value(\"Custom\", \"PartMat\") & vbCr & _\n\t\t\"The description is: \" & iProperties.Value(\"Custom\", \"MATERIAL DESCRIPTION\")\nMessageBox.Show(Result, \"iLogic\")\nfine:"], "author": "Dshortway"},
{"created at": [], "solution Title": "\n                        Re: Error: A project with an output type of class Library cannot be started dire\n                    ", "solution": [], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: Convert IPictureDisp To System.Drawing.Image\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: How to do boundarypatch on 3Dsketch circles in VBA?\n                    ", "solution": ["Private Sub BoundaryPatch_SketchCircle3D()\n\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim oDef As PartComponentDefinition\n  Set oDef = oDoc.ComponentDefinition\n  \n  'reference to 3d sketch\n  Dim oSketch3d As Sketch3D\n  Set oSketch3d = oDef.Sketches3D.Item(1)\n\n  'create Boundary Patch Definition\n  Dim oBoundaryPatchDef As BoundaryPatchDefinition\n  Set oBoundaryPatchDef = oDef.Features _\n        .BoundaryPatchFeatures.CreateBoundaryPatchDefinition\n  \n  'Add all 3D circles to Boundary Patch Definition\n  'using Path object\n  Dim oCircle3d As SketchCircle3D\n  Dim oPath As Path\n  For Each oCircle3d In oSketch3d.SketchCircles3D\n    Set oPath = oDef.Features.CreatePath(oCircle3d)\n    Call oBoundaryPatchDef.BoundaryPatchLoops.Add(oPath)\n  Next\n\n  ' Create the boundary patch feature based on the definition.\n  Dim oBoundaryPatch As BoundaryPatchFeature\n  Set oBoundaryPatch = oDef.Features _\n        .BoundaryPatchFeatures.Add(oBoundaryPatchDef)\n  \nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Get name of current assembly, when editing sub-assemblies\n                    ", "solution": [], "author": "AlbertoTorres"},
{"created at": [], "solution Title": "\n                        Re: BOM Sort not working Properly\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: VBA parameter linking\n                    ", "solution": [], "author": "jonbrabbs"},
{"created at": [], "solution Title": "\n                        Re: Title Block - Copyright Year\n                    ", "solution": [], "author": "bennywise578"},
{"created at": [], "solution Title": "\n                        Re: Customization of BOM structure\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Start Inventor without Addins\n                    ", "solution": [], "author": "FarrenYoung"},
{"created at": [], "solution Title": "\n                        Re: Autodesk Inventor Wizards for Microsoft Visual Studio 2012 express ?\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Help With Creating Circularpattern  VBA\n                    ", "solution": [], "author": "jonbrabbs"},
{"created at": [], "solution Title": "\n                        Re: Deactivate add-in with vba or vb.net\n                    ", "solution": ["Public Module InventorExtensions\n    <Extension()> _\n    Function ItemByName(applicationAddIns As Inventor.ApplicationAddIns, displayName As String) As Inventor.ApplicationAddIn\n        For Each i As Inventor.ApplicationAddIn In applicationAddIns\n            If i.DisplayName = displayName Then\n                Return i\n            End If\n        Next\n        Return Nothing\n    End Function\nEnd Module", "Dim inventorApplication as Inventor.Application = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\nDim iLogic as Inventor.ApplicationAddIn = InventorApplication.ApplicationAddIns.ItemByName(\"iLogic\")\niLogic.Deactivate"], "author": "planglais"},
{"created at": [], "solution Title": "\n                        Re: setting a texture in Inventor 2013 programmatically\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Use VBA to Add Qty Req'd to Custom Properties for Components from the ****'y\n                    ", "solution": [], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Create or Edit text n a Symbol\n                    ", "solution": ["'", "1\u00ba Nota ID1", "dYCoord", " ", "=", " ", "dYCoord", " ", "-", " ", "(", "oTextBox", ".", "FittedTextHeight", " ", "+", " ", "dY00", ")", "\n", "If", " ", "Not", " ", "Nota1_ID1", "=", "\"\"", " ", "Then", "\n", "oTextBox", " ", "=", " ", "oSketch", ".", "TextBoxes", ".", "AddFitted", "(", "oTG", ".", "CreatePoint2d", "(", "dXCoord", ", ", "dYCoord", ")", ", ", "Nota1_ID1", ",", "\"", "NOTA_L1", "\"", ")", "\n", "End", " ", "If", " \n", "'", "1\u00ba Nota ID2", "If", " ", "ref_ID", " ", "=", " True ", "And", " ", "Nota1_ID2", " ", "<>", " ", "\"\"", " ", "Then", "\n", "dYCoord", " ", "=", " ", "dYCoord", " ", "-", " ", "(", "oTextBox", ".", "FittedTextHeight", " ", "+", " ", "dY12", ")", "\n", "oTextBox", " ", "=", " ", "oSketch", ".", "TextBoxes", ".", "AddFitted", "(", "oTG", ".", "CreatePoint2d", "(", "dXCoord_", ", ", "dYCoord", ")", ", ", "Nota1_ID2", ",", "\"", "NOTA_L2", "\"", ")", "\n", "End", " ", "If"], "author": "tuliobarata"},
{"created at": [], "solution Title": "\n                        Re: Get answer from a messagebox - external rule\n                    ", "solution": [" // Summary:\n    //     Specifies identifiers to indicate the return value of a dialog box.\n    [ComVisible(true)]\n    public enum DialogResult\n    {\n        // Summary:\n        //     Nothing is returned from the dialog box. This means that the modal dialog\n        //     continues running.\n        None = 0,\n        //\n        // Summary:\n        //     The dialog box return value is OK (usually sent from a button labeled OK).\n        OK = 1,\n        //\n        // Summary:\n        //     The dialog box return value is Cancel (usually sent from a button labeled\n        //     Cancel).\n        Cancel = 2,\n        //\n        // Summary:\n        //     The dialog box return value is Abort (usually sent from a button labeled\n        //     Abort).\n        Abort = 3,\n        //\n        // Summary:\n        //     The dialog box return value is Retry (usually sent from a button labeled\n        //     Retry).\n        Retry = 4,\n        //\n        // Summary:\n        //     The dialog box return value is Ignore (usually sent from a button labeled\n        //     Ignore).\n        Ignore = 5,\n        //\n        // Summary:\n        //     The dialog box return value is Yes (usually sent from a button labeled Yes).\n        Yes = 6,\n        //\n        // Summary:\n        //     The dialog box return value is No (usually sent from a button labeled No).\n        No = 7,\n    }"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: oDoc.IsModifiable true or false\n                    ", "solution": ["Property that returns whether this document can be currently modified. One of the reasons a document may be non-modifiable is if any other document belonging to the file containing this document is currently being edited. "], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re:  DisplayName of the Component associated with a DrawingCurveSegment\n                    ", "solution": ["Private Sub Component_From_DrawingCurve()\n  \n  'create drawing view for assembly document,\n  'select some drawing segment\n  'and run this macro\n  \n  Dim oDoc As DrawingDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim oSheet As Sheet\n  Set oSheet = oDoc.ActiveSheet\n\n  ' Set a reference to the drawing curve segment.\n  ' This assumes that a drwaing curve is selected.\n  Dim oDrawingCurveSegment As DrawingCurveSegment\n  Set oDrawingCurveSegment = oDoc.SelectSet.Item(1)\n\n  ' Set a reference to the drawing curve.\n  Dim oDrawingCurve As DrawingCurve\n  Set oDrawingCurve = oDrawingCurveSegment.Parent\n  \n  ' Set a reference to the parent component occurrence\n  Dim oOcc As ComponentOccurrence\n  Set oOcc = oDrawingCurve.ModelGeometry.ContainingOccurrence\n\n  Debug.Print oOcc.Name & \"  is selected.\"\n  \n  Beep\n  MsgBox oOcc.Name & \"  is selected.\"\n\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How To Close a Text File from within an iLogic\n                    ", "solution": [], "author": "roy-rohana"},
{"created at": [], "solution Title": "\n                        Re: Create a plane and mirror solid\n                    ", "solution": [], "author": "Holgarsson"},
{"created at": [], "solution Title": "\n                        Re: Clone Part using new template\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Orientation Angle of Occurrence\n                    ", "solution": [], "author": "frstam"},
{"created at": [], "solution Title": "\n                        Re: How to obtain a Vertex from Edge midpoint?\n                    ", "solution": ["Sub test()\n    Dim asm As AssemblyDocument\n    Set asm = ThisApplication.ActiveDocument\n    \n    ' Workplane from 1st occurrence\n    Dim wp As WorkPlaneProxy\n    Set wp = asm.SelectSet(1)\n    \n    ' Edge from second occurrence\n    Dim e As EdgeProxy\n    Set e = asm.SelectSet(2)\n\n    Dim mate As MateConstraint\n    Set mate = asm.ComponentDefinition.Constraints.AddMateConstraint(wp, e, 0, kNoInference, kInferredPoint)\nEnd Sub\n"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: API equivalent to Try Catch End Try\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        I checked Brian Ekins' SheetMetalExtents Addin, which use...\n                    ", "solution": [], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: Face of a Part to Workpoint in another part\n                    ", "solution": [], "author": "ADNpati"},
{"created at": [], "solution Title": "\n                        Hi Tonellal \u00a0 There is a Snippet that allows you to Updat...\n                    ", "solution": [], "author": "mehatfie"},
{"created at": [], "solution Title": "\n                        Re: Programmatically making all inputs non-consumed\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Read / Retrieve information from a MS Access Database using iLogic\n                    ", "solution": [], "author": "mehatfie"},
{"created at": [], "solution Title": "\n                        Re: Use \"Measure Distance\" Tool from VBA Form?\n                    ", "solution": [], "author": "mehatfie"},
{"created at": [], "solution Title": "\n                        Re: link textbox to BOM row\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Saveas STP -save options\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Open embedded XL sheet with iLogic\n                    ", "solution": [], "author": "mehatfie"},
{"created at": [], "solution Title": "\n                        Re: Registry-free C++ AddIn with Inventor 2013 and Visual Studio 2010\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Try this snippet of code   '--Code Start--' Try ModelName...\n                    ", "solution": [], "author": "mehatfie"},
{"created at": [], "solution Title": "\n                        Re: iLogic and Title Blocks\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Circular or Rectangular Pattern \"Sketch Name\"\n                    ", "solution": ["Sub TEST_Rect()\n\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim oDef As PartComponentDefinition\n  Set oDef = oDoc.ComponentDefinition\n  \n  'reference to rect. pattern\n  Dim oRP As RectangularPatternFeature\n  Set oRP = oDef.Features.RectangularPatternFeatures _\n              .Item(\"Rectangular Pattern1\")\n  \n  Dim oParentFeature As ExtrudeFeature 'one of PartFeature\n  Set oParentFeature = oRP.ParentFeatures.Item(1)\n  \n  Dim oSketch As PlanarSketch\n  Set oSketch = oParentFeature.Profile.Parent\n  \n  Debug.Print \"Parent sketch: \" & oSketch.Name\n  \nEnd Sub\n\n\n\nSub TEST_Circ()\n\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim oDef As PartComponentDefinition\n  Set oDef = oDoc.ComponentDefinition\n  \n  'reference to circ. pattern\n  Dim oCP As CircularPatternFeature\n  Set oCP = oDef.Features.CircularPatternFeatures _\n              .Item(\"Circular Pattern1\")\n  \n  Dim oParentFeature As ExtrudeFeature 'one of PartFeature\n  Set oParentFeature = oCP.ParentFeatures.Item(1)\n  \n  Dim oSketch As PlanarSketch\n  Set oSketch = oParentFeature.Profile.Parent\n  \n  Debug.Print \"Parent sketch: \" & oSketch.Name\n  \nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How to select all sheet metal parts with a certain thickness ?\n                    ", "solution": ["Sub FindSheetsByThickness()\n\n  'target thickness - search criteria\n  Dim TargetThickness As Double\n  TargetThickness = 0.05   'cm\n\n  '-------------------------------\n  Dim oAssyDoc As AssemblyDocument\n  Set oAssyDoc = ThisApplication.ActiveDocument\n  \n  Dim oAssyDef As AssemblyComponentDefinition\n  Set oAssyDef = oAssyDoc.ComponentDefinition\n  \n  'select set object of main assembly\n  Dim oSSet As SelectSet\n  Set oSSet = oAssyDoc.SelectSet\n  \n  Dim oDoc As Inventor.Document\n  \n  For Each oDoc In oAssyDoc.AllReferencedDocuments\n    \n    'verify document type (we are interested in metsl sheets only)\n    If oDoc.ComponentDefinition.Type = kSheetMetalComponentDefinitionObject Then\n      \n      'extract thickness of this sheet part\n      Dim oDef As SheetMetalComponentDefinition\n      Set oDef = oDoc.ComponentDefinition\n      Dim Thickness As Double\n      Thickness = oDef.Thickness.Value  'returned in cm (base length units)\n      \n      If Math.Abs(Thickness - TargetThickness) < 0.00001 Then\n        'thickness is equal to target thickness\n        'find all child components for this part document\n        'at all assembly levels\n        Dim oColl As ComponentOccurrencesEnumerator\n        Set oColl = oAssyDef.Occurrences.AllReferencedOccurrences(oDoc)\n        If oColl.Count > 0 Then\n          'select all found components\n          Dim oOcc As ComponentOccurrence\n          For Each oOcc In oColl\n            Call oSSet.Select(oOcc)\n          Next oOcc\n        End If\n      End If\n      \n    End If\n  Next\n  \n  Beep\nEnd Sub "], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Edit registry to set save location automaticly\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Exporting PDF, HasSaveCopyAsOptions returns false\n                    ", "solution": ["oContext.Type = kFileBrowseIOMechanism"], "author": "00ash00"},
{"created at": [], "solution Title": "\n                        Re: Include a material library in INVENTOR 2013 project with api\n                    ", "solution": [], "author": "xavier.dumont"},
{"created at": [], "solution Title": "\n                        Re: Exporting user text parameters to custom I properties\n                    ", "solution": ["Imports  Inventor.UnitsTypeEnum\n\t\t\nDim oParams As Parameters\noParams=ThisDoc.Document.ComponentDefinition.Parameters\n\t\t\t\t\nDim oUserParams As UserParameters\noUserParams=oParams.UserParameters     \n\n'look for user parameter and try to set it        \t\t\nTry\noUserParams(\"SM_Length\").Value = SheetMetal.FlatExtentsLength *2.54\nCatch\n' assume error means not found and create it\noUserParams.AddByValue(\"SM_Length\", SheetMetal.FlatExtentsLength *2.54, kInchLengthUnits) \nEnd Try\n\n'create list of parameters to format\nDim myArrayList As New ArrayList\nmyArrayList.add(\"SM_Length\")\nmyArrayList.add(\"Thickness\")\n\nDim oString as Object\nDim oParam As Parameter\nDim oFormat As CustomPropertyFormat\n\ni=0\nFor Each oString in myArrayList\nmyParam = myArrayList.Item(i)\noParam = oParams(myParam)\noParam.ExposedAsProperty = True\noFormat = oParams(myParam).CustomPropertyFormat\noFormat.PropertyType=Inventor.CustomPropertyTypeEnum.kTextPropertyType\noFormat.Precision=Inventor.CustomPropertyPrecisionEnum.kSixteenthsFractionalLengthPrecision\noFormat.ShowUnitsString = True\noFormat.Units = \"in\"       \ni= i+1\nNext\n\n'set the description to read in the iProperties\niProperties.Value(\"Project\", \"Description\") = \"= SH <Thickness> x <SM_Length>\"\n'update the file\niLogicVb.UpdateWhenDone = True\n\n\n\n\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re\u00a0: Create a sheet with iLogic\n                    ", "solution": [], "author": "fsanchou"},
{"created at": [], "solution Title": "\n                        Re: Need help creating a rule\n                    ", "solution": ["'********************************************************\n'this rule adjust the value of Height model parameter\n'to get the part volume equal to TargetVolume\n'********************************************************\n'TargetVolume - target volume \n'HLowerLimit - Lower heifht limit - HLowLimit\n'HUpperLimit - Upper height limit - HUpperLimit\n'NMax - maximal number of iterations - \n'RelErr - Relative error\n'********************************************************\n'maximal number of iterations\nDim NMax As Integer = 30\n'Relative error\nDim RelErr As Double = 0.00001\n'********************************************************\n\nThisDoc.Save\n\nDim oDoc As PartDocument = ThisDoc.Document\nDim oUOM As UnitsOfMeasure = oDoc.UnitsOfMeasure\nDim oDef As PartComponentDefinition = oDoc.ComponentDefinition\nDim oPars As Parameters = oDef.Parameters \nDim oMassProps As MassProperties = oDef.MassProperties\noMassProps.Accuracy = MassPropertiesAccuracyEnum.k_Medium\n\n'Input data\nDim Hmax As Double = oPars.Item(\"HUpperLimit\").Value\nDim Hmin As Double = oPars.Item(\"HLowerLimit\").Value\nDim Target_Volume As Double = oPars.Item(\"TargetVolume\").Value\n\n'control height. Volume is driven by this parameter\nDim oModelPar As ModelParameter = oPars.ModelParameters.Item(\"Height\")\n\nDim N As Integer = 0  \nDim H As Double = (Hmin + Hmax) / 2\noModelPar.Value = H\noDoc.Update\nDim V As Double = oMassProps.Volume\n\nDo While (N <= NMax) And (Math.Abs(V - Target_Volume)/Target_Volume > RelErr)\n\tN = N + 1\n\tIf (V - Target_Volume) > 0 Then\n\t\tHmax = H\n\tElse\n\t\tHmin = H\n\tEnd If\n\tH = (Hmin + Hmax) / 2\n\toModelPar.Value = H\n\toDoc.Update\n\tV = oMassProps.Volume\n\tThisApplication.activeview.update\nLoop\n\noDoc.Update\noPars.Item(\"Current_Volume\").Value = V\n\nDim delta As Double = Math.Abs(V - Target_Volume)/Target_Volume\n\n'report\nMsgBox (\"N = \" & N & vbNewLine & \"V = \" & _\n       oUOM.GetStringFromValue(V, \"l\") & vbNewLine & _\n      \"Delta = \" & delta)  \t  \n'********************************************************"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: PostPrivateEvent\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: export profile\n                    ", "solution": [], "author": "jletcher"},
{"created at": [], "solution Title": "\n                        Re: Convert model parameter to reference parameter\n                    ", "solution": [], "author": "tclayton"},
{"created at": [], "solution Title": "\n                        Re: Class Not Registered Error\n                    ", "solution": [], "author": "jonbrabbs"},
{"created at": [], "solution Title": "\n                        Re: Attempt title block batch program\n                    ", "solution": ["Public Sub TitleBlockCopy() \nDim oSourceDocument As DrawingDocument \nSet oSourceDocument = ThisApplication.ActiveDocument \n\n' Open the new drawing to copy the title block into. \nDim oNewDocument As DrawingDocument \nSet oNewDocument = ThisApplication.Documents.Open(\"e:\\case\\drawing1.idw\") \n\n' Get the new source title block definition. \nDim oSourceTitleBlockDef As TitleBlockDefinition \n\nSet oSourceTitleBlockDef = oSourceDocument.TitleBlockDefinitions.Item(\"ANSI A\") \n\n' Get the new title block definition. \nDim oNewTitleBlockDef As TitleBlockDefinition \nSet oNewTitleBlockDef = oSourceTitleBlockDef.CopyTo(oNewDocument) \n\n' Iterate through the sheets, replace tibleblock with the one newly added. \nDim oSheet As Sheet \nFor Each oSheet In oNewDocument.Sheets \noSheet.Activate \n\noSheet.TitleBlock.Delete \nCall oSheet.AddTitleBlock(oNewTitleBlockDef) \nNext \nEnd Sub"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Inventor 2013 addin Icons displays too large\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Retrieve dimensions\n                    ", "solution": [], "author": "marco.suurlant"},
{"created at": [], "solution Title": "\n                        Re: Registry Woes\n                    ", "solution": [], "author": "jonbrabbs"},
{"created at": [], "solution Title": "\n                        Re: add Occurrences to the Selection (in drawing mode)\n                    ", "solution": ["Public Sub AutoColor_VA()\n\n'step 1. select a drawingview\n  Dim oDrawDoc As DrawingDocument\n  Set oDrawDoc = ThisApplication.ActiveDocument\n  \n  Dim oSheet As Sheet\n  Set oSheet = oDrawDoc.ActiveSheet\n  \n  'for objects to be moved to specified layer\n  Dim oColl As ObjectCollection\n  Set oColl = ThisApplication.TransientObjects.CreateObjectCollection\n  \n  \n  '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n  ' select drawing views on active sheet\n  '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n  Dim oDrawView As DrawingView\n  \n' Option 1: Have the user select a drawing view.\n' Set oDrawView = ThisApplication.CommandManager _\n        .Pick(kDrawingViewFilter, \"Select a drawing view.\")\n\n' Option 2: we may process all drawing views on active sheet\nFor Each oDrawView In oSheet.DrawingViews\n\n  'adjust drawing view style\n  oDrawView.ViewStyle = DrawingViewStyleEnum.kHiddenLineDrawingViewStyle\n  \n'step 2.\n  'Get the active drawing document.\n  Dim oDocDesc As DocumentDescriptor\n  Set oDocDesc = oDrawView.ReferencedDocumentDescriptor\n  ' Verify that the selected drawing view is of an assembly.\n  If oDocDesc.ReferencedDocumentType <> kAssemblyDocumentObject Then\n     MsgBox \"The selected view must be of an assembly.\"\n     Exit Sub\n  End If\n  Dim oAssyDoc As AssemblyDocument\n  Set oAssyDoc = oDocDesc.ReferencedDocument\n   \n'step 3\n  'filter required docs\n  Dim oRefDocs As DocumentsEnumerator\n  Set oRefDocs = oAssyDoc.AllReferencedDocuments\n\n  Dim oDoc As Inventor.Document\n  For Each oDoc In oRefDocs\n  \n    'Criteria depends on your requirements:\n    'substring from filename, custom iProperty value, parameter value, etc.\n    \n    If InStr(oDoc.FullFileName, \"Cylinder\") > 0 Then\n      'this is required document\n      Debug.Print oDoc.FullFileName  'debug print only\n      \n      'find all occurrences for every part found\n      Dim oOccEnum As ComponentOccurrencesEnumerator\n      Set oOccEnum = oAssyDoc.ComponentDefinition.Occurrences _\n          .AllReferencedOccurrences(oDoc)\n      \n      Dim oOcc As ComponentOccurrence\n      \n      For Each oOcc In oOccEnum\n      \n        Dim oCurveUnum As DrawingCurvesEnumerator\n        Set oCurveUnum = oDrawView.DrawingCurves(oOcc)\n        \n        Dim oCurve As DrawingCurve\n        Dim oSegment As DrawingCurveSegment\n        \n        'add segments to collection to be moved to required layer\n        For Each oCurve In oCurveUnum\n          For Each oSegment In oCurve.Segments\n            Call oColl.Add(oSegment)\n          Next\n        Next\n        \n      Next 'oOcc\n    End If\n    \n  Next  'oDoc\nNext  'oDrawView\n\n\n'step 4.\n  'move found curves to desired layer\n\n  'create layer (if it doesn't exist), set color and styles\n  Dim oLayer As Layer\n  On Error Resume Next\n  Set oLayer = oDrawDoc.StylesManager.Layers.Item(\"AAA\")\n  If Err Then\n    Set oLayer = oDrawDoc.StylesManager.Layers _\n          .Item(\"Sketch Geometry (ANSI)\").Copy(\"AAA\")\n          \n    'define color\n    Dim oColor As Color\n    Set oColor = ThisApplication.TransientObjects.CreateColor(255, 0, 0)\n    oLayer.Color = oColor\n    \n    'define style\n    'oLayer.LineType = kDashedLineType\n  End If\n  \n  'change layer for curves collection\n  Call oSheet.ChangeLayer(oColl, oLayer)\n\n  oSheet.Update\n\nEnd Sub 'AutoColor_VA"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: VB form auto refresh iproperties\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: ILogic : browse to select a file\n                    ", "solution": ["'present a File Selection dialog\nDim oFileDlg As inventor.FileDialog = Nothing\nInventorVb.Application.CreateFileDialog(oFileDlg)\noFileDlg.InitialDirectory = oOrigRefName\noFileDlg.CancelError = True\nOn Error Resume Next\noFileDlg.ShowOpen()\nIf Err.Number <> 0 Then\nReturn\nElseIf oFileDlg.FileName <> \"\" Then\nselectedfile = oFileDlg.FileName\nEnd if\n\nMessageBox.Show(\"You selected: \" & selectedfile , \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: F6 ISO view - iLogic script\n                    ", "solution": ["ThisApplication.CommandManager.ControlDefinitions.Item(\"AppIsometricViewCmd\").Execute"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic Codes or just VB codes ?\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Sketch3D Linewidth and style\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: HELP to get a snapshot of an .ipt file inside Inventor\n                    ", "solution": [], "author": "DaviPregna"},
{"created at": [], "solution Title": "\n                        Re: Disable Screen Updating via iLogic\n                    ", "solution": ["    Try\n      ' ... rule code ...\n    Catch ex As Exception\n      'if some error occurs then this code will be executed\n      ThisApplication.ScreenUpdating = True\n      ThisApplication.UserInterfaceManager.UserInteractionDisabled = False\n      Beep()\n      MsgBox(\"Error info: \" & vbNewLine & ex.ToString)\n    End Try"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Highlighting Parts in Sub-Assmeblies\n                    ", "solution": ["Dim topHighlightSet As Inventor.highlightSet\n\nPublic Sub Highlight()\n    Dim topLevel As Inventor.AssemblyDocument\n    Dim subAssy As Inventor.ComponentOccurrence\n    Dim childPart1Occurence As Inventor.ComponentOccurrenceProxy\n    \n    Set topLevel = ThisApplication.ActiveDocument\n    Set subAssy = topLevel.ComponentDefinition.Occurrences.Item(1)\n    Set childPart1Occurence = subAssy.SubOccurrences(1)\n    \n    Set topHighlightSet = topLevel.CreateHighlightSet()\n\n    topHighlightSet.Color = ThisApplication.TransientObjects.CreateColor(255, 255, 255)\n    topHighlightSet.Color.Opacity = 0.8\n    topHighlightSet.AddItem childPart1Occurence\n    \nEnd Sub"], "author": "AB.ViewOnly"},
{"created at": [], "solution Title": "\n                        Re: iLogic rotation\n                    ", "solution": ["If", " ", "Parameter", "(", "\"", "KlemHoekstuk-01: 1", "\"", ", ", "\"", "KoppelingType", "\"", ")", " ", "=", " ", "7", " ", "Then", "    ", "Hoekkoppeling", " ", "=", " 6", "0", "    ", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " True", "ElseIf", " ", "Parameter", "(", "\"", "KlemHoekstuk-01: 1", "\"", ", ", "\"", "KoppelingType", "\"", ")", " ", "=", " ", "6", " ", "Then", " ", "    ", "Hoekkoppeling", " ", "=", " ", "-", "60", "    ", "iLogicVb", ".", "UpdateWhenDone", " ", "=", " True", "End", " ", "If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Trying to implement the new style library\n                    ", "solution": [], "author": "karthur1"},
{"created at": [], "solution Title": "\n                        Re: VBA or VB for sculpting overlapping objects in an Assembly??\n                    ", "solution": [], "author": "mitcham_boy"},
{"created at": [], "solution Title": "\n                        Re: problem using AddCustomi\u200bPartMember\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Templates Default Location\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Fix two components relative to each other\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Find Sheet Metal Thickness with VB.Net\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: Numbering similar Occurrences in Drawing Sheet\n                    ", "solution": [], "author": "ADNpati"},
{"created at": [], "solution Title": "\n                        Re: add sketch on part's face by vba\n                    ", "solution": ["Sub Sketch2Face2()\n'J.Kriek 2012\n    Dim oApp As Application\n    Set oApp = ThisApplication\n    Dim oPart As PartDocument\n    Set oPart = oApp.ActiveDocument\n    Dim oCompDef As ComponentDefinition\n    Set oCompDef = oPart.ComponentDefinition\n    Dim oExtrude As ExtrudeFeatures\n    Set oExtrude = oCompDef.Features.ExtrudeFeatures\n    Dim oFaces As Faces\n    \n    'This can be changed to .SideFaces, .EndFaces, or .StartFaces\n    'But .Faces will let you choose between all faces\n    Set oFaces = oExtrude.Item(1).Faces\n    \n    Dim oSketch As PlanarSketch\n\n    'Put a sketch on the first face (1) - change to suit\n    Set oSketch = oCompDef.Sketches.Add(oFaces(1), True)\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Form with multiple forms\n                    ", "solution": [], "author": "tuliobarata"},
{"created at": [], "solution Title": "\n                        Re: iLogic - How to sum a property of all sub assembli...\n                    ", "solution": ["'- - - - - - - - - - - find or create custom iProperty - - - - - - - - - - \n'Define the open document\nDim openDoc As Document\nopenDoc = ThisDoc.Document\n'Look at all of the files referenced in the open document\nDim docFile As Document\nFor Each docFile In openDoc.AllReferencedDocuments      \n \nDim propertyName1 As String = \"MyNumber\"\n 'define custom property collection\noCustomPropertySet = docFile.PropertySets.Item(\"Inventor User Defined Properties\")\nTry\n'look for property\noProp = oCustomPropertySet.Item(propertyName1)\nCatch\n' Assume error means not found so create it\noCustomPropertySet.Add(0, propertyName1)\nEnd Try\nNext\n\n'- - - - - - - - - - - sum the custom iProperty - - - - - - - - - - \n'clear the custom property in the assembly \niProperties.Value(\"Custom\", \"MyNumber\") = 0\n\n'set a reference to the assembly component definintion.\n'This assumes an assembly document is open.\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n'Iterate through all of the occurrences\nDim oOccurrence As ComponentOccurrence\nFor Each oOccurrence In oAsmCompDef.Occurrences\n'check for and skip virtual components\n'(in case a virtual component trips things up)\nIf Not TypeOf oOccurrence.Definition Is VirtualComponentDefinition Then\n'custom property in the assembly \nxNumber = iProperties.Value(\"Custom\", \"MyNumber\") \n'custom property in the parts\nyNumber = iProperties.Value(oOccurrence.Name, \"Custom\", \"MyNumber\")\nsumNumber = xNumber + yNumber\n'set custom property values\niProperties.Value(\"Custom\", \"MyNumber\") = sumNumber \nElse\nEnd If\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How to get correct volume\n                    ", "solution": ["Dim eLengthUnit As UnitsTypeEnum\neLengthUnit = oUOM.LengthUnits\n\n' Get the equivalent string of the enum value.\nDim sLengthUnit As String\nsLengthUnit = oUOM.GetStringFromType(eLengthUnit)\n\n' Create a string that defines a ", " using the current length unit.\nDim sVolumeUnit As String\nsVolumeUnit = sLengthUnit & \"^3\""], "author": "ADNpati"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rules in .idw result in errors.. sometimes\n                    ", "solution": ["'Weight\n\ndoc = ThisDoc.Document\ncustomPropertySet = doc.PropertySets.Item(\"Inventor User Defined Properties\")\n \n'Make sure TotalWT property exists\nTry\n      prop = customPropertySet.Item(\"TotalWT\")\nCatch\n      'Assume error means not found\n      customPropertySet.Add(\"\", \"TotalWT\")\nEnd Try\n\n'Find the filename of the model used in the drawing\nIf ThisDoc.ModelDocument Is Nothing Then\nGoto handleErrors\nElseif ThisDoc.ModelDocument.DocumentType = kPresentationDocumentObject\nGoto handleErrors\nElse\nmodeldocname = IO.Path.GetFileName(ThisDoc.ModelDocument.FullFileName) \nEnd If\n\n'Find the mass of the model used in the drawing\nmass = iProperties.Mass(modeldocname)\n\n\n'Write the mass of the model to the TotalWT custom iProperty.\n'The mass is converted from kg to lbs and rounded to the nearest integer\niProperties.Value(\"Custom\", \"TotalWT\") = (Round((mass*2.20462262)*2))/2\n\nInventorVb.DocumentUpdate()\n\nExit Sub\nhandleErrors:\n'do nothing "], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Hide / Show all parts and assemblys\n                    ", "solution": ["Sub Vis_1()\n   Dim oControlDef As ControlDefinition\n   Set oControlDef = ThisApplication.CommandManager _\n     .ControlDefinitions.Item(\"AssemblyAllVisibleDesignViewCmd\")\n   oControlDef.Execute\nEnd Sub\n\nPub Vis_2()\n   Dim oControlDef As ControlDefinition\n   Set oControlDef = ThisApplication.CommandManager _\n     .ControlDefinitions.Item(\"AssemblyAllInvisibleDesignViewCmd\")\n   oControlDef.Execute\nEnd Sub", "Sub Vis_3()\n\n  Dim oAssyDoc As AssemblyDocument\n  Set oAssyDoc = ThisApplication.ActiveDocument\n  \n  Dim oAssyDef As AssemblyComponentDefinition\n  Set oAssyDef = oAssyDoc.ComponentDefinition\n  \n  Dim oMgr As RepresentationsManager\n  Set oMgr = oAssyDef.RepresentationsManager\n  \n  Dim oViewRep As DesignViewRepresentation\n  Set oViewRep = oMgr.ActiveDesignViewRepresentation\n  \n  oViewRep.ShowAll\n'  oViewRep.HideAll\n\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: ilogic form trigger\n                    ", "solution": ["Dim", " ", "CurrentDoc", " as ", "PartDocument", " ", "=", " ", "ThisDoc", ".", "Document", "  ", "If", " ", "(", "Not", " ", "(", "CurrentDoc", " ", "Is", " ", "ThisApplication", ".", "ActiveDocument", "))", " ", "Then", " ", "Return"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: OnFileSaveAsDialog event won't fire\n                    ", "solution": [], "author": "djreesing"},
{"created at": [], "solution Title": "\n                        Re: Depth of Extrude Feature\n                    ", "solution": ["    ", "Dim", " ", "ALLface", " ", "As", " ", "Faces", " ", "=", " ", "feat", ".", "Faces", "    ", "Dim", " ", "oFaceListMin", " ", "As", " ", "List", "(", "Of", " ", "Double", ")", " ", "=", " ", "New", " ", "List", "(", "Of", " ", "Double", ")", "    ", "Dim", " ", "oFaceListMax", " ", "As", " ", "List", "(", "Of", " ", "Double", ")", " ", "=", " ", "New", " ", "List", "(", "Of", " ", "Double", ")", "    ", "    ", "For", " ", "Each", " ", "oFace", " ", "In", " ", "ALLface", "        ", "oFaceListMin", ".", "Add", "(", "oFace", ".", "Evaluator", ".", "RangeBox", ".", "MinPoint", ".", "Y", ")", "        ", "oFaceListMax", ".", "Add", "(", "oFace", ".", "Evaluator", ".", "RangeBox", ".", "MaxPoint", ".", "Y", ")", "    ", "Next", "    ", "    ", "oFaceListMin", ".", "Sort", "()", "    ", "oFaceListMax", ".", "Sort", "()", "    ", "    ", "Dim", " ", "oFaceList", " ", "As", " ", "List", "(", "Of", " ", "Double", ")", "    ", "oFaceList", " ", "=", " ", "New", " ", "List", "(", "Of", " ", "Double", ")", "    ", "    ", "oFaceList", ".", "Add", "(", "oFaceListMin", ".", "Item", "(", "0", "))", " ", "    ", "oFaceList", ".", "Add", "(", "oFaceListMax", ".", "Item", "(", "oFaceListMax", ".", "Count", " ", "-", " ", "1", "))", "    ", "    ", "oFaceList", ".", "Sort", "()", "    ", "    ", "Dim", " ", "extrudedepth", " ", "As", " ", "Double", " ", "=", " ", "(", "oFaceList", ".", "Item", "(", "0", ")", " ", "-", " ", "oFaceList", ".", "Item", "(", "oFaceList", ".", "Count", " ", "-", " ", "1", "))", " ", "*", " ", "10"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Preserv Functions in Iproperties when accessing them with a VBA script\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How to add 'Exit' panel finishing command of addin button?\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Using Inventor API Objects In External Rules\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Sort BOM while avoiding locked parts\n                    ", "solution": ["Dim app As Inventor.Application = \n  Marshal.GetActiveObject(\"Inventor.Application\")\nDim doc As Inventor.AssemblyDocument = \n  app.ActiveDocument \nDim bom As Inventor.BOM = \n  doc.ComponentDefinition.BOM\n\nbom.StructuredViewEnabled = True \nDim bomView As Inventor.BOMView = bom.BOMViews(\"Structured\")\n  \n' Find rows which are not locked.\n' You could also search for them based on e.g. \"Part Number\"\nDim rows As Inventor.ObjectCollection = \n  app.TransientObjects.CreateObjectCollection()\n \nFor Each row As Inventor.BOMRow In bomView.BOMRows \n  If Not row.ItemNumberLocked Then\n    rows.Add(row) \n  End If\nNext\n\nbomView.Sort(\"Part Number\")\nbomView.Renumber(3, 1, rows)  "], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Find the intersection of two surfaces?\n                    ", "solution": ["      ObjectsEnumerator out2;\n      out2 = oTG.SurfaceSurfaceIntersection( \n                    oFace.Geometry, oPlane, 0.01);\n      for (int i = 1; i <= out2.Count; i++)\n      { \n        Object obj = out2[i];  //get object from collection\n        //find out COM object type name\n        string st = Microsoft.VisualBasic.Information.TypeName(obj);\n        Console.WriteLine(st);  // e.g. EllipseFull\n      }"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Part iProperties from idw\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Issue with debugging Inventor 2013 addin with VB.net 2010\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: iLogic error can not find excel file after saving file as a template\n                    ", "solution": [], "author": "rmn"},
{"created at": [], "solution Title": "\n                        Re: iProperty concatenation with iLogic\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Parameter to have leading and ending zeros\n                    ", "solution": ["iLogicOption DoubleForEquals Off\nsL_1 = Format(L_1, \"00.000\")\nsRod = Format(Rod, \"00.000\")\niProperties.Value(\"Project\", \"Part Number\") = \"625A3-\" & Mat_Code & sL_1 & Tap_Code & sRod"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Part Number driven by parameters\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Sketch Orientation in VB.net\n                    ", "solution": ["Private Sub Button2_Click(sender As System.Object, e As System.EventArgs) Handles Button2.Click\n    Dim invApp As Inventor.Application = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Inventor.Application\")\n    Dim partDoc As Inventor.PartDocument = invApp.Documents.Add(Inventor.DocumentTypeEnum.kPartDocumentObject, _\n                                           invApp.FileManager.GetTemplateFile(Inventor.DocumentTypeEnum.kPartDocumentObject))\n    Dim partDef As Inventor.PartComponentDefinition = partDoc.ComponentDefinition\n    Dim tg As Inventor.TransientGeometry = invApp.TransientGeometry\n\n    ' Create a work point in space.\n    Dim wp As Inventor.WorkPoint = partDef.WorkPoints.AddFixed(tg.CreatePoint(5, 2, 3))\n\n    ' Create a sketch on the X-Y work plane.\n    Dim sketch As Inventor.PlanarSketch = partDef.Sketches.Add(partDef.WorkPlanes.Item(3))\n\n    ' Draw a line in the X direction on the sketch.\n    sketch.SketchLines.AddByTwoPoints(tg.CreatePoint2d(0, 0), tg.CreatePoint2d(5, 0))\n\n    ' Set the axis entity to be the Y work axis.\n    sketch.AxisEntity = partDef.WorkAxes.Item(2)\n    sketch.OriginPoint = wp\nEnd Sub\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Change Display Name at Part Level\n                    ", "solution": [], "author": "mehatfie"},
{"created at": [], "solution Title": "\n                        Re: Add Textbox to Ribbon\n                    ", "solution": ["Sub DockableWindow()\n\n    Dim oUserInterfaceMgr As UserInterfaceManager\n    Set oUserInterfaceMgr = ThisApplication.UserInterfaceManager\n\n    ' Create a new dockable window\n    Dim oWindow As DockableWindow\n    Set oWindow = oUserInterfaceMgr.DockableWindows.Add(\"SampleClientId\", \"TestWindowInternalName\", \"Test Window\")\n\n    ' Get the hwnd of the dialog to be added as a child\n    ' CHANGE THIS VALUE!\n    Dim hwnd As Long\n    hwnd = 4851096\n\n    ' Add the dialog as a child to the dockable window\n    Call oWindow.AddChild(hwnd)\n\n    ' Don't allow docking to top and bottom\n    oWindow.DisabledDockingStates = kDockTop + kDockBottom\n\n    ' Make the window visible\n    oWindow.Visible = True\n\nEnd Sub"], "author": "krieg"},
{"created at": [], "solution Title": "\n                        Re: Trouble for VB.NET to call VBA function\n                    ", "solution": [], "author": "liminma8458"},
{"created at": [], "solution Title": "\n                        Re: How do you reset Inventor?\n                    ", "solution": [], "author": "dano0310"},
{"created at": [], "solution Title": "\n                        Re: Full Part Number Property in a \"Bill of Materials\" VBA macro\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Problem with Project Falcon ad-in in Inventor 2013\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How to plot all parts drawings in assembly?\n                    ", "solution": [], "author": "skyngu"},
{"created at": [], "solution Title": "\n                        Re: Example of embedding IronPython into a C# addin\n                    ", "solution": [], "author": "rschader"},
{"created at": [], "solution Title": "\n                        Re\u00a0: Lowercase revision number\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Forms? I think....\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Replace single occurrence of multiple instances\n                    ", "solution": [], "author": "andrewwhiteinc"},
{"created at": [], "solution Title": "\n                        Re: Sheet Size iLogic Problem\n                    ", "solution": ["Dim node\nnode = FindBorderNode(\"Bordo A0\", bp.TopNode.BrowserNodes)\n", "node.EnsureVisible()"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic - assigning colours\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Component Edit in 2013\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Proxy / Subassembly / Sheet metal problem\n                    ", "solution": [], "author": "tom_wise"},
{"created at": [], "solution Title": "\n                        Re: Selecting a Point2D with your mouse on a drawing sheet\n                    ", "solution": ["Public Sub TestGetDrawingPoint()\n    Dim getPoint As New clsGetPoint\n    Dim pnt As Point2d\n    \n    Do\n        Set pnt = getPoint.GetDrawingPoint(\"Click the desired location\", kLeftMouseButton)\n        If Not pnt Is Nothing Then\n            MsgBox \"Click is at \" & Format(pnt.x, \"0.0000\") & \", \" & Format(pnt.y, \"0.0000\")\n        End If\n    Loop While Not pnt Is Nothing\nEnd Sub\n", "Private WithEvents m_interaction As InteractionEvents\nPrivate WithEvents m_mouse As MouseEvents\nPrivate m_position As Point2d\nPrivate m_button As MouseButtonEnum\nPrivate m_continue As Boolean\n\n\nPublic Function GetDrawingPoint(Prompt As String, button As MouseButtonEnum) As Point2d\n    Set m_position = Nothing\n    m_button = button\n    \n    Set m_interaction = ThisApplication.CommandManager.CreateInteractionEvents\n    Set m_mouse = m_interaction.MouseEvents\n    \n    m_interaction.StatusBarText = Prompt\n    \n    m_interaction.Start\n    \n    m_continue = True\n    Do\n        DoEvents\n    Loop While m_continue\n    \n    m_interaction.Stop\n    \n    Set GetDrawingPoint = m_position\nEnd Function\n\n\nPrivate Sub m_mouse_OnMouseClick(ByVal button As MouseButtonEnum, ByVal ShiftKeys As ShiftStateEnum, ByVal ModelPosition As Point, ByVal ViewPosition As Point2d, ByVal View As View)\n    If button = m_button Then\n        Set m_position = ThisApplication.TransientGeometry.CreatePoint2d(ModelPosition.x, ModelPosition.y)\n    End If\n    \n    m_continue = False\nEnd Sub\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Change Browser Node Icon Using iLogic\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Lost three structure panel\n                    ", "solution": [], "author": "Chris_Rogers"},
{"created at": [], "solution Title": "\n                        Re: Having trouble creating a button on a panel\n                    ", "solution": [], "author": "chipwitch"},
{"created at": [], "solution Title": "\n                        Re: 2013 Inventor Viewer PrintToFile() Prints to Printer.\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: VB.net - Hiding a Sketch or Changing Lineweight?\n                    ", "solution": ["Sub Sample()\n    Dim oDrawingDoc As DrawingDocument\n    Set oDrawingDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    For Each oSheet In oDrawingDoc.Sheets\n         \n        Dim oSketch As DrawingSketch\n        \n        For Each oSketch In oDrawingDoc.Sheets(1).Sketches\n            Call ChangeFillRegionColorAndHideCurves(oSketch, oDrawingDoc)\n        Next\n        \n        Dim oDrawingView As DrawingView\n        For Each oDrawingView In oSheet.DrawingViews\n            For Each oSketch In oDrawingView.Sketches\n                Call ChangeFillRegionColorAndHideCurves(oSketch, oDrawingDoc)\n            Next\n        Next\n    Next\nEnd Sub\n\n\nSub ChangeFillRegionColorAndHideCurves(oSketch As DrawingSketch, oDrawingDoc As DrawingDocument)\n    Dim oFillRegion As SketchFillRegion, oEntity As SketchEntity\n    oSketch.Edit\n    \n    ' Change the fill region color to be same as sheet color\n    For Each oFillRegion In oSketch.SketchFillRegions\n        oFillRegion.Color = oDrawingDoc.SheetSettings.SheetColor\n    Next\n    \n    ' Set the sketch curves to be visible in sketch mode only\n    For Each oEntity In oSketch.SketchEntities\n        If Not oEntity.Type = kSketchPointObject Then\n            oEntity.SketchOnly = True\n        End If\n    Next\n\n    oSketch.ExitEdit\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Transaction is forgotten\n                    ", "solution": [], "author": "bsee1"},
{"created at": [], "solution Title": "\n                        Re: Export BOM Using Ilogic\n                    ", "solution": ["Sub ExportBOMSample()\n    Dim oDoc As AssemblyDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    ' If the current non-master LOD document is dirty you should save it before you can use the master-LOD document background\n    If oDoc.Dirty Then\n        If MsgBox(\"You should save the document first!\" & vbCrLf & \"Would you like to save the document?\", vbYesNo) = vbYes Then\n            oDoc.Save\n        Else\n            Exit Sub\n        End If\n        \n    End If\n    \n    Dim sFileName As String\n    sFileName = oDoc.FullFileName\n    \n    Dim oMasterLODDoc As AssemblyDocument\n    Set oMasterLODDoc = ThisApplication.Documents.Open(sFileName, False)\n    \n    Dim oBOM As BOM\n    Set oBOM = oMasterLODDoc.ComponentDefinition.BOM\n    \n    oBOM.PartsOnlyViewEnabled = True\n    \n    Dim oBOMView As BOMView\n    Set oBOMView = oBOM.BOMViews.Item(\"Parts Only\")\n    \n    oBOMView.Export \"C:\\Temp\\BOM.accdb\", kMicrosoftAccessFormat\n    \n    oMasterLODDoc.Close True\n    \nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Visual studio references to inventor\n                    ", "solution": [], "author": "bsee1"},
{"created at": [], "solution Title": "\n                        Re: Update button\n                    ", "solution": ["void CheckForBalloon(DrawingDocument aDoc)\n{\n\tforeach (DrawingBOM bom in aDoc.DrawingBOMs)\n\t{\n\t\tforeach (DrawingBOMRow oRow in bom.DrawingBOMRows)\n\t\t{\n\t\t\tbool hasBalloon = oRow.Ballooned;\n\t\t}\n\t}\n}"], "author": "bsee1"},
{"created at": [], "solution Title": "\n                        Re: Change Title Block using Visual Basic\n                    ", "solution": ["Private Sub OButtonDefA1_OnExecute(ByVal Context As Inventor.NameValueMap) Handles OButtonDefA1.OnExecute\n            On Error Resume Next\n\n            Dim oDoc As Inventor.DrawingDocument\n            oDoc = m_inventorApplication.ActiveDocument\n            Dim sName As String\n            If oDoc.Sheets.Count = 1 Then\n                If Not Left(oDoc.ActiveSheet.Name, 5) = \"00_00\" Then\n                    sName = \"00_00\"\n                    Call oDoc.Sheets.Add(Inventor.DrawingSheetSizeEnum.kCustomDrawingSheetSize, Inventor.PageOrientationTypeEnum.kLandscapePageOrientation, sName, 80.5, 58.2)\n                    oDoc.Sheets.Item(1).Delete(False)\n                Else\n                    sName = \"01_00\"\n                    Call oDoc.Sheets.Add(Inventor.DrawingSheetSizeEnum.kCustomDrawingSheetSize, Inventor.PageOrientationTypeEnum.kLandscapePageOrientation, sName, 80.5, 58.2)\n                End If\n            ElseIf oDoc.Sheets.Count > 1 Then\n                sName = Format(oDoc.Sheets.Count, \"0#\") & \"_00\"\n                Call oDoc.Sheets.Add(Inventor.DrawingSheetSizeEnum.kCustomDrawingSheetSize, Inventor.PageOrientationTypeEnum.kLandscapePageOrientation, sName, 80.5, 58.2)\n            End If\n\n            Dim oBorder As Inventor.BorderDefinition\n            oBorder = oDoc.BorderDefinitions.Item(\"IP-A1\")\n\n            Call oDoc.ActiveSheet.AddBorder(oBorder)\n\n            Dim oTitle As Inventor.TitleBlockDefinition\n            oTitle = oDoc.TitleBlockDefinitions.Item(\"IP-TITLE-B\")\n\n            Dim sPromptStrings(1) As String\n            sPromptStrings(0) = \"N.T.S\"\n            sPromptStrings(1) = \"01\"\n\n            Dim oSheet As Inventor.Sheet\n            oSheet = oDoc.ActiveSheet\n\n            If Not oSheet.TitleBlock Is Nothing Then\n                oSheet.TitleBlock.Delete()\n            End If\n\n\n            Dim oTitleBlock As Inventor.TitleBlock\n            oTitleBlock = oSheet.AddTitleBlock(oTitle, , sPromptStrings)\n        End Sub"], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: Trying to use \"GetPromptTextValues\" method\n                    ", "solution": ["Dim sTags() As String = New System.String() {}"], "author": "krieg"},
{"created at": [], "solution Title": "\n                        Re: Get sheet 1 base view properties\n                    ", "solution": [], "author": "JachinBr"},
{"created at": [], "solution Title": "\n                        Re: How to create an iLogic rule to measure between 2 planes\n                    ", "solution": ["'Dim oDoc As AssemblyDocument", "'oDoc = ThisApplication.ActiveDocument", "Dim MyArrayList As New ArrayList", "'look at the workplane collection ", "'and add each workplane to the select set", "For Each oWorkPlane In ThisDoc.Document.ComponentDefinition.WorkPlanes", "'filter out the origin planes", "If oWorkPlane.IsCoordinateSystemElement = False Then ", "'add planes to list", "MyArrayList.add(oWorkPlane.Name)", "End If", "Next", "'select first plane to use", "oWorkPlane1 = InputListBox(\"Select the 1st plane to use from the list.\", MyArrayList , MyArrayList.item(0), \"iLogic\", \"Workplanes\")", "'select second plane to use", "oWorkPlane2 = InputListBox(\"Select the 2nd plane to use from the list.\", MyArrayList , MyArrayList.item(1), \"iLogic\", \"Workplanes\")", "'get distance", "myDistance = Measure.MinimumDistance(oWorkPlane1, oWorkPlane2)", "'display distance in cm's", "MessageBox.Show(myDistance & \" cm\", \"iLogic\")", "'display distance in inches", "MessageBox.Show(myDistance * 0.393701 & \" in\", \"iLogic\")", "'get distance between named work planes\nmyDistance = Measure.MinimumDistance(\"Work Plane2\", \"Work Plane5\")\n'display distance in cm's\nMessageBox.Show(myDistance & \" cm\", \"iLogic\")\n'display distance in inches\nMessageBox.Show(myDistance * 0.393701 & \" in\", \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: iLogic Save As (dwg) if file is idw\n                    ", "solution": [" 'check file type\nIf ThisDoc.Document.DocumentType <> kDrawingDocumentObject Then\nMessageBox.Show(\"This file is not a drawing file.\", \"iLogic\")\nElse\nThisDoc.Document.SaveAs(ThisDoc.ChangeExtension(\".dwg\"),True)\nMessageBox.Show(ThisDoc.FileName(False)& \".dwg  Saved!! \" & vbCrLf & vbCrLf & ThisDoc.Path , \"Save As\")\nEnd If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Add-in only shows on the first of multiple instances of Inventor.\n                    ", "solution": ["from: ", "var oApp = (Application)Marshal.GetActiveObject(\"Inventor.Application\");", "to:", "var m_InventorApp = addInSiteObject.Application;"], "author": "LiamSmith2"},
{"created at": [], "solution Title": "\n                        Re: Numbers in iProperties in German Inventor show as 10,  not 10,0\n                    ", "solution": [], "author": "LiamSmith2"},
{"created at": [], "solution Title": "\n                        Re: Run an Addin from VB\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Compare Two Faces\n                    ", "solution": ["Sub FindFace()\n\n    Dim doc As PartDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim face As face\n    Set face = doc.ComponentDefinition.SurfaceBodies(1).faces(1)\n    \n    Dim faceItr As face\n    For Each faceItr In doc.ComponentDefinition.SurfaceBodies(1).faces\n    \n        If (face Is faceItr) Then\n            Debug.Print \"Face found...\"\n        End If\n    \n    Next\n\nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Problem in a Macro\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: UREGEBT!!!   Help Creating Tab for Macros\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Ral colors appeanance in 2013\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: How to delete objects in an array\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Rename Sheets - Multi Sheet idw\n                    ", "solution": [], "author": "rob.j.ross"},
{"created at": [], "solution Title": "\n                        Re: Material In Title Block\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: what is the Inventor VBA code to constrain two parts using mate constraint?\n                    ", "solution": ["Public Sub iMateResultCreationSample()\n    'Get the component definition of the currently open assembly.\n    'This will fail if an assembly document is not open.\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    Set oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n    \n    'Create a new matrix object.  It will be initialized to an identity matrix.\n    Dim oMatrix As Matrix\n    Set oMatrix = ThisApplication.TransientGeometry.CreateMatrix\n    \n\n    'Place the first occurrence.\n    Dim oOcc1 As ComponentOccurrence\n    Set oOcc1 = oAsmCompDef.Occurrences.Add(\"C:\\Temp\\iMatePart.ipt\", oMatrix)\n    \n\n    'Place the second occurrence, but adjust the matrix slightly so they're\n    'not right on top of each other.\n\n    oMatrix.Cell(1, 4) = 10\n    Dim oOcc2 As ComponentOccurrence\n    Set oOcc2 = oAsmCompDef.Occurrences.Add(\"C:\\Temp\\iMatePart.ipt\", oMatrix)\n    \n    'Look through the iMateDefinitions defined for the first occurrence\n    'and find the one named \"iMate:1\".  This loop demonstrates using the\n    'Count and Item properties of the iMateDefinitions object.\n\n    Dim i As Long\n    Dim oiMateDef1 As iMateDefinition\n    For i = 1 To oOcc1.iMateDefinitions.Count\n        If oOcc1.iMateDefinitions.Item(i).Name = \"iMate:1\" Then\n            Set oiMateDef1 = oOcc1.iMateDefinitions.Item(i)\n            Exit For\n        End If\n    Next\n    \n    If oiMateDef1 Is Nothing Then\n        MsgBox \"An iMate definition named \"\"iMate:1\"\" does not exist in \" & oOcc1.Name\n        Exit Sub\n    End If\n    \n    'Look through the iMateDefinitions defined for the second occurrence\n    'and find the one named \"iMate:1\".  This loop demonstrates using the\n    'For Each method of iterating through a collection.\n\n    Dim oiMateDef2 As iMateDefinition\n    Dim bFoundDefinition As Boolean\n    For Each oiMateDef2 In oOcc2.iMateDefinitions\n        If oiMateDef2.Name = \"iMate:1\" Then\n            bFoundDefinition = True\n            Exit For\n        End If\n    Next\n\n    If Not bFoundDefinition Then\n        MsgBox \"An iMate definition named \"\"iMate:1\"\" does not exist in \" & oOcc2.Name\n        Exit Sub\n    End If\n    \n    'Create an iMate result using the two definitions.\n    Dim oiMateResult As iMateResult\n    Set oiMateResult = oAsmCompDef.iMateResults.AddByTwoiMates(oiMateDef1, oiMateDef2)\nEnd Sub"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: VBA and Inventor\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Open drawing skip user input\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Override COG\n                    ", "solution": [], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: iLogic Subassemblies won't update unless in their own environment.\n                    ", "solution": [], "author": "GavoGarmo"},
{"created at": [], "solution Title": "\n                        Re: open file & save file automatically\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Recognize Custom Content Center Part\n                    ", "solution": ["Dim oPart As PartDocument\noPart = ThisApplication.ActiveDocument\nDim oPartCompDef As PartComponentDefinition\noPartCompDef = oPart.ComponentDefinition\n    If oPartCompDef.IsContentMember Then\n        iProperties.Value(\"Custom\", \"IsCustomPart\") = \"Yes\"\n    End If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: ilogic to handle mouse event for part selection\n                    ", "solution": ["Dim doc = ThisApplication.ActiveDocument\n\nDim entity = ThisApplication.CommandManager.Pick(\n\tSelectionFilterEnum.kAssemblyOccurrenceFilter, \n\t\"Select Component:\")\n\nIf (Not entity Is Nothing) Then\n\tMsgBox(entity.Name)\nEnd If", "Function", " ", "Remove_comp", "()", " ", "sel_flag", "=", "0", " ", "Dim", " ", "entity", " ", "=", " ", "ThisApplication", ".", "CommandManager", ".", "Pick", "(", "SelectionFilterEnum", ".", "kAssemblyOccurrenceFilter", ",", "\"", "Select Component:", "\"", ")", " ", "If", " ", "(", "Not", " ", "entity", " ", "Is", " Nothing", ")", " ", "Then", "  ", "'", "MsgBox(entity.Name)", "  ", "sel_flag", "=", "1", " ", "End", " ", "If", " ", "If", "(", "sel_flag", "=", "1", ")", " ", "entity", ".", "Delete", " ", "End", " ", "If", "'", "zoom all", "ThisApplication", ".", "ActiveView", ".", "Fit", "End Function"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Cancel the onQuit event\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule to insert sheet metal thickness\n                    ", "solution": ["Dim oDoc = ThisApplication.ActiveDocument\nIf oDoc.DocumentType = kPartDocumentObject Then 'Confirm part\n\tIf oDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then 'Confirm Sheetmetal\n\t\tStock = iProperties.Value(\"Custom\", \"SheetMetalRule\") \n\tElse 'Confirm Standard\n\t\tStock = iProperties.Material\n\tEnd If\niProperties.Value(\"Custom\", \"MaterialInfo\") = Stock\nEnd If"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Inventor Node Label Updates\n                    ", "solution": ["Private Sub QueryModelTree()\n    Dim Doc As Document\n    \n    If (ThisApplication.Documents.Count <> 0) Then\n        Set Doc = ThisApplication.ActiveDocument\n    Else\n        MsgBox \"There are no open documents!\"\n        Exit Sub\n    End If\n\n    Dim oTopNode As BrowserNode\n    Set oTopNode = Doc.BrowserPanes(\"Model\").TopNode\n\n \n\n    Call recurse(oTopNode)\nEnd Sub\nSub recurse(node As BrowserNode)\n    If (node.Visible = True) Then\n        Debug.Print node.BrowserNodeDefinition.Label\n        \n        If node.BrowserNodeDefinition.Label = \"Sketch1\" Then\n            node.NativeObject.Name = \"MySketch\"\n        End If\n        If node.BrowserNodeDefinition.Label = \"Extrusion1\" Then\n            node.NativeObject.Name = \"MyExtrusion\"\n        End If\n        \n        Dim bn As BrowserNode\n        For Each bn In node.BrowserNodes\n            Call recurse(bn)\n        Next\n        \n    End If\nEnd Sub"], "author": "nagwani"},
{"created at": [], "solution Title": "\n                        Re: Ilogic runrule in idw from rule in assembly\n                    ", "solution": ["'open known drawing document specifying full filename\nFullFilename = ThisDoc.Path & \"\\AAA.idw\"\nDim oDoc as DrawingDocument = ThisApplication.Documents.Open(Fullfilename)\n\n'run rule in the drawing document\nauto = iLogicVb.Automation\nauto.RunRule(oDoc, \"IDW_Rule\")\n\n'you may also save and close this drawing document\n'oDoc.Save\n'oDoc.Close", "Dim oDoc as DrawingDocument = ThisApplication.Documents.Open(Fullfilename, False)"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: ILOGIC run rule in IAM then run rule in IDW\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Delete Revision Table\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Finding orphaned objects on a drawing\n                    ", "solution": [], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: iLogic extract data from string (CSV)\n                    ", "solution": ["Dim", " ", "Separators", "()", " ", "As", " ", "Char", " ", "=", " {", "\"", ",", "\"", "} \n", "Sentence", " ", "=", " ", "SealString_1", "\n", "Words", " ", "=", " ", "Sentence", ".", "Split", "(", "Separators", ")", "\n", "i", " ", "=", " ", "0", "\n", "For", " ", "Each", " ", "wrd", " ", "In", " ", "Words", "\n", "MessageBox", ".", "Show", "(", "\"", "Word Index #", "\"", " ", "&", " ", "i", " ", "&", " ", "\"", " = ", "\"", " ", "&", " ", "Words", "(", "i", "))", "\n", "i", " ", "+=", " ", "1", "\n", "Next"], "author": "MarkESmith"},
{"created at": [], "solution Title": "\n                        Re: Solid Body \"Made Components\" Align with UCS\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Run rule twice to fix error in rule..?!\n                    ", "solution": ["'Declarations\nDim counter As Integer = 0\n\nLabel:\n\ncounter = counter +1\nIf counter = 2 Then\n     MsgBox(\"You have problems.\")\n     Exit Sub\nEnd If\n\nOn Error GoTo Label\n\n'Do stuff that's causing errors"], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: ilogic to trigger and insert custom content center files to an assembly\n                    ", "solution": [], "author": "Carthik_Babu"},
{"created at": [], "solution Title": "\n                        Re: CSV Filename not working\n                    ", "solution": ["   Private Sub test()\n        Dim Thisdoc As Document = ThisAppliocation.ActiveDocument\n        Dim FilName As String = GetDirFromPath(Thisdoc.FullDocumentName) & \"Spec_Sheet.csv\"\n        If My.Computer.FileSystem.FileExists(FilName) Then\n            Dim WordSets As New ArrayList()\n            Using ReadCSV As System.IO.StreamReader = New System.IO.StreamReader(FilName)\n                Do While ReadCSV.Peek <> -1\n                    WordSets.Add(ReadCSV.ReadLine.Split(\",\"))\n                Loop\n                ' work with your word sets in this area\n\n            End Using\n        Else\n            'FilName file did not exist. deal with this in this section or ignor it.\n            MsgBox(String.Format(\"{0} does not exist\", FilName), MsgBoxStyle.Information, \"Error Reading File\")\n        End If\n\n    End Sub\n\n\n    Public Function GetDirFromPath(ByVal path As String) _\n      As String\n\n        Try\n            Return path.Substring(0, path.LastIndexOf(\"\\\") + 1)\n\n        Catch ex As Exception\n            ' error\n            Return \"\"\n        End Try\n\n    End Function"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: face.CalculateFacetsAndTextureMap throw exception\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Which rxinventor.tlb to use?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Workplanes angles\n                    ", "solution": ["Public Sub GetExtrusionAngle()\n\n    Dim doc As PartDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim extrusion As ExtrudeFeature\n    Set extrusion = doc.ComponentDefinition.Features.ExtrudeFeatures(1)\n    \n    Dim wp As workplane\n    Set wp = extrusion.profile.Parent.PlanarEntity\n    \n    Dim face As face\n    For Each face In extrusion.StartFaces\n    \n        Dim normal As UnitVector\n        Set normal = GetNormal(face)\n        \n        Dim angleRad As Double\n        angleRad = wp.plane.normal.AngleTo(normal)\n        \n        Debug.Print \"Angle (deg) = \" & angleRad * 180# / 3.1416\n        \n    Next\n\nEnd Sub\n\nFunction GetNormal(PlanarEntity As Variant) As UnitVector\n\n    If (TypeOf PlanarEntity Is face Or TypeOf PlanarEntity Is faceProxy) Then\n    \n        Dim oFace As face\n        Set oFace = PlanarEntity\n\n        Set GetNormal = GetFaceNormal(oFace)\n        Exit Function\n    \n    ElseIf (TypeOf PlanarEntity Is workplane Or TypeOf PlanarEntity Is WorkPlaneProxy) Then\n    \n        Dim oWorkPlane As workplane\n        Set oWorkPlane = PlanarEntity\n\n        Set GetNormal = oWorkPlane.plane.normal\n        Exit Function\n    \n    End If\n\n    Set GetNormal = Nothing\n    \nEnd Function\n\nPrivate Function GetFaceNormal(face As face) As UnitVector\n\n    Dim evaluator As SurfaceEvaluator\n    Set evaluator = face.evaluator\n    \n    Dim ptOnFace As point\n    Set ptOnFace = face.PointOnFace\n    \n    Dim points(2) As Double\n    points(0) = ptOnFace.X\n    points(1) = ptOnFace.Y\n    points(2) = ptOnFace.Z\n    \n    Dim guessParams(1) As Double\n    Dim maxDev(1) As Double\n    Dim params(1) As Double\n    Dim sol(1) As SolutionNatureEnum\n    \n    Call evaluator.GetParamAtPoint(points, guessParams, maxDev, params, sol)\n    \n    Dim normal(2) As Double\n    \n    Call evaluator.GetNormal(params, normal)\n    \n    Set GetFaceNormal = ThisApplication.TransientGeometry.CreateUnitVector( _\n        normal(0), _\n        normal(1), _\n        normal(2))\n\nEnd Function\n"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: ilogic if statement condition being ignored???\n                    ", "solution": ["\u00a0If ThisDoc.Document.documenttype=12292 Then", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0doc = ThisDoc.ModelDocument", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Project\", \"Revision Number\") = _", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0doc.PropertySets.Item(1).Item(\"Revision Number\").Value", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Project\", \"Part Number\")= \"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Project\", \"Description\")= \"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Summary\", \"Title\")=\"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Summary\", \"Subject\")=\"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Summary\", \"Author\")=\"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Project\", \"Project\")= \"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Project\", \"Designer\")= \"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Project\", \"Engineer\")= \"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Project\", \"Authority\")= \"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Project\", \"Cost Center\")= \"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Project\", \"Creation Time\")= #1/1/1601#", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Status\", \"Status\")=\"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Status\", \"Checked By\")=\"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Status\", \"Checked Date\")= #1/1/1601# ", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Status\", \"Engr Approved By\")=\"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Status\", \"Engr Date Approved\")=#1/1/1601# ", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Status\", \"Mfg Approved By\")=\"\"", "\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0iProperties.Value(\"Status\", \"Mfg Date Approved\")=#1/1/1601# ", "\u00a0\u00a0 \u00a0End If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: C++ VS2010 SimpleAddIn does not load\n                    ", "solution": [], "author": "oransen"},
{"created at": [], "solution Title": "\n                        Re: How can i speed up adding parts to an assembly?\n                    ", "solution": ["Sub PerformanceIncrease()\n\n    Dim Invapp As Inventor.Application\n    Set Invapp = ThisApplication\n\n    '' Turn off user interaction so that inventor can focus on your API calls exclusively\n    Invapp.UserInterfaceManager.UserInteractionDisabled = True\n    \n    '' Turn off screenupdating to speed up performance\n    Invapp.ScreenUpdating = False\n    \n    '' Set Defer updates to true and force an update when you're finished with your API commands\n    '' This can be done on drawings and sketches as well\n    Invapp.AssemblyOptions.DeferUpdate = True\n    \n    '' Create the document invisible\n    Dim oAssDoc As Inventor.AssemblyDocument\n    Set oAssDoc = Invapp.Documents.Add( _\n        Inventor.DocumentTypeEnum.kAssemblyDocumentObject, , True)\n        \n    ''Wrap your command into a global transaction so only one undo point is created.\n    Dim oTrans As Inventor.Transaction\n    \n    Set oTrans = Invapp.TransactionManager.StartGlobalTransaction(oAssDoc, _\n        \"My API Calls\")\n        \n    '' perform your functions here\n    \n    '' Be sure to end a global transaction when you are finished\n    oTrans.End\n        \n    '' Wrap up\n    Invapp.ScreenUpdating = True\n    Invapp.UserInterfaceManager.UserInteractionDisabled = False\n    \n    '' Make the assembly document visible\n    Call oAssDoc.Views.Add\n    Call oAssDoc.Update\n    Invapp.AssemblyOptions.DeferUpdate = False\n    \nEnd Sub"], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: C++ 64 bit when doing an addin for Inventor 64, but 32 or 64 bit for exe...\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Bad File Name in Dir\n                    ", "solution": [], "author": "AJ1227"},
{"created at": [], "solution Title": "\n                        Re\u00a0: Bend line projection on a sketch\n                    ", "solution": ["Sub Marquages()\nDim oPartDoc As PartDocument\nDim oPoint1, oPoint2 As Point2d\n\nSet oPartDoc = ThisApplication.ActiveDocument\nDim oSheetMetalDef As SheetMetalComponentDefinition\nSet oSheetMetalDef = ThisApplication.ActiveDocument.ComponentDefinition\n\nDim oFlatPattern As FlatPattern\nSet oFlatPattern = oSheetMetalDef.FlatPattern\n\nIf oPartDoc.SelectSet.Count = 0 Then\n    MsgBox \"Selectionner un axe de pliage\", vbExclamation\n    End\nEnd If\n\nDim oBendEdge As Edge\nSet oBendEdge = oPartDoc.SelectSet(1)\n\nDim oSketch As PlanarSketch\nSet oSketch = oFlatPattern.Sketches.Add(oSheetMetalDef.FlatPattern.TopFace, False)\noSketch.Name = \"Marquages \" & oFlatPattern.Sketches.Count\n\nDim oTransGeom As TransientGeometry\nSet oTransGeom = ThisApplication.TransientGeometry\n\nDim oLines(1 To 3) As SketchLine\nSet oLines(1) = oFlatPattern.Sketches(1).AddByProjectingEntity(oBendEdge)\n\nSet oPoint1 = oLines(1).Geometry.StartPoint\nSet oPoint2 = oLines(1).Geometry.EndPoint\n\nSet oLines(2) = oSketch.SketchLines.AddByTwoPoints(oPoint1, oPoint2)\nCall oSketch.GeometricConstraints.AddGround(oLines(2).StartSketchPoint)\nCall oSketch.DimensionConstraints.AddTwoPointDistance(oLines(2).StartSketchPoint, oLines(2).EndSketchPoint, kAlignedDim, oPoint1)\noSketch.DimensionConstraints(1).Parameter.Value = 1\n\nSet oLines(3) = oSketch.SketchLines.AddByTwoPoints(oPoint1, oPoint2)\nCall oSketch.GeometricConstraints.AddGround(oLines(3).EndSketchPoint)\nCall oSketch.DimensionConstraints.AddTwoPointDistance(oLines(3).StartSketchPoint, oLines(3).EndSketchPoint, kAlignedDim, oPoint2)\noSketch.DimensionConstraints(2).Parameter.Value = 1\n\nCall oSketch.GeometricConstraints.AddCollinear(oLines(2), oLines(3))\n\noLines(1).Delete\nEnd Sub"], "author": "denis.bourassea"},
{"created at": [], "solution Title": "\n                        Re: how to know if a view is baseview with vb.net?\n                    ", "solution": ["For each oView in oViews\n     If oView.ViewType = Inventor.DrawingViewTypeEnum.kStandardDrawingViewType Then\n          Debug.Print(\"This is a base view\")\n     Else\n          Debug.Print(\"This is not a base view\")\n\u00a0\u00a0\u00a0\u00a0 End If\nNext"], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: Why would this fail?\n                    ", "solution": [], "author": "meck"},
{"created at": [], "solution Title": "\n                        Re: Call iLogic Form Via API\n                    ", "solution": ["Public Sub Main()\n\n\t' Get iLogic Addin\n    Dim iLogicAuto As Object = GetiLogicAddin(ThisApplication)\n    If (iLogicAuto Is Nothing) Then Exit Sub\n\t\n\t' Get reference document\n\tDim oRefDoc As Document = ActiveSheet.View(\"ViewName\").ModelDocument\t\n\t' Run rule\n\tiLogicAuto.RunRule(oRefDoc, \"Rule - Run Form\")\n\t\nEnd Sub\n\nFunction GetiLogicAddin(oApplication As Inventor.Application) As Object\n\t' Get addin collection & addin variables\n  Dim addIns As ApplicationAddIns = oApplication.ApplicationAddIns\n  Dim addIn As ApplicationAddIn\n  Dim customAddIn As ApplicationAddIn\n  \n  For Each addIn In addIns\n    If (addIn.ClassIdString = \"{3BDD8D79-2179-4B11-8A5A-257B1C0263AC}\") Then\n    \tcustomAddIn = addIn\n    Exit For\n    End If\n  Next\n\n  If (customAddIn Is Nothing) Then Exit Function\n  customAddIn.Activate\n  \n  Return customAddIn.Automation\n  \nEnd Function"], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: FREE SAVE DXF MACRO FOR YOUR HELP!\n                    ", "solution": ["Dim strProject As String\nstrProject = oPartDoc.PropertySets(\"Design Tracking Properties\").Item(\"Project\").Value\n\nDim strPath As String\nstrPath = Left(oPartDoc.FullFileName, InStrRev(oPartDoc.FullFileName, \"\\\"))\n\nDim oDXFfileNAME As String\noDXFfileNAME = strPath & strProject & \".dxf\""], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: _Document vs Document\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Is a global SIZE column in the BOM possible?\n                    ", "solution": [], "author": "GavoGarmo"},
{"created at": [], "solution Title": "\n                        Re: FindUsingVector\n                    ", "solution": [], "author": "nagwani"},
{"created at": [], "solution Title": "\n                        Re: Form\n                    ", "solution": [], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: Can you override an iLogic trigger?\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: how to get modeldocument name for a drawingdocument?\n                    ", "solution": ["Public Sub GetDrawingModelName()\n\n    ' Get reference to the first referenced document\n    Dim oDoc As Document\n    Set oDoc = ThisApplication.ActiveDocument.ReferencedDocuments.Item(1)\n    \n    ' Get file system object\n    Dim Fso As New FileSystemObject\n    Debug.Print Fso.GetFileName(oDoc.FullFileName)\n    \n    ' Change Debug.Print to be a msgbox or any variable if you want\nEnd Sub"], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: ThisApplication in VB .Net ?\n                    ", "solution": ["Public Module Globals\n    Public g_inventorApplication As Inventor.Application\nEnd Module"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Overrule parameter\n                    ", "solution": [], "author": "jostroopers"},
{"created at": [], "solution Title": "\n                        Re: Need to reload an addin for each file\n                    ", "solution": [], "author": "TONELLAL"},
{"created at": [], "solution Title": "\n                        Re: Plotting individual idw sheets from Vault to PDFs\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: part number from file name\n                    ", "solution": ["Split(\"060321 Rev2.iam\", \" \")(0)  ' Will return 060321"], "author": "planglais"},
{"created at": [], "solution Title": "\n                        Re: Copy parameters.\n                    ", "solution": [], "author": "jostroopers"},
{"created at": [], "solution Title": "\n                        Re: Assembly current view\n                    ", "solution": ["Option Explicit\n\nSub Viewtest()\n\nDim oDoc As Document\nSet oDoc = ThisApplication.ActiveDocument\nDim oview As View\nSet oview = oDoc.Views.item(1)\n\n' To get view is perspective or not.\n' If view is not perspective then it is Orthographic.\nMsgBox oview.Camera.Perspective\n\n' gets view orientation in Inventor Window.\nDim orientype As ViewOrientationTypeEnum\n orientype = oview.Camera.ViewOrientationType\nIf orientype = 10763 Then\n    MsgBox \"Arbitrary View\" & \" & Standard Enum Value: \" & \"kArbitraryViewOrientation\"\n Else\nIf orientype = 10756 Then\n    MsgBox \"Back View\" & \" & Standard Enum Value:  \" & \"kBackViewOrientation\"\n Else\nIf orientype = 10757 Then\n    MsgBox \"Bottom View\" & \" & Standard Enum Value: \" & \"kBottomViewOrientation\"\n Else\nIf orientype = 10765 Then\n    MsgBox \"Current View\" & \" & Standard Enum Value: \" & \"kCurrentViewOrientation\"\n Else\nIf orientype = 10753 Then\n    MsgBox \"default View\" & \" & Standard Enum Value: \" & \"kDefaultViewOrientation\"\n Else\nIf orientype = 10773 Then\n    MsgBox \"Sheet metal flat pattern backside pivot 180 degrees\" & \" & Standard Enum Value: \" & \"kFlatBacksidePivot180ViewOrientation\"\n Else\n If orientype = 10772 Then\n    MsgBox \"Sheet metal flat pattern backside pivot left\" & \" & Standard Enum Value: \" & \"kFlatBacksidePivotLeftViewOrientation\"\n Else\n If orientype = 10771 Then\n    MsgBox \"Sheet metal flat pattern backside pivot right\" & \" & Standard Enum Value: \" & \"kFlatBacksidePivotRightViewOrientation\"\n Else\n If orientype = 10770 Then\n    MsgBox \"Sheet metal flat pattern backside\" & \" & Standard Enum Value: \" & \"kFlatBacksideViewOrientation\"\n Else\n If orientype = 10769 Then\n    MsgBox \"Sheet metal flat pattern pivot 180 degrees\" & \" & Standard Enum Value: \" & \"kFlatPivot180ViewOrientation\"\n Else\n If orientype = 10768 Then\n    MsgBox \"Sheet metal flat pattern pivot left\" & \" & Standard Enum Value: \" & \"kFlatPivotLeftViewOrientation\"\n Else\n If orientype = 10767 Then\n    MsgBox \"Sheet metal flat pattern pivot right\" & \" & Standard Enum Value: \" & \"kFlatPivotRightViewOrientation\"\n Else\n If orientype = 10764 Then\n    MsgBox \"Front View\" & \" & Standard Enum Value: \" & \"kFrontViewOrientation\"\n Else\n If orientype = 10762 Then\n    MsgBox \"Isometric -- Bottom Left View\" & \" & Standard Enum Value: \" & \"kIsoBottomLeftViewOrientation\"\n Else\n If orientype = 10761 Then\n    MsgBox \"Isometric -- Bottom Right View\" & \" & Standard Enum Value: \" & \"kIsoBottomRightViewOrientation\"\n Else\n If orientype = 10760 Then\n    MsgBox \"Isometric -- Top Left View\" & \" & Standard Enum Value: \" & \"kIsoTopLeftViewOrientation\"\n Else\n If orientype = 10759 Then\n    MsgBox \"Isometric -- Top Right View\" & \" & Standard Enum Value: \" & \"kIsoTopRightViewOrientation\"\n Else\n If orientype = 10758 Then\n    MsgBox \"Left View\" & \" & Standard Enum Value: \" & \"kLeftViewOrientation\"\n Else\n If orientype = 10755 Then\n    MsgBox \"Right View\" & \" & Standard Enum Value: \" & \"kRightViewOrientation\"\n Else\n  If orientype = 10766 Then\n    MsgBox \"Saved camera View\" & \" & Standard Enum Value: \" & \"kSavedCameraViewOrientation\"\n Else\n  If orientype = 10754 Then\n    MsgBox \"Top View\" & \" & Standard Enum Value: \" & \"kTopViewOrientation\"\n Else\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\nEnd If\n\nEnd Sub"], "author": "ADNpati"},
{"created at": [], "solution Title": "\n                        Re: Rule to suppress/unsuppress many features\n                    ", "solution": ["Dim oCompDef As Inventor.ComponentDefinition\noCompDef = ThisDoc.Document.ComponentDefinition\nIf TypeOf oCompDef Is Inventor.AssemblyComponentDefinition Then\n\toCompDef.SetEndOfFeaturesToTopOrBottom(True)\nElseIf TypeOf oCompDef Is Inventor.PartComponentDefinition Then\n\toCompDef.SetEndOfPartToTopOrBottom(True)\nEnd If", "Dim oCompDef As Inventor.ComponentDefinition\noCompDef = ThisDoc.Document.ComponentDefinition\nIf TypeOf oCompDef Is Inventor.AssemblyComponentDefinition Then\n\toCompDef.SetEndOfFeaturesToTopOrBottom(False)\nElseIf TypeOf oCompDef Is Inventor.PartComponentDefinition Then\n\toCompDef.SetEndOfPartToTopOrBottom(False)\nEnd If"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Drawing won't save after creation with template\n                    ", "solution": [], "author": "miechh"},
{"created at": [], "solution Title": "\n                        Re: Exportar Static Quantity da BOM para o Excel\n                    ", "solution": ["Dim", " ", "oBom", "\n", "quantity", "  ", "=", " ", "ThisApplication", ".", "ActiveDocument", ".", "ComponentDefinition", ".", "BOM", ".", "BomViews", "(", "1", ")", ".", "BomRows", "(", "1", ")", ".", "TotalQuantity", " \n", "MsgBox", "(", "quantity", " ", ")", "\n"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Edit filename of iAssembly Table Member in ilogic\n                    ", "solution": [" \n    Dim oDoc As AssemblyDocument\n     oDoc = ThisApplication.ActiveDocument\n    \n    Dim odef As AssemblyComponentDefinition\n     odef = oDoc.ComponentDefinition\n    \n    Dim oFactory As iAssemblyFactory\n     oFactory = odef.CreateFactory\n    \n    Dim oWorkSheet\n     oWorkSheet = oFactory.ExcelWorkSheet\n    \n    Dim oCells\n     oCells = oWorkSheet.Cells\n    \n    ' Columns...\n    oCells.Item(1, 2) = \"HANDLE CAP:1:Include/Exclude\"\n    oCells.Item(1, 3) = \"HANDLE CAP:2:Include/Exclude\"\n    oCells.Item(1, 4) = \"LEVER ARM:1:Include/Exclude\"\n    oCells.Item(1, 5) = \"Arbor_Frame:1:Grounding Status\"\n    oCells.Item(1, 6) = \"d75\"\n    oCells.Item(1, 7) = \"d92\"\n    \n    ' Row 1 values...\n    oCells.Item(2, 1) = \"Arbor_Press-01\"\n    oCells.Item(2, 2) = \"Include\"\n    oCells.Item(2, 3) = \"Include\"\n    oCells.Item(2, 4) = \"Include\"\n    oCells.Item(2, 5) = \"Grounded\"\n    oCells.Item(2, 6) = \"0.0 in\"\n    oCells.Item(2, 7) = \"180.00000\"\n    \n    ' Row 2 values...\n    oCells.Item(3, 1) = \"Arbor_Press-02\"\n    oCells.Item(3, 2) = \"Include\"\n    oCells.Item(3, 3) = \"Include\"\n    oCells.Item(3, 4) = \"Include\"\n    oCells.Item(3, 5) = \"Grounded\"\n    oCells.Item(3, 6) = \"0.5 in\"\n    oCells.Item(3, 7) = \"90.00000\"\n    \n    ' Row 3 values...\n    oCells.Item(4, 1) = \"Arbor_Press-03\"\n    oCells.Item(4, 2) = \"Exclude\"\n    oCells.Item(4, 3) = \"Exclude\"\n    oCells.Item(4, 4) = \"Exclude\"\n    oCells.Item(4, 5) = \"Ungrounded\"\n    oCells.Item(4, 6) = \"0.0 in\"\n    oCells.Item(4, 7) = \"180.00000\"\n\n    Dim oWB\n     oWB = oWorkSheet.Parent\n    \n    oWB.Save\n    oWB.Close\n"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: place a list of components with iMates into an assembly using ilogic/VBA\n                    ", "solution": ["Public Sub Main()\n    ' Get the component definition of the currently open assembly.\n    ' This will fail if an assembly document is not open.\n    Dim oAsmCompDef As AssemblyComponentDefinition\n    oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n    ' Create a new matrix object. It will be initialized to an identity matrix.\n    Dim oMatrix As Matrix\n    oMatrix = ThisApplication.TransientGeometry.CreateMatrix\n    oMatrix.SetTranslation(ThisApplication.TransientGeometry.CreateVector(0,0,0))\n\n    ' Place the first occurrence.\n    Dim oOcc1 As ComponentOccurrence\n    oOcc1 = oAsmCompDef.Occurrences.Add(\"C:\\Part1.ipt\"?, oMatrix)\n\n    ' Place the second occurrence, but use iMates for its placement. This is\n    ' equivalent to \"Use iMate\" check box on the \"Place Component\" dialog.\n    Dim oOccEnumerator As ComponentOccurrencesEnumerator\n    oOccEnumerator = oAsmCompDef.Occurrences.AddUsingiMates(\"C:\\Part2.ipt\", False)\n\n    ' Since the 'PlaceAllMatching' flag was specified as False, we can be\n    ' sure that just one ComponentOccurrence was returned in the enumerator.\n'    oOcc1 = oOccEnumerator.Item(1)\nEnd Sub"], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: Create new TableStyle definition\n                    ", "solution": [], "author": "dave.deane"},
{"created at": [], "solution Title": "\n                        Re: File Save As Dialog wont launch through Command Manager\n                    ", "solution": ["Sub PrintCommandNames()\n    Dim oControlDefs As ControlDefinitions\n    Set oControlDefs = ThisApplication.CommandManager.ControlDefinitions\n\n    Dim oControlDef As ControlDefinition  \n    Open \"C:\\temp\\CommandNames.txt\" For Output As #1\n    Print #1, Tab(10); \"Command Name\"; Tab(75); \"Description\"; vbNewLine\n  \n    For Each oControlDef In oControlDefs\n        Print #1, oControlDef.InternalName; Tab(55); oControlDef.DescriptionText       \n    Next\n    Close #1\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Border's Rangebox with Apprentice?\n                    ", "solution": [], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: Difference between assembly drawing and part drawing\n                    ", "solution": ["Private Sub DrawingRefs()\n  \n  Dim oDoc As DrawingDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  Dim oSheet As Sheet\n  Set oSheet = oDoc.ActiveSheet\n  \n  Dim oView As DrawingView\n  Set oView = oSheet.DrawingViews.Item(1)\n\n  Dim oRef As DocumentDescriptor\n  Set oRef = oView.ReferencedDocumentDescriptor\n  \n  Select Case oRef.ReferencedDocumentType\n    Case DocumentTypeEnum.kAssemblyDocumentObject\n      MsgBox \"Assembly Document\"\n    Case DocumentTypeEnum.kPartDocumentObject\n      MsgBox \"Part Document\"\n    Case Else\n      MsgBox \"Document - ???\"\n  End Select\n\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Can't change scale of Isometric view\n                    ", "solution": ["Try this", "oView.[Scale]=oView.scale/2"], "author": "pds"},
{"created at": [], "solution Title": "\n                        Re: Automate Drawing Creation\n                    ", "solution": [], "author": "jonbrabbs"},
{"created at": [], "solution Title": "\n                        Re: Selecting (SelectSet) an Item from the Model Browser in a DrawingDocument\n                    ", "solution": ["Function GetSelectedItems(nodes As BrowserNodesEnumerator) As String\n    Dim node As BrowserNode\n    For Each node In nodes\n        If node.Selected Then\n            GetSelectedItems = GetSelectedItems + vbCrLf + node.BrowserNodeDefinition.Label\n        End If\n        \n        GetSelectedItems = GetSelectedItems + GetSelectedItems(node.BrowserNodes)\n    Next\nEnd Function\n\nSub GetSelectedItemsInBrowser()\n    Dim bp As BrowserPane\n    Set bp = ThisApplication.ActiveDocument.BrowserPanes(\"DlHierarchy\")\n    \n    Dim items As String\n    items = GetSelectedItems(bp.TopNode.BrowserNodes)\n    \n    MsgBox items\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic Form - Read Only\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: I want to create an ilogic rule for an idw that is triggered when a iam is u\n                    ", "solution": ["' This assumes a drawing document is active.\nDim oDrawDoc As DrawingDocument\noDrawDoc = ThisApplication.ActiveDocument\n'Set a reference to the active sheet.\nDim oSheet As Sheet\noSheet = oDrawDoc.ActiveSheet\n' Set a reference to the first drawing view on the sheet. Assumes it\u2019s not a draft view.\nDim oDrawingView As DrawingView\noDrawingView = oSheet.DrawingViews(1)\n\u2018define the insert point\nDim oPlacementPoint As Point2d\noPlacementPoint = ThisApplication.TransientGeometry.CreatePoint2d (27.8130#, 21.463#)\n' Create the parts list.\noPartsList = oSheet.PartsLists.Add(oDrawingView, oPlacementPoint)\n\n'check to see if the referenced file is a weldment\noModelDoc = ThisDoc.ModelDocument\nIf oModelDoc.SubType = \"{28EC8354-9024-440F-A8A2-0E0E55D635B0}\" Then\n'set parts list to a specific style for weldments\noPartsList.Style = oDrawDoc.StylesManager.PartsListStyles.Item(\"Weldment Parts List\")\nElse\n'set parts list to a specific style for standard assemblies\noPartsList.Style = oDrawDoc.StylesManager.PartsListStyles.Item(\"Standard Parts List\")\nEnd if", "Sub", " ", "Main", "()", "\n\n", "'", " This assumes a drawing document is active.", "Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawDoc", " ", "=", " ", "ThisApplication", ".", "ActiveDocument", "\n", "'", "Set a reference to the active sheet.", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", "\n", "'", " Set a reference to the first drawing view on the sheet. Assumes it's not a draft view.", "Dim", " ", "oDrawingView", " ", "As", " ", "DrawingView", "\n", "oDrawingView", " ", "=", " ", "oSheet", ".", "DrawingViews", "(", "1", ")", "\n", "'", "define the insert point", "Dim", " ", "oPlacementPoint", " ", "As", " ", "Point2d", "\n", "oPlacementPoint", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", ".", "CreatePoint2d", " ", "(", "27.8130", "#, ", "21.463", "#", ")", "\n", "'", " Create the parts list.", "oPartsList", " ", "=", " ", "oSheet", ".", "PartsLists", ".", "Add", "(", "oDrawingView", ", ", "oPlacementPoint", ")", "\n\n", "'", "check to see if the referenced file is a weldment", "Dim", " ", "oStyle", " ", "As", " ", "PartsListStyle", "\n", "oModelDoc", " ", "=", " ", "ThisDoc", ".", "ModelDocument", "\n", "If", " ", "oModelDoc", ".", "SubType", " ", "=", " ", "\"", "{28EC8354-9024-440F-A8A2-0E0E55D635B0}", "\"", " ", "Then", "\n", "'", "set parts list to a specific style for weldments", "\n'", "oPartsList.Style = oDrawDoc.StylesManager.PartsListStyles.Item(\"Weldment Parts List\")", "  ", "oStyle", " ", "=", " ", "PartsListStyle", "(", "oDrawDoc", ", ", "\"", "Weldment Parts List", "\"", ")", "\n  ", "If", " ", "Not", " ", "oStyle", " ", "Is", " Nothing ", "Then", "\n     ", "oPartsList", ".", "Style", " ", "=", " ", "oStyle", "\n  ", "End", " ", "If", "\n", "Else", "\n", "'", "set parts list to a specific style for standard assemblies", "\n'", "oPartsList.Style = oDrawDoc.StylesManager.PartsListStyles.Item(\"Parts List (Ansi)\")", "\n ", "oStyle", " ", "=", " ", "PartsListStyle", "(", "oDrawDoc", ", ", "\"", "Parts List (Ansi)", "\"", ")", "\n  ", "If", " ", "Not", " ", "oStyle", " ", "Is", " Nothing ", "Then", "\n     ", "oPartsList", ".", "Style", " ", "=", " ", "oStyle", "\n  ", "End", " ", "If", "\n  \n", "End", " ", "If", "\n", "End Sub", "\n\n", "Function", " ", "PartsListStyle", "(", "oDoc", " ", "As", " ", "DrawingDocument", ", ", "stylename", " ", "As", " ", "String", " ", ")", " ", "As", " ", "PartsList", "\n\n   ", "PartsListStyle", " ", "=", "Nothing\n   ", "Dim", " ", "oEachStyle", " ", "As", " ", "PartsListStyle", "\n   ", "For", " ", "Each", " ", "oEachStyle", " ", "In", " ", "oDoc", ".", "StylesManager", ".", "PartsListStyles", "  \n      ", "If", " ", "oEachStyle", ".", "Name", " ", "=", " ", "stylename", " ", "Then", "\n        ", "PartsListStyle", " ", "=", " ", "oEachStyle", "\n        ", "Exit Function", "\n      ", "End", " ", "If", "\n   ", "Next", "\n   \n", "End Function", "\n\n\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: use the loaded IPT on IDW Through VBA\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Assembly Colour Finish\n                    ", "solution": ["'name list of specific parts\n' Note: case sensitive!!\nDim listOfSpecificPart() As String = New String(){\"Part1:1\", \"part2:1\"}\n \n\tnum = ThisApplication.ActiveDocument.ComponentDefinition.Occurrences.Count\n\tjj=1\n\tWhile jj<num+1\n\tDim eachOccName\n\teachOccName = ThisApplication.ActiveDocument.ComponentDefinition.Occurrences.Item(jj).Name\n\t' check if this is a specific part\n\tDim oIndex As Integer = Array.IndexOf(listOfSpecificPart, eachOccName)\n\t \n\tIf  oIndex > 0 Then\n\t\t Component.Color(eachOccName) = black_colour\t\t \n\tElse\t\n\t\t Component.Color(eachOccName) = paint_colour\t\t \n\tEnd If\n\tjj=jj+1\n\tEnd While\n\tiLogicVb.UpdateWhenDone = True\n "], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Units of Measure, and precision\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Divide a segment equally with a range in visual basic\n                    ", "solution": ["Sub Demo()\nDim Length As Double\nDim Range As Double\n\n    Length = 144\n    Range = 8\n\n    MsgBox (Answer(Length, Range))\nEnd Sub\n\nFunction Answer(L As Double, R As Double)\n    Answer = L / R\nEnd Function"], "author": "jonbrabbs"},
{"created at": [], "solution Title": "\n                        Re: Using iLogic Form I need to Acces the Material Property\n                    ", "solution": [], "author": "riff62"},
{"created at": [], "solution Title": "\n                        Re: Changing Positional Representation Using iLogic\n                    ", "solution": ["\u00a0'set a reference to the assembly component definition.", "\u00a0'This assumes an assembly document is open.", "Dim oAsmCompDef As AssemblyComponentDefinition", "oAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition", "'define pos rep ", "Dim oPosRep As PositionalRepresentation", "Dim sPosRep As String", "Dim MyArrayList As New ArrayList", "'record the active view rep name", "Dim sActivePosRep as String", "sActivePosRep = oAsmCompDef.RepresentationsManager.ActivePositionalRepresentation.Name", "For Each oPosRep In oAsmCompDef.RepresentationsManager.PositionalRepresentations", "MyArrayList.add(oPosRep.Name)", "Next", "iArrayList = MyArrayList.Count", "MyArrayList.add(\"*Add a new Positional Rep*\")", "sPosRep = InputListBox(\"Select from the list:\", MyArrayList, sActivePosRep, \"iLogic\", \"Positional Reps\")", "If sPosRep = \"*Add a new Positional Rep*\" Then", "newPosRep = InputBox(\"Enter a name:\", \"iLogic\", \"New Pos Rep_\" & iArrayList)", "newAngle = InputBox(\"Enter an Angle:\", \"iLogic\", \"5\")", "'create new pos rep", "oAsmCompDef.RepresentationsManager.PositionalRepresentations.Add(newPosRep)", "myAngle = newAngle", "Else", "'activate the selected pos rep", "oAsmCompDef.RepresentationsManager.PositionalRepresentations.Item(sPosRep).Activate\u00a0\u00a0 \u00a0", "End If", "'zoom all", "ThisApplication.ActiveView.Fit", "\n"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How can i make these custom property formats with VBA?\n                    ", "solution": ["Private Sub fxex()\n\nDim oInvApp As Application\nSet oInvApp = ThisApplication\n\nDim oUserParameter As UserParameter\nSet oUserParameter = oInvApp.ActiveDocument.ComponentDefinition.Parameters.UserParameters.Item(1)\n           \noUserParameter.ExposedAsProperty = True\noUserParameter.CustomPropertyFormat.PropertyType = CustomPropertyTypeEnum.kTextPropertyType\noUserParameter.CustomPropertyFormat.Precision = CustomPropertyPrecisionEnum.kSixteenthsFractionalLengthPrecision\noUserParameter.CustomPropertyFormat.Units = UnitsTypeEnum.kInchLengthUnits\noUserParameter.CustomPropertyFormat.ShowUnitsString = False\n\nEnd Sub"], "author": "krieg"},
{"created at": [], "solution Title": "\n                        Re: Is it possible to nest popup buttons on context menu?\n                    ", "solution": [], "author": "FarrenYoung"},
{"created at": [], "solution Title": "\n                        Re: How to get iproperties of the selected part or sub-assembly using VB.NET\n                    ", "solution": ["If inv_App.ActiveDocument.SelectSet.Count = 1 Then\n    If TypeOf inv_App.ActiveDocument.SelectSet.Item(1) Is ComponentOccurrence Then", "        Dim oOcc As ComponentOccurrence", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oOcc = inv_App.ActiveDocument.SelectSet.Item(1)", "\n        Dim oDoc As Document\n        oDoc = oOcc.Definition.Document\n    \n        Dim oProp As Property\n        oProp = oDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Description\")\n    \n        MsgBox (oProp.Value)\n    End If\nEnd If"], "author": "krieg"},
{"created at": [], "solution Title": "\n                        Re: Position of Part in idw\n                    ", "solution": ["Option Explicit\nSub FaceRecognitiononIDW()\n\n\n    Dim oDrawingDoc As DrawingDocument\n    Set oDrawingDoc = ThisApplication.ActiveDocument\n    Dim oDef As ComponentDefinition\n    \n    Dim itemCnt As Integer\n    itemCnt = 0\n    \n    Dim oView As DrawingView\n    Set oView = oDrawingDoc.ActiveSheet.DrawingViews(1)\n    \n    Dim oDoc As Document\n    Set oDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n    \n    Dim oPartDoc  As Document\n    Dim oRrubberPart As PartDocument\n    Dim oAllRef As DocumentsEnumerator\n    Dim occ As ComponentOccurrence\n    Dim occDef As ComponentDefinition\n    Dim oTextBox As TextBox\n    Dim oPartCompDef As PartComponentDefinition\n    Dim oSurfBody As SurfaceBody\n    Dim oFa As face\n    \n    ' Set a reference to the active sheet.\n    Dim oActiveSheet As Sheet\n    Set oActiveSheet = oDrawingDoc.ActiveSheet\n    \n    For Each occ In oDoc.ComponentDefinition.occurrences\n    If occ.DefinitionDocumentType = kPartDocumentObject Then\n        If occ.SurfaceBodies.count <> 0 Then\n            Set oPartDoc = occ.Definition.Document\n            Set occDef = oPartDoc.ComponentDefinition\n            Set oSurfBody = occDef.SurfaceBodies(1)\n            Set oPartCompDef = occ.Definition\n            For Each oFa In oSurfBody.Faces\n                itemCnt = itemCnt + 1\n                If oFa.SurfaceType = kPlaneSurface Then\n                ' Getting a planar surface face above\n                ' ground level and face not connected\n                ' to any other face\n                    If oFa.TangentiallyConnectedFaces.count = 0 Then\n                        If oFa.PointOnFace.Z <> \"0\" Then\n                            If ThisApplication.MeasureTools.GetAngle(oFa, occ.Definition.WorkPlanes(3)) = \"0\" Then\n                                Dim oFaProxy As FaceProxy\n                                Call occ.CreateGeometryProxy(oFa, oFaProxy)\n                                ' Get the point of the sketch\n                                Dim oMidPoint As Point2d\n                                Set oMidPoint = oView.ModelToSheetSpace(oFaProxy.PointOnFace)\n                                \n                                ' Set a reference to the TransientGeometry object.\n                                Dim oTG As TransientGeometry\n                                Set oTG = ThisApplication.TransientGeometry\n                                \n                                Dim oLeaderPoints As ObjectCollection\n                                Set oLeaderPoints = ThisApplication.TransientObjects.CreateObjectCollection\n                                \n                                ' Create a few leader points.\n                                Call oLeaderPoints.Add(oTG.CreatePoint2d(oMidPoint.x, oMidPoint.y))\n                                Call oLeaderPoints.Add(oTG.CreatePoint2d(oMidPoint.x + 0.5, oMidPoint.y + 0.5))\n                                \n                                ' Create text with simple string as input. Since this doesn't use\n                                ' any text overrides, it will default to the active text style.\n                                Dim sText As String\n                                sText = \"API Leader Note\"\n                                \n                                Dim oLeaderNote As LeaderNote\n                                Set oLeaderNote = oActiveSheet.DrawingNotes.LeaderNotes.Add(oLeaderPoints, sText)\n                                \n                                ' Insert a node.\n                                Dim oFirstNode As LeaderNode\n                                Set oFirstNode = oLeaderNote.Leader.RootNode.ChildNodes.Item(1)\n                            End If\n                        End If\n                    End If\n                End If\n            Next\n        End If\n    End If\n    Next\nEnd Sub"], "author": "ADNpati"},
{"created at": [], "solution Title": "\n                        Re: Add Currently Selected Parts to an  ObjectCollection\n                    ", "solution": [], "author": "andrewwhiteinc"},
{"created at": [], "solution Title": "\n                        Re: adding api program link to Inventor 2013 toolbar?\n                    ", "solution": ["Public Sub exprog()\n    Shell (\"notepad.exe\") 'edit with full path to your exe\nEnd Sub"], "author": "krieg"},
{"created at": [], "solution Title": "\n                        Betreff: Edit OrdinateDimension with VB.Net\n                    ", "solution": ["Function GetLastDimensionInSet(ByVal ordDimSet As OrdinateDimensionSet) As OrdinateDimension\n    Dim ordDim As OrdinateDimension\n    Dim max As Double\n    For Each ordDim In ordDimSet.Members\n        If ordDim.ModelValue > max Then\n            max = ordDim.ModelValue\n            Set GetLastDimensionInSet = ordDim\n        End If\n    Next\nEnd Function", "Function GetClosestDimensionInSet(ByVal ordDimSet As OrdinateDimensionSet, ByVal pt As Point2d) As OrdinateDimension\n    Dim tr As TransientGeometry\n    Set tr = ThisApplication.TransientGeometry\n    \n    Dim ordDim As OrdinateDimension\n    Dim min As Double\n    min = 1000000\n    For Each ordDim In ordDimSet.Members\n        Dim poly As Polyline2d\n        Set poly = ordDim.DimensionLine\n        \n        Dim i As Integer\n        For i = 1 To poly.PointCount - 1\n            Dim line As LineSegment2d\n            Set line = tr.CreateLineSegment2d(poly.PointAtIndex(i), poly.PointAtIndex(i + 1))\n        \n            If line.DistanceTo(pt) < min Then\n                min = line.DistanceTo(pt)\n                Set GetClosestDimensionInSet = ordDim\n            End If\n        Next\n    Next\nEnd Function", "Private Sub uiEvents_OnSelect(ByVal JustSelectedEntities As ObjectsEnumerator, MoreSelectedEntities As ObjectCollection, ByVal SelectionDevice As SelectionDeviceEnum, ByVal ModelPosition As Point, ByVal ViewPosition As Point2d, ByVal View As View)\n    Dim tr As TransientGeometry\n    Set tr = ThisApplication.TransientGeometry\n    \n    Dim ordDim As OrdinateDimension\n    Set ordDim = GetClosestDimensionInSet(JustSelectedEntities(1).OrdinateDimensionSet, tr.CreatePoint2d(ModelPosition.X, ModelPosition.Y))\n    \n    ordDim.Text.FormattedText = ordDim.Text.FormattedText + \"+\"\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: iLogic Form Button to place ilogic component\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Getting iproperties values of all sub part or asm of the active IAM document\n                    ", "solution": [], "author": "mucip"},
{"created at": [], "solution Title": "\n                        Re: DerivedPartDefinition\n                    ", "solution": [], "author": "Holgarsson"},
{"created at": [], "solution Title": "\n                        Re: Automated Create sketch blocks\n                    ", "solution": ["Public Sub CreateBlocks(doc As PartDocument)\n\n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n\n    'Create 1st sketch block definition.\n    Dim def1 As SketchBlockDefinition\n    Set def1 = doc.ComponentDefinition.SketchBlockDefinitions.Add(\"Block1\")\n\n    'Draw the shape of this part as sketch geometry, (a rectangle with circles at the ends).\n    Call def1.SketchLines.AddAsTwoPointRectangle(tg.CreatePoint2d(0, 0), tg.CreatePoint2d(12, 3))\n    Call def1.SketchCircles.AddByCenterRadius(tg.CreatePoint2d(1.5, 1.5), 0.5)\n    Call def1.SketchCircles.AddByCenterRadius(tg.CreatePoint2d(10.5, 1.5), 0.5)\n\n    'Create 2nd sketch block definition.\n    Dim def2 As SketchBlockDefinition\n    Set def2 = doc.ComponentDefinition.SketchBlockDefinitions.Add(\"Block2\")\n\n    'Draw the shape of this part as sketch geometry, (a square, with a circle in the middle).\n    Call def2.SketchLines.AddAsTwoPointRectangle(tg.CreatePoint2d(0, 0), tg.CreatePoint2d(4, 4))\n    Call def2.SketchCircles.AddByCenterRadius(tg.CreatePoint2d(2, 2), 0.5)\n\nEnd Sub\n\n\nPublic Sub DemoSketchBlocks()\n\n    Dim doc As PartDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim tg As TransientGeometry\n    Set tg = ThisApplication.TransientGeometry\n\n    CreateBlocks doc\n    \n    'Create a new part sketch based on XY Workplane\n    Dim sketch As PlanarSketch\n    Set sketch = doc.ComponentDefinition.Sketches.Add( _\n        doc.ComponentDefinition.WorkPlanes(3))\n    \n    Dim def1 As SketchBlockDefinition\n    Set def1 = doc.ComponentDefinition.SketchBlockDefinitions(\"Block1\")\n\n    Dim def2 As SketchBlockDefinition\n    Set def2 = doc.ComponentDefinition.SketchBlockDefinitions(\"Block2\")\n\n    'Add one instance of Block1 and 2 instances of Block2\n    Dim blk1 As SketchBlock\n    Set blk1 = sketch.SketchBlocks.AddByDefinition( _\n        def1, tg.CreatePoint2d(0, 0))\n    \n    Dim blk2 As SketchBlock\n    Set blk2 = sketch.SketchBlocks.AddByDefinition( _\n        def2, tg.CreatePoint2d(2, 5))\n    \n    Dim blk3 As SketchBlock\n    Set blk3 = sketch.SketchBlocks.AddByDefinition( _\n        def2, tg.CreatePoint2d(10, 5))\n\n    Dim baseCircle1 As SketchCircle\n    Set baseCircle1 = blk1.GetObject(def1.SketchCircles(1))\n    \n    Dim baseCircle2 As SketchCircle\n    Set baseCircle2 = blk1.GetObject(def1.SketchCircles(2))\n\n    Dim square1Circle As SketchCircle\n    Set square1Circle = blk2.GetObject(def2.SketchCircles(1))\n    \n    Dim square2Circle As SketchCircle\n    Set square2Circle = blk3.GetObject(def2.SketchCircles(1))\n\n    'Add coincident constraints between the circle center points.\n    Call sketch.GeometricConstraints.AddCoincident( _\n        baseCircle1.CenterSketchPoint, square1Circle.CenterSketchPoint)\n        \n    Call sketch.GeometricConstraints.AddCoincident( _\n        baseCircle2.CenterSketchPoint, square2Circle.CenterSketchPoint)\n\n    'Ground the center point of one of the circle.\n    Call sketch.GeometricConstraints.AddGround(baseCircle1.CenterSketchPoint)\n    \n    ThisApplication.ActiveView.Fit\n    \nEnd Sub\n"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Test for iPart\n                    ", "solution": ["Dim partDoc As PartDocument\npartDoc = ThisApplication.ActiveDocument    \n\nIf partDoc.ComponentDefinition.IsiPartFactory _\nOr partDoc.ComponentDefinition.IsiPartMember Then\nReturn 'do nothing\nElse\nMessageBox.Show(\"This is NOT an iPart\", \"Title\")\nEnd If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Change the LOD in derived part through iLogic\n                    ", "solution": [], "author": "nagwani"},
{"created at": [], "solution Title": "\n                        Re: showing form interupt user interaction\n                    ", "solution": [], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: Drawing View Label Text Size\n                    ", "solution": [], "author": "stuartmp"},
{"created at": [], "solution Title": "\n                        Re: Run external rule in occurrences\n                    ", "solution": ["'Get component by its name\nDim oComp As Componentoccurrence = Component.InventorComponent(\"ROD\")\n\n'reference to document for this component\nDim oDoc as Inventor.Document = ocomp.definition.Document \n\n'external rule filename\nDim ExternalRuleFile As String = \"C:\\TEMP\\MyRules\\1.txt\"\n\n'run external rule\nauto = iLogicVb.Automation\nauto.RunExternalRule(oDoc, ExternalRuleFile)\nBeep", "'Get component by its name\nDim oComp As Componentoccurrence = Component.InventorComponent(\"ROD\")\n\n'reference to document for this component\nDim oDoc as Inventor.Document = ocomp.definition.Document \n\n' External rule filename\nDim ExternalRuleFile As String = \"C:\\TEMP\\MyRules\\1.txt\" \n\n'fill argument's list\nDim map As NameValueMap = ThisApplication.transientobjects.CreateNameValueMap\n\nmap.Add(\"Property\", \"Part Number\")\nmap.Add(\"Parameter\", \"d0\") \n\n'run external tule with parameters\nauto = iLogicVb.Automation\nauto.RunExternalRuleWithArguments(oDoc, ExternalRuleFile, map) \n\nBeep\n\n", "'get this document display name\ndim Name as string = thisdoc.document.FullFilename\n \n'check if the rule got arguments\ndim St1 as string\ndim St2 as string\ndim Arg as string\n\nIf RuleArguments.Exists(\"Property\") Then\n  try\n    Arg = RuleArguments(\"Property\")\n    St1 = iProperties.Value(\"Project\", Arg)\n  Catch\n    St1 = \"Wrong property name\"\n  End try\nend if\n\nIf RuleArguments.Exists(\"Parameter\") Then\n  try\n    Arg = RuleArguments(\"Parameter\")\n    St2 = cstr(Parameter(Arg))\n  Catch\n    St2 = \"Wrong parameter name\"\n  End try\nend if \n\nmsgbox(\"RESULTS  \" & vbnewline & _\n      Name & vbnewline & _\n      St1 & vbnewline & _\n      St2)"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How to make a new Template?\n                    ", "solution": [], "author": "LSA-skan"},
{"created at": [], "solution Title": "\n                        Re: Plug in Build Error\n                    ", "solution": [], "author": "ADNpati"},
{"created at": [], "solution Title": "\n                        Re: Icons for custom VBA button\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Any script to label corners of model in oaoer space ?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Position button on Open dropdown of QAT\n                    ", "solution": ["public void test()", "{", "\u00a0CommandControls ZeroQATControls = \u00a0 ThisApplication.UserInterfaceManager.Ribbons[\"ZeroDoc\"].QuickAccessControls;", "\u00a0object o = ZeroQATControls[1];", "\u00a0o.ChildControls.AddButton(ThisApplication.CommandManager.ControlDefinitions[\"AppFileSaveAsCmd\"]);", "}"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Detecting \"No Effect?\" Sheet Metal cuts and extrusions\n                    ", "solution": ["    Private Sub RemoveStrandedCutFeatures()\n\n        Dim oPartDoc As PartDocument\n        oPartDoc = _invApp.ActiveDocument\n\n        If oPartDoc.DocumentSubType.DocumentSubTypeID <> \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n            Exit Sub\n        End If\n\n        Dim oPartDef As PartComponentDefinition = oPartDoc.ComponentDefinition\n\n        Dim oSheetMetalFeatures As SheetMetalFeatures\n        oSheetMetalFeatures = oPartDef.Features\n\n        Dim oCutFeatures As CutFeatures\n        oCutFeatures = oSheetMetalFeatures.CutFeatures\n\n        For Each Cut As CutFeature In oCutFeatures\n            If Cut.HealthStatus <> HealthStatusEnum.kUpToDateHealth Then\n                Cut.Delete()\n            End If\n        Next\n\n    End Sub"], "author": "gary.belisle"},
{"created at": [], "solution Title": "\n                        Re: Storing and retrieving features from a library\n                    ", "solution": [], "author": "BLHDrafting"},
{"created at": [], "solution Title": "\n                        Re: iLogic Arraylist acting strange\n                    ", "solution": ["For", " ", "Each", " ", "oval", " in sText", "For", " ", "Each", " ", "oval", " in ", "MultiValue", ".", "List", "(", "\"sText", "\"", ")"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Programatically create Virtual Component\n                    ", "solution": ["Dim", " ", "oAsm", " ", "As", " ", "AssemblyDocument", " ", "=", " ", "ThisDoc", ".", "Document", "\n", "Dim", " ", "oMatrix", " ", "As", " ", "Matrix", " ", "=", " ", "ThisApplication", ".", "TransientGeometry", ".", "CreateMatrix", "\n\n", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", "\n", "oOcc", " ", "=", " ", "oAsm", ".", "ComponentDefinition", ".", "Occurrences", ".", "AddVirtual", "(", "\"", "EXAMPLE", "\"", ", ", "oMatrix", ")", "\n\n", "Dim", " ", "oCompDefVirtual", " ", "As", " ", "VirtualComponentDefinition", " ", "=", " ", "oOcc", ".", "Definition", "\n\n", "'", "CREATE AND SET THE IPROP", "Dim", " ", "oPropertySet", " ", "As", " ", "PropertySet", " ", "=", " ", "oCompDefVirtual", ".", "PropertySets", "(", "\"", "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}", "\"", ")", "\n", "oProperty", " ", "=", " ", "oPropertySet", ".", "Add", "(", "\"", "EXAMPLE VALUE", "\"", ", ", "\"", "EXAMPLE_PROPERTY", "\"", ")"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: iLogic, Save Location\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: VBA Check design doctor for errors in drawing\n                    ", "solution": ["Public Sub ErrorManager()\n\n    Dim errorMng As ErrorManager\n    Set errorMng = ThisApplication.ErrorManager\n    \n    Dim errors As String\n    errors = errorMng.AllMessages\n    \nEnd Sub"], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: SDK help says no wizard install neccessary for VC but...\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Creating mate with VB.NET API. Lots of parts like movement chain\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: User Parameter Expression List - Allow custom values\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Shortcut key for component visibility\n                    ", "solution": ["Sub ToggleVisibility()\n    Dim ss As SelectSet\n    Set ss = ThisApplication.ActiveDocument.SelectSet\n    \n    Dim obj As Object\n    For Each obj In ss\n        If TypeOf obj Is ComponentOccurrence Then\n            Dim occ As ComponentOccurrence\n            Set occ = obj\n            \n            occ.Visible = Not occ.Visible\n        End If\n    Next\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Custom property type date with blank date\n                    ", "solution": ["Imports", " ", "System", "\n\n", "Dim", " nullDate ", "As", " ", "Nullable", " \n", "iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "aaa", "\"", ")", " ", "=", " ", "nullDate"], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: VERY slow iLogic functions with multiple Inventor processes\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: SubOccurrences property throw COMException\n                    ", "solution": [], "author": "nagwani"},
{"created at": [], "solution Title": "\n                        Re: VBA Skip warning when saving\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Assmbly Tree\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Replace components in weldment assembly\n                    ", "solution": ["Sub AvoidWeldmentSpecificOccurrences()\n    Dim doc As AssemblyDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    Dim occ As ComponentOccurrence\n    For Each occ In doc.ComponentDefinition.Occurrences\n        If occ.Suppressed Then\n            ' A weldment specific occurence cannot be\n            ' suppressed I think, so this one is not a\n            ' weldment specific occurrence\n            ' Also a suppressed component has no Definition\n            ' because the document is not loaded, so occ.Definition\n            ' would throw an error here\n        Else\n            ' Here we can check the Definition\n            If occ.Definition.Type = kWeldsComponentDefinitionObject Then\n                ' This is a weldment specific occurrence\n                ' so just ignore it\n            End If\n        End If\n    Next\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Turn off sketches on assembly level\n                    ", "solution": ["                ", "Dim", " ", "oDoc", " ", "As", " ", "Document", " ", "=", " ", "ThisDoc", ".", "Document", "                ", "Dim", " ", "oCompDef", " ", "As", " ", "AssemblyComponentDefinition", " ", "=", " ", "oDoc", ".", "ComponentDefinition", "                ", "                ", "Dim", " ", "oLeafOccs", " ", "As", " ", "ComponentOccurrencesEnumerator", " ", "=", " ", "oCompDef", ".", "Occurrences", ".", "AllLeafOccurrences", "                ", "                ", "Dim", " ", "RefPartDef", " ", "As", " ", "PartComponentDefinition", "                ", "Dim", " ", "RefAssyDef", " ", "As", " ", "AssemblyComponentDefinition", "                ", "                ", "Dim", " ", "oOcc", " ", "As", " ", "ComponentOccurrence", "                ", "Dim", " ", "RefPlanes", " ", "As", " ", "WorkPlanes", "                ", "Dim", " ", "RefPlane", " ", "As", " ", "WorkPlane", "                ", "Dim", " ", "ProxyPlane", " ", "As", " ", "WorkPlaneProxy", "    ", "                ", "For", " ", "Each", " ", "oOcc", " ", "In", " ", "oLeafOccs", "                    ", "If", " ", "oOcc", ".", "suppressed", " ", "=", " False ", "Then", "                        ", "If", " ", "oOcc", ".", "DefinitionDocumentType", " ", "=", " ", "kPartDocumentObject", " ", "Then", "                        ", "                            ", "RefPartDef", " ", "=", " ", "oOcc", ".", "Definition", "                            ", "RefPlanes", " ", "=", " ", "RefPartDef", ".", "WorkPlanes", "                    ", "                        ", "For", " ", "Each", " ", "RefPlane", " ", "In", " ", "RefPlanes", "                            ", "oOcc", ".", "CreateGeometryProxy", "(", "RefPlane", ", ", "ProxyPlane", ")", "                            ", "ProxyPlane", ".", "Visible", " ", "=", " False", "                        ", "Next", "                        ", "                        ", "ElseIf", " ", "oOcc", ".", "DefinitionDocumentType", " ", "=", " ", "kAssemblyDocumentObject", " ", "Then", "                            ", "RefAssyDef", " ", "=", " ", "oOcc", ".", "Definition", "                        ", "End", " ", "If", "                    ", "End", " ", "If", "                ", "Next", "InventorVb", ".", "DocumentUpdate", "()", " "], "author": "Arnold82"},
{"created at": [], "solution Title": "\n                        Re: Style and Standard Editor\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Ilogic sheets and pdf\n                    ", "solution": ["Dim oDoc As DrawingDocument\noDoc = ThisApplication.ActiveDocument\n\nDim oSheet As Sheet\nDim sSheetName As String\n \nFor Each oSheet In oDoc.Sheets\nIf oSheet.Name.Contains(\"NOT PRINT\") = True Then\noSheet.ExcludeFromPrinting = True\nMessageBox.Show(oSheet.Name & \" : set to Exclude From Printing\", \"iLogic\")\nElse\n'do nothing\nEnd if\nNext"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Check to see if LOD exists, then create ilogic rules around it\n                    ", "solution": ["Try\n\n'activate the EXTERNALS LOD\nThisDoc.Document.ComponentDefinition.RepresentationsManager.LevelofDetailRepresentations(\"EXTERNALS\").Activate\n\n'update the document\nInventorVb.DocumentUpdate()\n\n'get the mass of the model under the EXTERNALS LOD and store it to the Parameter \"EXTERNALS\"\nParameter(\"EXTERNALS\")= iProperties.Mass\n\nCatch\n\nParameter(\"EXTERNALS\")=0\n\nEnd Try"], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Range between two numbers (iLogic Help)\n                    ", "solution": ["myTest = InputBox(\"Enter a Number\", \"iLogic\", \"25\")\n\nIf (20< myTest ) AndAlso (myTest  <30.000 ) \nMessageBox.Show(\"The Number is in the 20s.\", \"iLogic\")\nElseIf (30< myTest ) AndAlso (myTest  <40.000 ) \nMessageBox.Show(\"The Number is in the 30s.\", \"iLogic\")\nElseIf (40 < myTest ) AndAlso (myTest  <50.000 ) \nMessageBox.Show(\"The Number is in the 40s.\", \"iLogic\")\nElse\nMessageBox.Show(\"The Number is out of range.\", \"iLogic\")\nEnd if", "myTest = InputBox(\"Enter a Number\", \"iLogic\", \"25\")\n\nIf (20.001 <= myTest ) AndAlso (myTest  <30.000 ) \nMessageBox.Show(\"The Number is in the 20s.\", \"iLogic\")\nElseIf (30.001 <= myTest ) AndAlso (myTest  <40.000 ) \nMessageBox.Show(\"The Number is in the 30s.\", \"iLogic\")\nElseIf (40.001 <= myTest ) AndAlso (myTest  <50.000 ) \nMessageBox.Show(\"The Number is in the 40s.\", \"iLogic\")\nElse\nMessageBox.Show(\"The Number is out of range.\", \"iLogic\")\nEnd if"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Part parameters in GeneralNote object\n                    ", "solution": ["txtParameter = \"THICKNESS: <Parameter Resolved='True' ComponentIdentifier='\" & PartFilename & \"' Name='\" & par_Parameter.Name & \"' Precision='1'>10.0</Parameter> mm.\"", "txtNoteText.FormattedText = txtParameter"], "author": "miechh"},
{"created at": [], "solution Title": "\n                        Re: Threads do not show up in STL file\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: Saving ActiveView as jpg file?\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: RangeBox error. Adding plan sizes to the dimension result!\n                    ", "solution": [], "author": "mucip"},
{"created at": [], "solution Title": "\n                        Re: ilogic rule for each part in the assembly to change partt paramenter\n                    ", "solution": ["' set a reference to the assembly component definintion.\n' This assumes an assembly document is open.\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n'Iterate through all of the occurrences\nDim oOccurrence As ComponentOccurrence\nFor Each oOccurrence In oAsmCompDef.Occurrences\n'check for and skip virtual components\n'(in case a virtual component trips things up)\nIf Not TypeOf oOccurrence.Definition Is VirtualComponentDefinition Then\nParameter.Quiet = True\nParameter(oOccurrence.Name, \"FH\") = 15.26\nInventorVb.DocumentUpdate()\nElse\nEnd If\nNext", "'Define the open document", "Dim openDoc As Document", "openDoc = ThisDoc.Document", "'Look at all of the files referenced in the open document", "Dim docFile As Document", "For Each docFile In openDoc.AllReferencedDocuments\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0", "'format\u00a0 file name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0", "Dim FNamePos As Long", "FNamePos = InStrRev(docFile.FullFileName, \"\\\", -1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0", "Dim docFName As String ", "docFName = Right(docFile.FullFileName, Len(docFile.FullFileName) - FNamePos) ", "Parameter.Quiet = True", "Parameter(docFName, \"FH\") = 15.26", "InventorVb.DocumentUpdate()", "Next"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: vba Read revision number from drawing not model\n                    ", "solution": [], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: VB .net : Workpoint at mass center\n                    ", "solution": ["Dim oDoc As Inventor.PartDocument -> instead of Dim oDoc as Document"], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: Saving parameters to xml (iLogic)\n                    ", "solution": [], "author": "psp"},
{"created at": [], "solution Title": "\n                        Re: Find componentoccurence from selected edge or face\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: iLogic Sort Values\n                    ", "solution": ["' Get overall Sizes\nDim x = Measure.ExtentsLength\nDim y = Measure.ExtentsWidth\nDim z = Measure.ExtentsHeight\n\n' DEBUG - Displays sizes\n'MessageBox.Show(\"Material Size = \" & x & \", \" & y & \", \" & z, \"Overall Sizes\")\n\n' Sorts sizes from lowest to highest\nDim Height = MinOfMany (x, y, z)\nDim Length = MaxOfMany (x, y, z)\nDim Width As Double\n\nIf (Height = x And Length = y) Or (Height = y And Length = x)Then\n\tWidth = z\nElse If (Height = x And Length = z) Or (Height = z And Length = x)Then\n\tWidth = y\nElse If (Height = y And Length = z) Or (Height = z And Length = y)Then\n\tWidth = x\nEnd If", "Dim", " ", "ourArray", " ", "As", " ", "New", " ", "ArrayList", " ", "Dim", " ", "i", " ", "As", " ", "Integer", " ", "Dim", " ", "Num1", " ", "As", " ", "Double", " ", "=", " ", "5.015", "Dim", " ", "Num2", " ", "As", " ", "Double", " ", "=", " ", "6.501", "Dim", " ", "Num3", " ", "As", " ", "Double", " ", "=", " ", "1.055", "Dim", " ", "Sum1", " ", "As", " ", "Double", "Dim", " ", "Sum2", " ", "As", " ", "Double", "Dim", " ", "Sum3", " ", "As", " ", "Double", " ", "Dim", " ", "holderList", " ", "As", " ", "String", " ", "ourArray", ".", "Add", "(", "Num1", ")", "ourArray", ".", "Add", "(", "Num2", ")", "ourArray", ".", "Add", "(", "Num3", ")", "ourArray", ".", "Sort", "()", "Sum1", " ", "=", " ", "ourArray", "(", "0", ")", "Sum2", " ", "=", " ", "ourArray", "(", "1", ")", "Sum3", " ", "=", " ", "ourArray", "(", "2", ")", "For", " ", "i", " ", "=", " ", "1", " ", "To", " ", "ourArray", ".", "Count", " ", "Step", " ", "1", "    ", "'''", "///////////////////////////////////////////////////", "    ", "'''", "    ", "'''", " This is cycling through each element of this array", "    ", "'''", " and adding it to a String called 'holderList'. ", "    ", "'''", " This would be a great place to do something like ", "    ", "'''", " populating your fields, or assigning values", "    ", "'''", " to your parameters. ", "    ", "'''", "    ", "'''", "///////////////////////////////////////////////////", "    ", "    ", "holderList", " ", "=", " ", "holderList", " ", "&", " ", "CStr", "(", "ourArray", "(", "i", "-", "1", "))", " ", "&", " ", "\"", ", ", "\"", "    ", "Next", " ", "MessageBox", ".", "Show", "(", "\"", "Array has been sorted down to: ", "\"", " ", "&", " ", "holderList", ",", "\"\"", ")", "MessageBox", ".", "Show", "(", "\"", "Our Sums equal : ", "\"", " ", "&", " ", "Sum1", " ", "&", " ", "\"", " - ", "\"", " ", "&", " ", "Sum2", " ", "&", " ", "\"", " - ", "\"", " ", "&", " ", "Sum3", ")", "Dim ourArray As New ArrayList \n\nourArray.Add(bH)\nourArray.Add(bW)\nourArray.Add(bL)\n\nourArray.Sort()\n\nD1 = ourArray(0)\nD2 = ourArray(1)\nD3 = ourArray(2)", "MessageBox.Show(ourArray.Count)"], "author": "Spidermeld"},
{"created at": [], "solution Title": "\n                        Re: How to detect if user pressed OK/Cancel in iLogic form?\n                    ", "solution": ["'run for modal form \"Form 1\"\nDim R As FormReturnValue  = iLogicForm.Show(\"Form 1\")\n\nDim St As String\nSelect Case R.Result.tostring\n\tCase \"Cancel\"\n\t\tst = \"Cancel\"\n\tCase \"OK\"\n\t\tst = \"OK\"\t\n\tCase \"Close\"\n\t\tst = \"Close\"\t\t\n\tCase Else\n\t\tst=\"???  \" & R.Result.tostring \t\t\nEnd Select\nMsgBox(st )"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: control part rule in assy\n                    ", "solution": [], "author": "jostroopers"},
{"created at": [], "solution Title": "\n                        Re: Ilogic rename parameter dialog box\n                    ", "solution": [], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: change ipart occurence color in assembly\n                    ", "solution": [], "author": "nagwani"},
{"created at": [], "solution Title": "\n                        Re: Is their anything wrong with code?\n                    ", "solution": [], "author": "wowens63"},
{"created at": [], "solution Title": "\n                        Re: Reading content center path with API\n                    ", "solution": ["Dim oDesignProjectManager As DesignProjectManager = InventorApp.DesignProjectManager\nDim sPath = oDesignProjectManager.ActiveDesignProject.ContentCenterPath"], "author": "wowens63"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Parameters tolerances\n                    ", "solution": ["Dim oDoc as Inventor.PartDocument = ThisDoc.Document\nDim oParameters as Inventor.Parameters _\n      = oDoc.ComponentDefinition.Parameters\noParameters.SetAllToMedian()"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Getting user selection within part edit mode in assembly file\n                    ", "solution": [], "author": "nagwani"},
{"created at": [], "solution Title": "\n                        Re: Add user parameters to parts using external rules.\n                    ", "solution": [], "author": "GavoGarmo"},
{"created at": [], "solution Title": "\n                        Re: Export to PDF with many pages\n                    ", "solution": ["Public Sub Main()\n\tPublishPDF()\nEnd Sub", "\n\n\nPublic Sub PublishPDF()\n    ' Get the PDF translator Add-In.\n    Dim PDFAddIn As TranslatorAddIn\n    PDFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{0AC6FD96-2F4D-42CE-8BE0-8AEA580399E4}\")\n\n    'Set a reference to the active document (the document to be published).\n    Dim oDocument As Document\n    oDocument = ThisApplication.ActiveDocument\n\n    Dim oContext As TranslationContext\n    oContext = ThisApplication.TransientObjects.CreateTranslationContext\n    oContext.Type = kFileBrowseIOMechanism\n\n    ' Create a NameValueMap object\n    Dim oOptions As NameValueMap\n    oOptions = ThisApplication.TransientObjects.CreateNameValueMap\n\n    ' Create a DataMedium object\n    Dim oDataMedium As DataMedium\n    oDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\n    ' Check whether the translator has 'SaveCopyAs' options\n    If PDFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\n\n        ' Options for drawings...\n        'oOptions.Value(\"All_Color_AS_Black\") = 0\n        'oOptions.Value(\"Remove_Line_Weights\") = 0\n        'oOptions.Value(\"Vector_Resolution\") = 400\n        oOptions.Value(\"Sheet_Range\") = ", "Inventor.PrintRangeEnum.kPrintAllSheets", "\n        'oOptions.Value(\"Custom_Begin_Sheet\") = 1\n        'oOptions.Value(\"Custom_End_Sheet\") = 2\n    End If\n\n    'Set the destination file name\n    oDataMedium.FileName = \"C:\\Users\\Thomas\\Desktop\\Exports\\\" &ThisDoc.FileName &\".pdf\"\n\n    'Publish document.\n    Call PDFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nEnd Sub"], "author": "benoitbaneat899"},
{"created at": [], "solution Title": "\n                        Re: Is VBA in Inventor 16 bit or 32 bit or...?\n                    ", "solution": [], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Getting part number value from iproperties project tab\n                    ", "solution": ["Sub Sample()\n    Dim oSet As PropertySet\n    Set oSet = ThisApplication.ActiveDocument.PropertySets(3)\n        \n    Dim oProp As Property\n    Set oProp = oSet.Item(\"Part Number\")\n    MsgBox oProp.Value\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Issue with OnSaveDocument Event (BeforeOrAfter = kAbort)\n                    ", "solution": [], "author": "etckerry"},
{"created at": [], "solution Title": "\n                        Re: Inventor API help\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: VBA list open documents\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: iLogic equation answers in radians. I need degrees. (Probably a Noob questio\n                    ", "solution": ["t1 = (SpecialBevelDim1 / SpecialBevelDim2)\ni1 = Atan(t1) * (180 / PI) 'Rad to Deg\n\n\nt1 = (SpecialBevelDim2 / SpecialBevelDim1)\ni2 = Atan(t2) * (180 / PI) 'Rad to Deg"], "author": "wowens63"},
{"created at": [], "solution Title": "\n                        Re: How to check the direction of an extrude feature\n                    ", "solution": ["Sub ExtrusionDir()\n\n  Dim oDoc As PartDocument\n  Set oDoc = ThisApplication.ActiveDocument\n  \n  Dim oDef As PartComponentDefinition\n  Set oDef = oDoc.ComponentDefinition\n  \n  Dim oExtrFeatures As ExtrudeFeatures\n  Set oExtrFeatures = oDef.Features.ExtrudeFeatures\n  \n  Dim oExtrFeature As ExtrudeFeature\n  Set oExtrFeature = oExtrFeatures.Item(1)\n  \n  Dim oExtrDef As ExtrudeDefinition\n  Set oExtrDef = oExtrFeature.Definition\n  \n  Dim oExtent As PartFeatureExtent\n  Set oExtent = oExtrDef.Extent\n  \n  Dim oDir As PartFeatureExtentDirectionEnum\n  oDir = oExtent.Direction\n\n    ' PartFeatureExtentDirectionEnum:\n    'kNegativeExtentDirection  = 20994\n    'kPositiveExtentDirection  = 20993\n    'kSymmetricExtentDirection = 20995\n\nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: How to integrate iLogic error message into VB.NET code?\n                    ", "solution": ["Dim myInt As Integer\nDim myDouble As Double \n\n\nTry \n\tmyDouble = 2147483647 ' or you could use Double.MaxValue .\n\t\n\t''' Since 2147483647 is the max size that a 32bit integer can hold\n\t''' if we add one to it, it should force an overflow error that we \n\t''' will capture in the Catch. \n\t\n\tmyInt = myDouble + 1\n\t\n\tCatch ex As Exception\n\t''' We've declared that 'ex' will exist as our Exception.\n\t'''\n\t''' So if we do run into this Catch (because of some exception) we can \n\t''' easily translate that exception to a readable String by using\n\t''' the following method. \n\tMessageBox.Show(ex.ToString ,\"Error Catch\") \n\t\n\t''' Try setting up this exception catching in your own Try Statement\n\t''' and checking to see if it gives you the information that you're \n\t''' looking for. \nEnd Try "], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Stand alone app, with model view window\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Need help with ilogic File Save rule...\n                    ", "solution": ["sName = iProperties.Value(\"Project\", \"Part Number\") & \"_Test.ipt\"", "sPath = \"C:\\Temp\\\"", "'Save File As ", "'True saves off a copy of this file as the new name", "'False saves this file as the new name", "ThisDoc.Document.SaveAs(sPath & sName , False)"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Wrtie text string to parts list coloum with iLogic\n                    ", "solution": [], "author": "TomTom111"},
{"created at": [], "solution Title": "\n                        Re: Search for parts with no material\n                    ", "solution": ["Public Sub PrintMaterialName()\n\n  Dim oPartDoc As PartDocument\n  Set oPartDoc = ThisApplication.ActiveDocument\n\n  Dim oDef As PartComponentDefinition\n  Set oDef = oPartDoc.ComponentDefinition\n   \n  Dim oMaterial As Material\n  Set oMaterial = oDef.Material\n   \n  Debug.Print oMaterial.Name\n  Debug.Print oMaterial.InternalName\n   \nEnd Sub"], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Problem with Inventor's FileDialog object\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Export custom table to Excel\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: Positioning a Button on the Quick Access Toolbar\n                    ", "solution": ["PartQATControls.AddButton(Mybutton, false, true, \"AppFileOpenCmd\", true);"], "author": "krieg"},
{"created at": [], "solution Title": "\n                        Re: How to Execute Code?\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Interactive Selection\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Copying CC parts to Custom CC Folder\n                    ", "solution": [], "author": "cbenner"},
{"created at": [], "solution Title": "\n                        Re: ilogic function to change decimal marker from full stops to commas\n                    ", "solution": ["Dim", " ", "oDrawDoc", " ", "As", " ", "DrawingDocument", "\n", "oDrawDoc", " ", "=", "ThisApplication", ".", "ActiveDocument", "\n\n", "Dim", " ", "oSheet", " ", "As", " ", "Sheet", "\n", "oSheet", " ", "=", " ", "oDrawDoc", ".", "ActiveSheet", "\n\n", "Dim", " ", "oGeneralDim", " ", "As", " ", "GeneralDimension", "\n", "oGeneralDim", " ", "=", " ", "oSheet", ".", "DrawingDimensions", ".", "GeneralDimensions", ".", "Item", "(", "1", ")", "\n    \n", "Dim", " ", "oDimStyle", " ", "As", " ", "DimensionStyle", "\n", "oDimStyle", " ", "=", " ", "oGeneralDim", ".", "Style", "\n\n", "'", "oDimStyle.DecimalMarkerType = DecimalMarkerTypeEnum.kPeriodDecimalMarker", "oDimStyle", ".", "DecimalMarkerType", " ", "=", " ", "DecimalMarkerTypeEnum", ".", "kCommaDecimalMarker"], "author": "VdVeek"},
{"created at": [], "solution Title": "\n                        Re: Global Forms button to immediately launch an External Rule?\n                    ", "solution": [], "author": "david_reaume"},
{"created at": [], "solution Title": "\n                        Re: Create WorkPlane by Point and Line\n                    ", "solution": ["Sub AddWorkplane()\n    Dim doc As PartDocument\n    Set doc = ThisApplication.ActiveDocument\n    \n    ' Select an edge and run this code\n    Dim e As Edge\n    Set e = doc.SelectSet(1)\n    \n    Dim wp As WorkPlane\n    \n    ' This succeeds\n    Set wp = doc.ComponentDefinition.WorkPlanes.AddByNormalToCurve(e, e.StartVertex)\n    \n    ' This does not work :(\n    Set wp = doc.ComponentDefinition.WorkPlanes.AddByNormalToCurve(e, Nothing)\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: ReadOnly I-Properties possible?\n                    ", "solution": ["Dim oDoc As Document\nSet oDoc = ThisApplication.ActiveDocument\n    \nDim oSet As PropertySet\nSet oSet = oDoc.PropertySets.Add(\"_Hidden\")"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Inventor VBA - sync 'Prompted Entries' from Sheet:1 across all sheets.\n                    ", "solution": [], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: cannot uninstall an add-in\n                    ", "solution": [], "author": "Mark_Wigan"},
{"created at": [], "solution Title": "\n                        Re: Get parameter into title block (CF)\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Sort User parameters by code\n                    ", "solution": ["// Get application instance\nvar app = CL.Framework.AutodeskInventor.Application.GetInstance(startIfClosed: false);\n((dynamic)app.Preferences)(1).DeferUpdate = true;\n\n// Deactivate iLogic\nInventor.ApplicationAddIn iLogic = app.ApplicationAddIns.ItemByName(\"iLogic\");\niLogic.Deactivate();\n\n// Validate if active document is part document\nif (app.ActiveDocument is PartDocument)\n{\n    PartDocument doc = (PartDocument)app.ActiveDocument;\n\n    // Get part user parameters\n    Inventor.UserParameters userParams = doc.ComponentDefinition.Parameters.UserParameters;\n\n    string tempParamName = \"TemporaryParameterName\";\n    string oldParamName = string.Empty;\n\n    // For each user parameter in ordered list\n    ListOfKeyParams.OrderBy(p => p.Order).ForEach<UserParameterWrapper>(p =>\n    {\n        Inventor.UserParameter oldParam = p.UserParameter;\n\n        // Get param name\n        oldParamName = oldParam.Name;\n\n        // Add new parameter\n        string uom = oldParam.get_Units();\n        Inventor.UserParameter newParam = null;\n        if (oldParam.Expression != null && oldParam.ExpressionList == null)\n            newParam = userParams.AddByExpression(tempParamName, oldParam.Expression, uom);\n        else\n            newParam = userParams.AddByValue(tempParamName, oldParam.Value, uom);\n\n        // Copy properties from old parameters to new one\n        newParam.Comment = oldParam.Comment;\n        newParam.DisabledActionTypes = oldParam.DisabledActionTypes;\n        newParam.DisplayFormat = oldParam.DisplayFormat;\n        newParam.ExposedAsProperty = oldParam.ExposedAsProperty;\n        newParam.ExpressionList.SetExpressionList(oldParam.ExpressionList.GetExpressionList());\n        newParam.IsKey = oldParam.IsKey;\n        newParam.ModelValueType = oldParam.ModelValueType;\n        newParam.Precision = oldParam.Precision;\n        newParam.Value = oldParam.Value;\n\n        // Redirect dependencies on new parameter\n        oldParam.Dependents.ForEach<Parameter>(i =>\n        {\n            i.Expression = i.Expression.Replace(oldParam.Name, tempParamName);\n        });\n\n        // Delete parameter\n        oldParam.Delete();\n\n        // Rename new parameter\n        newParam.Name = oldParamName;\n\n        // Activate iLogic\n        iLogic.Activate();\n\n        ((dynamic)app.Preferences)(1).DeferUpdate = false;\n    });\n}"], "author": "planglais"},
{"created at": [], "solution Title": "\n                        Re: Possible to Check All Members of Factory for Errors using iLogic / VB?\n                    ", "solution": ["' Suppose the iPart table has 3 rows, and the 3rd row has invalid data\nSub RetrieveErrorInfoOfiPartTableRow()\n    Dim oErrorManager As ErrorManager\n    Set oErrorManager = ThisApplication.ErrorManager\n   \n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n \n    Dim oiPart As iPartFactory\n    Set oiPart = oDoc.ComponentDefinition.iPartFactory\n   \n    Dim oTop As BrowserNode\n    Set oTop = oDoc.BrowserPanes(\"Model\").TopNode\n   \n    Dim bHasErrorOrWarning As Boolean\n    ThisApplication.SilentOperation = True\n   \n    ' Highlight the 3rd iPart table row which has invalid data\n    oTop.BrowserNodes(\"Table\").BrowserNodes.Item(3).DoSelect\n   \n    ' Activate the iPart table row\n    Dim oCommand As ControlDefinition\n    Set oCommand = ThisApplication.CommandManager.ControlDefinitions(\"PartComputeiPartRowCtxCmd\")\n    oCommand.Execute\n   \n    ThisApplication.SilentOperation = False\n   \n    If oErrorManager.HasErrors Or oErrorManager.HasWarnings Then\n        MsgBox oErrorManager.LastMessage, vbOKCancel\n    End If\nEnd Sub"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: How to include plane in a drawing View\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: iLogic - model or reference parameter\n                    ", "solution": ["'get the sketch to work with\noSketch = ThisDoc.Document.ComponentDefinition.Sketches.Item(\"Sketch1\")\n\n'toggle from/to driven/driving\nDim i As Long\nFor i = 1 To oSketch.DimensionConstraints.Count \n\tIf oSketch.DimensionConstraints.Item(i).Parameter.Name = \"d0\" Then\n\t\tIf oSketch.DimensionConstraints.Item(i).Driven = True Then\n\t\toSketch.DimensionConstraints.Item(i).Driven = False\n\t\tElse\n\t\toSketch.DimensionConstraints.Item(i).Driven = True\n\t\tEnd If\n\tEnd If\nNext"], "author": "fsanchou"},
{"created at": [], "solution Title": "\n                        Re: My First Plugin - Lesson 3 C# issue\n                    ", "solution": ["private void Form1_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            if (_started)\n                _invApp.Quit();\n            _invApp = (Inventor.Application)null;\n        }"], "author": "scottmoyse"},
{"created at": [], "solution Title": "\n                        Re: iLogic Sketch Curve Counter\n                    ", "solution": ["Dim oDoc As Document\noDoc = ThisApplication.ActiveDocument\nDim oSketch As Sketch\noSketch = oDoc.ComponentDefinition.Sketches.Item(1)\nDim SketchCount As Double\n\nDim i As Double\n    For i = 1 To oSketch.SketchLines.Count\n        If oSketch.SketchLines.Item(i).Construction = \"False\" Then\n            SketchCount = SketchCount + 1\n        End If\n    Next\n\nDim x As Double\n    For x = 1 To oSketch.SketchCircles.Count\n        If oSketch.SketchCircles.Item(x).Construction = \"False\" Then\n            SketchCount = SketchCount + 1\n        End If\n    Next\n\nDim y As Double\n    For y = 1 To oSketch.SketchArcs.Count\n        If oSketch.SketchArcs.Item(y).Construction = \"False\" Then\n            SketchCount = SketchCount + 1\n        End If\n    Next\n\nMessageBox.Show(sketchcount, \"Number of Sketch Curves\")"], "author": "laptop_geek"},
{"created at": [], "solution Title": "\n                        Re: Print drawing from file\n                    ", "solution": [], "author": "CAD-e-Shack"},
{"created at": [], "solution Title": "\n                        Re: Calling VBA from iLogic speed\n                    ", "solution": [], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Import / Export with VBA to Excel spreadsheet\n                    ", "solution": ["Navn = iProperties.Value(\"Summary\", \"Title\")& \" \" & iProperties.Value(\"Custom\", \"Raavare\")& \" \" & iProperties.Value(\"Project\", \"Description\")\nGoExcel.Open(\"I:\\TEGNINGSNUMRE SKEMAER\\Standard nummer udtagning-test.xlsx\", \"80000\")\n\nRowN = 2\n\nDo\n'DoEvents\nRowN = RowN + 1\nTomcelle = GoExcel.CellValue(\"C\" & RowN)\nLoop Until Tomcelle = \"\"\n\nGoExcel.CellValue(\"C\" & RowN) = Navn\n\nGoExcel.Save"], "author": "LSA-skan"},
{"created at": [], "solution Title": "\n                        Re: iLogic Drawing Views Scale\n                    ", "solution": ["Dim oDrawDoc As DrawingDocument = ThisDrawing.Document\nDim oSheet As Sheet\nDim oSheets As Sheets\nDim oView As DrawingView\nDim oViews As DrawingViews\nDim oScale As Double\n\noScale = InputBox(\"Enter Desired Scale\", \"Scaler\", \"1\")\n\noSheets = oDrawDoc.Sheets\nFor Each oSheet In oSheets\n   oViews = oSheet.DrawingViews\n   For Each oView In oViews\t\n       If oView.ScaleFromBase = False Then\n           oView.Scale = oScale\n       End If\n   Next\nNext"], "author": "mrattray"},
{"created at": [], "solution Title": "\n                        Re: Constarining Axis in C#?\n                    ", "solution": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Inventor;\nusing System.Runtime.InteropServices;\nnamespace InventorConsole\n{\n    class Program\n    {\n        \n        static void Main(string[] args)\n        {\n            // Get Inventor application \n            Inventor.Application _app = null;\n            _app = Marshal.GetActiveObject(\"Inventor.Application\") as Inventor.Application   ;\n\n            // Get active assembly document\n            Inventor.AssemblyDocument aDoc = null;\n            aDoc= _app.ActiveDocument as AssemblyDocument;\n\n            // Get Assembly Component Definition\n            Inventor.AssemblyComponentDefinition aCompDef = null;\n            aCompDef = aDoc.ComponentDefinition as AssemblyComponentDefinition;\n\n            // Get the occurrence to assemble\n            Inventor.ComponentOccurrence aOcc1 = null;\n            aOcc1 = aCompDef.Occurrences[1];\n\n            // Get the occurrence to assemble\n            Inventor.ComponentOccurrence aOcc2 = null;\n            aOcc2 = aCompDef.Occurrences[2];\n\n            // Get the Defition from occurrence\n            Inventor.PartComponentDefinition pPartDef1 = null;\n            pPartDef1 = aOcc1.Definition as PartComponentDefinition;\n\n            // Get the Defition from occurrence\n            Inventor.PartComponentDefinition pPartDef2 = null;\n            pPartDef2 = aOcc2.Definition as PartComponentDefinition;\n\n            // Get the z workaxis of both parts\n            Inventor.WorkAxis pPartAxis1 = pPartDef1.WorkAxes[3];\n            Inventor.WorkAxis pPartAxis2 = pPartDef2.WorkAxes[3];\n\n            // Convert to Axes to assembly geometry proxy\n            object axisProxy1 = null;\n            Inventor.WorkAxisProxy pWorkAxisProxy1=null;\n            aOcc1.CreateGeometryProxy(pPartAxis1, out axisProxy1);\n            pWorkAxisProxy1 = axisProxy1 as WorkAxisProxy;\n\n            // Convert to Axes to assembly geometry proxy\n            object axisProxy2 = null;\n            Inventor.WorkAxisProxy pWorkAxisProxy2 = null;\n            aOcc2.CreateGeometryProxy(pPartAxis2, out axisProxy2 );\n            pWorkAxisProxy2 = axisProxy2 as WorkAxisProxy;\n   \n            // Assemble parts\n            aCompDef.Constraints.AddMateConstraint(pWorkAxisProxy1, pWorkAxisProxy2, 0.0);\n            aDoc.Update();  \n        }\n    }\n}\n"], "author": "nagwani"},
{"created at": [], "solution Title": "\n                        Re: auto extract of a reference length\n                    ", "solution": [], "author": "akosi"},
{"created at": [], "solution Title": "\n                        Re: Get File path of selected item\n                    ", "solution": [], "author": "nagwani"},
{"created at": [], "solution Title": "\n                        Re: Unit Display in Title Block\n                    ", "solution": [], "author": "SeanFarr"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to switch units in drawing between imperial to metric\n                    ", "solution": ["' To use this rule, create a Text parameter named Standard in the drawing.\n'  Assign it values such as:\n' ANSI\n' ANSI-mm\n\ndoc = ThisDoc.Document\ncustomPropertySet = doc.PropertySets.Item(\"Inventor User Defined Properties\")\n \n'Make sure drawingUNITS property exists\nTry\n      prop = customPropertySet.Item(\"drawingUNITS\")\nCatch\n      'Assume error means not found\n      customPropertySet.Add(\"\", \"drawingUNITS\")\nEnd Try\n\nDim drawingDoc as DrawingDocument = ThisDoc.Document\n\nFor Each standardX In drawingDoc.StylesManager.StandardStyles\n Dim internalName As String = standardX.InternalName\n Do\n   Trace.WriteLine(\" -- internalName = \" & internalName)\n   Dim ch As Char = internalName(internalName.Length-1) \n   If (ch <> vbCr And ch <> vbLf And ch <> \")\" And ch <> \" \") Then Exit Do\n   internalName = internalName.SubString(0, internalName.Length-1)\n Loop\n Trace.WriteLine(String.Format(\" Style: {0}, {1}\", standardX.Name, internalName))\n  \n If (internalName.EndsWith(Standard, StringComparison.OrdinalIgnoreCase)) Then\n   drawingDoc.StylesManager.ActiveStandardStyle = standardX\n   Trace.WriteLine(\" --- Changed the active drawing standard to \" & standardX.Name & \"...\")\n   Exit For\n End If \nNext\niProperties.Value(\"Custom\", \"drawingUNITS\") = Standard \n\nInventorVb.DocumentUpdate()\n\n\nExit Sub\nhandleErrors:\n'do nothing "], "author": "SeanFarr"},
{"created at": [], "solution Title": "\n                        Re: Delete User Parameter\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How do you open a .htm file within an Inventor VBA prog from a button.\n                    ", "solution": [], "author": "pball"},
{"created at": [], "solution Title": "\n                        Re: DrawingView.MoveTo Method\n                    ", "solution": ["Public Sub MoveViews()\n    Dim oApp As Application\n    Set oApp = ThisApplication\n    Dim oDoc As DrawingDocument\n    Set oDoc = oApp.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n    \n    ' Check to make sure a view was selected.\n    If Not TypeOf oDoc.SelectSet.Item(1) Is DrawingView Then\n        MsgBox \"A drawing view must be selected.\"\n        Exit Sub\n    End If\n    \n    Dim oDrawingView As DrawingView\n    Set oDrawingView = oDoc.SelectSet.Item(1)\n    \n    ' Test to see if we have the view\n    oDrawingView.ShowLabel = True\n    \n    ' Move view to target sheet\n    oDrawingView.MoveTo ", "oDoc.Sheets(\"Sheet:2\")", "\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: OnFileInsertNewDialog Event\n                    ", "solution": [], "author": "cadull_rb"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to change Title Blocks\n                    ", "solution": ["ActiveSheet.SetTitleBlock(\"Other Title Block\", \"promptedEntry1\", \"promptedEntry2\")"], "author": "mikejones"},
{"created at": [], "solution Title": "\n                        Re: Why GetOccurrences and get_Occurrences?\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Area of part from Drawing view\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Change Hole Type with iLogic\n                    ", "solution": ["'Tapped - Not Tapped toggle\n\noInput = InputRadioBox(\"Select one:\", \"Hole1 is tapped.\", \"Hole1 is NOT tapped\", True, \u201ciLogic\")\n\noDoc = ThisDoc.Document\nDim oHoleFeature As HoleFeature\noHoleFeature = oDoc.ComponentDefinition.Features.Item(\"Hole1\")\n\nDim oTapInfo As HoleTapInfo\noTapInfo = oHoleFeature.TapInfo\n\n\u2018define tap info\noRightHand = True\noThreadStandard = \"ANSI Metric M Profile\"       \noThreadDes = \"M90x6\"\noClass = \"6H\"\noFullThread = False\noThreadDepth = \"6 cm\"\n\nIf oInput = True Then\n\u2018Set hole As tapped\nDim oTappedInfo As HoleTapInfo\noTappedInfo = oDoc.ComponentDefinition.Features.HoleFeatures.CreateTapInfo _\n(oRightHand, oThreadStandard, oThreadDes, oClass, oFullThread, oThreadDepth)\noHoleFeature.TapInfo = oTappedInfo\nElse\n\u2018Set hole As Not tapped\noHoleFeature.Tapped = False\nEnd If", "'Through - Blind Toggle\n\n'Get the hole feature\noHole1 = ThisDoc.Document.ComponentDefinition.Features.HoleFeatures.Item(\u201cHole1\u201d)\n\n'Set drill depth and thread depth\nsDrillDepth = \"4 in\"\nsThreadDepth = \"2.5 in\"\n\n'I created a user parameter called 'HoleType' whose value\n'\tcould be either \"THRU\" or \"BLIND\". Your usage will vary.\n\nHoleType = InputBox(\"Type: THRU or BLIND\", \"iLogic\",  \"THRU\")\nMessageBox.Show(UCase(HoleType), \"iLogic\")\n\n\nSelect Case UCase(HoleType)\nCase \"THRU\"\noHole1.SetThroughAllExtent(kPositiveExtentDirection)\noHole1.TapInfo.FullTapDepth = True\n\nCase \"BLIND\"\noHole1.TapInfo.FullTapDepth = False\noHole1.TapInfo.ThreadDepth.Expression = sThreadDepth\noHole1.SetDistanceExtent(sDrillDepth, kPositiveExtentDirection, True)\n\nEnd Select"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Why is Counting Holes so Slow?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: how to use API to check whether component is invisible (hiden) in drawing vi\n                    ", "solution": [], "author": "liminma8458"},
{"created at": [], "solution Title": "\n                        Re: C++ samples of CAssemblyConstraints\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: ilogic to find the next free cell in excel\n                    ", "solution": ["Worksheet = (\"C:\\Workspace\\00Vault\\ACE-02001- ACE-02500\\ACE-02380\\ACE-02380-080017\")\nSheetno = (\"Sheet1\")\n' Open excel \nGoExcel.Open(Worksheet, Sheetno)\n' Define Range\nRowStart = 2\nRowEnd = 100\nFor count = RowStart To RowEnd\n\t' If it's blank count it\n\tIf String.IsNullOrEmpty(GoExcel.CellValue(\"A\" & count)) Then \n\t\ti = i + 1\n\tEnd If\nNext\n' Next empty row is max rows minus blank rows plus one\nrow = RowEnd - i + 1\nMsgBox(\"Inserting Data on Row \" & row)\nGoExcel.CellValue(\"A\" & row) = iProperties.Value(\"Project\", \"Part Number\")\nGoExcel.CellValue(\"B\" & row) = iProperties.Value(\"Project\", \"Revision Number\")\nGoExcel.CellValue(\"D\" & row) = iProperties.Value(\"Status\", \"Eng. Approved Date\")\nGoExcel.CellValue(\"F\" & row) = iProperties.Value(\"Project\", \"Description\")\nGoExcel.Save"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Sample Code does not work\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: How to get details of a constraint from a list of Assembly constraints? C++\n                    ", "solution": ["  HRESULT hRes;\n\n  CComQIPtr<AssemblyDocument> pDoc = pInvApp->ActiveDocument; \n  CComPtr<AssemblyConstraints> pConstraintList = pDoc->ComponentDefinition->Constraints; \n\n  const int ikNumConstraints = pConstraintList->Count ;\n  for (int j = 1 ; j <= ikNumConstraints ; j++) {\n      CComPtr pConstraint;\n      hRes = pConstraintList->get_Item(CComVariant(j),&pConstraint) ;\n      if (FAILED(hRes)) {\n          _tprintf_s (_T(\"Could not get the constraint %d of the assembly, hr=%X\\n\"),j,hRes);\n          return NOERROR;\n      }\n\n      _tprintf_s (_T(\"Got constraint %d\\n\"), j);\n      \n      _tprintf_s (_T(\"Name = %s\\n\"), (LPCTSTR)pConstraint->Name);  \n\n      CComQIPtr<MateConstraint> pMate = pConstraint;\n      if (pMate != NULL)\n      {\n        // print info\n      }\n\n      CComQIPtr<AngleConstraint> pAngle = pConstraint;\n      if (pAngle != NULL)\n      {\n        // print info\n         _tprintf_s (_T(\"Angle = %s\\n\"), (LPCTSTR)pAngle->Angle->Expression);  \n      }\n  }"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: List of the meanings of the values of HRESULT?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Works for Ilogic but not VBA?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule to ask YES or No for .DXF export when saving .IDW\n                    ", "solution": ["'query user\n\nquestion = MessageBox.Show(\"is a .DXF Export Required\", \"iLogic Question\",MessageBoxButtons.YesNo,MessageBoxIcon.Question)\n\n          'set condition based on answer\n            If question = vbYes Then\n\t\t\t\n' Get the DXF translator Add-In.\npath_and_nameDXF = ThisDoc.PathAndFileName(False)\nDim DXFAddIn As TranslatorAddIn\nDXFAddIn = ThisApplication.ApplicationAddIns.ItemById(\"{C24E3AC4-122E-11D5-8E91-0010B541CD80}\")\n'Set a reference to the active document (the document to be published).\nDim oDocument As Document\noDocument = ThisApplication.ActiveDocument\n\nDim oContext As TranslationContext\noContext = ThisApplication.TransientObjects.CreateTranslationContext\noContext.Type = IOMechanismEnum.kFileBrowseIOMechanism\n' Create a NameValueMap object\nDim oOptions As NameValueMap\noOptions = ThisApplication.TransientObjects.CreateNameValueMap\n' Create a DataMedium object\nDim oDataMedium As DataMedium\noDataMedium = ThisApplication.TransientObjects.CreateDataMedium\n\nIf DXFAddIn.HasSaveCopyAsOptions(oDocument, oContext, oOptions) Then\nDim strIniFile As String\nstrIniFile = \"C:\\Users\\Farr\\Documents\\Inventor\\DXF_EXPORT_INI\\DXF_EXPORT.ini\"\noOptions.Value(\"Export_Acad_IniFile\") = strIniFile\nEnd If\n\noDataMedium.FileName = path_and_nameDXF & \".dxf\"\n\nCall DXFAddIn.SaveCopyAs(oDocument, oContext, oOptions, oDataMedium)\nEnd If "], "author": "SeanFarr"},
{"created at": [], "solution Title": "\n                        Re: Trim Strings\n                    ", "solution": ["Mid", "(", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ",", "\"", "Part Number", "\"", ")", ",", "1", ",", "Len", "(", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ",", "\"", "Part Number", "\"", "))", "-", "6", ")"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Auto balloon macro for custom sketched symbols\n                    ", "solution": ["    ' Set a reference to the drawing document.\n    ' This assumes a drawing document is active.\n    Dim oDrawDoc As DrawingDocument\n    Set oDrawDoc = ThisApplication.ActiveDocument\n\n    ' Set a reference to the active sheet.\n    Dim oActiveSheet As Sheet\n    Set oActiveSheet = oDrawDoc.ActiveSheet\n    \n    ' Check if a drawing view is selected\n    If oDrawDoc.SelectSet.Count = 0 Then\n        Call MsgBox(\"Please select a drawing view.\", vbInformation)\n        Exit Sub\n    ElseIf Not oDrawDoc.SelectSet.item(1).Type = kDrawingViewObject Then\n        Call MsgBox(\"Current selection is not a drawing view.\", vbInformation)\n        Exit Sub\n    End If\n\n    ' Set a reference to the selected view\n    Dim oView As DrawingView\n    Set oView = oDrawDoc.SelectSet.item(1)\n    \n    Dim oDrawingCurve As DrawingCurve\n    \n    For Each oDrawingCurve In oView.DrawingCurves\n        \n        If oDrawingCurve.ModelGeometry.ContainingOccurrence.Name Like \"TEST-NZ*\" Then\n            \n            Dim oStartPoint As Point2d\n            Set oStartPoint = oDrawingCurve.StartPoint\n            \n            If Not oStartPoint Is Nothing Then\n            \n                Dim oTG As TransientGeometry\n                Set oTG = ThisApplication.TransientGeometry\n                \n                Dim oLeaderPoints As ObjectCollection\n                Set oLeaderPoints = ThisApplication.TransientObjects.CreateObjectCollection\n                Call oLeaderPoints.Add(oTG.CreatePoint2d(oStartPoint.X + 2, oStartPoint.Y + 2))\n                \n                Dim oGeometryIntent As GeometryIntent\n                Set oGeometryIntent = oActiveSheet.CreateGeometryIntent(oDrawingCurve)\n                Call oLeaderPoints.Add(oGeometryIntent)\n                \n                Call oActiveSheet.SketchedSymbols.AddWithLeader(\"Nozzle Tag\", oLeaderPoints, , , , , True)\n                \n            End If\n        End If\n    \n    Next oDrawingCurve"], "author": "djreesing"},
{"created at": [], "solution Title": "\n                        Re: Make BOM list with unit QTY\n                    ", "solution": [], "author": "n00kie.tdc"},
{"created at": [], "solution Title": "\n                        Re: Copy Design\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule in Content Center Error\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic code not working for presentation files in a drawing\n                    ", "solution": ["If (ThisDrawing.ModelDocument Is Nothing) Then Return\n\n\tDim presDoc As Document \n\tpresDoc = ThisDrawing.ModelDocument\n\t\n\tPart_nr_sheet1 = presDoc.PropertySets.Item(\"Design Tracking Properties\").Item(\"Part Number\").Value\n\toCustomPropertySet = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\")\n\t\n\tTry\n\t\toProp = oCustomPropertySet.Item(\"Part Number From Page 1\")\n\t\tCatch\n\t\toCustomPropertySet.Add(\"\", \"Part Number From Page 1\")\n\tEnd Try\n\t\niProperties.Value(\"Custom\", \"Part Number From Page 1\") = Part_nr_sheet1"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Event OnRadialMarkingMenu\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Newbie question: Occurrences and \"instances\"\n                    ", "solution": ["Dim asmDoc As AssemblyDocument\nSet asmDoc = ThisApplication.ActiveDocument\n\nDim aCompDef As AssemblyComponentDefinition\nSet aCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\nDim positionMatrix As Matrix\nSet positionMatrix = ThisApplication.TransientGeometry.CreateMatrix\n\nDim sFileName As String\nsFileName = \"C:/Users/ivan/Documents/Visual Studio 2008/Projects/FD-SpurGearIn.ipt\"\"\n\nDim oGear1 As ComponentOccurrence\nSet oGear1 = aCompDef.Occurrences.Add(sFileName, positionMatrix)\n\noGear1.Grounded = False\n\nDim gearCompDef As ComponentDefinition\nSet gearCompDef = oGear1.Definition\n\nDim ourMParameters As modelParameters\nSet ourMParameters = gearCompDef.Parameters.modelParameters\n\nourMParameters.Item(\"d0\").Expression = \"da_da\"\nourMParameters.Item(\"da_da\").Value = 10 * 2.54\nourMParameters.Item(\"da_dw\").Value = 8 * 2.54\nourMParameters.Item(\"da_df\").Value = 8 * 2.54\n\nasmDoc.Update", "AssemblyDocument asmDoc = (AssemblyDocument)_invApp.ActiveDocument;\n\nAssemblyComponentDefinition aCompDef = (AssemblyComponentDefinition)asmDoc.ComponentDefinition;\n\nInventor.Matrix positionMatrix = _invApp.TransientGeometry.CreateMatrix();\n\nString sFileName = \"C:/Users/ivan/Documents/Visual Studio 2008/Projects/FD-SpurGearIn.ipt\";\n\nComponentOccurrence oGear1 = aCompDef.Occurrences.Add(sFileName, positionMatrix);\n\noGear1.Grounded = false;\n// I should probably learn C\n\nComponentDefinition gearCompDef = (PartComponentDefinition)oGear1.Definition;\n\nModelParameters ourMParameters = gearCompDef.Parameters.ModelParameters;\n\nourMParameters.Item(\"d0\").Expression = \"da_da\";\nourMParameters.Item(\"da_da\").Value = 10 * 2.54;\nourMParameters.Item(\"da_dw\").Value = 8 * 2.54;\nourMParameters.Item(\"da_df\").Value = 8 * 2.54\nasmDoc.Update;"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: ilogic to change drawing document settings\n                    ", "solution": ["'get the current sectioning setting\nDim sCurrentSetting As String\nIf ThisDoc.Document.ModelingSettings.AllowSectioningThruPart = True Then\nsCurrentSetting = \"Participate\"\nElse \nsCurrentSetting = \"Do NOT participate\"\nEnd If\n\n'get input from user\nbSectionQuestion = MessageBox.Show(\"Allow Section Participation?\" & vblf & _\nvblf & \"Currentlly set to: \" & sCurrentSetting, _\n\"iLogic\",MessageBoxButtons.YesNo)\n\n'set sectioning setting based on user input\nIf bSectionQuestion = vbYes Then\nThisDoc.Document.ModelingSettings.AllowSectioningThruPart = True\nElseif bSectionQuestion = vbNo Then\nThisDoc.Document.ModelingSettings.AllowSectioningThruPart = False\nEnd If"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Export to PDF on save i-Logic issues\n                    ", "solution": ["If System.IO.File.Exists(\"C:\\myfile.txt\") Then\n  MsgBox(\"Exists\")\nElse\n  MsgBox(\"Does not exist\")\nEnd If"], "author": "adam.nagy"},
{"created at": [], "solution Title": "\n                        Re: Alpha sort browser nodes\n                    ", "solution": ["\u2018AssemblyBonusTools_AlphaSortComponentsCmd:Alpha Sort Components\nThisApplication.CommandManager.ControlDefinitions.Item(\"AssemblyBonusTools_AlphaSortComponentsCmd\").Execute"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: VBA - Read projection from style\n                    ", "solution": [], "author": "Robert..F"},
{"created at": [], "solution Title": "\n                        Re: Problem catching export event\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Macro and ilogic form not cooperating\n                    ", "solution": [], "author": "hc1245"},
{"created at": [], "solution Title": "\n                        Re: X is not valid?\n                    ", "solution": ["If Plate_Size = \"3\"\" X 2\"\"\" Then\n\tParameter(\"Dim_X\") = 3\n\tParameter(\"Dim_Y\") = 2\n\tParameter(\"Foot_Code\") = \"A\"\n\nElseIf Plate_Size = \"4\"\" X 2\"\"\" Then\n\tParameter(\"Dim_X\") = 4\n\tParameter(\"Dim_Y\") = 2\n\tParameter(\"Foot_Code\") = \"B\"\n\nEnd If", "If Plate_Size = \"3\" & Chr(34) & \" X 2\" & Chr(34) Then\n\tParameter(\"Dim_X\") = 3\n\tParameter(\"Dim_Y\") = 2\n\tParameter(\"Foot_Code\") = \"A\"\nElseIf Plate_Size = \"4\" & Chr(34) & \" X 2\" & Chr(34) Then\n\tParameter(\"Dim_X\") = 4\n\tParameter(\"Dim_Y\") = 2\n\tParameter(\"Foot_Code\") = \"B\"\nEnd If"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: select within region\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Define filename on subpart with rule\n                    ", "solution": ["Parameter.Quiet = True\nDim oAsmCompDef As AssemblyComponentDefinition\noAsmCompDef = ThisApplication.ActiveDocument.ComponentDefinition\n\n'Iterate through all of the occurrences\nDim oOcc As ComponentOccurrence\n\n\tFor Each oOcc In oAsmCompDef.Occurrences\n\t\tDim oName As String\n\t\toName = oOcc.Name\n \t\t\n\t\t'If RDiameter exists in occurrences\n\t\tTry\n\t\t\tParameter (oName, \"RDiameter\") = 10 'Part1\n\t\tCatch\n\t\tEnd Try\n\t\t\n\t\t'If ADiameter exists in occurrences\n\t\tTry\n\t\t\tParameter (oName, \"ADiameter\") = 15 'Part2\n\t\tCatch\n\t\tEnd Try\n\tNext\n\t\n'Update to change the parts\nRuleParametersOutput()\nInventorVb.DocumentUpdate()"], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: VS 2010 and Inventor 2013\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Run addin from vba macro\n                    ", "solution": [], "author": "emrs"},
{"created at": [], "solution Title": "\n                        Re: [VBA] Inv2012 + Surface / Extend\n                    ", "solution": [], "author": "philippe.leefsm"},
{"created at": [], "solution Title": "\n                        Re: Changing model paramter tolerances\n                    ", "solution": ["Public Sub ParameterToleranceTest()\n    Dim app As Inventor.Application\n    Set app = ThisApplication\n    Dim doc As PartDocument\n    Set doc = app.ActiveDocument\n    Dim parameter As parameter\n    Set parameter = doc.ComponentDefinition.Parameters.Item(1)\n    Debug.Print parameter.Name\n    Call parameter.Tolerance.SetToLimits(kLimitLinearTolerance, 1, -1)\n   \nEnd Sub"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: Turn off Translucent using VBA\n                    ", "solution": ["Public Sub TranslucentTest()\n    Dim app As Inventor.Application\n    Set app = ThisApplication\n    Dim partDoc As PartDocument\n    Set partDoc = app.ActiveDocument\n    Dim oWorkSurface As WorkSurface\n    Set oWorkSurface = partDoc.ComponentDefinition.WorkSurfaces.Item(1)\n    oWorkSurface.Translucent = False\n   \nEnd Sub"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: Replace Assemblies (not Parts) using iLogic\n                    ", "solution": [], "author": "swordmaster"},
{"created at": [], "solution Title": "\n                        Re: iLogic Sequential Part Number Generator\n                    ", "solution": ["If iProperties.Value(\"Project\", \"Part Number\") <> ThisDoc.FileName(False) _  \nAnd iProperties.Value(\"Project\", \"Part Number\") <> \"\" Then\nquestion = MessageBox.Show(\"Are you sure you would like to overwrite the currently assigned part number?\"&vbLf _\n&\"Current Part Number: \"&iProperties.Value(\"Project\", \"Part Number\"), \"Part Number Overwrite?\", MessageBoxButtons.YesNo )\nElse\nAssignNumber:\nGoExcel.Open(\"\\\\SVAULT\\Inventor Standards\\Automation\\JFRC - PART NUMBER GENERATOR.xls\", \"Part Numbers\")\n\n\t\tPreviousNumber=GoExcel.CellValue(\"A2\")\n\t\t\tNewNumber=PreviousNumber+1\n\tGoExcel.CellValue(\"A2\") = NewNumber\n\tiProperties.Value(\"Project\", \"Part Number\") = GoExcel.CellValue(\"B2\")\n\t\nEnd If\n\nIf question = vbYes Then\nGoExcel.Open(\"\\\\SVAULT\\Inventor Standards\\Automation\\JFRC - PART NUMBER GENERATOR.xls\", \"Part Numbers\")\n\t\tPreviousNumber=GoExcel.CellValue(\"A2\")\n\t\t\tNewNumber=PreviousNumber+1\n\tGoExcel.CellValue(\"A2\") = NewNumber\n\tiProperties.Value(\"Project\", \"Part Number\") = GoExcel.CellValue(\"B2\")\n\nElse End If\n \nGoExcel.Save()", "If iProperties.Value(\"Project\", \"Part Number\") = ThisDoc.FileName(False) _  \nThen iProperties.Value(\"Project\", \"Part Number\") = \"\""], "author": "jeff_jordan"},
{"created at": [], "solution Title": "\n                        Re: Changing outlines in .IDW\n                    ", "solution": [], "author": "n00kie.tdc"},
{"created at": [], "solution Title": "\n                        Re: Centre Drawing Text\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Change active project using API\n                    ", "solution": ["Private Sub ChangeProjects()\n   Dim oProjct As DesignProjectManager\n   Set oProject = ThisApplication.DesignProjectManager\n   oProject.DesignProjects.ItemByName(\"Default\").Activate (True)\nEnd Sub"], "author": "whiteskulleton"},
{"created at": [], "solution Title": "\n                        Re: How to know when Inventor is busy?\n                    ", "solution": [], "author": "herrwolf1"},
{"created at": [], "solution Title": "\n                        Re: Change active Project File (ipj) via vb.net\n                    ", "solution": [], "author": "Passi"},
{"created at": [], "solution Title": "\n                        Re: Format and export user parameter with Ilogic\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Adding a stamp/sketch/symbol to a .idw and editing the date\n                    ", "solution": [], "author": "dean.morrison"},
{"created at": [], "solution Title": "\n                        Re: Protect Ilogic rules\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Need VBA coding help(Faceperimeter, laser cutting length)\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Set assembly iProperties using iLogic\n                    ", "solution": ["iProperties", ".", "Value", "(", "\"", "Custom", "\"", ", ", "\"", "AssyNo", "\"", ")", "=AssyNoValue", "iProperties", ".", "Value", "(", "\"", "Project", "\"", ", ", "\"", "Part Number", "\"", ")", "=", "iProperties", ".", "Value", "(", "\"Part1", ":1", "\"", ", ", "\"", "Custom", "\"", ", ", "\"", "AssyNo", "\"", ")"], "author": "meck"},
{"created at": [], "solution Title": "\n                        Re: How to save a part with a name automatic?\n                    ", "solution": ["app.SilentOperation = true;\n//Make, save and close document here\napp.SilentOperation = false;"], "author": "BrentDouglas"},
{"created at": [], "solution Title": "\n                        Re: Is it possible to create iAssembly?\n                    ", "solution": [], "author": "nttoan8187"},
{"created at": [], "solution Title": "\n                        Re: Edit file iProperties without opening file?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Hide revision rows\n                    ", "solution": ["Dim visibleRowsWanted As Integer = 5\n\nFor Each sheet As Sheet In ThisDrawing.Document.Sheets\n  For Each revTable As RevisionTable In sheet.RevisionTables\n    Trace.WriteLine(\" --- \" & revTable.Title)\n\tDim rows as RevisionTableRows = revTable.RevisionTableRows\n\tDim numberToHide As Integer = rows.Count - visibleRowsWanted\n\tIf (numberToHide <= 0) Then Continue For\n\tFor i = 1 To numberToHide\n\t  rows(i).Visible = False\n\tNext\n  Next\nNext\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Change Mass Of Virtual Part\n                    ", "solution": [], "author": "nttoan8187"},
{"created at": [], "solution Title": "\n                        Re: Import Customized User Commands on Inventor Startup\n                    ", "solution": [], "author": "ACEDeSmedt"},
{"created at": [], "solution Title": "\n                        Re: VBA code to create inventor part\n                    ", "solution": [], "author": "nttoan8187"},
{"created at": [], "solution Title": "\n                        Re: View Label Information\n                    ", "solution": [], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: iLogic and vb - Active Adocument Problem\n                    ", "solution": [], "author": "matt_jlt"},
{"created at": [], "solution Title": "\n                        Re: Is \"Loading VBA Project\" required?\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: C# Code is not working when running as a Windows Service\n                    ", "solution": [], "author": "dgesler"},
{"created at": [], "solution Title": "\n                        Re: Inventor populate iProperties from Excel using iLogic problem\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Open file from default templates\n                    ", "solution": [], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: iLogic and Copy Design\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: run all rule from macro\n                    ", "solution": ["   For Each rule In rules\n      If (rule.IsActive) Then\n         iLogicAuto.RunRuleDirect (rule)\n      End If\n   Next\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic AutoComplete Type Feature\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Call iLogic rule from add-in\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Color List in iLogic\n                    ", "solution": ["Dim colorList As New ArrayList\nFor Each style As RenderStyle In ThisDoc.Document.RenderStyles\n  colorList.Add(Style.Name)\nNext\nMultiValue.List(\"primary_color\") = colorList\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: How to test for EVEN or ODD variable values with iLogic 2012?\n                    ", "solution": ["If NumberOfRows Mod 2 = 0 Then\n\t//Do even things\nElse\n\t//Do odd things\nEnd If"], "author": "BrentDouglas"},
{"created at": [], "solution Title": "\n                        Re: Delete Drawing Sheets\n                    ", "solution": ["      Do While oDoc.Sheets.count > 1\n        Set oSheet = oDoc.Sheets.Item(oDoc.Sheets.count)\n        oSheet.Delete\n      Loop"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Camera GetExtents\n                    ", "solution": [], "author": "deanlupini"},
{"created at": [], "solution Title": "\n                        Re: How To Update ClientGraphics Efficiently\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: registry free addin for IV2011\n                    ", "solution": [], "author": "nlaschet"},
{"created at": [], "solution Title": "\n                        Re: Custom Properties\n                    ", "solution": [], "author": "LOONYLEN"},
{"created at": [], "solution Title": "\n                        Re: Create a new drawing with specific template??\n                    ", "solution": [], "author": "Rene-J"},
{"created at": [], "solution Title": "\n                        Re: Vault database file size limit\n                    ", "solution": [], "author": "dcoulam3"},
{"created at": [], "solution Title": "\n                        Re: Selecting a Profile Path\n                    ", "solution": [], "author": "marin_israel"},
{"created at": [], "solution Title": "\n                        Re: turning off thousands of work planes\n                    ", "solution": ["Public Sub TurnAllOff()\n    ' Make sure a part of assembly is active.\n    If ThisApplication.ActiveDocumentType = kAssemblyDocumentObject Or _\n            ThisApplication.ActiveDocumentType = kPartDocumentObject Then\n       Dim doc As Document\n       Set doc = ThisApplication.ActiveDocument\n       \n       Dim objVis As ObjectVisibility\n       Set objVis = doc.ObjectVisibility\n       \n       objVis.AllWorkFeatures = False\n       objVis.Sketches = False\n       objVis.Sketches3D = False\n    Else\n        MsgBox \"A part of assembly must be active.\"\n    End If\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Sketched Symbols GetResultText\n                    ", "solution": ["    public static class SketchedSymbolExt\n    {\n        public static Dictionary<string, string> GetTexts(this SketchedSymbol symbol)\n        {\n            var def = symbol.Definition;\n            var sketch = def.Sketch;\n            var results = new Dictionary<string, string>();\n            foreach (var o in sketch.TextBoxes)\n            {\n                var tb = (TextBox)o;\n                var resultText = symbol.GetResultText(tb);\n                results.Add(tb.Text, resultText);\n            }\n            return results;\n        }\n    }"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: Detect Pipe run\n                    ", "solution": [], "author": "*Sanjay Ramaswamy \\(Autodesk\\)"},
{"created at": [], "solution Title": "\n                        Re: Events in the API\n                    ", "solution": [], "author": "cadull_rb"},
{"created at": [], "solution Title": "\n                        Re: Adding an image\n                    ", "solution": [], "author": "kmiller"},
{"created at": [], "solution Title": "\n                        Re: Automated centerlines in VBA\n                    ", "solution": ["Dim centerlineSettings As AutomatedCenterlineSettings\nCall flatView.GetAutomatedCenterlineSettings(centerlineSettings)\ncenterlineSettings.ApplyToHoles = True\ncenterlineSettings.ApplyToPunches = True\nDim resultCenters As ObjectsEnumerator\nSet resultCenters = flatView.SetAutomatedCenterlineSettings(centerlineSettings)\n"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Change text size of a TextBox object in a part document sketch?\n                    ", "solution": [], "author": "*Sanjay Ramaswamy \\(Autodesk\\)"},
{"created at": [], "solution Title": "\n                        Re: How to show a form with an Add-in\n                    ", "solution": [], "author": "saseendrankomba"},
{"created at": [], "solution Title": "\n                        Re: Design Data folder is not complete\n                    ", "solution": [], "author": "Xun.Zhang"},
{"created at": [], "solution Title": "\n                        Re: AddBorder - does not set the number of zones\n                    ", "solution": [], "author": "jdkriek"},
{"created at": [], "solution Title": "\n                        Re: Rectangular Hole Pattern\n                    ", "solution": [], "author": "dano0310"},
{"created at": [], "solution Title": "\n                        Re: Mass Corruption\n                    ", "solution": [], "author": "*Sanjay Ramaswamy \\(Autodesk\\)"},
{"created at": [], "solution Title": "\n                        Re: Export Sketch As... (DXF)\n                    ", "solution": ["    Public Sub PublishDXF(ByVal oApp As Inventor.Application)\n        If oApp.ActiveDocument.DocumentType = Inventor.DocumentTypeEnum.kPartDocumentObject Then\n            PublishDocumentDXF(oApp.ActiveDocument)\n        ElseIf oApp.ActiveDocument.DocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n            Dim asmDoc As Inventor.AssemblyDocument\n            asmDoc = oApp.ActiveDocument\n            If MsgBox(\"Do you want to Publish all Sub-Components to DXF as well?\", vbYesNo) = vbYes Then\n                PublishDocumentDXF(asmDoc)\n                PublishDXFAllOccurrences(asmDoc.ComponentDefinition.Occurrences)\n            Else\n                PublishDocumentDXF(asmDoc)\n            End If\n        End If\n\n    End Sub\n\n    Private Sub PublishDXFAllOccurrences(ByVal Occurrences As Inventor.ComponentOccurrences)\n        ' Iterate through the occurrences in the current level \n        ' of the assembly. \n        Dim occ As Inventor.ComponentOccurrence\n        For Each occ In Occurrences\n            ' Skip any invisible, suppressed, or excluded components. \n            PublishDocumentDXF(CType(occ.Definition.Document, Inventor.Document))\n\n            If occ.DefinitionDocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n                ' Recursively call this sub to continue \n                ' traversing the assembly. \n                Call PublishDXFAllOccurrences(occ.SubOccurrences)\n            End If\n        Next\n    End Sub\n\n    Public Sub PublishDocumentDXF(ByVal oDoc As Inventor.Document)\n\n        Dim opartDoc As Inventor.PartDocument\n        Dim oasmDoc As Inventor.AssemblyDocument\n\n        Dim sOutDXF As String\n        sOutDXF = \"DXF\"\n        'Dim sOut As String\n        'sOut = \"FLAT PATTERN DXF?AcadVersion=R12&OuterProfileLayer=0\"\n\n        If oDoc.DocumentType = Inventor.DocumentTypeEnum.kPartDocumentObject Then\n            opartDoc = oDoc\n            Dim myDXFFilename As String = System.IO.Path.GetFileNameWithoutExtension(opartDoc.FullFileName).Trim.ToUpper.Replace(\"_LAYOUT\", \"\").Replace(\"_\", \".\")\n            If opartDoc.SubType = \"{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}\" Then\n                Dim oSheetMetalCompDef As Inventor.SheetMetalComponentDefinition\n                oSheetMetalCompDef = opartDoc.ComponentDefinition\n                Dim boolOutputFlatpattern As Boolean = True\n                For Each mySketch As Inventor.Sketch In oSheetMetalCompDef.Sketches\n                    'MsgBox(mySketch.Name)\n                    If mySketch.Name.Trim.ToUpper = \"BURNLINE\" Then\n                        Dim oDataIO As Inventor.DataIO\n                        oDataIO = opartDoc.ComponentDefinition.DataIO\n                        Dim strDXFOutputFile As String = \"c:\\inventorrelease\\\" & myDXFFilename & \".dxf\"\n\n                        Dim boolIsDirty As Boolean = oDoc.Dirty\n                        mySketch.DataIO.WriteDataToFile(sOutDXF, strDXFOutputFile)\n                        oDoc.Dirty = boolIsDirty\n                        boolOutputFlatpattern = False\n\n                        'ElseIf mySketch.Name.Trim.ToUpper.StartsWith(\"DXFOUT_\") Then\n                        '    Dim myFilenameTag As String = mySketch.Name.Trim.ToUpper.Replace(\"DXFOUT_\", \"\")\n                        '    Dim oDataIO As Inventor.DataIO\n                        '    oDataIO = opartDoc.ComponentDefinition.DataIO\n                        '    Dim strDXFOutputFile As String = \"c:\\inventorrelease\\\" & myDXFFilename & \".DT#\" & myFilenameTag & \".dxf\"\n\n                        '    Dim boolIsDirty As Boolean = oDoc.Dirty\n                        '    mySketch.DataIO.WriteDataToFile(sOutDXF, strDXFOutputFile)\n                        '    oDoc.Dirty = boolIsDirty\n                    End If\n                Next\n                For Each mySketch As Inventor.Sketch In oSheetMetalCompDef.FlatPattern.Sketches\n                    'MsgBox(mySketch.Name)\n                    If mySketch.Name.Trim.ToUpper = \"BURNLINE\" Then\n                        Dim strDXFOutputFile As String = \"c:\\inventorrelease\\\" & myDXFFilename & \".dxf\"\n\n                        Dim boolIsDirty As Boolean = oDoc.Dirty\n                        mySketch.DataIO.WriteDataToFile(sOutDXF, strDXFOutputFile)\n                        oDoc.Dirty = boolIsDirty\n\n                        boolOutputFlatpattern = False\n                        'ElseIf mySketch.Name.Trim.ToUpper.StartsWith(\"DXFOUT_\") Then\n                        '    Dim myFilenameTag As String = mySketch.Name.Trim.ToUpper.Replace(\"DXFOUT_\", \"\")\n                        '    Dim strDXFOutputFile As String = \"c:\\inventorrelease\\\" & myDXFFilename & \".DT#\" & myFilenameTag & \".dxf\"\n\n                        '    Dim boolIsDirty As Boolean = oDoc.Dirty\n\n                        '    mySketch.DataIO.WriteDataToFile(sOutDXF, strDXFOutputFile)\n                        '    oDoc.Dirty = boolIsDirty\n                    End If\n                Next\n                If boolOutputFlatpattern Then\n                    ' Get the DataIO object.\n                    Dim oDataIO As Inventor.DataIO\n                    oDataIO = opartDoc.ComponentDefinition.DataIO\n\n                    ' Build the string that defines the format of the DXF file.\n                    Dim sOut As String\n                    'sOut = \"FLAT PATTERN DXF?AcadVersion=R12&OuterProfileLayer=0&InteriorProfilesLayer=0\"\n\n                    sOut = \"FLAT PATTERN DXF?AcadVersion=R12&OuterProfileLayer=0&InteriorProfilesLayer=0\" & _\n                            \"&InvisibleLayers=IV_BEND;IV_BEND_DOWN;IV_FEATURE_PROFILES;IV_FEATURE_PROFILES_DOWN\" &\n                            \";IV_TANGENT;IV_ROLL;IV_ROLL_TANGENT;IV_UNCONSUMED_SKETCHES;IV_ALTREP_BACK;IV_ALTREP_FRONT\" & _\n                            \";IV_TOOL_CENTER;IV_TOOL_CENTER_DOWN;IV_ARC_CENTERS\" & _\n                            \"&SimplifySplines=True&MergeOuterContour=true\"\n\n                    Dim strDXFOutputFile As String = \"c:\\inventorrelease\\\" & myDXFFilename & \".dxf\"\n\n                    Dim boolIsDirty As Boolean = oDoc.Dirty\n                    oDataIO.WriteDataToFile(sOut, strDXFOutputFile)\n                    oDoc.Dirty = boolIsDirty\n\n                End If\n            Else\n                Dim opartCompDef As Inventor.PartComponentDefinition = opartDoc.ComponentDefinition\n                For Each mySketch As Inventor.Sketch In opartCompDef.Sketches\n                    If mySketch.Name.Trim.ToUpper = \"BURNLINE\" Then\n                        Dim strDXFOutputFile As String = \"c:\\inventorrelease\\\" & myDXFFilename & \".dxf\"\n                        mySketch.DataIO.WriteDataToFile(sOutDXF, strDXFOutputFile)\n                        'ElseIf mySketch.Name.Trim.ToUpper.StartsWith(\"DXFOUT_\") Then\n                        '    Dim myFilenameTag As String = mySketch.Name.Trim.ToUpper.Replace(\"DXFOUT_\", \"\")\n                        '    Dim strDXFOutputFile As String = \"c:\\inventorrelease\\\" & myDXFFilename & \".DT#\" & myFilenameTag & \".dxf\"\n\n                        '    mySketch.DataIO.WriteDataToFile(sOutDXF, strDXFOutputFile)\n                    End If\n                Next\n            End If\n        ElseIf oDoc.DocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n            oasmDoc = oDoc\n            Dim myDXFFilename As String = System.IO.Path.GetFileNameWithoutExtension(oasmDoc.FullFileName).Trim.ToUpper.Replace(\"_LAYOUT\", \"\").Replace(\"_\", \".\")\n\n            Dim oasmCompDef As Inventor.AssemblyComponentDefinition = oasmDoc.ComponentDefinition\n            For Each mySketch As Inventor.Sketch In oasmCompDef.Sketches\n\n                If mySketch.Name.Trim.ToUpper = \"BURNLINE\" Then\n                    Dim strDXFOutputFile As String = \"c:\\inventorrelease\\\" & myDXFFilename & \".dxf\"\n                    Dim boolIsDirty As Boolean = oDoc.Dirty\n                    mySketch.DataIO.WriteDataToFile(sOutDXF, strDXFOutputFile)\n                    oDoc.Dirty = boolIsDirty\n\n                    'ElseIf mySketch.Name.Trim.ToUpper.StartsWith(\"DXFOUT_\") Then\n                    'Dim myFilenameTag As String = mySketch.Name.Trim.ToUpper.Replace(\"DXFOUT_\", \"\")\n                    'Dim strDXFOutputFile As String = \"c:\\inventorrelease\\\" & myDXFFilename & \".DT#\" & myFilenameTag & \".dxf\"\n                    '    Dim boolIsDirty As Boolean = oDoc.Dirty\n                    '    mySketch.DataIO.WriteDataToFile(sOutDXF, strDXFOutputFile)\n                    '    oDoc.Dirty = boolIsDirty\n\n                End If\n            Next\n        End If\n\n    End Sub"], "author": "JoeBarnes4076"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Drawing dimension/attribute help.\n                    ", "solution": ["Dim oEdgeProx1 As Inventor.EdgeProxy\n        oCompOcc.CreateGeometryProxy(oEdge1, oEdgeProx1)", "oDrawCurves = oView.DrawingCurves(oEdgeProx1)"], "author": "rusmwb"},
{"created at": [], "solution Title": "\n                        Re: Automatically adding bend notes - IV2010\n                    ", "solution": ["Dim oDoc As DrawingDocument\nDim oSheet As Sheet\nDim oView As DrawingView\nDim oCurve As DrawingCurve\nDim oBendNote As BendNote\n\noDoc = ThisApplication.ActiveDocument\noSheet = oDoc.ActiveSheet\n\nFor Each oView In oSheet.DrawingViews\n For Each oCurve In oView.DrawingCurves\n  If oCurve.EdgeType = Inventor.DrawingEdgeTypeEnum.kBendDownEdge _\n  Or oCurve.EdgeType = Inventor.DrawingEdgeTypeEnum.kBendUpEdge Then\n\t' Create the bend note\n\toBendNote = oSheet.DrawingNotes.BendNotes.Add(oCurve)\n  End If\n Next 'oCurve\nNext 'oView\n"], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: Remove 3rd Pary Apps\n                    ", "solution": [], "author": "coreyparks"},
{"created at": [], "solution Title": "\n                        Re: Edit Client Graphics of a Client Feature\n                    ", "solution": [], "author": "deanlupini"},
{"created at": [], "solution Title": "\n                        Re: There is something basic that I am missing in drawing views.\n                    ", "solution": ["Sub NewDrawingOnDWGTemplate()\n    \n    Dim oDrawingOptions As DrawingOptions\n    Set oDrawingOptions = ThisApplication.DrawingOptions\n    \n    Dim eDefaultDrawingFileType As DefaultDrawingFileTypeEnum\n    eDefaultDrawingFileType = oDrawingOptions.DefaultDrawingFileType\n    \n    ' Set the default drawing file type to DWG.\n    oDrawingOptions.DefaultDrawingFileType = kDWGDefaultDrawingFileType\n        \n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.Documents.Add(kDrawingDocumentObject, ThisApplication.FileManager.GetTemplateFile(kDrawingDocumentObject, kDefaultSystemOfMeasure))\n    \n    ' Reset the default drawing file type to default value.\n    oDrawingOptions.DefaultDrawingFileType = eDefaultDrawingFileType\n    \nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic Parameter Set Problem\n                    ", "solution": [], "author": "rjay75"},
{"created at": [], "solution Title": "\n                        Re: Baseline Dimensions in API\n                    ", "solution": [], "author": "sanjay.ramaswam"},
{"created at": [], "solution Title": "\n                        Re: Inventor Automation with VBA\n                    ", "solution": [], "author": "jeff.pek"},
{"created at": [], "solution Title": "\n                        Re: Rev Table Location\n                    ", "solution": [], "author": "KentKeller"},
{"created at": [], "solution Title": "\n                        Re: vb.net simple selection not working\n                    ", "solution": ["Public Class clsSelect\n    ' Declare the event objects\n    Private WithEvents oInteraction As InteractionEvents\n    Private WithEvents oSelect As SelectEvents\n\n    ' Declare a flag that's used to determine when selection stops.\n    Private bStillSelecting As Boolean\n\n    Public Function Pick(ByVal filter As SelectionFilterEnum, ByVal oAppOselect As Application) As Object\n        ' Initialize flag.\n        bStillSelecting = True\n\n        ' Create an InteractionEvents object.\n        oInteraction = oAppOselect.CommandManager.CreateInteractionEvents\n\n        ' Define that we want select events rather than mouse events.\n        oInteraction.SelectionActive = True\n\n        ' Set a reference to the select events.\n        oSelect = oInteraction.SelectEvents\n\n        ' Set the filter using the value passed in.\n        oSelect.AddSelectionFilter(filter)\n\n        ' The InteractionEvents object.\n        oInteraction.Start()\n\n        ' Loop until a selection is made.\n        Do While bStillSelecting\n            System.Windows.Forms.Application.DoEvents()\n        Loop\n\n        ' Get the selected item. If more than one thing was selected,\n        ' just get the first item and ignore the rest.\n        Dim oSelectedEnts As ObjectsEnumerator\n        oSelectedEnts = oSelect.SelectedEntities\n        If oSelectedEnts.Count > 0 Then\n            Pick = oSelectedEnts.Item(1)\n        Else\n            Pick = Nothing\n        End If\n\n        ' Stop the InteractionEvents object.\n        oInteraction.Stop()\n\n        ' Clean up.\n        oSelect = Nothing\n        oInteraction = Nothing\n    End Function\n\n    Private Sub oSelect_OnSelect( _\n        ByVal JustSelectedEntities As Inventor.ObjectsEnumerator, _\n        ByVal SelectionDevice As Inventor.SelectionDeviceEnum, _\n        ByVal ModelPosition As Inventor.Point, _\n        ByVal ViewPosition As Inventor.Point2d, ByVal View As Inventor.View) Handles oSelect.OnSelect\n        bStillSelecting = False\n    End Sub\n\nEnd Class"], "author": "wpepping"},
{"created at": [], "solution Title": "\n                        Re: Selected Object Type\n                    ", "solution": [], "author": "deanlupini"},
{"created at": [], "solution Title": "\n                        Re: ilogic - export dxf from idw\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: How can I update drawing via Apprentice using VB.NET 2010?\n                    ", "solution": ["inventorApp.SilentOperation = True"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Exporting Parts List from idw file using VB.net?\n                    ", "solution": ["Sub ExportPartslist()\n    ' say there is a drawing document opened\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.Sheets(1)\n    \n    ' say there is a Partslist on first sheet.\n    Dim oPartslist As PartsList\n    Set oPartslist = oSheet.PartsLists(1)\n    \n    ' export the Partslist to excel.\n    oPartslist.Export \"C:\\Partslist.xls\", kMicrosoftExcel\n\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Change boolean User Parameter with API\n                    ", "solution": ["    Public Shared Function GetParameter(ByVal objDocument As Inventor.Document, ByVal strName As String) As Inventor.Parameter\n        Dim objParameter As Inventor.Parameter = Nothing\n        Try\n            Dim colParameters As Inventor.Parameters = GetDocumentParameters(objDocument)\n            If colParameters IsNot Nothing Then\n                objParameter = colParameters(strName)\n            End If\n        Catch ex As Exception\n        End Try\n        Return objParameter\n    End Function\n    Public Shared Function GetDocumentParameters(ByVal objDocument As Inventor.Document) As Inventor.Parameters\n        Dim colParameters As Inventor.Parameters = Nothing\n        If objDocument.DocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n            colParameters = CType(objDocument, Inventor.AssemblyDocument).ComponentDefinition.Parameters\n        ElseIf objDocument.DocumentType = Inventor.DocumentTypeEnum.kPartDocumentObject Then\n            colParameters = CType(objDocument, Inventor.PartDocument).ComponentDefinition.Parameters\n        End If\n        Return colParameters\n    End Function\n\n", "    Public Shared ReadOnly Property IsDoubleType(ByVal strUnits As String) As Boolean\n        Get\n            Return Not IsStringType(strUnits) AndAlso Not IsBooleanType(strUnits)\n        End Get\n    End Property\n    Public Shared ReadOnly Property IsBooleanType(ByVal strUnits As String) As Boolean\n        Get\n            Return strUnits = Constants.BOOLEANUNITS\n        End Get\n    End Property\n    Public Shared ReadOnly Property IsStringType(ByVal strUnits As String) As Boolean\n        Get\n            Return strUnits = Constants.STRINGUNITS\n        End Get\n    End Property\n    Public Class Constants\n\n        Public Const STRINGUNITS As String = \"Text\"\n        Public Const BOOLEANUNITS As String = \"Boolean\"\n\n    End Class"], "author": "peter.townsend"},
{"created at": [], "solution Title": "\n                        Re: Frame Analysis - Missing torsional modulus\n                    ", "solution": [], "author": "jbj"},
{"created at": [], "solution Title": "\n                        Re: How to fix iLogic AddIn?\n                    ", "solution": [], "author": "jeff.pek"},
{"created at": [], "solution Title": "\n                        Re: Thumbnail converting StdPicture to image problem in VB.net?\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: reading RenderStyle of Face objects\n                    ", "solution": [], "author": "rif_jochm"},
{"created at": [], "solution Title": "\n                        Re: Split Surfaces\n                    ", "solution": ["Private Sub Splitter()\n    Dim opartDoc As PartDocument\n    Set opartDoc = ThisApplication.ActiveDocument\n\n    Dim oPartCompDef As PartComponentDefinition\n    Set oPartCompDef = opartDoc.ComponentDefinition\n    \n    For j = 10 To 113\n        For i = 1 To oPartCompDef.WorkPlanes.Count\n            If oPartCompDef.WorkPlanes.Item(i).Name = \"Work Plane\" & j Then\n                Dim oSplit As WorkPlane\n                Set oSplit = oPartCompDef.WorkPlanes.Item(i)\n                Call oPartCompDef.Features.SplitFeatures.SplitFaces(oSplit, False, GetFaces(oPartCompDef))\n                 \n                Exit For\n            End If\n        Next i\n    Next j\nEnd Sub\n\nFunction GetFaces(oPartCompDef As PartComponentDefinition) As ObjectCollection\n    Set GetFaces = ThisApplication.TransientObjects.CreateObjectCollection\n    \n    For i = 1 To oPartCompDef.WorkSurfaces.Count\n        If oPartCompDef.WorkSurfaces.Item(i).SurfaceBodies(1).Name = \"Srf13\" Then    '\"Srf31\"\n            Dim oSurface As SurfaceBody 'WorkSurface\n            Set oSurface = oPartCompDef.WorkSurfaces.Item(i).SurfaceBodies(1)\n            \n            Dim oFace As Face\n            For Each oFace In oSurface.Faces\n                GetFaces.Add oFace\n            Next\n    \n            Exit For\n        End If\n    Next i\nEnd Function"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Lighting disabled when using a colormapper\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Problem loading old Add-in in Inventor 2011/Windows7\n                    ", "solution": [], "author": "tclayton"},
{"created at": [], "solution Title": "\n                        Re: Tolerance.SetTo help\n                    ", "solution": [], "author": "AlexFielder"},
{"created at": [], "solution Title": "\n                        Re: Create a Toggle or On/Off Button\n                    ", "solution": [], "author": "deanlupini"},
{"created at": [], "solution Title": "\n                        Re: GeneralDimension.Getreferencekey = broken??\n                    ", "solution": ["Sub DrawingDimensionRefKey()", "\u00a0\u00a0\u00a0 Dim oDoc As DrawingDocument", "\u00a0\u00a0\u00a0 Set oDoc = ThisApplication.ActiveDocument", "\u00a0\u00a0\u00a0 \u00a0", "\u00a0\u00a0\u00a0 Dim oRefKeyManager As ReferenceKeyManager", "\u00a0\u00a0\u00a0 Set oRefKeyManager = oDoc.ReferenceKeyManager", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0\u00a0 Dim oDim As DrawingDimension", "\u00a0\u00a0\u00a0 Dim bKey() As Byte", "\u00a0\u00a0\u00a0 Dim sKeyToStr(1 To 5) As String", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0\u00a0 Dim i As Integer", "\u00a0\u00a0\u00a0 For i = 1 To 5", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Set oDim = oDoc.Sheets(1).DrawingDimensions(i)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 oDim.GetReferenceKey bKey", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sKeyToStr(i) = oRefKeyManager.KeyToString(bKey)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Debug.Print sKeyToStr(i)", "\u00a0\u00a0\u00a0 Next", "\u00a0\u00a0 \u00a0", "\u00a0\u00a0\u00a0 Dim j As Integer", "\u00a0\u00a0\u00a0 For i = 1 To 4", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 For j = i + 1 To 5", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 CompareStr sKeyToStr(i), sKeyToStr(j)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Next", "\u00a0\u00a0\u00a0 Next", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0", "End Sub", "Sub CompareStr(Str1 As String, Str2 As String)", "\u00a0\u00a0\u00a0 If StrComp(Str1, Str2, vbBinaryCompare) Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Debug.Print \"Diff!\"", "\u00a0\u00a0\u00a0 Else", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 MsgBox \"The two strings are identical!\"", "\u00a0\u00a0\u00a0 End If", "End Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: How can I add a build-in command to my custom ribbon panel in vb.net?\n                    ", "solution": [], "author": "sanjay.ramaswam"},
{"created at": [], "solution Title": "\n                        Re: How to get the Area in iProperties?\n                    ", "solution": ["Sub SetDrawingViewACS()\n    ' open a drawing document with a drawing view on it before playing it.\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.Sheets(1)\n    \n    Dim oBaseView As DrawingView\n    Set oBaseView = oSheet.DrawingViews(1)\n    \n    Dim oACS As AutomatedCenterlineSettings\n    ' get the automated centerline settings\n    oBaseView.GetAutomatedCenterlineSettings oACS\n    \n    ' change the ApplyToCylinders property\n    oACS.ApplyToCylinders = True\n    \n    ' set the settings back to the baseview\n    oBaseView.SetAutomatedCenterlineSettings oACS\n     \nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Settings like Solidworks\n                    ", "solution": [], "author": "stevec781"},
{"created at": [], "solution Title": "\n                        Re: Event for Inventor getting focus?\n                    ", "solution": [], "author": "jeff.pek"},
{"created at": [], "solution Title": "\n                        Re: OnSelect world point\n                    ", "solution": [], "author": "deanlupini"},
{"created at": [], "solution Title": "\n                        Re: Ilogic and excell\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Hiding workplanes in generated jpg images\n                    ", "solution": [], "author": "MikeGillam5072"},
{"created at": [], "solution Title": "\n                        Re: Externally modify Additional Custom Model iProperty Source?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Leader to dimension\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Accessing the Application Options User Name from VB\n                    ", "solution": [], "author": "sanjay.ramaswam"},
{"created at": [], "solution Title": "\n                        Re: Unable to read all parameters with\n                    ", "solution": ["Public Function getParamValues() As Collection\n    Dim ParamName As String\n    ParamName = \"BOX1\"\n    \n    Dim oParameters As Parameters\n    Dim colParamValues As New Collection\n    Set getParamValues = colParamValues\n    Set oParameters = ThisApplication.ActiveDocument.ComponentDefinition.Parameters\n    \n    Dim listValue As Variant\n    For Each listValue In oParameters.UserParameters.Item(ParamName).ExpressionList\n        colParamValues.Add listValue\n    Next\nEnd Function\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: API: MultiBody parts.\n                    ", "solution": [], "author": "sanjay.ramaswam"},
{"created at": [], "solution Title": "\n                        Re: Delete Workplanes (Exception form HRESULT: 0x80070057(E_INVALIDARG))\n                    ", "solution": ["For i = oWorkPlanes.Count To 4 Step -1"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Can you export an .adsk file using Inventor API?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: GenericTrackBarControl.dll\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Balloon Locations\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: (iLogic) Change excel chart loction\n                    ", "solution": ["Dim", " ", "excelFileName", " ", "As", " ", "String", " ", "=", " ", "ThisDoc", ".", "Path", "If", " ", "ChartSource", " ", "=", " ", "\"", "A", "\"", " ", "Then", "   ", "excelFileName", " ", "=", " ", "excelFileName", " ", "&", " ", "\"", "\\ExcelChartA.xls", "\"", "Else", "   ", "excelFileName", " ", "=", " ", "excelFileName", " ", "&", " ", "\"", "\\ExcelChartB.xls", "\"", "End", " ", "If", "Dim", " ", "doc", " ", "as", " ", "Document", " ", "=", " ", "ThisDoc", ".", "Document", "    ", "Dim", " ", "oleDesc", " ", "As", " ", "ReferencedOLEFileDescriptor", "    ", "For", " ", "Each", " ", "oleDesc", " ", "In", " ", "doc", ".", "ReferencedOLEFileDescriptors", "      ", "If", " ", "(", "oleDesc", ".", "OLEDocumentType", " ", "<>", " ", "OLEDocumentTypeEnum", ".", "kOLEDocumentLinkObject", ")", "  ", "Then", " ", "Continue", " ", "For", "      ", "If", " ", "(", "Not", " ", "oleDesc", ".", "FullFileName", ".", "Contains", "(", "\"", ".xls", "\"", ")", " ", ")", " ", "Then", " ", "Continue", " ", "For", "      ", "oleDesc", ".", "FileDescriptor", ".", "ReplaceReference", "(", "excelFileName", ")", "    ", "Next"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule Suppression\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Anyone else having issues in 2011 64bit with InteractionEvents ???\n                    ", "solution": [], "author": "sanjay.ramaswam"},
{"created at": [], "solution Title": "\n                        Re: Simplify the code\n                    ", "solution": [], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Recent WIn7 64bit update prevents opening inventor through API ( C# / inv201\n                    ", "solution": ["static void WaitForInventorToBeReady(Inventor.Application myInventor)\n{\n\tbool inventorReady = false;\n        while (!inventorReady)\n\t{\n            System.Threading.Thread.Sleep(400);\n            System.Windows.Forms.Application.DoEvents();\n            if (myInventor.Ready)  inventorReady = true;\n        End While\n\tConsole.WriteLine(\"Inventor is Ready\")\n}\n "], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: create UI for iLogic with C# (not showing class or members in wizard)\n                    ", "solution": ["public partial class AU_Shutter_Assembly : Form"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Prompt for iProperty at Drawing Creation\n                    ", "solution": [], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: ilogic trigger/ sketch symbol\n                    ", "solution": ["'AS-BUILT FOR RECORDS STATUS'\nIf DLG.VBSTATUS= \"AS-BUILT FOR RECORDS\" Then \niProperties.Value(\"Custom\", \"AS-BUILT FOR RECORDS\")=\"X\"\nElse \niProperties.Value(\"CUSTOM\", \"AS-BUILT FOR RECORDS\")=\"\"\nEnd If\n\n'PRELIMINARY SKETCH/INFORMATION ONLY'\nIf DLG.VBSTATUS= \"PRELIMINARY SKETCH/INFORMATION ONLY\" Then \niProperties.Value(\"Custom\", \"PRELIMINARY SKETCH/INFORMATION ONLY\")=\"X\"\nElse \niProperties.Value(\"Custom\", \"PRELIMINARY SKETCH/INFORMATION ONLY\")=\"\"\nEnd If\n\n'SUBMITTED FOR CUSTOMER APPROVAL'\nIf DLG.VBSTATUS= \"SUBMITTED FOR CUSTOMER APPROVAL\" Then \niProperties.Value(\"Custom\", \"SUBMITTED FOR CUSTOMER APPROVAL\")=\"X\"\nElse \niProperties.Value(\"Custom\", \"SUBMITTED FOR CUSTOMER APPROVAL\")=\"\"\nEnd If\n\n'SUBMITTED FOR CUSTOMER CERTIFICATION'\nIf DLG.VBSTATUS= \"SUBMITTED FOR CUSTOMER CERTIFICATION\" Then \niProperties.Value(\"Custom\", \"SUBMITTED FOR CUSTOMER CERTIFICATION\")=\"X\"\nElse \niProperties.Value(\"Custom\", \"SUBMITTED FOR CUSTOMER CERTIFICATION\")=\"\"\nEnd If\n\n'CERTIFIED FOR FABRICATION'\nIf DLG.VBSTATUS= \"CERTIFIED FOR FABRICATION\" Then \niProperties.Value(\"Custom\", \"CERTIFIED FOR FABRICATION\")=\"X\"\nElse \niProperties.Value(\"Custom\", \"CERTIFIED FOR FABRICATION\")=\"\"\nEnd If\n\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Save idw as ipt property value\n                    ", "solution": ["If ThisApplication.ActiveDocument.DocumentType = DocumentTypeEnum.kDrawingDocumentObject Then\nDim oDoc As DrawingDocument = ThisApplication.ActiveDocument\n                Dim oDocName As String = Nothing\n                If oDoc.FileSaveCounter = 0 And odoc.fullfilename = \"\" Then\n                    If oDoc.ActiveSheet.DrawingViews.Count > 0 Then\n                        Dim oRefDoc As Document = oDoc.ActiveSheet.DrawingViews.Item(1).ReferencedDocumentDescriptor.ReferencedDocument\n                        Dim oDTP As PropertySet = oRefDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n                        oDocName = oDTP.Item(\"Drawing_Name\").Value\n                        If Not String.IsNullOrEmpty(oDocName) Then\n                            oDoc.FullFileName = oDocName & \".idw\"\n\n                        End If\n                    End If\n                End If\nEnd If"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Drawing Sheet Revision - VB.net\n                    ", "solution": [], "author": "Martin60"},
{"created at": [], "solution Title": "\n                        Re: iLogic - Handling Errors?\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic: using a rule to choose a rule\n                    ", "solution": [], "author": "BMiller63"},
{"created at": [], "solution Title": "\n                        Re: Suppress based off of a reference parameter\n                    ", "solution": [], "author": "BMiller63"},
{"created at": [], "solution Title": "\n                        Re: Shrinkwrap using iLogic\n                    ", "solution": [], "author": "gatordanner"},
{"created at": [], "solution Title": "\n                        Re: multi-value list from excel sheet names?\n                    ", "solution": ["MultiValue", ".", "List", "(", "\"", "ring_size", "\"", ")", " ", "=", " ", "GoExcel", ".", "CellValues", "(", "\"", "excel_file_name.xlsm", "\"", ", ", "\"", "size_list", "\"", ", ", "\"", "A2", "\"", ", ", "\"\"", ")", "tempA1 = GoExcel.CellValue(\"ExcelSheetList.xlsx\", \"size_list\", \"A1\")\nwb = GoExcel.Application.ActiveWorkbook\nDim sheetNames as New ArrayList\nFor Each ws In wb.Worksheets\n\tsheetNames.Add(ws.Name)\nNext ws\n\nMultiValue.List(\"ring_size\") = sheetNames\n"], "author": "dtompsett"},
{"created at": [], "solution Title": "\n                        Re: iLogic Rule Timeout\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Mapping to inventor properties from content center issue with blank title\n                    ", "solution": [], "author": "Brojefj"},
{"created at": [], "solution Title": "\n                        Re: Design table to control several parts with a few different parameter values.\n                    ", "solution": [], "author": "jtylerbc"},
{"created at": [], "solution Title": "\n                        Re: ilogic rule to set colour with RGB values?\n                    ", "solution": ["Sub Main\n  SetPartColor(240, 200, 70)\nEnd Sub\n\nSub SetPartColor(r As Byte, g as Byte, b As Byte)\n  Dim partDoc As PartDocument = TryCast(ThisDoc.Document, PartDocument)\n  If (partDoc Is Nothing) Then\n     MessageBox.Show(\"This rule can only be run in a part document.\", \"iLogic\")\n\t Return\n  End If\n  Dim colorName As String = String.Format(\"R{0}_G{1}_B{2}\", r, g, b)\n  Dim styles As RenderStyles = partDoc.RenderStyles\n  Dim style As RenderStyle = FindStyle(styles, colorName)\n  If (style Is Nothing) Then\n'    Trace.WriteLine(\"-  Creating new style: \" & colorName)\n    style = CreateRgbStyle(styles, colorName, r, g, b)\n  End If\n  If (style IsNot Nothing) Then\n    partDoc.ActiveRenderStyle = style\n\tpartDoc.Update()\n  End If\nEnd Sub\n\nFunction FindStyle(styles As RenderStyles, name As String) As RenderStyle\n  For Each style As RenderStyle In styles\n    If (String.Equals(style.Name, name, StringComparison.OrdinalIgnoreCase)) Then\n\t   Return style\n\tEnd If\n  Next\n  Return Nothing\nEnd Function\n\nFunction CreateRgbStyle(styles As RenderStyles, colorName As String , r As Byte, g As Byte, b As Byte) As RenderStyle\n  Dim baseStyle As RenderStyle = FindStyle(styles, \"Green\")\n  If (baseStyle Is Nothing) Then Return Nothing\n  Dim newStyle As RenderStyle = baseStyle.Copy(colorName)\n  newStyle.SetAmbientColor(r, g, b)\n  newStyle.SetDiffuseColor(r, g, b)\n  Return newStyle\nEnd Function\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Assign Layers to Materials\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Feature.IsActive  quirk?\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: ilogic iproperties\n                    ", "solution": ["iProperties.Value(\"Custom\", \"Part Number\") = iProperties.Value(FileName, \"Custom\", \"Part Number\") "], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Multiple rules and itriggers...from a noob\n                    ", "solution": ["trigger = iTrigger0", "ChooseRule = InputRadioBox(\"Select a Rule\", \"Rule2\", \"Rule3\", ChooseRule, Title := \"iLogic Rules\")", "'Rule2 is True and Rule 3 is False", "if ChooseRule = True then", "iLogicVb.RunRule(\"Rule2\")", "else ", "iLogicVb.RunRule(\"Rule3\")", "end if"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Embedded Spreadsheets and iLogic\n                    ", "solution": ["MultiValue", ".", "List", "(", "\"", "Bohrbild_Oben", "\"", ")", "=", "GoExcel", ".", "CellValues", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "W25", "\"", ", ", "\"", "W35", "\"", ")", "i", "=", "GoExcel", ".", "FindRow", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "Ausf2", "\"", ",", "\"", "=", "\"", ",", "Bohrbild_Oben", ")", "MessageBox", ".", "Show", "(", "i", ", ", "Bohrbild_Oben", ")", "'", " obere Platte", "B1", "=", "GoExcel", ".", "CellValue", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "L", "\"", "&", "i", ")", "If", "Plattenanzahl", "=", "1", "Then", "B2", "=", "B6", "+", "2", "*", "B5", "Else", "B2", "=", "GoExcel", ".", "CellValue", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "M", "\"", "&", "i", ")", "B3", "=", "GoExcel", ".", "CellValue", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "N", "\"", "&", "i", ")", "B4", "=", "GoExcel", ".", "CellValue", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "O", "\"", "&", "i", ")", "B5", "=", "GoExcel", ".", "CellValue", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "P", "\"", "&", "i", ")", "B6", "=", "GoExcel", ".", "CellValue", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "Q", "\"", "&", "i", ")", "B7", "=", "GoExcel", ".", "CellValue", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "R", "\"", "&", "i", ")", "B10", "=", "GoExcel", ".", "CellValue", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "S", "\"", "&", "i", ")", "Zeichnung", "=", "GoExcel", ".", "CellValue", "(", "\"", "SSH_rev00.xls", "\"", ", ", "\"", "Tabelle1", "\"", ", ", "\"", "A", "\"", "&", "i", ")", "'", "Unter Platte zum Aufschrauben auf Grundplatte ", "F6", "=", "120", "mm", "F7", "=", "150", "mm", "F8", "=", "150", "mm", "F9", "=", "14.5", "mm", "F10", "=", "120", "mm", "'", "Extrusion", "HT", "=", "L\u00e4ngeHT", "-", "UPlatteDick"], "author": "TIMOHART"},
{"created at": [], "solution Title": "\n                        Re: Forcing Redraw / View Update\n                    ", "solution": [], "author": "rif_jochm"},
{"created at": [], "solution Title": "\n                        Re: Need to set multi-value parameter back to default\n                    ", "solution": ["If Launch_Excel = \"Yes\" Then\nDim oControlDef as ControlDefinition  = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppSelectNorthwestArrowCmd\")\noControlDef.Execute  ' start the default command (Select)\n\nLaunch_Excel = \"No\"\nRuleParametersOutput() ' assign the modified value to the parameter right away\n\nDim sheetName As String = ring_size\nnewExcelApp = CreateObject(\"Excel.Application\")\nnewExcelApp.Visible = True\n\nwb = newExcelApp.Workbooks.Open(IO.Path.Combine(\"X:\\Autodesk\\EVR Inventor Reference Files\\\", \"retaining_ring_specs.xlsm\"))\nwb.Sheets(sheetName).Activate \n\noControlDef  = ThisApplication.CommandManager.ControlDefinitions.Item(\"AppParametersCmd\")\noControlDef.Execute ' start the Parameters command\n\nEnd If\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: InventorWizards\n                    ", "solution": [], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: \"Copy Full Path\" of part to clipboard\n                    ", "solution": ["Public Sub FindDocumentByComponentOccurrence()\n    Dim oSelectSet As SelectSet\n    Set oSelectSet = ThisApplication.ActiveDocument.SelectSet\n    \n    If oSelectSet.Count = 1 Then\n        If TypeOf oSelectSet.Item(1) Is ComponentOccurrence Then\n            Dim strPath As String\n            strPath = oSelectSet.Item(1).Definition.Document.FullFileName\n            \n            MyData.SetText strPath\n            MyData.PutInClipboard\n            \n            MsgBox strPath & vbCrLf & vbCrLf & \"has been placed in your clipboard. Use Ctrl + V to paste.\"\n        Else\n            MsgBox \"This is not a ComponentOccurrence. Build case for this type.\"\n        End If\n        Exit Sub\n    Else\n        MsgBox \"Select 1 item.\"\n        \n        Exit Sub\n    End If\nEnd Sub"], "author": "sgt.pepper"},
{"created at": [], "solution Title": "\n                        Re: form events in Add-in\n                    ", "solution": [], "author": "alexejsommer"},
{"created at": [], "solution Title": "\n                        Re: View - Object Visibility for application\n                    ", "solution": [], "author": "sanjay.ramaswam"},
{"created at": [], "solution Title": "\n                        Re: Level Of Representation\n                    ", "solution": ["string fileName = textBoxFileName.Text;\nstring[] availableLods = m_oserver.FileManager.GetLevelOfDetailRepresentations(fileName);\nstring lodName = String.Empty;\nif (availableLods.Length > 4)\n{\n\tlodName = availableLods[4];\n\tfileName += \"<\" + lodName + \">\";\n}\nm_odocument = m_oserver.Open(fileName);\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Dimension a rectangle\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Why two forums & which one to choose??\n                    ", "solution": [], "author": "petercharles"},
{"created at": [], "solution Title": "\n                        Re: World to Screen Coordinate Conversion\n                    ", "solution": [], "author": "deanlupini"},
{"created at": [], "solution Title": "\n                        Re: Can't access iProperty values\n                    ", "solution": [], "author": "MikeGillam5072"},
{"created at": [], "solution Title": "\n                        Re: section arrows\n                    ", "solution": [], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: .iam viewer\n                    ", "solution": [], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Inventor.ComponentDefinition fails sometimes\n                    ", "solution": ["IV.ActiveDocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject OrElse IV.ActiveDocumentType = Inventor.DocumentTypeEnum.kPartDocumentObject", "Dim oDef as Inventor.ComponentDefinition\n\nIf IV.ActiveDocumentType = Inventor.DocumentTypeEnum.kAssemblyDocumentObject Then\n\n   oDef = CType(IV.ActiveDocument, Inventor.AssemblyDocument).ComponentDefinition\n\nElseIf IV.ActiveDocumentType = Inventor.DocumentTypeEnum.kPartDocumentObject Then\n\n   oDef = CType(IV.ActiveDocument, Inventor.PartDocument).ComponentDefinition\n\nEnd If\n\n\nIf oDef IsNot Nothing Then\n\n'Continue your stuff\n\nEnd If"], "author": "peter.townsend"},
{"created at": [], "solution Title": "\n                        Re: Add a seperator in context menu\n                    ", "solution": [], "author": "sanjay.ramaswam"},
{"created at": [], "solution Title": "\n                        Re: SaveAs Stp\n                    ", "solution": [], "author": "simonsson"},
{"created at": [], "solution Title": "\n                        Re: How to create a cartoon style \"ACME\" portable hole\n                    ", "solution": [], "author": "BMiller63"},
{"created at": [], "solution Title": "\n                        Re: Instaling The DeveloperTools\n                    ", "solution": [], "author": "Ruffen07"},
{"created at": [], "solution Title": "\n                        Re: Help with array\n                    ", "solution": [], "author": "NateBertram"},
{"created at": [], "solution Title": "\n                        Re: How to avoid all user prompts when running API in silent mode\n                    ", "solution": [], "author": "MikeGillam5072"},
{"created at": [], "solution Title": "\n                        Re: How to retrieve BOMQuantity.UnitQuantity\n                    ", "solution": ["Dim baseUnits As String = oCompDef.BOMQuantity.BaseUnits\nDim unitQuantity As String = oCompDef.BOMQuantity.UnitQuantity\nDim quantityType As BOMQuantityTypeEnum\nDim quantity As Object = Nothing\noCompDef.BOMQuantity.GetBaseQuantity(quantityType, quantity)\nIf (quantityType = BOMQuantityTypeEnum.kParameterBOMQuantity) Then\n", "\t", "Dim quantityParameter As Parameter = quantity\n\tDim parameterName As String = quantityParameter.Name\nElseIf (quantityType = BOMQuantityTypeEnum.kEachBOMQuantity) Then\n\t' quantity is Nothing\nEnd If\nDim evaluatedQuantity As Double = oCompDef.BOMQuantity.GetEvaluatedBaseQuantity(quantityType)\nIf (quantityType = BOMQuantityTypeEnum.kParameterBOMQuantity) Then\n", "\t", "' evaluatedQuantity will be the value of the quantityParameter\n", "ElseIf (quantityType = BOMQuantityTypeEnum.kEachBOMQuantity) Then\n", "\t", "' evaluatedQuantity will be 1.0\nEnd If"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: What's up with missing or messed up functionality (rant)\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Object reference not set to an instance of an object\n                    ", "solution": [], "author": "santiagodiaz"},
{"created at": [], "solution Title": "\n                        Re: Solid to Mid Plane surface converter\n                    ", "solution": [], "author": "dano0310"},
{"created at": [], "solution Title": "\n                        Re: A Loop to Substitute Variables in iLogic?\n                    ", "solution": ["For side = 1 To 2\n If (side = 1) Then\n   face_name = \"bs_face\"\n   flange_name = \"bs_flange\"\n ElseIf (side = 2) Then\n   face_name = \"hd_face\"\n   flange_name = \"hd_flange\"\n End If\n\n ' Insert your rule here.  Make the following text replacements:\n '  \"bs_face\" --> face_name \n '  \"bs_flange\" --> flange_name\n \nNext\n", "face_offset = Parameter(\"bs_flange_face\")", "Parameter(face_offset) = (part_oah / 2) + (Parameter(\"flange_bt.ipt\", \"thk\") / 2)"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Part sketch- dimension goes to diagonal corners of rect\n                    ", "solution": ["--- Points ---\n 1            0,0           0,0\n 2            -3,0          -2,0\n 3            3,0           2,0\n 4            3,0           -2,0\n 5            -3,0          2,0\n 6            3,0           -2,0\n 7            -3,0          2,0\n--- Lines ---\n 1            -3,0          -2,0\n              3,0           -2,0\n 2            3,0           -2,0\n              3,0           2,0\n 3            3,0           2,0\n              -3,0          2,0\n 4            -3,0          2,0\n              -3,0          -2,0\n 5            3,0           -2,0\n              -3,0          2,0", "Private Sub Statistics()\n\n   Dim oPartDoc As PartDocument\n   Set oPartDoc = ThisApplication.ActiveDocument\n   Dim oCompDef As PartComponentDefinition\n   Set oCompDef = oPartDoc.ComponentDefinition\n   \n   Dim oSketch As PlanarSketch\n   Set oSketch = oCompDef.Sketches.Item(oCompDef.Sketches.count)\n   \n   Dim oSketchPoints As SketchPoints\n   Set oSketchPoints = oSketch.SketchPoints\n   Dim oSketchLines As SketchLines\n   Set oSketchLines = oSketch.SketchLines\n   \n   Dim oP As SketchPoint\n   Dim oL As SketchLine\n   Dim x1 As Double, y1 As Double, x2 As Double, y2 As Double\n   Dim i As Integer\n\n   \n   Debug.Print \"--- Points ---\"\n   For i = 1 To oSketchPoints.count\n      Set oP = oSketchPoints.Item(i)\n      x1 = oP.Geometry.X\n      y1 = oP.Geometry.Y\n      Debug.Print i, FormatNumber(x1, 1), FormatNumber(y1, 1)\n   Next i\n   \n   Debug.Print \"--- Lines ---\"\n   For i = 1 To oSketchLines.count\n      Set oL = oSketchLines.Item(i)\n      x1 = oL.Geometry.StartPoint.X\n      y1 = oL.Geometry.StartPoint.Y\n      x2 = oL.Geometry.EndPoint.X\n      y2 = oL.Geometry.EndPoint.Y\n\n      Debug.Print i, FormatNumber(x1, 1), FormatNumber(y1, 1)\n      Debug.Print , FormatNumber(x2, 1), FormatNumber(y2, 1)\n   Next i\n\nEnd Sub", "Sub InitialRectangle_2()\n\nDim oPartDoc As PartDocument 'for the active part\nDim oCompDef As PartComponentDefinition\nDim oSketch As PlanarSketch\nDim oLines(1 To 4) As SketchLine 'each of the 4 sides of the rectangle\nDim oRectLines As SketchEntitiesEnumerator\nDim count As Integer\nDim XVal As Integer\nDim YVal As Integer\nDim bFoundOrigin As Boolean\nDim oTG As TransientGeometry\nDim oDiagonalLine As SketchLine 'the diagonal line in the rectangle\nDim oOriginPoint As SketchPoint\nDim oOrigin As WorkPoint\nDim Dimline1 As TwoPointDistanceDimConstraint\nDim Dimline2 As TwoPointDistanceDimConstraint\nDim oTrans As Transaction\nSet oPartDoc = ThisApplication.ActiveDocument\n\nIf oPartDoc.SketchActive = True Then 'check to ensure you have a sketch active\n   Set oTrans = ThisApplication.TransactionManager.StartTransaction(ThisApplication.ActiveDocument, \"Create Initial Rectangle\")\n   Set oCompDef = oPartDoc.ComponentDefinition ' Set a reference to the component definition.\n   Set oSketch = oCompDef.Sketches.Item(oCompDef.Sketches.count)\n   XVal = 3 'set this to half the horizontal size you want the rectangle to be\n   YVal = 2 'set this to half the vertical size you want the rectangle to be\n   bFoundOrigin = False\n   Set oTG = ThisApplication.TransientGeometry\n\n   With oSketch.SketchLines\n      Set oRectLines = .AddAsTwoPointRectangle( _\n            oTG.CreatePoint2d(-XVal, -YVal), _\n            oTG.CreatePoint2d(XVal, YVal))\n      Set oDiagonalLine = .AddByTwoPoints( _\n            oRectLines(1).EndSketchPoint, _\n            oRectLines(3).EndSketchPoint)\n      oDiagonalLine.Construction = True\n   End With\n   \n   With oSketch.DimensionConstraints\n      Set Dimline1 = .AddTwoPointDistance( _\n         oRectLines(3).StartSketchPoint, _\n         oRectLines(3).EndSketchPoint, _\n         DimensionOrientationEnum.kAlignedDim, _\n         oTG.CreatePoint2d(0, YVal + 1))\n      Set Dimline2 = .AddTwoPointDistance( _\n         oRectLines(4).StartSketchPoint, _\n         oRectLines(4).EndSketchPoint, _\n         DimensionOrientationEnum.kAlignedDim, _\n         oTG.CreatePoint2d(-XVal - 1, 0))\n   End With\n         \n   'try to find if the origin has been projected already\n   If oSketch.SketchPoints.count > 0 Then\n      For count = 1 To oSketch.SketchPoints.count\n         If oSketch.SketchPoints(count).Geometry.X = 0 And _\n            oSketch.SketchPoints(count).Geometry.Y = 0 Then\n            'if you have found the origin, keep a ref to it\n            bFoundOrigin = True\n            Exit For\n         End If\n      Next\n   End If\n   If bFoundOrigin = False Then\n      Set oOrigin = oCompDef.WorkPoints.Item(1)\n      Set oOriginPoint = oSketch.AddByProjectingEntity(oOrigin)\n      With oSketch.GeometricConstraints\n         Call .AddMidpoint(oOriginPoint, oDiagonalLine)\n      End With\n   Else\n      With oSketch.GeometricConstraints\n          Call .AddMidpoint(oSketch.SketchPoints(count), _\n                            oDiagonalLine)\n      End With\n   End If\n\n   oTrans.End\nElse\n   MsgBox \"There is no sketch active. Operation Terminated.\", vbCritical\nEnd If\n\nEnd Sub '~~~~~", "--- Points ---\n 1            0,0           0,0\n 2            -3,0          -2,0\n 3            3,0           2,0\n 4            3,0           -2,0\n 5            -3,0          2,0\n--- Lines ---\n 1            -3,0          -2,0\n              3,0           -2,0\n 2            3,0           -2,0\n              3,0           2,0\n 3            3,0           2,0\n              -3,0          2,0\n 4            -3,0          2,0\n              -3,0          -2,0\n 5            3,0           -2,0\n              -3,0          2,0"], "author": "ALink"},
{"created at": [], "solution Title": "\n                        Re: Insert part in assembly code fails please help\n                    ", "solution": [" oDef = oApp.CommandManager.ControlDefinitions.Item(\"Assem\u200bblyPlaceComponentCmd\")"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Deploy my Add-In: it doesn't register with Inno installer\n                    ", "solution": [], "author": "krieg"},
{"created at": [], "solution Title": "\n                        Re: Req: Standard iParameter values for iLogic\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: How can I get all the holes in a Part/Assembly ?\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic LevelofDetail\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Crop Drawing view through API\n                    ", "solution": ["Sub ", "CreateCropView()\n    ", "Dim", " oDoc As DrawingDocument\n    ", "Set", " oDoc = ThisApplication.ActiveDocument\n    \n    ", "Dim", " oSheet ", "As", " Sheet\n    ", "Set", " oSheet = oDoc.Sheets(1)\n    \n    ", "Dim", " oDrawingView ", "As", " DrawingView\n    ", "Set", " oDrawingView = oSheet.DrawingViews(1)\n    \n    ", "Dim", " oSk ", "As", " DrawingSketch\n    ", "Set", " oSk = oDrawingView.Sketches.Add\n    \n    oSk.Edit\n    oSk.SketchCircles.AddByCenterRadius ThisApplication.TransientGeometry.CreatePoint2d(0, 0), 2\n    oSk.ExitEdit\n    \n    Me.SelectSet.Select oSk\n    \n    ", "Dim", " oDef ", "As", " ControlDefinition\n    ", "Set", " oDef = ThisApplication.CommandManager.ControlDefinitions(\"DrawingCropViewCmd\")\n    oDef.Execute\n    \n", "End Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: ilogic: table help\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Move Ordinate Dimension text\n                    ", "solution": ["Sub MoveOrdinateDimTextPosition()\n    Dim oSheet As Sheet\n    Set oSheet = Me.Sheets(1)\n    \n    Dim oDim As OrdinateDimension\n    For Each oDim In oSheet.DrawingDimensions.OrdinateDimensions\n         \n        Dim oPos As Point2d\n        Set oPos = oDim.Text.Origin\n        \n        oPos.Y = oPos.Y + 0.2\n        \n        ", "oDim.Text.Origin = oPos\n", "    Next\n\nEnd Sub", "Set oPt = OrdDim.JogPointOne\noPt.Y = oPt.Y + 1\n", "OrdDim.JogPointOne = oPt"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: How to save all changes via macro?\n                    ", "solution": ["    ", "' This is the document being saved\n", "    ", "Dim ", "oDoc ", "As", " Document\n    ", "Set", " oDoc = ThisApplication.ActiveDocument\n    \n    ", "Dim", " oRefDoc ", "As", " Document\n    ", "Dim", " oRefDocDesc As DocumentDescriptor\n    \n    ", "' make all the referenced documents dirty", "\n   ", " For Each", " oRefDocDesc ", "In", " oDoc.ReferencedDocumentDescriptors\n        ", "Set", " oRefDoc = oRefDocDesc.ReferencedDocument\n        oRefDoc.Dirty = ", "True", "\n    ", "Next", "\n\n    ' Save the document and its dependents.\n    ", "Call", " oDoc.Save2(", "True", ")"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Drawing Geometry Intent from 3D model coordinates.\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Parameter strings\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: iLogic: Check if Component is there before using IsActive?\n                    ", "solution": ["Try\n'try to set the component state\nComponent.IsActive(\"non existent part\") = True\nCatch\n'catch error and assume the part does not exist\nMsgBox(\"this part does not exist\")\nEnd Try"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: How to create Addin For Auto Desk Inventor 2011?\n                    ", "solution": [], "author": "scottmoyse"},
{"created at": [], "solution Title": "\n                        Re: Create a new Inventor DWG drawing using VB.NET\n                    ", "solution": [], "author": "Dennis.Ossadnik"},
{"created at": [], "solution Title": "\n                        Re: Add browser pane tutorial problem\n                    ", "solution": ["Set oRsc = oRscs.Add(\"Test\", 1, Nothing)"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iproperty in title block\n                    ", "solution": [], "author": "Dennis.Ossadnik"},
{"created at": [], "solution Title": "\n                        Re: Open Parameter Dialog box with code\n                    ", "solution": [], "author": "barbara.han"},
{"created at": [], "solution Title": "\n                        Re: Save PDF using iLogic and name after revision number?\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: Create a workplane from a face in an assembly document\n                    ", "solution": ["Dim app As Inventor.Application = GetObject(, \"Inventor.Application\")           \nDim doc As Inventor.AssemblyDocument = app.ActiveDocument           \nDim occ As Inventor.ComponentOccurrence = doc.ComponentDefinition.Occurrences(1)           \nDim occ2 As Inventor.ComponentOccurrence = doc.ComponentDefinition.Occurrences(2)\n\nDim faceProxy As Inventor.FaceProxy = occ.SurfaceBodies(1).Faces(58)\nDim wp As Inventor.WorkPlane = occ2.Definition.WorkPlanes.Item(\"XZ Plane\")\nDim wpProxy As Inventor.WorkPlaneProxy = Nothing\nocc2.CreateGeometryProxy(wp, wpProxy)\n\ndoc.ComponentDefinition.Constraints.AddFlushConstraint(wpProxy, faceProxy, \"0\"\"\")"], "author": "planglais"},
{"created at": [], "solution Title": "\n                        Re: My First Add-In - Can't define ButtonDefinition\n                    ", "solution": [], "author": "cean_au"},
{"created at": [], "solution Title": "\n                        Re: I-Logic quotes\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Loading excel data into a form\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Help With Automatic PDF Macro\n                    ", "solution": ["Private Sub ReadRevision()\n\nDim oDrgDoc As DrawingDocument\nSet oDrgDoc = ThisApplication.ActiveDocument\n\nDim SIPropSet As PropertySet\nSet SIPropSet = oDrgDoc.PropertySets.Item(\"Summary Information\")\nDim rev As String\nrev = SIPropSet.ItemByPropId(kRevisionSummaryInformation).Value\nMsgBox (\"the current revision is : \" & rev)\nEnd Sub\n\n"], "author": "Mario-Villada"},
{"created at": [], "solution Title": "\n                        Re: Is there any way to remove all rules after you save part?\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: How to create a toolbar/button with VBA\n                    ", "solution": [], "author": "CadUser46"},
{"created at": [], "solution Title": "\n                        Re: Field Precision Control\n                    ", "solution": ["For Each sheetX As sheet In ThisDrawing.Document.Sheets\n  For Each drawingDim as DrawingDimension In sheetX.DrawingDimensions\n\t Dim formattedText As String = drawingDim.Text.FormattedText\n\t If (formattedText.Contains(\" Precision='\")) Then\n\t   Dim newText As String = formattedText\n\t   If (DimPrecision = 2) Then\n\t     newText = formattedText.Replace(\" Precision='3'\", \" Precision='2'\")\n\t   ElseIf (DimPrecision = 3) Then\n\t     newText = formattedText.Replace(\" Precision='2'\", \" Precision='3'\")\n\t   End If\n\t   If (newText <> formattedText) Then\n\t      drawingDim.Text.FormattedText = newText\n\t   End If\n\t End If\n  Next\nNext\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic underconstrained sketches\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Save As DWG Error\n                    ", "solution": [], "author": "Mike_Maenpaa"},
{"created at": [], "solution Title": "\n                        Re: ilogic rule to copy iprops from model to idw\n                    ", "solution": [], "author": "swordmaster"},
{"created at": [], "solution Title": "\n                        Re: using iLogic to automatically change Title Block size based on Border size\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Read workpoints and parts used to add dimension\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Disabling ilogic controls\n                    ", "solution": [], "author": "meck"},
{"created at": [], "solution Title": "\n                        Re: Surface Texture Control\n                    ", "solution": ["dim oSheet as Sheet\noSheet = ThisApplication.Activedocument.ActiveSheet\ndim SurfSyms as SurfaceTextureSymbols\nSurfSyms = oSheet.SurfaceTextureSymbols\nDim SurfSym as SurfaceTextureSymbol\nfor each SurfSym in SurfSyms \nmsgbox(SurfSym.MaximumRoughness)\nnext"], "author": "Mario-Villada"},
{"created at": [], "solution Title": "\n                        Re: Using material iProperties in ilogic forms\n                    ", "solution": [], "author": "mlouisiana"},
{"created at": [], "solution Title": "\n                        Re: Problem to add constraint between EdgeProxy and WorkPointProxy\n                    ", "solution": [], "author": "TerryWen"},
{"created at": [], "solution Title": "\n                        Re: Clear Multivalue parameters\n                    ", "solution": ["'", "Clear the current values from the multivalue parameter", "Dim", "MtrManufactures", "As", "New", "ArrayList", "MultiValue", ".", "List", "(", "\"", "MotorManufacture", "\"", ")", "=", "MtrManufactures", "'", "Load the MultiValue parameter MotorManufacture with all the manufactures in the spreadsheet", "MtrManufactures", "=", "GoExcel", ".", "CellValues", "(", "DBLocation", "&", "\"", "Vendor Parts.xlsx", "\"", " , ", "\"", "Motor", "\"", ", ", "\"", "C2", "\"", ", ", "\"\"", ")", "Dim", "Manufactures", "As", "New", "ArrayList", "'", "Loop through the MtrManufactures and copy unique names into Manufactures", "For", "Each", "Var", "In", "MtrManufactures", " ", "For", "Each", "Man", "In", "Manufactures", " ", "If", "Var", "=", "Man", "Then", "Goto", "SkipManEntry", " ", "Next", " ", "Manufactures", ".", "add", "(", "Var", ")", "SkipManEntry", ":", " ", "Next", "MultiValue", ".", "List", "(", "\"", "MotorManufacture", "\"", ")", "=", "Manufactures"], "author": "meck"},
{"created at": [], "solution Title": "\n                        Re: Inventor  2011 V 2012\n                    ", "solution": ["    Dim oActiveObj As Object\n    Set oActiveObj = ThisApplication.ActiveEditObject\n    \n    If oActiveObj.Type = kPlanarSketchObject Then\n        oActiveObj.ExitEdit\n    End If"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: VBA -> C#: Get me the scalestring!\n                    ", "solution": [], "author": "jeff.pek"},
{"created at": [], "solution Title": "\n                        Re: iLogic Forms Picture Folder?\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Automatically Gather Custom iProperties\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Simple view label text change.... wont work?\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Can't load content center when I use my own add-in with a SQLite connection\n                    ", "solution": [], "author": "wpepping"},
{"created at": [], "solution Title": "\n                        Re: Select Set\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Translator AddIn with Apprentice?\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Delete a workaxis using iLogic\n                    ", "solution": ["Public", "Sub", "DeleteAxis", "(", "AxisName", "As", "String", ")", " ", "'", "This function will delete the workaxis from the part when given the name of the workaxis", " ", "On", "Error", "Goto", "ErrHandler", " ", "Dim", "oPart", "As", "PartDocument", "'", "PartComponentDefinition", "oPart", "=", "ThisDoc", ".", "Document", " ", "Dim", "oAsmCompDef", "As", "PartComponentDefinition", " ", "oAsmCompDef", "=", "oPart", ".", "ComponentDefinition", " ", "Dim", "oPartAxis", "As", "WorkAxis", " ", "oPartAxis", "=", "oAsmCompDef", ".", "WorkAxes", ".", "Item", "(", "AxisName", ")", " ", "oPartAxis", ".", "Delete", "ErrHandler", ":", " ", "oAsmCompDef", "=", "Nothing", " ", "End Sub"], "author": "meck"},
{"created at": [], "solution Title": "\n                        Re: New Parameter with Ilogic\n                    ", "solution": [], "author": "skyngu"},
{"created at": [], "solution Title": "\n                        Re: Can iLogic access the comment field of the model parameters?\n                    ", "solution": ["myComment = Parameter.Param(\"PDF\").Comment\nMessageBox.Show(myComment, \"iLogic\")"], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Unexpected Behavior with Transaction\n                    ", "solution": ["Public Sub New(ByVal ThisApp As Inventor.Application)\n\n        ' This call is required by the designer.\n        InitializeComponent()\n\n        ' Initialize the class variables.\n        Try\n            invApp = ThisApp\n            createSlotTransaction = invApp.TransactionManager.StartTransaction(invApp.ActiveDocument, \"CreateSlot\")\n            invDocs = invApp.Documents\n            invPartDoc = invDocs.Item(1)\n            invPartCompDef = invPartDoc.ComponentDefinition\n            transientGeometry = invApp.TransientGeometry\n            invClientGraphics = invPartCompDef.ClientGraphicsCollection.Add(\"ClientGraphics\")\n        Catch ex As Exception\n            MessageBox.Show(ex.ToString)\n        End Try\n\n    End Sub"], "author": "TimClift"},
{"created at": [], "solution Title": "\n                        Re: Add weld symbols on a drawingview through VBA\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Looking for Inventor 2012 iLogic Code to change a Drawing Layer Color\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Is it possible to change the camera for a drawing view?\n                    ", "solution": [], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: How to prepare Visual Studio 2010 Express for use with Inventor 2012?\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: ilogic user parameters need help\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: New to Ilogic can this be made shorter\n                    ", "solution": ["   'if State_1 = True then features xxx_Pos1 are active\n   ' and vise versa\n   Dim State_1 As Boolean _\n      = (Roller_Position = \"Pos_1\") Or _\n        (Roller_Position = \"Pos_1,2\") Or _\n        (Roller_Position = \"Pos_1,3\") Or _\n        (Roller_Position = \"Pos_1,2,3\")\n\n   Feature.IsActive(\"RRA_Pos1\") = State_1\n   Feature.IsActive(\"RRB_Pos1\") = State_1\n   Feature.IsActive(\"RRC_Pos1\") = State_1\n   Feature.IsActive(\"RRD_Pos1\") = State_1\n   Feature.IsActive(\"RRE_Pos1\") = State_1\n\n   'if State_2 = True then features xxx_Pos2 are active\n   ' and vise versa\n   Dim State_2 As Boolean _\n      = (Roller_Position = \"Pos_2\") Or _\n        (Roller_Position = \"Pos_1,2\") Or _\n        (Roller_Position = \"Pos_1,2,3\")\n\n   Feature.IsActive(\"RRA_Pos2\") = State_2\n   Feature.IsActive(\"RRB_Pos2\") = State_2\n   Feature.IsActive(\"RRC_Pos2\") = State_2\n   Feature.IsActive(\"RRD_Pos2\") = State_2\n   Feature.IsActive(\"RRE_Pos2\") = State_2\n\n   'if State_3 = True then features xxx_Pos3 are active\n   ' and vise versa\n   Dim State_3 As Boolean _\n      = (Roller_Position = \"Pos_3\") Or _\n        (Roller_Position = \"Pos_1,3\") Or _\n        (Roller_Position = \"Pos_1,2,3\")\n\n   Feature.IsActive(\"RRA_Pos3\") = State_3\n   Feature.IsActive(\"RRB_Pos3\") = State_3\n   Feature.IsActive(\"RRC_Pos3\") = State_3\n   Feature.IsActive(\"RRD_Pos3\") = State_3\n   Feature.IsActive(\"RRE_Pos3\") = State_3"], "author": "ALink"},
{"created at": [], "solution Title": "\n                        Re: Counting bends?\n                    ", "solution": ["Public Sub BendCountToIprop()\n  'Get the part doc and sheet metal component defn.  No error handling:\n  Dim oPartDocument As Inventor.PartDocument\n  Set oPartDocument = ThisApplication.ActiveDocument\n  Dim oSheetMetalComp As Inventor.SheetMetalComponentDefinition\n  Set oSheetMetalComp = oPartDocument.ComponentDefinition\n  \n  'Get the bend count\n  Dim iBendCount As Integer\n  iBendCount = oSheetMetalComp.Bends.Count\n  \n  'Get the custom property set\n  Dim oCustomProps As Inventor.PropertySet\n  Set oCustomProps = oPartDocument.PropertySets.Item(\"Inventor User Defined Properties\")\n  \n  'Define the name of the bend count iproperty name:\n  Dim sBendPropName As String\n  sBendPropName = \"Bend Count\"\n  \n  'See if we already have an iproperty for the bend count\n  Dim oBendProp As Inventor.Property\n  Dim oProp As Inventor.Property\n  For Each oProp In oCustomProps\n    If oProp.Name = sBendPropName Then\n      'We already have an iproperty, we just need to write the new value\n      Set oBendProp = oProp\n      oBendProp.Value = iBendCount\n      Exit Sub\n    End If\n  Next oProp\n  \n  'We don't have an iproperty, so we create it and set its value\n  If oBendProp Is Nothing Then Set oBendProp = oCustomProps.Add(iBendCount, sBendPropName)\nEnd Sub"], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: Renumber Balloons for iLogic\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: How to customize the ribbon in VBA?\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Suppress Pattern Occurrence Element with Macro or API?\n                    ", "solution": ["Dim ", "oPartDoc ", "as ", "PartDocument", " ", "oPartDoc ", "= ", "ThisApplication", ".", "ActiveDocument", " ", "Dim ", "oPattern ", "As ", "CircularPatternFeature", " ", "oPattern ", "= ", "oPartDoc", ".", "ComponentDefinition", ".", "Features", ".", "CircularPatternFeatures", ".", "Item", "(", "3", ")", " ", "oPattern", ".", "PatternElements", ".", "Item", "(", "4", ")", ".", "Suppressed", "=", "True", " ", "oPartDoc", ".", "update"], "author": "stang_shane"},
{"created at": [], "solution Title": "\n                        Re: Edit AutoCAD attributes\n                    ", "solution": ["\u00a0\u00a0\u00a0 Public Shared Sub SaveAttributes(ByVal strFieldVaule() As String, ByVal strFieldName() As String, ByRef invApp As Inventor.Application)", "\u00a0\u00a0\u00a0\u00a0\u00a0 Dim myBlockRef As AcadBlockReference", "\u00a0\u00a0\u00a0\u00a0\u00a0 Dim i As Short", "\u00a0\u00a0\u00a0\u00a0\u00a0 Dim h As Short", "\u00a0\u00a0\u00a0\u00a0\u00a0 Dim myAttributes As Object", "\u00a0\u00a0\u00a0\u00a0\u00a0 Dim invDoc As DrawingDocument", "\u00a0\u00a0\u00a0\u00a0\u00a0 Dim acadDoc As AcadDatabase", "\u00a0\u00a0\u00a0\u00a0\u00a0 invDoc = invApp.ActiveDocument", "\u00a0\u00a0\u00a0\u00a0\u00a0 acadDoc = invDoc.ContainingDWGDocument", "\u00a0\u00a0\u00a0\u00a0\u00a0 For Each Entity In acadDoc.PaperSpace", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 If TypeOf Entity Is AcadBlockReference Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 myBlockRef = Entity", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Select Case myBlockRef.Name", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Case \"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"P0\", \"P1\", \"P2\", \"P3\", \"P4\"", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 myAttributes = Entity.GetAttributes", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 For i = LBound(myAttributes) To UBound(myAttributes)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 For h = LBound(strFieldName) To UBound(strFieldName)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 If strFieldName(h) = myAttributes(i).TagString Then", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 myAttributes(i).TextString = strFieldVaule(h)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 End If", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Next", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Next i", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 End Select", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 End If", "\u00a0\u00a0\u00a0\u00a0\u00a0 Next", "\u00a0\u00a0\u00a0\u00a0\u00a0 invDoc.Update()", "\u00a0\u00a0\u00a0 End Sub"], "author": "VidarDK"},
{"created at": [], "solution Title": "\n                        Re: change active drawing standard with ilogic\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Parameters ExpressionList\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: (iLogic ) Automatic Update Flat Pattern Extents\n                    ", "solution": [], "author": "xiaoyan.qi"},
{"created at": [], "solution Title": "\n                        Re: Create a Boolean Parameter\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Scale to iproperty\n                    ", "solution": [" \nPublic Sub Main()\n  On Error Resume Next\n  'Get the drawing document\n  Dim oDrawingDoc As Inventor.DrawingDocument\n  oDrawingDoc = ThisApplication.ActiveDocument\n  'Dim oErrResponse As VbMsgBoxResult\n  If Err.number <> 0 Then\n    MsgBox(\"Active document must be a drawing\", vbExclamation, \"Error\")\n    Exit Sub\n  End If\n  \n  'Get the first sheet\n  Dim oSheet As Inventor.Sheet\n  oSheet = oDrawingDoc.Sheets.Item(1)\n  \n  'Get the first view\n  Dim oView As Inventor.DrawingView\n  oView = oSheet.DrawingViews.Item(1)\n  If Err.number <> 0 Then\n    MsgBox(\"Drawing has no views\", vbExclamation, \"Error\")\n    Exit Sub\n  End If\n  \n  'Get the view scale string\n  Dim sViewScale As String\n  sViewScale = oView.ScaleString\n  \n  'Get the custom propertyset\n Dim oCustomPropSet As Inventor.PropertySet\n oCustomPropSet = oDrawingDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n  \n  'Get the \"Scale\" custom iproperty.  If it doesn't exist, we'll create it\n  Dim oScaleProp As Inventor.Property\n  oScaleProp = oCustomPropSet.Item(\"Scale\")\n  If Err.number <> 0 Then\n  oScaleProp = oCustomPropSet.Add(\"\", \"Scale\")\n  End If\n  oScaleProp.Value = sViewScale\n  \n  'Update the drawing.  This will update the title block scale\n  oDrawingDoc.Update\nEnd Sub"], "author": "PACDrafting"},
{"created at": [], "solution Title": "\n                        Re: Inventor API, Create Dimension from 2 Workpoints in an IDW\n                    ", "solution": ["Public Sub DimBtwnWorkpoints()\n  'Creates a dimension between two work points\n  'Active document is inventor drawing\n  'Active sheet has view(s)\n  'First view is of assembly\n  'First component occurrence of assembly is part\n  'Part has two work points\n  'Dimension will be created between these two work points\n  \n  Dim oDrawingDocument As Inventor.DrawingDocument\n  Set oDrawingDocument = ThisApplication.ActiveDocument\n  \n  Dim oSheet As Inventor.Sheet\n  Set oSheet = oDrawingDocument.ActiveSheet\n  \n  Dim oView As Inventor.DrawingView\n  Set oView = oSheet.DrawingViews.Item(1)\n  \n  Dim oAssemblyDoc As Inventor.AssemblyDocument\n  Set oAssemblyDoc = oView.ReferencedDocumentDescriptor.ReferencedDocument\n  \n  'Get the first component occurrence of the assembly\n  Dim oComponentOcc As Inventor.ComponentOccurrence\n  Set oComponentOcc = oAssemblyDoc.ComponentDefinition.Occurrences.Item(1)\n  Dim oPartDocument As Inventor.PartDocument\n  Set oPartDocument = oComponentOcc.Definition.Document\n  \n  'Get the first two work points (WorkPoints.Item(1) is the origin)\n  Dim oWorkPoint1 As Inventor.WorkPoint\n  Dim oWP2 As Inventor.WorkPoint\n  Set oWorkPoint1 = oPartDocument.ComponentDefinition.WorkPoints.Item(2)\n  Set oWP2 = oPartDocument.ComponentDefinition.WorkPoints.Item(3)\n  \n  'Create a proxy for the two work points\n  Dim oWorkPointProx1 As Inventor.WorkPointProxy\n  Dim oWorkPointProx2 As Inventor.WorkPointProxy\n  oComponentOcc.CreateGeometryProxy oWorkPoint1, oWorkPointProx1\n  oComponentOcc.CreateGeometryProxy oWP2, oWorkPointProx2\n  \n  'Include the work points in the drawing view\n  oView.SetIncludeStatus oWorkPointProx1, True\n  oView.SetIncludeStatus oWorkPointProx2, True\n  \n  'Now we need to find the two centermarks that represent the work point proxies\n  Dim oCenterMark1 As Inventor.Centermark\n  Dim oCenterMark2 As Inventor.Centermark\n  Dim oCenterMark As Inventor.Centermark\n  For Each oCenterMark In oSheet.Centermarks\n    If oCenterMark.Attached Then\n      If oCenterMark.AttachedEntity Is oWorkPointProx1 Then\n        Set oCenterMark1 = oCenterMark\n      ElseIf oCenterMark.AttachedEntity Is oWorkPointProx2 Then\n        Set oCenterMark2 = oCenterMark\n      End If\n    End If\n  Next\n  \n  'From the two work points, we create the geometry intent\n  Dim oGeomIntent1 As Inventor.GeometryIntent\n  Dim oGeomIntent2 As Inventor.GeometryIntent\n  Set oGeomIntent1 = oSheet.CreateGeometryIntent(oCenterMark1, Inventor.kPoint2dIntent)\n  Set oGeomIntent2 = oSheet.CreateGeometryIntent(oCenterMark2, Inventor.kPoint2dIntent)\n  \n  'Create a point for the text\n  Dim oTextPoint As Inventor.Point2d\n  Set oTextPoint = ThisApplication.TransientGeometry.CreatePoint2d()\n  oTextPoint.X = (oGeomIntent1.PointOnSheet.X + oGeomIntent2.PointOnSheet.X) / 2\n  oTextPoint.Y = (oGeomIntent1.PointOnSheet.Y) + 1\n  \n  'Create the dimension\n  Call oSheet.DrawingDimensions.GeneralDimensions.AddLinear(oTextPoint, oGeomIntent1, oGeomIntent2)\n  \n  'For extra credit, hide the work points\n  oCenterMark1.Visible = False\n  oCenterMark2.Visible = False\nEnd Sub\n\n"], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: Line + ExtrudeFeatures.AddByDistanceExtent VB.net or vba\n                    ", "solution": ["    Dim oProfile As Profile\n    Set oProfile = oSketch.Profiles.AddForSurface(oSketchLine)"], "author": "mario.lung"},
{"created at": [], "solution Title": "\n                        Re: set Sketch to reuse + VB.net or VBA\n                    ", "solution": [], "author": "xiaoyan.qi"},
{"created at": [], "solution Title": "\n                        Re: Looking for help in \"formatting\" iLogic Code\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        Re: Control visibility of parts in darwing view\n                    ", "solution": ["Private Sub Test_SubAssemblySketches()\n\n  Dim oAssyDoc As AssemblyDocument\n  Set oAssyDoc = ThisApplication.ActiveDocument\n\n  Dim oAssyDef As AssemblyComponentDefinition\n  Set oAssyDef = oAssyDoc.ComponentDefinition\n  \n  'toggle visibility of sketches in the main assembly\n  Dim oSk As Sketch\n  For Each oSk In oAssyDef.Sketches\n    oSk.Visible = Not oSk.Visible\n  Next\n  \n  'process all subassemblies\n  Dim oOcc As ComponentOccurrence\n  For Each oOcc In oAssyDef.Occurrences\n    If oOcc.Definition.Type = kAssemblyComponentDefinitionObject Then\n      Dim oDef As AssemblyComponentDefinition\n      Set oDef = oOcc.Definition\n      'toggle visibility of sketches in subassemblies\n      Dim oSkProxy As PlanarSketchProxy\n      For Each oSk In oDef.Sketches\n        Call oOcc.CreateGeometryProxy(oSk, oSkProxy)\n        oSkProxy.Visible = Not oSkProxy.Visible\n      Next\n    End If\n  Next 'oOcc\n  \nEnd Sub "], "author": "Vladimir.Ananye"},
{"created at": [], "solution Title": "\n                        Re: Component part feature suppression\n                    ", "solution": [], "author": "montylowe"},
{"created at": [], "solution Title": "\n                        Re: iLogic \"copy to buffer code\"\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: Custom Property Format in iLogic\n                    ", "solution": ["Dim", "oPartDoc", "As", "PartDocument", " ", "oPartDoc", "=", "ThisApplication", ".", "ActiveDocument", " ", "Dim", "oParameter", "As", "Parameter", " ", "Dim", "oFormat", "As", "CustomPropertyFormat", " ", " ", "For", "Each", "oParameter", "In", "oPartDoc", ".", "ComponentDefinition", ".", "Parameters", ".", "UserParameters", " ", " ", "oFormat", "=", "oParameter", ".", "CustomPropertyFormat", " ", " ", "oParameter", ".", "ExposedAsProperty", "=", "True", " ", "oFormat", ".", "PropertyType", "=", "Inventor", ".", "CustomPropertyTypeEnum", ".", "kTextPropertyType", " ", "oFormat", ".", "Precision", "=", "Inventor", ".", "CustomPropertyPrecisionEnum", ".", "kTwoDecimalPlacesPrecision", " ", "oFormat", ".", "Units", "=", "\"", "in", "\"", " ", "oFormat", ".", "ShowUnitsString", "=", "True", " ", "oFormat", ".", "ShowLeadingZeros", "=", "True", " ", "oFormat", ".", "ShowTrailingZeros", "=", "False", "Next", "oParameter"], "author": "xiaoyan.qi"},
{"created at": [], "solution Title": "\n                        Re: BOM uppdate on drawing\n                    ", "solution": [], "author": "montylowe"},
{"created at": [], "solution Title": "\n                        Re: Launch External iLogic rule with VBA\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: Inventor Wizard won't install\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Derived Part\n                    ", "solution": ["Sub IncludeParameterForDerivedPart()\n    Dim oDoc As PartDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oDerivedPartDef As DerivedPartDefinition\n    Set oDerivedPartDef = oDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents(1).Definition\n    \n    ' say you want to include a parameter into the derived part\n    oDerivedPartDef.Parameters.Item(1).IncludeEntity = True\n    oDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents(1).Definition = oDerivedPartDef\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Conversion between iLogic and VBA\n                    ", "solution": [], "author": "nttoan8187"},
{"created at": [], "solution Title": "\n                        Re: Simple Style manager question\n                    ", "solution": [], "author": "gerhick"},
{"created at": [], "solution Title": "\n                        Re: VBA to Delete Combined Features\n                    ", "solution": ["For Each oCombinedFeature In oPartComp.Features.CombineFeatures\n"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: EMERGENCY! Document VBA Project Disappeared!!!\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: iLogic Hole Sizing\n                    ", "solution": [], "author": "swordmaster"},
{"created at": [], "solution Title": "\n                        Re: Activate/Suppress named Sketch in IDW\n                    ", "solution": [], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Error plugin DTCP iproperties\n                    ", "solution": [], "author": "CAD-One"},
{"created at": [], "solution Title": "\n                        Re: Drawing Automation with VBA\n                    ", "solution": ["Sub CreateLinearDiametricDim()\n    Dim oDoc As DrawingDocument\n    Set oDoc = ThisApplication.ActiveDocument\n    \n    Dim oCurve As DrawingCurve\n    Set oCurve = oDoc.SelectSet(1).Parent\n     \n    Dim oIntent1 As GeometryIntent, oIntent2 As GeometryIntent\n    Set oIntent1 = oDoc.ActiveSheet.CreateGeometryIntent(oCurve, kStartPointIntent)\n    Set oIntent2 = oDoc.ActiveSheet.CreateGeometryIntent(oCurve, kEndPointIntent)\n    \n    Dim oDim As LinearGeneralDimension\n    Dim oPt As Point2d\n    Set oPt = ThisApplication.TransientGeometry.CreatePoint2d(12, 12)\n    Set oDim = oDoc.ActiveSheet.DrawingDimensions.GeneralDimensions.AddLinear(oPt, oIntent1, oIntent2, kDiametricDimensionType)\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: write character \"\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: iProperty user format?\n                    ", "solution": [], "author": "marco.suurlant"},
{"created at": [], "solution Title": "\n                        Re: Place at Component Origin using VBA (API)?\n                    ", "solution": ["Public Sub AlignOccurrencesWithConstraints() \n    Dim assemblydoc As AssemblyDocument \n    Set assemblydoc = ThisApplication.ActiveDocument \n\n    ' Get the occurrences in the select set. \n    Dim occurrenceList As New Collection \n    Dim entity As Object \n    For Each entity In assemblydoc.SelectSet \n        If TypeOf entity Is ComponentOccurrence Then \n            occurrenceList.Add entity \n        End If \n    Next \n\n    If occurrenceList.Count < 2 Then \n        MsgBox \"At least two occurrences must be selected.\" \n        Exit Sub \n    End If \n\n    ' This assumes the first selected occurrence is the \"base\" \n    ' and will constrain the base workplanes of all the other parts \n    ' to the base workplanes of the first part. If there are \n    ' constraints on the other they end up being over constrained.\n\n    ' Get the planes from the base part and create proxies for them. \n    Dim baseOccurrence As ComponentOccurrence \n    Set baseOccurrence = occurrenceList.Item(1) \n\n    Dim BaseXY As WorkPlane \n    Dim BaseYZ As WorkPlane \n    Dim BaseXZ As WorkPlane \n    Call GetPlanes(baseOccurrence, BaseXY, BaseYZ, BaseXZ) \n\n    Dim constraints As AssemblyConstraints \n    Set constraints = assemblydoc.ComponentDefinition.constraints \n\n    ' Iterate through the other occurrences \n    Dim i As Integer \n    For i = 2 To occurrenceList.Count \n        Dim thisOcc As ComponentOccurrence \n        Set thisOcc = occurrenceList.Item(i) \n\n        ' Move it to the base occurrence so that if the base is \n        ' not fully constrained it shouldn't move when the flush \n        ' constraints are added. \n        thisOcc.Transformation = baseOccurrence.Transformation \n\n        ' Get the planes from the occurrence \n        Dim occPlaneXY As WorkPlane \n        Dim occPlaneYZ As WorkPlane \n        Dim occPlaneXZ As WorkPlane \n        Call GetPlanes(thisOcc, occPlaneXY, occPlaneYZ, occPlaneXZ) \n\n        ' Add the flush constraints. \n        Call constraints.AddFlushConstraint(BaseXY, occPlaneXY, 0) \n        Call constraints.AddFlushConstraint(BaseYZ, occPlaneYZ, 0) \n        Call constraints.AddFlushConstraint(BaseXZ, occPlaneXZ, 0) \n    Next \nEnd Sub \n\n' Utility function used by the AlignOccurrencesWithConstraints macro.\n' Given an occurrence it returns the base work planes that are in \n' the part or assembly the occurrence references.  It gets the \n' proxies for the planes since it needs the work planes in the \n' context of the assembly and not in the part or assembly document \n' where they actually exist. \nPrivate Sub GetPlanes(ByVal Occurrence As ComponentOccurrence, _  \n                      ByRef BaseXY As WorkPlane, _  \n                      ByRef BaseYZ As WorkPlane, _  \n                      ByRef BaseXZ As WorkPlane) \n    ' Get the work planes from the definition of the occurrence. \n    ' These will be in the context of the part or subassembly, not  \n    ' the top-level assembly, which is what we need to return. \n    Set BaseXY = Occurrence.Definition.WorkPlanes.Item(3) \n    Set BaseYZ = Occurrence.Definition.WorkPlanes.Item(1) \n    Set BaseXZ = Occurrence.Definition.WorkPlanes.Item(2) \n\n    ' Create proxies for these planes.  This will act as the work \n    ' plane in the context of the top-level assembly. \n    Call Occurrence.CreateGeometryProxy(BaseXY, BaseXY) \n    Call Occurrence.CreateGeometryProxy(BaseYZ, BaseYZ) \n    Call Occurrence.CreateGeometryProxy(BaseXZ, BaseXZ) \nEnd Sub"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Debug Print the Item\n                    ", "solution": [], "author": "PACDrafting"},
{"created at": [], "solution Title": "\n                        Re: How to turn on and autoresize origin planes, axes & center point?\n                    ", "solution": [], "author": "nmunro"},
{"created at": [], "solution Title": "\n                        Re: Windows 7, VB6, and Inventor.\n                    ", "solution": [], "author": "dano0310"},
{"created at": [], "solution Title": "\n                        Re: Part file sketch text height problem\n                    ", "solution": [], "author": "gerhick"},
{"created at": [], "solution Title": "\n                        Re: Add-In doesn't load in Inventor??\n                    ", "solution": ["@echo off\nsetlocal\nset InstDir=%~dp0\nset InstFlag=%1\nif /i \"%PROCESSOR_ARCHITECTURE%\"==\"amd64\" goto reg64\nif /i \"%PROCESSOR_ARCHITEW6432%\"==\"amd64\" goto reg64\nif /i \"%PROCESSOR_ARCHITECTURE%\"==\"IA64\"  goto reg64\nif /i \"%PROCESSOR_ARCHITEW6432%\"==\"IA64\"  goto reg64\necho Registering 32-bit version of addin for Inventor\nset regasm=%windir%\\Microsoft.Net\\Framework\\v2.0.50727\\regasm.exe\ngoto lblRegister\n:reg64\necho Registering 64-bit version of addin for Inventor\nset regasm=%windir%\\Microsoft.Net\\Framework64\\v2.0.50727\\regasm.exe\ngoto lblRegister\n:lblRegister\n%regasm% %InstFlag% /codebase \"%InstDir%AddInName.dll\"\ngoto lblExit\n:lblExit\nexit /b 0"], "author": "arwdab"},
{"created at": [], "solution Title": "\n                        Re: Register Add-in using network share?\n                    ", "solution": [], "author": "jeff.pek"},
{"created at": [], "solution Title": "\n                        Re: Level of Details and Drawing Views\n                    ", "solution": ["bool check = false;", "do", "{", "    foreach (Inventor.Sheet oSheet in Drawing.Sheets)", "        foreach (Inventor.DrawingView oView in sheet.DrawingViews)", "            try", "            {", "                check = AssemblyUpdateCheck( (Inventor.AssemblyDocument)oView.ReferencedDocumentDescriptor.ReferencedDocument );", "            }", "                 catch", "            {", "                  Inventor.PartDocument oPrt = (Inventor.PartDocument)oView.ReferencedDocumentDescriptor.ReferencedDocument;", "                  if (oPrt.RequiresUpdate)", "                  {", "                      oPrt.Update2(true);", "                      check = true;", "                  }", "            }", "} while (check);", "bool AssemblyUpdateCheck(Inventor.AssemblyDocument oDoc)", "{", "    bool check = false;", "    for (int ct = 1; ct <= oDoc.ReferencedDocuments.Count; ct++)", "    {", "        try", "        {", "            check = AssemblyUpdateCheck( (Inventor.AssemblyDocument)oDoc.ReferencedDocuments[ct] );", "            if (oDoc.RequiresUpdate)", "            {", "                oDoc.Update2(true);", "                check = true;", "            }", "        }", "            catch", "        {", "            if (oDoc.RequiresUpdate)", "            {", "                oDoc.Update2(true);", "                check = true;", "            }", "        }", "        ", "    }", "    return (check);", "}"], "author": "Alan_H"},
{"created at": [], "solution Title": "\n                        Re: Adding Drawing Views or Occurances Crashing Inventor?\n                    ", "solution": [], "author": "andrewwhiteinc"},
{"created at": [], "solution Title": "\n                        Re: Can VB 2010 Express Edition be used to program both Inventor 2011 and 2012?\n                    ", "solution": [], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Parameter Table Equation\n                    ", "solution": [], "author": "deefield"},
{"created at": [], "solution Title": "\n                        Re: iPartTableRows :  trying to copy to get a table with all plates length\n                    ", "solution": [], "author": "fulvio81"},
{"created at": [], "solution Title": "\n                        Re: iLogic in IDW/Property for Number of Sheets\n                    ", "solution": ["For Each sheetX As Sheet In ThisDrawing.Document.Sheets\n  ThisDrawing.Sheet(sheetX.Name).Border = borderName\nNext\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: How to control the location of a Body in part file\n                    ", "solution": ["Public Sub DerivePositionOrientation()\n  Dim oPartDoc As Inventor.PartDocument\n  Set oPartDoc = ThisApplication.ActiveDocument\n  \n  Dim oCompDef As Inventor.PartComponentDefinition\n  Set oCompDef = oPartDoc.ComponentDefinition\n  \n  'You need the full file name of the source part\n  Dim sFile As String\n  sFile = \"***.ipt\"\n  \n  Dim oCoordSys As DerivedPartCoordinateSystemDef\n  Set oCoordSys = oPartDoc.ComponentDefinition.ReferenceComponents.DerivedPartComponents.CreateCoordinateSystemDef(sFile)\n\n  'Define position.  Here I offset by (1, 1, 1)\n  Dim oPoint As Inventor.Point\n  Set oPoint = ThisApplication.TransientGeometry.CreatePoint(1#, 1#, 1#)\n  \n  'Define X-axis orientation\n  Dim oVectorX As Inventor.Vector\n  Set oVectorX = ThisApplication.TransientGeometry.CreateVector(0#, 0#, 1#)\n  \n  'Define Y-axis orientation\n  Dim oVectorY As Inventor.Vector\n  Set oVectorY = ThisApplication.TransientGeometry.CreateVector(1#, 0#, 0#)\n  \n  Call oCoordSys.SetCoordinateSystem(oPoint, oVectorX, oVectorY)\n  \n  'Set scale in x, y, z\n  Call oCoordSys.SetScale(1#, 1#, 1#)\n  \n  'Include only the first body\n  oCoordSys.Solids.Item(1).IncludeEntity = True\n  \n  'Finally create the derived component\n  Dim oDerivedComp As Inventor.DerivedPartComponent\n  Set oDerivedComp = oCompDef.ReferenceComponents.DerivedPartComponents.Add(oCoordSys)\nEnd Sub"], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: Add-In Debug Error??\n                    ", "solution": [], "author": "nttoan8187"},
{"created at": [], "solution Title": "\n                        Re: How To Convert 2011 AddIn to 2012\n                    ", "solution": [], "author": "deanlupini"},
{"created at": [], "solution Title": "\n                        Re: Possible to Revisit a Rule in iLogic?\n                    ", "solution": ["If (someCondition) Then\n iLogicVb.RunExternalRule(\"relativeRuleFileName\")\n Return \nEnd if\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Table of Bill of Materials is showing a strange language\n                    ", "solution": [], "author": "inventor_ton"},
{"created at": [], "solution Title": "\n                        Re: Accessing Inertial Properties using iLogic\n                    ", "solution": ["RuleParametersOutput()\nInventorVb.DocumentUpdate()\n\nDim massProps as MassProperties\nDim partDoc as PartDocument = TryCast(ThisDoc.Document, PartDocument)\nIf (partDoc IsNot Nothing) Then massProps = partDoc.ComponentDefinition.MassProperties\nDim assemDoc as AssemblyDocument = TryCast(ThisDoc.Document, AssemblyDocument)\nIf (assemDoc IsNot Nothing) Then massProps = assemDoc.ComponentDefinition.MassProperties\n\nDim moments(5) As Double\nmassProps.XYZMomentsOfInertia(moments(0), moments(1), moments(2), moments(3), moments(4), moments(5))\n\nFor i = 0 To 5\n moments(i) = ThisDoc.Document.UnitsOfMeasure.ConvertUnits(moments(i), \"kg cm^2\", \"kg mm^2\")\nNext\n\nIxx = moments(0)\nIyy = moments(1)\nIzz = moments(2)\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: How to Open & Save As specific drawing sheet using iLogic\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: SelectSet object types in C#\n                    ", "solution": [], "author": "deanlupini"},
{"created at": [], "solution Title": "\n                        Re: Assembly Patterns and Part Hole Qty\n                    ", "solution": [], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: kGalleryControl\n                    ", "solution": [], "author": "JarFu"},
{"created at": [], "solution Title": "\n                        Re: Rule Compile Error when running Addin in Inventor Ilogic,.. Please help me\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Suppression from VB.net\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Why is Inventor 2011 Slow to set User Parameter Values\n                    ", "solution": ["oApp.UserInterfaceManager.UserInteractionDisabled = True\n[ code with parameters ]\noApp.UserInterfaceManager.UserInteractionDisabled = False"], "author": "ALink"},
{"created at": [], "solution Title": "\n                        Re: Project name in Inventor windows title\n                    ", "solution": [], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: VBA: How to create multi-value text parameter\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: open / load Assembly from filesystem\n                    ", "solution": ["Public Sub openitem()\nDim strPath As String\nstrPath = \"c:\\jobs\\widget.ipt\"\nDim invDoc As Document\nSet invDoc = ThisApplication.Documents.Open(strPath, True)\n\nEnd Sub"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Getting a list of selected items in C#\n                    ", "solution": ["public static Inventor.ObjectTypeEnum GetObjectType(object obj)\n{\n  Inventor.ObjectTypeEnum objectType = (Inventor.ObjectTypeEnum)GetPropertyValue(obj, \"Type\");\n  return objectType;\n}\n\npublic static object GetPropertyValue(object obj, string propertyName)\n{\n  if (obj == null)\n    throw new ArgumentNullException(\"obj\");\n  try\n  {\n    return obj.GetType().InvokeMember(propertyName, BindingFlags.GetProperty, null, obj, null);\n  }\n  catch (Exception)\n  {\n    return null;\n  }\n}\n"], "author": "jeff.pek"},
{"created at": [], "solution Title": "\n                        Re: Control 'break' size in drawing view using iLogic?\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: VBA end code execution. Equivalent = (CTRL + BREAK + END)\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: Design Status iProperty\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: Is part still in Assembly\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: Customised Drawing Sheet as a Default 'new' drawing\n                    ", "solution": [], "author": "Samnutter3212"},
{"created at": [], "solution Title": "\n                        Re: How to close a program that u have opened? :~~\n                    ", "solution": [], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: filter between units in ilogic - mm & deg\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: Create a new assembly file with Apprentice\n                    ", "solution": [], "author": "Gruff"},
{"created at": [], "solution Title": "\n                        Re: ilogic and sketched symbols\n                    ", "solution": ["Sub Main\n SetSymbolScale(\"SymbolA\", SymbolAScale)\nEnd Sub\n\nSub SetSymbolScale(symbolName As String, scale As Double)\n  Dim drawingDoc As DrawingDocument = TryCast(ThisDoc.Document, DrawingDocument)\n  If (drawingDoc Is Nothing) Then Return\n  If (scale <= 0) Then Return\n\n  For Each sheetX As Sheet In drawingDoc.Sheets\n    For Each sketched As SketchedSymbol In sheetX.SketchedSymbols\n      If (sketched.Name = symbolName) Then\n  \t    sketched.Scale = scale\n      End If\n    Next\n  Next\nEnd Sub"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: VBA - program which can steering model\n                    ", "solution": ["Public Sub DriveParameters()\n    ' Get the active assembly document.\n    Dim asmDoc As AssemblyDocument\n    Set asmDoc = ThisApplication.ActiveDocument\n    \n    ' Get the parameters object.\n    Dim params As Parameters\n    Set params = asmDoc.ComponentDefinition.Parameters\n    \n    ' Get the Distance and Angle parameters.  This will fail\n    ' if they don't exist.\n    Dim distParam As Parameter\n    Dim angleParam As Parameter\n    Set distParam = params.Item(\"Distance\")\n    Set angleParam = params.Item(\"Angle\")\n    \n    ' Calculate the distance and angle for each iteration.\n    Dim pi As Double\n    pi = Atn(1) * 4\n    Dim iterations As Integer\n    iterations = 50\n    \n    Dim angleValue As Double\n    angleValue = (pi / 2) / 50\n    Dim distanceValue\n    distanceValue = 0.1\n    \n    ' Iterate over a certain number of iterations.\n    Dim i As Integer\n    For i = 1 To iterations\n        ' Set the parameter values.\n        angleParam.Value = angleParam.Value + angleValue\n        distParam.Value = distParam.Value + distanceValue\n        \n        ' Update the document and the view to see each step.\n        asmDoc.Update\n        ThisApplication.ActiveView.Update\n    Next\nEnd Sub"], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: ilogic create custom ipropertie\n                    ", "solution": ["Dim propertyName As String = \"MyProperty\"\nDim propertyValue as String = \"Test Value\"\n\ncustomPropertySet = ThisDoc.Document.PropertySets.Item(\"Inventor User Defined Properties\")\nTry\n      prop = customPropertySet.Item(propertyName)\nCatch\n      ' Assume error means not found\n      customPropertySet.Add(\"\", propertyName)\nEnd Try\n\niProperties.Value(\"Custom\", propertyName) = propertyValue\n"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Plane Methods , Plane.IsParallelTo Method\n                    ", "solution": [], "author": "dano0310"},
{"created at": [], "solution Title": "\n                        Re: Can't delete image from titleblock\n                    ", "solution": ["Public Sub DeleteAnImageFromTitleBlock()\n   Dim oDoc As DrawingDocument\n   Set oDoc = ThisApplication.ActiveDocument\n   \n   Dim oTitleBlockSk As DrawingSketch\n   oDoc.TitleBlockDefinitions(\"test\").", "Edit", " ", "oTitleBlockSk\n   \n   MsgBox (oDoc.TitleBlockDefinitions(\"test\").Sketch.SketchImages.Count)\n   oTitleBlockSk.SketchImages(1).Delete\n   MsgBox (oTitleBlockSk.SketchImages.Count)\n   \n   oDoc.TitleBlockDefinitions(\"test\").ExitEdit True\nEnd Sub"], "author": "YuhanZhang"},
{"created at": [], "solution Title": "\n                        Re: iLogic case sensitive\n                    ", "solution": ["i = GoExcel.FindRow(DBLocation & \"Bases.xlsx\", \"RefSheet\", \"ManSeriesBore\", \"=\",  BrgManSeriesBore)\nIf (i < 0) Then\n  i = GoExcel.FindRow(DBLocation & \"Bases.xlsx\", \"RefSheet\", \"ManSeriesBore\", \"=\",  [BrgManSeriesBore].ToUpper) ' match all uppercase\nEnd if\nIf (i < 0) Then\n  i = GoExcel.FindRow(DBLocation & \"Bases.xlsx\", \"RefSheet\", \"ManSeriesBore\", \"=\",  [BrgManSeriesBore].ToLower) ' match all lowercase\nEnd if\nIf (i < 0) Then\n  i = GoExcel.FindRow(DBLocation & \"Bases.xlsx\", \"RefSheet\", \"ManSeriesBore\", \"=\",  StrConv(BrgManSeriesBore, VbStrConv.ProperCase)) ' match with first letters capitalized\nEnd if", "i = GoExcel.FindRow(DBLocation & \"Bases.xlsx\", \"RefSheet\", \"ManSeriesBore\", \"Contains\",  BrgManSeriesBore)"], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: iLogic Save As PDF color option not working\n                    ", "solution": [], "author": "Curtis_Waguespa"},
{"created at": [], "solution Title": "\n                        Re: Condition to choose between two values\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Cannot set the values of a SketchPoint\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Is it possible to disable the sketch update?\n                    ", "solution": [], "author": "AnanyevVN"},
{"created at": [], "solution Title": "\n                        Re: iLogic in standard assembly\n                    ", "solution": [], "author": "theo.bot"},
{"created at": [], "solution Title": "\n                        Re: iLogic Endless Loop\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Multi bodies - auto rename.\n                    ", "solution": [], "author": "barbara.han"},
{"created at": [], "solution Title": "\n                        Re: SketchesSymbol question\n                    ", "solution": [], "author": "maxstel"},
{"created at": [], "solution Title": "\n                        Re: Auto Balloon\n                    ", "solution": [], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: Inventor VBA forms error - \"ClassFactory cannot supply requested class&\n                    ", "solution": [], "author": "gerrard.hickson"},
{"created at": [], "solution Title": "\n                        Re: IV2012 SetBalloonType\n                    ", "solution": [], "author": "RGvEijk"},
{"created at": [], "solution Title": "\n                        Re: Save flat pattern as dxf with iLogic rule - Inventor 2012\n                    ", "solution": [], "author": "Lance_White"},
{"created at": [], "solution Title": "\n                        Re: Unit of Dimensions\n                    ", "solution": ["Private Sub test()\n    s = GetUnitString(kCentimeterLengthUnits)\nEnd Sub\n\nPublic Function GetUnitString(oEnum As UnitsTypeEnum) As String\n    oEnum = kCentimeterLengthUnits\n    s = ThisApplication.UnitsOfMeasure.GetLocaleCorrectedExpression(\"1\", oEnum)\n    GetUnitString = Mid(s, 3)\nEnd Function", "    Private Sub Button2_Click(sender As System.Object, e As System.EventArgs) Handles Button2.Click\n          MsgBox(GetUomLabel(ThisApplication.ActiveEditDocument.UnitsOfMeasure))\n    End Sub\n    Public Function GetUomLabel(ByVal DocumentUnits As UnitsOfMeasure) As String\n        Dim StrUnits As String = ThisApplication.UnitsOfMeasure.GetStringFromValue(1, DocumentUnits.LengthUnits)\n        Return StrUnits.Remove(0, StrUnits.LastIndexOf(\" \"))\n\n    End Function"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: Attaching balloon\n                    ", "solution": [], "author": "GVDB"},
{"created at": [], "solution Title": "\n                        Re: SaveFileAsPdf with VB.net?\n                    ", "solution": [], "author": "mucip"},
{"created at": [], "solution Title": "\n                        Re: multi inputbox\n                    ", "solution": [], "author": "MariaManuela"},
{"created at": [], "solution Title": "\n                        Betreff: SketchRotate + Line\n                    ", "solution": [], "author": "mario.lung"},
{"created at": [], "solution Title": "\n                        Re: Export sheet to DWG\n                    ", "solution": [], "author": "jeffrey.sun"},
{"created at": [], "solution Title": "\n                        Re: copy & paste ilogic colours\n                    ", "solution": [], "author": "MarkESmith"},
{"created at": [], "solution Title": null, "solution": [], "author": null},
{"created at": [], "solution Title": "\n                        Re: Suppress feature prompt\n                    ", "solution": [], "author": "meck"},
{"created at": [], "solution Title": "\n                        Re: iLogic place Structural Shapes:Channels, how to change length?\n                    ", "solution": [], "author": "Mario-Villada"},
{"created at": [], "solution Title": "\n                        Re: How-to: Get a reference to specific dimension\n                    ", "solution": [], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: Place iFeature with point and plane\n                    ", "solution": [], "author": "Frederic007"},
{"created at": [], "solution Title": "\n                        Re: Inventor Apprentice Limitation Question\n                    ", "solution": [], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Creating a Part Parameter with I-Logic running in an idw?\n                    ", "solution": ["   Dim oDrawDoc As Inventor.DrawingDocument = ThisApplication.ActiveDocument\n        \n        If oDrawDoc.ActiveSheet.DrawingViews.Count > 0 Then\n            For Each oView As Inventor.DrawingView In oDrawDoc.ActiveSheet.DrawingViews\n                If oView.ReferencedDocumentDescriptor.ReferencedDocumentType = DocumentTypeEnum.kAssemblyDocumentObject Or _\n                    oView.ReferencedDocumentDescriptor.ReferencedDocumentType = DocumentTypeEnum.kPartDocumentObject Then\n                    Dim oRefDoc As Object = oView.ReferencedDocumentDescriptor.ReferencedDocument\n                    Dim oMyParameter As Inventor.UserParameters = oRefDoc.ComponentDefinition.Parameters.UserParameters\n                    oMyParameter.AddByValue(\"color\", \"bule\", UnitsTypeEnum.kTextUnits)\n                    Exit For\n                End If\n            Next\n        End If"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Unable to cast COM object to System.String (iLogic)\n                    ", "solution": ["    'Ref the part\n        Dim oDoc As Inventor.PartDocument = ThisApplication.ActiveDocument\n        Dim oDef As PartComponentDefinition = oDoc.ComponentDefinition\n        'Find the sweep, reguardless of name, and ref it\n        Dim oSweep As SweepFeature = oDef.Features.SweepFeatures.Item(1)\n        \n        If Feature.IsActive( oSweep.Name) Then\n            iLogicVb.RunRule(\"CalcSweep\")\n            Else\n            'Do something\n        End If"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Custom iProperty CUTDETAIL in Frames is not accesible from VBA or iLogic\n                    ", "solution": ["        ' Get the active part document.\n        Dim invPartDoc As PartDocument = ThisApplication.ActiveDocument\n        'Get the custom property set.\n        Dim invCustomPropertySet As PropertySet = invPartDoc.PropertySets.Item(\"Inventor User Defined Properties\")\n\n        ' Attempt to get \"CUTDETAIL1\".\n        Try\n            For Each p As Inventor.Property In invCustomPropertySet\n                If p.DisplayName = \"CUTDETAIL1\" Then\n                    MsgBox(p.Value)\n                End If\n                'MsgBox(p.DisplayName & vbLf & p.Value & vbLf & p.Name)\n            Next\n        Catch ex As Exception\n            MsgBox(ex.Message)\n        End Try"], "author": "Mike.Wohletz"},
{"created at": [], "solution Title": "\n                        Re: Send Components part list To another program with SQL Crystal Database\n                    ", "solution": [], "author": "Fredalone"},
{"created at": [], "solution Title": "\n                        Re: Need iLogic code for opening -or- deleting a component from within an assemb\n                    ", "solution": [], "author": "loomeye"},
{"created at": [], "solution Title": "\n                        Re: iLogic help - convert Inch to Architectural style?\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Replace Model Reference using iLogic\n                    ", "solution": [], "author": "TONELLAL"},
{"created at": [], "solution Title": "\n                        Re: External iLogic rule error\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Occurrence material color change\n                    ", "solution": [], "author": "xiaoyan.qi"},
{"created at": [], "solution Title": "\n                        Re: Suitable iLogic funtions for part template\n                    ", "solution": [], "author": "Shawn_79"},
{"created at": [], "solution Title": "\n                        Re: How to stop an iLogic loop with the keyboard\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: CreateGeometryProxy\n                    ", "solution": ["Function ConstrainPart( _\n               ByVal oOcc As Inventor.ComponentOccurrence, _\n               ByRef oFace1 As Inventor.Face, _\n               ByRef oFace2 As Inventor.Face, _\n               ByVal Offset As Integer) As Boolean\n\n      ' Make sure the occurrence is not grounded.\n      If oOcc.Grounded Then oOcc.Grounded = False\n\n      ' Get the component definition of the occurrence. \n      Dim oOccDef As Inventor.PartComponentDefinition = oOcc.Definition\n\n      ' Get the assembly component definition. \n      ' This assumes the occurrence is with \n      ' respect to the top-level assembly.\n      Dim oAsmDef As Inventor.AssemblyComponentDefinition = oOcc.ContextDefinition\n\n      ' Create a proxy for the 1st face\n      Dim oOccFaceProxy1 As Inventor.FaceProxy = Nothing\n      Try\n         'oOcc.CreateGeometryProxy(oFace1, CType(oOccFaceProxy, FaceProxy))\n         'previous line produce run-time error\n         'next line is correct\n         Call oOcc.CreateGeometryProxy(oFace1, oOccFaceProxy1)\n      Catch ex As Exception\n         MsgBox(\"Proxy 1 \" & ex.Message)\n         Return False\n      End Try\n\n      Try  ' Create the constraint.\n         oAsmDef.Constraints.AddFlushConstraint( _\n               oAsmDef.WorkPlanes.Item(1), oOccFaceProxy1, Offset)\n      Catch ex As Exception\n         MsgBox(\"Move 1 \" & ex.Message)\n         Return False\n      End Try\n\n      ' Create a proxy for the 2nd face\n      Dim oOccFaceProxy2 As Inventor.FaceProxy = Nothing\n      Try\n         oOcc.CreateGeometryProxy(oFace2, oOccFaceProxy2)\n      Catch ex As Exception\n         MsgBox(\"Proxy 2 \" & ex.Message)\n         Return False\n      End Try\n\n      Try ' Create the constraint.\n         oAsmDef.Constraints.AddFlushConstraint( _\n             oAsmDef.WorkPlanes.Item(2), oOccFaceProxy2, Offset)\n      Catch ex As Exception\n         MsgBox(\"Move 2 \" & ex.Message)\n         Return False\n      End Try\n\n      Return True\n   End Function"], "author": "AnanyevVN"},
{"created at": [], "solution Title": "\n                        Re: If statement between Part doc & Assembly doc\n                    ", "solution": [], "author": "xiaoyan.qi"},
{"created at": [], "solution Title": "\n                        Re: On which drawing my assembly is drawn.\n                    ", "solution": [], "author": "mttb"},
{"created at": [], "solution Title": "\n                        Re: Changing Positional Representation of SubAssembly Using iLogic\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Minimize out of process roundtrips when coding .NET\n                    ", "solution": [], "author": "jeff.pek"},
{"created at": [], "solution Title": "\n                        Re: Cut Solid Body\n                    ", "solution": ["Dim oRevolve As RevolveFeature\n  \nDim oBody As Inventor.SurfaceBody\nFor Each oBody In oCompDef.SurfaceBodies\n  If oBody.Name = \"Shaft\" Then\n    oBody.Visible = True\n  Else\n    oBody.Visible = False\n  End If\nNext\n \noRevolve = oCompDef.Features.RevolveFeatures.AddFull(oProfile, oPartAxis1, kCutOperation)\n\nFor Each oBody In oCompDef.SurfaceBodies\n  oBody.Visible = True\nNext"], "author": "alewer"},
{"created at": [], "solution Title": "\n                        Re: Controlling 'Break' Size using iLogic\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Level of detail suppression problem in assembly with I-logic\n                    ", "solution": [], "author": "gboshko"},
{"created at": [], "solution Title": "\n                        Re: Inserting InventorView\n                    ", "solution": [], "author": "Floris004"},
{"created at": [], "solution Title": "\n                        Re: Sketch in paperspace using iLogic\n                    ", "solution": [], "author": "meck"},
{"created at": [], "solution Title": "\n                        Re: Zooming in & out\n                    ", "solution": [], "author": "skyngu"},
{"created at": [], "solution Title": "\n                        Re: Ilogic Rebuild - files attached\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: [iLogic] Differentiating between two views with the same view identifier\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Cancel deletion with \u2018OnDelete\u2019\n                    ", "solution": ["Public Sub UserInputEvents_OnActivateCommand(ByVal CommandName As String, ByVal Context As NameValueMap)\n   Try\n      If CommandName = \"AppDeleteCmd\" Then\n         Dim oSelectedObject As Object\n         Dim oSketchedSymbol As SketchedSymbol\n         For Each oSelectedObject In myInventor.ActiveDocument.SelectSet\n            If TypeOf oSelectedObject Is SketchedSymbol Then\n               oSketchedSymbol = oSelectedObject\n               If oSketchedSymbol.Name = \"Name_of_SketchedSymbol\" Then\n                  myInventor.ActiveDocument.SelectSet.Remove(oSelectedObject)\n               End If\n            End If\n         Next\n      End If\n   Catch ex As Exception\n   End Try", "End Sub"], "author": "martin.gagnon"},
{"created at": [], "solution Title": "\n                        Re: iLogic rule to switch Revision Table sizes defined in Styles\n                    ", "solution": ["RevisionTable.Style Property\nParent Object: RevisionTable\nDescription \nProperty that gets and sets the style associated with this object.\nSyntax \nRevisionTable.Style() As RevisionTableStyle", "Dim oDrawDoc As Inventor.DrawingDocument = ThisApplication.ActiveEditDocument\n'set rev block style\t\nDim oRevTable As RevisionTable\t\nDim oRevStyle1 As RevisionTableStyle\noRevStyle1 = oDrawDoc.StylesManager.RevisionTableStyles.Item(\"RevBlock Style1\")\nDim oRevStyle2 As RevisionTableStyle\noRevStyle2 = oDrawDoc.StylesManager.RevisionTableStyles.Item(\"RevBlock Style2\")\t\n\nDim oCurrentNumber  As Sheet\noCurrentNumber = oDrawDoc.ActiveSheet\n\nFor Each oSheet In oDrawDoc.Sheets\noSheet.Activate\n\n\tTry ' Get the revision table \n\t\toRevTable = oDrawDoc.ActiveSheet.RevisionTables.Item(1)\n\t\t\n\t\t'toggle rev style\n\t\tIf oRevTable.Style.Name = \"RevBlock Style1\" Then\n\t\t\toRevTable.Style = oRevStyle2\n\t\tElse \n\t\t\toRevTable.Style = oRevStyle1\n\t\tEnd If\n\t\t\t\t\n\t\toSheet.Update\n\t\t\n\tCatch 'catch error\n\t\tContinue For move on  when no rev table is found\n\tEnd Try\t\n\nNext 'sheet\n\noCurrentNumber.Activate"], "author": "MechMachineMan"},
{"created at": [], "solution Title": "\n                        Re: Ilogic changes the Custom iProperties type from 'number' to 'text'\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: DriveConstraintSettings.PlayForward does not animate nor detect contact\n                    ", "solution": ["Public Sub MeasureByContact()\n    Dim assyDoc As AssemblyDocument\n    Set assyDoc = ThisApplication.ActiveDocument\n    Dim oConstraint As AssemblyConstraint\n    assyDoc.ModelingSettings.InteractiveContactAnalysis = kAllComponentsInteractiveContact\n    assyDoc.ModelingSettings.InteractiveContactSurfaces = kAllSurfacesInteractiveContact\n\n    \n    For Each oConstraint In assyDoc.ComponentDefinition.Constraints\n        If oConstraint.DriveConstraintSettings.IsInitialized Then\n            With oConstraint.DriveConstraintSettings\n                .CollisionDetection = True\n                .StartValue = 0\n                .EndValue = 20\n                .GoToStart\n                \n                .PlayForward\n\n                .StartValue = -20\n                .EndValue = 0\n                .GoToEnd\n                \n                .PlayReverse\n\n            End With\n        End If\n    Next\nEnd Sub"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: Strange iLogic error\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Control Parameters of a part that is not in an assembly\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Drawing view compnet visibility\n                    ", "solution": ["Public Sub TurnOffVisibilitySubassembly()\n    Dim oDrawingDocument As DrawingDocument\n    Set oDrawingDocument = ThisApplication.ActiveDocument\n    \n    Dim oView As Inventor.DrawingView\n    Set oView = oDrawingDocument.ActiveSheet.DrawingViews.Item(1)\n    Dim oAssemblyDocument As Inventor.AssemblyDocument\n    Set oAssemblyDocument = oView.ReferencedDocumentDescriptor.ReferencedDocument\n    \n    \n    'Get the Third component occurrence of the assembly document\n    Dim oSubOcc As Inventor.ComponentOccurrence\n    \n    Set oSubOcc = oAssemblyDocument.ComponentDefinition.Occurrences.Item(3).SubOccurrences.Item(1)\n\n    'Turn off visibility of the suboccurrence\n    Call oView.SetVisibility(oSubOcc, False)\nEnd Sub"], "author": "JohanLarsson"},
{"created at": [], "solution Title": "\n                        Re: API:  set an Event Trigger for an ilogic Rule in a document.\n                    ", "solution": ["CheckList Box Name:                     : Property Name :  : Property ID\n----------------------------------------------------------------------------------------\nAfter Open Document                   : AfterDocOpen                 : 400\nClose(Document)                          : DocClose                     : 500\nBefore Save Document                   : BeforeDocSave           : 700\nAfter Save Document                       : AfterDocSave               : 800\nAny Model Parameter Change        : AfterAnyParamChange   : 1000\nPart Geometry Change**            : PartBodyChanged         : 1200\nMaterial Change**                          : AfterMaterialChange     : 1400\nDrawing View Change***                  : AfterDrawingViewsUpdate  : 1500\niProperty(Change)                          : AfterAnyiPropertyChange             : 1600\nFeature Suppression Change**          : AfterFeatureSuppressionChange   : 2000\nComponent Suppression Change*   : AfterComponentSuppressionChange : 2200\niPart / iAssembly Change Component* : AfterComponentReplace   : 2400\nNew Document                               : AfterDocNew                  : 2600", "----------------------------------------------------------------------------------------"], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Translate Assembly Component using iLogic/Offset from Parent Assembly Origin\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Running ilogic rule in Assembly from sub assembly part\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: An UserControl doesn't load if I use some methods.\n                    ", "solution": ["Private", " ", "Sub", " SelectorButton_Load(sender ", "As", " ", "Object", ", e ", "As", " System.EventArgs) ", "Handles", " ", "Me", ".Load\n  ", "If", " ", "Not", " DesignMode ", "Then", "\n    [...]\n  ", "End", " ", "If", "\n", "End", " ", "Sub"], "author": "stefanomenci"},
{"created at": [], "solution Title": "\n                        Re: iLogic iProperties.Material Error\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Change BOM Structure of Component Within An Assembly Using iLogic\n                    ", "solution": [], "author": "danvang"},
{"created at": [], "solution Title": "\n                        [SOLVED] How can i add items to a iMate machlist with VB?\n                    ", "solution": ["Function PlaceiMates()\nDim oApp As Application\nSet oApp = ThisApplication\n\nIf ThisApplication.ActiveDocumentType = kPartDocumentObject Then\n    Dim odoc As PartDocument\n    Set odoc = oApp.ActiveEditDocument\n    \n    Dim oInsert As Object\n    Dim oInsertiMate As InsertiMateDefinition\n    Set oInsert = ThisApplication.CommandManager.Pick(kPartEdgeFilter, \"Pick Edge for Imate\")\n    Set oInsertiMate = odoc.ComponentDefinition.iMateDefinitions.AddInsertiMateDefinition(oInsert, True, \"0mm\", , \"Test\")\n    Dim ml(1) As String '<-----------------Enter the ammount of matches you want to add.(start with 0)\n    ml(0) = \"pl\"\n    ml(1) = \"pl1\" '<-----------------------The array should be filled completely\n    oInsertiMate.MatchList = ml\nEnd If\nEnd Function"], "author": "nielsborgerink2"},
{"created at": [], "solution Title": "\n                        Re: HoleFeature.Tapped property\n                    ", "solution": ["Dim", " ", "oHoleTapInfo", " ", "As", " ", "HoleTapInfo", "oHoleTapInfo", " ", "=", " odoc.", "ComponentDefinition", ".", "Features", ".", "HoleFeatures", ".", "CreateTapInfo", "(", "True, ", "\"", "ANSI Unified Screw Threads", "\"", ", ", "\"", "7/16-14 UNC", "\"", ", ", "\"", "1B", "\"", ", False, ", "\"", "5mm", "\"", ")", "If", " ", "hole", ".", "HealthStatus", " ", "<>", " ", "kSuppressedHealth", " ", "Then", "          ", "         ", "hole", ".", "TapInfo", " ", "=", " ", "oHoleTapInfo", "   ", "End", " ", "If"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: iLogic Button\n                    ", "solution": [], "author": "MjDeck"},
{"created at": [], "solution Title": "\n                        Re: Assembly Occurrance stuck on inch units after Pro/E .asm Import.\n                    ", "solution": ["Sub Main\nInvDoc = ThisDoc.Document\nDim oCompDef As ComponentDefinition = InvDoc.ComponentDefinition\nDim oCompOcc As ComponentOccurrence\n\nFor Each oCompOcc In oCompDef.Occurrences\n\n               'get filename of occurance. will be used to find the document type.\n'              Dim oCompDefPart As ComponentDefinition = oCompOcc.Definition\n'              Dim oRefDoc As Document = oCompDefPart.Document\n               \n'              For parts only - uncomment the following line And the End If at the bottom.\n'              If oRefDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then\n               \n                              'create a matrix of origin, XAxis, YAxis, ZAxis and get the information from the selected object\n                              Dim oTransform As Matrix\n                              oTransform = oCompOcc.Transformation\n                              \n                              'declare variables\n                              Dim oOrigin As Point\n                              Dim oXAxis As Vector\n                              Dim oYAxis As Vector\n                              Dim oZAxis As Vector\n                              \n                              'get the origin, XAxis, YAxis, ZAxis from the matrix and set them as separate variables.\n                              Call oTransform.GetCoordinateSystem(oOrigin, oXAxis, oYAxis, oZAxis)\n                              'MessageBox.Show(oOrigin.X & \",\" & oOrigin.Y & \",\" & oOrigin.Z & vbNewLine & oXAxis.X & vbNewLine & oYAxis.Y & vbNewLine & oZAxis.Z)\n'                             MessageBox.Show(oXAxis.X & \",\" & oXAxis.Y & \",\" & oXAxis.Z & vbNewLine & _\n'                                                                                         oYAxis.X & \",\" & oYAxis.Y & \",\" & oYAxis.Z & vbNewLine & _\n'                                                                                         oZAxis.X & \",\" & oZAxis.Y & \",\" & oZAxis.Z, oCompOcc.Name)\n               \n                              'from the above messagebox the values of the axis are in 25.4 times as large. \n                              'Therefore making these parts too large. Will need to create new axis that will the correct sizes when placing the new occurrence\n                              \n                              'create new axis when the info from the original axis\n                              Dim NewXAxis As Vector = CreateVector(oXAxis)\n                              Dim NewYAxis As Vector = CreateVector(oYAxis)\n                              Dim NewZAxis As Vector = CreateVector(oZAxis)\n                              \n                              'place the new axes\n                              Call oTransform.SetCoordinateSystem(oOrigin, NewXAxis, NewYAxis, NewZAxis)\n                              \n                              oCompOcc.Transformation = oTransform\n                              \n'                             'get filename of occurance\n'                             Dim oCompDefPart As ComponentDefinition = oCompOcc.Definition\n'                             Dim oRefDoc As Document = oCompDefPart.Document\n'                             \n'                             'add the new occurrence with the new matrix of coordinates\n'                             oCompDef.Occurrences.Add(oRefDoc.FullFilename, oTransform)\n'                             \n'                             'delete selected occurrence\n'                             oCompOcc.delete\n               \n               \n'              End If\n               \nNext\n\nEnd Sub\n\nPublic Function CreateVector (ByVal OldVector As vector) As vector\nDim NewVector As Vector\nDim NewX As Double\nDim NewY As Double\nDim NewZ As Double\nDim XScale As Boolean = False\nDim YScale As Boolean = False\nDim ZScale As Boolean = False\n\nIf OldVector.X = 0 Or Abs(OldVector.X) <= 1 Then\n               NewX = OldVector.X\nElse\n               XScale = True\nEnd If\n\nIf OldVector.Y = 0 Or Abs(OldVector.Y) <= 1 Then\n               NewY = OldVector.Y\nElse\n               YScale = True\nEnd If\n\nIf OldVector.Z = 0 Or Abs(OldVector.Z) <= 1 Then\n               NewZ = OldVector.Z\nElse\n               ZScale = True\nEnd If\n\nIf XScale = False And YScale = False And ZScale = False\n               Return OldVector\nElse\n               NewX = OldVector.X / 25.4\n               NewY = OldVector.Y / 25.4\n               NewZ = OldVector.Z / 25.4\n               NewVector = ThisApplication.TransientGeometry.CreateVector(NewX, NewY, NewZ)\n               Return NewVector\nEnd If\nEnd Function\n\n "], "author": "gary.belisle"},
{"created at": [], "solution Title": "\n                        Re: How to tell when iLogic has finished updating\n                    ", "solution": [], "author": "Major_West"},
{"created at": [], "solution Title": "\n                        Re: What are the Options of Document.OpenWithOptions\n                    ", "solution": [], "author": "Raider_007"},
{"created at": [], "solution Title": "\n                        Re: 3D View Cube Customization?\n                    ", "solution": [], "author": "ekinsb"},
{"created at": [], "solution Title": "\n                        Re: Display Bend Direction in Model Flat pattern\n                    ", "solution": [], "author": "smccoywm"},
{"created at": [], "solution Title": "\n                        Re: Huge temp files\n                    ", "solution": [], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: SheetMetal.SetActiveStyle in VBA - Not in iLogic\n                    ", "solution": [], "author": "ladimirabdala"},
{"created at": [], "solution Title": "\n                        Re: Run ilogic rule in each part from the assembly via external rule?\n                    ", "solution": ["Dim openDoc As Document\nopenDoc = ThisDoc.Document\n\nDim docFile As Document \n\nIf openDoc.DocumentType = 12291 Then\n\n\tFor Each docFile In openDoc.AllReferencedDocuments\n\t\n\t\tIf docFile.DocumentType = 12290 Then\n\n\t\t\tDim FNamePos As Long\n            FNamePos = InStrRev(docFile.FullFileName, \"\\\", -1)\t\t\t\n            \n            Dim docFName As String\n            docFName = Right(docFile.FullFileName, Len(docFile.FullFileName) - FNamePos)\n\t\t\n\t\t\tiProperties.Value(docFName, \"Project\", \"Description\") = iProperties.Value(docFName, \"Custom\", \"DISPLAY_NAME\")\t\n\t\t\n\t\tEnd If \n\t\t\n\tNext\n\t\n\tElse\n\t\n\tMessageBox.Show(\"You must have a valid Assembly document open before using this code!\", \"File Type Mismatch!\",MessageBoxButtons.OK,MessageBoxIcon.Exclamation)\n\t\nEnd If "], "author": "MegaJerk"},
{"created at": [], "solution Title": "\n                        Re: Using ?Volume? in the parametes dialog box.\n                    ", "solution": [], "author": "jonselzer"},
{"created at": [], "solution Title": "\n                        Re: NewBie in Customisation\n                    ", "solution": [], "author": "leefsma"},
{"created at": [], "solution Title": "\n                        Re: Get Inventor TreeView in VB.net Customised\n                    ", "solution": [], "author": "amitnkukanur"},
{"created at": [], "solution Title": "\n                        Re: converting text string into a number\n                    ", "solution": ["test = Mid(iProperties.Value(\"Custom\", \"CUSTOMPROP\"),14,3)\nyour_numerical_value = CDbl(test)", "Dim test As String = iProperties.Value(\"Custom\", \"CUSTOMPROP\")\nDim test2 As String = \"\" 'create an empty string to pass the digits into\n\nDim CharArray() As Char = test.ToCharArray() 'split the string into characters and pass into an array\nFor Each chara As Char In CharArray\n     If Char.IsDigit(chara) Then\n\t \ttest2 = test2 & chara 'look at each character in the array, if it is a digit then concatenate it into the test2 string\n     End If\nNext\n\nyourparam = CDbl(test2)"], "author": "thomaskennedy"},
{"created at": [], "solution Title": "\n                        Re: Creation of Tab\n                    ", "solution": ["' Set a reference to the user interface manager.\nDim oUIManager As UserInterfaceManager\nSet oUIManager = oApp.UserInterfaceManager\n\n' Get the ribbon associated with part documents\nDim oRibbon As Ribbon\nSet oRibbon = oUIManager.Ribbons.Item(\"Part\")\n\n' Create a new tab\nDim oTab As RibbonTab\nSet oTab = oRibbon.RibbonTabs.Add(\"My Tab\", \"invrMyTab\", \"CLSID of the AddIn\", , , False)\n  \n' Create a new panel within the tab\n  Dim oPanel As RibbonPanel\n  Set oPanel = oTab.RibbonPanels.Add(\"My Panel\", \"invrMyPanel\", \"CLSID of the AddIn\")\n  \n' Create a control within the panel\nCall oPanel.CommandControls.AddButton(oButtonDefinition, True)\n\n"], "author": "krieg"},
{"created at": [], "solution Title": "\n                        Re: How create a Flat Pattern from VBA code?\n                    ", "solution": [], "author": "dean.morrison"},
{"created at": [], "solution Title": "\n                        Re: Add custom iProperty to BOM using API\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: PolyLine in Inventor\n                    ", "solution": [], "author": "xiaodong.liang"},
{"created at": [], "solution Title": "\n                        Re: Setting the ActiveStandardStyle\n                    ", "solution": [], "author": "CadUser46"}
]