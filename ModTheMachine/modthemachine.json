[
{"title": "Add control to toolbar panel", "codeSample": "# \"toolbarControlPanel_\" is the button control added to the panel \r\ntoolbarControlPanel_.isPromoted = True\r\ntoolbarControlPanel_.isPromotedByDefault = True", "created_at": "September 22, 2015", "footers": "Posted at 01:50 AM in "},
{"title": "Fusion 360 Hackathon - Q&A #1 #2", "codeSample": "def createDirectModelDocument(): \r\n    ui = None \r\n    try: \r\n        app = adsk.core.Application.get() \r\n        ui  = app.userInterface \r\n \r\n        # Get the Fusion specific Design preferences.         \r\n        desPrefs = app.preferences.productPreferences.itemByName('Design') \r\n \r\n        # Save the current value of the setting. \r\n        initialValue = desPrefs.defaultDesignType \r\n \r\n        # Set the value to create a direct edit design.         \r\n        desPrefs.defaultDesignType = \\ \r\n                 adsk.fusion.DefaultDesignTypeOptions.DirectDesignTypeOption \r\n \r\n        # Create a new document. \r\n        app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType) \r\n \r\n        # Set the preference back to the initial value.         \r\n        desPrefs.defaultDesignType = initialValue \r\n         \r\n        ui.messageBox('Success') \r\n    except: \r\n        if ui: \r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))", "created_at": "September 29, 2015", "footers": "Posted at 02:15 AM in "},
{"title": "Fusion 360 Hackathon - Q&A #7 #8 #9 #10", "codeSample": "inputs.addImageCommandInput('imageInput', '', './resources/", "created_at": "October 08, 2015", "footers": "Posted at 05:45 PM in "},
{"title": "Use Entitlement API from Fusion add-in", "codeSample": "#include <curl/curl.h>\r\n#include <regex>\r\n\r\nusing namespace std;", "created_at": "October 27, 2015", "footers": "Posted at 10:38 AM in "},
{"title": "Extrude profile with hole", "codeSample": "// Put all the profiles in an object collection\r\n// Get the Profiles collection\r\nPtr<Profiles> pProfiles = sketch->profiles();\r\nPtr<ObjectCollection> objectsForExtrude = ObjectCollection::create();\r\nfor each (Ptr<Profile> pProfile in pProfiles)\r\n{\r\n  // Check to see if this is the outer rectangular profile or not\r\n  // by checking the number of loops.  The outer profile will have two\r\n  // loops, one for the rectangle and one for the circle. \r\n  Ptr<ProfileLoops> loops = pProfile->profileLoops();\r\n             \r\n  if (loops->count() > 1)\r\n    objectsForExtrude->add(pProfile);\r\n}", "created_at": "September 30, 2015", "footers": "Posted at 03:37 AM in "},
{"title": "Fusion add-in path", "codeSample": "def getAddInFolder():\r\n    import os\r\n    folderPath = os.path.dirname(os.path.realpath(__file__))\r\n    \r\n    return folderPath", "created_at": "November 02, 2015", "footers": "Posted at 09:51 AM in "},
{"title": "Selection object properties become invalid", "codeSample": "var onCommandExecuted = function(args) {\r\n    try {\r\n        var command = adsk.core.Command(args.firingEvent.sender);\r\n        var inputs = command.commandInputs;\r\n\r\n        // both are filtered for vertex selection\r\n        var selection1 = inputs.itemById('selection1').selection(0);\r\n        var selection2 = inputs.itemById('selection2').selection(0);\r\n\r\n        var design = app.activeProduct;\r\n        var root = design.rootComponent;\r\n        var sketches = root.sketches;\r\n        var xyPlane = root.xYConstructionPlane;\r\n\r\n        // Monitor selection1 and selection2 in the object \r\n        // window. As soon as we create a new sketch the \r\n        // variable to the last selected entity will become\r\n        // unavailable >> <not available>\r\n        sketches.add(xyPlane);\r\n        ui.messageBox(\"selection1 >> \" + selection1.", "created_at": "January 20, 2016", "footers": "Posted at 07:02 AM in "},
{"title": "Run Fusion commands", "codeSample": "app = adsk.core.Application.get()\r\nui = app.userInterface\r\n\r\nfileDialog = ui.createFileDialog()\r\nfileDialog.isMultiSelectEnabled = False\r\nfileDialog.title = \"Specify result filename\"\r\nfileDialog.filter = 'Text files (*.txt)'\r\nfileDialog.filterIndex = 0\r\ndialogResult = fileDialog.showSave()\r\nif dialogResult == adsk.core.DialogResults.DialogOK:\r\n    filename = fileDialog.filename\r\nelse:\r\n    return\r\n    \r\ncommandDefinitions = ui.commandDefinitions\r\nresult = \"\"\r\n\r\nfor commandDefinition in commandDefinitions:\r\n    result += \"id = \" + commandDefinition.id + \"; name = \" + commandDefinition.name + \"\\n\"\r\n    \r\noutput = open(filename, 'w')\r\noutput.writelines(result)\r\noutput.close()", "created_at": "January 11, 2016", "footers": "Posted at 03:15 AM in "},
{"title": "Drive robot arm in Fusion - update", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\nrevoluteJoint1 = None\r\nrevoluteJoint2 = None\r\nisReverseUpDown = False\r\nisReverseLeftRight = False\r\nrevolutionStep = 0.1\r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            if keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep\r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep               \r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            \r\n            # Refresh the view to show the change\r\n            vp = app.activeViewport\r\n            vp.refresh()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n# Event handler for the inputChanged event.\r\nclass MyInputChangedHandler(adsk.core.InputChangedEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.InputChangedEventArgs.cast(args)\r\n\r\n        commandInput = eventArgs.input\r\n        if commandInput.id == commandName + '_step':\r\n            global revolutionStep\r\n            revolutionStep = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseUpDown':\r\n            global isReverseUpDown\r\n            isReverseUpDown = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseLeftRight':\r\n            global isReverseLeftRight\r\n            isReverseLeftRight = commandInput.value\r\n        \r\n        \r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            # Subscribe to the various command events\r\n            onInputChanged = MyInputChangedHandler()\r\n            command.inputChanged.add(onInputChanged)\r\n            handlers.append(onInputChanged)\r\n\r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_usage', \r\n                'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n            inputs.addValueInput(\r\n                commandName + '_step', \r\n                'Rotation step: ',\r\n                'deg',\r\n                adsk.core.ValueInput.createByReal(revolutionStep))                \r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseUpDown',\r\n                'Reverse Up/Down direction',\r\n                True,\r\n                '',\r\n                isReverseUpDown)\r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseLeftRight',\r\n                'Reverse Left/Right direction',\r\n                True,\r\n                '',\r\n                isReverseLeftRight) \r\n                \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n            \r\n        # Get selected Revolute Joints to work on \r\n        selections = app.userInterface.activeSelections\r\n        if selections.count != 2:\r\n            ui.messageBox(\"The 2 revolute joints you want to control need to be selected before running the command!\")\r\n            return\r\n        \r\n        global revoluteJoint1, revoluteJoint2\r\n        revoluteJoint1 = selections.item(0).entity\r\n        revoluteJoint2 = selections.item(1).entity            \r\n            \r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        # Subscribe to events \r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        \r\n        # Run the command\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "August 22, 2016", "footers": "Posted at 08:06 AM in "},
{"title": "Drive robot arm in Fusion", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            paramName = \"\"\r\n            diffVal = 0\r\n            if keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = 0.1\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = 0.1\r\n    \r\n            design = app.activeProduct\r\n            params = design.allParameters   \r\n            \r\n            param = params.itemByName(paramName)\r\n            newVal = param.value + diffVal\r\n            param.value = newVal\r\n            \r\n            adsk.doEvents() \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n\r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_textBox', 'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "August 21, 2016", "footers": "Posted at 11:56 AM in "},
{"title": "Fusion Add-In with MFC", "codeSample": "{\r\n\"autodeskProduct\":\"Fusion360\",\r\n\"type\":\"addin\",\r\n\"author\":\"\",\r\n\"description\":{\"\":\"\"},\r\n\"supportedOS\":\"windows\",\r\n\"editEnabled\":false,\r\n\"id\":\"38EE9339-591A-4F72-AFFF-7B20111CC10C\",\r\n\"version\":\"1.0.0\",\r\n\"runOnStartup\":false\r\n}", "created_at": "February 20, 2016", "footers": "Posted at 10:54 AM in "},
{"title": "Getting the Overall Size of Parts", "codeSample": "def run(context):", "created_at": "June 06, 2017", "footers": "Posted at 01:12 PM in "},
{"title": "Appearance properties", "codeSample": "import adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\ndef exportProperties(properties, indent, outputFile):\r\n    for prop in properties:\r\n        if type(prop) is adsk.core.AppearanceTextureProperty: \r\n            outputFile.writelines(indent + prop.name + \"\\n\")\r\n            try:\r\n                exportProperties(prop.value.properties, indent + \"  \", outputFile)\r\n            except:\r\n                outputFile.writelines(indent + \"  Couldn't get sub properties\\n\")  \r\n        elif type(prop) is adsk.core.ColorProperty:\r\n            if prop.value:\r\n                color = prop.value \r\n                outputFile.writelines(indent + \r\n                    \"red = \" + str(color.red) + \r\n                    \"; green = \" + str(color.green) + \r\n                    \"; blue = \" + str(color.blue) +\"\\n\")\r\n        else:\r\n            outputFile.writelines(indent + prop.name + \" = \" + str(prop.value) + \"\\n\")    \r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n\r\n        fileDialog = ui.createFileDialog()\r\n        fileDialog.isMultiSelectEnabled = False\r\n        fileDialog.title = \"Get the file to save to\"\r\n        fileDialog.filter = 'Text files (*.txt)'\r\n        fileDialog.filterIndex = 0\r\n        dialogResult = fileDialog.showSave()\r\n             \r\n        if dialogResult == adsk.core.DialogResults.DialogOK:\r\n             fileName = fileDialog.filename\r\n        else:\r\n             return      \r\n        \r\n        design = app.activeProduct\r\n        \r\n        with open(fileName, 'w') as outputFile:\r\n            for appearance in design.appearances:\r\n                outputFile.writelines(\">>>>> \" + appearance.name + \" <<<<<\\n\")\r\n                exportProperties(appearance.appearanceProperties, \"  \", outputFile)\r\n            \r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "May 24, 2016", "footers": "Posted at 02:41 AM in "},
{"title": "Parameter I/O issues", "codeSample": "MyParam1,in,", "created_at": "December 30, 2016", "footers": "Posted at 02:36 AM in "},
{"title": "Store and restore occurrence position", "codeSample": "Sub StorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim cells() As Double\r\n  Call occ.Transformation.GetMatrixData(cells)\r\n  \r\n  Dim attValues(15) As Variant\r\n  Dim attNames(15) As String\r\n  Dim attTypes(15) As ValueTypeEnum\r\n  \r\n  Dim i As Integer\r\n  For i = LBound(cells) To UBound(cells)\r\n    attValues(i) = cells(i)\r\n    attNames(i) = kCellNamePrefix + Trim(str(i))\r\n    attTypes(i) = kDoubleType\r\n  Next\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Set attSet = occ.AttributeSets.Add(\"Adam.OccurrencePosition\")\r\n  End If\r\n  \r\n  Dim attEnum As AttributesEnumerator\r\n  ' If the name was not Trim()-ed this would give an error\r\n  Set attEnum = attSet.AddAttributes(attNames, attTypes, attValues, True)\r\nEnd Sub\r\n\r\nSub RestorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Call MsgBox(\"Position data was not stored for this occurrence!\")\r\n    Exit Sub\r\n  End If\r\n  \r\n  Dim cells(15) As Double\r\n  Dim i As Integer\r\n  For i = 0 To 15\r\n    Dim cellName As String\r\n    cellName = kCellNamePrefix + Trim(str(i))\r\n    If Not attSet.NameIsUsed(cellName) Then\r\n      Call MsgBox(\"Not all position data stored for this occurrence!\")\r\n      Exit Sub\r\n    End If\r\n\r\n    cells(i) = attSet(cellName).value\r\n  Next\r\n  \r\n  Dim mx As Matrix\r\n  Set mx = occ.Transformation\r\n  \r\n  Call mx.PutMatrixData(cells)\r\n  \r\n  occ.Transformation = mx\r\nEnd Sub", "created_at": "January 05, 2017", "footers": "Posted at 06:11 AM in "},
{"title": "Fusion Meetups and Melting Butter", "codeSample": "import adsk.core, adsk.fusion, adsk.cam, traceback\n\n", "created_at": "April 21, 2016", "footers": "Posted at 02:58 PM in "},
{"title": "Is point on face", "codeSample": "def isPointOnFace():\r\n    app = adsk.core.Application.get()\r\n    ui  = app.userInterface\r\n    \r\n    selections = app.userInterface.activeSelections\r\n    sketchPoint = selections.item(0).entity\r\n    face = selections.item(1).entity\r\n    \r\n    evaluator = face.evaluator\r\n    point = sketchPoint.worldGeometry\r\n    ui.messageBox(\r\n        \"point, x=\" + str(point.x) + \r\n        \"; y=\" + str(point.y) + \r\n        \"; z=\" + str(point.z))\r\n    (returnValue, parameter) = evaluator.getParameterAtPoint(point)\r\n    ui.messageBox(\r\n        \"parameter, u=\" + str(parameter.x) + \r\n        \"; v=\" + str(parameter.y))\r\n    \r\n    if not returnValue:\r\n        # could not get the parameter for it so\r\n        # it's probably not on the face\r\n        ui.messageBox(\"Point not on face\\n(Could not get parameter)\")\r\n        return\r\n        \r\n    (returnValue, projectedPoint) = evaluator.getPointAtParameter(parameter)\r\n    ui.messageBox(\r\n        \"projectedPoint, x=\" + str(projectedPoint.x) + \r\n        \"; y=\" + str(projectedPoint.y) + \r\n        \"; z=\" + str(projectedPoint.z))\r\n    if not projectedPoint.isEqualTo(point):\r\n        # the point has been projected in order to get \r\n        # a parameter so it's not on the face\r\n        ui.messageBox(\r\n            \"Point not on face\\n(Point was projected in order to get parameter)\")\r\n        return\r\n    \r\n    returnValue = evaluator.isParameterOnFace(parameter)\r\n    if not returnValue:\r\n        ui.messageBox(\"Point not on face\\n(isParameterOnFace says so)\")\r\n        return\r\n    \r\n    ui.messageBox(\"Point on face\")", "created_at": "May 27, 2016", "footers": "Posted at 10:02 AM in "},
{"title": "Prepare your add-in for UI Preview", "codeSample": "modelingWorkspace_ = workspaces_.itemById('FusionSolidEnvironment')\r\ntoolbarPanels_ = modelingWorkspace_.toolbarPanels\r\ntry:\r\n    # try to add it to the classic ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchPanel')\r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\nexcept:\r\n    # if it fails, try to add it to the new ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchCreatePanel') \r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\n# etc", "created_at": "December 18, 2018", "footers": "Posted at 05:37 AM in "},
{"title": "Connect to Fusion Lifecycle from Fusion 360 add-in", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback, json, http.client\r\n\r\ndef login(): \r\n    body = {\r\n        \"userID\": \"<your user id>\", \r\n        \"password\": \"<your password>\"\r\n    }\r\n    h = http.client.HTTPSConnection('<name of your tenant>.autodeskplm360.net')\r\n    headers = {\r\n        'User-Agent': 'Fusion360',\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n    h.request('POST', '/rest/auth/1/login', json.dumps(body), headers)\r\n    res = h.getresponse()\r\n    return res.status, res.reason, res.read()\r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n        \r\n        status, response, data = login()\r\n        dataString = data.decode('utf-8')\r\n        ui.messageBox(dataString)\r\n        \r\n        # parse the json string\r\n        dataObject = json.loads(dataString)\r\n        ui.messageBox(\"My sessionid is \" + dataObject[\"sessionid\"])\r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "February 15, 2017", "footers": "Posted at 07:20 AM in "},
{"title": "Automate creation of Named Geometry", "codeSample": "' Select Face before running this code\r\nDim iLogicAuto = iLogicVb.Automation\r\n\r\nDim namedEntities = iLogicAuto.GetNamedEntities(ThisDoc.Document)\r\n\r\nDim f = ThisDoc.Document.SelectSet(1)\r\n\r\nnamedEntities.SetName(f, \"MyNewFace\")", "created_at": "March 06, 2019", "footers": "Posted at 10:08 AM in "},
{"title": "Use ChromiumWebBrowser from Inventor", "codeSample": "private void InitializeChromium()\r\n{\r\n    CefSettings settings = new CefSettings();\r\n    // Get the folder path of the add-in dll\r\n    string assemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\r\n    settings.BrowserSubprocessPath = Path.Combine(assemblyFolder, \"CefSharp.BrowserSubprocess.exe\");\r\n    Cef.Initialize(settings);\r\n\r\n    ChromeWebBrowser = new ChromiumWebBrowser(\"http://www.google.com\");\r\n    ChromeWebBrowser.LoadError += ChromeWebBrowser_LoadError;\r\n\r\n    this.Controls.Add(ChromeWebBrowser);\r\n    ChromeWebBrowser.Dock = DockStyle.Fill;\r\n}", "created_at": "June 16, 2017", "footers": "Posted at 06:32 AM in "},
{"title": "Troubleshooting, debugging", "codeSample": "Sub StitchFeatureCreate_Test()\r\n    Dim oPartDoc As PartDocument\r\n    Set oPartDoc = ThisApplication.ActiveDocument\r\n\r\n    Dim oCompDef As PartComponentDefinition\r\n    Set oCompDef = oPartDoc.ComponentDefinition\r\n    \r\n    Dim oSurfaces As ObjectCollection\r\n    Set oSurfaces = ThisApplication.TransientObjects.CreateObjectCollection\r\n    \r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(1)\r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(2)\r\n    \r\n    Dim oKnitFeature As KnitFeature\r\n    Set oKnitFeature = oCompDef.Features.KnitFeatures.Add(oSurfaces)\r\nEnd Sub", "created_at": "October 29, 2018", "footers": "Posted at 06:38 AM in "},
{"title": "Accessing iProperties", "codeSample": "Sub GetPropertySets()\r\n  Dim doc As Document\r\n  Set doc = ThisApplication.ActiveDocument\r\n  \r\n  Dim ps As PropertySet\r\n  For Each ps In doc.PropertySets\r\n    Debug.Print ps.Name + \" / \" + ps.InternalName\r\n    Dim p As Property\r\n    For Each p In ps\r\n      Debug.Print \"  \" + p.Name + \" /\" + Str(p.PropId)\r\n    Next\r\n  Next\r\nEnd Sub\r\n", "created_at": "March 04, 2019", "footers": "Posted at 10:29 AM in "}
][
{"title": "Add control to toolbar panel", "codeSample": "# \"toolbarControlPanel_\" is the button control added to the panel \r\ntoolbarControlPanel_.isPromoted = True\r\ntoolbarControlPanel_.isPromotedByDefault = True", "created_at": "September 22, 2015", "footers": "["},
{"title": "Selection object properties become invalid", "codeSample": "var onCommandExecuted = function(args) {\r\n    try {\r\n        var command = adsk.core.Command(args.firingEvent.sender);\r\n        var inputs = command.commandInputs;\r\n\r\n        // both are filtered for vertex selection\r\n        var selection1 = inputs.itemById('selection1').selection(0);\r\n        var selection2 = inputs.itemById('selection2').selection(0);\r\n\r\n        var design = app.activeProduct;\r\n        var root = design.rootComponent;\r\n        var sketches = root.sketches;\r\n        var xyPlane = root.xYConstructionPlane;\r\n\r\n        // Monitor selection1 and selection2 in the object \r\n        // window. As soon as we create a new sketch the \r\n        // variable to the last selected entity will become\r\n        // unavailable >> <not available>\r\n        sketches.add(xyPlane);\r\n        ui.messageBox(\"selection1 >> \" + selection1.", "created_at": "January 20, 2016", "footers": "["},
{"title": "Fusion add-in path", "codeSample": "def getAddInFolder():\r\n    import os\r\n    folderPath = os.path.dirname(os.path.realpath(__file__))\r\n    \r\n    return folderPath", "created_at": "November 02, 2015", "footers": "["},
{"title": "Run Fusion commands", "codeSample": "app = adsk.core.Application.get()\r\nui = app.userInterface\r\n\r\nfileDialog = ui.createFileDialog()\r\nfileDialog.isMultiSelectEnabled = False\r\nfileDialog.title = \"Specify result filename\"\r\nfileDialog.filter = 'Text files (*.txt)'\r\nfileDialog.filterIndex = 0\r\ndialogResult = fileDialog.showSave()\r\nif dialogResult == adsk.core.DialogResults.DialogOK:\r\n    filename = fileDialog.filename\r\nelse:\r\n    return\r\n    \r\ncommandDefinitions = ui.commandDefinitions\r\nresult = \"\"\r\n\r\nfor commandDefinition in commandDefinitions:\r\n    result += \"id = \" + commandDefinition.id + \"; name = \" + commandDefinition.name + \"\\n\"\r\n    \r\noutput = open(filename, 'w')\r\noutput.writelines(result)\r\noutput.close()", "created_at": "January 11, 2016", "footers": "["},
{"title": "Fusion 360 Hackathon - Q&A #1 #2", "codeSample": "def createDirectModelDocument(): \r\n    ui = None \r\n    try: \r\n        app = adsk.core.Application.get() \r\n        ui  = app.userInterface \r\n \r\n        # Get the Fusion specific Design preferences.         \r\n        desPrefs = app.preferences.productPreferences.itemByName('Design') \r\n \r\n        # Save the current value of the setting. \r\n        initialValue = desPrefs.defaultDesignType \r\n \r\n        # Set the value to create a direct edit design.         \r\n        desPrefs.defaultDesignType = \\ \r\n                 adsk.fusion.DefaultDesignTypeOptions.DirectDesignTypeOption \r\n \r\n        # Create a new document. \r\n        app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType) \r\n \r\n        # Set the preference back to the initial value.         \r\n        desPrefs.defaultDesignType = initialValue \r\n         \r\n        ui.messageBox('Success') \r\n    except: \r\n        if ui: \r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))", "created_at": "September 29, 2015", "footers": "["},
{"title": "Extrude profile with hole", "codeSample": "// Put all the profiles in an object collection\r\n// Get the Profiles collection\r\nPtr<Profiles> pProfiles = sketch->profiles();\r\nPtr<ObjectCollection> objectsForExtrude = ObjectCollection::create();\r\nfor each (Ptr<Profile> pProfile in pProfiles)\r\n{\r\n  // Check to see if this is the outer rectangular profile or not\r\n  // by checking the number of loops.  The outer profile will have two\r\n  // loops, one for the rectangle and one for the circle. \r\n  Ptr<ProfileLoops> loops = pProfile->profileLoops();\r\n             \r\n  if (loops->count() > 1)\r\n    objectsForExtrude->add(pProfile);\r\n}", "created_at": "September 30, 2015", "footers": "["},
{"title": "Fusion 360 Hackathon - Q&A #7 #8 #9 #10", "codeSample": "inputs.addImageCommandInput('imageInput', '', './resources/", "created_at": "October 08, 2015", "footers": "["},
{"title": "Use Entitlement API from Fusion add-in", "codeSample": "#include <curl/curl.h>\r\n#include <regex>\r\n\r\nusing namespace std;", "created_at": "October 27, 2015", "footers": "["},
{"title": "Drive robot arm in Fusion", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            paramName = \"\"\r\n            diffVal = 0\r\n            if keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = 0.1\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = 0.1\r\n    \r\n            design = app.activeProduct\r\n            params = design.allParameters   \r\n            \r\n            param = params.itemByName(paramName)\r\n            newVal = param.value + diffVal\r\n            param.value = newVal\r\n            \r\n            adsk.doEvents() \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n\r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_textBox', 'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "August 21, 2016", "footers": "["},
{"title": "Fusion Add-In with MFC", "codeSample": "{\r\n\"autodeskProduct\":\"Fusion360\",\r\n\"type\":\"addin\",\r\n\"author\":\"\",\r\n\"description\":{\"\":\"\"},\r\n\"supportedOS\":\"windows\",\r\n\"editEnabled\":false,\r\n\"id\":\"38EE9339-591A-4F72-AFFF-7B20111CC10C\",\r\n\"version\":\"1.0.0\",\r\n\"runOnStartup\":false\r\n}", "created_at": "February 20, 2016", "footers": "["},
{"title": "Fusion Meetups and Melting Butter", "codeSample": "import adsk.core, adsk.fusion, adsk.cam, traceback\n\n", "created_at": "April 21, 2016", "footers": "["},
{"title": "Appearance properties", "codeSample": "import adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\ndef exportProperties(properties, indent, outputFile):\r\n    for prop in properties:\r\n        if type(prop) is adsk.core.AppearanceTextureProperty: \r\n            outputFile.writelines(indent + prop.name + \"\\n\")\r\n            try:\r\n                exportProperties(prop.value.properties, indent + \"  \", outputFile)\r\n            except:\r\n                outputFile.writelines(indent + \"  Couldn't get sub properties\\n\")  \r\n        elif type(prop) is adsk.core.ColorProperty:\r\n            if prop.value:\r\n                color = prop.value \r\n                outputFile.writelines(indent + \r\n                    \"red = \" + str(color.red) + \r\n                    \"; green = \" + str(color.green) + \r\n                    \"; blue = \" + str(color.blue) +\"\\n\")\r\n        else:\r\n            outputFile.writelines(indent + prop.name + \" = \" + str(prop.value) + \"\\n\")    \r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n\r\n        fileDialog = ui.createFileDialog()\r\n        fileDialog.isMultiSelectEnabled = False\r\n        fileDialog.title = \"Get the file to save to\"\r\n        fileDialog.filter = 'Text files (*.txt)'\r\n        fileDialog.filterIndex = 0\r\n        dialogResult = fileDialog.showSave()\r\n             \r\n        if dialogResult == adsk.core.DialogResults.DialogOK:\r\n             fileName = fileDialog.filename\r\n        else:\r\n             return      \r\n        \r\n        design = app.activeProduct\r\n        \r\n        with open(fileName, 'w') as outputFile:\r\n            for appearance in design.appearances:\r\n                outputFile.writelines(\">>>>> \" + appearance.name + \" <<<<<\\n\")\r\n                exportProperties(appearance.appearanceProperties, \"  \", outputFile)\r\n            \r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "May 24, 2016", "footers": "["},
{"title": "Is point on face", "codeSample": "def isPointOnFace():\r\n    app = adsk.core.Application.get()\r\n    ui  = app.userInterface\r\n    \r\n    selections = app.userInterface.activeSelections\r\n    sketchPoint = selections.item(0).entity\r\n    face = selections.item(1).entity\r\n    \r\n    evaluator = face.evaluator\r\n    point = sketchPoint.worldGeometry\r\n    ui.messageBox(\r\n        \"point, x=\" + str(point.x) + \r\n        \"; y=\" + str(point.y) + \r\n        \"; z=\" + str(point.z))\r\n    (returnValue, parameter) = evaluator.getParameterAtPoint(point)\r\n    ui.messageBox(\r\n        \"parameter, u=\" + str(parameter.x) + \r\n        \"; v=\" + str(parameter.y))\r\n    \r\n    if not returnValue:\r\n        # could not get the parameter for it so\r\n        # it's probably not on the face\r\n        ui.messageBox(\"Point not on face\\n(Could not get parameter)\")\r\n        return\r\n        \r\n    (returnValue, projectedPoint) = evaluator.getPointAtParameter(parameter)\r\n    ui.messageBox(\r\n        \"projectedPoint, x=\" + str(projectedPoint.x) + \r\n        \"; y=\" + str(projectedPoint.y) + \r\n        \"; z=\" + str(projectedPoint.z))\r\n    if not projectedPoint.isEqualTo(point):\r\n        # the point has been projected in order to get \r\n        # a parameter so it's not on the face\r\n        ui.messageBox(\r\n            \"Point not on face\\n(Point was projected in order to get parameter)\")\r\n        return\r\n    \r\n    returnValue = evaluator.isParameterOnFace(parameter)\r\n    if not returnValue:\r\n        ui.messageBox(\"Point not on face\\n(isParameterOnFace says so)\")\r\n        return\r\n    \r\n    ui.messageBox(\"Point on face\")", "created_at": "May 27, 2016", "footers": "["},
{"title": "Parameter I/O issues", "codeSample": "MyParam1,in,", "created_at": "December 30, 2016", "footers": "["},
{"title": "Drive robot arm in Fusion - update", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\nrevoluteJoint1 = None\r\nrevoluteJoint2 = None\r\nisReverseUpDown = False\r\nisReverseLeftRight = False\r\nrevolutionStep = 0.1\r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            if keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep\r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep               \r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            \r\n            # Refresh the view to show the change\r\n            vp = app.activeViewport\r\n            vp.refresh()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n# Event handler for the inputChanged event.\r\nclass MyInputChangedHandler(adsk.core.InputChangedEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.InputChangedEventArgs.cast(args)\r\n\r\n        commandInput = eventArgs.input\r\n        if commandInput.id == commandName + '_step':\r\n            global revolutionStep\r\n            revolutionStep = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseUpDown':\r\n            global isReverseUpDown\r\n            isReverseUpDown = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseLeftRight':\r\n            global isReverseLeftRight\r\n            isReverseLeftRight = commandInput.value\r\n        \r\n        \r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            # Subscribe to the various command events\r\n            onInputChanged = MyInputChangedHandler()\r\n            command.inputChanged.add(onInputChanged)\r\n            handlers.append(onInputChanged)\r\n\r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_usage', \r\n                'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n            inputs.addValueInput(\r\n                commandName + '_step', \r\n                'Rotation step: ',\r\n                'deg',\r\n                adsk.core.ValueInput.createByReal(revolutionStep))                \r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseUpDown',\r\n                'Reverse Up/Down direction',\r\n                True,\r\n                '',\r\n                isReverseUpDown)\r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseLeftRight',\r\n                'Reverse Left/Right direction',\r\n                True,\r\n                '',\r\n                isReverseLeftRight) \r\n                \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n            \r\n        # Get selected Revolute Joints to work on \r\n        selections = app.userInterface.activeSelections\r\n        if selections.count != 2:\r\n            ui.messageBox(\"The 2 revolute joints you want to control need to be selected before running the command!\")\r\n            return\r\n        \r\n        global revoluteJoint1, revoluteJoint2\r\n        revoluteJoint1 = selections.item(0).entity\r\n        revoluteJoint2 = selections.item(1).entity            \r\n            \r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        # Subscribe to events \r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        \r\n        # Run the command\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "August 22, 2016", "footers": "["},
{"title": "Store and restore occurrence position", "codeSample": "Sub StorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim cells() As Double\r\n  Call occ.Transformation.GetMatrixData(cells)\r\n  \r\n  Dim attValues(15) As Variant\r\n  Dim attNames(15) As String\r\n  Dim attTypes(15) As ValueTypeEnum\r\n  \r\n  Dim i As Integer\r\n  For i = LBound(cells) To UBound(cells)\r\n    attValues(i) = cells(i)\r\n    attNames(i) = kCellNamePrefix + Trim(str(i))\r\n    attTypes(i) = kDoubleType\r\n  Next\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Set attSet = occ.AttributeSets.Add(\"Adam.OccurrencePosition\")\r\n  End If\r\n  \r\n  Dim attEnum As AttributesEnumerator\r\n  ' If the name was not Trim()-ed this would give an error\r\n  Set attEnum = attSet.AddAttributes(attNames, attTypes, attValues, True)\r\nEnd Sub\r\n\r\nSub RestorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Call MsgBox(\"Position data was not stored for this occurrence!\")\r\n    Exit Sub\r\n  End If\r\n  \r\n  Dim cells(15) As Double\r\n  Dim i As Integer\r\n  For i = 0 To 15\r\n    Dim cellName As String\r\n    cellName = kCellNamePrefix + Trim(str(i))\r\n    If Not attSet.NameIsUsed(cellName) Then\r\n      Call MsgBox(\"Not all position data stored for this occurrence!\")\r\n      Exit Sub\r\n    End If\r\n\r\n    cells(i) = attSet(cellName).value\r\n  Next\r\n  \r\n  Dim mx As Matrix\r\n  Set mx = occ.Transformation\r\n  \r\n  Call mx.PutMatrixData(cells)\r\n  \r\n  occ.Transformation = mx\r\nEnd Sub", "created_at": "January 05, 2017", "footers": "["},
{"title": "Troubleshooting, debugging", "codeSample": "Sub StitchFeatureCreate_Test()\r\n    Dim oPartDoc As PartDocument\r\n    Set oPartDoc = ThisApplication.ActiveDocument\r\n\r\n    Dim oCompDef As PartComponentDefinition\r\n    Set oCompDef = oPartDoc.ComponentDefinition\r\n    \r\n    Dim oSurfaces As ObjectCollection\r\n    Set oSurfaces = ThisApplication.TransientObjects.CreateObjectCollection\r\n    \r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(1)\r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(2)\r\n    \r\n    Dim oKnitFeature As KnitFeature\r\n    Set oKnitFeature = oCompDef.Features.KnitFeatures.Add(oSurfaces)\r\nEnd Sub", "created_at": "October 29, 2018", "footers": "["},
{"title": "Prepare your add-in for UI Preview", "codeSample": "modelingWorkspace_ = workspaces_.itemById('FusionSolidEnvironment')\r\ntoolbarPanels_ = modelingWorkspace_.toolbarPanels\r\ntry:\r\n    # try to add it to the classic ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchPanel')\r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\nexcept:\r\n    # if it fails, try to add it to the new ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchCreatePanel') \r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\n# etc", "created_at": "December 18, 2018", "footers": "["},
{"title": "Connect to Fusion Lifecycle from Fusion 360 add-in", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback, json, http.client\r\n\r\ndef login(): \r\n    body = {\r\n        \"userID\": \"<your user id>\", \r\n        \"password\": \"<your password>\"\r\n    }\r\n    h = http.client.HTTPSConnection('<name of your tenant>.autodeskplm360.net')\r\n    headers = {\r\n        'User-Agent': 'Fusion360',\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n    h.request('POST', '/rest/auth/1/login', json.dumps(body), headers)\r\n    res = h.getresponse()\r\n    return res.status, res.reason, res.read()\r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n        \r\n        status, response, data = login()\r\n        dataString = data.decode('utf-8')\r\n        ui.messageBox(dataString)\r\n        \r\n        # parse the json string\r\n        dataObject = json.loads(dataString)\r\n        ui.messageBox(\"My sessionid is \" + dataObject[\"sessionid\"])\r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "February 15, 2017", "footers": "["},
{"title": "Automate creation of Named Geometry", "codeSample": "' Select Face before running this code\r\nDim iLogicAuto = iLogicVb.Automation\r\n\r\nDim namedEntities = iLogicAuto.GetNamedEntities(ThisDoc.Document)\r\n\r\nDim f = ThisDoc.Document.SelectSet(1)\r\n\r\nnamedEntities.SetName(f, \"MyNewFace\")", "created_at": "March 06, 2019", "footers": "["},
{"title": "Use ChromiumWebBrowser from Inventor", "codeSample": "private void InitializeChromium()\r\n{\r\n    CefSettings settings = new CefSettings();\r\n    // Get the folder path of the add-in dll\r\n    string assemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\r\n    settings.BrowserSubprocessPath = Path.Combine(assemblyFolder, \"CefSharp.BrowserSubprocess.exe\");\r\n    Cef.Initialize(settings);\r\n\r\n    ChromeWebBrowser = new ChromiumWebBrowser(\"http://www.google.com\");\r\n    ChromeWebBrowser.LoadError += ChromeWebBrowser_LoadError;\r\n\r\n    this.Controls.Add(ChromeWebBrowser);\r\n    ChromeWebBrowser.Dock = DockStyle.Fill;\r\n}", "created_at": "June 16, 2017", "footers": "["},
{"title": "Accessing iProperties", "codeSample": "Sub GetPropertySets()\r\n  Dim doc As Document\r\n  Set doc = ThisApplication.ActiveDocument\r\n  \r\n  Dim ps As PropertySet\r\n  For Each ps In doc.PropertySets\r\n    Debug.Print ps.Name + \" / \" + ps.InternalName\r\n    Dim p As Property\r\n    For Each p In ps\r\n      Debug.Print \"  \" + p.Name + \" /\" + Str(p.PropId)\r\n    Next\r\n  Next\r\nEnd Sub\r\n", "created_at": "March 04, 2019", "footers": "["},
{"title": "Getting the Overall Size of Parts", "codeSample": "def run(context):", "created_at": "June 06, 2017", "footers": "["}
][
{"title": "Run Fusion commands", "codeSample": "app = adsk.core.Application.get()\r\nui = app.userInterface\r\n\r\nfileDialog = ui.createFileDialog()\r\nfileDialog.isMultiSelectEnabled = False\r\nfileDialog.title = \"Specify result filename\"\r\nfileDialog.filter = 'Text files (*.txt)'\r\nfileDialog.filterIndex = 0\r\ndialogResult = fileDialog.showSave()\r\nif dialogResult == adsk.core.DialogResults.DialogOK:\r\n    filename = fileDialog.filename\r\nelse:\r\n    return\r\n    \r\ncommandDefinitions = ui.commandDefinitions\r\nresult = \"\"\r\n\r\nfor commandDefinition in commandDefinitions:\r\n    result += \"id = \" + commandDefinition.id + \"; name = \" + commandDefinition.name + \"\\n\"\r\n    \r\noutput = open(filename, 'w')\r\noutput.writelines(result)\r\noutput.close()", "created_at": "January 11, 2016", "footers": "["},
{"title": "Extrude profile with hole", "codeSample": "// Put all the profiles in an object collection\r\n// Get the Profiles collection\r\nPtr<Profiles> pProfiles = sketch->profiles();\r\nPtr<ObjectCollection> objectsForExtrude = ObjectCollection::create();\r\nfor each (Ptr<Profile> pProfile in pProfiles)\r\n{\r\n  // Check to see if this is the outer rectangular profile or not\r\n  // by checking the number of loops.  The outer profile will have two\r\n  // loops, one for the rectangle and one for the circle. \r\n  Ptr<ProfileLoops> loops = pProfile->profileLoops();\r\n             \r\n  if (loops->count() > 1)\r\n    objectsForExtrude->add(pProfile);\r\n}", "created_at": "September 30, 2015", "footers": "["},
{"title": "Add control to toolbar panel", "codeSample": "# \"toolbarControlPanel_\" is the button control added to the panel \r\ntoolbarControlPanel_.isPromoted = True\r\ntoolbarControlPanel_.isPromotedByDefault = True", "created_at": "September 22, 2015", "footers": "["},
{"title": "Fusion 360 Hackathon - Q&A #7 #8 #9 #10", "codeSample": "inputs.addImageCommandInput('imageInput', '', './resources/", "created_at": "October 08, 2015", "footers": "["},
{"title": "Use Entitlement API from Fusion add-in", "codeSample": "#include <curl/curl.h>\r\n#include <regex>\r\n\r\nusing namespace std;", "created_at": "October 27, 2015", "footers": "["},
{"title": "Fusion 360 Hackathon - Q&A #1 #2", "codeSample": "def createDirectModelDocument(): \r\n    ui = None \r\n    try: \r\n        app = adsk.core.Application.get() \r\n        ui  = app.userInterface \r\n \r\n        # Get the Fusion specific Design preferences.         \r\n        desPrefs = app.preferences.productPreferences.itemByName('Design') \r\n \r\n        # Save the current value of the setting. \r\n        initialValue = desPrefs.defaultDesignType \r\n \r\n        # Set the value to create a direct edit design.         \r\n        desPrefs.defaultDesignType = \\ \r\n                 adsk.fusion.DefaultDesignTypeOptions.DirectDesignTypeOption \r\n \r\n        # Create a new document. \r\n        app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType) \r\n \r\n        # Set the preference back to the initial value.         \r\n        desPrefs.defaultDesignType = initialValue \r\n         \r\n        ui.messageBox('Success') \r\n    except: \r\n        if ui: \r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))", "created_at": "September 29, 2015", "footers": "["},
{"title": "Fusion add-in path", "codeSample": "def getAddInFolder():\r\n    import os\r\n    folderPath = os.path.dirname(os.path.realpath(__file__))\r\n    \r\n    return folderPath", "created_at": "November 02, 2015", "footers": "["},
{"title": "Selection object properties become invalid", "codeSample": "var onCommandExecuted = function(args) {\r\n    try {\r\n        var command = adsk.core.Command(args.firingEvent.sender);\r\n        var inputs = command.commandInputs;\r\n\r\n        // both are filtered for vertex selection\r\n        var selection1 = inputs.itemById('selection1').selection(0);\r\n        var selection2 = inputs.itemById('selection2').selection(0);\r\n\r\n        var design = app.activeProduct;\r\n        var root = design.rootComponent;\r\n        var sketches = root.sketches;\r\n        var xyPlane = root.xYConstructionPlane;\r\n\r\n        // Monitor selection1 and selection2 in the object \r\n        // window. As soon as we create a new sketch the \r\n        // variable to the last selected entity will become\r\n        // unavailable >> <not available>\r\n        sketches.add(xyPlane);\r\n        ui.messageBox(\"selection1 >> \" + selection1.", "created_at": "January 20, 2016", "footers": "["},
{"title": "Fusion Meetups and Melting Butter", "codeSample": "import adsk.core, adsk.fusion, adsk.cam, traceback\n\n", "created_at": "April 21, 2016", "footers": "["},
{"title": "Store and restore occurrence position", "codeSample": "Sub StorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim cells() As Double\r\n  Call occ.Transformation.GetMatrixData(cells)\r\n  \r\n  Dim attValues(15) As Variant\r\n  Dim attNames(15) As String\r\n  Dim attTypes(15) As ValueTypeEnum\r\n  \r\n  Dim i As Integer\r\n  For i = LBound(cells) To UBound(cells)\r\n    attValues(i) = cells(i)\r\n    attNames(i) = kCellNamePrefix + Trim(str(i))\r\n    attTypes(i) = kDoubleType\r\n  Next\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Set attSet = occ.AttributeSets.Add(\"Adam.OccurrencePosition\")\r\n  End If\r\n  \r\n  Dim attEnum As AttributesEnumerator\r\n  ' If the name was not Trim()-ed this would give an error\r\n  Set attEnum = attSet.AddAttributes(attNames, attTypes, attValues, True)\r\nEnd Sub\r\n\r\nSub RestorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Call MsgBox(\"Position data was not stored for this occurrence!\")\r\n    Exit Sub\r\n  End If\r\n  \r\n  Dim cells(15) As Double\r\n  Dim i As Integer\r\n  For i = 0 To 15\r\n    Dim cellName As String\r\n    cellName = kCellNamePrefix + Trim(str(i))\r\n    If Not attSet.NameIsUsed(cellName) Then\r\n      Call MsgBox(\"Not all position data stored for this occurrence!\")\r\n      Exit Sub\r\n    End If\r\n\r\n    cells(i) = attSet(cellName).value\r\n  Next\r\n  \r\n  Dim mx As Matrix\r\n  Set mx = occ.Transformation\r\n  \r\n  Call mx.PutMatrixData(cells)\r\n  \r\n  occ.Transformation = mx\r\nEnd Sub", "created_at": "January 05, 2017", "footers": "["},
{"title": "Fusion Add-In with MFC", "codeSample": "{\r\n\"autodeskProduct\":\"Fusion360\",\r\n\"type\":\"addin\",\r\n\"author\":\"\",\r\n\"description\":{\"\":\"\"},\r\n\"supportedOS\":\"windows\",\r\n\"editEnabled\":false,\r\n\"id\":\"38EE9339-591A-4F72-AFFF-7B20111CC10C\",\r\n\"version\":\"1.0.0\",\r\n\"runOnStartup\":false\r\n}", "created_at": "February 20, 2016", "footers": "["},
{"title": "Parameter I/O issues", "codeSample": "MyParam1,in,", "created_at": "December 30, 2016", "footers": "["},
{"title": "Drive robot arm in Fusion", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            paramName = \"\"\r\n            diffVal = 0\r\n            if keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = 0.1\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = 0.1\r\n    \r\n            design = app.activeProduct\r\n            params = design.allParameters   \r\n            \r\n            param = params.itemByName(paramName)\r\n            newVal = param.value + diffVal\r\n            param.value = newVal\r\n            \r\n            adsk.doEvents() \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n\r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_textBox', 'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "August 21, 2016", "footers": "["},
{"title": "Appearance properties", "codeSample": "import adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\ndef exportProperties(properties, indent, outputFile):\r\n    for prop in properties:\r\n        if type(prop) is adsk.core.AppearanceTextureProperty: \r\n            outputFile.writelines(indent + prop.name + \"\\n\")\r\n            try:\r\n                exportProperties(prop.value.properties, indent + \"  \", outputFile)\r\n            except:\r\n                outputFile.writelines(indent + \"  Couldn't get sub properties\\n\")  \r\n        elif type(prop) is adsk.core.ColorProperty:\r\n            if prop.value:\r\n                color = prop.value \r\n                outputFile.writelines(indent + \r\n                    \"red = \" + str(color.red) + \r\n                    \"; green = \" + str(color.green) + \r\n                    \"; blue = \" + str(color.blue) +\"\\n\")\r\n        else:\r\n            outputFile.writelines(indent + prop.name + \" = \" + str(prop.value) + \"\\n\")    \r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n\r\n        fileDialog = ui.createFileDialog()\r\n        fileDialog.isMultiSelectEnabled = False\r\n        fileDialog.title = \"Get the file to save to\"\r\n        fileDialog.filter = 'Text files (*.txt)'\r\n        fileDialog.filterIndex = 0\r\n        dialogResult = fileDialog.showSave()\r\n             \r\n        if dialogResult == adsk.core.DialogResults.DialogOK:\r\n             fileName = fileDialog.filename\r\n        else:\r\n             return      \r\n        \r\n        design = app.activeProduct\r\n        \r\n        with open(fileName, 'w') as outputFile:\r\n            for appearance in design.appearances:\r\n                outputFile.writelines(\">>>>> \" + appearance.name + \" <<<<<\\n\")\r\n                exportProperties(appearance.appearanceProperties, \"  \", outputFile)\r\n            \r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "May 24, 2016", "footers": "["},
{"title": "Is point on face", "codeSample": "def isPointOnFace():\r\n    app = adsk.core.Application.get()\r\n    ui  = app.userInterface\r\n    \r\n    selections = app.userInterface.activeSelections\r\n    sketchPoint = selections.item(0).entity\r\n    face = selections.item(1).entity\r\n    \r\n    evaluator = face.evaluator\r\n    point = sketchPoint.worldGeometry\r\n    ui.messageBox(\r\n        \"point, x=\" + str(point.x) + \r\n        \"; y=\" + str(point.y) + \r\n        \"; z=\" + str(point.z))\r\n    (returnValue, parameter) = evaluator.getParameterAtPoint(point)\r\n    ui.messageBox(\r\n        \"parameter, u=\" + str(parameter.x) + \r\n        \"; v=\" + str(parameter.y))\r\n    \r\n    if not returnValue:\r\n        # could not get the parameter for it so\r\n        # it's probably not on the face\r\n        ui.messageBox(\"Point not on face\\n(Could not get parameter)\")\r\n        return\r\n        \r\n    (returnValue, projectedPoint) = evaluator.getPointAtParameter(parameter)\r\n    ui.messageBox(\r\n        \"projectedPoint, x=\" + str(projectedPoint.x) + \r\n        \"; y=\" + str(projectedPoint.y) + \r\n        \"; z=\" + str(projectedPoint.z))\r\n    if not projectedPoint.isEqualTo(point):\r\n        # the point has been projected in order to get \r\n        # a parameter so it's not on the face\r\n        ui.messageBox(\r\n            \"Point not on face\\n(Point was projected in order to get parameter)\")\r\n        return\r\n    \r\n    returnValue = evaluator.isParameterOnFace(parameter)\r\n    if not returnValue:\r\n        ui.messageBox(\"Point not on face\\n(isParameterOnFace says so)\")\r\n        return\r\n    \r\n    ui.messageBox(\"Point on face\")", "created_at": "May 27, 2016", "footers": "["},
{"title": "Troubleshooting, debugging", "codeSample": "Sub StitchFeatureCreate_Test()\r\n    Dim oPartDoc As PartDocument\r\n    Set oPartDoc = ThisApplication.ActiveDocument\r\n\r\n    Dim oCompDef As PartComponentDefinition\r\n    Set oCompDef = oPartDoc.ComponentDefinition\r\n    \r\n    Dim oSurfaces As ObjectCollection\r\n    Set oSurfaces = ThisApplication.TransientObjects.CreateObjectCollection\r\n    \r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(1)\r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(2)\r\n    \r\n    Dim oKnitFeature As KnitFeature\r\n    Set oKnitFeature = oCompDef.Features.KnitFeatures.Add(oSurfaces)\r\nEnd Sub", "created_at": "October 29, 2018", "footers": "["},
{"title": "Connect to Fusion Lifecycle from Fusion 360 add-in", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback, json, http.client\r\n\r\ndef login(): \r\n    body = {\r\n        \"userID\": \"<your user id>\", \r\n        \"password\": \"<your password>\"\r\n    }\r\n    h = http.client.HTTPSConnection('<name of your tenant>.autodeskplm360.net')\r\n    headers = {\r\n        'User-Agent': 'Fusion360',\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n    h.request('POST', '/rest/auth/1/login', json.dumps(body), headers)\r\n    res = h.getresponse()\r\n    return res.status, res.reason, res.read()\r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n        \r\n        status, response, data = login()\r\n        dataString = data.decode('utf-8')\r\n        ui.messageBox(dataString)\r\n        \r\n        # parse the json string\r\n        dataObject = json.loads(dataString)\r\n        ui.messageBox(\"My sessionid is \" + dataObject[\"sessionid\"])\r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "February 15, 2017", "footers": "["},
{"title": "Drive robot arm in Fusion - update", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\nrevoluteJoint1 = None\r\nrevoluteJoint2 = None\r\nisReverseUpDown = False\r\nisReverseLeftRight = False\r\nrevolutionStep = 0.1\r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            if keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep\r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep               \r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            \r\n            # Refresh the view to show the change\r\n            vp = app.activeViewport\r\n            vp.refresh()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n# Event handler for the inputChanged event.\r\nclass MyInputChangedHandler(adsk.core.InputChangedEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.InputChangedEventArgs.cast(args)\r\n\r\n        commandInput = eventArgs.input\r\n        if commandInput.id == commandName + '_step':\r\n            global revolutionStep\r\n            revolutionStep = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseUpDown':\r\n            global isReverseUpDown\r\n            isReverseUpDown = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseLeftRight':\r\n            global isReverseLeftRight\r\n            isReverseLeftRight = commandInput.value\r\n        \r\n        \r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            # Subscribe to the various command events\r\n            onInputChanged = MyInputChangedHandler()\r\n            command.inputChanged.add(onInputChanged)\r\n            handlers.append(onInputChanged)\r\n\r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_usage', \r\n                'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n            inputs.addValueInput(\r\n                commandName + '_step', \r\n                'Rotation step: ',\r\n                'deg',\r\n                adsk.core.ValueInput.createByReal(revolutionStep))                \r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseUpDown',\r\n                'Reverse Up/Down direction',\r\n                True,\r\n                '',\r\n                isReverseUpDown)\r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseLeftRight',\r\n                'Reverse Left/Right direction',\r\n                True,\r\n                '',\r\n                isReverseLeftRight) \r\n                \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n            \r\n        # Get selected Revolute Joints to work on \r\n        selections = app.userInterface.activeSelections\r\n        if selections.count != 2:\r\n            ui.messageBox(\"The 2 revolute joints you want to control need to be selected before running the command!\")\r\n            return\r\n        \r\n        global revoluteJoint1, revoluteJoint2\r\n        revoluteJoint1 = selections.item(0).entity\r\n        revoluteJoint2 = selections.item(1).entity            \r\n            \r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        # Subscribe to events \r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        \r\n        # Run the command\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "August 22, 2016", "footers": "["},
{"title": "Prepare your add-in for UI Preview", "codeSample": "modelingWorkspace_ = workspaces_.itemById('FusionSolidEnvironment')\r\ntoolbarPanels_ = modelingWorkspace_.toolbarPanels\r\ntry:\r\n    # try to add it to the classic ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchPanel')\r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\nexcept:\r\n    # if it fails, try to add it to the new ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchCreatePanel') \r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\n# etc", "created_at": "December 18, 2018", "footers": "["},
{"title": "Getting the Overall Size of Parts", "codeSample": "def run(context):", "created_at": "June 06, 2017", "footers": "["},
{"title": "Use ChromiumWebBrowser from Inventor", "codeSample": "private void InitializeChromium()\r\n{\r\n    CefSettings settings = new CefSettings();\r\n    // Get the folder path of the add-in dll\r\n    string assemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\r\n    settings.BrowserSubprocessPath = Path.Combine(assemblyFolder, \"CefSharp.BrowserSubprocess.exe\");\r\n    Cef.Initialize(settings);\r\n\r\n    ChromeWebBrowser = new ChromiumWebBrowser(\"http://www.google.com\");\r\n    ChromeWebBrowser.LoadError += ChromeWebBrowser_LoadError;\r\n\r\n    this.Controls.Add(ChromeWebBrowser);\r\n    ChromeWebBrowser.Dock = DockStyle.Fill;\r\n}", "created_at": "June 16, 2017", "footers": "["},
{"title": "Accessing iProperties", "codeSample": "Sub GetPropertySets()\r\n  Dim doc As Document\r\n  Set doc = ThisApplication.ActiveDocument\r\n  \r\n  Dim ps As PropertySet\r\n  For Each ps In doc.PropertySets\r\n    Debug.Print ps.Name + \" / \" + ps.InternalName\r\n    Dim p As Property\r\n    For Each p In ps\r\n      Debug.Print \"  \" + p.Name + \" /\" + Str(p.PropId)\r\n    Next\r\n  Next\r\nEnd Sub\r\n", "created_at": "March 04, 2019", "footers": "["},
{"title": "Automate creation of Named Geometry", "codeSample": "' Select Face before running this code\r\nDim iLogicAuto = iLogicVb.Automation\r\n\r\nDim namedEntities = iLogicAuto.GetNamedEntities(ThisDoc.Document)\r\n\r\nDim f = ThisDoc.Document.SelectSet(1)\r\n\r\nnamedEntities.SetName(f, \"MyNewFace\")", "created_at": "March 06, 2019", "footers": "["}
][
{"title": "Add control to toolbar panel", "codeSample": "# \"toolbarControlPanel_\" is the button control added to the panel \r\ntoolbarControlPanel_.isPromoted = True\r\ntoolbarControlPanel_.isPromotedByDefault = True", "created_at": "September 22, 2015", "footers": "["},
{"title": "Run Fusion commands", "codeSample": "app = adsk.core.Application.get()\r\nui = app.userInterface\r\n\r\nfileDialog = ui.createFileDialog()\r\nfileDialog.isMultiSelectEnabled = False\r\nfileDialog.title = \"Specify result filename\"\r\nfileDialog.filter = 'Text files (*.txt)'\r\nfileDialog.filterIndex = 0\r\ndialogResult = fileDialog.showSave()\r\nif dialogResult == adsk.core.DialogResults.DialogOK:\r\n    filename = fileDialog.filename\r\nelse:\r\n    return\r\n    \r\ncommandDefinitions = ui.commandDefinitions\r\nresult = \"\"\r\n\r\nfor commandDefinition in commandDefinitions:\r\n    result += \"id = \" + commandDefinition.id + \"; name = \" + commandDefinition.name + \"\\n\"\r\n    \r\noutput = open(filename, 'w')\r\noutput.writelines(result)\r\noutput.close()", "created_at": "January 11, 2016", "footers": "["},
{"title": "Fusion 360 Hackathon - Q&A #1 #2", "codeSample": "def createDirectModelDocument(): \r\n    ui = None \r\n    try: \r\n        app = adsk.core.Application.get() \r\n        ui  = app.userInterface \r\n \r\n        # Get the Fusion specific Design preferences.         \r\n        desPrefs = app.preferences.productPreferences.itemByName('Design') \r\n \r\n        # Save the current value of the setting. \r\n        initialValue = desPrefs.defaultDesignType \r\n \r\n        # Set the value to create a direct edit design.         \r\n        desPrefs.defaultDesignType = \\ \r\n                 adsk.fusion.DefaultDesignTypeOptions.DirectDesignTypeOption \r\n \r\n        # Create a new document. \r\n        app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType) \r\n \r\n        # Set the preference back to the initial value.         \r\n        desPrefs.defaultDesignType = initialValue \r\n         \r\n        ui.messageBox('Success') \r\n    except: \r\n        if ui: \r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))", "created_at": "September 29, 2015", "footers": "["},
{"title": "Fusion 360 Hackathon - Q&A #7 #8 #9 #10", "codeSample": "inputs.addImageCommandInput('imageInput', '', './resources/", "created_at": "October 08, 2015", "footers": "["},
{"title": "Extrude profile with hole", "codeSample": "// Put all the profiles in an object collection\r\n// Get the Profiles collection\r\nPtr<Profiles> pProfiles = sketch->profiles();\r\nPtr<ObjectCollection> objectsForExtrude = ObjectCollection::create();\r\nfor each (Ptr<Profile> pProfile in pProfiles)\r\n{\r\n  // Check to see if this is the outer rectangular profile or not\r\n  // by checking the number of loops.  The outer profile will have two\r\n  // loops, one for the rectangle and one for the circle. \r\n  Ptr<ProfileLoops> loops = pProfile->profileLoops();\r\n             \r\n  if (loops->count() > 1)\r\n    objectsForExtrude->add(pProfile);\r\n}", "created_at": "September 30, 2015", "footers": "["},
{"title": "Fusion add-in path", "codeSample": "def getAddInFolder():\r\n    import os\r\n    folderPath = os.path.dirname(os.path.realpath(__file__))\r\n    \r\n    return folderPath", "created_at": "November 02, 2015", "footers": "["},
{"title": "Use Entitlement API from Fusion add-in", "codeSample": "#include <curl/curl.h>\r\n#include <regex>\r\n\r\nusing namespace std;", "created_at": "October 27, 2015", "footers": "["},
{"title": "Selection object properties become invalid", "codeSample": "var onCommandExecuted = function(args) {\r\n    try {\r\n        var command = adsk.core.Command(args.firingEvent.sender);\r\n        var inputs = command.commandInputs;\r\n\r\n        // both are filtered for vertex selection\r\n        var selection1 = inputs.itemById('selection1').selection(0);\r\n        var selection2 = inputs.itemById('selection2').selection(0);\r\n\r\n        var design = app.activeProduct;\r\n        var root = design.rootComponent;\r\n        var sketches = root.sketches;\r\n        var xyPlane = root.xYConstructionPlane;\r\n\r\n        // Monitor selection1 and selection2 in the object \r\n        // window. As soon as we create a new sketch the \r\n        // variable to the last selected entity will become\r\n        // unavailable >> <not available>\r\n        sketches.add(xyPlane);\r\n        ui.messageBox(\"selection1 >> \" + selection1.", "created_at": "January 20, 2016", "footers": "["},
{"title": "Fusion Add-In with MFC", "codeSample": "{\r\n\"autodeskProduct\":\"Fusion360\",\r\n\"type\":\"addin\",\r\n\"author\":\"\",\r\n\"description\":{\"\":\"\"},\r\n\"supportedOS\":\"windows\",\r\n\"editEnabled\":false,\r\n\"id\":\"38EE9339-591A-4F72-AFFF-7B20111CC10C\",\r\n\"version\":\"1.0.0\",\r\n\"runOnStartup\":false\r\n}", "created_at": "February 20, 2016", "footers": "["},
{"title": "Store and restore occurrence position", "codeSample": "Sub StorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim cells() As Double\r\n  Call occ.Transformation.GetMatrixData(cells)\r\n  \r\n  Dim attValues(15) As Variant\r\n  Dim attNames(15) As String\r\n  Dim attTypes(15) As ValueTypeEnum\r\n  \r\n  Dim i As Integer\r\n  For i = LBound(cells) To UBound(cells)\r\n    attValues(i) = cells(i)\r\n    attNames(i) = kCellNamePrefix + Trim(str(i))\r\n    attTypes(i) = kDoubleType\r\n  Next\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Set attSet = occ.AttributeSets.Add(\"Adam.OccurrencePosition\")\r\n  End If\r\n  \r\n  Dim attEnum As AttributesEnumerator\r\n  ' If the name was not Trim()-ed this would give an error\r\n  Set attEnum = attSet.AddAttributes(attNames, attTypes, attValues, True)\r\nEnd Sub\r\n\r\nSub RestorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Call MsgBox(\"Position data was not stored for this occurrence!\")\r\n    Exit Sub\r\n  End If\r\n  \r\n  Dim cells(15) As Double\r\n  Dim i As Integer\r\n  For i = 0 To 15\r\n    Dim cellName As String\r\n    cellName = kCellNamePrefix + Trim(str(i))\r\n    If Not attSet.NameIsUsed(cellName) Then\r\n      Call MsgBox(\"Not all position data stored for this occurrence!\")\r\n      Exit Sub\r\n    End If\r\n\r\n    cells(i) = attSet(cellName).value\r\n  Next\r\n  \r\n  Dim mx As Matrix\r\n  Set mx = occ.Transformation\r\n  \r\n  Call mx.PutMatrixData(cells)\r\n  \r\n  occ.Transformation = mx\r\nEnd Sub", "created_at": "January 05, 2017", "footers": "["},
{"title": "Appearance properties", "codeSample": "import adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\ndef exportProperties(properties, indent, outputFile):\r\n    for prop in properties:\r\n        if type(prop) is adsk.core.AppearanceTextureProperty: \r\n            outputFile.writelines(indent + prop.name + \"\\n\")\r\n            try:\r\n                exportProperties(prop.value.properties, indent + \"  \", outputFile)\r\n            except:\r\n                outputFile.writelines(indent + \"  Couldn't get sub properties\\n\")  \r\n        elif type(prop) is adsk.core.ColorProperty:\r\n            if prop.value:\r\n                color = prop.value \r\n                outputFile.writelines(indent + \r\n                    \"red = \" + str(color.red) + \r\n                    \"; green = \" + str(color.green) + \r\n                    \"; blue = \" + str(color.blue) +\"\\n\")\r\n        else:\r\n            outputFile.writelines(indent + prop.name + \" = \" + str(prop.value) + \"\\n\")    \r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n\r\n        fileDialog = ui.createFileDialog()\r\n        fileDialog.isMultiSelectEnabled = False\r\n        fileDialog.title = \"Get the file to save to\"\r\n        fileDialog.filter = 'Text files (*.txt)'\r\n        fileDialog.filterIndex = 0\r\n        dialogResult = fileDialog.showSave()\r\n             \r\n        if dialogResult == adsk.core.DialogResults.DialogOK:\r\n             fileName = fileDialog.filename\r\n        else:\r\n             return      \r\n        \r\n        design = app.activeProduct\r\n        \r\n        with open(fileName, 'w') as outputFile:\r\n            for appearance in design.appearances:\r\n                outputFile.writelines(\">>>>> \" + appearance.name + \" <<<<<\\n\")\r\n                exportProperties(appearance.appearanceProperties, \"  \", outputFile)\r\n            \r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "May 24, 2016", "footers": "["},
{"title": "Parameter I/O issues", "codeSample": "MyParam1,in,", "created_at": "December 30, 2016", "footers": "["},
{"title": "Getting the Overall Size of Parts", "codeSample": "def run(context):", "created_at": "June 06, 2017", "footers": "["},
{"title": "Prepare your add-in for UI Preview", "codeSample": "modelingWorkspace_ = workspaces_.itemById('FusionSolidEnvironment')\r\ntoolbarPanels_ = modelingWorkspace_.toolbarPanels\r\ntry:\r\n    # try to add it to the classic ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchPanel')\r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\nexcept:\r\n    # if it fails, try to add it to the new ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchCreatePanel') \r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\n# etc", "created_at": "December 18, 2018", "footers": "["},
{"title": "Fusion Meetups and Melting Butter", "codeSample": "import adsk.core, adsk.fusion, adsk.cam, traceback\n\n", "created_at": "April 21, 2016", "footers": "["},
{"title": "Is point on face", "codeSample": "def isPointOnFace():\r\n    app = adsk.core.Application.get()\r\n    ui  = app.userInterface\r\n    \r\n    selections = app.userInterface.activeSelections\r\n    sketchPoint = selections.item(0).entity\r\n    face = selections.item(1).entity\r\n    \r\n    evaluator = face.evaluator\r\n    point = sketchPoint.worldGeometry\r\n    ui.messageBox(\r\n        \"point, x=\" + str(point.x) + \r\n        \"; y=\" + str(point.y) + \r\n        \"; z=\" + str(point.z))\r\n    (returnValue, parameter) = evaluator.getParameterAtPoint(point)\r\n    ui.messageBox(\r\n        \"parameter, u=\" + str(parameter.x) + \r\n        \"; v=\" + str(parameter.y))\r\n    \r\n    if not returnValue:\r\n        # could not get the parameter for it so\r\n        # it's probably not on the face\r\n        ui.messageBox(\"Point not on face\\n(Could not get parameter)\")\r\n        return\r\n        \r\n    (returnValue, projectedPoint) = evaluator.getPointAtParameter(parameter)\r\n    ui.messageBox(\r\n        \"projectedPoint, x=\" + str(projectedPoint.x) + \r\n        \"; y=\" + str(projectedPoint.y) + \r\n        \"; z=\" + str(projectedPoint.z))\r\n    if not projectedPoint.isEqualTo(point):\r\n        # the point has been projected in order to get \r\n        # a parameter so it's not on the face\r\n        ui.messageBox(\r\n            \"Point not on face\\n(Point was projected in order to get parameter)\")\r\n        return\r\n    \r\n    returnValue = evaluator.isParameterOnFace(parameter)\r\n    if not returnValue:\r\n        ui.messageBox(\"Point not on face\\n(isParameterOnFace says so)\")\r\n        return\r\n    \r\n    ui.messageBox(\"Point on face\")", "created_at": "May 27, 2016", "footers": "["},
{"title": "Drive robot arm in Fusion", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            paramName = \"\"\r\n            diffVal = 0\r\n            if keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = 0.1\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = 0.1\r\n    \r\n            design = app.activeProduct\r\n            params = design.allParameters   \r\n            \r\n            param = params.itemByName(paramName)\r\n            newVal = param.value + diffVal\r\n            param.value = newVal\r\n            \r\n            adsk.doEvents() \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n\r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_textBox', 'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "August 21, 2016", "footers": "["},
{"title": "Drive robot arm in Fusion - update", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\nrevoluteJoint1 = None\r\nrevoluteJoint2 = None\r\nisReverseUpDown = False\r\nisReverseLeftRight = False\r\nrevolutionStep = 0.1\r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            if keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep\r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep               \r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            \r\n            # Refresh the view to show the change\r\n            vp = app.activeViewport\r\n            vp.refresh()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n# Event handler for the inputChanged event.\r\nclass MyInputChangedHandler(adsk.core.InputChangedEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.InputChangedEventArgs.cast(args)\r\n\r\n        commandInput = eventArgs.input\r\n        if commandInput.id == commandName + '_step':\r\n            global revolutionStep\r\n            revolutionStep = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseUpDown':\r\n            global isReverseUpDown\r\n            isReverseUpDown = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseLeftRight':\r\n            global isReverseLeftRight\r\n            isReverseLeftRight = commandInput.value\r\n        \r\n        \r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            # Subscribe to the various command events\r\n            onInputChanged = MyInputChangedHandler()\r\n            command.inputChanged.add(onInputChanged)\r\n            handlers.append(onInputChanged)\r\n\r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_usage', \r\n                'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n            inputs.addValueInput(\r\n                commandName + '_step', \r\n                'Rotation step: ',\r\n                'deg',\r\n                adsk.core.ValueInput.createByReal(revolutionStep))                \r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseUpDown',\r\n                'Reverse Up/Down direction',\r\n                True,\r\n                '',\r\n                isReverseUpDown)\r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseLeftRight',\r\n                'Reverse Left/Right direction',\r\n                True,\r\n                '',\r\n                isReverseLeftRight) \r\n                \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n            \r\n        # Get selected Revolute Joints to work on \r\n        selections = app.userInterface.activeSelections\r\n        if selections.count != 2:\r\n            ui.messageBox(\"The 2 revolute joints you want to control need to be selected before running the command!\")\r\n            return\r\n        \r\n        global revoluteJoint1, revoluteJoint2\r\n        revoluteJoint1 = selections.item(0).entity\r\n        revoluteJoint2 = selections.item(1).entity            \r\n            \r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        # Subscribe to events \r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        \r\n        # Run the command\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "August 22, 2016", "footers": "["},
{"title": "Connect to Fusion Lifecycle from Fusion 360 add-in", "codeSample": "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback, json, http.client\r\n\r\ndef login(): \r\n    body = {\r\n        \"userID\": \"<your user id>\", \r\n        \"password\": \"<your password>\"\r\n    }\r\n    h = http.client.HTTPSConnection('<name of your tenant>.autodeskplm360.net')\r\n    headers = {\r\n        'User-Agent': 'Fusion360',\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n    h.request('POST', '/rest/auth/1/login', json.dumps(body), headers)\r\n    res = h.getresponse()\r\n    return res.status, res.reason, res.read()\r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n        \r\n        status, response, data = login()\r\n        dataString = data.decode('utf-8')\r\n        ui.messageBox(dataString)\r\n        \r\n        # parse the json string\r\n        dataObject = json.loads(dataString)\r\n        ui.messageBox(\"My sessionid is \" + dataObject[\"sessionid\"])\r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "created_at": "February 15, 2017", "footers": "["},
{"title": "Accessing iProperties", "codeSample": "Sub GetPropertySets()\r\n  Dim doc As Document\r\n  Set doc = ThisApplication.ActiveDocument\r\n  \r\n  Dim ps As PropertySet\r\n  For Each ps In doc.PropertySets\r\n    Debug.Print ps.Name + \" / \" + ps.InternalName\r\n    Dim p As Property\r\n    For Each p In ps\r\n      Debug.Print \"  \" + p.Name + \" /\" + Str(p.PropId)\r\n    Next\r\n  Next\r\nEnd Sub\r\n", "created_at": "March 04, 2019", "footers": "["},
{"title": "Automate creation of Named Geometry", "codeSample": "' Select Face before running this code\r\nDim iLogicAuto = iLogicVb.Automation\r\n\r\nDim namedEntities = iLogicAuto.GetNamedEntities(ThisDoc.Document)\r\n\r\nDim f = ThisDoc.Document.SelectSet(1)\r\n\r\nnamedEntities.SetName(f, \"MyNewFace\")", "created_at": "March 06, 2019", "footers": "["},
{"title": "Use ChromiumWebBrowser from Inventor", "codeSample": "private void InitializeChromium()\r\n{\r\n    CefSettings settings = new CefSettings();\r\n    // Get the folder path of the add-in dll\r\n    string assemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\r\n    settings.BrowserSubprocessPath = Path.Combine(assemblyFolder, \"CefSharp.BrowserSubprocess.exe\");\r\n    Cef.Initialize(settings);\r\n\r\n    ChromeWebBrowser = new ChromiumWebBrowser(\"http://www.google.com\");\r\n    ChromeWebBrowser.LoadError += ChromeWebBrowser_LoadError;\r\n\r\n    this.Controls.Add(ChromeWebBrowser);\r\n    ChromeWebBrowser.Dock = DockStyle.Fill;\r\n}", "created_at": "June 16, 2017", "footers": "["},
{"title": "Troubleshooting, debugging", "codeSample": "Sub StitchFeatureCreate_Test()\r\n    Dim oPartDoc As PartDocument\r\n    Set oPartDoc = ThisApplication.ActiveDocument\r\n\r\n    Dim oCompDef As PartComponentDefinition\r\n    Set oCompDef = oPartDoc.ComponentDefinition\r\n    \r\n    Dim oSurfaces As ObjectCollection\r\n    Set oSurfaces = ThisApplication.TransientObjects.CreateObjectCollection\r\n    \r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(1)\r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(2)\r\n    \r\n    Dim oKnitFeature As KnitFeature\r\n    Set oKnitFeature = oCompDef.Features.KnitFeatures.Add(oSurfaces)\r\nEnd Sub", "created_at": "October 29, 2018", "footers": "["}
]