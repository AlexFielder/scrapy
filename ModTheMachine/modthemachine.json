[
{"created_at": ["October 27, 2015"], "footers": "Adam, Beginning API, Fusion 360", "title": ["Use Entitlement API from Fusion add-in"], "codeSample": ["#include <curl/curl.h>\r\n#include <regex>\r\n\r\nusing namespace std;", "// Fetch the value of a given property\r\n// inside a json text\r\nstring GetValue(string text, string find)\r\n{\r\n  regex IsValid(\"\\\\s*\\\"\" + find + \"\\\"\\\\s*:\\\\s*(.+?)[\\\\s,]\");\r\n  smatch m;\r\n  \r\n  if (regex_search(text, m, IsValid))\r\n  {\r\n    if (m.size() > 1)\r\n      return m[1];\r\n  }\r\n  \r\n  return \"\";\r\n}\r\n\r\nsize_t callback_func(void *ptr, size_t size, size_t count, void *stream)\r\n{\r\n  // ptr - your string variable.\r\n  // stream - data chunck you received\r\n  \r\n  string reply((char*)ptr);\r\n  string ret = GetValue(reply, \"IsValid\");\r\n  \r\n  // If the app is not valid\r\n  if (ret != \"true\")\r\n    ui->messageBox(\"IsValid = false\");\r\n  else\r\n    ui->messageBox(\"IsValid = true\");\r\n    \r\n  return 0;\r\n}\r\n\r\n// Using Entitlement API to check if the\r\n// app usage is valid\r\nvoid CheckValidity()\r\n{\r\n  // e.g. the URL for Voronoi Sketch generator is:\r\n  // https://apps.autodesk.com/FUSION/en/Detail/Index?id=appstore.exchange.autodesk.com%3avoronoisketchgenerator_macos%3aen\r\n  // This cotains the \"id\":\r\n  // \"appstore.exchange.autodesk.com%3avoronoisketchgenerator_macos%3aen\"\r\n  // so we can use that\r\n  string userId = app->userId();\r\n  string userName = app->userName();\r\n  string appId =\r\n    \"appstore.exchange.autodesk.com%3aaddinrename_windows32and64%3aen\";\r\n  string url =\r\n    string(\"https://apps.exchange.autodesk.com/webservices/checkentitlement\") +\r\n    string(\"?userid=\") + userId +\r\n    string(\"&appid=\") + appId;\r\n  \r\n  CURL * curl = curl_easy_init();\r\n  if(curl) {\r\n    CURLcode res;\r\n    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\r\n    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback_func);\r\n    res = curl_easy_perform(curl);\r\n    curl_easy_cleanup(curl);\r\n  }\r\n}", "#include <curl/curl.h>\r\n#include <regex>\r\n\r\nusing namespace std;", "// Fetch the value of a given property\r\n// inside a json text\r\nstring GetValue(string text, string find)\r\n{\r\n  regex IsValid(\"\\\\s*\\\"\" + find + \"\\\"\\\\s*:\\\\s*(.+?)[\\\\s,]\");\r\n  smatch m;\r\n  \r\n  if (regex_search(text, m, IsValid))\r\n  {\r\n    if (m.size() > 1)\r\n      return m[1];\r\n  }\r\n  \r\n  return \"\";\r\n}\r\n\r\nsize_t callback_func(void *ptr, size_t size, size_t count, void *stream)\r\n{\r\n  // ptr - your string variable.\r\n  // stream - data chunck you received\r\n  \r\n  string reply((char*)ptr);\r\n  string ret = GetValue(reply, \"IsValid\");\r\n  \r\n  // If the app is not valid\r\n  if (ret != \"true\")\r\n    ui->messageBox(\"IsValid = false\");\r\n  else\r\n    ui->messageBox(\"IsValid = true\");\r\n    \r\n  return 0;\r\n}\r\n\r\n// Using Entitlement API to check if the\r\n// app usage is valid\r\nvoid CheckValidity()\r\n{\r\n  // e.g. the URL for Voronoi Sketch generator is:\r\n  // https://apps.autodesk.com/FUSION/en/Detail/Index?id=appstore.exchange.autodesk.com%3avoronoisketchgenerator_macos%3aen\r\n  // This cotains the \"id\":\r\n  // \"appstore.exchange.autodesk.com%3avoronoisketchgenerator_macos%3aen\"\r\n  // so we can use that\r\n  string userId = app->userId();\r\n  string userName = app->userName();\r\n  string appId =\r\n    \"appstore.exchange.autodesk.com%3aaddinrename_windows32and64%3aen\";\r\n  string url =\r\n    string(\"https://apps.exchange.autodesk.com/webservices/checkentitlement\") +\r\n    string(\"?userid=\") + userId +\r\n    string(\"&appid=\") + appId;\r\n  \r\n  CURL * curl = curl_easy_init();\r\n  if(curl) {\r\n    CURLcode res;\r\n    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\r\n    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback_func);\r\n    res = curl_easy_perform(curl);\r\n    curl_easy_cleanup(curl);\r\n  }\r\n}"]},
{"created_at": ["September 22, 2015"], "footers": "Adam, Add-In Creation, Fusion 360", "title": ["Add control to toolbar panel"], "codeSample": ["# \"toolbarControlPanel_\" is the button control added to the panel \r\ntoolbarControlPanel_.isPromoted = True\r\ntoolbarControlPanel_.isPromotedByDefault = True", "# \"toolbarControlPanel_\" is the button control added to the panel \r\ntoolbarControlPanel_.isPromoted = True\r\ntoolbarControlPanel_.isPromotedByDefault = True"]},
{"created_at": ["September 29, 2015"], "footers": "Adam, Fusion 360", "title": ["Fusion 360 Hackathon - Q&A #1 #2"], "codeSample": ["def createDirectModelDocument(): \r\n    ui = None \r\n    try: \r\n        app = adsk.core.Application.get() \r\n        ui  = app.userInterface \r\n \r\n        # Get the Fusion specific Design preferences.         \r\n        desPrefs = app.preferences.productPreferences.itemByName('Design') \r\n \r\n        # Save the current value of the setting. \r\n        initialValue = desPrefs.defaultDesignType \r\n \r\n        # Set the value to create a direct edit design.         \r\n        desPrefs.defaultDesignType = \\ \r\n                 adsk.fusion.DefaultDesignTypeOptions.DirectDesignTypeOption \r\n \r\n        # Create a new document. \r\n        app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType) \r\n \r\n        # Set the preference back to the initial value.         \r\n        desPrefs.defaultDesignType = initialValue \r\n         \r\n        ui.messageBox('Success') \r\n    except: \r\n        if ui: \r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))", "def createDirectModelDocument(): \r\n    ui = None \r\n    try: \r\n        app = adsk.core.Application.get() \r\n        ui  = app.userInterface \r\n \r\n        # Get the Fusion specific Design preferences.         \r\n        desPrefs = app.preferences.productPreferences.itemByName('Design') \r\n \r\n        # Save the current value of the setting. \r\n        initialValue = desPrefs.defaultDesignType \r\n \r\n        # Set the value to create a direct edit design.         \r\n        desPrefs.defaultDesignType = \\ \r\n                 adsk.fusion.DefaultDesignTypeOptions.DirectDesignTypeOption \r\n \r\n        # Create a new document. \r\n        app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType) \r\n \r\n        # Set the preference back to the initial value.         \r\n        desPrefs.defaultDesignType = initialValue \r\n         \r\n        ui.messageBox('Success') \r\n    except: \r\n        if ui: \r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))"]},
{"created_at": ["January 11, 2016"], "footers": "Adam, Fusion 360, Python", "title": ["Run Fusion commands"], "codeSample": ["app = adsk.core.Application.get()\r\nui = app.userInterface\r\n\r\nfileDialog = ui.createFileDialog()\r\nfileDialog.isMultiSelectEnabled = False\r\nfileDialog.title = \"Specify result filename\"\r\nfileDialog.filter = 'Text files (*.txt)'\r\nfileDialog.filterIndex = 0\r\ndialogResult = fileDialog.showSave()\r\nif dialogResult == adsk.core.DialogResults.DialogOK:\r\n    filename = fileDialog.filename\r\nelse:\r\n    return\r\n    \r\ncommandDefinitions = ui.commandDefinitions\r\nresult = \"\"\r\n\r\nfor commandDefinition in commandDefinitions:\r\n    result += \"id = \" + commandDefinition.id + \"; name = \" + commandDefinition.name + \"\\n\"\r\n    \r\noutput = open(filename, 'w')\r\noutput.writelines(result)\r\noutput.close()", "cmdDef = ui.commandDefinitions.itemById(\"ExportCommand\")\r\ncmdDef.execute()", "app = adsk.core.Application.get()\r\nui = app.userInterface\r\n\r\nfileDialog = ui.createFileDialog()\r\nfileDialog.isMultiSelectEnabled = False\r\nfileDialog.title = \"Specify result filename\"\r\nfileDialog.filter = 'Text files (*.txt)'\r\nfileDialog.filterIndex = 0\r\ndialogResult = fileDialog.showSave()\r\nif dialogResult == adsk.core.DialogResults.DialogOK:\r\n    filename = fileDialog.filename\r\nelse:\r\n    return\r\n    \r\ncommandDefinitions = ui.commandDefinitions\r\nresult = \"\"\r\n\r\nfor commandDefinition in commandDefinitions:\r\n    result += \"id = \" + commandDefinition.id + \"; name = \" + commandDefinition.name + \"\\n\"\r\n    \r\noutput = open(filename, 'w')\r\noutput.writelines(result)\r\noutput.close()", "cmdDef = ui.commandDefinitions.itemById(\"ExportCommand\")\r\ncmdDef.execute()"]},
{"created_at": ["November 02, 2015"], "footers": "Adam, C++, Fusion 360, JavaScript, Python", "title": ["Fusion add-in path"], "codeSample": ["def getAddInFolder():\r\n    import os\r\n    folderPath = os.path.dirname(os.path.realpath(__file__))\r\n    \r\n    return folderPath", "function getAddInFolder() {", "\r\n    var url = window.location.pathname;\r\n    var des = decodeURI(url);\r\n\r\n    // remove the / at beginning\r\n    if (navigator.platform.match('Win')) {\r\n        des = des.substr(1);\r\n    }", "\r\n    var index = des.lastIndexOf('/');\r\n    var dir = des.substring(0, index);", "\r\n    return dir;\r\n}", "std::string getAddInFolder()\r\n{\r\n#if defined(_WINDOWS) || defined(_WIN32) || defined(_WIN64)\r\n    HMODULE hModule = NULL;\r\n    if (!GetModuleHandleExA(\r\n        GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | \r\n        GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,\r\n        (LPCSTR) \u2265tDllPath, \r\n        &hModule))\r\n        return \"\";\r\n\r\n    char winTempPath[2048];\r\n    ::GetModuleFileNameA (hModule, winTempPath, 2048);\r\n\r\n    std::string strPath = winTempPath;\r\n    size_t stPos = strPath.rfind('\\\\');\r\n    return strPath.substr(0, stPos);\r\n#else\r\n    Dl_info info;\r\n    dladdr((void*) getDllPath, \u2208fo);\r\n\r\n    std::string strPath = info.dli_fname;\r\n    int stPos = (int)strPath.rfind('/');\r\n    if(stPos != -1)\r\n        return strPath.substr(0, stPos);\r\n    else\r\n        return \"\";\r\n#endif\r\n}", "def getAddInFolder():\r\n    import os\r\n    folderPath = os.path.dirname(os.path.realpath(__file__))\r\n    \r\n    return folderPath", "function getAddInFolder() {", "\r\n    var url = window.location.pathname;\r\n    var des = decodeURI(url);\r\n\r\n    // remove the / at beginning\r\n    if (navigator.platform.match('Win')) {\r\n        des = des.substr(1);\r\n    }", "\r\n    var index = des.lastIndexOf('/');\r\n    var dir = des.substring(0, index);", "\r\n    return dir;\r\n}", "std::string getAddInFolder()\r\n{\r\n#if defined(_WINDOWS) || defined(_WIN32) || defined(_WIN64)\r\n    HMODULE hModule = NULL;\r\n    if (!GetModuleHandleExA(\r\n        GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | \r\n        GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,\r\n        (LPCSTR) \u2265tDllPath, \r\n        &hModule))\r\n        return \"\";\r\n\r\n    char winTempPath[2048];\r\n    ::GetModuleFileNameA (hModule, winTempPath, 2048);\r\n\r\n    std::string strPath = winTempPath;\r\n    size_t stPos = strPath.rfind('\\\\');\r\n    return strPath.substr(0, stPos);\r\n#else\r\n    Dl_info info;\r\n    dladdr((void*) getDllPath, \u2208fo);\r\n\r\n    std::string strPath = info.dli_fname;\r\n    int stPos = (int)strPath.rfind('/');\r\n    if(stPos != -1)\r\n        return strPath.substr(0, stPos);\r\n    else\r\n        return \"\";\r\n#endif\r\n}"]},
{"created_at": ["January 20, 2016"], "footers": "Adam, Fusion 360", "title": ["Selection object properties become invalid"], "codeSample": ["var onCommandExecuted = function(args) {\r\n    try {\r\n        var command = adsk.core.Command(args.firingEvent.sender);\r\n        var inputs = command.commandInputs;\r\n\r\n        // both are filtered for vertex selection\r\n        var selection1 = inputs.itemById('selection1').selection(0);\r\n        var selection2 = inputs.itemById('selection2').selection(0);\r\n\r\n        var design = app.activeProduct;\r\n        var root = design.rootComponent;\r\n        var sketches = root.sketches;\r\n        var xyPlane = root.xYConstructionPlane;\r\n\r\n        // Monitor selection1 and selection2 in the object \r\n        // window. As soon as we create a new sketch the \r\n        // variable to the last selected entity will become\r\n        // unavailable >> <not available>\r\n        sketches.add(xyPlane);\r\n        ui.messageBox(\"selection1 >> \" + selection1.", ".edges.count.toString()); // this succeeds\r\n        ui.messageBox(\"selection2 >> \" + selection2.", ".edges.count.toString()); // this does not\r\n     } \r\n     catch (e) {        \r\n        ui.messageBox('Failed to run command : ' + (e.description ? e.description : e));\r\n    }\r\n};", "var onCommandExecuted = function(args) {\r\n    try {\r\n        var command = adsk.core.Command(args.firingEvent.sender);\r\n        var inputs = command.commandInputs;\r\n\r\n        // both are filtered for vertex selection\r\n        var selectedEntity1 = inputs.itemById('selection1').selection(0).", ";\r\n        var selectedEntity2 = inputs.itemById('selection2').selection(0).", ";\r\n\r\n        var design = app.activeProduct;\r\n        var root = design.rootComponent;\r\n        var sketches = root.sketches;\r\n        var xyPlane = root.xYConstructionPlane;\r\n\r\n        sketches.add(xyPlane);\r\n        ui.messageBox(\"selection1 >> \" + selectedEntity1.edges.count.toString()); \r\n        ui.messageBox(\"selection2 >> \" + selectedEntity2.edges.count.toString()); \r\n     } \r\n     catch (e) {        \r\n        ui.messageBox('Failed to run command : ' + (e.description ? e.description : e));\r\n    }\r\n};", "var onCommandExecuted = function(args) {\r\n    try {\r\n        var command = adsk.core.Command(args.firingEvent.sender);\r\n        var inputs = command.commandInputs;\r\n\r\n        // both are filtered for vertex selection\r\n        var selection1 = inputs.itemById('selection1').selection(0);\r\n        var selection2 = inputs.itemById('selection2').selection(0);\r\n\r\n        var design = app.activeProduct;\r\n        var root = design.rootComponent;\r\n        var sketches = root.sketches;\r\n        var xyPlane = root.xYConstructionPlane;\r\n\r\n        // Monitor selection1 and selection2 in the object \r\n        // window. As soon as we create a new sketch the \r\n        // variable to the last selected entity will become\r\n        // unavailable >> <not available>\r\n        sketches.add(xyPlane);\r\n        ui.messageBox(\"selection1 >> \" + selection1.", ".edges.count.toString()); // this succeeds\r\n        ui.messageBox(\"selection2 >> \" + selection2.", ".edges.count.toString()); // this does not\r\n     } \r\n     catch (e) {        \r\n        ui.messageBox('Failed to run command : ' + (e.description ? e.description : e));\r\n    }\r\n};", "var onCommandExecuted = function(args) {\r\n    try {\r\n        var command = adsk.core.Command(args.firingEvent.sender);\r\n        var inputs = command.commandInputs;\r\n\r\n        // both are filtered for vertex selection\r\n        var selectedEntity1 = inputs.itemById('selection1').selection(0).", ";\r\n        var selectedEntity2 = inputs.itemById('selection2').selection(0).", ";\r\n\r\n        var design = app.activeProduct;\r\n        var root = design.rootComponent;\r\n        var sketches = root.sketches;\r\n        var xyPlane = root.xYConstructionPlane;\r\n\r\n        sketches.add(xyPlane);\r\n        ui.messageBox(\"selection1 >> \" + selectedEntity1.edges.count.toString()); \r\n        ui.messageBox(\"selection2 >> \" + selectedEntity2.edges.count.toString()); \r\n     } \r\n     catch (e) {        \r\n        ui.messageBox('Failed to run command : ' + (e.description ? e.description : e));\r\n    }\r\n};"]},
{"created_at": ["February 20, 2016"], "footers": "Adam, Add-In Creation, C++, Fusion 360", "title": ["Fusion Add-In with MFC"], "codeSample": ["{\r\n\"autodeskProduct\":\"Fusion360\",\r\n\"type\":\"addin\",\r\n\"author\":\"\",\r\n\"description\":{\"\":\"\"},\r\n\"supportedOS\":\"windows\",\r\n\"editEnabled\":false,\r\n\"id\":\"38EE9339-591A-4F72-AFFF-7B20111CC10C\",\r\n\"version\":\"1.0.0\",\r\n\"runOnStartup\":false\r\n}", "{\r\n\"autodeskProduct\":\"Fusion360\",\r\n\"type\":\"addin\",\r\n\"author\":\"\",\r\n\"description\":{\"\":\"\"},\r\n\"supportedOS\":\"windows\",\r\n\"editEnabled\":false,\r\n\"id\":\"38EE9339-591A-4F72-AFFF-7B20111CC10C\",\r\n\"version\":\"1.0.0\",\r\n\"runOnStartup\":false\r\n}"]},
{"created_at": ["October 08, 2015"], "footers": "Adam, Fusion 360", "title": ["Fusion 360 Hackathon - Q&A #7 #8 #9 #10"], "codeSample": ["inputs.addImageCommandInput('imageInput', '', './resources/", "')\u00a0", "inputs.addImageCommandInput('imageInput', '', './resources/", "')\u00a0"]},
{"created_at": ["April 21, 2016"], "footers": "Brian, Fusion 360, Utilities", "title": ["Fusion Meetups and Melting Butter"], "codeSample": ["import adsk.core, adsk.fusion, adsk.cam, traceback\n\n", "\n\n", "\n\n", "\n\n", "\n\n", "import adsk.core, adsk.fusion, adsk.cam, traceback\n\n", "\n\n", "\n\n", "\n\n", "\n\n"]},
{"created_at": ["May 24, 2016"], "footers": "Adam, Fusion 360", "title": ["Appearance properties"], "codeSample": ["import adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\ndef exportProperties(properties, indent, outputFile):\r\n    for prop in properties:\r\n        if type(prop) is adsk.core.AppearanceTextureProperty: \r\n            outputFile.writelines(indent + prop.name + \"\\n\")\r\n            try:\r\n                exportProperties(prop.value.properties, indent + \"  \", outputFile)\r\n            except:\r\n                outputFile.writelines(indent + \"  Couldn't get sub properties\\n\")  \r\n        elif type(prop) is adsk.core.ColorProperty:\r\n            if prop.value:\r\n                color = prop.value \r\n                outputFile.writelines(indent + \r\n                    \"red = \" + str(color.red) + \r\n                    \"; green = \" + str(color.green) + \r\n                    \"; blue = \" + str(color.blue) +\"\\n\")\r\n        else:\r\n            outputFile.writelines(indent + prop.name + \" = \" + str(prop.value) + \"\\n\")    \r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n\r\n        fileDialog = ui.createFileDialog()\r\n        fileDialog.isMultiSelectEnabled = False\r\n        fileDialog.title = \"Get the file to save to\"\r\n        fileDialog.filter = 'Text files (*.txt)'\r\n        fileDialog.filterIndex = 0\r\n        dialogResult = fileDialog.showSave()\r\n             \r\n        if dialogResult == adsk.core.DialogResults.DialogOK:\r\n             fileName = fileDialog.filename\r\n        else:\r\n             return      \r\n        \r\n        design = app.activeProduct\r\n        \r\n        with open(fileName, 'w') as outputFile:\r\n            for appearance in design.appearances:\r\n                outputFile.writelines(\">>>>> \" + appearance.name + \" <<<<<\\n\")\r\n                exportProperties(appearance.appearanceProperties, \"  \", outputFile)\r\n            \r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", ">>>>> Oak - Semigloss <<<<<\r\n  Material Type = 0\r\n  URN = \r\n  Emission = False\r\n  Reflectance = 0.06027025\r\n  URN = \r\n  Emissive Luminance = 0.0\r\n  red = 255; green = 255; blue = 255\r\n  URN = \r\n  Depth = 0.5\r\n  red = 255; green = 255; blue = 255\r\n  URN = \r\n  Translucency = False\r\n  red = 255; green = 255; blue = 255\r\n  URN = \r\n  Anisotropy = 0.0\r\n  URN = \r\n  Image\r\n    Couldn't get sub properties\r\n  URN = \r\n  NDF = surface_ndf_ggx\r\n  Image\r\n    Source = /Users/adamnagy/Library/Containers/com.autodesk.mas.fusion360/\r\nData/Library/Application Support/Autodesk/Common/Material Library/16021701/\r\nslib/resource/1/Mats/wood_oak_bump.jpg\r\n    URN = \r\n    Amount = 0.003\r\n    Amount = 1.0\r\n    Bump Type = bumpmap_height_map\r\n    Sharing = common_shared\r\n    red = 80; green = 80; blue = 80\r\n    Tint = False\r\n    Link texture transforms = False\r\n    Map Channel = 1\r\n    Map Channel = 1\r\n    UVW Source = 0\r\n    Offset Lock = False\r\n    Offset = 0.0\r\n    Offset Y = 0.0\r\n    Sample Size = 18.0\r\n    Size Y = 36.0\r\n    Scale Lock = True\r\n    U Offset = 0.0\r\n    Horizontal = True\r\n    U Scale = 1.0\r\n    UV Scale = 1.0\r\n    V Offset = 0.0\r\n    Vertical = True\r\n    V Scale = 1.0\r\n    Rotation = 0.0\r\n  URN = \r\n  Rotation = 0.0\r\n  URN = \r\n  Roughness = 0.2\r\n  URN = \r\n", "import adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\ndef exportProperties(properties, indent, outputFile):\r\n    for prop in properties:\r\n        if type(prop) is adsk.core.AppearanceTextureProperty: \r\n            outputFile.writelines(indent + prop.name + \"\\n\")\r\n            try:\r\n                exportProperties(prop.value.properties, indent + \"  \", outputFile)\r\n            except:\r\n                outputFile.writelines(indent + \"  Couldn't get sub properties\\n\")  \r\n        elif type(prop) is adsk.core.ColorProperty:\r\n            if prop.value:\r\n                color = prop.value \r\n                outputFile.writelines(indent + \r\n                    \"red = \" + str(color.red) + \r\n                    \"; green = \" + str(color.green) + \r\n                    \"; blue = \" + str(color.blue) +\"\\n\")\r\n        else:\r\n            outputFile.writelines(indent + prop.name + \" = \" + str(prop.value) + \"\\n\")    \r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n\r\n        fileDialog = ui.createFileDialog()\r\n        fileDialog.isMultiSelectEnabled = False\r\n        fileDialog.title = \"Get the file to save to\"\r\n        fileDialog.filter = 'Text files (*.txt)'\r\n        fileDialog.filterIndex = 0\r\n        dialogResult = fileDialog.showSave()\r\n             \r\n        if dialogResult == adsk.core.DialogResults.DialogOK:\r\n             fileName = fileDialog.filename\r\n        else:\r\n             return      \r\n        \r\n        design = app.activeProduct\r\n        \r\n        with open(fileName, 'w') as outputFile:\r\n            for appearance in design.appearances:\r\n                outputFile.writelines(\">>>>> \" + appearance.name + \" <<<<<\\n\")\r\n                exportProperties(appearance.appearanceProperties, \"  \", outputFile)\r\n            \r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", ">>>>> Oak - Semigloss <<<<<\r\n  Material Type = 0\r\n  URN = \r\n  Emission = False\r\n  Reflectance = 0.06027025\r\n  URN = \r\n  Emissive Luminance = 0.0\r\n  red = 255; green = 255; blue = 255\r\n  URN = \r\n  Depth = 0.5\r\n  red = 255; green = 255; blue = 255\r\n  URN = \r\n  Translucency = False\r\n  red = 255; green = 255; blue = 255\r\n  URN = \r\n  Anisotropy = 0.0\r\n  URN = \r\n  Image\r\n    Couldn't get sub properties\r\n  URN = \r\n  NDF = surface_ndf_ggx\r\n  Image\r\n    Source = /Users/adamnagy/Library/Containers/com.autodesk.mas.fusion360/\r\nData/Library/Application Support/Autodesk/Common/Material Library/16021701/\r\nslib/resource/1/Mats/wood_oak_bump.jpg\r\n    URN = \r\n    Amount = 0.003\r\n    Amount = 1.0\r\n    Bump Type = bumpmap_height_map\r\n    Sharing = common_shared\r\n    red = 80; green = 80; blue = 80\r\n    Tint = False\r\n    Link texture transforms = False\r\n    Map Channel = 1\r\n    Map Channel = 1\r\n    UVW Source = 0\r\n    Offset Lock = False\r\n    Offset = 0.0\r\n    Offset Y = 0.0\r\n    Sample Size = 18.0\r\n    Size Y = 36.0\r\n    Scale Lock = True\r\n    U Offset = 0.0\r\n    Horizontal = True\r\n    U Scale = 1.0\r\n    UV Scale = 1.0\r\n    V Offset = 0.0\r\n    Vertical = True\r\n    V Scale = 1.0\r\n    Rotation = 0.0\r\n  URN = \r\n  Rotation = 0.0\r\n  URN = \r\n  Roughness = 0.2\r\n  URN = \r\n"]},
{"created_at": ["September 30, 2015"], "footers": "Adam, Fusion 360", "title": ["Extrude profile with hole"], "codeSample": ["// Put all the profiles in an object collection\r\n// Get the Profiles collection\r\nPtr<Profiles> pProfiles = sketch->profiles();\r\nPtr<ObjectCollection> objectsForExtrude = ObjectCollection::create();\r\nfor each (Ptr<Profile> pProfile in pProfiles)\r\n{\r\n  // Check to see if this is the outer rectangular profile or not\r\n  // by checking the number of loops.  The outer profile will have two\r\n  // loops, one for the rectangle and one for the circle. \r\n  Ptr<ProfileLoops> loops = pProfile->profileLoops();\r\n             \r\n  if (loops->count() > 1)\r\n    objectsForExtrude->add(pProfile);\r\n}", "// Put all the profiles in an object collection\r\n// Get the Profiles collection\r\nPtr<Profiles> pProfiles = sketch->profiles();\r\nPtr<ObjectCollection> objectsForExtrude = ObjectCollection::create();\r\nfor each (Ptr<Profile> pProfile in pProfiles)\r\n{\r\n  // Check to see if this is the outer rectangular profile or not\r\n  // by checking the number of loops.  The outer profile will have two\r\n  // loops, one for the rectangle and one for the circle. \r\n  Ptr<ProfileLoops> loops = pProfile->profileLoops();\r\n             \r\n  if (loops->count() > 1)\r\n    objectsForExtrude->add(pProfile);\r\n}"]},
{"created_at": ["August 22, 2016"], "footers": "Adam, Fusion 360", "title": ["Drive robot arm in Fusion - update"], "codeSample": ["#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\nrevoluteJoint1 = None\r\nrevoluteJoint2 = None\r\nisReverseUpDown = False\r\nisReverseLeftRight = False\r\nrevolutionStep = 0.1\r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            if keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep\r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep               \r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            \r\n            # Refresh the view to show the change\r\n            vp = app.activeViewport\r\n            vp.refresh()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n# Event handler for the inputChanged event.\r\nclass MyInputChangedHandler(adsk.core.InputChangedEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.InputChangedEventArgs.cast(args)\r\n\r\n        commandInput = eventArgs.input\r\n        if commandInput.id == commandName + '_step':\r\n            global revolutionStep\r\n            revolutionStep = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseUpDown':\r\n            global isReverseUpDown\r\n            isReverseUpDown = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseLeftRight':\r\n            global isReverseLeftRight\r\n            isReverseLeftRight = commandInput.value\r\n        \r\n        \r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            # Subscribe to the various command events\r\n            onInputChanged = MyInputChangedHandler()\r\n            command.inputChanged.add(onInputChanged)\r\n            handlers.append(onInputChanged)\r\n\r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_usage', \r\n                'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n            inputs.addValueInput(\r\n                commandName + '_step', \r\n                'Rotation step: ',\r\n                'deg',\r\n                adsk.core.ValueInput.createByReal(revolutionStep))                \r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseUpDown',\r\n                'Reverse Up/Down direction',\r\n                True,\r\n                '',\r\n                isReverseUpDown)\r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseLeftRight',\r\n                'Reverse Left/Right direction',\r\n                True,\r\n                '',\r\n                isReverseLeftRight) \r\n                \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n            \r\n        # Get selected Revolute Joints to work on \r\n        selections = app.userInterface.activeSelections\r\n        if selections.count != 2:\r\n            ui.messageBox(\"The 2 revolute joints you want to control need to be selected before running the command!\")\r\n            return\r\n        \r\n        global revoluteJoint1, revoluteJoint2\r\n        revoluteJoint1 = selections.item(0).entity\r\n        revoluteJoint2 = selections.item(1).entity            \r\n            \r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        # Subscribe to events \r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        \r\n        # Run the command\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\nrevoluteJoint1 = None\r\nrevoluteJoint2 = None\r\nisReverseUpDown = False\r\nisReverseLeftRight = False\r\nrevolutionStep = 0.1\r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            if keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep\r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                if isReverseUpDown:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep               \r\n                motion = revoluteJoint1.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = -revolutionStep\r\n                else:\r\n                    diffVal = revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                if isReverseLeftRight:\r\n                    diffVal = revolutionStep\r\n                else:\r\n                    diffVal = -revolutionStep                \r\n                motion = revoluteJoint2.jointMotion\r\n                motion.rotationValue = motion.rotationValue + diffVal\r\n            \r\n            # Refresh the view to show the change\r\n            vp = app.activeViewport\r\n            vp.refresh()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n# Event handler for the inputChanged event.\r\nclass MyInputChangedHandler(adsk.core.InputChangedEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.InputChangedEventArgs.cast(args)\r\n\r\n        commandInput = eventArgs.input\r\n        if commandInput.id == commandName + '_step':\r\n            global revolutionStep\r\n            revolutionStep = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseUpDown':\r\n            global isReverseUpDown\r\n            isReverseUpDown = commandInput.value\r\n        elif commandInput.id == commandName + '_reverseLeftRight':\r\n            global isReverseLeftRight\r\n            isReverseLeftRight = commandInput.value\r\n        \r\n        \r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            # Subscribe to the various command events\r\n            onInputChanged = MyInputChangedHandler()\r\n            command.inputChanged.add(onInputChanged)\r\n            handlers.append(onInputChanged)\r\n\r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_usage', \r\n                'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n            inputs.addValueInput(\r\n                commandName + '_step', \r\n                'Rotation step: ',\r\n                'deg',\r\n                adsk.core.ValueInput.createByReal(revolutionStep))                \r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseUpDown',\r\n                'Reverse Up/Down direction',\r\n                True,\r\n                '',\r\n                isReverseUpDown)\r\n            inputs.addBoolValueInput(\r\n                commandName + '_reverseLeftRight',\r\n                'Reverse Left/Right direction',\r\n                True,\r\n                '',\r\n                isReverseLeftRight) \r\n                \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n            \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n            \r\n        # Get selected Revolute Joints to work on \r\n        selections = app.userInterface.activeSelections\r\n        if selections.count != 2:\r\n            ui.messageBox(\"The 2 revolute joints you want to control need to be selected before running the command!\")\r\n            return\r\n        \r\n        global revoluteJoint1, revoluteJoint2\r\n        revoluteJoint1 = selections.item(0).entity\r\n        revoluteJoint2 = selections.item(1).entity            \r\n            \r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        # Subscribe to events \r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        \r\n        # Run the command\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n"]},
{"created_at": ["August 21, 2016"], "footers": "Adam, Fusion 360", "title": ["Drive robot arm in Fusion"], "codeSample": ["#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            paramName = \"\"\r\n            diffVal = 0\r\n            if keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = 0.1\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = 0.1\r\n    \r\n            design = app.activeProduct\r\n            params = design.allParameters   \r\n            \r\n            param = params.itemByName(paramName)\r\n            newVal = param.value + diffVal\r\n            param.value = newVal\r\n            \r\n            adsk.doEvents() \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n\r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_textBox', 'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback\r\n\r\n# Global variable used to maintain a reference to all event handlers.\r\nhandlers = []\r\n\r\n# Other global variables\r\ncommandName = \"MoveRobot\"\r\napp = adsk.core.Application.get()\r\nif app:\r\n    ui = app.userInterface\r\n    \r\n\r\n# Event handler for the keyDown event.\r\nclass MyKeyDownHandler(adsk.core.KeyboardEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            eventArgs = adsk.core.KeyboardEventArgs.cast(args)\r\n            keyCode = eventArgs.keyCode    \r\n                \r\n            paramName = \"\"\r\n            diffVal = 0\r\n            if keyCode == adsk.core.KeyCodes.DownKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.UpKeyCode:\r\n                paramName = \"d41\"\r\n                diffVal = 0.1\r\n            elif keyCode == adsk.core.KeyCodes.LeftKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = -0.1\r\n            elif keyCode == adsk.core.KeyCodes.RightKeyCode:\r\n                paramName = \"d59\"\r\n                diffVal = 0.1\r\n    \r\n            design = app.activeProduct\r\n            params = design.allParameters   \r\n            \r\n            param = params.itemByName(paramName)\r\n            newVal = param.value + diffVal\r\n            param.value = newVal\r\n            \r\n            adsk.doEvents() \r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n\r\n\r\n# Event handler for the executePreview event.\r\nclass MyExecutePreviewHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        eventArgs = adsk.core.CommandEventArgs.cast(args)\r\n        \r\n        # Make it accept the changes whatever happens\r\n        eventArgs.isValidResult = True\r\n        \r\n\r\nclass MyCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):    \r\n    def __init__(self):\r\n        super().__init__()        \r\n    def notify(self, args):\r\n        try:\r\n            command = adsk.core.Command.cast(args.command)\r\n            \r\n            onExecutePreview = MyExecutePreviewHandler()\r\n            command.executePreview.add(onExecutePreview)\r\n            handlers.append(onExecutePreview)\r\n        \r\n            onKeyDown = MyKeyDownHandler()\r\n            command.keyDown.add(onKeyDown)\r\n            handlers.append(onKeyDown)\r\n            \r\n            onDestroy = MyCommandDestroyHandler()\r\n            command.destroy.add(onDestroy)\r\n            handlers.append(onDestroy)\r\n            \r\n            inputs = command.commandInputs\r\n            inputs.addTextBoxCommandInput(\r\n                commandName + '_textBox', 'Usage:', \r\n                'Use the arrow buttons to drive the robot arm', 2, \r\n                True);\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))              \r\n            \r\n            \r\nclass MyCommandDestroyHandler(adsk.core.CommandEventHandler):\r\n    def __init__(self):\r\n        super().__init__()\r\n    def notify(self, args):\r\n        try:\r\n            commandDefinitions = ui.commandDefinitions\r\n            # Check the command exists or not\r\n            cmdDef = commandDefinitions.itemById(commandName)\r\n            if cmdDef:\r\n                cmdDef.deleteMe                \r\n                \r\n            # When the command is done, terminate the script\r\n            # this will release all globals which will remove all event handlers\r\n            adsk.terminate()\r\n        except:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))        \r\n            \r\n            \r\ndef run(context):\r\n    try:\r\n        product = app.activeProduct\r\n        design = adsk.fusion.Design.cast(product)\r\n        if not design:\r\n            ui.messageBox('It is not supported in current workspace, please change to MODEL workspace and try again.')\r\n            return\r\n        commandDefinitions = ui.commandDefinitions\r\n        # Check the command exists or not\r\n        cmdDef = commandDefinitions.itemById(commandName)\r\n        if not cmdDef:\r\n            cmdDef = commandDefinitions.addButtonDefinition(\r\n                commandName, commandName, commandName, '') \r\n\r\n        onCommandCreated = MyCommandCreatedHandler()\r\n        cmdDef.commandCreated.add(onCommandCreated)\r\n        # Keep the handler referenced beyond this function\r\n        handlers.append(onCommandCreated)\r\n        inputs = adsk.core.NamedValues.create()\r\n        cmdDef.execute(inputs)\r\n\r\n        # Prevent this module from being terminated when the script returns, \r\n        # because we are waiting for event handlers to fire\r\n        adsk.autoTerminate(False)\r\n\r\n    except:\r\n        ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n"]},
{"created_at": ["February 15, 2017"], "footers": "Adam, Fusion 360", "title": ["Connect to Fusion Lifecycle from Fusion 360 add-in"], "codeSample": ["#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback, json, http.client\r\n\r\ndef login(): \r\n    body = {\r\n        \"userID\": \"<your user id>\", \r\n        \"password\": \"<your password>\"\r\n    }\r\n    h = http.client.HTTPSConnection('<name of your tenant>.autodeskplm360.net')\r\n    headers = {\r\n        'User-Agent': 'Fusion360',\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n    h.request('POST', '/rest/auth/1/login', json.dumps(body), headers)\r\n    res = h.getresponse()\r\n    return res.status, res.reason, res.read()\r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n        \r\n        status, response, data = login()\r\n        dataString = data.decode('utf-8')\r\n        ui.messageBox(dataString)\r\n        \r\n        # parse the json string\r\n        dataObject = json.loads(dataString)\r\n        ui.messageBox(\"My sessionid is \" + dataObject[\"sessionid\"])\r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n", "#Author-\r\n#Description-\r\n\r\nimport adsk.core, adsk.fusion, adsk.cam, traceback, json, http.client\r\n\r\ndef login(): \r\n    body = {\r\n        \"userID\": \"<your user id>\", \r\n        \"password\": \"<your password>\"\r\n    }\r\n    h = http.client.HTTPSConnection('<name of your tenant>.autodeskplm360.net')\r\n    headers = {\r\n        'User-Agent': 'Fusion360',\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n    h.request('POST', '/rest/auth/1/login', json.dumps(body), headers)\r\n    res = h.getresponse()\r\n    return res.status, res.reason, res.read()\r\n\r\ndef run(context):\r\n    ui = None\r\n    try:\r\n        app = adsk.core.Application.get()\r\n        ui  = app.userInterface\r\n        \r\n        status, response, data = login()\r\n        dataString = data.decode('utf-8')\r\n        ui.messageBox(dataString)\r\n        \r\n        # parse the json string\r\n        dataObject = json.loads(dataString)\r\n        ui.messageBox(\"My sessionid is \" + dataObject[\"sessionid\"])\r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))\r\n"]},
{"created_at": ["January 05, 2017"], "footers": "Adam, Attributes, Inventor, Visual Basic for Applications (VBA)", "title": ["Store and restore occurrence position"], "codeSample": ["Sub StorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim cells() As Double\r\n  Call occ.Transformation.GetMatrixData(cells)\r\n  \r\n  Dim attValues(15) As Variant\r\n  Dim attNames(15) As String\r\n  Dim attTypes(15) As ValueTypeEnum\r\n  \r\n  Dim i As Integer\r\n  For i = LBound(cells) To UBound(cells)\r\n    attValues(i) = cells(i)\r\n    attNames(i) = kCellNamePrefix + Trim(str(i))\r\n    attTypes(i) = kDoubleType\r\n  Next\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Set attSet = occ.AttributeSets.Add(\"Adam.OccurrencePosition\")\r\n  End If\r\n  \r\n  Dim attEnum As AttributesEnumerator\r\n  ' If the name was not Trim()-ed this would give an error\r\n  Set attEnum = attSet.AddAttributes(attNames, attTypes, attValues, True)\r\nEnd Sub\r\n\r\nSub RestorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Call MsgBox(\"Position data was not stored for this occurrence!\")\r\n    Exit Sub\r\n  End If\r\n  \r\n  Dim cells(15) As Double\r\n  Dim i As Integer\r\n  For i = 0 To 15\r\n    Dim cellName As String\r\n    cellName = kCellNamePrefix + Trim(str(i))\r\n    If Not attSet.NameIsUsed(cellName) Then\r\n      Call MsgBox(\"Not all position data stored for this occurrence!\")\r\n      Exit Sub\r\n    End If\r\n\r\n    cells(i) = attSet(cellName).value\r\n  Next\r\n  \r\n  Dim mx As Matrix\r\n  Set mx = occ.Transformation\r\n  \r\n  Call mx.PutMatrixData(cells)\r\n  \r\n  occ.Transformation = mx\r\nEnd Sub", "Sub StorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim cells() As Double\r\n  Call occ.Transformation.GetMatrixData(cells)\r\n  \r\n  Dim attValues(15) As Variant\r\n  Dim attNames(15) As String\r\n  Dim attTypes(15) As ValueTypeEnum\r\n  \r\n  Dim i As Integer\r\n  For i = LBound(cells) To UBound(cells)\r\n    attValues(i) = cells(i)\r\n    attNames(i) = kCellNamePrefix + Trim(str(i))\r\n    attTypes(i) = kDoubleType\r\n  Next\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Set attSet = occ.AttributeSets.Add(\"Adam.OccurrencePosition\")\r\n  End If\r\n  \r\n  Dim attEnum As AttributesEnumerator\r\n  ' If the name was not Trim()-ed this would give an error\r\n  Set attEnum = attSet.AddAttributes(attNames, attTypes, attValues, True)\r\nEnd Sub\r\n\r\nSub RestorePosition()\r\n  Const kAttSetName = \"Adam.OccurrencePosition\"\r\n  Const kCellNamePrefix = \"cell\"\r\n  \r\n  Dim asm As AssemblyDocument\r\n  Set asm = ThisApplication.ActiveDocument\r\n  \r\n  Dim occ As ComponentOccurrence\r\n  Set occ = asm.SelectSet(1)\r\n  \r\n  Dim attSet As AttributeSet\r\n  If occ.AttributeSets.NameIsUsed(kAttSetName) Then\r\n    Set attSet = occ.AttributeSets(\"Adam.OccurrencePosition\")\r\n  Else\r\n    Call MsgBox(\"Position data was not stored for this occurrence!\")\r\n    Exit Sub\r\n  End If\r\n  \r\n  Dim cells(15) As Double\r\n  Dim i As Integer\r\n  For i = 0 To 15\r\n    Dim cellName As String\r\n    cellName = kCellNamePrefix + Trim(str(i))\r\n    If Not attSet.NameIsUsed(cellName) Then\r\n      Call MsgBox(\"Not all position data stored for this occurrence!\")\r\n      Exit Sub\r\n    End If\r\n\r\n    cells(i) = attSet(cellName).value\r\n  Next\r\n  \r\n  Dim mx As Matrix\r\n  Set mx = occ.Transformation\r\n  \r\n  Call mx.PutMatrixData(cells)\r\n  \r\n  occ.Transformation = mx\r\nEnd Sub"]},
{"created_at": ["December 30, 2016"], "footers": "Adam, Fusion 360", "title": ["Parameter I/O issues"], "codeSample": ["MyParam1,in,", "*3,Comments\r\n", ",in,12,Comments", "MyParam1,in,", "*3,Comments\r\n", ",in,12,Comments"]},
{"created_at": ["June 06, 2017"], "footers": "Brian, Fusion 360, Inventor, Utilities", "title": ["Getting the Overall Size of Parts"], "codeSample": ["def run(context):", "\u00a0\u00a0\u00a0 ui = None ", "\u00a0\u00a0\u00a0 try:", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 app = adsk.core.Application.get()", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ui = app.userInterface", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 des = adsk.fusion.Design.cast(app.activeProduct)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 bodySelect = ui.selectEntity('Select the body.', 'Bodies')", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 body = adsk.fusion.BRepBody.cast(bodySelect.entity)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 bndBox= calculateTightBoundingBox(body)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sk = des.rootComponent.sketches.add(des.rootComponent.xYConstructionPlane)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines = sk.sketchCurves.sketchLines", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 minXYZ = bndBox.minPoint", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 minXYmaxZ = adsk.core.Point3D.create(bndBox.minPoint.x, bndBox.minPoint.y, bndBox.maxPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 minXmaxYZ = adsk.core.Point3D.create(bndBox.minPoint.x, bndBox.maxPoint.y, bndBox.maxPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 minXZmaxY = adsk.core.Point3D.create(bndBox.minPoint.x, bndBox.maxPoint.y, bndBox.minPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 maxXYZ = bndBox.maxPoint", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 maxXYminZ = adsk.core.Point3D.create(bndBox.maxPoint.x, bndBox.maxPoint.y, bndBox.minPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 maxXZminY = adsk.core.Point3D.create(bndBox.maxPoint.x, bndBox.minPoint.y, bndBox.maxPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 maxXminYZ = adsk.core.Point3D.create(bndBox.maxPoint.x, bndBox.minPoint.y, bndBox.minPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXYZ, minXYmaxZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXYZ, minXZmaxY)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXZmaxY, minXmaxYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXYmaxZ, minXmaxYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(maxXYZ, maxXYminZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(maxXYZ, maxXZminY)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(maxXYminZ, maxXminYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(maxXZminY, maxXminYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXYZ, maxXminYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXYmaxZ, maxXZminY)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXmaxYZ, maxXYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXZmaxY, maxXYminZ) ", "\u00a0\u00a0\u00a0 except:", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ui:", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))", "Public Sub TestTightBoundingBox()", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim body As SurfaceBody", "\u00a0\u00a0\u00a0 Set body = ThisApplication.CommandManager.Pick(kPartBodyFilter, \"Select the body.\")", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim bndBox As Box", "\u00a0\u00a0\u00a0 Set bndBox = calculateTightBoundingBox(body)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim partDoc As PartDocument", "\u00a0\u00a0\u00a0 Set partDoc = ThisApplication.ActiveDocument", "\u00a0\u00a0\u00a0 Dim sk As Sketch3D", "\u00a0\u00a0\u00a0 Set sk = partDoc.ComponentDefinition.Sketches3D.Add()", "\u00a0\u00a0\u00a0 Dim lines As SketchLines3D", "\u00a0\u00a0\u00a0 Set lines = sk.SketchLines3D", "\u00a0\u00a0\u00a0 Dim tg As TransientGeometry", "\u00a0\u00a0\u00a0 Set tg = ThisApplication.TransientGeometry", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim minXYZ As Point", "\u00a0\u00a0\u00a0 Dim minXYmaxZ As Point", "\u00a0\u00a0\u00a0 Dim minXmaxYZ As Point", "\u00a0\u00a0\u00a0 Dim minXZmaxY As Point", "\u00a0\u00a0\u00a0 Set minXYZ = bndBox.MinPoint", "\u00a0\u00a0\u00a0 Set minXYmaxZ = tg.CreatePoint(bndBox.MinPoint.x, bndBox.MinPoint.y, bndBox.MaxPoint.Z)", "\u00a0\u00a0\u00a0 Set minXmaxYZ = tg.CreatePoint(bndBox.MinPoint.x, bndBox.MaxPoint.y, bndBox.MaxPoint.Z)", "\u00a0\u00a0\u00a0 Set minXZmaxY = tg.CreatePoint(bndBox.MinPoint.x, bndBox.MaxPoint.y, bndBox.MinPoint.Z)", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim maxXYZ As Point", "\u00a0\u00a0\u00a0 Dim maxXYminZ As Point", "\u00a0\u00a0\u00a0 Dim maxXZminY As Point", "\u00a0\u00a0\u00a0 Dim maxXminYZ As Point", "\u00a0\u00a0\u00a0 Set maxXYZ = bndBox.MaxPoint", "\u00a0\u00a0\u00a0 Set maxXYminZ = tg.CreatePoint(bndBox.MaxPoint.x, bndBox.MaxPoint.y, bndBox.MinPoint.Z)", "\u00a0\u00a0\u00a0 Set maxXZminY = tg.CreatePoint(bndBox.MaxPoint.x, bndBox.MinPoint.y, bndBox.MaxPoint.Z)", "\u00a0\u00a0\u00a0 Set maxXminYZ = tg.CreatePoint(bndBox.MaxPoint.x, bndBox.MinPoint.y, bndBox.MinPoint.Z)", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXYZ, minXYmaxZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXYZ, minXZmaxY)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXZmaxY, minXmaxYZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXYmaxZ, minXmaxYZ)", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(maxXYZ, maxXYminZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(maxXYZ, maxXZminY)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(maxXYminZ, maxXminYZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(maxXZminY, maxXminYZ)", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXYZ, maxXminYZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXYmaxZ, maxXZminY)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXmaxYZ, maxXYZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXZmaxY, maxXYminZ)", "End Sub", "Public Sub TestTightBoundingBox()\r\n    Dim invApp As Inventor.Application = GetObject(, \"Inventor.Application\")\r\n    ' Have a body selected.\r\n    Dim body As SurfaceBody\r\n    body = invApp.CommandManager.Pick(SelectionFilterEnum.kPartBodyFilter, \"Select the body.\")\r\n\r\n    ' Call the function to get the tight bounding box.\r\n    Dim bndBox As Box = calculateTightBoundingBox(body)\r\n\r\n    ' Draw the bounding box using a 3D sketch.\r\n    Dim partDoc As PartDocument = invApp.ActiveDocument\r\n    Dim sk As Sketch3D = partDoc.ComponentDefinition.Sketches3D.Add()\r\n    Dim lines As SketchLines3D = sk.SketchLines3D\r\n\r\n    Dim tg As TransientGeometry = invApp.TransientGeometry\r\n\r\n    Dim minXYZ As Point = bndBox.MinPoint\r\n    Dim minXYmaxZ As Point = tg.CreatePoint(bndBox.MinPoint.X, bndBox.MinPoint.Y, bndBox.MaxPoint.Z)\r\n    Dim minXmaxYZ As Point = tg.CreatePoint(bndBox.MinPoint.X, bndBox.MaxPoint.Y, bndBox.MaxPoint.Z)\r\n    Dim minXZmaxY As Point = tg.CreatePoint(bndBox.MinPoint.X, bndBox.MaxPoint.Y, bndBox.MinPoint.Z)\r\n\r\n    Dim maxXYZ As Point = bndBox.MaxPoint\r\n    Dim maxXYminZ As Point = tg.CreatePoint(bndBox.MaxPoint.X, bndBox.MaxPoint.Y, bndBox.MinPoint.Z)\r\n    Dim maxXZminY As Point = tg.CreatePoint(bndBox.MaxPoint.X, bndBox.MinPoint.Y, bndBox.MaxPoint.Z)\r\n    Dim maxXminYZ As Point = tg.CreatePoint(bndBox.MaxPoint.X, bndBox.MinPoint.Y, bndBox.MinPoint.Z)\r\n\r\n    lines.AddByTwoPoints(minXYZ, minXYmaxZ)\r\n    lines.AddByTwoPoints(minXYZ, minXZmaxY)\r\n    lines.AddByTwoPoints(minXZmaxY, minXmaxYZ)\r\n    lines.AddByTwoPoints(minXYmaxZ, minXmaxYZ)\r\n\r\n    lines.AddByTwoPoints(maxXYZ, maxXYminZ)\r\n    lines.AddByTwoPoints(maxXYZ, maxXZminY)\r\n    lines.AddByTwoPoints(maxXYminZ, maxXminYZ)\r\n    lines.AddByTwoPoints(maxXZminY, maxXminYZ)\r\n\r\n    lines.AddByTwoPoints(minXYZ, maxXminYZ)\r\n    lines.AddByTwoPoints(minXYmaxZ, maxXZminY)\r\n    lines.AddByTwoPoints(minXmaxYZ, maxXYZ)\r\n    lines.AddByTwoPoints(minXZmaxY, maxXYminZ)\r\nEnd Sub\r\n\r\n\r\n' Calculates a tight bounding box around the input body.  An optional\r\n' tolerance argument is available.  This specificies the tolerance in\r\n' centimeters.  If not provided the best existing display mesh is used.\r\nPublic Function calculateTightBoundingBox(body As SurfaceBody, Optional Tolerance As Double = 0) As Box\r\n    Try\r\n        Dim vertCount As Integer\r\n        Dim facetCount As Integer\r\n        Dim vertCoords() As Double = {}\r\n        Dim normVectors() As Double = {}\r\n        Dim vertInds() As Integer = {}\r\n\r\n        ' If the tolerance is zero, use the best display mesh available.\r\n        If Tolerance <= 0 Then\r\n            ' Get the best display mesh available.\r\n            Dim tolCount As Long\r\n            Dim tols() As Double = {}\r\n            Call body.GetExistingFacetTolerances(tolCount, tols)\r\n            Dim bestTol As Double\r\n            bestTol = tols(0)\r\n            For i As Integer = 1 To tolCount - 1\r\n                If tols(i) < bestTol Then\r\n                    bestTol = tols(i)\r\n                End If\r\n            Next\r\n\r\n            body.GetExistingFacets(bestTol, vertCount, facetCount, vertCoords, normVectors, vertInds)\r\n        Else\r\n            ' Calculate a new mesh based on the input tolerance.\r\n            body.CalculateFacets(Tolerance, vertCount, facetCount, vertCoords, normVectors, vertInds)\r\n        End If\r\n\r\n        Dim tg As TransientGeometry = body.Application.TransientGeometry\r\n\r\n        ' Calculate the range of the mesh.\r\n        Dim smallPnt As Point = tg.CreatePoint(vertCoords(0), vertCoords(1), vertCoords(2))\r\n        Dim largePnt As Point = tg.CreatePoint(vertCoords(0), vertCoords(1), vertCoords(2))\r\n        For i As Integer = 1 To vertCount - 1\r\n            Dim vertX As Double = vertCoords(i * 3)\r\n            Dim vertY As Double = vertCoords(i * 3 + 1)\r\n            Dim vertZ As Double = vertCoords(i * 3 + 2)\r\n\r\n            If vertX < smallPnt.X Then\r\n                smallPnt.X = vertX\r\n            End If\r\n\r\n            If vertY < smallPnt.Y Then\r\n                smallPnt.Y = vertY\r\n            End If\r\n\r\n            If vertZ < smallPnt.Z Then\r\n                smallPnt.Z = vertZ\r\n            End If\r\n\r\n            If vertX > largePnt.X Then\r\n                largePnt.X = vertX\r\n            End If\r\n\r\n            If vertY > largePnt.Y Then\r\n                largePnt.Y = vertY\r\n            End If\r\n\r\n            If vertZ > largePnt.Z Then\r\n                largePnt.Z = vertZ\r\n            End If\r\n        Next\r\n\r\n        ' Create and return a Box as the result.\r\n        Dim newBox As Box = tg.CreateBox()\r\n        newBox.MinPoint = smallPnt\r\n        newBox.MaxPoint = largePnt\r\n        Return newBox\r\n    Catch ex As Exception\r\n        Return Nothing\r\n    End Try\r\nEnd Function\r\n", "def run(context):", "\u00a0\u00a0\u00a0 ui = None ", "\u00a0\u00a0\u00a0 try:", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 app = adsk.core.Application.get()", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ui = app.userInterface", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 des = adsk.fusion.Design.cast(app.activeProduct)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 bodySelect = ui.selectEntity('Select the body.', 'Bodies')", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 body = adsk.fusion.BRepBody.cast(bodySelect.entity)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 bndBox= calculateTightBoundingBox(body)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sk = des.rootComponent.sketches.add(des.rootComponent.xYConstructionPlane)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines = sk.sketchCurves.sketchLines", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 minXYZ = bndBox.minPoint", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 minXYmaxZ = adsk.core.Point3D.create(bndBox.minPoint.x, bndBox.minPoint.y, bndBox.maxPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 minXmaxYZ = adsk.core.Point3D.create(bndBox.minPoint.x, bndBox.maxPoint.y, bndBox.maxPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 minXZmaxY = adsk.core.Point3D.create(bndBox.minPoint.x, bndBox.maxPoint.y, bndBox.minPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 maxXYZ = bndBox.maxPoint", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 maxXYminZ = adsk.core.Point3D.create(bndBox.maxPoint.x, bndBox.maxPoint.y, bndBox.minPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 maxXZminY = adsk.core.Point3D.create(bndBox.maxPoint.x, bndBox.minPoint.y, bndBox.maxPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 maxXminYZ = adsk.core.Point3D.create(bndBox.maxPoint.x, bndBox.minPoint.y, bndBox.minPoint.z)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXYZ, minXYmaxZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXYZ, minXZmaxY)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXZmaxY, minXmaxYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXYmaxZ, minXmaxYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(maxXYZ, maxXYminZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(maxXYZ, maxXZminY)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(maxXYminZ, maxXminYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(maxXZminY, maxXminYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXYZ, maxXminYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXYmaxZ, maxXZminY)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXmaxYZ, maxXYZ)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lines.addByTwoPoints(minXZmaxY, maxXYminZ) ", "\u00a0\u00a0\u00a0 except:", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ui:", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ui.messageBox('Failed:\\n{}'.format(traceback.format_exc()))", "Public Sub TestTightBoundingBox()", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim body As SurfaceBody", "\u00a0\u00a0\u00a0 Set body = ThisApplication.CommandManager.Pick(kPartBodyFilter, \"Select the body.\")", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim bndBox As Box", "\u00a0\u00a0\u00a0 Set bndBox = calculateTightBoundingBox(body)", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim partDoc As PartDocument", "\u00a0\u00a0\u00a0 Set partDoc = ThisApplication.ActiveDocument", "\u00a0\u00a0\u00a0 Dim sk As Sketch3D", "\u00a0\u00a0\u00a0 Set sk = partDoc.ComponentDefinition.Sketches3D.Add()", "\u00a0\u00a0\u00a0 Dim lines As SketchLines3D", "\u00a0\u00a0\u00a0 Set lines = sk.SketchLines3D", "\u00a0\u00a0\u00a0 Dim tg As TransientGeometry", "\u00a0\u00a0\u00a0 Set tg = ThisApplication.TransientGeometry", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim minXYZ As Point", "\u00a0\u00a0\u00a0 Dim minXYmaxZ As Point", "\u00a0\u00a0\u00a0 Dim minXmaxYZ As Point", "\u00a0\u00a0\u00a0 Dim minXZmaxY As Point", "\u00a0\u00a0\u00a0 Set minXYZ = bndBox.MinPoint", "\u00a0\u00a0\u00a0 Set minXYmaxZ = tg.CreatePoint(bndBox.MinPoint.x, bndBox.MinPoint.y, bndBox.MaxPoint.Z)", "\u00a0\u00a0\u00a0 Set minXmaxYZ = tg.CreatePoint(bndBox.MinPoint.x, bndBox.MaxPoint.y, bndBox.MaxPoint.Z)", "\u00a0\u00a0\u00a0 Set minXZmaxY = tg.CreatePoint(bndBox.MinPoint.x, bndBox.MaxPoint.y, bndBox.MinPoint.Z)", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Dim maxXYZ As Point", "\u00a0\u00a0\u00a0 Dim maxXYminZ As Point", "\u00a0\u00a0\u00a0 Dim maxXZminY As Point", "\u00a0\u00a0\u00a0 Dim maxXminYZ As Point", "\u00a0\u00a0\u00a0 Set maxXYZ = bndBox.MaxPoint", "\u00a0\u00a0\u00a0 Set maxXYminZ = tg.CreatePoint(bndBox.MaxPoint.x, bndBox.MaxPoint.y, bndBox.MinPoint.Z)", "\u00a0\u00a0\u00a0 Set maxXZminY = tg.CreatePoint(bndBox.MaxPoint.x, bndBox.MinPoint.y, bndBox.MaxPoint.Z)", "\u00a0\u00a0\u00a0 Set maxXminYZ = tg.CreatePoint(bndBox.MaxPoint.x, bndBox.MinPoint.y, bndBox.MinPoint.Z)", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXYZ, minXYmaxZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXYZ, minXZmaxY)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXZmaxY, minXmaxYZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXYmaxZ, minXmaxYZ)", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(maxXYZ, maxXYminZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(maxXYZ, maxXZminY)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(maxXYminZ, maxXminYZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(maxXZminY, maxXminYZ)", "\u00a0\u00a0\u00a0 ", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXYZ, maxXminYZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXYmaxZ, maxXZminY)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXmaxYZ, maxXYZ)", "\u00a0\u00a0\u00a0 Call lines.AddByTwoPoints(minXZmaxY, maxXYminZ)", "End Sub", "Public Sub TestTightBoundingBox()\r\n    Dim invApp As Inventor.Application = GetObject(, \"Inventor.Application\")\r\n    ' Have a body selected.\r\n    Dim body As SurfaceBody\r\n    body = invApp.CommandManager.Pick(SelectionFilterEnum.kPartBodyFilter, \"Select the body.\")\r\n\r\n    ' Call the function to get the tight bounding box.\r\n    Dim bndBox As Box = calculateTightBoundingBox(body)\r\n\r\n    ' Draw the bounding box using a 3D sketch.\r\n    Dim partDoc As PartDocument = invApp.ActiveDocument\r\n    Dim sk As Sketch3D = partDoc.ComponentDefinition.Sketches3D.Add()\r\n    Dim lines As SketchLines3D = sk.SketchLines3D\r\n\r\n    Dim tg As TransientGeometry = invApp.TransientGeometry\r\n\r\n    Dim minXYZ As Point = bndBox.MinPoint\r\n    Dim minXYmaxZ As Point = tg.CreatePoint(bndBox.MinPoint.X, bndBox.MinPoint.Y, bndBox.MaxPoint.Z)\r\n    Dim minXmaxYZ As Point = tg.CreatePoint(bndBox.MinPoint.X, bndBox.MaxPoint.Y, bndBox.MaxPoint.Z)\r\n    Dim minXZmaxY As Point = tg.CreatePoint(bndBox.MinPoint.X, bndBox.MaxPoint.Y, bndBox.MinPoint.Z)\r\n\r\n    Dim maxXYZ As Point = bndBox.MaxPoint\r\n    Dim maxXYminZ As Point = tg.CreatePoint(bndBox.MaxPoint.X, bndBox.MaxPoint.Y, bndBox.MinPoint.Z)\r\n    Dim maxXZminY As Point = tg.CreatePoint(bndBox.MaxPoint.X, bndBox.MinPoint.Y, bndBox.MaxPoint.Z)\r\n    Dim maxXminYZ As Point = tg.CreatePoint(bndBox.MaxPoint.X, bndBox.MinPoint.Y, bndBox.MinPoint.Z)\r\n\r\n    lines.AddByTwoPoints(minXYZ, minXYmaxZ)\r\n    lines.AddByTwoPoints(minXYZ, minXZmaxY)\r\n    lines.AddByTwoPoints(minXZmaxY, minXmaxYZ)\r\n    lines.AddByTwoPoints(minXYmaxZ, minXmaxYZ)\r\n\r\n    lines.AddByTwoPoints(maxXYZ, maxXYminZ)\r\n    lines.AddByTwoPoints(maxXYZ, maxXZminY)\r\n    lines.AddByTwoPoints(maxXYminZ, maxXminYZ)\r\n    lines.AddByTwoPoints(maxXZminY, maxXminYZ)\r\n\r\n    lines.AddByTwoPoints(minXYZ, maxXminYZ)\r\n    lines.AddByTwoPoints(minXYmaxZ, maxXZminY)\r\n    lines.AddByTwoPoints(minXmaxYZ, maxXYZ)\r\n    lines.AddByTwoPoints(minXZmaxY, maxXYminZ)\r\nEnd Sub\r\n\r\n\r\n' Calculates a tight bounding box around the input body.  An optional\r\n' tolerance argument is available.  This specificies the tolerance in\r\n' centimeters.  If not provided the best existing display mesh is used.\r\nPublic Function calculateTightBoundingBox(body As SurfaceBody, Optional Tolerance As Double = 0) As Box\r\n    Try\r\n        Dim vertCount As Integer\r\n        Dim facetCount As Integer\r\n        Dim vertCoords() As Double = {}\r\n        Dim normVectors() As Double = {}\r\n        Dim vertInds() As Integer = {}\r\n\r\n        ' If the tolerance is zero, use the best display mesh available.\r\n        If Tolerance <= 0 Then\r\n            ' Get the best display mesh available.\r\n            Dim tolCount As Long\r\n            Dim tols() As Double = {}\r\n            Call body.GetExistingFacetTolerances(tolCount, tols)\r\n            Dim bestTol As Double\r\n            bestTol = tols(0)\r\n            For i As Integer = 1 To tolCount - 1\r\n                If tols(i) < bestTol Then\r\n                    bestTol = tols(i)\r\n                End If\r\n            Next\r\n\r\n            body.GetExistingFacets(bestTol, vertCount, facetCount, vertCoords, normVectors, vertInds)\r\n        Else\r\n            ' Calculate a new mesh based on the input tolerance.\r\n            body.CalculateFacets(Tolerance, vertCount, facetCount, vertCoords, normVectors, vertInds)\r\n        End If\r\n\r\n        Dim tg As TransientGeometry = body.Application.TransientGeometry\r\n\r\n        ' Calculate the range of the mesh.\r\n        Dim smallPnt As Point = tg.CreatePoint(vertCoords(0), vertCoords(1), vertCoords(2))\r\n        Dim largePnt As Point = tg.CreatePoint(vertCoords(0), vertCoords(1), vertCoords(2))\r\n        For i As Integer = 1 To vertCount - 1\r\n            Dim vertX As Double = vertCoords(i * 3)\r\n            Dim vertY As Double = vertCoords(i * 3 + 1)\r\n            Dim vertZ As Double = vertCoords(i * 3 + 2)\r\n\r\n            If vertX < smallPnt.X Then\r\n                smallPnt.X = vertX\r\n            End If\r\n\r\n            If vertY < smallPnt.Y Then\r\n                smallPnt.Y = vertY\r\n            End If\r\n\r\n            If vertZ < smallPnt.Z Then\r\n                smallPnt.Z = vertZ\r\n            End If\r\n\r\n            If vertX > largePnt.X Then\r\n                largePnt.X = vertX\r\n            End If\r\n\r\n            If vertY > largePnt.Y Then\r\n                largePnt.Y = vertY\r\n            End If\r\n\r\n            If vertZ > largePnt.Z Then\r\n                largePnt.Z = vertZ\r\n            End If\r\n        Next\r\n\r\n        ' Create and return a Box as the result.\r\n        Dim newBox As Box = tg.CreateBox()\r\n        newBox.MinPoint = smallPnt\r\n        newBox.MaxPoint = largePnt\r\n        Return newBox\r\n    Catch ex As Exception\r\n        Return Nothing\r\n    End Try\r\nEnd Function\r\n"]},
{"created_at": ["April 26, 2017"], "footers": "Brian, Inventor", "title": ["Units and Parameters in Inventor"], "codeSample": []},
{"created_at": ["October 29, 2018"], "footers": "Adam, iLogic, Inventor", "title": ["Troubleshooting, debugging"], "codeSample": ["Sub StitchFeatureCreate_Test()\r\n    Dim oPartDoc As PartDocument\r\n    Set oPartDoc = ThisApplication.ActiveDocument\r\n\r\n    Dim oCompDef As PartComponentDefinition\r\n    Set oCompDef = oPartDoc.ComponentDefinition\r\n    \r\n    Dim oSurfaces As ObjectCollection\r\n    Set oSurfaces = ThisApplication.TransientObjects.CreateObjectCollection\r\n    \r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(1)\r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(2)\r\n    \r\n    Dim oKnitFeature As KnitFeature\r\n    Set oKnitFeature = oCompDef.Features.KnitFeatures.Add(oSurfaces)\r\nEnd Sub", "Sub StitchFeatureCreate_Test()\r\n    Dim oPartDoc As PartDocument\r\n    Set oPartDoc = ThisApplication.ActiveDocument\r\n\r\n    Dim oCompDef As PartComponentDefinition\r\n    Set oCompDef = oPartDoc.ComponentDefinition\r\n    \r\n    Dim oSurfaces As ObjectCollection\r\n    Set oSurfaces = ThisApplication.TransientObjects.CreateObjectCollection\r\n    \r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(1)\r\n    oSurfaces.Add oCompDef.WorkSurfaces.Item(2)\r\n    \r\n    Dim oKnitFeature As KnitFeature\r\n    Set oKnitFeature = oCompDef.Features.KnitFeatures.Add(oSurfaces)\r\nEnd Sub"]},
{"created_at": ["June 16, 2017"], "footers": "Adam, C#, Inventor", "title": ["Use ChromiumWebBrowser from Inventor"], "codeSample": ["private void InitializeChromium()\r\n{\r\n    CefSettings settings = new CefSettings();\r\n    // Get the folder path of the add-in dll\r\n    string assemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\r\n    settings.BrowserSubprocessPath = Path.Combine(assemblyFolder, \"CefSharp.BrowserSubprocess.exe\");\r\n    Cef.Initialize(settings);\r\n\r\n    ChromeWebBrowser = new ChromiumWebBrowser(\"http://www.google.com\");\r\n    ChromeWebBrowser.LoadError += ChromeWebBrowser_LoadError;\r\n\r\n    this.Controls.Add(ChromeWebBrowser);\r\n    ChromeWebBrowser.Dock = DockStyle.Fill;\r\n}", "private void InitializeChromium()\r\n{\r\n    CefSettings settings = new CefSettings();\r\n    // Get the folder path of the add-in dll\r\n    string assemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\r\n    settings.BrowserSubprocessPath = Path.Combine(assemblyFolder, \"CefSharp.BrowserSubprocess.exe\");\r\n    Cef.Initialize(settings);\r\n\r\n    ChromeWebBrowser = new ChromiumWebBrowser(\"http://www.google.com\");\r\n    ChromeWebBrowser.LoadError += ChromeWebBrowser_LoadError;\r\n\r\n    this.Controls.Add(ChromeWebBrowser);\r\n    ChromeWebBrowser.Dock = DockStyle.Fill;\r\n}"]},
{"created_at": ["December 18, 2018"], "footers": "Adam, Announcements, Fusion 360", "title": ["Prepare your add-in for UI Preview"], "codeSample": ["modelingWorkspace_ = workspaces_.itemById('FusionSolidEnvironment')\r\ntoolbarPanels_ = modelingWorkspace_.toolbarPanels\r\ntry:\r\n    # try to add it to the classic ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchPanel')\r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\nexcept:\r\n    # if it fails, try to add it to the new ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchCreatePanel') \r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\n# etc", "def listUIParts():\r\n    try:\r\n        global app, ui\r\n        app = adsk.core.Application.get()\r\n        ui = app.userInterface\r\n        \r\n        fileDialog = ui.createFileDialog()\r\n        fileDialog.isMultiSelectEnabled = False\r\n        fileDialog.title = \"Select file to save the information to\"\r\n        fileDialog.filter = 'Text files (*.txt)'\r\n        fileDialog.filterIndex = 0\r\n        dialogResult = fileDialog.showSave()\r\n        \r\n        if dialogResult == adsk.core.DialogResults.DialogOK:\r\n            filename = fileDialog.filename\r\n        else:\r\n            return\r\n\r\n        result = ''\r\n        for ws in ui.workspaces:\r\n            result += 'workspace name: ' + ws.name + ', id: ' + ws.id + '\\n'\r\n            \r\n            try:\r\n                for tb in ws.toolbarPanels:\r\n                    result += '  toolbarPanel name: ' + tb.name + ', id: ' + tb.id + '\\n'\r\n            except:\r\n                result += '  toolbarPanels not available\\n'\r\n                \r\n        with open(filename, 'w') as outputFile:        \r\n            outputFile.writelines(result)\r\n  \r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc())) ", "modelingWorkspace_ = workspaces_.itemById('FusionSolidEnvironment')\r\ntoolbarPanels_ = modelingWorkspace_.toolbarPanels\r\ntry:\r\n    # try to add it to the classic ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchPanel')\r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\nexcept:\r\n    # if it fails, try to add it to the new ui item\r\n    toolbarPanel_ = toolbarPanels_.itemById('SketchCreatePanel') \r\n    toolbarControlsPanel_ = toolbarPanel_.controls\r\n# etc", "def listUIParts():\r\n    try:\r\n        global app, ui\r\n        app = adsk.core.Application.get()\r\n        ui = app.userInterface\r\n        \r\n        fileDialog = ui.createFileDialog()\r\n        fileDialog.isMultiSelectEnabled = False\r\n        fileDialog.title = \"Select file to save the information to\"\r\n        fileDialog.filter = 'Text files (*.txt)'\r\n        fileDialog.filterIndex = 0\r\n        dialogResult = fileDialog.showSave()\r\n        \r\n        if dialogResult == adsk.core.DialogResults.DialogOK:\r\n            filename = fileDialog.filename\r\n        else:\r\n            return\r\n\r\n        result = ''\r\n        for ws in ui.workspaces:\r\n            result += 'workspace name: ' + ws.name + ', id: ' + ws.id + '\\n'\r\n            \r\n            try:\r\n                for tb in ws.toolbarPanels:\r\n                    result += '  toolbarPanel name: ' + tb.name + ', id: ' + tb.id + '\\n'\r\n            except:\r\n                result += '  toolbarPanels not available\\n'\r\n                \r\n        with open(filename, 'w') as outputFile:        \r\n            outputFile.writelines(result)\r\n  \r\n    except:\r\n        if ui:\r\n            ui.messageBox('Failed:\\n{}'.format(traceback.format_exc())) "]},
{"created_at": ["March 04, 2019"], "footers": "Adam, iProperties", "title": ["Accessing iProperties"], "codeSample": ["Sub GetPropertySets()\r\n  Dim doc As Document\r\n  Set doc = ThisApplication.ActiveDocument\r\n  \r\n  Dim ps As PropertySet\r\n  For Each ps In doc.PropertySets\r\n    Debug.Print ps.Name + \" / \" + ps.InternalName\r\n    Dim p As Property\r\n    For Each p In ps\r\n      Debug.Print \"  \" + p.Name + \" /\" + Str(p.PropId)\r\n    Next\r\n  Next\r\nEnd Sub\r\n", "Inventor Summary Information / {F29F85E0-4FF9-1068-AB91-08002B27B3D9}\r\n  Title / 2\r\n  Subject / 3\r\n  Author / 4\r\n  Keywords / 5\r\n  Comments / 6\r\n  Last Saved By / 8\r\n  Revision Number / 9\r\n  Thumbnail / 17\r\nInventor Document Summary Information / {D5CDD502-2E9C-101B-9397-08002B2CF9AE}\r\n  Category / 2\r\n  Manager / 14\r\n  Company / 15\r\nDesign Tracking Properties / {32853F0F-3444-11D1-9E93-0060B03C1CA6}\r\n  Creation Time / 4\r\n  Part Number / 5\r\n  Project / 7\r\n  Cost Center / 9\r\n  Checked By / 10\r\n  Date Checked / 11\r\n  Engr Approved By / 12\r\n  Engr Date Approved / 13\r\n  User Status / 17\r\n  Material / 20\r\n  Part Property Revision Id / 21\r\n  Catalog Web Link / 23\r\n  Part Icon / 28\r\n  Description / 29\r\n  Vendor / 30\r\n  Document SubType / 31\r\n  Document SubType Name / 32\r\n  Proxy Refresh Date / 33\r\n  Mfg Approved By / 34\r\n  Mfg Date Approved / 35\r\n  Cost / 36\r\n  Standard / 37\r\n  Design Status / 40\r\n  Designer / 41\r\n  Engineer / 42\r\n  Authority / 43\r\n  Parameterized Template / 44\r\n  Template Row / 45\r\n  External Property Revision Id / 46\r\n  Standard Revision / 47\r\n  Manufacturer / 48\r\n  Standards Organization / 49\r\n  Language / 50\r\n  Defer Updates / 51\r\n  Size Designation / 52\r\n  Categories / 56\r\n  Stock Number / 55\r\n  Weld Material / 57\r\n  Mass / 58\r\n  SurfaceArea / 59\r\n  Volume / 60\r\n  Density / 61\r\n  Valid MassProps / 62\r\n  Flat Pattern Width / 63\r\n  Flat Pattern Length / 64\r\n  Flat Pattern Area / 65\r\n  Sheet Metal Rule / 66\r\n  Last Updated With / 67\r\n  Sheet Metal Width / 68\r\n  Sheet Metal Length / 69\r\n  Sheet Metal Area / 70\r\n  Material Identifier / 71\r\n  Appearance / 72\r\n  Flat Pattern Defer Update / 73\r\nInventor User Defined Properties / {D5CDD505-2E9C-101B-9397-08002B2CF9AE}", "Sub GetPropertySets()\r\n  Dim doc As Document\r\n  Set doc = ThisApplication.ActiveDocument\r\n  \r\n  Dim ps As PropertySet\r\n  For Each ps In doc.PropertySets\r\n    Debug.Print ps.Name + \" / \" + ps.InternalName\r\n    Dim p As Property\r\n    For Each p In ps\r\n      Debug.Print \"  \" + p.Name + \" /\" + Str(p.PropId)\r\n    Next\r\n  Next\r\nEnd Sub\r\n", "Inventor Summary Information / {F29F85E0-4FF9-1068-AB91-08002B27B3D9}\r\n  Title / 2\r\n  Subject / 3\r\n  Author / 4\r\n  Keywords / 5\r\n  Comments / 6\r\n  Last Saved By / 8\r\n  Revision Number / 9\r\n  Thumbnail / 17\r\nInventor Document Summary Information / {D5CDD502-2E9C-101B-9397-08002B2CF9AE}\r\n  Category / 2\r\n  Manager / 14\r\n  Company / 15\r\nDesign Tracking Properties / {32853F0F-3444-11D1-9E93-0060B03C1CA6}\r\n  Creation Time / 4\r\n  Part Number / 5\r\n  Project / 7\r\n  Cost Center / 9\r\n  Checked By / 10\r\n  Date Checked / 11\r\n  Engr Approved By / 12\r\n  Engr Date Approved / 13\r\n  User Status / 17\r\n  Material / 20\r\n  Part Property Revision Id / 21\r\n  Catalog Web Link / 23\r\n  Part Icon / 28\r\n  Description / 29\r\n  Vendor / 30\r\n  Document SubType / 31\r\n  Document SubType Name / 32\r\n  Proxy Refresh Date / 33\r\n  Mfg Approved By / 34\r\n  Mfg Date Approved / 35\r\n  Cost / 36\r\n  Standard / 37\r\n  Design Status / 40\r\n  Designer / 41\r\n  Engineer / 42\r\n  Authority / 43\r\n  Parameterized Template / 44\r\n  Template Row / 45\r\n  External Property Revision Id / 46\r\n  Standard Revision / 47\r\n  Manufacturer / 48\r\n  Standards Organization / 49\r\n  Language / 50\r\n  Defer Updates / 51\r\n  Size Designation / 52\r\n  Categories / 56\r\n  Stock Number / 55\r\n  Weld Material / 57\r\n  Mass / 58\r\n  SurfaceArea / 59\r\n  Volume / 60\r\n  Density / 61\r\n  Valid MassProps / 62\r\n  Flat Pattern Width / 63\r\n  Flat Pattern Length / 64\r\n  Flat Pattern Area / 65\r\n  Sheet Metal Rule / 66\r\n  Last Updated With / 67\r\n  Sheet Metal Width / 68\r\n  Sheet Metal Length / 69\r\n  Sheet Metal Area / 70\r\n  Material Identifier / 71\r\n  Appearance / 72\r\n  Flat Pattern Defer Update / 73\r\nInventor User Defined Properties / {D5CDD505-2E9C-101B-9397-08002B2CF9AE}"]},
{"created_at": ["May 27, 2016"], "footers": "Adam, Fusion 360", "title": ["Is point on face"], "codeSample": ["def isPointOnFace():\r\n    app = adsk.core.Application.get()\r\n    ui  = app.userInterface\r\n    \r\n    selections = app.userInterface.activeSelections\r\n    sketchPoint = selections.item(0).entity\r\n    face = selections.item(1).entity\r\n    \r\n    evaluator = face.evaluator\r\n    point = sketchPoint.worldGeometry\r\n    ui.messageBox(\r\n        \"point, x=\" + str(point.x) + \r\n        \"; y=\" + str(point.y) + \r\n        \"; z=\" + str(point.z))\r\n    (returnValue, parameter) = evaluator.getParameterAtPoint(point)\r\n    ui.messageBox(\r\n        \"parameter, u=\" + str(parameter.x) + \r\n        \"; v=\" + str(parameter.y))\r\n    \r\n    if not returnValue:\r\n        # could not get the parameter for it so\r\n        # it's probably not on the face\r\n        ui.messageBox(\"Point not on face\\n(Could not get parameter)\")\r\n        return\r\n        \r\n    (returnValue, projectedPoint) = evaluator.getPointAtParameter(parameter)\r\n    ui.messageBox(\r\n        \"projectedPoint, x=\" + str(projectedPoint.x) + \r\n        \"; y=\" + str(projectedPoint.y) + \r\n        \"; z=\" + str(projectedPoint.z))\r\n    if not projectedPoint.isEqualTo(point):\r\n        # the point has been projected in order to get \r\n        # a parameter so it's not on the face\r\n        ui.messageBox(\r\n            \"Point not on face\\n(Point was projected in order to get parameter)\")\r\n        return\r\n    \r\n    returnValue = evaluator.isParameterOnFace(parameter)\r\n    if not returnValue:\r\n        ui.messageBox(\"Point not on face\\n(isParameterOnFace says so)\")\r\n        return\r\n    \r\n    ui.messageBox(\"Point on face\")", "def isPointOnFace():\r\n    app = adsk.core.Application.get()\r\n    ui  = app.userInterface\r\n    \r\n    selections = app.userInterface.activeSelections\r\n    sketchPoint = selections.item(0).entity\r\n    face = selections.item(1).entity\r\n    \r\n    evaluator = face.evaluator\r\n    point = sketchPoint.worldGeometry\r\n    ui.messageBox(\r\n        \"point, x=\" + str(point.x) + \r\n        \"; y=\" + str(point.y) + \r\n        \"; z=\" + str(point.z))\r\n    (returnValue, parameter) = evaluator.getParameterAtPoint(point)\r\n    ui.messageBox(\r\n        \"parameter, u=\" + str(parameter.x) + \r\n        \"; v=\" + str(parameter.y))\r\n    \r\n    if not returnValue:\r\n        # could not get the parameter for it so\r\n        # it's probably not on the face\r\n        ui.messageBox(\"Point not on face\\n(Could not get parameter)\")\r\n        return\r\n        \r\n    (returnValue, projectedPoint) = evaluator.getPointAtParameter(parameter)\r\n    ui.messageBox(\r\n        \"projectedPoint, x=\" + str(projectedPoint.x) + \r\n        \"; y=\" + str(projectedPoint.y) + \r\n        \"; z=\" + str(projectedPoint.z))\r\n    if not projectedPoint.isEqualTo(point):\r\n        # the point has been projected in order to get \r\n        # a parameter so it's not on the face\r\n        ui.messageBox(\r\n            \"Point not on face\\n(Point was projected in order to get parameter)\")\r\n        return\r\n    \r\n    returnValue = evaluator.isParameterOnFace(parameter)\r\n    if not returnValue:\r\n        ui.messageBox(\"Point not on face\\n(isParameterOnFace says so)\")\r\n        return\r\n    \r\n    ui.messageBox(\"Point on face\")"]},
{"created_at": ["March 06, 2019"], "footers": "Adam, iLogic, Inventor, Visual Basic for Applications (VBA)", "title": ["Automate creation of Named Geometry"], "codeSample": ["' Select Face before running this code\r\nDim iLogicAuto = iLogicVb.Automation\r\n\r\nDim namedEntities = iLogicAuto.GetNamedEntities(ThisDoc.Document)\r\n\r\nDim f = ThisDoc.Document.SelectSet(1)\r\n\r\nnamedEntities.SetName(f, \"MyNewFace\")", "Sub AddNamedGeometry()\r\n ' Select Face before running this code\r\n  Const iLogicAddinGuid As String = \"{3BDD8D79-2179-4B11-8A5A-257B1C0263AC}\"\r\n\r\n  Dim doc As Document\r\n  Set doc = ThisApplication.ActiveDocument\r\n  \r\n  Dim addin As ApplicationAddIn\r\n  Set addin = ThisApplication.ApplicationAddIns.ItemById(iLogicAddinGuid)\r\n\r\n  Dim iLogicAuto As Object\r\n  Set iLogicAuto = addin.Automation\r\n\r\n  Dim namedEntities As Object\r\n  Set namedEntities = iLogicAuto.GetNamedEntities(doc)\r\n\r\n  Dim f As Face\r\n  Set f = doc.SelectSet(1)\r\n\r\n  Call namedEntities.SetName(f, \"MyNewFace\")\r\nEnd Sub", "' Select Face before running this code\r\nDim iLogicAuto = iLogicVb.Automation\r\n\r\nDim namedEntities = iLogicAuto.GetNamedEntities(ThisDoc.Document)\r\n\r\nDim f = ThisDoc.Document.SelectSet(1)\r\n\r\nnamedEntities.SetName(f, \"MyNewFace\")", "Sub AddNamedGeometry()\r\n ' Select Face before running this code\r\n  Const iLogicAddinGuid As String = \"{3BDD8D79-2179-4B11-8A5A-257B1C0263AC}\"\r\n\r\n  Dim doc As Document\r\n  Set doc = ThisApplication.ActiveDocument\r\n  \r\n  Dim addin As ApplicationAddIn\r\n  Set addin = ThisApplication.ApplicationAddIns.ItemById(iLogicAddinGuid)\r\n\r\n  Dim iLogicAuto As Object\r\n  Set iLogicAuto = addin.Automation\r\n\r\n  Dim namedEntities As Object\r\n  Set namedEntities = iLogicAuto.GetNamedEntities(doc)\r\n\r\n  Dim f As Face\r\n  Set f = doc.SelectSet(1)\r\n\r\n  Call namedEntities.SetName(f, \"MyNewFace\")\r\nEnd Sub"]}
]